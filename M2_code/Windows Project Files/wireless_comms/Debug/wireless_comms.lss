
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000036ec  00003780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080010c  0080010c  0000378c  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  0000378c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006e70  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007fd6  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00008005  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032b1  00000000  00000000  0000830d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bcf  00000000  00000000  0000b5be  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001632  00000000  00000000  0000c18d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  0000d7c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000be2  00000000  00000000  0000e0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c96  00000000  00000000  0000ec82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000320  00000000  00000000  00012918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 44 0c 	jmp	0x1888	; 0x1888 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 ee 09 	jmp	0x13dc	; 0x13dc <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	ec ee       	ldi	r30, 0xEC	; 236
     1be:	f6 e3       	ldi	r31, 0x36	; 54
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ac 30       	cpi	r26, 0x0C	; 12
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ac e0       	ldi	r26, 0x0C	; 12
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a1 39       	cpi	r26, 0x91	; 145
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 11 03 	call	0x622	; 0x622 <main>
     1e0:	0c 94 74 1b 	jmp	0x36e8	; 0x36e8 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <calculate_diff_theta>:


// --------------------------------------------------------------
// CALCULATE ERROR IN ORIENTATION and OPTIMAL TURNING
// --------------------------------------------------------------
void calculate_diff_theta(float theta_des, float* err_theta, int* dir_to_turn){
     1e8:	2f 92       	push	r2
     1ea:	3f 92       	push	r3
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	6b 01       	movw	r12, r22
     20e:	7c 01       	movw	r14, r24
     210:	ea 01       	movw	r28, r20
     212:	89 01       	movw	r16, r18
    
    float angle_dir_aux = theta_des-180;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	44 e3       	ldi	r20, 0x34	; 52
     21a:	53 e4       	ldi	r21, 0x43	; 67
     21c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     220:	96 2e       	mov	r9, r22
     222:	87 2e       	mov	r8, r23
     224:	38 2e       	mov	r3, r24
     226:	29 2e       	mov	r2, r25
    float add_360 = 0;
    if (angle_dir_aux < -180)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	44 e3       	ldi	r20, 0x34	; 52
     22e:	53 ec       	ldi	r21, 0xC3	; 195
     230:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	0c f0       	brlt	.+2      	; 0x23a <calculate_diff_theta+0x52>
     238:	c8 c0       	rjmp	.+400    	; 0x3ca <calculate_diff_theta+0x1e2>
    {
        angle_dir_aux += 360;
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	44 eb       	ldi	r20, 0xB4	; 180
     240:	53 e4       	ldi	r21, 0x43	; 67
     242:	69 2d       	mov	r22, r9
     244:	78 2d       	mov	r23, r8
     246:	83 2d       	mov	r24, r3
     248:	92 2d       	mov	r25, r2
     24a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     24e:	26 2e       	mov	r2, r22
     250:	37 2e       	mov	r3, r23
     252:	88 2e       	mov	r8, r24
     254:	99 2e       	mov	r9, r25
            *err_theta = (theta_robot+360) - theta_des;
        else
            *err_theta = (theta_robot) - theta_des;
        *dir_to_turn = 1;
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
     256:	a0 90 10 01 	lds	r10, 0x0110
     25a:	b0 90 11 01 	lds	r11, 0x0111
     25e:	b5 01       	movw	r22, r10
     260:	88 27       	eor	r24, r24
     262:	77 fd       	sbrc	r23, 7
     264:	80 95       	com	r24
     266:	98 2f       	mov	r25, r24
     268:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     26c:	2b 01       	movw	r4, r22
     26e:	3c 01       	movw	r6, r24
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c7 01       	movw	r24, r14
     276:	b6 01       	movw	r22, r12
     278:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
     27c:	88 23       	and	r24, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <calculate_diff_theta+0x9a>
     280:	4e c0       	rjmp	.+156    	; 0x31e <calculate_diff_theta+0x136>
     282:	52 c0       	rjmp	.+164    	; 0x328 <calculate_diff_theta+0x140>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
     284:	a3 01       	movw	r20, r6
     286:	92 01       	movw	r18, r4
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
     290:	88 23       	and	r24, r24
     292:	74 f0       	brlt	.+28     	; 0x2b0 <calculate_diff_theta+0xc8>
    {
        *err_theta = theta_des - theta_robot;
     294:	a3 01       	movw	r20, r6
     296:	92 01       	movw	r18, r4
     298:	c7 01       	movw	r24, r14
     29a:	b6 01       	movw	r22, r12
     29c:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     2a0:	68 83       	st	Y, r22
     2a2:	79 83       	std	Y+1, r23	; 0x01
     2a4:	8a 83       	std	Y+2, r24	; 0x02
     2a6:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
     2a8:	f8 01       	movw	r30, r16
     2aa:	11 82       	std	Z+1, r1	; 0x01
     2ac:	10 82       	st	Z, r1
     2ae:	a6 c0       	rjmp	.+332    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > theta_des))
     2b0:	a3 01       	movw	r20, r6
     2b2:	92 01       	movw	r18, r4
     2b4:	69 2d       	mov	r22, r9
     2b6:	78 2d       	mov	r23, r8
     2b8:	83 2d       	mov	r24, r3
     2ba:	92 2d       	mov	r25, r2
     2bc:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
     2c0:	18 16       	cp	r1, r24
     2c2:	4c f0       	brlt	.+18     	; 0x2d6 <calculate_diff_theta+0xee>
     2c4:	a3 01       	movw	r20, r6
     2c6:	92 01       	movw	r18, r4
     2c8:	c7 01       	movw	r24, r14
     2ca:	b6 01       	movw	r22, r12
     2cc:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     2d0:	88 23       	and	r24, r24
     2d2:	0c f0       	brlt	.+2      	; 0x2d6 <calculate_diff_theta+0xee>
     2d4:	93 c0       	rjmp	.+294    	; 0x3fc <calculate_diff_theta+0x214>
    {
        if (theta_robot < 0)
     2d6:	bb 20       	and	r11, r11
     2d8:	94 f4       	brge	.+36     	; 0x2fe <calculate_diff_theta+0x116>
            *err_theta = (theta_robot+360) - theta_des;
     2da:	b5 01       	movw	r22, r10
     2dc:	68 59       	subi	r22, 0x98	; 152
     2de:	7e 4f       	sbci	r23, 0xFE	; 254
     2e0:	88 27       	eor	r24, r24
     2e2:	77 fd       	sbrc	r23, 7
     2e4:	80 95       	com	r24
     2e6:	98 2f       	mov	r25, r24
     2e8:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     2f4:	68 83       	st	Y, r22
     2f6:	79 83       	std	Y+1, r23	; 0x01
     2f8:	8a 83       	std	Y+2, r24	; 0x02
     2fa:	9b 83       	std	Y+3, r25	; 0x03
     2fc:	0a c0       	rjmp	.+20     	; 0x312 <calculate_diff_theta+0x12a>
        else
            *err_theta = (theta_robot) - theta_des;
     2fe:	a7 01       	movw	r20, r14
     300:	96 01       	movw	r18, r12
     302:	c3 01       	movw	r24, r6
     304:	b2 01       	movw	r22, r4
     306:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     30a:	68 83       	st	Y, r22
     30c:	79 83       	std	Y+1, r23	; 0x01
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	f8 01       	movw	r30, r16
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	6f c0       	rjmp	.+222    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
     31e:	fc e4       	ldi	r31, 0x4C	; 76
     320:	af 16       	cp	r10, r31
     322:	ff ef       	ldi	r31, 0xFF	; 255
     324:	bf 06       	cpc	r11, r31
     326:	74 f4       	brge	.+28     	; 0x344 <calculate_diff_theta+0x15c>
     328:	a3 01       	movw	r20, r6
     32a:	92 01       	movw	r18, r4
     32c:	62 2d       	mov	r22, r2
     32e:	73 2d       	mov	r23, r3
     330:	88 2d       	mov	r24, r8
     332:	99 2d       	mov	r25, r9
     334:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     338:	18 16       	cp	r1, r24
     33a:	2c f1       	brlt	.+74     	; 0x386 <calculate_diff_theta+0x19e>
     33c:	85 eb       	ldi	r24, 0xB5	; 181
     33e:	a8 16       	cp	r10, r24
     340:	b1 04       	cpc	r11, r1
     342:	0c f5       	brge	.+66     	; 0x386 <calculate_diff_theta+0x19e>
    {
        if (theta_robot < 0)
     344:	bb 20       	and	r11, r11
     346:	5c f4       	brge	.+22     	; 0x35e <calculate_diff_theta+0x176>
            *err_theta = theta_des - theta_robot;
     348:	a3 01       	movw	r20, r6
     34a:	92 01       	movw	r18, r4
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     354:	68 83       	st	Y, r22
     356:	79 83       	std	Y+1, r23	; 0x01
     358:	8a 83       	std	Y+2, r24	; 0x02
     35a:	9b 83       	std	Y+3, r25	; 0x03
     35c:	10 c0       	rjmp	.+32     	; 0x37e <calculate_diff_theta+0x196>
        else
            *err_theta = (theta_des + 360) - theta_robot;
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	44 eb       	ldi	r20, 0xB4	; 180
     364:	53 e4       	ldi	r21, 0x43	; 67
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     36e:	a3 01       	movw	r20, r6
     370:	92 01       	movw	r18, r4
     372:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     376:	68 83       	st	Y, r22
     378:	79 83       	std	Y+1, r23	; 0x01
     37a:	8a 83       	std	Y+2, r24	; 0x02
     37c:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
     37e:	f8 01       	movw	r30, r16
     380:	11 82       	std	Z+1, r1	; 0x01
     382:	10 82       	st	Z, r1
     384:	3b c0       	rjmp	.+118    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && (theta_robot > theta_des && theta_robot < angle_dir_aux))
     386:	a3 01       	movw	r20, r6
     388:	92 01       	movw	r18, r4
     38a:	c7 01       	movw	r24, r14
     38c:	b6 01       	movw	r22, r12
     38e:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     392:	88 23       	and	r24, r24
     394:	9c f5       	brge	.+102    	; 0x3fc <calculate_diff_theta+0x214>
     396:	a3 01       	movw	r20, r6
     398:	92 01       	movw	r18, r4
     39a:	62 2d       	mov	r22, r2
     39c:	73 2d       	mov	r23, r3
     39e:	88 2d       	mov	r24, r8
     3a0:	99 2d       	mov	r25, r9
     3a2:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	4c f5       	brge	.+82     	; 0x3fc <calculate_diff_theta+0x214>
    {
        *err_theta = theta_robot - theta_des;
     3aa:	a7 01       	movw	r20, r14
     3ac:	96 01       	movw	r18, r12
     3ae:	c3 01       	movw	r24, r6
     3b0:	b2 01       	movw	r22, r4
     3b2:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     3b6:	68 83       	st	Y, r22
     3b8:	79 83       	std	Y+1, r23	; 0x01
     3ba:	8a 83       	std	Y+2, r24	; 0x02
     3bc:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	f8 01       	movw	r30, r16
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	80 83       	st	Z, r24
     3c8:	19 c0       	rjmp	.+50     	; 0x3fc <calculate_diff_theta+0x214>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
     3ca:	a0 90 10 01 	lds	r10, 0x0110
     3ce:	b0 90 11 01 	lds	r11, 0x0111
     3d2:	b5 01       	movw	r22, r10
     3d4:	88 27       	eor	r24, r24
     3d6:	77 fd       	sbrc	r23, 7
     3d8:	80 95       	com	r24
     3da:	98 2f       	mov	r25, r24
     3dc:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     3e0:	2b 01       	movw	r4, r22
     3e2:	3c 01       	movw	r6, r24
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	69 2d       	mov	r22, r9
     3ea:	78 2d       	mov	r23, r8
     3ec:	83 2d       	mov	r24, r3
     3ee:	92 2d       	mov	r25, r2
     3f0:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	0c f0       	brlt	.+2      	; 0x3fa <calculate_diff_theta+0x212>
     3f8:	45 cf       	rjmp	.-374    	; 0x284 <calculate_diff_theta+0x9c>
     3fa:	5a cf       	rjmp	.-332    	; 0x2b0 <calculate_diff_theta+0xc8>
        *dir_to_turn = 1;
    }else {
        err_theta = 0;
        dir_to_turn = 0;
    }
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	af 90       	pop	r10
     410:	9f 90       	pop	r9
     412:	8f 90       	pop	r8
     414:	7f 90       	pop	r7
     416:	6f 90       	pop	r6
     418:	5f 90       	pop	r5
     41a:	4f 90       	pop	r4
     41c:	3f 90       	pop	r3
     41e:	2f 90       	pop	r2
     420:	08 95       	ret

00000422 <turn_robot>:

// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO TURN ROBOT
// --------------------------------------------------------------
void turn_robot(float theta, int dir, float diff){
	if (dir == 1) {             // Move with a right curve
     422:	41 30       	cpi	r20, 0x01	; 1
     424:	51 05       	cpc	r21, r1
     426:	c9 f4       	brne	.+50     	; 0x45a <turn_robot+0x38>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	51 e4       	ldi	r21, 0x41	; 65
     430:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e8       	ldi	r19, 0x80	; 128
     438:	49 e0       	ldi	r20, 0x09	; 9
     43a:	55 e4       	ldi	r21, 0x45	; 69
     43c:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     440:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     444:	70 93 8b 00 	sts	0x008B, r23
     448:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
     44c:	70 93 8d 00 	sts	0x008D, r23
     450:	60 93 8c 00 	sts	0x008C, r22
		
		set(PORTB,3);
     454:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTD,3);
     456:	5b 98       	cbi	0x0b, 3	; 11
     458:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1C = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);;
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	51 e4       	ldi	r21, 0x41	; 65
     462:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e8       	ldi	r19, 0x80	; 128
     46a:	49 e0       	ldi	r20, 0x09	; 9
     46c:	55 e4       	ldi	r21, 0x45	; 69
     46e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     472:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     476:	70 93 8d 00 	sts	0x008D, r23
     47a:	60 93 8c 00 	sts	0x008C, r22
		OCR1B = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);
     47e:	70 93 8b 00 	sts	0x008B, r23
     482:	60 93 8a 00 	sts	0x008A, r22
		
		clear(PORTB,3);
     486:	2b 98       	cbi	0x05, 3	; 5
		set(PORTD,3);
     488:	5b 9a       	sbi	0x0b, 3	; 11
     48a:	08 95       	ret

0000048c <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f9 f4       	brne	.+62     	; 0x4ce <move_robot_to_puck+0x42>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
     490:	88 e2       	ldi	r24, 0x28	; 40
     492:	9a e0       	ldi	r25, 0x0A	; 10
     494:	90 93 8b 00 	sts	0x008B, r25
     498:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
     49c:	88 27       	eor	r24, r24
     49e:	77 fd       	sbrc	r23, 7
     4a0:	80 95       	com	r24
     4a2:	98 2f       	mov	r25, r24
     4a4:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     4a8:	2a e0       	ldi	r18, 0x0A	; 10
     4aa:	37 ed       	ldi	r19, 0xD7	; 215
     4ac:	43 e2       	ldi	r20, 0x23	; 35
     4ae:	5c e3       	ldi	r21, 0x3C	; 60
     4b0:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	4f e2       	ldi	r20, 0x2F	; 47
     4ba:	55 e4       	ldi	r21, 0x45	; 69
     4bc:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     4c0:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     4c4:	70 93 8d 00 	sts	0x008D, r23
     4c8:	60 93 8c 00 	sts	0x008C, r22
     4cc:	1e c0       	rjmp	.+60     	; 0x50a <move_robot_to_puck+0x7e>
		
	}
	else
	{                      // Move with a right curve
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
     4ce:	88 27       	eor	r24, r24
     4d0:	77 fd       	sbrc	r23, 7
     4d2:	80 95       	com	r24
     4d4:	98 2f       	mov	r25, r24
     4d6:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     4da:	2a e0       	ldi	r18, 0x0A	; 10
     4dc:	37 ed       	ldi	r19, 0xD7	; 215
     4de:	43 e2       	ldi	r20, 0x23	; 35
     4e0:	5c e3       	ldi	r21, 0x3C	; 60
     4e2:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e8       	ldi	r19, 0x80	; 128
     4ea:	42 e2       	ldi	r20, 0x22	; 34
     4ec:	55 e4       	ldi	r21, 0x45	; 69
     4ee:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     4f2:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     4f6:	70 93 8b 00 	sts	0x008B, r23
     4fa:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
     4fe:	80 ef       	ldi	r24, 0xF0	; 240
     500:	9a e0       	ldi	r25, 0x0A	; 10
     502:	90 93 8d 00 	sts	0x008D, r25
     506:	80 93 8c 00 	sts	0x008C, r24
	}
	
	clear(PORTB,3);
     50a:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     50c:	5b 98       	cbi	0x0b, 3	; 11
     50e:	08 95       	ret

00000510 <move_robot_after_get_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_after_get_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	09 f5       	brne	.+66     	; 0x556 <move_robot_after_get_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT);
     514:	88 eb       	ldi	r24, 0xB8	; 184
     516:	9b e0       	ldi	r25, 0x0B	; 11
     518:	90 93 8b 00 	sts	0x008B, r25
     51c:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT+diff*Kp_move_with_puck);
     520:	88 27       	eor	r24, r24
     522:	77 fd       	sbrc	r23, 7
     524:	80 95       	com	r24
     526:	98 2f       	mov	r25, r24
     528:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     52c:	2a e0       	ldi	r18, 0x0A	; 10
     52e:	37 ed       	ldi	r19, 0xD7	; 215
     530:	43 e2       	ldi	r20, 0x23	; 35
     532:	5c e3       	ldi	r21, 0x3C	; 60
     534:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e4       	ldi	r19, 0x40	; 64
     53c:	4e e4       	ldi	r20, 0x4E	; 78
     53e:	55 e4       	ldi	r21, 0x45	; 69
     540:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     544:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     548:	70 93 8d 00 	sts	0x008D, r23
     54c:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
     550:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
     552:	5b 98       	cbi	0x0b, 3	; 11
     554:	08 95       	ret
	}
	else
	{                      // Move with a right curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT+diff*Kp_move_with_puck);
     556:	88 27       	eor	r24, r24
     558:	77 fd       	sbrc	r23, 7
     55a:	80 95       	com	r24
     55c:	98 2f       	mov	r25, r24
     55e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     562:	2a e0       	ldi	r18, 0x0A	; 10
     564:	37 ed       	ldi	r19, 0xD7	; 215
     566:	43 e2       	ldi	r20, 0x23	; 35
     568:	5c e3       	ldi	r21, 0x3C	; 60
     56a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e8       	ldi	r19, 0x80	; 128
     572:	4b e3       	ldi	r20, 0x3B	; 59
     574:	55 e4       	ldi	r21, 0x45	; 69
     576:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     57a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     57e:	70 93 8b 00 	sts	0x008B, r23
     582:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT);
     586:	84 ee       	ldi	r24, 0xE4	; 228
     588:	9c e0       	ldi	r25, 0x0C	; 12
     58a:	90 93 8d 00 	sts	0x008D, r25
     58e:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
     592:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
     594:	5b 98       	cbi	0x0b, 3	; 11
     596:	08 95       	ret

00000598 <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
     598:	10 92 8b 00 	sts	0x008B, r1
     59c:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
     5a0:	10 92 8d 00 	sts	0x008D, r1
     5a4:	10 92 8c 00 	sts	0x008C, r1
     5a8:	08 95       	ret

000005aa <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
     5aa:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
     5ac:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
     5ae:	88 e9       	ldi	r24, 0x98	; 152
     5b0:	98 e0       	ldi	r25, 0x08	; 8
     5b2:	90 93 8d 00 	sts	0x008D, r25
     5b6:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
     5ba:	8c ef       	ldi	r24, 0xFC	; 252
     5bc:	98 e0       	ldi	r25, 0x08	; 8
     5be:	90 93 8b 00 	sts	0x008B, r25
     5c2:	80 93 8a 00 	sts	0x008A, r24
     5c6:	08 95       	ret

000005c8 <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
     5c8:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
     5ca:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
     5cc:	88 e9       	ldi	r24, 0x98	; 152
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 8d 00 	sts	0x008D, r25
     5d4:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
     5d8:	8c ef       	ldi	r24, 0xFC	; 252
     5da:	98 e0       	ldi	r25, 0x08	; 8
     5dc:	90 93 8b 00 	sts	0x008B, r25
     5e0:	80 93 8a 00 	sts	0x008A, r24
     5e4:	08 95       	ret

000005e6 <circle_left>:
// --------------------------------------------------------------
// CIRCLE_LEFT
// --------------------------------------------------------------
void circle_left()
{
	clear(PORTB,3);
     5e6:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     5e8:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
     5ea:	88 e9       	ldi	r24, 0x98	; 152
     5ec:	98 e0       	ldi	r25, 0x08	; 8
     5ee:	90 93 8b 00 	sts	0x008B, r25
     5f2:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
     5f6:	82 e2       	ldi	r24, 0x22	; 34
     5f8:	97 e0       	ldi	r25, 0x07	; 7
     5fa:	90 93 8d 00 	sts	0x008D, r25
     5fe:	80 93 8c 00 	sts	0x008C, r24
     602:	08 95       	ret

00000604 <circle_right>:
// --------------------------------------------------------------
// CIRCLE_RIGHT
// --------------------------------------------------------------
void circle_right()
{
	clear(PORTB,3);
     604:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     606:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
     608:	88 ec       	ldi	r24, 0xC8	; 200
     60a:	97 e0       	ldi	r25, 0x07	; 7
     60c:	90 93 8b 00 	sts	0x008B, r25
     610:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
     614:	80 e6       	ldi	r24, 0x60	; 96
     616:	99 e0       	ldi	r25, 0x09	; 9
     618:	90 93 8d 00 	sts	0x008D, r25
     61c:	80 93 8c 00 	sts	0x008C, r24
     620:	08 95       	ret

00000622 <main>:
int state = INITIAL_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	cc 56       	subi	r28, 0x6C	; 108
     62c:	d1 09       	sbc	r29, r1
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
     638:	20 e8       	ldi	r18, 0x80	; 128
     63a:	25 bf       	out	0x35, r18	; 53
     63c:	25 bf       	out	0x35, r18	; 53
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
     63e:	19 82       	std	Y+1, r1	; 0x01
     640:	1a 82       	std	Y+2, r1	; 0x02
     642:	1b 82       	std	Y+3, r1	; 0x03
     644:	1c 82       	std	Y+4, r1	; 0x04
    int bank = 22;
     646:	86 e1       	ldi	r24, 0x16	; 22
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9e 83       	std	Y+6, r25	; 0x06
     64c:	8d 83       	std	Y+5, r24	; 0x05
	int cam_X = 0, cam_Y = 0, commands_var = 0;
     64e:	18 86       	std	Y+8, r1	; 0x08
     650:	1f 82       	std	Y+7, r1	; 0x07
     652:	1a 86       	std	Y+10, r1	; 0x0a
     654:	19 86       	std	Y+9, r1	; 0x09
	
	int circle_started_before = 0;
    
	
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
     656:	fe 01       	movw	r30, r28
     658:	3b 96       	adiw	r30, 0x0b	; 11
     65a:	80 e2       	ldi	r24, 0x20	; 32
     65c:	df 01       	movw	r26, r30
     65e:	1d 92       	st	X+, r1
     660:	8a 95       	dec	r24
     662:	e9 f7       	brne	.-6      	; 0x65e <main+0x3c>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
     664:	25 96       	adiw	r28, 0x05	; 5
     666:	1f ae       	std	Y+63, r1	; 0x3f
     668:	1e ae       	std	Y+62, r1	; 0x3e
     66a:	25 97       	sbiw	r28, 0x05	; 5
     66c:	27 96       	adiw	r28, 0x07	; 7
     66e:	1f ae       	std	Y+63, r1	; 0x3f
     670:	1e ae       	std	Y+62, r1	; 0x3e
     672:	27 97       	sbiw	r28, 0x07	; 7
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
     674:	e1 e6       	ldi	r30, 0x61	; 97
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	20 83       	st	Z, r18
     67a:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
     67c:	6a 9a       	sbi	0x0d, 2	; 13
     67e:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
     680:	6e 9a       	sbi	0x0d, 6	; 13
     682:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
     684:	6e 9a       	sbi	0x0d, 6	; 13
     686:	76 98       	cbi	0x0e, 6	; 14
    
    m_bus_init();                       // Initialize bus
     688:	0e 94 49 0b 	call	0x1692	; 0x1692 <m_bus_init>
    init_ports();                       // Initialize ports
     68c:	0e 94 06 0a 	call	0x140c	; 0x140c <init_ports>
    set_timer1();                       // Set timer 1 for motor
     690:	0e 94 13 0b 	call	0x1626	; 0x1626 <set_timer1>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
     694:	0e 94 c1 0a 	call	0x1582	; 0x1582 <set_timer4>
    init_analog();                      // Set the ADC System
     698:	0e 94 e0 0a 	call	0x15c0	; 0x15c0 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
     69c:	0e 94 ba 0e 	call	0x1d74	; 0x1d74 <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
     6a0:	88 23       	and	r24, r24
     6a2:	e1 f3       	breq	.-8      	; 0x69c <main+0x7a>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
	m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	65 ef       	ldi	r22, 0xF5	; 245
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 5a 0b 	call	0x16b4	; 0x16b4 <m_rf_open>
    
    sei();                              // Enable interruptions
     6ae:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
     6b0:	6e 9a       	sbi	0x0d, 6	; 13
     6b2:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
     6b4:	10 92 1a 01 	sts	0x011A, r1
     6b8:	10 92 1b 01 	sts	0x011B, r1
     6bc:	10 92 1c 01 	sts	0x011C, r1
     6c0:	10 92 1d 01 	sts	0x011D, r1
    TARGETS_Y[0] = 0;
     6c4:	10 92 12 01 	sts	0x0112, r1
     6c8:	10 92 13 01 	sts	0x0113, r1
     6cc:	10 92 14 01 	sts	0x0114, r1
     6d0:	10 92 15 01 	sts	0x0115, r1
    TARGETS_X[1] = 0;
     6d4:	10 92 1e 01 	sts	0x011E, r1
     6d8:	10 92 1f 01 	sts	0x011F, r1
     6dc:	10 92 20 01 	sts	0x0120, r1
     6e0:	10 92 21 01 	sts	0x0121, r1
    TARGETS_Y[1] = 0;
     6e4:	10 92 16 01 	sts	0x0116, r1
     6e8:	10 92 17 01 	sts	0x0117, r1
     6ec:	10 92 18 01 	sts	0x0118, r1
     6f0:	10 92 19 01 	sts	0x0119, r1
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
     6f4:	a1 96       	adiw	r28, 0x21	; 33
     6f6:	1c ae       	std	Y+60, r1	; 0x3c
     6f8:	1d ae       	std	Y+61, r1	; 0x3d
     6fa:	1e ae       	std	Y+62, r1	; 0x3e
     6fc:	1f ae       	std	Y+63, r1	; 0x3f
     6fe:	a1 97       	sbiw	r28, 0x21	; 33
	int have_puck = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
     700:	a6 96       	adiw	r28, 0x26	; 38
     702:	1f ae       	std	Y+63, r1	; 0x3f
     704:	a6 97       	sbiw	r28, 0x26	; 38
     706:	a7 96       	adiw	r28, 0x27	; 39
     708:	1f ae       	std	Y+63, r1	; 0x3f
     70a:	a7 97       	sbiw	r28, 0x27	; 39
     70c:	a8 96       	adiw	r28, 0x28	; 40
     70e:	1f ae       	std	Y+63, r1	; 0x3f
     710:	a8 97       	sbiw	r28, 0x28	; 40
     712:	a9 96       	adiw	r28, 0x29	; 41
     714:	1f ae       	std	Y+63, r1	; 0x3f
     716:	a9 97       	sbiw	r28, 0x29	; 41
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
     718:	6d 96       	adiw	r28, 0x1d	; 29
     71a:	1f ae       	std	Y+63, r1	; 0x3f
     71c:	1e ae       	std	Y+62, r1	; 0x3e
     71e:	6d 97       	sbiw	r28, 0x1d	; 29
     720:	2f 96       	adiw	r28, 0x0f	; 15
     722:	1f ae       	std	Y+63, r1	; 0x3f
     724:	1e ae       	std	Y+62, r1	; 0x3e
     726:	2f 97       	sbiw	r28, 0x0f	; 15
     728:	61 96       	adiw	r28, 0x11	; 17
     72a:	1f ae       	std	Y+63, r1	; 0x3f
     72c:	1e ae       	std	Y+62, r1	; 0x3e
     72e:	61 97       	sbiw	r28, 0x11	; 17
     730:	63 96       	adiw	r28, 0x13	; 19
     732:	1f ae       	std	Y+63, r1	; 0x3f
     734:	1e ae       	std	Y+62, r1	; 0x3e
     736:	63 97       	sbiw	r28, 0x13	; 19
     738:	65 96       	adiw	r28, 0x15	; 21
     73a:	1f ae       	std	Y+63, r1	; 0x3f
     73c:	1e ae       	std	Y+62, r1	; 0x3e
     73e:	65 97       	sbiw	r28, 0x15	; 21
     740:	67 96       	adiw	r28, 0x17	; 23
     742:	1f ae       	std	Y+63, r1	; 0x3f
     744:	1e ae       	std	Y+62, r1	; 0x3e
     746:	67 97       	sbiw	r28, 0x17	; 23
     748:	41 2c       	mov	r4, r1
     74a:	51 2c       	mov	r5, r1
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
     74c:	a5 96       	adiw	r28, 0x25	; 37
     74e:	1f ae       	std	Y+63, r1	; 0x3f
     750:	1e ae       	std	Y+62, r1	; 0x3e
     752:	a5 97       	sbiw	r28, 0x25	; 37
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
     754:	6b 96       	adiw	r28, 0x1b	; 27
     756:	1f ae       	std	Y+63, r1	; 0x3f
     758:	1e ae       	std	Y+62, r1	; 0x3e
     75a:	6b 97       	sbiw	r28, 0x1b	; 27
        if (flag_timer == 1)
		{
             	output_buffer[0] = 1;
				output_buffer[1] = state;
				output_buffer[2] = x_robot;
				output_buffer[3] = y_robot;
     75c:	fe 01       	movw	r30, r28
     75e:	eb 5b       	subi	r30, 0xBB	; 187
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	29 96       	adiw	r28, 0x09	; 9
     764:	ff af       	std	Y+63, r31	; 0x3f
     766:	ee af       	std	Y+62, r30	; 0x3e
     768:	29 97       	sbiw	r28, 0x09	; 9
            
        // If data received correctly
        if (wii_OK)
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
     76a:	9e 01       	movw	r18, r28
     76c:	27 5f       	subi	r18, 0xF7	; 247
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
     770:	2b 96       	adiw	r28, 0x0b	; 11
     772:	3f af       	std	Y+63, r19	; 0x3f
     774:	2e af       	std	Y+62, r18	; 0x3e
     776:	2b 97       	sbiw	r28, 0x0b	; 11
     778:	ae 01       	movw	r20, r28
     77a:	49 5f       	subi	r20, 0xF9	; 249
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	2d 96       	adiw	r28, 0x0d	; 13
     780:	5f af       	std	Y+63, r21	; 0x3f
     782:	4e af       	std	Y+62, r20	; 0x3e
     784:	2d 97       	sbiw	r28, 0x0d	; 13
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
     786:	0f 2e       	mov	r0, r31
     788:	fa e7       	ldi	r31, 0x7A	; 122
     78a:	6f 2e       	mov	r6, r31
     78c:	71 2c       	mov	r7, r1
     78e:	f0 2d       	mov	r31, r0
                    break;
                case(2):
                    PT3_right_inside = ADC;
                    break;
                case(3):
					PT4_right_outside = ADC;
     790:	0f 2e       	mov	r0, r31
     792:	f8 e7       	ldi	r31, 0x78	; 120
     794:	2f 2e       	mov	r2, r31
     796:	31 2c       	mov	r3, r1
     798:	f0 2d       	mov	r31, r0
     79a:	27 c0       	rjmp	.+78     	; 0x7ea <main+0x1c8>
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	6b 96       	adiw	r28, 0x1b	; 27
     7a2:	9f af       	std	Y+63, r25	; 0x3f
     7a4:	8e af       	std	Y+62, r24	; 0x3e
     7a6:	6b 97       	sbiw	r28, 0x1b	; 27
     7a8:	20 c0       	rjmp	.+64     	; 0x7ea <main+0x1c8>
					}
					
					
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
						status_go_to_goal = 1;
     7aa:	a1 e0       	ldi	r26, 0x01	; 1
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	6b 96       	adiw	r28, 0x1b	; 27
     7b0:	bf af       	std	Y+63, r27	; 0x3f
     7b2:	ae af       	std	Y+62, r26	; 0x3e
     7b4:	6b 97       	sbiw	r28, 0x1b	; 27
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <main+0x1c8>
				else if (status_go_to_goal == 1)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
     7b8:	e2 e0       	ldi	r30, 0x02	; 2
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	6b 96       	adiw	r28, 0x1b	; 27
     7be:	ff af       	std	Y+63, r31	; 0x3f
     7c0:	ee af       	std	Y+62, r30	; 0x3e
     7c2:	6b 97       	sbiw	r28, 0x1b	; 27
     7c4:	12 c0       	rjmp	.+36     	; 0x7ea <main+0x1c8>
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 0;
     7c6:	6b 96       	adiw	r28, 0x1b	; 27
     7c8:	1f ae       	std	Y+63, r1	; 0x3f
     7ca:	1e ae       	std	Y+62, r1	; 0x3e
     7cc:	6b 97       	sbiw	r28, 0x1b	; 27
     7ce:	0d c0       	rjmp	.+26     	; 0x7ea <main+0x1c8>
					calculate_diff_theta(0,&diff_theta, &bank);
				
				
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 3;
     7d0:	23 e0       	ldi	r18, 0x03	; 3
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	6b 96       	adiw	r28, 0x1b	; 27
     7d6:	3f af       	std	Y+63, r19	; 0x3f
     7d8:	2e af       	std	Y+62, r18	; 0x3e
     7da:	6b 97       	sbiw	r28, 0x1b	; 27
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <main+0x1c8>
		                 
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
						
						if (diff_theta <20)
						{
							status_go_to_goal = 1;
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	6b 96       	adiw	r28, 0x1b	; 27
     7e4:	5f af       	std	Y+63, r21	; 0x3f
     7e6:	4e af       	std	Y+62, r20	; 0x3e
     7e8:	6b 97       	sbiw	r28, 0x1b	; 27
    while (1)
    {
		 //--------------------------------------------------------------
         //SEND COMMANDS
         //--------------------------------------------------------------
        if (flag_timer == 1)
     7ea:	80 91 0e 01 	lds	r24, 0x010E
     7ee:	90 91 0f 01 	lds	r25, 0x010F
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <main+0x1d6>
     7f6:	b8 c0       	rjmp	.+368    	; 0x968 <main+0x346>
		{
             	output_buffer[0] = 1;
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	8b 87       	std	Y+11, r24	; 0x0b
				output_buffer[1] = state;
     7fc:	80 91 0c 01 	lds	r24, 0x010C
     800:	8c 87       	std	Y+12, r24	; 0x0c
				output_buffer[2] = x_robot;
     802:	24 96       	adiw	r28, 0x04	; 4
     804:	8f ad       	ldd	r24, Y+63	; 0x3f
     806:	24 97       	sbiw	r28, 0x04	; 4
     808:	8d 87       	std	Y+13, r24	; 0x0d
				output_buffer[3] = y_robot;
     80a:	26 96       	adiw	r28, 0x06	; 6
     80c:	8f ad       	ldd	r24, Y+63	; 0x3f
     80e:	26 97       	sbiw	r28, 0x06	; 6
     810:	8e 87       	std	Y+14, r24	; 0x0e
                
				aux_conversion = div(theta_robot,128);
     812:	60 e8       	ldi	r22, 0x80	; 128
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 91 10 01 	lds	r24, 0x0110
     81a:	90 91 11 01 	lds	r25, 0x0111
     81e:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[4] = (signed char)aux_conversion.quot;
     822:	6f 87       	std	Y+15, r22	; 0x0f
				output_buffer[5] = (signed char)aux_conversion.rem;
     824:	88 8b       	std	Y+16, r24	; 0x10
                
				output_buffer[6] = (signed char)status_go_to_goal;
     826:	6a 96       	adiw	r28, 0x1a	; 26
     828:	5f ad       	ldd	r21, Y+63	; 0x3f
     82a:	6a 97       	sbiw	r28, 0x1a	; 26
     82c:	59 8b       	std	Y+17, r21	; 0x11
                
				aux_conversion = div((int)dir_angle,128);
     82e:	a6 96       	adiw	r28, 0x26	; 38
     830:	5f ad       	ldd	r21, Y+63	; 0x3f
     832:	a6 97       	sbiw	r28, 0x26	; 38
     834:	a7 96       	adiw	r28, 0x27	; 39
     836:	4f ad       	ldd	r20, Y+63	; 0x3f
     838:	a7 97       	sbiw	r28, 0x27	; 39
     83a:	a8 96       	adiw	r28, 0x28	; 40
     83c:	3f ad       	ldd	r19, Y+63	; 0x3f
     83e:	a8 97       	sbiw	r28, 0x28	; 40
     840:	a9 96       	adiw	r28, 0x29	; 41
     842:	2f ad       	ldd	r18, Y+63	; 0x3f
     844:	a9 97       	sbiw	r28, 0x29	; 41
     846:	65 2f       	mov	r22, r21
     848:	74 2f       	mov	r23, r20
     84a:	83 2f       	mov	r24, r19
     84c:	92 2f       	mov	r25, r18
     84e:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     852:	dc 01       	movw	r26, r24
     854:	cb 01       	movw	r24, r22
     856:	60 e8       	ldi	r22, 0x80	; 128
     858:	70 e0       	ldi	r23, 0x00	; 0
     85a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[7] = (signed char)aux_conversion.quot;
     85e:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[8] = (signed char)aux_conversion.rem;
     860:	8b 8b       	std	Y+19, r24	; 0x13
                
				aux_conversion = div((int)dist_goal,128);
     862:	a1 96       	adiw	r28, 0x21	; 33
     864:	6c ad       	ldd	r22, Y+60	; 0x3c
     866:	7d ad       	ldd	r23, Y+61	; 0x3d
     868:	8e ad       	ldd	r24, Y+62	; 0x3e
     86a:	9f ad       	ldd	r25, Y+63	; 0x3f
     86c:	a1 97       	sbiw	r28, 0x21	; 33
     86e:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     872:	dc 01       	movw	r26, r24
     874:	cb 01       	movw	r24, r22
     876:	60 e8       	ldi	r22, 0x80	; 128
     878:	70 e0       	ldi	r23, 0x00	; 0
     87a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[9] = (signed char)aux_conversion.quot;
     87e:	6c 8b       	std	Y+20, r22	; 0x14
				output_buffer[10] = (signed char)aux_conversion.rem;
     880:	8d 8b       	std	Y+21, r24	; 0x15
                
				aux_conversion = div(cam_X,128);
     882:	60 e8       	ldi	r22, 0x80	; 128
     884:	70 e0       	ldi	r23, 0x00	; 0
     886:	8f 81       	ldd	r24, Y+7	; 0x07
     888:	98 85       	ldd	r25, Y+8	; 0x08
     88a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[11] = (signed char)aux_conversion.quot;
     88e:	6e 8b       	std	Y+22, r22	; 0x16
				output_buffer[12] = (signed char)aux_conversion.rem;
     890:	8f 8b       	std	Y+23, r24	; 0x17
                
				aux_conversion = div(cam_Y,128);
     892:	60 e8       	ldi	r22, 0x80	; 128
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	89 85       	ldd	r24, Y+9	; 0x09
     898:	9a 85       	ldd	r25, Y+10	; 0x0a
     89a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[13] = (signed char)aux_conversion.quot;
     89e:	68 8f       	std	Y+24, r22	; 0x18
				output_buffer[14] = (signed char)aux_conversion.rem;
     8a0:	89 8f       	std	Y+25, r24	; 0x19
                
				//output_buffer[15] = (signed char)commands_var;
				output_buffer[15] = (signed char)bank;
     8a2:	8d 81       	ldd	r24, Y+5	; 0x05
     8a4:	8a 8f       	std	Y+26, r24	; 0x1a
                
				aux_conversion = div((int)diff_theta,128);
     8a6:	69 81       	ldd	r22, Y+1	; 0x01
     8a8:	7a 81       	ldd	r23, Y+2	; 0x02
     8aa:	8b 81       	ldd	r24, Y+3	; 0x03
     8ac:	9c 81       	ldd	r25, Y+4	; 0x04
     8ae:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     8b2:	dc 01       	movw	r26, r24
     8b4:	cb 01       	movw	r24, r22
     8b6:	60 e8       	ldi	r22, 0x80	; 128
     8b8:	70 e0       	ldi	r23, 0x00	; 0
     8ba:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[16] = (signed char)aux_conversion.quot;
     8be:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[17] = (signed char)aux_conversion.rem;
     8c0:	8c 8f       	std	Y+28, r24	; 0x1c
                
				aux_conversion = div(PT1_left_outside,128);
     8c2:	60 e8       	ldi	r22, 0x80	; 128
     8c4:	70 e0       	ldi	r23, 0x00	; 0
     8c6:	c2 01       	movw	r24, r4
     8c8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[18] = (signed char)aux_conversion.quot;
     8cc:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[19] = (signed char)aux_conversion.rem;
     8ce:	8e 8f       	std	Y+30, r24	; 0x1e
                
				aux_conversion = div(PT2_left_inside,128);
     8d0:	60 e8       	ldi	r22, 0x80	; 128
     8d2:	70 e0       	ldi	r23, 0x00	; 0
     8d4:	67 96       	adiw	r28, 0x17	; 23
     8d6:	8e ad       	ldd	r24, Y+62	; 0x3e
     8d8:	9f ad       	ldd	r25, Y+63	; 0x3f
     8da:	67 97       	sbiw	r28, 0x17	; 23
     8dc:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[20] = (signed char)aux_conversion.quot;
     8e0:	6f 8f       	std	Y+31, r22	; 0x1f
				output_buffer[21] = (signed char)aux_conversion.rem;
     8e2:	88 a3       	std	Y+32, r24	; 0x20
                
				aux_conversion = div(PT3_right_inside,128);
     8e4:	60 e8       	ldi	r22, 0x80	; 128
     8e6:	70 e0       	ldi	r23, 0x00	; 0
     8e8:	65 96       	adiw	r28, 0x15	; 21
     8ea:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ec:	9f ad       	ldd	r25, Y+63	; 0x3f
     8ee:	65 97       	sbiw	r28, 0x15	; 21
     8f0:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[22] = (signed char)aux_conversion.quot;
     8f4:	69 a3       	std	Y+33, r22	; 0x21
				output_buffer[23] = (signed char)aux_conversion.rem;
     8f6:	8a a3       	std	Y+34, r24	; 0x22
                
				aux_conversion = div(PT4_right_outside,128);
     8f8:	60 e8       	ldi	r22, 0x80	; 128
     8fa:	70 e0       	ldi	r23, 0x00	; 0
     8fc:	63 96       	adiw	r28, 0x13	; 19
     8fe:	8e ad       	ldd	r24, Y+62	; 0x3e
     900:	9f ad       	ldd	r25, Y+63	; 0x3f
     902:	63 97       	sbiw	r28, 0x13	; 19
     904:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[24] = (signed char)aux_conversion.quot;
     908:	6b a3       	std	Y+35, r22	; 0x23
				output_buffer[25] = (signed char)aux_conversion.rem;
     90a:	8c a3       	std	Y+36, r24	; 0x24
                
				aux_conversion = div(PT5_back_right,128);
     90c:	60 e8       	ldi	r22, 0x80	; 128
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	61 96       	adiw	r28, 0x11	; 17
     912:	8e ad       	ldd	r24, Y+62	; 0x3e
     914:	9f ad       	ldd	r25, Y+63	; 0x3f
     916:	61 97       	sbiw	r28, 0x11	; 17
     918:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[26] = (signed char)aux_conversion.quot;
     91c:	6d a3       	std	Y+37, r22	; 0x25
				output_buffer[27] = (signed char)aux_conversion.rem;
     91e:	8e a3       	std	Y+38, r24	; 0x26
                
				aux_conversion = div(PT6_back_left,128);
     920:	60 e8       	ldi	r22, 0x80	; 128
     922:	70 e0       	ldi	r23, 0x00	; 0
     924:	2f 96       	adiw	r28, 0x0f	; 15
     926:	8e ad       	ldd	r24, Y+62	; 0x3e
     928:	9f ad       	ldd	r25, Y+63	; 0x3f
     92a:	2f 97       	sbiw	r28, 0x0f	; 15
     92c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[28] = (signed char)aux_conversion.quot;
     930:	6f a3       	std	Y+39, r22	; 0x27
				output_buffer[29] = (signed char)aux_conversion.rem;
     932:	88 a7       	std	Y+40, r24	; 0x28
                
				aux_conversion = div(PT7_have_puck,128);
     934:	60 e8       	ldi	r22, 0x80	; 128
     936:	70 e0       	ldi	r23, 0x00	; 0
     938:	6d 96       	adiw	r28, 0x1d	; 29
     93a:	8e ad       	ldd	r24, Y+62	; 0x3e
     93c:	9f ad       	ldd	r25, Y+63	; 0x3f
     93e:	6d 97       	sbiw	r28, 0x1d	; 29
     940:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__divmodhi4>
				output_buffer[30] = (signed char)aux_conversion.quot;
     944:	69 a7       	std	Y+41, r22	; 0x29
				output_buffer[31] = (signed char)aux_conversion.rem;
     946:	8a a7       	std	Y+42, r24	; 0x2a
                
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
     948:	40 e2       	ldi	r20, 0x20	; 32
     94a:	be 01       	movw	r22, r28
     94c:	65 5f       	subi	r22, 0xF5	; 245
     94e:	7f 4f       	sbci	r23, 0xFF	; 255
     950:	80 e6       	ldi	r24, 0x60	; 96
     952:	0e 94 b0 0b 	call	0x1760	; 0x1760 <m_rf_send>
				m_red(TOGGLE);
     956:	6e 9a       	sbi	0x0d, 6	; 13
     958:	9e b1       	in	r25, 0x0e	; 14
     95a:	80 e4       	ldi	r24, 0x40	; 64
     95c:	89 27       	eor	r24, r25
     95e:	8e b9       	out	0x0e, r24	; 14
               
			flag_timer = 0;        
     960:	10 92 0f 01 	sts	0x010F, r1
     964:	10 92 0e 01 	sts	0x010E, r1
        
           
        // --------------------------------------------------------------
        // LOCALIZATION CODE
        // --------------------------------------------------------------
        cli();                                          // Clear Interupts to not interfere with the mWii
     968:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
     96a:	ce 01       	movw	r24, r28
     96c:	8b 96       	adiw	r24, 0x2b	; 43
     96e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <m_wii_read>
        sei();                                          // Enable back the interupts
     972:	78 94       	sei
            
        // If data received correctly
        if (wii_OK)
     974:	88 23       	and	r24, r24
     976:	09 f4       	brne	.+2      	; 0x97a <main+0x358>
     978:	28 c5       	rjmp	.+2640   	; 0x13ca <__stack+0x8cb>
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
     97a:	21 96       	adiw	r28, 0x01	; 1
     97c:	ae ac       	ldd	r10, Y+62	; 0x3e
     97e:	bf ac       	ldd	r11, Y+63	; 0x3f
     980:	21 97       	sbiw	r28, 0x01	; 1
     982:	c9 ac       	ldd	r12, Y+57	; 0x39
     984:	da ac       	ldd	r13, Y+58	; 0x3a
     986:	eb a8       	ldd	r14, Y+51	; 0x33
     988:	fc a8       	ldd	r15, Y+52	; 0x34
     98a:	0d a5       	ldd	r16, Y+45	; 0x2d
     98c:	1e a5       	ldd	r17, Y+46	; 0x2e
     98e:	2d ad       	ldd	r18, Y+61	; 0x3d
     990:	3e ad       	ldd	r19, Y+62	; 0x3e
     992:	4f a9       	ldd	r20, Y+55	; 0x37
     994:	58 ad       	ldd	r21, Y+56	; 0x38
     996:	69 a9       	ldd	r22, Y+49	; 0x31
     998:	7a a9       	ldd	r23, Y+50	; 0x32
     99a:	2b 96       	adiw	r28, 0x0b	; 11
     99c:	8f ad       	ldd	r24, Y+63	; 0x3f
     99e:	2b 97       	sbiw	r28, 0x0b	; 11
     9a0:	8f 93       	push	r24
     9a2:	2a 96       	adiw	r28, 0x0a	; 10
     9a4:	9f ad       	ldd	r25, Y+63	; 0x3f
     9a6:	2a 97       	sbiw	r28, 0x0a	; 10
     9a8:	9f 93       	push	r25
     9aa:	2d 96       	adiw	r28, 0x0d	; 13
     9ac:	af ad       	ldd	r26, Y+63	; 0x3f
     9ae:	2d 97       	sbiw	r28, 0x0d	; 13
     9b0:	af 93       	push	r26
     9b2:	2c 96       	adiw	r28, 0x0c	; 12
     9b4:	bf ad       	ldd	r27, Y+63	; 0x3f
     9b6:	2c 97       	sbiw	r28, 0x0c	; 12
     9b8:	bf 93       	push	r27
     9ba:	80 e1       	ldi	r24, 0x10	; 16
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	29 96       	adiw	r28, 0x09	; 9
     9c4:	ef ad       	ldd	r30, Y+63	; 0x3f
     9c6:	29 97       	sbiw	r28, 0x09	; 9
     9c8:	ef 93       	push	r30
     9ca:	28 96       	adiw	r28, 0x08	; 8
     9cc:	ff ad       	ldd	r31, Y+63	; 0x3f
     9ce:	28 97       	sbiw	r28, 0x08	; 8
     9d0:	ff 93       	push	r31
     9d2:	0f 2e       	mov	r0, r31
     9d4:	f3 e4       	ldi	r31, 0x43	; 67
     9d6:	8f 2e       	mov	r8, r31
     9d8:	91 2c       	mov	r9, r1
     9da:	f0 2d       	mov	r31, r0
     9dc:	8c 0e       	add	r8, r28
     9de:	9d 1e       	adc	r9, r29
     9e0:	8b a5       	ldd	r24, Y+43	; 0x2b
     9e2:	9c a5       	ldd	r25, Y+44	; 0x2c
     9e4:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <localize>
     9e8:	0f b6       	in	r0, 0x3f	; 63
     9ea:	f8 94       	cli
     9ec:	de bf       	out	0x3e, r29	; 62
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	cd bf       	out	0x3d, r28	; 61
     9f2:	eb c4       	rjmp	.+2518   	; 0x13ca <__stack+0x8cb>
     9f4:	3f ef       	ldi	r19, 0xFF	; 255
     9f6:	e3 1a       	sub	r14, r19
     9f8:	f3 0a       	sbc	r15, r19
//Variable for states
int state = INITIAL_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
     9fa:	87 01       	movw	r16, r14
     9fc:	01 50       	subi	r16, 0x01	; 1
     9fe:	11 09       	sbc	r17, r1
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
     a00:	c8 01       	movw	r24, r16
     a02:	0e 94 0f 0a 	call	0x141e	; 0x141e <get_analog_val>
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
     a06:	d3 01       	movw	r26, r6
     a08:	8c 91       	ld	r24, X
     a0a:	84 ff       	sbrs	r24, 4
     a0c:	fc cf       	rjmp	.-8      	; 0xa06 <main+0x3e4>
            switch(i)
     a0e:	03 30       	cpi	r16, 0x03	; 3
     a10:	11 05       	cpc	r17, r1
     a12:	39 f1       	breq	.+78     	; 0xa62 <main+0x440>
     a14:	3c f4       	brge	.+14     	; 0xa24 <main+0x402>
     a16:	01 30       	cpi	r16, 0x01	; 1
     a18:	11 05       	cpc	r17, r1
     a1a:	89 f0       	breq	.+34     	; 0xa3e <main+0x41c>
     a1c:	cc f4       	brge	.+50     	; 0xa50 <main+0x42e>
     a1e:	01 2b       	or	r16, r17
     a20:	51 f0       	breq	.+20     	; 0xa36 <main+0x414>
     a22:	60 c0       	rjmp	.+192    	; 0xae4 <main+0x4c2>
     a24:	05 30       	cpi	r16, 0x05	; 5
     a26:	11 05       	cpc	r17, r1
     a28:	71 f1       	breq	.+92     	; 0xa86 <main+0x464>
     a2a:	24 f1       	brlt	.+72     	; 0xa74 <main+0x452>
     a2c:	06 30       	cpi	r16, 0x06	; 6
     a2e:	11 05       	cpc	r17, r1
     a30:	09 f0       	breq	.+2      	; 0xa34 <main+0x412>
     a32:	58 c0       	rjmp	.+176    	; 0xae4 <main+0x4c2>
     a34:	31 c0       	rjmp	.+98     	; 0xa98 <main+0x476>
            {
                case(0):
                    PT1_left_outside = ADC;
     a36:	f1 01       	movw	r30, r2
     a38:	40 80       	ld	r4, Z
     a3a:	51 80       	ldd	r5, Z+1	; 0x01
                    break;
     a3c:	ca c4       	rjmp	.+2452   	; 0x13d2 <__stack+0x8d3>
                case(1):
                    PT2_left_inside = ADC;
     a3e:	d1 01       	movw	r26, r2
     a40:	0d 90       	ld	r0, X+
     a42:	bc 91       	ld	r27, X
     a44:	a0 2d       	mov	r26, r0
     a46:	67 96       	adiw	r28, 0x17	; 23
     a48:	bf af       	std	Y+63, r27	; 0x3f
     a4a:	ae af       	std	Y+62, r26	; 0x3e
     a4c:	67 97       	sbiw	r28, 0x17	; 23
                    break;
     a4e:	c1 c4       	rjmp	.+2434   	; 0x13d2 <__stack+0x8d3>
                case(2):
                    PT3_right_inside = ADC;
     a50:	f1 01       	movw	r30, r2
     a52:	01 90       	ld	r0, Z+
     a54:	f0 81       	ld	r31, Z
     a56:	e0 2d       	mov	r30, r0
     a58:	65 96       	adiw	r28, 0x15	; 21
     a5a:	ff af       	std	Y+63, r31	; 0x3f
     a5c:	ee af       	std	Y+62, r30	; 0x3e
     a5e:	65 97       	sbiw	r28, 0x15	; 21
                    break;
     a60:	b8 c4       	rjmp	.+2416   	; 0x13d2 <__stack+0x8d3>
                case(3):
					PT4_right_outside = ADC;
     a62:	d1 01       	movw	r26, r2
     a64:	0d 90       	ld	r0, X+
     a66:	bc 91       	ld	r27, X
     a68:	a0 2d       	mov	r26, r0
     a6a:	63 96       	adiw	r28, 0x13	; 19
     a6c:	bf af       	std	Y+63, r27	; 0x3f
     a6e:	ae af       	std	Y+62, r26	; 0x3e
     a70:	63 97       	sbiw	r28, 0x13	; 19
                    break;
     a72:	af c4       	rjmp	.+2398   	; 0x13d2 <__stack+0x8d3>
                case(4):
                    PT5_back_right = ADC;
     a74:	f1 01       	movw	r30, r2
     a76:	01 90       	ld	r0, Z+
     a78:	f0 81       	ld	r31, Z
     a7a:	e0 2d       	mov	r30, r0
     a7c:	61 96       	adiw	r28, 0x11	; 17
     a7e:	ff af       	std	Y+63, r31	; 0x3f
     a80:	ee af       	std	Y+62, r30	; 0x3e
     a82:	61 97       	sbiw	r28, 0x11	; 17
                    break;
     a84:	a6 c4       	rjmp	.+2380   	; 0x13d2 <__stack+0x8d3>
                case(5):
                    PT6_back_left = ADC;
     a86:	d1 01       	movw	r26, r2
     a88:	0d 90       	ld	r0, X+
     a8a:	bc 91       	ld	r27, X
     a8c:	a0 2d       	mov	r26, r0
     a8e:	2f 96       	adiw	r28, 0x0f	; 15
     a90:	bf af       	std	Y+63, r27	; 0x3f
     a92:	ae af       	std	Y+62, r26	; 0x3e
     a94:	2f 97       	sbiw	r28, 0x0f	; 15
                    break;
     a96:	9d c4       	rjmp	.+2362   	; 0x13d2 <__stack+0x8d3>
                case(6):
                    PT7_have_puck = ADC;
     a98:	f1 01       	movw	r30, r2
     a9a:	01 90       	ld	r0, Z+
     a9c:	f0 81       	ld	r31, Z
     a9e:	e0 2d       	mov	r30, r0
     aa0:	6d 96       	adiw	r28, 0x1d	; 29
     aa2:	ff af       	std	Y+63, r31	; 0x3f
     aa4:	ee af       	std	Y+62, r30	; 0x3e
     aa6:	6d 97       	sbiw	r28, 0x1d	; 29
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
     aa8:	d3 01       	movw	r26, r6
     aaa:	8c 91       	ld	r24, X
     aac:	80 61       	ori	r24, 0x10	; 16
     aae:	8c 93       	st	X, r24
     ab0:	2f 96       	adiw	r28, 0x0f	; 15
     ab2:	8e ac       	ldd	r8, Y+62	; 0x3e
     ab4:	9f ac       	ldd	r9, Y+63	; 0x3f
     ab6:	2f 97       	sbiw	r28, 0x0f	; 15
     ab8:	61 96       	adiw	r28, 0x11	; 17
     aba:	ee ad       	ldd	r30, Y+62	; 0x3e
     abc:	ff ad       	ldd	r31, Y+63	; 0x3f
     abe:	61 97       	sbiw	r28, 0x11	; 17
     ac0:	69 96       	adiw	r28, 0x19	; 25
     ac2:	ff af       	std	Y+63, r31	; 0x3f
     ac4:	ee af       	std	Y+62, r30	; 0x3e
     ac6:	69 97       	sbiw	r28, 0x19	; 25
     ac8:	63 96       	adiw	r28, 0x13	; 19
     aca:	ce ac       	ldd	r12, Y+62	; 0x3e
     acc:	df ac       	ldd	r13, Y+63	; 0x3f
     ace:	63 97       	sbiw	r28, 0x13	; 19
     ad0:	65 96       	adiw	r28, 0x15	; 21
     ad2:	ae ac       	ldd	r10, Y+62	; 0x3e
     ad4:	bf ac       	ldd	r11, Y+63	; 0x3f
     ad6:	65 97       	sbiw	r28, 0x15	; 21
     ad8:	67 96       	adiw	r28, 0x17	; 23
     ada:	0e ad       	ldd	r16, Y+62	; 0x3e
     adc:	1f ad       	ldd	r17, Y+63	; 0x3f
     ade:	67 97       	sbiw	r28, 0x17	; 23
     ae0:	72 01       	movw	r14, r4
     ae2:	22 c0       	rjmp	.+68     	; 0xb28 <__stack+0x29>
     ae4:	d3 01       	movw	r26, r6
     ae6:	8c 91       	ld	r24, X
     ae8:	80 61       	ori	r24, 0x10	; 16
     aea:	8c 93       	st	X, r24
            
        // --------------------------------------------------------------
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
     aec:	b7 e0       	ldi	r27, 0x07	; 7
     aee:	eb 16       	cp	r14, r27
     af0:	f1 04       	cpc	r15, r1
     af2:	0c f4       	brge	.+2      	; 0xaf6 <main+0x4d4>
     af4:	7f cf       	rjmp	.-258    	; 0x9f4 <main+0x3d2>
     af6:	2f 96       	adiw	r28, 0x0f	; 15
     af8:	8e ac       	ldd	r8, Y+62	; 0x3e
     afa:	9f ac       	ldd	r9, Y+63	; 0x3f
     afc:	2f 97       	sbiw	r28, 0x0f	; 15
     afe:	61 96       	adiw	r28, 0x11	; 17
     b00:	ee ad       	ldd	r30, Y+62	; 0x3e
     b02:	ff ad       	ldd	r31, Y+63	; 0x3f
     b04:	61 97       	sbiw	r28, 0x11	; 17
     b06:	69 96       	adiw	r28, 0x19	; 25
     b08:	ff af       	std	Y+63, r31	; 0x3f
     b0a:	ee af       	std	Y+62, r30	; 0x3e
     b0c:	69 97       	sbiw	r28, 0x19	; 25
     b0e:	63 96       	adiw	r28, 0x13	; 19
     b10:	ce ac       	ldd	r12, Y+62	; 0x3e
     b12:	df ac       	ldd	r13, Y+63	; 0x3f
     b14:	63 97       	sbiw	r28, 0x13	; 19
     b16:	65 96       	adiw	r28, 0x15	; 21
     b18:	ae ac       	ldd	r10, Y+62	; 0x3e
     b1a:	bf ac       	ldd	r11, Y+63	; 0x3f
     b1c:	65 97       	sbiw	r28, 0x15	; 21
     b1e:	67 96       	adiw	r28, 0x17	; 23
     b20:	0e ad       	ldd	r16, Y+62	; 0x3e
     b22:	1f ad       	ldd	r17, Y+63	; 0x3f
     b24:	67 97       	sbiw	r28, 0x17	; 23
     b26:	72 01       	movw	r14, r4
            
            
        // --------------------------------------------------------------
        // STATE COMMANDS
        // --------------------------------------------------------------
        switch (state)
     b28:	80 91 0c 01 	lds	r24, 0x010C
     b2c:	90 91 0d 01 	lds	r25, 0x010D
     b30:	85 30       	cpi	r24, 0x05	; 5
     b32:	91 05       	cpc	r25, r1
     b34:	09 f4       	brne	.+2      	; 0xb38 <__stack+0x39>
     b36:	2e c3       	rjmp	.+1628   	; 0x1194 <__stack+0x695>
     b38:	3c f4       	brge	.+14     	; 0xb48 <__stack+0x49>
     b3a:	00 97       	sbiw	r24, 0x00	; 0
     b3c:	09 f4       	brne	.+2      	; 0xb40 <__stack+0x41>
     b3e:	10 c3       	rjmp	.+1568   	; 0x1160 <__stack+0x661>
     b40:	03 97       	sbiw	r24, 0x03	; 3
     b42:	09 f0       	breq	.+2      	; 0xb46 <__stack+0x47>
     b44:	3f c4       	rjmp	.+2174   	; 0x13c4 <__stack+0x8c5>
     b46:	fe c1       	rjmp	.+1020   	; 0xf44 <__stack+0x445>
     b48:	86 31       	cpi	r24, 0x16	; 22
     b4a:	91 05       	cpc	r25, r1
     b4c:	09 f4       	brne	.+2      	; 0xb50 <__stack+0x51>
     b4e:	1f c4       	rjmp	.+2110   	; 0x138e <__stack+0x88f>
     b50:	80 35       	cpi	r24, 0x50	; 80
     b52:	91 05       	cpc	r25, r1
     b54:	21 f0       	breq	.+8      	; 0xb5e <__stack+0x5f>
     b56:	45 97       	sbiw	r24, 0x15	; 21
     b58:	09 f0       	breq	.+2      	; 0xb5c <__stack+0x5d>
     b5a:	34 c4       	rjmp	.+2152   	; 0x13c4 <__stack+0x8c5>
     b5c:	2e c4       	rjmp	.+2140   	; 0x13ba <__stack+0x8bb>
			case GO_TO_WPT:
			
				//m_green(ON);
			
			
				if (PT1_left_outside > NOT_SEE_PUCK || PT2_left_inside > NOT_SEE_PUCK || PT3_right_inside > NOT_SEE_PUCK || PT4_right_outside > NOT_SEE_PUCK || PT5_back_right > NOT_SEE_PUCK || PT6_back_left > NOT_SEE_PUCK) 
     b5e:	fd e2       	ldi	r31, 0x2D	; 45
     b60:	ef 16       	cp	r14, r31
     b62:	f1 e0       	ldi	r31, 0x01	; 1
     b64:	ff 06       	cpc	r15, r31
     b66:	cc f4       	brge	.+50     	; 0xb9a <__stack+0x9b>
     b68:	0d 32       	cpi	r16, 0x2D	; 45
     b6a:	11 40       	sbci	r17, 0x01	; 1
     b6c:	b4 f4       	brge	.+44     	; 0xb9a <__stack+0x9b>
     b6e:	3d e2       	ldi	r19, 0x2D	; 45
     b70:	a3 16       	cp	r10, r19
     b72:	31 e0       	ldi	r19, 0x01	; 1
     b74:	b3 06       	cpc	r11, r19
     b76:	8c f4       	brge	.+34     	; 0xb9a <__stack+0x9b>
     b78:	4d e2       	ldi	r20, 0x2D	; 45
     b7a:	c4 16       	cp	r12, r20
     b7c:	41 e0       	ldi	r20, 0x01	; 1
     b7e:	d4 06       	cpc	r13, r20
     b80:	64 f4       	brge	.+24     	; 0xb9a <__stack+0x9b>
     b82:	69 96       	adiw	r28, 0x19	; 25
     b84:	8e ad       	ldd	r24, Y+62	; 0x3e
     b86:	9f ad       	ldd	r25, Y+63	; 0x3f
     b88:	69 97       	sbiw	r28, 0x19	; 25
     b8a:	8d 32       	cpi	r24, 0x2D	; 45
     b8c:	91 40       	sbci	r25, 0x01	; 1
     b8e:	2c f4       	brge	.+10     	; 0xb9a <__stack+0x9b>
     b90:	bd e2       	ldi	r27, 0x2D	; 45
     b92:	8b 16       	cp	r8, r27
     b94:	b1 e0       	ldi	r27, 0x01	; 1
     b96:	9b 06       	cpc	r9, r27
     b98:	3c f0       	brlt	.+14     	; 0xba8 <__stack+0xa9>
				{
					state = FIND_PUCK;
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	90 93 0d 01 	sts	0x010D, r25
     ba2:	80 93 0c 01 	sts	0x010C, r24
					break;
     ba6:	21 ce       	rjmp	.-958    	; 0x7ea <main+0x1c8>
				}
			
				dir_x = TARGETS_X[0]-x_robot;
				dir_y = TARGETS_Y[0]-y_robot;
     ba8:	27 96       	adiw	r28, 0x07	; 7
     baa:	6e ad       	ldd	r22, Y+62	; 0x3e
     bac:	7f ad       	ldd	r23, Y+63	; 0x3f
     bae:	27 97       	sbiw	r28, 0x07	; 7
     bb0:	88 27       	eor	r24, r24
     bb2:	77 fd       	sbrc	r23, 7
     bb4:	80 95       	com	r24
     bb6:	98 2f       	mov	r25, r24
     bb8:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     bbc:	9b 01       	movw	r18, r22
     bbe:	ac 01       	movw	r20, r24
     bc0:	60 91 12 01 	lds	r22, 0x0112
     bc4:	70 91 13 01 	lds	r23, 0x0113
     bc8:	80 91 14 01 	lds	r24, 0x0114
     bcc:	90 91 15 01 	lds	r25, 0x0115
     bd0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     bd4:	6b 01       	movw	r12, r22
     bd6:	7c 01       	movw	r14, r24
				{
					state = FIND_PUCK;
					break;
				}
			
				dir_x = TARGETS_X[0]-x_robot;
     bd8:	25 96       	adiw	r28, 0x05	; 5
     bda:	6e ad       	ldd	r22, Y+62	; 0x3e
     bdc:	7f ad       	ldd	r23, Y+63	; 0x3f
     bde:	25 97       	sbiw	r28, 0x05	; 5
     be0:	88 27       	eor	r24, r24
     be2:	77 fd       	sbrc	r23, 7
     be4:	80 95       	com	r24
     be6:	98 2f       	mov	r25, r24
     be8:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     bec:	9b 01       	movw	r18, r22
     bee:	ac 01       	movw	r20, r24
     bf0:	60 91 1a 01 	lds	r22, 0x011A
     bf4:	70 91 1b 01 	lds	r23, 0x011B
     bf8:	80 91 1c 01 	lds	r24, 0x011C
     bfc:	90 91 1d 01 	lds	r25, 0x011D
     c00:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
				dir_y = TARGETS_Y[0]-y_robot;
				dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
     c04:	90 58       	subi	r25, 0x80	; 128
     c06:	a7 01       	movw	r20, r14
     c08:	96 01       	movw	r18, r12
     c0a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <atan2>
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	44 e3       	ldi	r20, 0x34	; 52
     c14:	53 e4       	ldi	r21, 0x43	; 67
     c16:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     c1a:	2b ed       	ldi	r18, 0xDB	; 219
     c1c:	3f e0       	ldi	r19, 0x0F	; 15
     c1e:	49 e4       	ldi	r20, 0x49	; 73
     c20:	50 e4       	ldi	r21, 0x40	; 64
     c22:	0e 94 c4 18 	call	0x3188	; 0x3188 <__divsf3>
     c26:	a6 96       	adiw	r28, 0x26	; 38
     c28:	6f af       	std	Y+63, r22	; 0x3f
     c2a:	a6 97       	sbiw	r28, 0x26	; 38
     c2c:	a7 96       	adiw	r28, 0x27	; 39
     c2e:	7f af       	std	Y+63, r23	; 0x3f
     c30:	a7 97       	sbiw	r28, 0x27	; 39
     c32:	a8 96       	adiw	r28, 0x28	; 40
     c34:	8f af       	std	Y+63, r24	; 0x3f
     c36:	a8 97       	sbiw	r28, 0x28	; 40
     c38:	a9 96       	adiw	r28, 0x29	; 41
     c3a:	9f af       	std	Y+63, r25	; 0x3f
     c3c:	a9 97       	sbiw	r28, 0x29	; 41
			
				calculate_diff_theta(dir_angle,&diff_theta, &bank);
     c3e:	9e 01       	movw	r18, r28
     c40:	2b 5f       	subi	r18, 0xFB	; 251
     c42:	3f 4f       	sbci	r19, 0xFF	; 255
     c44:	ae 01       	movw	r20, r28
     c46:	4f 5f       	subi	r20, 0xFF	; 255
     c48:	5f 4f       	sbci	r21, 0xFF	; 255
     c4a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
			
			
				cur_error = diff_theta;
     c4e:	89 80       	ldd	r8, Y+1	; 0x01
     c50:	9a 80       	ldd	r9, Y+2	; 0x02
     c52:	ab 80       	ldd	r10, Y+3	; 0x03
     c54:	bc 80       	ldd	r11, Y+4	; 0x04
     c56:	c5 01       	movw	r24, r10
     c58:	b4 01       	movw	r22, r8
     c5a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
     c5e:	8b 01       	movw	r16, r22
     c60:	70 93 25 01 	sts	0x0125, r23
     c64:	60 93 24 01 	sts	0x0124, r22
				diff_error = cur_error - prev_error;
     c68:	20 91 22 01 	lds	r18, 0x0122
     c6c:	30 91 23 01 	lds	r19, 0x0123
     c70:	fb 01       	movw	r30, r22
     c72:	e2 1b       	sub	r30, r18
     c74:	f3 0b       	sbc	r31, r19
     c76:	69 96       	adiw	r28, 0x19	; 25
     c78:	ff af       	std	Y+63, r31	; 0x3f
     c7a:	ee af       	std	Y+62, r30	; 0x3e
     c7c:	69 97       	sbiw	r28, 0x19	; 25
     c7e:	f0 93 27 01 	sts	0x0127, r31
     c82:	e0 93 26 01 	sts	0x0126, r30
				prev_error = cur_error;
     c86:	70 93 23 01 	sts	0x0123, r23
     c8a:	60 93 22 01 	sts	0x0122, r22
			
				if (status_go_to_goal == 0)
     c8e:	6b 96       	adiw	r28, 0x1b	; 27
     c90:	2e ad       	ldd	r18, Y+62	; 0x3e
     c92:	3f ad       	ldd	r19, Y+63	; 0x3f
     c94:	6b 97       	sbiw	r28, 0x1b	; 27
     c96:	23 2b       	or	r18, r19
     c98:	09 f0       	breq	.+2      	; 0xc9c <__stack+0x19d>
     c9a:	85 c0       	rjmp	.+266    	; 0xda6 <__stack+0x2a7>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
     c9c:	25 96       	adiw	r28, 0x05	; 5
     c9e:	6e ad       	ldd	r22, Y+62	; 0x3e
     ca0:	7f ad       	ldd	r23, Y+63	; 0x3f
     ca2:	25 97       	sbiw	r28, 0x05	; 5
     ca4:	88 27       	eor	r24, r24
     ca6:	77 fd       	sbrc	r23, 7
     ca8:	80 95       	com	r24
     caa:	98 2f       	mov	r25, r24
     cac:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     cb0:	20 91 1a 01 	lds	r18, 0x011A
     cb4:	30 91 1b 01 	lds	r19, 0x011B
     cb8:	40 91 1c 01 	lds	r20, 0x011C
     cbc:	50 91 1d 01 	lds	r21, 0x011D
     cc0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     cc4:	e6 2e       	mov	r14, r22
     cc6:	f7 2e       	mov	r15, r23
     cc8:	c8 2e       	mov	r12, r24
     cca:	d9 2e       	mov	r13, r25
     ccc:	27 96       	adiw	r28, 0x07	; 7
     cce:	6e ad       	ldd	r22, Y+62	; 0x3e
     cd0:	7f ad       	ldd	r23, Y+63	; 0x3f
     cd2:	27 97       	sbiw	r28, 0x07	; 7
     cd4:	88 27       	eor	r24, r24
     cd6:	77 fd       	sbrc	r23, 7
     cd8:	80 95       	com	r24
     cda:	98 2f       	mov	r25, r24
     cdc:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     ce0:	20 91 12 01 	lds	r18, 0x0112
     ce4:	30 91 13 01 	lds	r19, 0x0113
     ce8:	40 91 14 01 	lds	r20, 0x0114
     cec:	50 91 15 01 	lds	r21, 0x0115
     cf0:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     cf4:	06 2f       	mov	r16, r22
     cf6:	17 2f       	mov	r17, r23
     cf8:	6e 96       	adiw	r28, 0x1e	; 30
     cfa:	8f af       	std	Y+63, r24	; 0x3f
     cfc:	6e 97       	sbiw	r28, 0x1e	; 30
     cfe:	a2 96       	adiw	r28, 0x22	; 34
     d00:	9f af       	std	Y+63, r25	; 0x3f
     d02:	a2 97       	sbiw	r28, 0x22	; 34
     d04:	2e 2d       	mov	r18, r14
     d06:	3f 2d       	mov	r19, r15
     d08:	4c 2d       	mov	r20, r12
     d0a:	5d 2d       	mov	r21, r13
     d0c:	6e 2d       	mov	r22, r14
     d0e:	7f 2d       	mov	r23, r15
     d10:	8c 2d       	mov	r24, r12
     d12:	9d 2d       	mov	r25, r13
     d14:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     d18:	6b 01       	movw	r12, r22
     d1a:	7c 01       	movw	r14, r24
     d1c:	6e 96       	adiw	r28, 0x1e	; 30
     d1e:	9f ad       	ldd	r25, Y+63	; 0x3f
     d20:	6e 97       	sbiw	r28, 0x1e	; 30
     d22:	a2 96       	adiw	r28, 0x22	; 34
     d24:	8f ad       	ldd	r24, Y+63	; 0x3f
     d26:	a2 97       	sbiw	r28, 0x22	; 34
     d28:	20 2f       	mov	r18, r16
     d2a:	31 2f       	mov	r19, r17
     d2c:	49 2f       	mov	r20, r25
     d2e:	58 2f       	mov	r21, r24
     d30:	60 2f       	mov	r22, r16
     d32:	71 2f       	mov	r23, r17
     d34:	89 2f       	mov	r24, r25
     d36:	95 2f       	mov	r25, r21
     d38:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     d3c:	9b 01       	movw	r18, r22
     d3e:	ac 01       	movw	r20, r24
     d40:	c7 01       	movw	r24, r14
     d42:	b6 01       	movw	r22, r12
     d44:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     d48:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
     d4c:	a1 96       	adiw	r28, 0x21	; 33
     d4e:	6c af       	std	Y+60, r22	; 0x3c
     d50:	7d af       	std	Y+61, r23	; 0x3d
     d52:	8e af       	std	Y+62, r24	; 0x3e
     d54:	9f af       	std	Y+63, r25	; 0x3f
     d56:	a1 97       	sbiw	r28, 0x21	; 33
					if (dist_goal < THRESHOLD_DIST_GOAL)
     d58:	20 e0       	ldi	r18, 0x00	; 0
     d5a:	30 e0       	ldi	r19, 0x00	; 0
     d5c:	a9 01       	movw	r20, r18
     d5e:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     d62:	88 23       	and	r24, r24
     d64:	0c f4       	brge	.+2      	; 0xd68 <__stack+0x269>
     d66:	1a cd       	rjmp	.-1484   	; 0x79c <main+0x17a>
						status_go_to_goal = 2;
					}
					
					
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e7       	ldi	r20, 0x70	; 112
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	c5 01       	movw	r24, r10
     d72:	b4 01       	movw	r22, r8
     d74:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     d78:	88 23       	and	r24, r24
     d7a:	0c f4       	brge	.+2      	; 0xd7e <__stack+0x27f>
     d7c:	16 cd       	rjmp	.-1492   	; 0x7aa <main+0x188>
						status_go_to_goal = 1;
					}
					else
					turn_robot(diff_theta,bank,diff_error);
     d7e:	69 96       	adiw	r28, 0x19	; 25
     d80:	4e ad       	ldd	r20, Y+62	; 0x3e
     d82:	5f ad       	ldd	r21, Y+63	; 0x3f
     d84:	69 97       	sbiw	r28, 0x19	; 25
     d86:	ba 01       	movw	r22, r20
     d88:	88 27       	eor	r24, r24
     d8a:	77 fd       	sbrc	r23, 7
     d8c:	80 95       	com	r24
     d8e:	98 2f       	mov	r25, r24
     d90:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     d94:	8b 01       	movw	r16, r22
     d96:	9c 01       	movw	r18, r24
     d98:	4d 81       	ldd	r20, Y+5	; 0x05
     d9a:	5e 81       	ldd	r21, Y+6	; 0x06
     d9c:	c5 01       	movw	r24, r10
     d9e:	b4 01       	movw	r22, r8
     da0:	0e 94 11 02 	call	0x422	; 0x422 <turn_robot>
     da4:	22 cd       	rjmp	.-1468   	; 0x7ea <main+0x1c8>
					
				}
			
				else if (status_go_to_goal == 1)
     da6:	6b 96       	adiw	r28, 0x1b	; 27
     da8:	8e ad       	ldd	r24, Y+62	; 0x3e
     daa:	9f ad       	ldd	r25, Y+63	; 0x3f
     dac:	6b 97       	sbiw	r28, 0x1b	; 27
     dae:	01 97       	sbiw	r24, 0x01	; 1
     db0:	09 f0       	breq	.+2      	; 0xdb4 <__stack+0x2b5>
     db2:	81 c0       	rjmp	.+258    	; 0xeb6 <__stack+0x3b7>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
     db4:	25 96       	adiw	r28, 0x05	; 5
     db6:	6e ad       	ldd	r22, Y+62	; 0x3e
     db8:	7f ad       	ldd	r23, Y+63	; 0x3f
     dba:	25 97       	sbiw	r28, 0x05	; 5
     dbc:	88 27       	eor	r24, r24
     dbe:	77 fd       	sbrc	r23, 7
     dc0:	80 95       	com	r24
     dc2:	98 2f       	mov	r25, r24
     dc4:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     dc8:	20 91 1a 01 	lds	r18, 0x011A
     dcc:	30 91 1b 01 	lds	r19, 0x011B
     dd0:	40 91 1c 01 	lds	r20, 0x011C
     dd4:	50 91 1d 01 	lds	r21, 0x011D
     dd8:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     ddc:	c6 2e       	mov	r12, r22
     dde:	d7 2e       	mov	r13, r23
     de0:	e8 2e       	mov	r14, r24
     de2:	f9 2e       	mov	r15, r25
     de4:	27 96       	adiw	r28, 0x07	; 7
     de6:	6e ad       	ldd	r22, Y+62	; 0x3e
     de8:	7f ad       	ldd	r23, Y+63	; 0x3f
     dea:	27 97       	sbiw	r28, 0x07	; 7
     dec:	88 27       	eor	r24, r24
     dee:	77 fd       	sbrc	r23, 7
     df0:	80 95       	com	r24
     df2:	98 2f       	mov	r25, r24
     df4:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     df8:	20 91 12 01 	lds	r18, 0x0112
     dfc:	30 91 13 01 	lds	r19, 0x0113
     e00:	40 91 14 01 	lds	r20, 0x0114
     e04:	50 91 15 01 	lds	r21, 0x0115
     e08:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
     e0c:	68 96       	adiw	r28, 0x18	; 24
     e0e:	6f af       	std	Y+63, r22	; 0x3f
     e10:	68 97       	sbiw	r28, 0x18	; 24
     e12:	6e 96       	adiw	r28, 0x1e	; 30
     e14:	7f af       	std	Y+63, r23	; 0x3f
     e16:	6e 97       	sbiw	r28, 0x1e	; 30
     e18:	a2 96       	adiw	r28, 0x22	; 34
     e1a:	8f af       	std	Y+63, r24	; 0x3f
     e1c:	a2 97       	sbiw	r28, 0x22	; 34
     e1e:	a3 96       	adiw	r28, 0x23	; 35
     e20:	9f af       	std	Y+63, r25	; 0x3f
     e22:	a3 97       	sbiw	r28, 0x23	; 35
     e24:	2c 2d       	mov	r18, r12
     e26:	3d 2d       	mov	r19, r13
     e28:	4e 2d       	mov	r20, r14
     e2a:	5f 2d       	mov	r21, r15
     e2c:	6c 2d       	mov	r22, r12
     e2e:	7d 2d       	mov	r23, r13
     e30:	8e 2d       	mov	r24, r14
     e32:	9f 2d       	mov	r25, r15
     e34:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     e38:	6b 01       	movw	r12, r22
     e3a:	7c 01       	movw	r14, r24
     e3c:	68 96       	adiw	r28, 0x18	; 24
     e3e:	7f ad       	ldd	r23, Y+63	; 0x3f
     e40:	68 97       	sbiw	r28, 0x18	; 24
     e42:	6e 96       	adiw	r28, 0x1e	; 30
     e44:	6f ad       	ldd	r22, Y+63	; 0x3f
     e46:	6e 97       	sbiw	r28, 0x1e	; 30
     e48:	a2 96       	adiw	r28, 0x22	; 34
     e4a:	9f ad       	ldd	r25, Y+63	; 0x3f
     e4c:	a2 97       	sbiw	r28, 0x22	; 34
     e4e:	a3 96       	adiw	r28, 0x23	; 35
     e50:	8f ad       	ldd	r24, Y+63	; 0x3f
     e52:	a3 97       	sbiw	r28, 0x23	; 35
     e54:	27 2f       	mov	r18, r23
     e56:	36 2f       	mov	r19, r22
     e58:	49 2f       	mov	r20, r25
     e5a:	58 2f       	mov	r21, r24
     e5c:	67 2f       	mov	r22, r23
     e5e:	73 2f       	mov	r23, r19
     e60:	89 2f       	mov	r24, r25
     e62:	95 2f       	mov	r25, r21
     e64:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
     e68:	9b 01       	movw	r18, r22
     e6a:	ac 01       	movw	r20, r24
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
     e74:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
     e78:	a1 96       	adiw	r28, 0x21	; 33
     e7a:	6c af       	std	Y+60, r22	; 0x3c
     e7c:	7d af       	std	Y+61, r23	; 0x3d
     e7e:	8e af       	std	Y+62, r24	; 0x3e
     e80:	9f af       	std	Y+63, r25	; 0x3f
     e82:	a1 97       	sbiw	r28, 0x21	; 33
					if (dist_goal < THRESHOLD_DIST_GOAL)
     e84:	20 e0       	ldi	r18, 0x00	; 0
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	a9 01       	movw	r20, r18
     e8a:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     e8e:	88 23       	and	r24, r24
     e90:	0c f4       	brge	.+2      	; 0xe94 <__stack+0x395>
     e92:	92 cc       	rjmp	.-1756   	; 0x7b8 <main+0x196>
						//                                stop_counter++;
						//                            }
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
     e94:	20 e0       	ldi	r18, 0x00	; 0
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	40 ef       	ldi	r20, 0xF0	; 240
     e9a:	51 e4       	ldi	r21, 0x41	; 65
     e9c:	c5 01       	movw	r24, r10
     e9e:	b4 01       	movw	r22, r8
     ea0:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	0c f4       	brge	.+2      	; 0xeaa <__stack+0x3ab>
     ea8:	8e cc       	rjmp	.-1764   	; 0x7c6 <main+0x1a4>
						//set(PORTD,5);
					}
					else 
					{
						//clear(PORTD,5);
						move_robot_to_puck(diff_theta,bank);
     eaa:	6d 81       	ldd	r22, Y+5	; 0x05
     eac:	7e 81       	ldd	r23, Y+6	; 0x06
     eae:	c8 01       	movw	r24, r16
     eb0:	0e 94 46 02 	call	0x48c	; 0x48c <move_robot_to_puck>
     eb4:	9a cc       	rjmp	.-1740   	; 0x7ea <main+0x1c8>
					}
				
				}
				else if (status_go_to_goal == 2){
     eb6:	6b 96       	adiw	r28, 0x1b	; 27
     eb8:	ae ad       	ldd	r26, Y+62	; 0x3e
     eba:	bf ad       	ldd	r27, Y+63	; 0x3f
     ebc:	6b 97       	sbiw	r28, 0x1b	; 27
     ebe:	12 97       	sbiw	r26, 0x02	; 2
     ec0:	69 f5       	brne	.+90     	; 0xf1c <__stack+0x41d>
				
					calculate_diff_theta(0,&diff_theta, &bank);
     ec2:	9e 01       	movw	r18, r28
     ec4:	2b 5f       	subi	r18, 0xFB	; 251
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	ae 01       	movw	r20, r28
     eca:	4f 5f       	subi	r20, 0xFF	; 255
     ecc:	5f 4f       	sbci	r21, 0xFF	; 255
     ece:	60 e0       	ldi	r22, 0x00	; 0
     ed0:	70 e0       	ldi	r23, 0x00	; 0
     ed2:	cb 01       	movw	r24, r22
     ed4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
				
				
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
     ed8:	c9 80       	ldd	r12, Y+1	; 0x01
     eda:	da 80       	ldd	r13, Y+2	; 0x02
     edc:	eb 80       	ldd	r14, Y+3	; 0x03
     ede:	fc 80       	ldd	r15, Y+4	; 0x04
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e7       	ldi	r20, 0x70	; 112
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	c7 01       	movw	r24, r14
     eea:	b6 01       	movw	r22, r12
     eec:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
     ef0:	88 23       	and	r24, r24
     ef2:	0c f4       	brge	.+2      	; 0xef6 <__stack+0x3f7>
     ef4:	6d cc       	rjmp	.-1830   	; 0x7d0 <main+0x1ae>
						//m_wait(1000);
						//set(PORTD,5);
					}
					else 
					{
						turn_robot(diff_theta,bank,diff_error);
     ef6:	60 91 26 01 	lds	r22, 0x0126
     efa:	70 91 27 01 	lds	r23, 0x0127
     efe:	88 27       	eor	r24, r24
     f00:	77 fd       	sbrc	r23, 7
     f02:	80 95       	com	r24
     f04:	98 2f       	mov	r25, r24
     f06:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
     f0a:	8b 01       	movw	r16, r22
     f0c:	9c 01       	movw	r18, r24
     f0e:	4d 81       	ldd	r20, Y+5	; 0x05
     f10:	5e 81       	ldd	r21, Y+6	; 0x06
     f12:	c7 01       	movw	r24, r14
     f14:	b6 01       	movw	r22, r12
     f16:	0e 94 11 02 	call	0x422	; 0x422 <turn_robot>
     f1a:	67 cc       	rjmp	.-1842   	; 0x7ea <main+0x1c8>
					}
				
				}
				else if (status_go_to_goal == 3)
     f1c:	6b 96       	adiw	r28, 0x1b	; 27
     f1e:	ee ad       	ldd	r30, Y+62	; 0x3e
     f20:	ff ad       	ldd	r31, Y+63	; 0x3f
     f22:	6b 97       	sbiw	r28, 0x1b	; 27
     f24:	33 97       	sbiw	r30, 0x03	; 3
     f26:	09 f0       	breq	.+2      	; 0xf2a <__stack+0x42b>
     f28:	60 cc       	rjmp	.-1856   	; 0x7ea <main+0x1c8>
				{
				
					stop_motor();
     f2a:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					//                        //                            clear(PORTD,5);
					//                    }
					//                    goal_pos_x = TARGETS_X[TARGET_NUM];
					//                    goal_pos_y = TARGETS_Y[TARGET_NUM];
					status_go_to_goal = 0;
					state = FIND_PUCK;
     f2e:	83 e0       	ldi	r24, 0x03	; 3
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	90 93 0d 01 	sts	0x010D, r25
     f36:	80 93 0c 01 	sts	0x010C, r24
					//                        TARGET_NUM = 0;
					//                        //                            clear(PORTD,5);
					//                    }
					//                    goal_pos_x = TARGETS_X[TARGET_NUM];
					//                    goal_pos_y = TARGETS_Y[TARGET_NUM];
					status_go_to_goal = 0;
     f3a:	6b 96       	adiw	r28, 0x1b	; 27
     f3c:	1f ae       	std	Y+63, r1	; 0x3f
     f3e:	1e ae       	std	Y+62, r1	; 0x3e
     f40:	6b 97       	sbiw	r28, 0x1b	; 27
     f42:	53 cc       	rjmp	.-1882   	; 0x7ea <main+0x1c8>
				//}
				//
            
            
				//Check if we have the puck
				if (PT2_left_inside > 1010 &&  PT3_right_inside > 1010)
     f44:	03 3f       	cpi	r16, 0xF3	; 243
     f46:	f3 e0       	ldi	r31, 0x03	; 3
     f48:	1f 07       	cpc	r17, r31
     f4a:	84 f0       	brlt	.+32     	; 0xf6c <__stack+0x46d>
     f4c:	23 ef       	ldi	r18, 0xF3	; 243
     f4e:	a2 16       	cp	r10, r18
     f50:	23 e0       	ldi	r18, 0x03	; 3
     f52:	b2 06       	cpc	r11, r18
     f54:	5c f0       	brlt	.+22     	; 0xf6c <__stack+0x46d>
				{
					state = GO_TO_GOAL_WITH_PUCK;
     f56:	85 e0       	ldi	r24, 0x05	; 5
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	90 93 0d 01 	sts	0x010D, r25
     f5e:	80 93 0c 01 	sts	0x010C, r24
					//turnOnBlueLED();
	            
					status_go_to_goal = 0;
     f62:	6b 96       	adiw	r28, 0x1b	; 27
     f64:	1f ae       	std	Y+63, r1	; 0x3f
     f66:	1e ae       	std	Y+62, r1	; 0x3e
     f68:	6b 97       	sbiw	r28, 0x1b	; 27
					break;
     f6a:	3f cc       	rjmp	.-1922   	; 0x7ea <main+0x1c8>
				max_lr = 0;
				else
				max_lr = 1;
            
				//Check if the puck is up or down
				if (max_lr == 0)
     f6c:	ce 14       	cp	r12, r14
     f6e:	df 04       	cpc	r13, r15
     f70:	64 f4       	brge	.+24     	; 0xf8a <__stack+0x48b>
				{
					if (PT1_left_outside >= PT6_back_left)
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	e8 14       	cp	r14, r8
     f78:	f9 04       	cpc	r15, r9
     f7a:	14 f0       	brlt	.+4      	; 0xf80 <__stack+0x481>
     f7c:	80 e0       	ldi	r24, 0x00	; 0
     f7e:	90 e0       	ldi	r25, 0x00	; 0
					half_range = 0;
					else
					half_range = 1;
     f80:	ad 96       	adiw	r28, 0x2d	; 45
     f82:	9f af       	std	Y+63, r25	; 0x3f
     f84:	8e af       	std	Y+62, r24	; 0x3e
     f86:	ad 97       	sbiw	r28, 0x2d	; 45
     f88:	0f c0       	rjmp	.+30     	; 0xfa8 <__stack+0x4a9>
				}
				else
				{
					if (PT4_right_outside >= PT5_back_right)
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	69 96       	adiw	r28, 0x19	; 25
     f90:	4e ad       	ldd	r20, Y+62	; 0x3e
     f92:	5f ad       	ldd	r21, Y+63	; 0x3f
     f94:	69 97       	sbiw	r28, 0x19	; 25
     f96:	c4 16       	cp	r12, r20
     f98:	d5 06       	cpc	r13, r21
     f9a:	14 f0       	brlt	.+4      	; 0xfa0 <__stack+0x4a1>
     f9c:	80 e0       	ldi	r24, 0x00	; 0
     f9e:	90 e0       	ldi	r25, 0x00	; 0
				if (max_lr == 0)
				{
					if (PT1_left_outside >= PT6_back_left)
					half_range = 0;
					else
					half_range = 1;
     fa0:	ad 96       	adiw	r28, 0x2d	; 45
     fa2:	9f af       	std	Y+63, r25	; 0x3f
     fa4:	8e af       	std	Y+62, r24	; 0x3e
     fa6:	ad 97       	sbiw	r28, 0x2d	; 45
				max_pt_backs = PT6_back_left;
            
            
            
				//                // If Insides see the puck
				if (PT1_left_outside < NOT_SEE_PUCK && PT2_left_inside < NOT_SEE_PUCK && PT3_right_inside < NOT_SEE_PUCK && PT4_right_outside < NOT_SEE_PUCK && PT5_back_right < NOT_SEE_PUCK && PT6_back_left < NOT_SEE_PUCK) 
     fa8:	5c e2       	ldi	r21, 0x2C	; 44
     faa:	e5 16       	cp	r14, r21
     fac:	51 e0       	ldi	r21, 0x01	; 1
     fae:	f5 06       	cpc	r15, r21
     fb0:	1c f5       	brge	.+70     	; 0xff8 <__stack+0x4f9>
     fb2:	0c 32       	cpi	r16, 0x2C	; 44
     fb4:	81 e0       	ldi	r24, 0x01	; 1
     fb6:	18 07       	cpc	r17, r24
     fb8:	fc f4       	brge	.+62     	; 0xff8 <__stack+0x4f9>
     fba:	9c e2       	ldi	r25, 0x2C	; 44
     fbc:	a9 16       	cp	r10, r25
     fbe:	91 e0       	ldi	r25, 0x01	; 1
     fc0:	b9 06       	cpc	r11, r25
     fc2:	d4 f4       	brge	.+52     	; 0xff8 <__stack+0x4f9>
     fc4:	ac e2       	ldi	r26, 0x2C	; 44
     fc6:	ca 16       	cp	r12, r26
     fc8:	a1 e0       	ldi	r26, 0x01	; 1
     fca:	da 06       	cpc	r13, r26
     fcc:	ac f4       	brge	.+42     	; 0xff8 <__stack+0x4f9>
     fce:	69 96       	adiw	r28, 0x19	; 25
     fd0:	ee ad       	ldd	r30, Y+62	; 0x3e
     fd2:	ff ad       	ldd	r31, Y+63	; 0x3f
     fd4:	69 97       	sbiw	r28, 0x19	; 25
     fd6:	ec 32       	cpi	r30, 0x2C	; 44
     fd8:	f1 40       	sbci	r31, 0x01	; 1
     fda:	74 f4       	brge	.+28     	; 0xff8 <__stack+0x4f9>
     fdc:	3c e2       	ldi	r19, 0x2C	; 44
     fde:	83 16       	cp	r8, r19
     fe0:	31 e0       	ldi	r19, 0x01	; 1
     fe2:	93 06       	cpc	r9, r19
     fe4:	4c f4       	brge	.+18     	; 0xff8 <__stack+0x4f9>
				{
					turnOffBlueLED();
     fe6:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOffBlueLED>
					state = GO_TO_WPT;
     fea:	80 e5       	ldi	r24, 0x50	; 80
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	90 93 0d 01 	sts	0x010D, r25
     ff2:	80 93 0c 01 	sts	0x010C, r24
					break;
     ff6:	f9 cb       	rjmp	.-2062   	; 0x7ea <main+0x1c8>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
     ff8:	b8 01       	movw	r22, r16
     ffa:	6a 0d       	add	r22, r10
     ffc:	7b 1d       	adc	r23, r11
     ffe:	88 27       	eor	r24, r24
    1000:	77 fd       	sbrc	r23, 7
    1002:	80 95       	com	r24
    1004:	98 2f       	mov	r25, r24
    1006:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    100a:	20 e0       	ldi	r18, 0x00	; 0
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	5f e3       	ldi	r21, 0x3F	; 63
    1012:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    1016:	a2 96       	adiw	r28, 0x22	; 34
    1018:	6f af       	std	Y+63, r22	; 0x3f
    101a:	a2 97       	sbiw	r28, 0x22	; 34
    101c:	a3 96       	adiw	r28, 0x23	; 35
    101e:	7f af       	std	Y+63, r23	; 0x3f
    1020:	a3 97       	sbiw	r28, 0x23	; 35
    1022:	aa 96       	adiw	r28, 0x2a	; 42
    1024:	8f af       	std	Y+63, r24	; 0x3f
    1026:	aa 97       	sbiw	r28, 0x2a	; 42
    1028:	ab 96       	adiw	r28, 0x2b	; 43
    102a:	9f af       	std	Y+63, r25	; 0x3f
    102c:	ab 97       	sbiw	r28, 0x2b	; 43
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	48 e4       	ldi	r20, 0x48	; 72
    1034:	53 e4       	ldi	r21, 0x43	; 67
    1036:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
    103a:	88 23       	and	r24, r24
    103c:	74 f1       	brlt	.+92     	; 0x109a <__stack+0x59b>
    103e:	4d eb       	ldi	r20, 0xBD	; 189
    1040:	e4 16       	cp	r14, r20
    1042:	42 e0       	ldi	r20, 0x02	; 2
    1044:	f4 06       	cpc	r15, r20
    1046:	4c f5       	brge	.+82     	; 0x109a <__stack+0x59b>
    1048:	5d eb       	ldi	r21, 0xBD	; 189
    104a:	c5 16       	cp	r12, r21
    104c:	52 e0       	ldi	r21, 0x02	; 2
    104e:	d5 06       	cpc	r13, r21
    1050:	24 f5       	brge	.+72     	; 0x109a <__stack+0x59b>
				{
					turnOnBlueLED();
    1052:	0e 94 02 0a 	call	0x1404	; 0x1404 <turnOnBlueLED>
					status_go_to_goal = 1;
					int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
    1056:	c8 01       	movw	r24, r16
    1058:	8a 19       	sub	r24, r10
    105a:	9b 09       	sbc	r25, r11
    105c:	1a f4       	brpl	.+6      	; 0x1064 <__stack+0x565>
    105e:	91 95       	neg	r25
    1060:	81 95       	neg	r24
    1062:	91 09       	sbc	r25, r1
    1064:	68 2f       	mov	r22, r24
    1066:	79 2f       	mov	r23, r25
					if (PT2_left_inside >= PT3_right_inside) 
    1068:	0a 15       	cp	r16, r10
    106a:	1b 05       	cpc	r17, r11
    106c:	5c f0       	brlt	.+22     	; 0x1084 <__stack+0x585>
					{
						move_robot_to_puck(1,diff_PT_inside);
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	0e 94 46 02 	call	0x48c	; 0x48c <move_robot_to_puck>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
				{
					turnOnBlueLED();
					status_go_to_goal = 1;
    1076:	81 e0       	ldi	r24, 0x01	; 1
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	6b 96       	adiw	r28, 0x1b	; 27
    107c:	9f af       	std	Y+63, r25	; 0x3f
    107e:	8e af       	std	Y+62, r24	; 0x3e
    1080:	6b 97       	sbiw	r28, 0x1b	; 27
    1082:	b3 cb       	rjmp	.-2202   	; 0x7ea <main+0x1c8>
						move_robot_to_puck(1,diff_PT_inside);
		            
					}
					else
					{
						move_robot_to_puck(0,diff_PT_inside);
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	0e 94 46 02 	call	0x48c	; 0x48c <move_robot_to_puck>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
				{
					turnOnBlueLED();
					status_go_to_goal = 1;
    108c:	a1 e0       	ldi	r26, 0x01	; 1
    108e:	b0 e0       	ldi	r27, 0x00	; 0
    1090:	6b 96       	adiw	r28, 0x1b	; 27
    1092:	bf af       	std	Y+63, r27	; 0x3f
    1094:	ae af       	std	Y+62, r26	; 0x3e
    1096:	6b 97       	sbiw	r28, 0x1b	; 27
    1098:	a8 cb       	rjmp	.-2224   	; 0x7ea <main+0x1c8>
					{
						move_robot_to_puck(0,diff_PT_inside);
					}
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
    109a:	20 e0       	ldi	r18, 0x00	; 0
    109c:	30 e0       	ldi	r19, 0x00	; 0
    109e:	48 e4       	ldi	r20, 0x48	; 72
    10a0:	53 e4       	ldi	r21, 0x43	; 67
    10a2:	a2 96       	adiw	r28, 0x22	; 34
    10a4:	ef ad       	ldd	r30, Y+63	; 0x3f
    10a6:	a2 97       	sbiw	r28, 0x22	; 34
    10a8:	a3 96       	adiw	r28, 0x23	; 35
    10aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    10ac:	a3 97       	sbiw	r28, 0x23	; 35
    10ae:	aa 96       	adiw	r28, 0x2a	; 42
    10b0:	af ad       	ldd	r26, Y+63	; 0x3f
    10b2:	aa 97       	sbiw	r28, 0x2a	; 42
    10b4:	ab 96       	adiw	r28, 0x2b	; 43
    10b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    10b8:	ab 97       	sbiw	r28, 0x2b	; 43
    10ba:	6e 2f       	mov	r22, r30
    10bc:	7b 2f       	mov	r23, r27
    10be:	8a 2f       	mov	r24, r26
    10c0:	9f 2f       	mov	r25, r31
    10c2:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
    10c6:	88 23       	and	r24, r24
    10c8:	0c f0       	brlt	.+2      	; 0x10cc <__stack+0x5cd>
    10ca:	41 c0       	rjmp	.+130    	; 0x114e <__stack+0x64f>
    10cc:	b5 e6       	ldi	r27, 0x65	; 101
    10ce:	eb 16       	cp	r14, r27
    10d0:	f1 04       	cpc	r15, r1
    10d2:	7c f4       	brge	.+30     	; 0x10f2 <__stack+0x5f3>
    10d4:	e5 e6       	ldi	r30, 0x65	; 101
    10d6:	ce 16       	cp	r12, r30
    10d8:	d1 04       	cpc	r13, r1
    10da:	5c f4       	brge	.+22     	; 0x10f2 <__stack+0x5f3>
    10dc:	f5 e6       	ldi	r31, 0x65	; 101
    10de:	8f 16       	cp	r8, r31
    10e0:	91 04       	cpc	r9, r1
    10e2:	3c f4       	brge	.+14     	; 0x10f2 <__stack+0x5f3>
    10e4:	69 96       	adiw	r28, 0x19	; 25
    10e6:	2e ad       	ldd	r18, Y+62	; 0x3e
    10e8:	3f ad       	ldd	r19, Y+63	; 0x3f
    10ea:	69 97       	sbiw	r28, 0x19	; 25
    10ec:	25 36       	cpi	r18, 0x65	; 101
    10ee:	31 05       	cpc	r19, r1
    10f0:	74 f1       	brlt	.+92     	; 0x114e <__stack+0x64f>
				{
					turnOffBlueLED();
    10f2:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOffBlueLED>
					status_go_to_goal = 0;
					//Case where the puck is in front
					if (half_range == 0)
    10f6:	ad 96       	adiw	r28, 0x2d	; 45
    10f8:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fa:	5f ad       	ldd	r21, Y+63	; 0x3f
    10fc:	ad 97       	sbiw	r28, 0x2d	; 45
    10fe:	45 2b       	or	r20, r21
    1100:	89 f4       	brne	.+34     	; 0x1124 <__stack+0x625>
					{
						if (PT1_left_outside >= PT4_right_outside) 
    1102:	ec 14       	cp	r14, r12
    1104:	fd 04       	cpc	r15, r13
    1106:	3c f0       	brlt	.+14     	; 0x1116 <__stack+0x617>
						{
							turn_left();
    1108:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    110c:	6b 96       	adiw	r28, 0x1b	; 27
    110e:	1f ae       	std	Y+63, r1	; 0x3f
    1110:	1e ae       	std	Y+62, r1	; 0x3e
    1112:	6b 97       	sbiw	r28, 0x1b	; 27
    1114:	6a cb       	rjmp	.-2348   	; 0x7ea <main+0x1c8>
						if (PT1_left_outside >= PT4_right_outside) 
						{
							turn_left();
						}
						else
						turn_right();
    1116:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    111a:	6b 96       	adiw	r28, 0x1b	; 27
    111c:	1f ae       	std	Y+63, r1	; 0x3f
    111e:	1e ae       	std	Y+62, r1	; 0x3e
    1120:	6b 97       	sbiw	r28, 0x1b	; 27
    1122:	63 cb       	rjmp	.-2362   	; 0x7ea <main+0x1c8>
						else
						turn_right();
					}
					else
					{
						if (PT6_back_left >= PT5_back_right) 
    1124:	69 96       	adiw	r28, 0x19	; 25
    1126:	8e ad       	ldd	r24, Y+62	; 0x3e
    1128:	9f ad       	ldd	r25, Y+63	; 0x3f
    112a:	69 97       	sbiw	r28, 0x19	; 25
    112c:	88 16       	cp	r8, r24
    112e:	99 06       	cpc	r9, r25
    1130:	3c f0       	brlt	.+14     	; 0x1140 <__stack+0x641>
						{
							turn_left();
    1132:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    1136:	6b 96       	adiw	r28, 0x1b	; 27
    1138:	1f ae       	std	Y+63, r1	; 0x3f
    113a:	1e ae       	std	Y+62, r1	; 0x3e
    113c:	6b 97       	sbiw	r28, 0x1b	; 27
    113e:	55 cb       	rjmp	.-2390   	; 0x7ea <main+0x1c8>
						if (PT6_back_left >= PT5_back_right) 
						{
							turn_left();
						}
						else
						turn_right();
    1140:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    1144:	6b 96       	adiw	r28, 0x1b	; 27
    1146:	1f ae       	std	Y+63, r1	; 0x3f
    1148:	1e ae       	std	Y+62, r1	; 0x3e
    114a:	6b 97       	sbiw	r28, 0x1b	; 27
    114c:	4e cb       	rjmp	.-2404   	; 0x7ea <main+0x1c8>
						turn_right();
		            
					}
				}
				else{
					state = GO_TO_WPT;
    114e:	80 e5       	ldi	r24, 0x50	; 80
    1150:	90 e0       	ldi	r25, 0x00	; 0
    1152:	90 93 0d 01 	sts	0x010D, r25
    1156:	80 93 0c 01 	sts	0x010C, r24
					turnOffBlueLED();
    115a:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOffBlueLED>
    115e:	45 cb       	rjmp	.-2422   	; 0x7ea <main+0x1c8>
                    
                // --------------------------------------------------------------
                // INITIAL STATE
                // --------------------------------------------------------------
            case INITIAL_STATE:
                if (check(PINB,2))
    1160:	1a 9b       	sbis	0x03, 2	; 3
    1162:	07 c0       	rjmp	.+14     	; 0x1172 <__stack+0x673>
                {
                    goal_pos_x = GOAL_A_POS_X;
    1164:	ac e9       	ldi	r26, 0x9C	; 156
    1166:	bf ef       	ldi	r27, 0xFF	; 255
    1168:	a5 96       	adiw	r28, 0x25	; 37
    116a:	bf af       	std	Y+63, r27	; 0x3f
    116c:	ae af       	std	Y+62, r26	; 0x3e
    116e:	a5 97       	sbiw	r28, 0x25	; 37
    1170:	06 c0       	rjmp	.+12     	; 0x117e <__stack+0x67f>
                    //                        goal_pos_y = TARGETS_Y[TARGET_NUM];
                    //
                }
				else
                {
                    goal_pos_x = GOAL_B_POS_X;
    1172:	e3 e7       	ldi	r30, 0x73	; 115
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	a5 96       	adiw	r28, 0x25	; 37
    1178:	ff af       	std	Y+63, r31	; 0x3f
    117a:	ee af       	std	Y+62, r30	; 0x3e
    117c:	a5 97       	sbiw	r28, 0x25	; 37
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
    117e:	83 e0       	ldi	r24, 0x03	; 3
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	90 93 0d 01 	sts	0x010D, r25
    1186:	80 93 0c 01 	sts	0x010C, r24
				else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    118a:	6b 96       	adiw	r28, 0x1b	; 27
    118c:	1f ae       	std	Y+63, r1	; 0x3f
    118e:	1e ae       	std	Y+62, r1	; 0x3e
    1190:	6b 97       	sbiw	r28, 0x1b	; 27
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
                break;
    1192:	2b cb       	rjmp	.-2474   	; 0x7ea <main+0x1c8>
				// GO TO GOAL WITH PUCK
				// --------------------------------------------------------------
                    
                case GO_TO_GOAL_WITH_PUCK:
				 
					if ( PT2_left_inside < 900 || PT3_right_inside < 900 )
    1194:	04 38       	cpi	r16, 0x84	; 132
    1196:	13 40       	sbci	r17, 0x03	; 3
    1198:	2c f0       	brlt	.+10     	; 0x11a4 <__stack+0x6a5>
    119a:	24 e8       	ldi	r18, 0x84	; 132
    119c:	a2 16       	cp	r10, r18
    119e:	23 e0       	ldi	r18, 0x03	; 3
    11a0:	b2 06       	cpc	r11, r18
    11a2:	5c f4       	brge	.+22     	; 0x11ba <__stack+0x6bb>
					{
						state = FIND_PUCK;
    11a4:	83 e0       	ldi	r24, 0x03	; 3
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	90 93 0d 01 	sts	0x010D, r25
    11ac:	80 93 0c 01 	sts	0x010C, r24
						status_go_to_goal = 0;
    11b0:	6b 96       	adiw	r28, 0x1b	; 27
    11b2:	1f ae       	std	Y+63, r1	; 0x3f
    11b4:	1e ae       	std	Y+62, r1	; 0x3e
    11b6:	6b 97       	sbiw	r28, 0x1b	; 27
						break;
    11b8:	18 cb       	rjmp	.-2512   	; 0x7ea <main+0x1c8>
					}
				
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    11ba:	25 96       	adiw	r28, 0x05	; 5
    11bc:	0e ad       	ldd	r16, Y+62	; 0x3e
    11be:	1f ad       	ldd	r17, Y+63	; 0x3f
    11c0:	25 97       	sbiw	r28, 0x05	; 5
    11c2:	c8 01       	movw	r24, r16
    11c4:	a5 96       	adiw	r28, 0x25	; 37
    11c6:	4e ad       	ldd	r20, Y+62	; 0x3e
    11c8:	5f ad       	ldd	r21, Y+63	; 0x3f
    11ca:	a5 97       	sbiw	r28, 0x25	; 37
    11cc:	84 1b       	sub	r24, r20
    11ce:	95 0b       	sbc	r25, r21
    11d0:	27 96       	adiw	r28, 0x07	; 7
    11d2:	ee ac       	ldd	r14, Y+62	; 0x3e
    11d4:	ff ac       	ldd	r15, Y+63	; 0x3f
    11d6:	27 97       	sbiw	r28, 0x07	; 7
    11d8:	88 9f       	mul	r24, r24
    11da:	b0 01       	movw	r22, r0
    11dc:	89 9f       	mul	r24, r25
    11de:	70 0d       	add	r23, r0
    11e0:	70 0d       	add	r23, r0
    11e2:	11 24       	eor	r1, r1
    11e4:	ee 9c       	mul	r14, r14
    11e6:	c0 01       	movw	r24, r0
    11e8:	ef 9c       	mul	r14, r15
    11ea:	90 0d       	add	r25, r0
    11ec:	90 0d       	add	r25, r0
    11ee:	11 24       	eor	r1, r1
    11f0:	68 0f       	add	r22, r24
    11f2:	79 1f       	adc	r23, r25
    11f4:	88 27       	eor	r24, r24
    11f6:	77 fd       	sbrc	r23, 7
    11f8:	80 95       	com	r24
    11fa:	98 2f       	mov	r25, r24
    11fc:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    1200:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    1204:	a1 96       	adiw	r28, 0x21	; 33
    1206:	6c af       	std	Y+60, r22	; 0x3c
    1208:	7d af       	std	Y+61, r23	; 0x3d
    120a:	8e af       	std	Y+62, r24	; 0x3e
    120c:	9f af       	std	Y+63, r25	; 0x3f
    120e:	a1 97       	sbiw	r28, 0x21	; 33
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	a9 01       	movw	r20, r18
    1216:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
    121a:	88 23       	and	r24, r24
    121c:	5c f4       	brge	.+22     	; 0x1234 <__stack+0x735>
					{
						status_go_to_goal = 0;
						state  = FIND_PUCK;
    121e:	83 e0       	ldi	r24, 0x03	; 3
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	90 93 0d 01 	sts	0x010D, r25
    1226:	80 93 0c 01 	sts	0x010C, r24
					}
				
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 0;
    122a:	6b 96       	adiw	r28, 0x1b	; 27
    122c:	1f ae       	std	Y+63, r1	; 0x3f
    122e:	1e ae       	std	Y+62, r1	; 0x3e
    1230:	6b 97       	sbiw	r28, 0x1b	; 27
						state  = FIND_PUCK;
						break;
    1232:	db ca       	rjmp	.-2634   	; 0x7ea <main+0x1c8>
					}
					
					if (status_go_to_goal == 0)
    1234:	6b 96       	adiw	r28, 0x1b	; 27
    1236:	8e ad       	ldd	r24, Y+62	; 0x3e
    1238:	9f ad       	ldd	r25, Y+63	; 0x3f
    123a:	6b 97       	sbiw	r28, 0x1b	; 27
    123c:	89 2b       	or	r24, r25
    123e:	09 f0       	breq	.+2      	; 0x1242 <__stack+0x743>
    1240:	57 c0       	rjmp	.+174    	; 0x12f0 <__stack+0x7f1>
					{
					
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    1242:	66 27       	eor	r22, r22
    1244:	77 27       	eor	r23, r23
    1246:	6e 19       	sub	r22, r14
    1248:	7f 09       	sbc	r23, r15
    124a:	88 27       	eor	r24, r24
    124c:	77 fd       	sbrc	r23, 7
    124e:	80 95       	com	r24
    1250:	98 2f       	mov	r25, r24
    1252:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    1256:	6b 01       	movw	r12, r22
    1258:	7c 01       	movw	r14, r24
					}
					
					if (status_go_to_goal == 0)
					{
					
						dir_x = goal_pos_x-x_robot;
    125a:	a5 96       	adiw	r28, 0x25	; 37
    125c:	6e ad       	ldd	r22, Y+62	; 0x3e
    125e:	7f ad       	ldd	r23, Y+63	; 0x3f
    1260:	a5 97       	sbiw	r28, 0x25	; 37
    1262:	60 1b       	sub	r22, r16
    1264:	71 0b       	sbc	r23, r17
    1266:	88 27       	eor	r24, r24
    1268:	77 fd       	sbrc	r23, 7
    126a:	80 95       	com	r24
    126c:	98 2f       	mov	r25, r24
    126e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1272:	90 58       	subi	r25, 0x80	; 128
    1274:	a7 01       	movw	r20, r14
    1276:	96 01       	movw	r18, r12
    1278:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <atan2>
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	44 e3       	ldi	r20, 0x34	; 52
    1282:	53 e4       	ldi	r21, 0x43	; 67
    1284:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    1288:	2b ed       	ldi	r18, 0xDB	; 219
    128a:	3f e0       	ldi	r19, 0x0F	; 15
    128c:	49 e4       	ldi	r20, 0x49	; 73
    128e:	50 e4       	ldi	r21, 0x40	; 64
    1290:	0e 94 c4 18 	call	0x3188	; 0x3188 <__divsf3>
    1294:	a6 96       	adiw	r28, 0x26	; 38
    1296:	6f af       	std	Y+63, r22	; 0x3f
    1298:	a6 97       	sbiw	r28, 0x26	; 38
    129a:	a7 96       	adiw	r28, 0x27	; 39
    129c:	7f af       	std	Y+63, r23	; 0x3f
    129e:	a7 97       	sbiw	r28, 0x27	; 39
    12a0:	a8 96       	adiw	r28, 0x28	; 40
    12a2:	8f af       	std	Y+63, r24	; 0x3f
    12a4:	a8 97       	sbiw	r28, 0x28	; 40
    12a6:	a9 96       	adiw	r28, 0x29	; 41
    12a8:	9f af       	std	Y+63, r25	; 0x3f
    12aa:	a9 97       	sbiw	r28, 0x29	; 41
		                 
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    12ac:	9e 01       	movw	r18, r28
    12ae:	2b 5f       	subi	r18, 0xFB	; 251
    12b0:	3f 4f       	sbci	r19, 0xFF	; 255
    12b2:	ae 01       	movw	r20, r28
    12b4:	4f 5f       	subi	r20, 0xFF	; 255
    12b6:	5f 4f       	sbci	r21, 0xFF	; 255
    12b8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
						
						if (diff_theta <20)
    12bc:	20 e0       	ldi	r18, 0x00	; 0
    12be:	30 e0       	ldi	r19, 0x00	; 0
    12c0:	40 ea       	ldi	r20, 0xA0	; 160
    12c2:	51 e4       	ldi	r21, 0x41	; 65
    12c4:	69 81       	ldd	r22, Y+1	; 0x01
    12c6:	7a 81       	ldd	r23, Y+2	; 0x02
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	0c f4       	brge	.+2      	; 0x12d6 <__stack+0x7d7>
    12d4:	84 ca       	rjmp	.-2808   	; 0x7de <main+0x1bc>
							break;
						}
						else
						{
							
							if (bank == 0)
    12d6:	8d 81       	ldd	r24, Y+5	; 0x05
    12d8:	9e 81       	ldd	r25, Y+6	; 0x06
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	19 f4       	brne	.+6      	; 0x12e4 <__stack+0x7e5>
							{
								//turnOnBlueLED();
								circle_left();
    12de:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <circle_left>
    12e2:	83 ca       	rjmp	.-2810   	; 0x7ea <main+0x1c8>
								circle_started_before = 1;
							}
							else if (bank == 1)
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	09 f0       	breq	.+2      	; 0x12ea <__stack+0x7eb>
    12e8:	80 ca       	rjmp	.-2816   	; 0x7ea <main+0x1c8>
							{
								//turnOffBlueLED();
								circle_right();
    12ea:	0e 94 02 03 	call	0x604	; 0x604 <circle_right>
    12ee:	7d ca       	rjmp	.-2822   	; 0x7ea <main+0x1c8>
								circle_started_before = 1;
							}								
						
						}		                 
					}
					else if (status_go_to_goal == 1)
    12f0:	6b 96       	adiw	r28, 0x1b	; 27
    12f2:	ae ad       	ldd	r26, Y+62	; 0x3e
    12f4:	bf ad       	ldd	r27, Y+63	; 0x3f
    12f6:	6b 97       	sbiw	r28, 0x1b	; 27
    12f8:	11 97       	sbiw	r26, 0x01	; 1
    12fa:	09 f0       	breq	.+2      	; 0x12fe <__stack+0x7ff>
    12fc:	76 ca       	rjmp	.-2836   	; 0x7ea <main+0x1c8>
					{
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    12fe:	66 27       	eor	r22, r22
    1300:	77 27       	eor	r23, r23
    1302:	6e 19       	sub	r22, r14
    1304:	7f 09       	sbc	r23, r15
    1306:	88 27       	eor	r24, r24
    1308:	77 fd       	sbrc	r23, 7
    130a:	80 95       	com	r24
    130c:	98 2f       	mov	r25, r24
    130e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    1312:	6b 01       	movw	r12, r22
    1314:	7c 01       	movw	r14, r24
						
						}		                 
					}
					else if (status_go_to_goal == 1)
					{
						dir_x = goal_pos_x-x_robot;
    1316:	a5 96       	adiw	r28, 0x25	; 37
    1318:	6e ad       	ldd	r22, Y+62	; 0x3e
    131a:	7f ad       	ldd	r23, Y+63	; 0x3f
    131c:	a5 97       	sbiw	r28, 0x25	; 37
    131e:	60 1b       	sub	r22, r16
    1320:	71 0b       	sbc	r23, r17
    1322:	88 27       	eor	r24, r24
    1324:	77 fd       	sbrc	r23, 7
    1326:	80 95       	com	r24
    1328:	98 2f       	mov	r25, r24
    132a:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    132e:	90 58       	subi	r25, 0x80	; 128
    1330:	a7 01       	movw	r20, r14
    1332:	96 01       	movw	r18, r12
    1334:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <atan2>
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	44 e3       	ldi	r20, 0x34	; 52
    133e:	53 e4       	ldi	r21, 0x43	; 67
    1340:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    1344:	2b ed       	ldi	r18, 0xDB	; 219
    1346:	3f e0       	ldi	r19, 0x0F	; 15
    1348:	49 e4       	ldi	r20, 0x49	; 73
    134a:	50 e4       	ldi	r21, 0x40	; 64
    134c:	0e 94 c4 18 	call	0x3188	; 0x3188 <__divsf3>
    1350:	a6 96       	adiw	r28, 0x26	; 38
    1352:	6f af       	std	Y+63, r22	; 0x3f
    1354:	a6 97       	sbiw	r28, 0x26	; 38
    1356:	a7 96       	adiw	r28, 0x27	; 39
    1358:	7f af       	std	Y+63, r23	; 0x3f
    135a:	a7 97       	sbiw	r28, 0x27	; 39
    135c:	a8 96       	adiw	r28, 0x28	; 40
    135e:	8f af       	std	Y+63, r24	; 0x3f
    1360:	a8 97       	sbiw	r28, 0x28	; 40
    1362:	a9 96       	adiw	r28, 0x29	; 41
    1364:	9f af       	std	Y+63, r25	; 0x3f
    1366:	a9 97       	sbiw	r28, 0x29	; 41
					
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    1368:	9e 01       	movw	r18, r28
    136a:	2b 5f       	subi	r18, 0xFB	; 251
    136c:	3f 4f       	sbci	r19, 0xFF	; 255
    136e:	ae 01       	movw	r20, r28
    1370:	4f 5f       	subi	r20, 0xFF	; 255
    1372:	5f 4f       	sbci	r21, 0xFF	; 255
    1374:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
					
						move_robot_after_get_puck(bank,diff_theta);
    1378:	69 81       	ldd	r22, Y+1	; 0x01
    137a:	7a 81       	ldd	r23, Y+2	; 0x02
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	9c 81       	ldd	r25, Y+4	; 0x04
    1380:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	0e 94 88 02 	call	0x510	; 0x510 <move_robot_after_get_puck>
    138c:	2e ca       	rjmp	.-2980   	; 0x7ea <main+0x1c8>
                    
                    // --------------------------------------------------------------
					// BLUE LED STATE
					// --------------------------------------------------------------
				case BLUE_LED_STATE:
					stop_motor();
    138e:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					turnOnBlueLED();
    1392:	0e 94 02 0a 	call	0x1404	; 0x1404 <turnOnBlueLED>
    1396:	bf eb       	ldi	r27, 0xBF	; 191
    1398:	e7 e2       	ldi	r30, 0x27	; 39
    139a:	f9 e0       	ldi	r31, 0x09	; 9
    139c:	b1 50       	subi	r27, 0x01	; 1
    139e:	e0 40       	sbci	r30, 0x00	; 0
    13a0:	f0 40       	sbci	r31, 0x00	; 0
    13a2:	e1 f7       	brne	.-8      	; 0x139c <__stack+0x89d>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <__stack+0x8a7>
    13a6:	00 00       	nop
					m_wait(3000);
					turnOffBlueLED();
    13a8:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOffBlueLED>
					state = STOP_STATE;
    13ac:	85 e1       	ldi	r24, 0x15	; 21
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	90 93 0d 01 	sts	0x010D, r25
    13b4:	80 93 0c 01 	sts	0x010C, r24
					break;
    13b8:	18 ca       	rjmp	.-3024   	; 0x7ea <main+0x1c8>
					// --------------------------------------------------------------
					// STOP STATE
					// --------------------------------------------------------------
				case STOP_STATE:
					//m_green(ON);
					turnOffBlueLED();
    13ba:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOffBlueLED>
					stop_motor();
    13be:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					break;
    13c2:	13 ca       	rjmp	.-3034   	; 0x7ea <main+0x1c8>
                    
					// --------------------------------------------------------------
					// DEFAULT STATE
					// --------------------------------------------------------------
				default:
					stop_motor();
    13c4:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					break;
    13c8:	10 ca       	rjmp	.-3040   	; 0x7ea <main+0x1c8>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    13ca:	ee 24       	eor	r14, r14
    13cc:	e3 94       	inc	r14
    13ce:	f1 2c       	mov	r15, r1
    13d0:	14 cb       	rjmp	.-2520   	; 0x9fa <main+0x3d8>
                case(6):
                    PT7_have_puck = ADC;
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
    13d2:	d3 01       	movw	r26, r6
    13d4:	8c 91       	ld	r24, X
    13d6:	80 61       	ori	r24, 0x10	; 16
    13d8:	8c 93       	st	X, r24
    13da:	0c cb       	rjmp	.-2536   	; 0x9f4 <main+0x3d2>

000013dc <__vector_41>:

// --------------------------------------------------------------
// INTERRUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    13dc:	1f 92       	push	r1
    13de:	0f 92       	push	r0
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	0f 92       	push	r0
    13e4:	11 24       	eor	r1, r1
    13e6:	8f 93       	push	r24
    13e8:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    13ea:	81 e0       	ldi	r24, 0x01	; 1
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	90 93 0f 01 	sts	0x010F, r25
    13f2:	80 93 0e 01 	sts	0x010E, r24
}
    13f6:	9f 91       	pop	r25
    13f8:	8f 91       	pop	r24
    13fa:	0f 90       	pop	r0
    13fc:	0f be       	out	0x3f, r0	; 63
    13fe:	0f 90       	pop	r0
    1400:	1f 90       	pop	r1
    1402:	18 95       	reti

00001404 <turnOnBlueLED>:



void turnOnBlueLED(void)
{
	set(PORTD,5);
    1404:	5d 9a       	sbi	0x0b, 5	; 11
    1406:	08 95       	ret

00001408 <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
    1408:	5d 98       	cbi	0x0b, 5	; 11
    140a:	08 95       	ret

0000140c <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
    140c:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
    140e:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
    1410:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
    1412:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
    1414:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
    1416:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
    1418:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
    141a:	5d 98       	cbi	0x0b, 5	; 11
    141c:	08 95       	ret

0000141e <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
    141e:	ea e7       	ldi	r30, 0x7A	; 122
    1420:	f0 e0       	ldi	r31, 0x00	; 0
    1422:	20 81       	ld	r18, Z
    1424:	2f 77       	andi	r18, 0x7F	; 127
    1426:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
    1428:	83 30       	cpi	r24, 0x03	; 3
    142a:	91 05       	cpc	r25, r1
    142c:	09 f4       	brne	.+2      	; 0x1430 <get_analog_val+0x12>
    142e:	49 c0       	rjmp	.+146    	; 0x14c2 <get_analog_val+0xa4>
    1430:	3c f4       	brge	.+14     	; 0x1440 <get_analog_val+0x22>
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	91 05       	cpc	r25, r1
    1436:	19 f1       	breq	.+70     	; 0x147e <get_analog_val+0x60>
    1438:	9c f5       	brge	.+102    	; 0x14a0 <get_analog_val+0x82>
    143a:	89 2b       	or	r24, r25
    143c:	79 f0       	breq	.+30     	; 0x145c <get_analog_val+0x3e>
    143e:	95 c0       	rjmp	.+298    	; 0x156a <get_analog_val+0x14c>
    1440:	85 30       	cpi	r24, 0x05	; 5
    1442:	91 05       	cpc	r25, r1
    1444:	09 f4       	brne	.+2      	; 0x1448 <get_analog_val+0x2a>
    1446:	5f c0       	rjmp	.+190    	; 0x1506 <get_analog_val+0xe8>
    1448:	0c f4       	brge	.+2      	; 0x144c <get_analog_val+0x2e>
    144a:	4c c0       	rjmp	.+152    	; 0x14e4 <get_analog_val+0xc6>
    144c:	86 30       	cpi	r24, 0x06	; 6
    144e:	91 05       	cpc	r25, r1
    1450:	09 f4       	brne	.+2      	; 0x1454 <get_analog_val+0x36>
    1452:	6a c0       	rjmp	.+212    	; 0x1528 <get_analog_val+0x10a>
    1454:	07 97       	sbiw	r24, 0x07	; 7
    1456:	09 f0       	breq	.+2      	; 0x145a <get_analog_val+0x3c>
    1458:	88 c0       	rjmp	.+272    	; 0x156a <get_analog_val+0x14c>
    145a:	77 c0       	rjmp	.+238    	; 0x154a <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
    145c:	eb e7       	ldi	r30, 0x7B	; 123
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	8f 7d       	andi	r24, 0xDF	; 223
    1464:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1466:	ec e7       	ldi	r30, 0x7C	; 124
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8b 7f       	andi	r24, 0xFB	; 251
    146e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1470:	80 81       	ld	r24, Z
    1472:	8d 7f       	andi	r24, 0xFD	; 253
    1474:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1476:	80 81       	ld	r24, Z
    1478:	8e 7f       	andi	r24, 0xFE	; 254
    147a:	80 83       	st	Z, r24
            break;
    147c:	76 c0       	rjmp	.+236    	; 0x156a <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
    147e:	eb e7       	ldi	r30, 0x7B	; 123
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8f 7d       	andi	r24, 0xDF	; 223
    1486:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1488:	ec e7       	ldi	r30, 0x7C	; 124
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8b 7f       	andi	r24, 0xFB	; 251
    1490:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1492:	80 81       	ld	r24, Z
    1494:	8d 7f       	andi	r24, 0xFD	; 253
    1496:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1498:	80 81       	ld	r24, Z
    149a:	81 60       	ori	r24, 0x01	; 1
    149c:	80 83       	st	Z, r24
            break;
    149e:	65 c0       	rjmp	.+202    	; 0x156a <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
    14a0:	eb e7       	ldi	r30, 0x7B	; 123
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8f 7d       	andi	r24, 0xDF	; 223
    14a8:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    14aa:	ec e7       	ldi	r30, 0x7C	; 124
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	84 60       	ori	r24, 0x04	; 4
    14b2:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    14b4:	80 81       	ld	r24, Z
    14b6:	8d 7f       	andi	r24, 0xFD	; 253
    14b8:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    14ba:	80 81       	ld	r24, Z
    14bc:	8e 7f       	andi	r24, 0xFE	; 254
    14be:	80 83       	st	Z, r24
            break;
    14c0:	54 c0       	rjmp	.+168    	; 0x156a <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
    14c2:	eb e7       	ldi	r30, 0x7B	; 123
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	80 81       	ld	r24, Z
    14c8:	8f 7d       	andi	r24, 0xDF	; 223
    14ca:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    14cc:	ec e7       	ldi	r30, 0x7C	; 124
    14ce:	f0 e0       	ldi	r31, 0x00	; 0
    14d0:	80 81       	ld	r24, Z
    14d2:	84 60       	ori	r24, 0x04	; 4
    14d4:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    14d6:	80 81       	ld	r24, Z
    14d8:	8d 7f       	andi	r24, 0xFD	; 253
    14da:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    14dc:	80 81       	ld	r24, Z
    14de:	81 60       	ori	r24, 0x01	; 1
    14e0:	80 83       	st	Z, r24
            break;
    14e2:	43 c0       	rjmp	.+134    	; 0x156a <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
    14e4:	eb e7       	ldi	r30, 0x7B	; 123
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7d       	andi	r24, 0xDF	; 223
    14ec:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    14ee:	ec e7       	ldi	r30, 0x7C	; 124
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	84 60       	ori	r24, 0x04	; 4
    14f6:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    14f8:	80 81       	ld	r24, Z
    14fa:	82 60       	ori	r24, 0x02	; 2
    14fc:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    14fe:	80 81       	ld	r24, Z
    1500:	8e 7f       	andi	r24, 0xFE	; 254
    1502:	80 83       	st	Z, r24
            break;
    1504:	32 c0       	rjmp	.+100    	; 0x156a <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
    1506:	eb e7       	ldi	r30, 0x7B	; 123
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
    150c:	8f 7d       	andi	r24, 0xDF	; 223
    150e:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    1510:	ec e7       	ldi	r30, 0x7C	; 124
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	80 81       	ld	r24, Z
    1516:	84 60       	ori	r24, 0x04	; 4
    1518:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    151a:	80 81       	ld	r24, Z
    151c:	82 60       	ori	r24, 0x02	; 2
    151e:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1520:	80 81       	ld	r24, Z
    1522:	81 60       	ori	r24, 0x01	; 1
    1524:	80 83       	st	Z, r24
            break;
    1526:	21 c0       	rjmp	.+66     	; 0x156a <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
    1528:	eb e7       	ldi	r30, 0x7B	; 123
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 62       	ori	r24, 0x20	; 32
    1530:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1532:	ec e7       	ldi	r30, 0x7C	; 124
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8b 7f       	andi	r24, 0xFB	; 251
    153a:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    153c:	80 81       	ld	r24, Z
    153e:	8d 7f       	andi	r24, 0xFD	; 253
    1540:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1542:	80 81       	ld	r24, Z
    1544:	8e 7f       	andi	r24, 0xFE	; 254
    1546:	80 83       	st	Z, r24
            break;
    1548:	10 c0       	rjmp	.+32     	; 0x156a <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
    154a:	eb e7       	ldi	r30, 0x7B	; 123
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	80 62       	ori	r24, 0x20	; 32
    1552:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1554:	ec e7       	ldi	r30, 0x7C	; 124
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	8b 7f       	andi	r24, 0xFB	; 251
    155c:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    155e:	80 81       	ld	r24, Z
    1560:	8d 7f       	andi	r24, 0xFD	; 253
    1562:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1564:	80 81       	ld	r24, Z
    1566:	81 60       	ori	r24, 0x01	; 1
    1568:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
    156a:	ea e7       	ldi	r30, 0x7A	; 122
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	80 68       	ori	r24, 0x80	; 128
    1572:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
    1574:	80 81       	ld	r24, Z
    1576:	80 64       	ori	r24, 0x40	; 64
    1578:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
    157a:	80 81       	ld	r24, Z
    157c:	80 61       	ori	r24, 0x10	; 16
    157e:	80 83       	st	Z, r24
    1580:	08 95       	ret

00001582 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
    1582:	83 ec       	ldi	r24, 0xC3	; 195
    1584:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    1588:	e3 ec       	ldi	r30, 0xC3	; 195
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	8d 7f       	andi	r24, 0xFD	; 253
    1590:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    1592:	80 81       	ld	r24, Z
    1594:	8e 7f       	andi	r24, 0xFE	; 254
    1596:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    1598:	e2 e7       	ldi	r30, 0x72	; 114
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	84 60       	ori	r24, 0x04	; 4
    15a0:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
    15a2:	e1 ec       	ldi	r30, 0xC1	; 193
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	88 60       	ori	r24, 0x08	; 8
    15aa:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
    15ac:	80 81       	ld	r24, Z
    15ae:	84 60       	ori	r24, 0x04	; 4
    15b0:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    15b2:	80 81       	ld	r24, Z
    15b4:	8d 7f       	andi	r24, 0xFD	; 253
    15b6:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    15b8:	80 81       	ld	r24, Z
    15ba:	81 60       	ori	r24, 0x01	; 1
    15bc:	80 83       	st	Z, r24
    15be:	08 95       	ret

000015c0 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    15c0:	ec e7       	ldi	r30, 0x7C	; 124
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	8f 77       	andi	r24, 0x7F	; 127
    15c8:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    15ca:	80 81       	ld	r24, Z
    15cc:	80 64       	ori	r24, 0x40	; 64
    15ce:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    15d0:	aa e7       	ldi	r26, 0x7A	; 122
    15d2:	b0 e0       	ldi	r27, 0x00	; 0
    15d4:	8c 91       	ld	r24, X
    15d6:	84 60       	ori	r24, 0x04	; 4
    15d8:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    15da:	8c 91       	ld	r24, X
    15dc:	82 60       	ori	r24, 0x02	; 2
    15de:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    15e0:	8c 91       	ld	r24, X
    15e2:	81 60       	ori	r24, 0x01	; 1
    15e4:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    15e6:	ee e7       	ldi	r30, 0x7E	; 126
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	81 60       	ori	r24, 0x01	; 1
    15ee:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    15f0:	80 81       	ld	r24, Z
    15f2:	82 60       	ori	r24, 0x02	; 2
    15f4:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    15f6:	80 81       	ld	r24, Z
    15f8:	80 61       	ori	r24, 0x10	; 16
    15fa:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    15fc:	80 81       	ld	r24, Z
    15fe:	80 62       	ori	r24, 0x20	; 32
    1600:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    1602:	80 81       	ld	r24, Z
    1604:	80 64       	ori	r24, 0x40	; 64
    1606:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    1608:	80 81       	ld	r24, Z
    160a:	80 68       	ori	r24, 0x80	; 128
    160c:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    160e:	ed e7       	ldi	r30, 0x7D	; 125
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    1618:	80 81       	ld	r24, Z
    161a:	82 60       	ori	r24, 0x02	; 2
    161c:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    161e:	8c 91       	ld	r24, X
    1620:	80 62       	ori	r24, 0x20	; 32
    1622:	8c 93       	st	X, r24
    1624:	08 95       	ret

00001626 <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    1626:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    1628:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    162a:	88 e8       	ldi	r24, 0x88	; 136
    162c:	93 e1       	ldi	r25, 0x13	; 19
    162e:	90 93 89 00 	sts	0x0089, r25
    1632:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
    1636:	10 92 8b 00 	sts	0x008B, r1
    163a:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    163e:	10 92 8d 00 	sts	0x008D, r1
    1642:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    1646:	a1 e8       	ldi	r26, 0x81	; 129
    1648:	b0 e0       	ldi	r27, 0x00	; 0
    164a:	8c 91       	ld	r24, X
    164c:	80 61       	ori	r24, 0x10	; 16
    164e:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    1650:	8c 91       	ld	r24, X
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    1656:	e0 e8       	ldi	r30, 0x80	; 128
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	80 81       	ld	r24, Z
    165c:	82 60       	ori	r24, 0x02	; 2
    165e:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    1660:	80 81       	ld	r24, Z
    1662:	81 60       	ori	r24, 0x01	; 1
    1664:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    1666:	80 81       	ld	r24, Z
    1668:	80 62       	ori	r24, 0x20	; 32
    166a:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    166c:	80 81       	ld	r24, Z
    166e:	8f 7e       	andi	r24, 0xEF	; 239
    1670:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    1672:	80 81       	ld	r24, Z
    1674:	88 60       	ori	r24, 0x08	; 8
    1676:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    1678:	80 81       	ld	r24, Z
    167a:	8b 7f       	andi	r24, 0xFB	; 251
    167c:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    167e:	8c 91       	ld	r24, X
    1680:	8b 7f       	andi	r24, 0xFB	; 251
    1682:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    1684:	8c 91       	ld	r24, X
    1686:	8d 7f       	andi	r24, 0xFD	; 253
    1688:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    168a:	8c 91       	ld	r24, X
    168c:	81 60       	ori	r24, 0x01	; 1
    168e:	8c 93       	st	X, r24
    1690:	08 95       	ret

00001692 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1692:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1694:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1696:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1698:	8c e0       	ldi	r24, 0x0C	; 12
    169a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    169e:	e9 e6       	ldi	r30, 0x69	; 105
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	80 62       	ori	r24, 0x20	; 32
    16a6:	80 83       	st	Z, r24
    16a8:	80 81       	ld	r24, Z
    16aa:	8f 7e       	andi	r24, 0xEF	; 239
    16ac:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    16ae:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    16b0:	78 94       	sei
    16b2:	08 95       	ret

000016b4 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    16b4:	1f 93       	push	r17
    16b6:	cf 93       	push	r28
    16b8:	df 93       	push	r29
    16ba:	18 2f       	mov	r17, r24
    16bc:	d6 2f       	mov	r29, r22
    16be:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    16c0:	0e 94 49 0b 	call	0x1692	; 0x1692 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    16c4:	94 ea       	ldi	r25, 0xA4	; 164
    16c6:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    16ca:	ec eb       	ldi	r30, 0xBC	; 188
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	90 81       	ld	r25, Z
    16d0:	99 23       	and	r25, r25
    16d2:	ec f7       	brge	.-6      	; 0x16ce <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    16d4:	90 e5       	ldi	r25, 0x50	; 80
    16d6:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    16da:	94 e8       	ldi	r25, 0x84	; 132
    16dc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    16e0:	ec eb       	ldi	r30, 0xBC	; 188
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	90 81       	ld	r25, Z
    16e6:	99 23       	and	r25, r25
    16e8:	ec f7       	brge	.-6      	; 0x16e4 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    16ea:	90 91 b9 00 	lds	r25, 0x00B9
    16ee:	98 7f       	andi	r25, 0xF8	; 248
    16f0:	90 32       	cpi	r25, 0x20	; 32
    16f2:	29 f4       	brne	.+10     	; 0x16fe <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16f4:	84 e9       	ldi	r24, 0x94	; 148
    16f6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    16fa:	80 e0       	ldi	r24, 0x00	; 0
    16fc:	2d c0       	rjmp	.+90     	; 0x1758 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1704:	84 e8       	ldi	r24, 0x84	; 132
    1706:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    170a:	ec eb       	ldi	r30, 0xBC	; 188
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	90 81       	ld	r25, Z
    1710:	99 23       	and	r25, r25
    1712:	ec f7       	brge	.-6      	; 0x170e <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1714:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1718:	84 e8       	ldi	r24, 0x84	; 132
    171a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    171e:	ec eb       	ldi	r30, 0xBC	; 188
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	88 23       	and	r24, r24
    1726:	ec f7       	brge	.-6      	; 0x1722 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1728:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    172c:	84 e8       	ldi	r24, 0x84	; 132
    172e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1732:	ec eb       	ldi	r30, 0xBC	; 188
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	88 23       	and	r24, r24
    173a:	ec f7       	brge	.-6      	; 0x1736 <m_rf_open+0x82>
	
	TWDR = packet_length;
    173c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1740:	84 e8       	ldi	r24, 0x84	; 132
    1742:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1746:	ec eb       	ldi	r30, 0xBC	; 188
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	88 23       	and	r24, r24
    174e:	ec f7       	brge	.-6      	; 0x174a <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1750:	84 e9       	ldi	r24, 0x94	; 148
    1752:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1756:	81 e0       	ldi	r24, 0x01	; 1
}
    1758:	df 91       	pop	r29
    175a:	cf 91       	pop	r28
    175c:	1f 91       	pop	r17
    175e:	08 95       	ret

00001760 <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    1764:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1766:	94 ea       	ldi	r25, 0xA4	; 164
    1768:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    176c:	ec eb       	ldi	r30, 0xBC	; 188
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	90 81       	ld	r25, Z
    1772:	99 23       	and	r25, r25
    1774:	ec f7       	brge	.-6      	; 0x1770 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1776:	90 e5       	ldi	r25, 0x50	; 80
    1778:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    177c:	94 e8       	ldi	r25, 0x84	; 132
    177e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1782:	ec eb       	ldi	r30, 0xBC	; 188
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	90 81       	ld	r25, Z
    1788:	99 23       	and	r25, r25
    178a:	ec f7       	brge	.-6      	; 0x1786 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    178c:	90 91 b9 00 	lds	r25, 0x00B9
    1790:	98 7f       	andi	r25, 0xF8	; 248
    1792:	90 32       	cpi	r25, 0x20	; 32
    1794:	31 f4       	brne	.+12     	; 0x17a2 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1796:	84 e9       	ldi	r24, 0x94	; 148
    1798:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    179c:	78 94       	sei
		return 0;
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	32 c0       	rjmp	.+100    	; 0x1806 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    17a2:	93 e0       	ldi	r25, 0x03	; 3
    17a4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    17a8:	94 e8       	ldi	r25, 0x84	; 132
    17aa:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    17ae:	ec eb       	ldi	r30, 0xBC	; 188
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	90 81       	ld	r25, Z
    17b4:	99 23       	and	r25, r25
    17b6:	ec f7       	brge	.-6      	; 0x17b2 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    17b8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    17bc:	84 e8       	ldi	r24, 0x84	; 132
    17be:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    17c2:	ec eb       	ldi	r30, 0xBC	; 188
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	88 23       	and	r24, r24
    17ca:	ec f7       	brge	.-6      	; 0x17c6 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    17cc:	24 2f       	mov	r18, r20
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	12 16       	cp	r1, r18
    17d2:	13 06       	cpc	r1, r19
    17d4:	9c f4       	brge	.+38     	; 0x17fc <m_rf_send+0x9c>
    17d6:	a6 2f       	mov	r26, r22
    17d8:	b7 2f       	mov	r27, r23
    17da:	80 e0       	ldi	r24, 0x00	; 0
    17dc:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    17de:	cb eb       	ldi	r28, 0xBB	; 187
    17e0:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    17e2:	ec eb       	ldi	r30, 0xBC	; 188
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    17e8:	4d 91       	ld	r20, X+
    17ea:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    17ec:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    17ee:	40 81       	ld	r20, Z
    17f0:	44 23       	and	r20, r20
    17f2:	ec f7       	brge	.-6      	; 0x17ee <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    17f4:	01 96       	adiw	r24, 0x01	; 1
    17f6:	82 17       	cp	r24, r18
    17f8:	93 07       	cpc	r25, r19
    17fa:	b4 f3       	brlt	.-20     	; 0x17e8 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    17fc:	84 e9       	ldi	r24, 0x94	; 148
    17fe:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    1802:	78 94       	sei
	
	return 1;
    1804:	81 e0       	ldi	r24, 0x01	; 1
}
    1806:	df 91       	pop	r29
    1808:	cf 91       	pop	r28
    180a:	08 95       	ret

0000180c <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	8f 93       	push	r24
    1818:	9f 93       	push	r25
    181a:	ef 93       	push	r30
    181c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    181e:	e1 ee       	ldi	r30, 0xE1	; 225
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
        UDINT = 0;
    1824:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1826:	83 ff       	sbrs	r24, 3
    1828:	11 c0       	rjmp	.+34     	; 0x184c <__vector_10+0x40>
		UENUM = 0;
    182a:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    182e:	91 e0       	ldi	r25, 0x01	; 1
    1830:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1834:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1838:	92 e1       	ldi	r25, 0x12	; 18
    183a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    183e:	98 e0       	ldi	r25, 0x08	; 8
    1840:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1844:	10 92 29 01 	sts	0x0129, r1
		cdc_line_rtsdtr = 0;
    1848:	10 92 2a 01 	sts	0x012A, r1
        }
	if (intbits & (1<<SOFI)) {
    184c:	82 ff       	sbrs	r24, 2
    184e:	13 c0       	rjmp	.+38     	; 0x1876 <__vector_10+0x6a>
		if (usb_configuration) {
    1850:	80 91 29 01 	lds	r24, 0x0129
    1854:	88 23       	and	r24, r24
    1856:	79 f0       	breq	.+30     	; 0x1876 <__vector_10+0x6a>
			t = transmit_flush_timer;
    1858:	80 91 28 01 	lds	r24, 0x0128
			if (t) {
    185c:	88 23       	and	r24, r24
    185e:	59 f0       	breq	.+22     	; 0x1876 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1860:	81 50       	subi	r24, 0x01	; 1
    1862:	80 93 28 01 	sts	0x0128, r24
				if (!t) {
    1866:	81 11       	cpse	r24, r1
    1868:	06 c0       	rjmp	.+12     	; 0x1876 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1870:	8a e3       	ldi	r24, 0x3A	; 58
    1872:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    1876:	ff 91       	pop	r31
    1878:	ef 91       	pop	r30
    187a:	9f 91       	pop	r25
    187c:	8f 91       	pop	r24
    187e:	0f 90       	pop	r0
    1880:	0f be       	out	0x3f, r0	; 63
    1882:	0f 90       	pop	r0
    1884:	1f 90       	pop	r1
    1886:	18 95       	reti

00001888 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1888:	1f 92       	push	r1
    188a:	0f 92       	push	r0
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	0f 92       	push	r0
    1890:	11 24       	eor	r1, r1
    1892:	0f 93       	push	r16
    1894:	1f 93       	push	r17
    1896:	2f 93       	push	r18
    1898:	3f 93       	push	r19
    189a:	4f 93       	push	r20
    189c:	5f 93       	push	r21
    189e:	6f 93       	push	r22
    18a0:	7f 93       	push	r23
    18a2:	8f 93       	push	r24
    18a4:	9f 93       	push	r25
    18a6:	af 93       	push	r26
    18a8:	bf 93       	push	r27
    18aa:	cf 93       	push	r28
    18ac:	df 93       	push	r29
    18ae:	ef 93       	push	r30
    18b0:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    18b2:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    18b6:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    18ba:	83 ff       	sbrs	r24, 3
    18bc:	51 c1       	rjmp	.+674    	; 0x1b60 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    18be:	e1 ef       	ldi	r30, 0xF1	; 241
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    18c4:	40 81       	ld	r20, Z
                wValue = UEDATX;
    18c6:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    18c8:	30 81       	ld	r19, Z
    18ca:	93 2f       	mov	r25, r19
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	dc 01       	movw	r26, r24
    18d0:	a2 2b       	or	r26, r18
    18d2:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    18d4:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    18d6:	60 81       	ld	r22, Z
    18d8:	96 2f       	mov	r25, r22
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	85 2b       	or	r24, r21
                wLength = UEDATX;
    18de:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    18e0:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    18e2:	52 ef       	ldi	r21, 0xF2	; 242
    18e4:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    18e8:	46 30       	cpi	r20, 0x06	; 6
    18ea:	09 f0       	breq	.+2      	; 0x18ee <__vector_11+0x66>
    18ec:	5c c0       	rjmp	.+184    	; 0x19a6 <__vector_11+0x11e>
    18ee:	04 c0       	rjmp	.+8      	; 0x18f8 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    18f0:	81 e2       	ldi	r24, 0x21	; 33
    18f2:	80 93 eb 00 	sts	0x00EB, r24
					return;
    18f6:	3b c1       	rjmp	.+630    	; 0x1b6e <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    18f8:	c6 e0       	ldi	r28, 0x06	; 6
    18fa:	47 ef       	ldi	r20, 0xF7	; 247
    18fc:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    18fe:	fa 01       	movw	r30, r20
    1900:	65 91       	lpm	r22, Z+
    1902:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1904:	26 17       	cp	r18, r22
    1906:	37 07       	cpc	r19, r23
    1908:	19 f0       	breq	.+6      	; 0x1910 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    190a:	49 5f       	subi	r20, 0xF9	; 249
    190c:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    190e:	20 c0       	rjmp	.+64     	; 0x1950 <__vector_11+0xc8>
				}
				list += 2;
    1910:	fa 01       	movw	r30, r20
    1912:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1914:	65 91       	lpm	r22, Z+
    1916:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1918:	86 17       	cp	r24, r22
    191a:	97 07       	cpc	r25, r23
    191c:	19 f0       	breq	.+6      	; 0x1924 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    191e:	49 5f       	subi	r20, 0xF9	; 249
    1920:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1922:	16 c0       	rjmp	.+44     	; 0x1950 <__vector_11+0xc8>
				}
				list += 2;
    1924:	fa 01       	movw	r30, r20
    1926:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1928:	85 91       	lpm	r24, Z+
    192a:	94 91       	lpm	r25, Z
    192c:	28 2f       	mov	r18, r24
    192e:	39 2f       	mov	r19, r25
				list += 2;
    1930:	fa 01       	movw	r30, r20
    1932:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1934:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1936:	9b 2f       	mov	r25, r27
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    193c:	8f 3f       	cpi	r24, 0xFF	; 255
    193e:	91 05       	cpc	r25, r1
    1940:	19 f0       	breq	.+6      	; 0x1948 <__vector_11+0xc0>
    1942:	10 f0       	brcs	.+4      	; 0x1948 <__vector_11+0xc0>
    1944:	8f ef       	ldi	r24, 0xFF	; 255
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	84 17       	cp	r24, r20
    194a:	28 f4       	brcc	.+10     	; 0x1956 <__vector_11+0xce>
    194c:	48 2f       	mov	r20, r24
    194e:	03 c0       	rjmp	.+6      	; 0x1956 <__vector_11+0xce>
    1950:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    1952:	a9 f6       	brne	.-86     	; 0x18fe <__vector_11+0x76>
    1954:	cd cf       	rjmp	.-102    	; 0x18f0 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1956:	c8 ee       	ldi	r28, 0xE8	; 232
    1958:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    195a:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    195c:	a1 ef       	ldi	r26, 0xF1	; 241
    195e:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1960:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    1962:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    1964:	98 2f       	mov	r25, r24
    1966:	95 70       	andi	r25, 0x05	; 5
    1968:	e1 f3       	breq	.-8      	; 0x1962 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    196a:	82 fd       	sbrc	r24, 2
    196c:	00 c1       	rjmp	.+512    	; 0x1b6e <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    196e:	64 2f       	mov	r22, r20
    1970:	41 31       	cpi	r20, 0x11	; 17
    1972:	08 f0       	brcs	.+2      	; 0x1976 <__vector_11+0xee>
    1974:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    1976:	66 23       	and	r22, r22
    1978:	09 f4       	brne	.+2      	; 0x197c <__vector_11+0xf4>
    197a:	f6 c0       	rjmp	.+492    	; 0x1b68 <__vector_11+0x2e0>
    197c:	c9 01       	movw	r24, r18
    197e:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    1980:	fc 01       	movw	r30, r24
    1982:	01 96       	adiw	r24, 0x01	; 1
    1984:	e4 91       	lpm	r30, Z
    1986:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1988:	51 50       	subi	r21, 0x01	; 1
    198a:	d1 f7       	brne	.-12     	; 0x1980 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    198c:	86 2f       	mov	r24, r22
    198e:	81 50       	subi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	28 0f       	add	r18, r24
    1996:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    1998:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    199a:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    199c:	41 11       	cpse	r20, r1
    199e:	e1 cf       	rjmp	.-62     	; 0x1962 <__vector_11+0xda>
    19a0:	60 31       	cpi	r22, 0x10	; 16
    19a2:	f9 f2       	breq	.-66     	; 0x1962 <__vector_11+0xda>
    19a4:	e4 c0       	rjmp	.+456    	; 0x1b6e <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    19a6:	45 30       	cpi	r20, 0x05	; 5
    19a8:	61 f4       	brne	.+24     	; 0x19c2 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19aa:	8e ef       	ldi	r24, 0xFE	; 254
    19ac:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    19b0:	e8 ee       	ldi	r30, 0xE8	; 232
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	80 81       	ld	r24, Z
    19b6:	80 ff       	sbrs	r24, 0
    19b8:	fd cf       	rjmp	.-6      	; 0x19b4 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    19ba:	20 68       	ori	r18, 0x80	; 128
    19bc:	20 93 e3 00 	sts	0x00E3, r18
			return;
    19c0:	d6 c0       	rjmp	.+428    	; 0x1b6e <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    19c2:	49 30       	cpi	r20, 0x09	; 9
    19c4:	a1 f5       	brne	.+104    	; 0x1a2e <__vector_11+0x1a6>
    19c6:	71 11       	cpse	r23, r1
    19c8:	5b c0       	rjmp	.+182    	; 0x1a80 <__vector_11+0x1f8>
			usb_configuration = wValue;
    19ca:	20 93 29 01 	sts	0x0129, r18
			cdc_line_rtsdtr = 0;
    19ce:	10 92 2a 01 	sts	0x012A, r1
			transmit_flush_timer = 0;
    19d2:	10 92 28 01 	sts	0x0128, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19d6:	8e ef       	ldi	r24, 0xFE	; 254
    19d8:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    19dc:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    19de:	81 e2       	ldi	r24, 0x21	; 33
    19e0:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    19e2:	c9 ee       	ldi	r28, 0xE9	; 233
    19e4:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    19e6:	ab ee       	ldi	r26, 0xEB	; 235
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    19ea:	6c ee       	ldi	r22, 0xEC	; 236
    19ec:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    19ee:	4d ee       	ldi	r20, 0xED	; 237
    19f0:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    19f2:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    19f4:	9c 01       	movw	r18, r24
    19f6:	2f 5f       	subi	r18, 0xFF	; 255
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	fc 01       	movw	r30, r24
    19fc:	04 91       	lpm	r16, Z
				UECONX = en;
    19fe:	0c 93       	st	X, r16
				if (en) {
    1a00:	00 23       	and	r16, r16
    1a02:	59 f0       	breq	.+22     	; 0x1a1a <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1a04:	f9 01       	movw	r30, r18
    1a06:	24 91       	lpm	r18, Z
    1a08:	fb 01       	movw	r30, r22
    1a0a:	20 83       	st	Z, r18
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    1a10:	03 96       	adiw	r24, 0x03	; 3
    1a12:	24 91       	lpm	r18, Z
    1a14:	fa 01       	movw	r30, r20
    1a16:	20 83       	st	Z, r18
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1a1a:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1a1c:	1f 5f       	subi	r17, 0xFF	; 255
    1a1e:	15 30       	cpi	r17, 0x05	; 5
    1a20:	41 f7       	brne	.-48     	; 0x19f2 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1a22:	ea ee       	ldi	r30, 0xEA	; 234
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	8e e1       	ldi	r24, 0x1E	; 30
    1a28:	80 83       	st	Z, r24
        		UERST = 0;
    1a2a:	10 82       	st	Z, r1
			return;
    1a2c:	a0 c0       	rjmp	.+320    	; 0x1b6e <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1a2e:	48 30       	cpi	r20, 0x08	; 8
    1a30:	81 f4       	brne	.+32     	; 0x1a52 <__vector_11+0x1ca>
    1a32:	70 38       	cpi	r23, 0x80	; 128
    1a34:	09 f0       	breq	.+2      	; 0x1a38 <__vector_11+0x1b0>
    1a36:	3f c0       	rjmp	.+126    	; 0x1ab6 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a38:	e8 ee       	ldi	r30, 0xE8	; 232
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	80 ff       	sbrs	r24, 0
    1a40:	fd cf       	rjmp	.-6      	; 0x1a3c <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1a42:	80 91 29 01 	lds	r24, 0x0129
    1a46:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a4a:	8e ef       	ldi	r24, 0xFE	; 254
    1a4c:	80 93 e8 00 	sts	0x00E8, r24
    1a50:	8e c0       	rjmp	.+284    	; 0x1b6e <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1a52:	41 32       	cpi	r20, 0x21	; 33
    1a54:	a9 f4       	brne	.+42     	; 0x1a80 <__vector_11+0x1f8>
    1a56:	71 3a       	cpi	r23, 0xA1	; 161
    1a58:	f1 f5       	brne	.+124    	; 0x1ad6 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a5a:	e8 ee       	ldi	r30, 0xE8	; 232
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	80 ff       	sbrs	r24, 0
    1a62:	fd cf       	rjmp	.-6      	; 0x1a5e <__vector_11+0x1d6>
    1a64:	e0 e0       	ldi	r30, 0x00	; 0
    1a66:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1a68:	a1 ef       	ldi	r26, 0xF1	; 241
    1a6a:	b0 e0       	ldi	r27, 0x00	; 0
    1a6c:	81 91       	ld	r24, Z+
    1a6e:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1a70:	41 e0       	ldi	r20, 0x01	; 1
    1a72:	e7 30       	cpi	r30, 0x07	; 7
    1a74:	f4 07       	cpc	r31, r20
    1a76:	d1 f7       	brne	.-12     	; 0x1a6c <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a78:	8e ef       	ldi	r24, 0xFE	; 254
    1a7a:	80 93 e8 00 	sts	0x00E8, r24
    1a7e:	77 c0       	rjmp	.+238    	; 0x1b6e <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1a80:	40 32       	cpi	r20, 0x20	; 32
    1a82:	c9 f4       	brne	.+50     	; 0x1ab6 <__vector_11+0x22e>
    1a84:	71 32       	cpi	r23, 0x21	; 33
    1a86:	09 f0       	breq	.+2      	; 0x1a8a <__vector_11+0x202>
    1a88:	6b c0       	rjmp	.+214    	; 0x1b60 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1a8a:	e8 ee       	ldi	r30, 0xE8	; 232
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	80 81       	ld	r24, Z
    1a90:	82 ff       	sbrs	r24, 2
    1a92:	fd cf       	rjmp	.-6      	; 0x1a8e <__vector_11+0x206>
    1a94:	e0 e0       	ldi	r30, 0x00	; 0
    1a96:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1a98:	a1 ef       	ldi	r26, 0xF1	; 241
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	8c 91       	ld	r24, X
    1a9e:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1aa0:	51 e0       	ldi	r21, 0x01	; 1
    1aa2:	e7 30       	cpi	r30, 0x07	; 7
    1aa4:	f5 07       	cpc	r31, r21
    1aa6:	d1 f7       	brne	.-12     	; 0x1a9c <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1aa8:	e8 ee       	ldi	r30, 0xE8	; 232
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	8b ef       	ldi	r24, 0xFB	; 251
    1aae:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ab0:	8e ef       	ldi	r24, 0xFE	; 254
    1ab2:	80 83       	st	Z, r24
    1ab4:	5c c0       	rjmp	.+184    	; 0x1b6e <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1ab6:	42 32       	cpi	r20, 0x22	; 34
    1ab8:	71 f4       	brne	.+28     	; 0x1ad6 <__vector_11+0x24e>
    1aba:	71 32       	cpi	r23, 0x21	; 33
    1abc:	09 f0       	breq	.+2      	; 0x1ac0 <__vector_11+0x238>
    1abe:	50 c0       	rjmp	.+160    	; 0x1b60 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1ac0:	20 93 2a 01 	sts	0x012A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ac4:	e8 ee       	ldi	r30, 0xE8	; 232
    1ac6:	f0 e0       	ldi	r31, 0x00	; 0
    1ac8:	80 81       	ld	r24, Z
    1aca:	80 ff       	sbrs	r24, 0
    1acc:	fd cf       	rjmp	.-6      	; 0x1ac8 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ace:	8e ef       	ldi	r24, 0xFE	; 254
    1ad0:	80 93 e8 00 	sts	0x00E8, r24
    1ad4:	4c c0       	rjmp	.+152    	; 0x1b6e <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1ad6:	41 11       	cpse	r20, r1
    1ad8:	1a c0       	rjmp	.+52     	; 0x1b0e <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ada:	e8 ee       	ldi	r30, 0xE8	; 232
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	20 81       	ld	r18, Z
    1ae0:	20 ff       	sbrs	r18, 0
    1ae2:	fd cf       	rjmp	.-6      	; 0x1ade <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1ae4:	72 38       	cpi	r23, 0x82	; 130
    1ae6:	51 f4       	brne	.+20     	; 0x1afc <__vector_11+0x274>
				UENUM = wIndex;
    1ae8:	e9 ee       	ldi	r30, 0xE9	; 233
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1aee:	80 91 eb 00 	lds	r24, 0x00EB
    1af2:	85 fb       	bst	r24, 5
    1af4:	88 27       	eor	r24, r24
    1af6:	80 f9       	bld	r24, 0
				UENUM = 0;
    1af8:	10 82       	st	Z, r1
    1afa:	01 c0       	rjmp	.+2      	; 0x1afe <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1afc:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1afe:	e1 ef       	ldi	r30, 0xF1	; 241
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	80 83       	st	Z, r24
			UEDATX = 0;
    1b04:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b06:	8e ef       	ldi	r24, 0xFE	; 254
    1b08:	80 93 e8 00 	sts	0x00E8, r24
    1b0c:	30 c0       	rjmp	.+96     	; 0x1b6e <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1b0e:	41 30       	cpi	r20, 0x01	; 1
    1b10:	11 f0       	breq	.+4      	; 0x1b16 <__vector_11+0x28e>
    1b12:	43 30       	cpi	r20, 0x03	; 3
    1b14:	29 f5       	brne	.+74     	; 0x1b60 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1b16:	72 30       	cpi	r23, 0x02	; 2
    1b18:	19 f5       	brne	.+70     	; 0x1b60 <__vector_11+0x2d8>
    1b1a:	23 2b       	or	r18, r19
    1b1c:	09 f5       	brne	.+66     	; 0x1b60 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1b1e:	8f 77       	andi	r24, 0x7F	; 127
    1b20:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1b22:	38 2f       	mov	r19, r24
    1b24:	31 50       	subi	r19, 0x01	; 1
    1b26:	34 30       	cpi	r19, 0x04	; 4
    1b28:	d8 f4       	brcc	.+54     	; 0x1b60 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b2a:	3e ef       	ldi	r19, 0xFE	; 254
    1b2c:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1b30:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1b34:	43 30       	cpi	r20, 0x03	; 3
    1b36:	21 f4       	brne	.+8      	; 0x1b40 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1b38:	81 e2       	ldi	r24, 0x21	; 33
    1b3a:	80 93 eb 00 	sts	0x00EB, r24
    1b3e:	17 c0       	rjmp	.+46     	; 0x1b6e <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1b40:	99 e1       	ldi	r25, 0x19	; 25
    1b42:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1b46:	21 e0       	ldi	r18, 0x01	; 1
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	d9 01       	movw	r26, r18
    1b4c:	02 c0       	rjmp	.+4      	; 0x1b52 <__vector_11+0x2ca>
    1b4e:	aa 0f       	add	r26, r26
    1b50:	bb 1f       	adc	r27, r27
    1b52:	8a 95       	dec	r24
    1b54:	e2 f7       	brpl	.-8      	; 0x1b4e <__vector_11+0x2c6>
    1b56:	ea ee       	ldi	r30, 0xEA	; 234
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	a0 83       	st	Z, r26
					UERST = 0;
    1b5c:	10 82       	st	Z, r1
    1b5e:	07 c0       	rjmp	.+14     	; 0x1b6e <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1b60:	81 e2       	ldi	r24, 0x21	; 33
    1b62:	80 93 eb 00 	sts	0x00EB, r24
    1b66:	03 c0       	rjmp	.+6      	; 0x1b6e <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b68:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1b6a:	41 11       	cpse	r20, r1
    1b6c:	fa ce       	rjmp	.-524    	; 0x1962 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1b6e:	ff 91       	pop	r31
    1b70:	ef 91       	pop	r30
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	bf 91       	pop	r27
    1b78:	af 91       	pop	r26
    1b7a:	9f 91       	pop	r25
    1b7c:	8f 91       	pop	r24
    1b7e:	7f 91       	pop	r23
    1b80:	6f 91       	pop	r22
    1b82:	5f 91       	pop	r21
    1b84:	4f 91       	pop	r20
    1b86:	3f 91       	pop	r19
    1b88:	2f 91       	pop	r18
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	0f 90       	pop	r0
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	0f 90       	pop	r0
    1b94:	1f 90       	pop	r1
    1b96:	18 95       	reti

00001b98 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1b9c:	ec eb       	ldi	r30, 0xBC	; 188
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	88 23       	and	r24, r24
    1ba4:	34 f0       	brlt	.+12     	; 0x1bb2 <twi_wait+0x1a>
    1ba6:	2f 5f       	subi	r18, 0xFF	; 255
    1ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    1baa:	29 3e       	cpi	r18, 0xE9	; 233
    1bac:	83 e0       	ldi	r24, 0x03	; 3
    1bae:	38 07       	cpc	r19, r24
    1bb0:	b9 f7       	brne	.-18     	; 0x1ba0 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	28 3e       	cpi	r18, 0xE8	; 232
    1bb6:	33 40       	sbci	r19, 0x03	; 3
    1bb8:	09 f4       	brne	.+2      	; 0x1bbc <twi_wait+0x24>
    1bba:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1bbc:	08 95       	ret

00001bbe <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1bbe:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1bc2:	84 e8       	ldi	r24, 0x84	; 132
    1bc4:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1bc8:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <twi_wait>
    1bcc:	88 23       	and	r24, r24
    1bce:	21 f0       	breq	.+8      	; 0x1bd8 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1bd0:	80 91 b9 00 	lds	r24, 0x00B9
    1bd4:	88 7f       	andi	r24, 0xF8	; 248
    1bd6:	08 95       	ret
	} else {
		return 0;					// comm failure
    1bd8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1bda:	08 95       	ret

00001bdc <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1bdc:	cf 93       	push	r28
    1bde:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1be0:	94 ea       	ldi	r25, 0xA4	; 164
    1be2:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1be6:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <twi_wait>
    1bea:	88 23       	and	r24, r24
    1bec:	61 f0       	breq	.+24     	; 0x1c06 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1bee:	8c 2f       	mov	r24, r28
    1bf0:	88 0f       	add	r24, r24
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1bf8:	88 34       	cpi	r24, 0x48	; 72
    1bfa:	39 f4       	brne	.+14     	; 0x1c0a <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1bfc:	84 e9       	ldi	r24, 0x94	; 148
    1bfe:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	03 c0       	rjmp	.+6      	; 0x1c0c <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	01 c0       	rjmp	.+2      	; 0x1c0c <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
}	
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1c10:	cf 93       	push	r28
    1c12:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1c14:	94 ea       	ldi	r25, 0xA4	; 164
    1c16:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1c1a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <twi_wait>
    1c1e:	88 23       	and	r24, r24
    1c20:	59 f0       	breq	.+22     	; 0x1c38 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1c22:	8c 2f       	mov	r24, r28
    1c24:	88 0f       	add	r24, r24
    1c26:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1c2a:	80 32       	cpi	r24, 0x20	; 32
    1c2c:	39 f4       	brne	.+14     	; 0x1c3c <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1c2e:	84 e9       	ldi	r24, 0x94	; 148
    1c30:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	03 c0       	rjmp	.+6      	; 0x1c3e <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1c38:	80 e0       	ldi	r24, 0x00	; 0
    1c3a:	01 c0       	rjmp	.+2      	; 0x1c3e <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
}	
    1c3e:	cf 91       	pop	r28
    1c40:	08 95       	ret

00001c42 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c42:	84 e9       	ldi	r24, 0x94	; 148
    1c44:	80 93 bc 00 	sts	0x00BC, r24
    1c48:	08 95       	ret

00001c4a <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1c4a:	ef 92       	push	r14
    1c4c:	ff 92       	push	r15
    1c4e:	0f 93       	push	r16
    1c50:	1f 93       	push	r17
    1c52:	cf 93       	push	r28
    1c54:	df 93       	push	r29
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	60 97       	sbiw	r28, 0x10	; 16
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	de bf       	out	0x3e, r29	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	e8 2e       	mov	r14, r24
    1c68:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1c6a:	fe 01       	movw	r30, r28
    1c6c:	31 96       	adiw	r30, 0x01	; 1
    1c6e:	80 e1       	ldi	r24, 0x10	; 16
    1c70:	df 01       	movw	r26, r30
    1c72:	1d 92       	st	X+, r1
    1c74:	8a 95       	dec	r24
    1c76:	e9 f7       	brne	.-6      	; 0x1c72 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1c78:	88 e5       	ldi	r24, 0x58	; 88
    1c7a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1c7e:	88 23       	and	r24, r24
    1c80:	09 f4       	brne	.+2      	; 0x1c84 <m_wii_read+0x3a>
    1c82:	66 c0       	rjmp	.+204    	; 0x1d50 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1c84:	86 e3       	ldi	r24, 0x36	; 54
    1c86:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1c8a:	88 23       	and	r24, r24
    1c8c:	09 f4       	brne	.+2      	; 0x1c90 <m_wii_read+0x46>
    1c8e:	62 c0       	rjmp	.+196    	; 0x1d54 <m_wii_read+0x10a>
	end();
    1c90:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c94:	b8 e0       	ldi	r27, 0x08	; 8
    1c96:	ba 95       	dec	r27
    1c98:	f1 f7       	brne	.-4      	; 0x1c96 <m_wii_read+0x4c>
    1c9a:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1c9c:	88 e5       	ldi	r24, 0x58	; 88
    1c9e:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <start_read>
    1ca2:	88 23       	and	r24, r24
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <m_wii_read+0x5e>
    1ca6:	58 c0       	rjmp	.+176    	; 0x1d58 <m_wii_read+0x10e>
    1ca8:	ae 01       	movw	r20, r28
    1caa:	4f 5f       	subi	r20, 0xFF	; 255
    1cac:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1cae:	8e 01       	movw	r16, r28
    1cb0:	00 5f       	subi	r16, 0xF0	; 240
    1cb2:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1cb4:	ec eb       	ldi	r30, 0xBC	; 188
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1cba:	2b eb       	ldi	r18, 0xBB	; 187
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1cbe:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1cc0:	80 81       	ld	r24, Z
    1cc2:	88 23       	and	r24, r24
    1cc4:	ec f7       	brge	.-6      	; 0x1cc0 <m_wii_read+0x76>
		temp[i] = TWDR;
    1cc6:	d9 01       	movw	r26, r18
    1cc8:	8c 91       	ld	r24, X
    1cca:	da 01       	movw	r26, r20
    1ccc:	8d 93       	st	X+, r24
    1cce:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1cd0:	a0 17       	cp	r26, r16
    1cd2:	b1 07       	cpc	r27, r17
    1cd4:	a1 f7       	brne	.-24     	; 0x1cbe <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1cd6:	84 e8       	ldi	r24, 0x84	; 132
    1cd8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1cdc:	ec eb       	ldi	r30, 0xBC	; 188
    1cde:	f0 e0       	ldi	r31, 0x00	; 0
    1ce0:	80 81       	ld	r24, Z
    1ce2:	88 23       	and	r24, r24
    1ce4:	ec f7       	brge	.-6      	; 0x1ce0 <m_wii_read+0x96>
	temp[15] = TWDR;
    1ce6:	80 91 bb 00 	lds	r24, 0x00BB
    1cea:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1cec:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
    1cf0:	de 01       	movw	r26, r28
    1cf2:	14 96       	adiw	r26, 0x04	; 4
    1cf4:	6e 2d       	mov	r22, r14
    1cf6:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1cf8:	4c 91       	ld	r20, X
    1cfa:	24 2f       	mov	r18, r20
    1cfc:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1cfe:	cd 01       	movw	r24, r26
    1d00:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1d02:	fc 01       	movw	r30, r24
    1d04:	80 81       	ld	r24, Z
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	f0 e1       	ldi	r31, 0x10	; 16
    1d0a:	2f 9f       	mul	r18, r31
    1d0c:	80 0d       	add	r24, r0
    1d0e:	91 1d       	adc	r25, r1
    1d10:	11 24       	eor	r1, r1
    1d12:	fb 01       	movw	r30, r22
    1d14:	91 83       	std	Z+1, r25	; 0x01
    1d16:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1d18:	84 2f       	mov	r24, r20
    1d1a:	80 7c       	andi	r24, 0xC0	; 192
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	88 0f       	add	r24, r24
    1d20:	99 1f       	adc	r25, r25
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1d26:	9d 01       	movw	r18, r26
    1d28:	21 50       	subi	r18, 0x01	; 1
    1d2a:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1d2c:	f9 01       	movw	r30, r18
    1d2e:	20 81       	ld	r18, Z
    1d30:	82 0f       	add	r24, r18
    1d32:	91 1d       	adc	r25, r1
    1d34:	fb 01       	movw	r30, r22
    1d36:	93 83       	std	Z+3, r25	; 0x03
    1d38:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1d3a:	4f 70       	andi	r20, 0x0F	; 15
    1d3c:	44 83       	std	Z+4, r20	; 0x04
    1d3e:	15 82       	std	Z+5, r1	; 0x05
    1d40:	13 96       	adiw	r26, 0x03	; 3
    1d42:	6a 5f       	subi	r22, 0xFA	; 250
    1d44:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1d46:	0a 17       	cp	r16, r26
    1d48:	1b 07       	cpc	r17, r27
    1d4a:	b1 f6       	brne	.-84     	; 0x1cf8 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1d4c:	81 e0       	ldi	r24, 0x01	; 1
    1d4e:	05 c0       	rjmp	.+10     	; 0x1d5a <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	03 c0       	rjmp	.+6      	; 0x1d5a <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	01 c0       	rjmp	.+2      	; 0x1d5a <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1d58:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1d5a:	60 96       	adiw	r28, 0x10	; 16
    1d5c:	0f b6       	in	r0, 0x3f	; 63
    1d5e:	f8 94       	cli
    1d60:	de bf       	out	0x3e, r29	; 62
    1d62:	0f be       	out	0x3f, r0	; 63
    1d64:	cd bf       	out	0x3d, r28	; 61
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	08 95       	ret

00001d74 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1d74:	0e 94 49 0b 	call	0x1692	; 0x1692 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1d78:	88 e5       	ldi	r24, 0x58	; 88
    1d7a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1d7e:	88 23       	and	r24, r24
    1d80:	09 f4       	brne	.+2      	; 0x1d84 <m_wii_open+0x10>
    1d82:	c7 c0       	rjmp	.+398    	; 0x1f12 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1d84:	80 e3       	ldi	r24, 0x30	; 48
    1d86:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1d8a:	88 23       	and	r24, r24
    1d8c:	09 f4       	brne	.+2      	; 0x1d90 <m_wii_open+0x1c>
    1d8e:	c3 c0       	rjmp	.+390    	; 0x1f16 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1d90:	81 e0       	ldi	r24, 0x01	; 1
    1d92:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1d96:	88 23       	and	r24, r24
    1d98:	09 f4       	brne	.+2      	; 0x1d9c <m_wii_open+0x28>
    1d9a:	bf c0       	rjmp	.+382    	; 0x1f1a <m_wii_open+0x1a6>
	end();
    1d9c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1da0:	83 ec       	ldi	r24, 0xC3	; 195
    1da2:	99 e0       	ldi	r25, 0x09	; 9
    1da4:	01 97       	sbiw	r24, 0x01	; 1
    1da6:	f1 f7       	brne	.-4      	; 0x1da4 <m_wii_open+0x30>
    1da8:	00 c0       	rjmp	.+0      	; 0x1daa <m_wii_open+0x36>
    1daa:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1dac:	88 e5       	ldi	r24, 0x58	; 88
    1dae:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1db2:	88 23       	and	r24, r24
    1db4:	09 f4       	brne	.+2      	; 0x1db8 <m_wii_open+0x44>
    1db6:	b3 c0       	rjmp	.+358    	; 0x1f1e <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1dbe:	88 23       	and	r24, r24
    1dc0:	09 f4       	brne	.+2      	; 0x1dc4 <m_wii_open+0x50>
    1dc2:	af c0       	rjmp	.+350    	; 0x1f22 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1dca:	88 23       	and	r24, r24
    1dcc:	09 f4       	brne	.+2      	; 0x1dd0 <m_wii_open+0x5c>
    1dce:	ab c0       	rjmp	.+342    	; 0x1f26 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1dd0:	80 e0       	ldi	r24, 0x00	; 0
    1dd2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1dd6:	88 23       	and	r24, r24
    1dd8:	09 f4       	brne	.+2      	; 0x1ddc <m_wii_open+0x68>
    1dda:	a7 c0       	rjmp	.+334    	; 0x1f2a <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1de2:	88 23       	and	r24, r24
    1de4:	09 f4       	brne	.+2      	; 0x1de8 <m_wii_open+0x74>
    1de6:	a3 c0       	rjmp	.+326    	; 0x1f2e <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1de8:	80 e0       	ldi	r24, 0x00	; 0
    1dea:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1dee:	88 23       	and	r24, r24
    1df0:	09 f4       	brne	.+2      	; 0x1df4 <m_wii_open+0x80>
    1df2:	9f c0       	rjmp	.+318    	; 0x1f32 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1df4:	80 e0       	ldi	r24, 0x00	; 0
    1df6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f4       	brne	.+2      	; 0x1e00 <m_wii_open+0x8c>
    1dfe:	9b c0       	rjmp	.+310    	; 0x1f36 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e06:	88 23       	and	r24, r24
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <m_wii_open+0x98>
    1e0a:	97 c0       	rjmp	.+302    	; 0x1f3a <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1e0c:	80 e9       	ldi	r24, 0x90	; 144
    1e0e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e12:	88 23       	and	r24, r24
    1e14:	09 f4       	brne	.+2      	; 0x1e18 <m_wii_open+0xa4>
    1e16:	93 c0       	rjmp	.+294    	; 0x1f3e <m_wii_open+0x1ca>
	end();
    1e18:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
    1e1c:	83 ec       	ldi	r24, 0xC3	; 195
    1e1e:	99 e0       	ldi	r25, 0x09	; 9
    1e20:	01 97       	sbiw	r24, 0x01	; 1
    1e22:	f1 f7       	brne	.-4      	; 0x1e20 <m_wii_open+0xac>
    1e24:	00 c0       	rjmp	.+0      	; 0x1e26 <m_wii_open+0xb2>
    1e26:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1e28:	88 e5       	ldi	r24, 0x58	; 88
    1e2a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1e2e:	88 23       	and	r24, r24
    1e30:	09 f4       	brne	.+2      	; 0x1e34 <m_wii_open+0xc0>
    1e32:	87 c0       	rjmp	.+270    	; 0x1f42 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1e34:	87 e0       	ldi	r24, 0x07	; 7
    1e36:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <m_wii_open+0xcc>
    1e3e:	83 c0       	rjmp	.+262    	; 0x1f46 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e46:	88 23       	and	r24, r24
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <m_wii_open+0xd8>
    1e4a:	7f c0       	rjmp	.+254    	; 0x1f4a <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1e4c:	81 e4       	ldi	r24, 0x41	; 65
    1e4e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e52:	88 23       	and	r24, r24
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <m_wii_open+0xe4>
    1e56:	7b c0       	rjmp	.+246    	; 0x1f4e <m_wii_open+0x1da>
	end();
    1e58:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
    1e5c:	83 ec       	ldi	r24, 0xC3	; 195
    1e5e:	99 e0       	ldi	r25, 0x09	; 9
    1e60:	01 97       	sbiw	r24, 0x01	; 1
    1e62:	f1 f7       	brne	.-4      	; 0x1e60 <m_wii_open+0xec>
    1e64:	00 c0       	rjmp	.+0      	; 0x1e66 <m_wii_open+0xf2>
    1e66:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1e68:	88 e5       	ldi	r24, 0x58	; 88
    1e6a:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1e6e:	88 23       	and	r24, r24
    1e70:	09 f4       	brne	.+2      	; 0x1e74 <m_wii_open+0x100>
    1e72:	6f c0       	rjmp	.+222    	; 0x1f52 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1e74:	8a e1       	ldi	r24, 0x1A	; 26
    1e76:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e7a:	88 23       	and	r24, r24
    1e7c:	09 f4       	brne	.+2      	; 0x1e80 <m_wii_open+0x10c>
    1e7e:	6b c0       	rjmp	.+214    	; 0x1f56 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1e80:	80 e4       	ldi	r24, 0x40	; 64
    1e82:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e86:	88 23       	and	r24, r24
    1e88:	09 f4       	brne	.+2      	; 0x1e8c <m_wii_open+0x118>
    1e8a:	67 c0       	rjmp	.+206    	; 0x1f5a <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1e8c:	80 e0       	ldi	r24, 0x00	; 0
    1e8e:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1e92:	88 23       	and	r24, r24
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <m_wii_open+0x124>
    1e96:	63 c0       	rjmp	.+198    	; 0x1f5e <m_wii_open+0x1ea>
	end();
    1e98:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
    1e9c:	83 ec       	ldi	r24, 0xC3	; 195
    1e9e:	99 e0       	ldi	r25, 0x09	; 9
    1ea0:	01 97       	sbiw	r24, 0x01	; 1
    1ea2:	f1 f7       	brne	.-4      	; 0x1ea0 <m_wii_open+0x12c>
    1ea4:	00 c0       	rjmp	.+0      	; 0x1ea6 <m_wii_open+0x132>
    1ea6:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1ea8:	88 e5       	ldi	r24, 0x58	; 88
    1eaa:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1eae:	88 23       	and	r24, r24
    1eb0:	09 f4       	brne	.+2      	; 0x1eb4 <m_wii_open+0x140>
    1eb2:	57 c0       	rjmp	.+174    	; 0x1f62 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1eb4:	83 e3       	ldi	r24, 0x33	; 51
    1eb6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1eba:	88 23       	and	r24, r24
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <m_wii_open+0x14c>
    1ebe:	53 c0       	rjmp	.+166    	; 0x1f66 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1ec6:	88 23       	and	r24, r24
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <m_wii_open+0x158>
    1eca:	4f c0       	rjmp	.+158    	; 0x1f6a <m_wii_open+0x1f6>
	end();
    1ecc:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
    1ed0:	83 ec       	ldi	r24, 0xC3	; 195
    1ed2:	99 e0       	ldi	r25, 0x09	; 9
    1ed4:	01 97       	sbiw	r24, 0x01	; 1
    1ed6:	f1 f7       	brne	.-4      	; 0x1ed4 <m_wii_open+0x160>
    1ed8:	00 c0       	rjmp	.+0      	; 0x1eda <m_wii_open+0x166>
    1eda:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1edc:	88 e5       	ldi	r24, 0x58	; 88
    1ede:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <start_write>
    1ee2:	88 23       	and	r24, r24
    1ee4:	09 f4       	brne	.+2      	; 0x1ee8 <m_wii_open+0x174>
    1ee6:	43 c0       	rjmp	.+134    	; 0x1f6e <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1ee8:	80 e3       	ldi	r24, 0x30	; 48
    1eea:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1eee:	88 23       	and	r24, r24
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <m_wii_open+0x180>
    1ef2:	3f c0       	rjmp	.+126    	; 0x1f72 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1ef4:	88 e0       	ldi	r24, 0x08	; 8
    1ef6:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <send_byte>
    1efa:	88 23       	and	r24, r24
    1efc:	e1 f1       	breq	.+120    	; 0x1f76 <m_wii_open+0x202>
	end();
    1efe:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <end>
    1f02:	83 ec       	ldi	r24, 0xC3	; 195
    1f04:	99 e0       	ldi	r25, 0x09	; 9
    1f06:	01 97       	sbiw	r24, 0x01	; 1
    1f08:	f1 f7       	brne	.-4      	; 0x1f06 <m_wii_open+0x192>
    1f0a:	00 c0       	rjmp	.+0      	; 0x1f0c <m_wii_open+0x198>
    1f0c:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1f76:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1f78:	08 95       	ret

00001f7a <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    1f7a:	2f 92       	push	r2
    1f7c:	3f 92       	push	r3
    1f7e:	4f 92       	push	r4
    1f80:	5f 92       	push	r5
    1f82:	6f 92       	push	r6
    1f84:	7f 92       	push	r7
    1f86:	8f 92       	push	r8
    1f88:	9f 92       	push	r9
    1f8a:	af 92       	push	r10
    1f8c:	bf 92       	push	r11
    1f8e:	cf 92       	push	r12
    1f90:	df 92       	push	r13
    1f92:	ef 92       	push	r14
    1f94:	ff 92       	push	r15
    1f96:	0f 93       	push	r16
    1f98:	1f 93       	push	r17
    1f9a:	cf 93       	push	r28
    1f9c:	df 93       	push	r29
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	28 97       	sbiw	r28, 0x08	; 8
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	98 86       	std	Y+8, r9	; 0x08
    1fb0:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
    1fb2:	10 92 2c 01 	sts	0x012C, r1
    1fb6:	10 92 2b 01 	sts	0x012B, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
    1fba:	8f 3f       	cpi	r24, 0xFF	; 255
    1fbc:	e3 e0       	ldi	r30, 0x03	; 3
    1fbe:	9e 07       	cpc	r25, r30
    1fc0:	01 f1       	breq	.+64     	; 0x2002 <localize+0x88>
    1fc2:	6f 3f       	cpi	r22, 0xFF	; 255
    1fc4:	f3 e0       	ldi	r31, 0x03	; 3
    1fc6:	7f 07       	cpc	r23, r31
    1fc8:	e1 f0       	breq	.+56     	; 0x2002 <localize+0x88>
    1fca:	4f 3f       	cpi	r20, 0xFF	; 255
    1fcc:	e3 e0       	ldi	r30, 0x03	; 3
    1fce:	5e 07       	cpc	r21, r30
    1fd0:	c1 f0       	breq	.+48     	; 0x2002 <localize+0x88>
    1fd2:	2f 3f       	cpi	r18, 0xFF	; 255
    1fd4:	f3 e0       	ldi	r31, 0x03	; 3
    1fd6:	3f 07       	cpc	r19, r31
    1fd8:	a1 f0       	breq	.+40     	; 0x2002 <localize+0x88>
    1fda:	0f 3f       	cpi	r16, 0xFF	; 255
    1fdc:	e3 e0       	ldi	r30, 0x03	; 3
    1fde:	1e 07       	cpc	r17, r30
    1fe0:	81 f0       	breq	.+32     	; 0x2002 <localize+0x88>
    1fe2:	ff ef       	ldi	r31, 0xFF	; 255
    1fe4:	ef 16       	cp	r14, r31
    1fe6:	f3 e0       	ldi	r31, 0x03	; 3
    1fe8:	ff 06       	cpc	r15, r31
    1fea:	59 f0       	breq	.+22     	; 0x2002 <localize+0x88>
    1fec:	ef ef       	ldi	r30, 0xFF	; 255
    1fee:	ce 16       	cp	r12, r30
    1ff0:	e3 e0       	ldi	r30, 0x03	; 3
    1ff2:	de 06       	cpc	r13, r30
    1ff4:	31 f0       	breq	.+12     	; 0x2002 <localize+0x88>
    1ff6:	ff ef       	ldi	r31, 0xFF	; 255
    1ff8:	af 16       	cp	r10, r31
    1ffa:	f3 e0       	ldi	r31, 0x03	; 3
    1ffc:	bf 06       	cpc	r11, r31
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <localize+0x88>
    2000:	b0 c6       	rjmp	.+3424   	; 0x2d62 <localize+0xde8>
        flag_no_good_stars = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	90 93 2c 01 	sts	0x012C, r25
    200a:	80 93 2b 01 	sts	0x012B, r24
    200e:	d1 c3       	rjmp	.+1954   	; 0x27b2 <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
    2010:	f8 01       	movw	r30, r16
    2012:	a0 80       	ld	r10, Z
    2014:	b1 80       	ldd	r11, Z+1	; 0x01
    2016:	c2 80       	ldd	r12, Z+2	; 0x02
    2018:	d3 80       	ldd	r13, Z+3	; 0x03
    201a:	0c 5f       	subi	r16, 0xFC	; 252
    201c:	1f 4f       	sbci	r17, 0xFF	; 255
    201e:	26 2d       	mov	r18, r6
    2020:	37 2d       	mov	r19, r7
    2022:	48 2d       	mov	r20, r8
    2024:	59 2d       	mov	r21, r9
    2026:	6a 2d       	mov	r22, r10
    2028:	7b 2d       	mov	r23, r11
    202a:	8c 2d       	mov	r24, r12
    202c:	9d 2d       	mov	r25, r13
    202e:	0e 94 6d 1a 	call	0x34da	; 0x34da <__gesf2>
    2032:	18 16       	cp	r1, r24
    2034:	34 f4       	brge	.+12     	; 0x2042 <localize+0xc8>
    2036:	fa 82       	std	Y+2, r15	; 0x02
    2038:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
    203a:	6a 2c       	mov	r6, r10
    203c:	7b 2c       	mov	r7, r11
    203e:	8c 2c       	mov	r8, r12
    2040:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
    2042:	22 2d       	mov	r18, r2
    2044:	33 2d       	mov	r19, r3
    2046:	44 2d       	mov	r20, r4
    2048:	55 2d       	mov	r21, r5
    204a:	6a 2d       	mov	r22, r10
    204c:	7b 2d       	mov	r23, r11
    204e:	8c 2d       	mov	r24, r12
    2050:	9d 2d       	mov	r25, r13
    2052:	0e 94 bd 18 	call	0x317a	; 0x317a <__cmpsf2>
    2056:	88 23       	and	r24, r24
    2058:	34 f4       	brge	.+12     	; 0x2066 <localize+0xec>
    205a:	fe 82       	std	Y+6, r15	; 0x06
    205c:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
    205e:	2a 2c       	mov	r2, r10
    2060:	3b 2c       	mov	r3, r11
    2062:	4c 2c       	mov	r4, r12
    2064:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
    2066:	ff ef       	ldi	r31, 0xFF	; 255
    2068:	ef 1a       	sub	r14, r31
    206a:	ff 0a       	sbc	r15, r31
    206c:	86 e0       	ldi	r24, 0x06	; 6
    206e:	e8 16       	cp	r14, r24
    2070:	f1 04       	cpc	r15, r1
    2072:	71 f6       	brne	.-100    	; 0x2010 <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
    2074:	e9 81       	ldd	r30, Y+1	; 0x01
    2076:	fa 81       	ldd	r31, Y+2	; 0x02
    2078:	e2 30       	cpi	r30, 0x02	; 2
    207a:	f1 05       	cpc	r31, r1
    207c:	09 f4       	brne	.+2      	; 0x2080 <localize+0x106>
    207e:	3e c1       	rjmp	.+636    	; 0x22fc <localize+0x382>
    2080:	34 f4       	brge	.+12     	; 0x208e <localize+0x114>
    2082:	30 97       	sbiw	r30, 0x00	; 0
    2084:	81 f0       	breq	.+32     	; 0x20a6 <localize+0x12c>
    2086:	31 97       	sbiw	r30, 0x01	; 1
    2088:	09 f0       	breq	.+2      	; 0x208c <localize+0x112>
    208a:	8d c3       	rjmp	.+1818   	; 0x27a6 <localize+0x82c>
    208c:	a2 c0       	rjmp	.+324    	; 0x21d2 <localize+0x258>
    208e:	89 81       	ldd	r24, Y+1	; 0x01
    2090:	9a 81       	ldd	r25, Y+2	; 0x02
    2092:	84 30       	cpi	r24, 0x04	; 4
    2094:	91 05       	cpc	r25, r1
    2096:	09 f4       	brne	.+2      	; 0x209a <localize+0x120>
    2098:	5b c2       	rjmp	.+1206   	; 0x2550 <localize+0x5d6>
    209a:	0c f4       	brge	.+2      	; 0x209e <localize+0x124>
    209c:	c4 c1       	rjmp	.+904    	; 0x2426 <localize+0x4ac>
    209e:	05 97       	sbiw	r24, 0x05	; 5
    20a0:	09 f0       	breq	.+2      	; 0x20a4 <localize+0x12a>
    20a2:	81 c3       	rjmp	.+1794   	; 0x27a6 <localize+0x82c>
    20a4:	ea c2       	rjmp	.+1492   	; 0x267a <localize+0x700>
            case 0:
                switch (min_id) {
    20a6:	ed 81       	ldd	r30, Y+5	; 0x05
    20a8:	fe 81       	ldd	r31, Y+6	; 0x06
    20aa:	e2 30       	cpi	r30, 0x02	; 2
    20ac:	f1 05       	cpc	r31, r1
    20ae:	39 f1       	breq	.+78     	; 0x20fe <localize+0x184>
    20b0:	24 f4       	brge	.+8      	; 0x20ba <localize+0x140>
    20b2:	31 97       	sbiw	r30, 0x01	; 1
    20b4:	09 f0       	breq	.+2      	; 0x20b8 <localize+0x13e>
    20b6:	6e c0       	rjmp	.+220    	; 0x2194 <localize+0x21a>
    20b8:	09 c0       	rjmp	.+18     	; 0x20cc <localize+0x152>
    20ba:	8d 81       	ldd	r24, Y+5	; 0x05
    20bc:	9e 81       	ldd	r25, Y+6	; 0x06
    20be:	83 30       	cpi	r24, 0x03	; 3
    20c0:	91 05       	cpc	r25, r1
    20c2:	b1 f1       	breq	.+108    	; 0x2130 <localize+0x1b6>
    20c4:	04 97       	sbiw	r24, 0x04	; 4
    20c6:	09 f0       	breq	.+2      	; 0x20ca <localize+0x150>
    20c8:	65 c0       	rjmp	.+202    	; 0x2194 <localize+0x21a>
    20ca:	4b c0       	rjmp	.+150    	; 0x2162 <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
    20cc:	81 e6       	ldi	r24, 0x61	; 97
    20ce:	91 e0       	ldi	r25, 0x01	; 1
    20d0:	90 93 84 01 	sts	0x0184, r25
    20d4:	80 93 83 01 	sts	0x0183, r24
    20d8:	89 e5       	ldi	r24, 0x59	; 89
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	90 93 6a 01 	sts	0x016A, r25
    20e0:	80 93 69 01 	sts	0x0169, r24
    20e4:	8d e5       	ldi	r24, 0x5D	; 93
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	90 93 6c 01 	sts	0x016C, r25
    20ec:	80 93 6b 01 	sts	0x016B, r24
    20f0:	85 e5       	ldi	r24, 0x55	; 85
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	90 93 7e 01 	sts	0x017E, r25
    20f8:	80 93 7d 01 	sts	0x017D, r24
                        break;
    20fc:	54 c3       	rjmp	.+1704   	; 0x27a6 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
    20fe:	81 e6       	ldi	r24, 0x61	; 97
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	90 93 84 01 	sts	0x0184, r25
    2106:	80 93 83 01 	sts	0x0183, r24
    210a:	85 e5       	ldi	r24, 0x55	; 85
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	90 93 6a 01 	sts	0x016A, r25
    2112:	80 93 69 01 	sts	0x0169, r24
    2116:	8d e5       	ldi	r24, 0x5D	; 93
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	90 93 6c 01 	sts	0x016C, r25
    211e:	80 93 6b 01 	sts	0x016B, r24
    2122:	89 e5       	ldi	r24, 0x59	; 89
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	90 93 7e 01 	sts	0x017E, r25
    212a:	80 93 7d 01 	sts	0x017D, r24
                        break;
    212e:	3b c3       	rjmp	.+1654   	; 0x27a6 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
    2130:	8d e5       	ldi	r24, 0x5D	; 93
    2132:	91 e0       	ldi	r25, 0x01	; 1
    2134:	90 93 84 01 	sts	0x0184, r25
    2138:	80 93 83 01 	sts	0x0183, r24
    213c:	89 e5       	ldi	r24, 0x59	; 89
    213e:	91 e0       	ldi	r25, 0x01	; 1
    2140:	90 93 6a 01 	sts	0x016A, r25
    2144:	80 93 69 01 	sts	0x0169, r24
    2148:	81 e6       	ldi	r24, 0x61	; 97
    214a:	91 e0       	ldi	r25, 0x01	; 1
    214c:	90 93 6c 01 	sts	0x016C, r25
    2150:	80 93 6b 01 	sts	0x016B, r24
    2154:	85 e5       	ldi	r24, 0x55	; 85
    2156:	91 e0       	ldi	r25, 0x01	; 1
    2158:	90 93 7e 01 	sts	0x017E, r25
    215c:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2160:	22 c3       	rjmp	.+1604   	; 0x27a6 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
    2162:	8d e5       	ldi	r24, 0x5D	; 93
    2164:	91 e0       	ldi	r25, 0x01	; 1
    2166:	90 93 84 01 	sts	0x0184, r25
    216a:	80 93 83 01 	sts	0x0183, r24
    216e:	85 e5       	ldi	r24, 0x55	; 85
    2170:	91 e0       	ldi	r25, 0x01	; 1
    2172:	90 93 6a 01 	sts	0x016A, r25
    2176:	80 93 69 01 	sts	0x0169, r24
    217a:	81 e6       	ldi	r24, 0x61	; 97
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	90 93 6c 01 	sts	0x016C, r25
    2182:	80 93 6b 01 	sts	0x016B, r24
    2186:	89 e5       	ldi	r24, 0x59	; 89
    2188:	91 e0       	ldi	r25, 0x01	; 1
    218a:	90 93 7e 01 	sts	0x017E, r25
    218e:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2192:	09 c3       	rjmp	.+1554   	; 0x27a6 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2194:	81 e6       	ldi	r24, 0x61	; 97
    2196:	91 e0       	ldi	r25, 0x01	; 1
    2198:	90 93 84 01 	sts	0x0184, r25
    219c:	80 93 83 01 	sts	0x0183, r24
    21a0:	8d e5       	ldi	r24, 0x5D	; 93
    21a2:	91 e0       	ldi	r25, 0x01	; 1
    21a4:	90 93 6a 01 	sts	0x016A, r25
    21a8:	80 93 69 01 	sts	0x0169, r24
    21ac:	89 e5       	ldi	r24, 0x59	; 89
    21ae:	91 e0       	ldi	r25, 0x01	; 1
    21b0:	90 93 6c 01 	sts	0x016C, r25
    21b4:	80 93 6b 01 	sts	0x016B, r24
    21b8:	85 e5       	ldi	r24, 0x55	; 85
    21ba:	91 e0       	ldi	r25, 0x01	; 1
    21bc:	90 93 7e 01 	sts	0x017E, r25
    21c0:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	90 93 2c 01 	sts	0x012C, r25
    21cc:	80 93 2b 01 	sts	0x012B, r24
                        break;
    21d0:	f0 c2       	rjmp	.+1504   	; 0x27b2 <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
    21d2:	ed 81       	ldd	r30, Y+5	; 0x05
    21d4:	fe 81       	ldd	r31, Y+6	; 0x06
    21d6:	e2 30       	cpi	r30, 0x02	; 2
    21d8:	f1 05       	cpc	r31, r1
    21da:	31 f1       	breq	.+76     	; 0x2228 <localize+0x2ae>
    21dc:	1c f4       	brge	.+6      	; 0x21e4 <localize+0x26a>
    21de:	ef 2b       	or	r30, r31
    21e0:	51 f0       	breq	.+20     	; 0x21f6 <localize+0x27c>
    21e2:	6d c0       	rjmp	.+218    	; 0x22be <localize+0x344>
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	83 30       	cpi	r24, 0x03	; 3
    21ea:	91 05       	cpc	r25, r1
    21ec:	b1 f1       	breq	.+108    	; 0x225a <localize+0x2e0>
    21ee:	05 97       	sbiw	r24, 0x05	; 5
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <localize+0x27a>
    21f2:	65 c0       	rjmp	.+202    	; 0x22be <localize+0x344>
    21f4:	4b c0       	rjmp	.+150    	; 0x228c <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    21f6:	81 e6       	ldi	r24, 0x61	; 97
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	90 93 84 01 	sts	0x0184, r25
    21fe:	80 93 83 01 	sts	0x0183, r24
    2202:	8d e5       	ldi	r24, 0x5D	; 93
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	90 93 6a 01 	sts	0x016A, r25
    220a:	80 93 69 01 	sts	0x0169, r24
    220e:	89 e5       	ldi	r24, 0x59	; 89
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	90 93 6c 01 	sts	0x016C, r25
    2216:	80 93 6b 01 	sts	0x016B, r24
    221a:	85 e5       	ldi	r24, 0x55	; 85
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	90 93 7e 01 	sts	0x017E, r25
    2222:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2226:	bf c2       	rjmp	.+1406   	; 0x27a6 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
    2228:	81 e6       	ldi	r24, 0x61	; 97
    222a:	91 e0       	ldi	r25, 0x01	; 1
    222c:	90 93 84 01 	sts	0x0184, r25
    2230:	80 93 83 01 	sts	0x0183, r24
    2234:	85 e5       	ldi	r24, 0x55	; 85
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	90 93 6a 01 	sts	0x016A, r25
    223c:	80 93 69 01 	sts	0x0169, r24
    2240:	89 e5       	ldi	r24, 0x59	; 89
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	90 93 6c 01 	sts	0x016C, r25
    2248:	80 93 6b 01 	sts	0x016B, r24
    224c:	8d e5       	ldi	r24, 0x5D	; 93
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	90 93 7e 01 	sts	0x017E, r25
    2254:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2258:	a6 c2       	rjmp	.+1356   	; 0x27a6 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
    225a:	89 e5       	ldi	r24, 0x59	; 89
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	90 93 84 01 	sts	0x0184, r25
    2262:	80 93 83 01 	sts	0x0183, r24
    2266:	8d e5       	ldi	r24, 0x5D	; 93
    2268:	91 e0       	ldi	r25, 0x01	; 1
    226a:	90 93 6a 01 	sts	0x016A, r25
    226e:	80 93 69 01 	sts	0x0169, r24
    2272:	81 e6       	ldi	r24, 0x61	; 97
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	90 93 6c 01 	sts	0x016C, r25
    227a:	80 93 6b 01 	sts	0x016B, r24
    227e:	85 e5       	ldi	r24, 0x55	; 85
    2280:	91 e0       	ldi	r25, 0x01	; 1
    2282:	90 93 7e 01 	sts	0x017E, r25
    2286:	80 93 7d 01 	sts	0x017D, r24
                        break;
    228a:	8d c2       	rjmp	.+1306   	; 0x27a6 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
    228c:	89 e5       	ldi	r24, 0x59	; 89
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	90 93 84 01 	sts	0x0184, r25
    2294:	80 93 83 01 	sts	0x0183, r24
    2298:	85 e5       	ldi	r24, 0x55	; 85
    229a:	91 e0       	ldi	r25, 0x01	; 1
    229c:	90 93 6a 01 	sts	0x016A, r25
    22a0:	80 93 69 01 	sts	0x0169, r24
    22a4:	81 e6       	ldi	r24, 0x61	; 97
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	90 93 6c 01 	sts	0x016C, r25
    22ac:	80 93 6b 01 	sts	0x016B, r24
    22b0:	8d e5       	ldi	r24, 0x5D	; 93
    22b2:	91 e0       	ldi	r25, 0x01	; 1
    22b4:	90 93 7e 01 	sts	0x017E, r25
    22b8:	80 93 7d 01 	sts	0x017D, r24
                        break;
    22bc:	74 c2       	rjmp	.+1256   	; 0x27a6 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    22be:	81 e6       	ldi	r24, 0x61	; 97
    22c0:	91 e0       	ldi	r25, 0x01	; 1
    22c2:	90 93 84 01 	sts	0x0184, r25
    22c6:	80 93 83 01 	sts	0x0183, r24
    22ca:	8d e5       	ldi	r24, 0x5D	; 93
    22cc:	91 e0       	ldi	r25, 0x01	; 1
    22ce:	90 93 6a 01 	sts	0x016A, r25
    22d2:	80 93 69 01 	sts	0x0169, r24
    22d6:	89 e5       	ldi	r24, 0x59	; 89
    22d8:	91 e0       	ldi	r25, 0x01	; 1
    22da:	90 93 6c 01 	sts	0x016C, r25
    22de:	80 93 6b 01 	sts	0x016B, r24
    22e2:	85 e5       	ldi	r24, 0x55	; 85
    22e4:	91 e0       	ldi	r25, 0x01	; 1
    22e6:	90 93 7e 01 	sts	0x017E, r25
    22ea:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    22ee:	81 e0       	ldi	r24, 0x01	; 1
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	90 93 2c 01 	sts	0x012C, r25
    22f6:	80 93 2b 01 	sts	0x012B, r24
                        break;
    22fa:	5b c2       	rjmp	.+1206   	; 0x27b2 <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
    22fc:	ed 81       	ldd	r30, Y+5	; 0x05
    22fe:	fe 81       	ldd	r31, Y+6	; 0x06
    2300:	e1 30       	cpi	r30, 0x01	; 1
    2302:	f1 05       	cpc	r31, r1
    2304:	31 f1       	breq	.+76     	; 0x2352 <localize+0x3d8>
    2306:	1c f4       	brge	.+6      	; 0x230e <localize+0x394>
    2308:	ef 2b       	or	r30, r31
    230a:	51 f0       	breq	.+20     	; 0x2320 <localize+0x3a6>
    230c:	6d c0       	rjmp	.+218    	; 0x23e8 <localize+0x46e>
    230e:	8d 81       	ldd	r24, Y+5	; 0x05
    2310:	9e 81       	ldd	r25, Y+6	; 0x06
    2312:	84 30       	cpi	r24, 0x04	; 4
    2314:	91 05       	cpc	r25, r1
    2316:	b1 f1       	breq	.+108    	; 0x2384 <localize+0x40a>
    2318:	05 97       	sbiw	r24, 0x05	; 5
    231a:	09 f0       	breq	.+2      	; 0x231e <localize+0x3a4>
    231c:	65 c0       	rjmp	.+202    	; 0x23e8 <localize+0x46e>
    231e:	4b c0       	rjmp	.+150    	; 0x23b6 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
    2320:	81 e6       	ldi	r24, 0x61	; 97
    2322:	91 e0       	ldi	r25, 0x01	; 1
    2324:	90 93 84 01 	sts	0x0184, r25
    2328:	80 93 83 01 	sts	0x0183, r24
    232c:	8d e5       	ldi	r24, 0x5D	; 93
    232e:	91 e0       	ldi	r25, 0x01	; 1
    2330:	90 93 6a 01 	sts	0x016A, r25
    2334:	80 93 69 01 	sts	0x0169, r24
    2338:	85 e5       	ldi	r24, 0x55	; 85
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	90 93 6c 01 	sts	0x016C, r25
    2340:	80 93 6b 01 	sts	0x016B, r24
    2344:	89 e5       	ldi	r24, 0x59	; 89
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	90 93 7e 01 	sts	0x017E, r25
    234c:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2350:	2a c2       	rjmp	.+1108   	; 0x27a6 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
    2352:	81 e6       	ldi	r24, 0x61	; 97
    2354:	91 e0       	ldi	r25, 0x01	; 1
    2356:	90 93 84 01 	sts	0x0184, r25
    235a:	80 93 83 01 	sts	0x0183, r24
    235e:	89 e5       	ldi	r24, 0x59	; 89
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	90 93 6a 01 	sts	0x016A, r25
    2366:	80 93 69 01 	sts	0x0169, r24
    236a:	85 e5       	ldi	r24, 0x55	; 85
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	90 93 6c 01 	sts	0x016C, r25
    2372:	80 93 6b 01 	sts	0x016B, r24
    2376:	8d e5       	ldi	r24, 0x5D	; 93
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	90 93 7e 01 	sts	0x017E, r25
    237e:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2382:	11 c2       	rjmp	.+1058   	; 0x27a6 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
    2384:	85 e5       	ldi	r24, 0x55	; 85
    2386:	91 e0       	ldi	r25, 0x01	; 1
    2388:	90 93 84 01 	sts	0x0184, r25
    238c:	80 93 83 01 	sts	0x0183, r24
    2390:	8d e5       	ldi	r24, 0x5D	; 93
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	90 93 6a 01 	sts	0x016A, r25
    2398:	80 93 69 01 	sts	0x0169, r24
    239c:	81 e6       	ldi	r24, 0x61	; 97
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	90 93 6c 01 	sts	0x016C, r25
    23a4:	80 93 6b 01 	sts	0x016B, r24
    23a8:	89 e5       	ldi	r24, 0x59	; 89
    23aa:	91 e0       	ldi	r25, 0x01	; 1
    23ac:	90 93 7e 01 	sts	0x017E, r25
    23b0:	80 93 7d 01 	sts	0x017D, r24
                        break;
    23b4:	f8 c1       	rjmp	.+1008   	; 0x27a6 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
    23b6:	85 e5       	ldi	r24, 0x55	; 85
    23b8:	91 e0       	ldi	r25, 0x01	; 1
    23ba:	90 93 84 01 	sts	0x0184, r25
    23be:	80 93 83 01 	sts	0x0183, r24
    23c2:	89 e5       	ldi	r24, 0x59	; 89
    23c4:	91 e0       	ldi	r25, 0x01	; 1
    23c6:	90 93 6a 01 	sts	0x016A, r25
    23ca:	80 93 69 01 	sts	0x0169, r24
    23ce:	81 e6       	ldi	r24, 0x61	; 97
    23d0:	91 e0       	ldi	r25, 0x01	; 1
    23d2:	90 93 6c 01 	sts	0x016C, r25
    23d6:	80 93 6b 01 	sts	0x016B, r24
    23da:	8d e5       	ldi	r24, 0x5D	; 93
    23dc:	91 e0       	ldi	r25, 0x01	; 1
    23de:	90 93 7e 01 	sts	0x017E, r25
    23e2:	80 93 7d 01 	sts	0x017D, r24
                        break;
    23e6:	df c1       	rjmp	.+958    	; 0x27a6 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    23e8:	81 e6       	ldi	r24, 0x61	; 97
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	90 93 84 01 	sts	0x0184, r25
    23f0:	80 93 83 01 	sts	0x0183, r24
    23f4:	8d e5       	ldi	r24, 0x5D	; 93
    23f6:	91 e0       	ldi	r25, 0x01	; 1
    23f8:	90 93 6a 01 	sts	0x016A, r25
    23fc:	80 93 69 01 	sts	0x0169, r24
    2400:	89 e5       	ldi	r24, 0x59	; 89
    2402:	91 e0       	ldi	r25, 0x01	; 1
    2404:	90 93 6c 01 	sts	0x016C, r25
    2408:	80 93 6b 01 	sts	0x016B, r24
    240c:	85 e5       	ldi	r24, 0x55	; 85
    240e:	91 e0       	ldi	r25, 0x01	; 1
    2410:	90 93 7e 01 	sts	0x017E, r25
    2414:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	90 93 2c 01 	sts	0x012C, r25
    2420:	80 93 2b 01 	sts	0x012B, r24
                        break;
    2424:	c6 c1       	rjmp	.+908    	; 0x27b2 <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
    2426:	ed 81       	ldd	r30, Y+5	; 0x05
    2428:	fe 81       	ldd	r31, Y+6	; 0x06
    242a:	e1 30       	cpi	r30, 0x01	; 1
    242c:	f1 05       	cpc	r31, r1
    242e:	31 f1       	breq	.+76     	; 0x247c <localize+0x502>
    2430:	1c f4       	brge	.+6      	; 0x2438 <localize+0x4be>
    2432:	ef 2b       	or	r30, r31
    2434:	51 f0       	breq	.+20     	; 0x244a <localize+0x4d0>
    2436:	6d c0       	rjmp	.+218    	; 0x2512 <localize+0x598>
    2438:	8d 81       	ldd	r24, Y+5	; 0x05
    243a:	9e 81       	ldd	r25, Y+6	; 0x06
    243c:	84 30       	cpi	r24, 0x04	; 4
    243e:	91 05       	cpc	r25, r1
    2440:	b1 f1       	breq	.+108    	; 0x24ae <localize+0x534>
    2442:	05 97       	sbiw	r24, 0x05	; 5
    2444:	09 f0       	breq	.+2      	; 0x2448 <localize+0x4ce>
    2446:	65 c0       	rjmp	.+202    	; 0x2512 <localize+0x598>
    2448:	4b c0       	rjmp	.+150    	; 0x24e0 <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
    244a:	8d e5       	ldi	r24, 0x5D	; 93
    244c:	91 e0       	ldi	r25, 0x01	; 1
    244e:	90 93 84 01 	sts	0x0184, r25
    2452:	80 93 83 01 	sts	0x0183, r24
    2456:	81 e6       	ldi	r24, 0x61	; 97
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	90 93 6a 01 	sts	0x016A, r25
    245e:	80 93 69 01 	sts	0x0169, r24
    2462:	89 e5       	ldi	r24, 0x59	; 89
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	90 93 6c 01 	sts	0x016C, r25
    246a:	80 93 6b 01 	sts	0x016B, r24
    246e:	85 e5       	ldi	r24, 0x55	; 85
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	90 93 7e 01 	sts	0x017E, r25
    2476:	80 93 7d 01 	sts	0x017D, r24
                        break;
    247a:	95 c1       	rjmp	.+810    	; 0x27a6 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
    247c:	89 e5       	ldi	r24, 0x59	; 89
    247e:	91 e0       	ldi	r25, 0x01	; 1
    2480:	90 93 84 01 	sts	0x0184, r25
    2484:	80 93 83 01 	sts	0x0183, r24
    2488:	81 e6       	ldi	r24, 0x61	; 97
    248a:	91 e0       	ldi	r25, 0x01	; 1
    248c:	90 93 6a 01 	sts	0x016A, r25
    2490:	80 93 69 01 	sts	0x0169, r24
    2494:	8d e5       	ldi	r24, 0x5D	; 93
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	90 93 6c 01 	sts	0x016C, r25
    249c:	80 93 6b 01 	sts	0x016B, r24
    24a0:	85 e5       	ldi	r24, 0x55	; 85
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	90 93 7e 01 	sts	0x017E, r25
    24a8:	80 93 7d 01 	sts	0x017D, r24
                        break;
    24ac:	7c c1       	rjmp	.+760    	; 0x27a6 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
    24ae:	8d e5       	ldi	r24, 0x5D	; 93
    24b0:	91 e0       	ldi	r25, 0x01	; 1
    24b2:	90 93 84 01 	sts	0x0184, r25
    24b6:	80 93 83 01 	sts	0x0183, r24
    24ba:	85 e5       	ldi	r24, 0x55	; 85
    24bc:	91 e0       	ldi	r25, 0x01	; 1
    24be:	90 93 6a 01 	sts	0x016A, r25
    24c2:	80 93 69 01 	sts	0x0169, r24
    24c6:	89 e5       	ldi	r24, 0x59	; 89
    24c8:	91 e0       	ldi	r25, 0x01	; 1
    24ca:	90 93 6c 01 	sts	0x016C, r25
    24ce:	80 93 6b 01 	sts	0x016B, r24
    24d2:	81 e6       	ldi	r24, 0x61	; 97
    24d4:	91 e0       	ldi	r25, 0x01	; 1
    24d6:	90 93 7e 01 	sts	0x017E, r25
    24da:	80 93 7d 01 	sts	0x017D, r24
                        break;
    24de:	63 c1       	rjmp	.+710    	; 0x27a6 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
    24e0:	89 e5       	ldi	r24, 0x59	; 89
    24e2:	91 e0       	ldi	r25, 0x01	; 1
    24e4:	90 93 84 01 	sts	0x0184, r25
    24e8:	80 93 83 01 	sts	0x0183, r24
    24ec:	85 e5       	ldi	r24, 0x55	; 85
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	90 93 6a 01 	sts	0x016A, r25
    24f4:	80 93 69 01 	sts	0x0169, r24
    24f8:	8d e5       	ldi	r24, 0x5D	; 93
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	90 93 6c 01 	sts	0x016C, r25
    2500:	80 93 6b 01 	sts	0x016B, r24
    2504:	81 e6       	ldi	r24, 0x61	; 97
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	90 93 7e 01 	sts	0x017E, r25
    250c:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2510:	4a c1       	rjmp	.+660    	; 0x27a6 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2512:	81 e6       	ldi	r24, 0x61	; 97
    2514:	91 e0       	ldi	r25, 0x01	; 1
    2516:	90 93 84 01 	sts	0x0184, r25
    251a:	80 93 83 01 	sts	0x0183, r24
    251e:	8d e5       	ldi	r24, 0x5D	; 93
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	90 93 6a 01 	sts	0x016A, r25
    2526:	80 93 69 01 	sts	0x0169, r24
    252a:	89 e5       	ldi	r24, 0x59	; 89
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	90 93 6c 01 	sts	0x016C, r25
    2532:	80 93 6b 01 	sts	0x016B, r24
    2536:	85 e5       	ldi	r24, 0x55	; 85
    2538:	91 e0       	ldi	r25, 0x01	; 1
    253a:	90 93 7e 01 	sts	0x017E, r25
    253e:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	90 93 2c 01 	sts	0x012C, r25
    254a:	80 93 2b 01 	sts	0x012B, r24
                        break;
    254e:	31 c1       	rjmp	.+610    	; 0x27b2 <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
    2550:	ed 81       	ldd	r30, Y+5	; 0x05
    2552:	fe 81       	ldd	r31, Y+6	; 0x06
    2554:	e2 30       	cpi	r30, 0x02	; 2
    2556:	f1 05       	cpc	r31, r1
    2558:	31 f1       	breq	.+76     	; 0x25a6 <localize+0x62c>
    255a:	1c f4       	brge	.+6      	; 0x2562 <localize+0x5e8>
    255c:	ef 2b       	or	r30, r31
    255e:	51 f0       	breq	.+20     	; 0x2574 <localize+0x5fa>
    2560:	6d c0       	rjmp	.+218    	; 0x263c <localize+0x6c2>
    2562:	8d 81       	ldd	r24, Y+5	; 0x05
    2564:	9e 81       	ldd	r25, Y+6	; 0x06
    2566:	83 30       	cpi	r24, 0x03	; 3
    2568:	91 05       	cpc	r25, r1
    256a:	b1 f1       	breq	.+108    	; 0x25d8 <localize+0x65e>
    256c:	05 97       	sbiw	r24, 0x05	; 5
    256e:	09 f0       	breq	.+2      	; 0x2572 <localize+0x5f8>
    2570:	65 c0       	rjmp	.+202    	; 0x263c <localize+0x6c2>
    2572:	4b c0       	rjmp	.+150    	; 0x260a <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
    2574:	8d e5       	ldi	r24, 0x5D	; 93
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	90 93 84 01 	sts	0x0184, r25
    257c:	80 93 83 01 	sts	0x0183, r24
    2580:	81 e6       	ldi	r24, 0x61	; 97
    2582:	91 e0       	ldi	r25, 0x01	; 1
    2584:	90 93 6a 01 	sts	0x016A, r25
    2588:	80 93 69 01 	sts	0x0169, r24
    258c:	85 e5       	ldi	r24, 0x55	; 85
    258e:	91 e0       	ldi	r25, 0x01	; 1
    2590:	90 93 6c 01 	sts	0x016C, r25
    2594:	80 93 6b 01 	sts	0x016B, r24
    2598:	89 e5       	ldi	r24, 0x59	; 89
    259a:	91 e0       	ldi	r25, 0x01	; 1
    259c:	90 93 7e 01 	sts	0x017E, r25
    25a0:	80 93 7d 01 	sts	0x017D, r24
                        break;
    25a4:	00 c1       	rjmp	.+512    	; 0x27a6 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
    25a6:	85 e5       	ldi	r24, 0x55	; 85
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	90 93 84 01 	sts	0x0184, r25
    25ae:	80 93 83 01 	sts	0x0183, r24
    25b2:	81 e6       	ldi	r24, 0x61	; 97
    25b4:	91 e0       	ldi	r25, 0x01	; 1
    25b6:	90 93 6a 01 	sts	0x016A, r25
    25ba:	80 93 69 01 	sts	0x0169, r24
    25be:	8d e5       	ldi	r24, 0x5D	; 93
    25c0:	91 e0       	ldi	r25, 0x01	; 1
    25c2:	90 93 6c 01 	sts	0x016C, r25
    25c6:	80 93 6b 01 	sts	0x016B, r24
    25ca:	89 e5       	ldi	r24, 0x59	; 89
    25cc:	91 e0       	ldi	r25, 0x01	; 1
    25ce:	90 93 7e 01 	sts	0x017E, r25
    25d2:	80 93 7d 01 	sts	0x017D, r24
                        break;
    25d6:	e7 c0       	rjmp	.+462    	; 0x27a6 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
    25d8:	8d e5       	ldi	r24, 0x5D	; 93
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	90 93 84 01 	sts	0x0184, r25
    25e0:	80 93 83 01 	sts	0x0183, r24
    25e4:	89 e5       	ldi	r24, 0x59	; 89
    25e6:	91 e0       	ldi	r25, 0x01	; 1
    25e8:	90 93 6a 01 	sts	0x016A, r25
    25ec:	80 93 69 01 	sts	0x0169, r24
    25f0:	85 e5       	ldi	r24, 0x55	; 85
    25f2:	91 e0       	ldi	r25, 0x01	; 1
    25f4:	90 93 6c 01 	sts	0x016C, r25
    25f8:	80 93 6b 01 	sts	0x016B, r24
    25fc:	81 e6       	ldi	r24, 0x61	; 97
    25fe:	91 e0       	ldi	r25, 0x01	; 1
    2600:	90 93 7e 01 	sts	0x017E, r25
    2604:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2608:	ce c0       	rjmp	.+412    	; 0x27a6 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
    260a:	85 e5       	ldi	r24, 0x55	; 85
    260c:	91 e0       	ldi	r25, 0x01	; 1
    260e:	90 93 84 01 	sts	0x0184, r25
    2612:	80 93 83 01 	sts	0x0183, r24
    2616:	89 e5       	ldi	r24, 0x59	; 89
    2618:	91 e0       	ldi	r25, 0x01	; 1
    261a:	90 93 6a 01 	sts	0x016A, r25
    261e:	80 93 69 01 	sts	0x0169, r24
    2622:	8d e5       	ldi	r24, 0x5D	; 93
    2624:	91 e0       	ldi	r25, 0x01	; 1
    2626:	90 93 6c 01 	sts	0x016C, r25
    262a:	80 93 6b 01 	sts	0x016B, r24
    262e:	81 e6       	ldi	r24, 0x61	; 97
    2630:	91 e0       	ldi	r25, 0x01	; 1
    2632:	90 93 7e 01 	sts	0x017E, r25
    2636:	80 93 7d 01 	sts	0x017D, r24
                        break;
    263a:	b5 c0       	rjmp	.+362    	; 0x27a6 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    263c:	81 e6       	ldi	r24, 0x61	; 97
    263e:	91 e0       	ldi	r25, 0x01	; 1
    2640:	90 93 84 01 	sts	0x0184, r25
    2644:	80 93 83 01 	sts	0x0183, r24
    2648:	8d e5       	ldi	r24, 0x5D	; 93
    264a:	91 e0       	ldi	r25, 0x01	; 1
    264c:	90 93 6a 01 	sts	0x016A, r25
    2650:	80 93 69 01 	sts	0x0169, r24
    2654:	89 e5       	ldi	r24, 0x59	; 89
    2656:	91 e0       	ldi	r25, 0x01	; 1
    2658:	90 93 6c 01 	sts	0x016C, r25
    265c:	80 93 6b 01 	sts	0x016B, r24
    2660:	85 e5       	ldi	r24, 0x55	; 85
    2662:	91 e0       	ldi	r25, 0x01	; 1
    2664:	90 93 7e 01 	sts	0x017E, r25
    2668:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	90 93 2c 01 	sts	0x012C, r25
    2674:	80 93 2b 01 	sts	0x012B, r24
                        break;
    2678:	9c c0       	rjmp	.+312    	; 0x27b2 <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
    267a:	ed 81       	ldd	r30, Y+5	; 0x05
    267c:	fe 81       	ldd	r31, Y+6	; 0x06
    267e:	e2 30       	cpi	r30, 0x02	; 2
    2680:	f1 05       	cpc	r31, r1
    2682:	39 f1       	breq	.+78     	; 0x26d2 <localize+0x758>
    2684:	24 f4       	brge	.+8      	; 0x268e <localize+0x714>
    2686:	31 97       	sbiw	r30, 0x01	; 1
    2688:	09 f0       	breq	.+2      	; 0x268c <localize+0x712>
    268a:	6e c0       	rjmp	.+220    	; 0x2768 <localize+0x7ee>
    268c:	09 c0       	rjmp	.+18     	; 0x26a0 <localize+0x726>
    268e:	8d 81       	ldd	r24, Y+5	; 0x05
    2690:	9e 81       	ldd	r25, Y+6	; 0x06
    2692:	83 30       	cpi	r24, 0x03	; 3
    2694:	91 05       	cpc	r25, r1
    2696:	b1 f1       	breq	.+108    	; 0x2704 <localize+0x78a>
    2698:	04 97       	sbiw	r24, 0x04	; 4
    269a:	09 f0       	breq	.+2      	; 0x269e <localize+0x724>
    269c:	65 c0       	rjmp	.+202    	; 0x2768 <localize+0x7ee>
    269e:	4b c0       	rjmp	.+150    	; 0x2736 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
    26a0:	89 e5       	ldi	r24, 0x59	; 89
    26a2:	91 e0       	ldi	r25, 0x01	; 1
    26a4:	90 93 84 01 	sts	0x0184, r25
    26a8:	80 93 83 01 	sts	0x0183, r24
    26ac:	81 e6       	ldi	r24, 0x61	; 97
    26ae:	91 e0       	ldi	r25, 0x01	; 1
    26b0:	90 93 6a 01 	sts	0x016A, r25
    26b4:	80 93 69 01 	sts	0x0169, r24
    26b8:	85 e5       	ldi	r24, 0x55	; 85
    26ba:	91 e0       	ldi	r25, 0x01	; 1
    26bc:	90 93 6c 01 	sts	0x016C, r25
    26c0:	80 93 6b 01 	sts	0x016B, r24
    26c4:	8d e5       	ldi	r24, 0x5D	; 93
    26c6:	91 e0       	ldi	r25, 0x01	; 1
    26c8:	90 93 7e 01 	sts	0x017E, r25
    26cc:	80 93 7d 01 	sts	0x017D, r24
                        break;
    26d0:	6a c0       	rjmp	.+212    	; 0x27a6 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
    26d2:	85 e5       	ldi	r24, 0x55	; 85
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	90 93 84 01 	sts	0x0184, r25
    26da:	80 93 83 01 	sts	0x0183, r24
    26de:	81 e6       	ldi	r24, 0x61	; 97
    26e0:	91 e0       	ldi	r25, 0x01	; 1
    26e2:	90 93 6a 01 	sts	0x016A, r25
    26e6:	80 93 69 01 	sts	0x0169, r24
    26ea:	89 e5       	ldi	r24, 0x59	; 89
    26ec:	91 e0       	ldi	r25, 0x01	; 1
    26ee:	90 93 6c 01 	sts	0x016C, r25
    26f2:	80 93 6b 01 	sts	0x016B, r24
    26f6:	8d e5       	ldi	r24, 0x5D	; 93
    26f8:	91 e0       	ldi	r25, 0x01	; 1
    26fa:	90 93 7e 01 	sts	0x017E, r25
    26fe:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2702:	51 c0       	rjmp	.+162    	; 0x27a6 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
    2704:	89 e5       	ldi	r24, 0x59	; 89
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	90 93 84 01 	sts	0x0184, r25
    270c:	80 93 83 01 	sts	0x0183, r24
    2710:	8d e5       	ldi	r24, 0x5D	; 93
    2712:	91 e0       	ldi	r25, 0x01	; 1
    2714:	90 93 6a 01 	sts	0x016A, r25
    2718:	80 93 69 01 	sts	0x0169, r24
    271c:	85 e5       	ldi	r24, 0x55	; 85
    271e:	91 e0       	ldi	r25, 0x01	; 1
    2720:	90 93 6c 01 	sts	0x016C, r25
    2724:	80 93 6b 01 	sts	0x016B, r24
    2728:	81 e6       	ldi	r24, 0x61	; 97
    272a:	91 e0       	ldi	r25, 0x01	; 1
    272c:	90 93 7e 01 	sts	0x017E, r25
    2730:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2734:	38 c0       	rjmp	.+112    	; 0x27a6 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
    2736:	85 e5       	ldi	r24, 0x55	; 85
    2738:	91 e0       	ldi	r25, 0x01	; 1
    273a:	90 93 84 01 	sts	0x0184, r25
    273e:	80 93 83 01 	sts	0x0183, r24
    2742:	8d e5       	ldi	r24, 0x5D	; 93
    2744:	91 e0       	ldi	r25, 0x01	; 1
    2746:	90 93 6a 01 	sts	0x016A, r25
    274a:	80 93 69 01 	sts	0x0169, r24
    274e:	89 e5       	ldi	r24, 0x59	; 89
    2750:	91 e0       	ldi	r25, 0x01	; 1
    2752:	90 93 6c 01 	sts	0x016C, r25
    2756:	80 93 6b 01 	sts	0x016B, r24
    275a:	81 e6       	ldi	r24, 0x61	; 97
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	90 93 7e 01 	sts	0x017E, r25
    2762:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2766:	1f c0       	rjmp	.+62     	; 0x27a6 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2768:	81 e6       	ldi	r24, 0x61	; 97
    276a:	91 e0       	ldi	r25, 0x01	; 1
    276c:	90 93 84 01 	sts	0x0184, r25
    2770:	80 93 83 01 	sts	0x0183, r24
    2774:	8d e5       	ldi	r24, 0x5D	; 93
    2776:	91 e0       	ldi	r25, 0x01	; 1
    2778:	90 93 6a 01 	sts	0x016A, r25
    277c:	80 93 69 01 	sts	0x0169, r24
    2780:	89 e5       	ldi	r24, 0x59	; 89
    2782:	91 e0       	ldi	r25, 0x01	; 1
    2784:	90 93 6c 01 	sts	0x016C, r25
    2788:	80 93 6b 01 	sts	0x016B, r24
    278c:	85 e5       	ldi	r24, 0x55	; 85
    278e:	91 e0       	ldi	r25, 0x01	; 1
    2790:	90 93 7e 01 	sts	0x017E, r25
    2794:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	90 93 2c 01 	sts	0x012C, r25
    27a0:	80 93 2b 01 	sts	0x012B, r24
                        break;
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
    27a6:	80 91 2b 01 	lds	r24, 0x012B
    27aa:	90 91 2c 01 	lds	r25, 0x012C
    27ae:	89 2b       	or	r24, r25
    27b0:	d1 f0       	breq	.+52     	; 0x27e6 <localize+0x86c>
        *orientation = orientation_prev;
    27b2:	80 91 3b 01 	lds	r24, 0x013B
    27b6:	90 91 3c 01 	lds	r25, 0x013C
    27ba:	ef 8d       	ldd	r30, Y+31	; 0x1f
    27bc:	f8 a1       	ldd	r31, Y+32	; 0x20
    27be:	91 83       	std	Z+1, r25	; 0x01
    27c0:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
    27c2:	80 91 39 01 	lds	r24, 0x0139
    27c6:	90 91 3a 01 	lds	r25, 0x013A
    27ca:	ef 81       	ldd	r30, Y+7	; 0x07
    27cc:	f8 85       	ldd	r31, Y+8	; 0x08
    27ce:	91 83       	std	Z+1, r25	; 0x01
    27d0:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
    27d2:	80 91 37 01 	lds	r24, 0x0137
    27d6:	90 91 38 01 	lds	r25, 0x0138
    27da:	ed 8d       	ldd	r30, Y+29	; 0x1d
    27dc:	fe 8d       	ldd	r31, Y+30	; 0x1e
    27de:	91 83       	std	Z+1, r25	; 0x01
    27e0:	80 83       	st	Z, r24
        return 0;
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	ea c3       	rjmp	.+2004   	; 0x2fba <localize+0x1040>
    }
    
    
    float scale = P_vertical/max_distance;
    27e6:	26 2d       	mov	r18, r6
    27e8:	37 2d       	mov	r19, r7
    27ea:	48 2d       	mov	r20, r8
    27ec:	59 2d       	mov	r21, r9
    27ee:	60 e0       	ldi	r22, 0x00	; 0
    27f0:	70 e0       	ldi	r23, 0x00	; 0
    27f2:	88 ee       	ldi	r24, 0xE8	; 232
    27f4:	91 e4       	ldi	r25, 0x41	; 65
    27f6:	0e 94 c4 18 	call	0x3188	; 0x3188 <__divsf3>
    27fa:	26 2e       	mov	r2, r22
    27fc:	37 2e       	mov	r3, r23
    27fe:	48 2e       	mov	r4, r24
    2800:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
    2802:	e0 90 83 01 	lds	r14, 0x0183
    2806:	f0 90 84 01 	lds	r15, 0x0184
    280a:	0f 2e       	mov	r0, r31
    280c:	f5 e7       	ldi	r31, 0x75	; 117
    280e:	8f 2e       	mov	r8, r31
    2810:	f1 e0       	ldi	r31, 0x01	; 1
    2812:	9f 2e       	mov	r9, r31
    2814:	f0 2d       	mov	r31, r0
    2816:	f7 01       	movw	r30, r14
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	88 27       	eor	r24, r24
    281e:	77 fd       	sbrc	r23, 7
    2820:	80 95       	com	r24
    2822:	98 2f       	mov	r25, r24
    2824:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2828:	22 2d       	mov	r18, r2
    282a:	33 2d       	mov	r19, r3
    282c:	44 2d       	mov	r20, r4
    282e:	55 2d       	mov	r21, r5
    2830:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2834:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2838:	f4 01       	movw	r30, r8
    283a:	71 83       	std	Z+1, r23	; 0x01
    283c:	60 83       	st	Z, r22
    283e:	0f 2e       	mov	r0, r31
    2840:	f7 e7       	ldi	r31, 0x77	; 119
    2842:	6f 2e       	mov	r6, r31
    2844:	f1 e0       	ldi	r31, 0x01	; 1
    2846:	7f 2e       	mov	r7, r31
    2848:	f0 2d       	mov	r31, r0
    284a:	f7 01       	movw	r30, r14
    284c:	62 81       	ldd	r22, Z+2	; 0x02
    284e:	73 81       	ldd	r23, Z+3	; 0x03
    2850:	88 27       	eor	r24, r24
    2852:	77 fd       	sbrc	r23, 7
    2854:	80 95       	com	r24
    2856:	98 2f       	mov	r25, r24
    2858:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    285c:	22 2d       	mov	r18, r2
    285e:	33 2d       	mov	r19, r3
    2860:	44 2d       	mov	r20, r4
    2862:	55 2d       	mov	r21, r5
    2864:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2868:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    286c:	f3 01       	movw	r30, r6
    286e:	71 83       	std	Z+1, r23	; 0x01
    2870:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
    2872:	00 91 6b 01 	lds	r16, 0x016B
    2876:	10 91 6c 01 	lds	r17, 0x016C
    287a:	0f 2e       	mov	r0, r31
    287c:	f5 e6       	ldi	r31, 0x65	; 101
    287e:	af 2e       	mov	r10, r31
    2880:	f1 e0       	ldi	r31, 0x01	; 1
    2882:	bf 2e       	mov	r11, r31
    2884:	f0 2d       	mov	r31, r0
    2886:	f8 01       	movw	r30, r16
    2888:	60 81       	ld	r22, Z
    288a:	71 81       	ldd	r23, Z+1	; 0x01
    288c:	88 27       	eor	r24, r24
    288e:	77 fd       	sbrc	r23, 7
    2890:	80 95       	com	r24
    2892:	98 2f       	mov	r25, r24
    2894:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2898:	22 2d       	mov	r18, r2
    289a:	33 2d       	mov	r19, r3
    289c:	44 2d       	mov	r20, r4
    289e:	55 2d       	mov	r21, r5
    28a0:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    28a4:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    28a8:	f5 01       	movw	r30, r10
    28aa:	71 83       	std	Z+1, r23	; 0x01
    28ac:	60 83       	st	Z, r22
    28ae:	0f 2e       	mov	r0, r31
    28b0:	f7 e6       	ldi	r31, 0x67	; 103
    28b2:	cf 2e       	mov	r12, r31
    28b4:	f1 e0       	ldi	r31, 0x01	; 1
    28b6:	df 2e       	mov	r13, r31
    28b8:	f0 2d       	mov	r31, r0
    28ba:	f8 01       	movw	r30, r16
    28bc:	62 81       	ldd	r22, Z+2	; 0x02
    28be:	73 81       	ldd	r23, Z+3	; 0x03
    28c0:	88 27       	eor	r24, r24
    28c2:	77 fd       	sbrc	r23, 7
    28c4:	80 95       	com	r24
    28c6:	98 2f       	mov	r25, r24
    28c8:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    28cc:	22 2d       	mov	r18, r2
    28ce:	33 2d       	mov	r19, r3
    28d0:	44 2d       	mov	r20, r4
    28d2:	55 2d       	mov	r21, r5
    28d4:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    28d8:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    28dc:	f6 01       	movw	r30, r12
    28de:	71 83       	std	Z+1, r23	; 0x01
    28e0:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
    28e2:	f7 01       	movw	r30, r14
    28e4:	60 81       	ld	r22, Z
    28e6:	71 81       	ldd	r23, Z+1	; 0x01
    28e8:	f8 01       	movw	r30, r16
    28ea:	80 81       	ld	r24, Z
    28ec:	91 81       	ldd	r25, Z+1	; 0x01
    28ee:	68 0f       	add	r22, r24
    28f0:	79 1f       	adc	r23, r25
    28f2:	88 27       	eor	r24, r24
    28f4:	77 fd       	sbrc	r23, 7
    28f6:	80 95       	com	r24
    28f8:	98 2f       	mov	r25, r24
    28fa:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e0       	ldi	r20, 0x00	; 0
    2904:	5f e3       	ldi	r21, 0x3F	; 63
    2906:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    290a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    290e:	e9 a1       	ldd	r30, Y+33	; 0x21
    2910:	fa a1       	ldd	r31, Y+34	; 0x22
    2912:	71 83       	std	Z+1, r23	; 0x01
    2914:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
    2916:	a0 91 83 01 	lds	r26, 0x0183
    291a:	b0 91 84 01 	lds	r27, 0x0184
    291e:	e0 91 6b 01 	lds	r30, 0x016B
    2922:	f0 91 6c 01 	lds	r31, 0x016C
    2926:	12 96       	adiw	r26, 0x02	; 2
    2928:	6d 91       	ld	r22, X+
    292a:	7c 91       	ld	r23, X
    292c:	13 97       	sbiw	r26, 0x03	; 3
    292e:	82 81       	ldd	r24, Z+2	; 0x02
    2930:	93 81       	ldd	r25, Z+3	; 0x03
    2932:	68 0f       	add	r22, r24
    2934:	79 1f       	adc	r23, r25
    2936:	88 27       	eor	r24, r24
    2938:	77 fd       	sbrc	r23, 7
    293a:	80 95       	com	r24
    293c:	98 2f       	mov	r25, r24
    293e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	40 e0       	ldi	r20, 0x00	; 0
    2948:	5f e3       	ldi	r21, 0x3F	; 63
    294a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    294e:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2952:	eb a1       	ldd	r30, Y+35	; 0x23
    2954:	fc a1       	ldd	r31, Y+36	; 0x24
    2956:	71 83       	std	Z+1, r23	; 0x01
    2958:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
    295a:	f4 01       	movw	r30, r8
    295c:	60 81       	ld	r22, Z
    295e:	71 81       	ldd	r23, Z+1	; 0x01
    2960:	f5 01       	movw	r30, r10
    2962:	80 81       	ld	r24, Z
    2964:	91 81       	ldd	r25, Z+1	; 0x01
    2966:	68 0f       	add	r22, r24
    2968:	79 1f       	adc	r23, r25
    296a:	88 27       	eor	r24, r24
    296c:	77 fd       	sbrc	r23, 7
    296e:	80 95       	com	r24
    2970:	98 2f       	mov	r25, r24
    2972:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2976:	20 e0       	ldi	r18, 0x00	; 0
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	40 e0       	ldi	r20, 0x00	; 0
    297c:	5f e3       	ldi	r21, 0x3F	; 63
    297e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2982:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2986:	1b 01       	movw	r2, r22
    2988:	70 93 8a 01 	sts	0x018A, r23
    298c:	60 93 89 01 	sts	0x0189, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
    2990:	f3 01       	movw	r30, r6
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	f6 01       	movw	r30, r12
    2998:	80 81       	ld	r24, Z
    299a:	91 81       	ldd	r25, Z+1	; 0x01
    299c:	68 0f       	add	r22, r24
    299e:	79 1f       	adc	r23, r25
    29a0:	88 27       	eor	r24, r24
    29a2:	77 fd       	sbrc	r23, 7
    29a4:	80 95       	com	r24
    29a6:	98 2f       	mov	r25, r24
    29a8:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	5f e3       	ldi	r21, 0x3F	; 63
    29b4:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    29b8:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    29bc:	8b 01       	movw	r16, r22
    29be:	70 93 8c 01 	sts	0x018C, r23
    29c2:	60 93 8b 01 	sts	0x018B, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
    29c6:	22 9c       	mul	r2, r2
    29c8:	b0 01       	movw	r22, r0
    29ca:	23 9c       	mul	r2, r3
    29cc:	70 0d       	add	r23, r0
    29ce:	70 0d       	add	r23, r0
    29d0:	11 24       	eor	r1, r1
    29d2:	00 9f       	mul	r16, r16
    29d4:	c0 01       	movw	r24, r0
    29d6:	01 9f       	mul	r16, r17
    29d8:	90 0d       	add	r25, r0
    29da:	90 0d       	add	r25, r0
    29dc:	11 24       	eor	r1, r1
    29de:	68 0f       	add	r22, r24
    29e0:	79 1f       	adc	r23, r25
    29e2:	88 27       	eor	r24, r24
    29e4:	77 fd       	sbrc	r23, 7
    29e6:	80 95       	com	r24
    29e8:	98 2f       	mov	r25, r24
    29ea:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    29ee:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    29f2:	2b 01       	movw	r4, r22
    29f4:	3c 01       	movw	r6, r24
    29f6:	60 93 6d 01 	sts	0x016D, r22
    29fa:	70 93 6e 01 	sts	0x016E, r23
    29fe:	80 93 6f 01 	sts	0x016F, r24
    2a02:	90 93 70 01 	sts	0x0170, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
    2a06:	80 91 6b 01 	lds	r24, 0x016B
    2a0a:	90 91 6c 01 	lds	r25, 0x016C
    2a0e:	9a 83       	std	Y+2, r25	; 0x02
    2a10:	89 83       	std	Y+1, r24	; 0x01
    2a12:	e0 91 83 01 	lds	r30, 0x0183
    2a16:	f0 91 84 01 	lds	r31, 0x0184
    2a1a:	fe 83       	std	Y+6, r31	; 0x06
    2a1c:	ed 83       	std	Y+5, r30	; 0x05
    2a1e:	fc 01       	movw	r30, r24
    2a20:	60 81       	ld	r22, Z
    2a22:	71 81       	ldd	r23, Z+1	; 0x01
    2a24:	ed 81       	ldd	r30, Y+5	; 0x05
    2a26:	fe 81       	ldd	r31, Y+6	; 0x06
    2a28:	80 81       	ld	r24, Z
    2a2a:	91 81       	ldd	r25, Z+1	; 0x01
    2a2c:	68 1b       	sub	r22, r24
    2a2e:	79 0b       	sbc	r23, r25
    2a30:	88 27       	eor	r24, r24
    2a32:	77 fd       	sbrc	r23, 7
    2a34:	80 95       	com	r24
    2a36:	98 2f       	mov	r25, r24
    2a38:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2a3c:	6b 01       	movw	r12, r22
    2a3e:	7c 01       	movw	r14, r24
    2a40:	e9 81       	ldd	r30, Y+1	; 0x01
    2a42:	fa 81       	ldd	r31, Y+2	; 0x02
    2a44:	62 81       	ldd	r22, Z+2	; 0x02
    2a46:	73 81       	ldd	r23, Z+3	; 0x03
    2a48:	ed 81       	ldd	r30, Y+5	; 0x05
    2a4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2a4c:	82 81       	ldd	r24, Z+2	; 0x02
    2a4e:	93 81       	ldd	r25, Z+3	; 0x03
    2a50:	68 1b       	sub	r22, r24
    2a52:	79 0b       	sbc	r23, r25
    2a54:	88 27       	eor	r24, r24
    2a56:	77 fd       	sbrc	r23, 7
    2a58:	80 95       	com	r24
    2a5a:	98 2f       	mov	r25, r24
    2a5c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2a60:	a7 01       	movw	r20, r14
    2a62:	96 01       	movw	r18, r12
    2a64:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <atan2>
    2a68:	4b 01       	movw	r8, r22
    2a6a:	5c 01       	movw	r10, r24
    2a6c:	60 93 79 01 	sts	0x0179, r22
    2a70:	70 93 7a 01 	sts	0x017A, r23
    2a74:	80 93 7b 01 	sts	0x017B, r24
    2a78:	90 93 7c 01 	sts	0x017C, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
    2a7c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a7e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a80:	60 81       	ld	r22, Z
    2a82:	71 81       	ldd	r23, Z+1	; 0x01
    2a84:	e9 81       	ldd	r30, Y+1	; 0x01
    2a86:	fa 81       	ldd	r31, Y+2	; 0x02
    2a88:	80 81       	ld	r24, Z
    2a8a:	91 81       	ldd	r25, Z+1	; 0x01
    2a8c:	68 1b       	sub	r22, r24
    2a8e:	79 0b       	sbc	r23, r25
    2a90:	88 27       	eor	r24, r24
    2a92:	77 fd       	sbrc	r23, 7
    2a94:	80 95       	com	r24
    2a96:	98 2f       	mov	r25, r24
    2a98:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2a9c:	6b 01       	movw	r12, r22
    2a9e:	7c 01       	movw	r14, r24
    2aa0:	ed 81       	ldd	r30, Y+5	; 0x05
    2aa2:	fe 81       	ldd	r31, Y+6	; 0x06
    2aa4:	62 81       	ldd	r22, Z+2	; 0x02
    2aa6:	73 81       	ldd	r23, Z+3	; 0x03
    2aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    2aac:	82 81       	ldd	r24, Z+2	; 0x02
    2aae:	93 81       	ldd	r25, Z+3	; 0x03
    2ab0:	68 1b       	sub	r22, r24
    2ab2:	79 0b       	sbc	r23, r25
    2ab4:	88 27       	eor	r24, r24
    2ab6:	77 fd       	sbrc	r23, 7
    2ab8:	80 95       	com	r24
    2aba:	98 2f       	mov	r25, r24
    2abc:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2ac0:	a7 01       	movw	r20, r14
    2ac2:	96 01       	movw	r18, r12
    2ac4:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <atan2>
    2ac8:	6b 01       	movw	r12, r22
    2aca:	7c 01       	movw	r14, r24
    2acc:	60 93 71 01 	sts	0x0171, r22
    2ad0:	70 93 72 01 	sts	0x0172, r23
    2ad4:	80 93 73 01 	sts	0x0173, r24
    2ad8:	90 93 74 01 	sts	0x0174, r25
    alpha = -atan2(S0[0],S0[1]);
    2adc:	b8 01       	movw	r22, r16
    2ade:	88 27       	eor	r24, r24
    2ae0:	77 fd       	sbrc	r23, 7
    2ae2:	80 95       	com	r24
    2ae4:	98 2f       	mov	r25, r24
    2ae6:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2aea:	69 83       	std	Y+1, r22	; 0x01
    2aec:	7a 83       	std	Y+2, r23	; 0x02
    2aee:	8b 83       	std	Y+3, r24	; 0x03
    2af0:	9c 83       	std	Y+4, r25	; 0x04
    2af2:	b1 01       	movw	r22, r2
    2af4:	88 27       	eor	r24, r24
    2af6:	77 fd       	sbrc	r23, 7
    2af8:	80 95       	com	r24
    2afa:	98 2f       	mov	r25, r24
    2afc:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2b00:	29 81       	ldd	r18, Y+1	; 0x01
    2b02:	3a 81       	ldd	r19, Y+2	; 0x02
    2b04:	4b 81       	ldd	r20, Y+3	; 0x03
    2b06:	5c 81       	ldd	r21, Y+4	; 0x04
    2b08:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <atan2>
    2b0c:	9b 01       	movw	r18, r22
    2b0e:	ac 01       	movw	r20, r24
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	b0 58       	subi	r27, 0x80	; 128
    2b16:	80 93 8d 01 	sts	0x018D, r24
    2b1a:	90 93 8e 01 	sts	0x018E, r25
    2b1e:	a0 93 8f 01 	sts	0x018F, r26
    2b22:	b0 93 90 01 	sts	0x0190, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    2b26:	77 fa       	bst	r7, 7
    2b28:	70 94       	com	r7
    2b2a:	77 f8       	bld	r7, 7
    2b2c:	70 94       	com	r7
    2b2e:	c5 01       	movw	r24, r10
    2b30:	b4 01       	movw	r22, r8
    2b32:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
    2b36:	86 2e       	mov	r8, r22
    2b38:	97 2e       	mov	r9, r23
    2b3a:	a8 2e       	mov	r10, r24
    2b3c:	b9 2e       	mov	r11, r25
    2b3e:	0e 94 c1 18 	call	0x3182	; 0x3182 <cos>
    2b42:	9b 01       	movw	r18, r22
    2b44:	ac 01       	movw	r20, r24
    2b46:	c3 01       	movw	r24, r6
    2b48:	b2 01       	movw	r22, r4
    2b4a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	40 e8       	ldi	r20, 0x80	; 128
    2b54:	5f e3       	ldi	r21, 0x3F	; 63
    2b56:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
    2b5a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2b5e:	8b 01       	movw	r16, r22
    2b60:	70 93 34 01 	sts	0x0134, r23
    2b64:	60 93 33 01 	sts	0x0133, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    2b68:	68 2d       	mov	r22, r8
    2b6a:	79 2d       	mov	r23, r9
    2b6c:	8a 2d       	mov	r24, r10
    2b6e:	9b 2d       	mov	r25, r11
    2b70:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <sin>
    2b74:	9b 01       	movw	r18, r22
    2b76:	ac 01       	movw	r20, r24
    2b78:	c3 01       	movw	r24, r6
    2b7a:	b2 01       	movw	r22, r4
    2b7c:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2b80:	20 e0       	ldi	r18, 0x00	; 0
    2b82:	30 e0       	ldi	r19, 0x00	; 0
    2b84:	40 e3       	ldi	r20, 0x30	; 48
    2b86:	51 e4       	ldi	r21, 0x41	; 65
    2b88:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
    2b8c:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2b90:	70 93 32 01 	sts	0x0132, r23
    2b94:	60 93 31 01 	sts	0x0131, r22
    orientation_current = (theta2) * 180/M_PI;
    2b98:	20 e0       	ldi	r18, 0x00	; 0
    2b9a:	30 e0       	ldi	r19, 0x00	; 0
    2b9c:	44 e3       	ldi	r20, 0x34	; 52
    2b9e:	53 e4       	ldi	r21, 0x43	; 67
    2ba0:	c7 01       	movw	r24, r14
    2ba2:	b6 01       	movw	r22, r12
    2ba4:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2ba8:	2b ed       	ldi	r18, 0xDB	; 219
    2baa:	3f e0       	ldi	r19, 0x0F	; 15
    2bac:	49 e4       	ldi	r20, 0x49	; 73
    2bae:	50 e4       	ldi	r21, 0x40	; 64
    2bb0:	0e 94 c4 18 	call	0x3188	; 0x3188 <__divsf3>
    2bb4:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2bb8:	70 93 36 01 	sts	0x0136, r23
    2bbc:	60 93 35 01 	sts	0x0135, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    2bc0:	c0 90 2d 01 	lds	r12, 0x012D
    2bc4:	d0 90 2e 01 	lds	r13, 0x012E
    2bc8:	e0 90 2f 01 	lds	r14, 0x012F
    2bcc:	f0 90 30 01 	lds	r15, 0x0130
    2bd0:	60 91 39 01 	lds	r22, 0x0139
    2bd4:	70 91 3a 01 	lds	r23, 0x013A
    2bd8:	88 27       	eor	r24, r24
    2bda:	77 fd       	sbrc	r23, 7
    2bdc:	80 95       	com	r24
    2bde:	98 2f       	mov	r25, r24
    2be0:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2be4:	a7 01       	movw	r20, r14
    2be6:	96 01       	movw	r18, r12
    2be8:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2bec:	4b 01       	movw	r8, r22
    2bee:	5c 01       	movw	r10, r24
    2bf0:	a7 01       	movw	r20, r14
    2bf2:	96 01       	movw	r18, r12
    2bf4:	60 e0       	ldi	r22, 0x00	; 0
    2bf6:	70 e0       	ldi	r23, 0x00	; 0
    2bf8:	80 e8       	ldi	r24, 0x80	; 128
    2bfa:	9f e3       	ldi	r25, 0x3F	; 63
    2bfc:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
    2c00:	6b 01       	movw	r12, r22
    2c02:	7c 01       	movw	r14, r24
    2c04:	b8 01       	movw	r22, r16
    2c06:	88 27       	eor	r24, r24
    2c08:	77 fd       	sbrc	r23, 7
    2c0a:	80 95       	com	r24
    2c0c:	98 2f       	mov	r25, r24
    2c0e:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2c12:	9b 01       	movw	r18, r22
    2c14:	ac 01       	movw	r20, r24
    2c16:	c7 01       	movw	r24, r14
    2c18:	b6 01       	movw	r22, r12
    2c1a:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2c1e:	9b 01       	movw	r18, r22
    2c20:	ac 01       	movw	r20, r24
    2c22:	c5 01       	movw	r24, r10
    2c24:	b4 01       	movw	r22, r8
    2c26:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
    2c2a:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2c2e:	ef 81       	ldd	r30, Y+7	; 0x07
    2c30:	f8 85       	ldd	r31, Y+8	; 0x08
    2c32:	71 83       	std	Z+1, r23	; 0x01
    2c34:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    2c36:	c0 90 2d 01 	lds	r12, 0x012D
    2c3a:	d0 90 2e 01 	lds	r13, 0x012E
    2c3e:	e0 90 2f 01 	lds	r14, 0x012F
    2c42:	f0 90 30 01 	lds	r15, 0x0130
    2c46:	60 91 37 01 	lds	r22, 0x0137
    2c4a:	70 91 38 01 	lds	r23, 0x0138
    2c4e:	88 27       	eor	r24, r24
    2c50:	77 fd       	sbrc	r23, 7
    2c52:	80 95       	com	r24
    2c54:	98 2f       	mov	r25, r24
    2c56:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2c5a:	a7 01       	movw	r20, r14
    2c5c:	96 01       	movw	r18, r12
    2c5e:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2c62:	4b 01       	movw	r8, r22
    2c64:	5c 01       	movw	r10, r24
    2c66:	a7 01       	movw	r20, r14
    2c68:	96 01       	movw	r18, r12
    2c6a:	60 e0       	ldi	r22, 0x00	; 0
    2c6c:	70 e0       	ldi	r23, 0x00	; 0
    2c6e:	80 e8       	ldi	r24, 0x80	; 128
    2c70:	9f e3       	ldi	r25, 0x3F	; 63
    2c72:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
    2c76:	6b 01       	movw	r12, r22
    2c78:	7c 01       	movw	r14, r24
    2c7a:	60 91 31 01 	lds	r22, 0x0131
    2c7e:	70 91 32 01 	lds	r23, 0x0132
    2c82:	88 27       	eor	r24, r24
    2c84:	77 fd       	sbrc	r23, 7
    2c86:	80 95       	com	r24
    2c88:	98 2f       	mov	r25, r24
    2c8a:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2c8e:	9b 01       	movw	r18, r22
    2c90:	ac 01       	movw	r20, r24
    2c92:	c7 01       	movw	r24, r14
    2c94:	b6 01       	movw	r22, r12
    2c96:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2c9a:	9b 01       	movw	r18, r22
    2c9c:	ac 01       	movw	r20, r24
    2c9e:	c5 01       	movw	r24, r10
    2ca0:	b4 01       	movw	r22, r8
    2ca2:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
    2ca6:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2caa:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2cac:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2cae:	71 83       	std	Z+1, r23	; 0x01
    2cb0:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    2cb2:	c0 90 2d 01 	lds	r12, 0x012D
    2cb6:	d0 90 2e 01 	lds	r13, 0x012E
    2cba:	e0 90 2f 01 	lds	r14, 0x012F
    2cbe:	f0 90 30 01 	lds	r15, 0x0130
    2cc2:	60 91 3b 01 	lds	r22, 0x013B
    2cc6:	70 91 3c 01 	lds	r23, 0x013C
    2cca:	88 27       	eor	r24, r24
    2ccc:	77 fd       	sbrc	r23, 7
    2cce:	80 95       	com	r24
    2cd0:	98 2f       	mov	r25, r24
    2cd2:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2cd6:	a7 01       	movw	r20, r14
    2cd8:	96 01       	movw	r18, r12
    2cda:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2cde:	4b 01       	movw	r8, r22
    2ce0:	5c 01       	movw	r10, r24
    2ce2:	a7 01       	movw	r20, r14
    2ce4:	96 01       	movw	r18, r12
    2ce6:	60 e0       	ldi	r22, 0x00	; 0
    2ce8:	70 e0       	ldi	r23, 0x00	; 0
    2cea:	80 e8       	ldi	r24, 0x80	; 128
    2cec:	9f e3       	ldi	r25, 0x3F	; 63
    2cee:	0e 94 f6 17 	call	0x2fec	; 0x2fec <__subsf3>
    2cf2:	6b 01       	movw	r12, r22
    2cf4:	7c 01       	movw	r14, r24
    2cf6:	60 91 35 01 	lds	r22, 0x0135
    2cfa:	70 91 36 01 	lds	r23, 0x0136
    2cfe:	88 27       	eor	r24, r24
    2d00:	77 fd       	sbrc	r23, 7
    2d02:	80 95       	com	r24
    2d04:	98 2f       	mov	r25, r24
    2d06:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2d0a:	9b 01       	movw	r18, r22
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	c7 01       	movw	r24, r14
    2d10:	b6 01       	movw	r22, r12
    2d12:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <__mulsf3>
    2d16:	9b 01       	movw	r18, r22
    2d18:	ac 01       	movw	r20, r24
    2d1a:	c5 01       	movw	r24, r10
    2d1c:	b4 01       	movw	r22, r8
    2d1e:	0e 94 f7 17 	call	0x2fee	; 0x2fee <__addsf3>
    2d22:	0e 94 2c 19 	call	0x3258	; 0x3258 <__fixsfsi>
    2d26:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d28:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d2a:	71 83       	std	Z+1, r23	; 0x01
    2d2c:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    2d2e:	ef 81       	ldd	r30, Y+7	; 0x07
    2d30:	f8 85       	ldd	r31, Y+8	; 0x08
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	90 93 3a 01 	sts	0x013A, r25
    2d3a:	80 93 39 01 	sts	0x0139, r24
    y_robot_prev     = *y_robot;
    2d3e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d40:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d42:	80 81       	ld	r24, Z
    2d44:	91 81       	ldd	r25, Z+1	; 0x01
    2d46:	90 93 38 01 	sts	0x0138, r25
    2d4a:	80 93 37 01 	sts	0x0137, r24
    orientation_prev = *orientation;
    2d4e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d50:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d52:	80 81       	ld	r24, Z
    2d54:	91 81       	ldd	r25, Z+1	; 0x01
    2d56:	90 93 3c 01 	sts	0x013C, r25
    2d5a:	80 93 3b 01 	sts	0x013B, r24
    
    return 1;
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	2c c1       	rjmp	.+600    	; 0x2fba <localize+0x1040>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    2d62:	e0 91 09 01 	lds	r30, 0x0109
    2d66:	f0 91 0a 01 	lds	r31, 0x010A
    2d6a:	4c 01       	movw	r8, r24
    2d6c:	8e 1a       	sub	r8, r30
    2d6e:	9f 0a       	sbc	r9, r31
    2d70:	90 92 62 01 	sts	0x0162, r9
    2d74:	80 92 61 01 	sts	0x0161, r8
    2d78:	80 91 07 01 	lds	r24, 0x0107
    2d7c:	90 91 08 01 	lds	r25, 0x0108
    2d80:	08 1b       	sub	r16, r24
    2d82:	19 0b       	sbc	r17, r25
    2d84:	10 93 64 01 	sts	0x0164, r17
    2d88:	00 93 63 01 	sts	0x0163, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    2d8c:	3b 01       	movw	r6, r22
    2d8e:	6e 1a       	sub	r6, r30
    2d90:	7f 0a       	sbc	r7, r31
    2d92:	70 92 5e 01 	sts	0x015E, r7
    2d96:	60 92 5d 01 	sts	0x015D, r6
    2d9a:	e8 1a       	sub	r14, r24
    2d9c:	f9 0a       	sbc	r15, r25
    2d9e:	f0 92 60 01 	sts	0x0160, r15
    2da2:	e0 92 5f 01 	sts	0x015F, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    2da6:	2a 01       	movw	r4, r20
    2da8:	4e 1a       	sub	r4, r30
    2daa:	5f 0a       	sbc	r5, r31
    2dac:	50 92 5a 01 	sts	0x015A, r5
    2db0:	40 92 59 01 	sts	0x0159, r4
    2db4:	16 01       	movw	r2, r12
    2db6:	28 1a       	sub	r2, r24
    2db8:	39 0a       	sbc	r3, r25
    2dba:	30 92 5c 01 	sts	0x015C, r3
    2dbe:	20 92 5b 01 	sts	0x015B, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    2dc2:	69 01       	movw	r12, r18
    2dc4:	ce 1a       	sub	r12, r30
    2dc6:	df 0a       	sbc	r13, r31
    2dc8:	d0 92 56 01 	sts	0x0156, r13
    2dcc:	c0 92 55 01 	sts	0x0155, r12
    2dd0:	a8 1a       	sub	r10, r24
    2dd2:	b9 0a       	sbc	r11, r25
    2dd4:	b0 92 58 01 	sts	0x0158, r11
    2dd8:	a0 92 57 01 	sts	0x0157, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    2ddc:	93 01       	movw	r18, r6
    2dde:	28 19       	sub	r18, r8
    2de0:	39 09       	sbc	r19, r9
    2de2:	c7 01       	movw	r24, r14
    2de4:	80 1b       	sub	r24, r16
    2de6:	91 0b       	sbc	r25, r17
    2de8:	22 9f       	mul	r18, r18
    2dea:	b0 01       	movw	r22, r0
    2dec:	23 9f       	mul	r18, r19
    2dee:	70 0d       	add	r23, r0
    2df0:	70 0d       	add	r23, r0
    2df2:	11 24       	eor	r1, r1
    2df4:	88 9f       	mul	r24, r24
    2df6:	90 01       	movw	r18, r0
    2df8:	89 9f       	mul	r24, r25
    2dfa:	30 0d       	add	r19, r0
    2dfc:	30 0d       	add	r19, r0
    2dfe:	11 24       	eor	r1, r1
    2e00:	62 0f       	add	r22, r18
    2e02:	73 1f       	adc	r23, r19
    2e04:	88 27       	eor	r24, r24
    2e06:	77 fd       	sbrc	r23, 7
    2e08:	80 95       	com	r24
    2e0a:	98 2f       	mov	r25, r24
    2e0c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2e10:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    2e14:	60 93 3d 01 	sts	0x013D, r22
    2e18:	70 93 3e 01 	sts	0x013E, r23
    2e1c:	80 93 3f 01 	sts	0x013F, r24
    2e20:	90 93 40 01 	sts	0x0140, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    2e24:	92 01       	movw	r18, r4
    2e26:	28 19       	sub	r18, r8
    2e28:	39 09       	sbc	r19, r9
    2e2a:	c1 01       	movw	r24, r2
    2e2c:	80 1b       	sub	r24, r16
    2e2e:	91 0b       	sbc	r25, r17
    2e30:	22 9f       	mul	r18, r18
    2e32:	b0 01       	movw	r22, r0
    2e34:	23 9f       	mul	r18, r19
    2e36:	70 0d       	add	r23, r0
    2e38:	70 0d       	add	r23, r0
    2e3a:	11 24       	eor	r1, r1
    2e3c:	88 9f       	mul	r24, r24
    2e3e:	90 01       	movw	r18, r0
    2e40:	89 9f       	mul	r24, r25
    2e42:	30 0d       	add	r19, r0
    2e44:	30 0d       	add	r19, r0
    2e46:	11 24       	eor	r1, r1
    2e48:	62 0f       	add	r22, r18
    2e4a:	73 1f       	adc	r23, r19
    2e4c:	88 27       	eor	r24, r24
    2e4e:	77 fd       	sbrc	r23, 7
    2e50:	80 95       	com	r24
    2e52:	98 2f       	mov	r25, r24
    2e54:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2e58:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    2e5c:	60 93 41 01 	sts	0x0141, r22
    2e60:	70 93 42 01 	sts	0x0142, r23
    2e64:	80 93 43 01 	sts	0x0143, r24
    2e68:	90 93 44 01 	sts	0x0144, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    2e6c:	96 01       	movw	r18, r12
    2e6e:	28 19       	sub	r18, r8
    2e70:	39 09       	sbc	r19, r9
    2e72:	c5 01       	movw	r24, r10
    2e74:	80 1b       	sub	r24, r16
    2e76:	91 0b       	sbc	r25, r17
    2e78:	22 9f       	mul	r18, r18
    2e7a:	b0 01       	movw	r22, r0
    2e7c:	23 9f       	mul	r18, r19
    2e7e:	70 0d       	add	r23, r0
    2e80:	70 0d       	add	r23, r0
    2e82:	11 24       	eor	r1, r1
    2e84:	88 9f       	mul	r24, r24
    2e86:	90 01       	movw	r18, r0
    2e88:	89 9f       	mul	r24, r25
    2e8a:	30 0d       	add	r19, r0
    2e8c:	30 0d       	add	r19, r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	62 0f       	add	r22, r18
    2e92:	73 1f       	adc	r23, r19
    2e94:	88 27       	eor	r24, r24
    2e96:	77 fd       	sbrc	r23, 7
    2e98:	80 95       	com	r24
    2e9a:	98 2f       	mov	r25, r24
    2e9c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2ea0:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    2ea4:	60 93 45 01 	sts	0x0145, r22
    2ea8:	70 93 46 01 	sts	0x0146, r23
    2eac:	80 93 47 01 	sts	0x0147, r24
    2eb0:	90 93 48 01 	sts	0x0148, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    2eb4:	92 01       	movw	r18, r4
    2eb6:	26 19       	sub	r18, r6
    2eb8:	37 09       	sbc	r19, r7
    2eba:	c1 01       	movw	r24, r2
    2ebc:	8e 19       	sub	r24, r14
    2ebe:	9f 09       	sbc	r25, r15
    2ec0:	22 9f       	mul	r18, r18
    2ec2:	b0 01       	movw	r22, r0
    2ec4:	23 9f       	mul	r18, r19
    2ec6:	70 0d       	add	r23, r0
    2ec8:	70 0d       	add	r23, r0
    2eca:	11 24       	eor	r1, r1
    2ecc:	88 9f       	mul	r24, r24
    2ece:	90 01       	movw	r18, r0
    2ed0:	89 9f       	mul	r24, r25
    2ed2:	30 0d       	add	r19, r0
    2ed4:	30 0d       	add	r19, r0
    2ed6:	11 24       	eor	r1, r1
    2ed8:	62 0f       	add	r22, r18
    2eda:	73 1f       	adc	r23, r19
    2edc:	88 27       	eor	r24, r24
    2ede:	77 fd       	sbrc	r23, 7
    2ee0:	80 95       	com	r24
    2ee2:	98 2f       	mov	r25, r24
    2ee4:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2ee8:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    2eec:	60 93 49 01 	sts	0x0149, r22
    2ef0:	70 93 4a 01 	sts	0x014A, r23
    2ef4:	80 93 4b 01 	sts	0x014B, r24
    2ef8:	90 93 4c 01 	sts	0x014C, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    2efc:	96 01       	movw	r18, r12
    2efe:	26 19       	sub	r18, r6
    2f00:	37 09       	sbc	r19, r7
    2f02:	c5 01       	movw	r24, r10
    2f04:	8e 19       	sub	r24, r14
    2f06:	9f 09       	sbc	r25, r15
    2f08:	22 9f       	mul	r18, r18
    2f0a:	b0 01       	movw	r22, r0
    2f0c:	23 9f       	mul	r18, r19
    2f0e:	70 0d       	add	r23, r0
    2f10:	70 0d       	add	r23, r0
    2f12:	11 24       	eor	r1, r1
    2f14:	88 9f       	mul	r24, r24
    2f16:	90 01       	movw	r18, r0
    2f18:	89 9f       	mul	r24, r25
    2f1a:	30 0d       	add	r19, r0
    2f1c:	30 0d       	add	r19, r0
    2f1e:	11 24       	eor	r1, r1
    2f20:	62 0f       	add	r22, r18
    2f22:	73 1f       	adc	r23, r19
    2f24:	88 27       	eor	r24, r24
    2f26:	77 fd       	sbrc	r23, 7
    2f28:	80 95       	com	r24
    2f2a:	98 2f       	mov	r25, r24
    2f2c:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2f30:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    2f34:	60 93 4d 01 	sts	0x014D, r22
    2f38:	70 93 4e 01 	sts	0x014E, r23
    2f3c:	80 93 4f 01 	sts	0x014F, r24
    2f40:	90 93 50 01 	sts	0x0150, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    2f44:	c4 18       	sub	r12, r4
    2f46:	d5 08       	sbc	r13, r5
    2f48:	a2 18       	sub	r10, r2
    2f4a:	b3 08       	sbc	r11, r3
    2f4c:	cc 9c       	mul	r12, r12
    2f4e:	b0 01       	movw	r22, r0
    2f50:	cd 9c       	mul	r12, r13
    2f52:	70 0d       	add	r23, r0
    2f54:	70 0d       	add	r23, r0
    2f56:	11 24       	eor	r1, r1
    2f58:	aa 9c       	mul	r10, r10
    2f5a:	c0 01       	movw	r24, r0
    2f5c:	ab 9c       	mul	r10, r11
    2f5e:	90 0d       	add	r25, r0
    2f60:	90 0d       	add	r25, r0
    2f62:	11 24       	eor	r1, r1
    2f64:	68 0f       	add	r22, r24
    2f66:	79 1f       	adc	r23, r25
    2f68:	88 27       	eor	r24, r24
    2f6a:	77 fd       	sbrc	r23, 7
    2f6c:	80 95       	com	r24
    2f6e:	98 2f       	mov	r25, r24
    2f70:	0e 94 5f 19 	call	0x32be	; 0x32be <__floatsisf>
    2f74:	0e 94 e5 1a 	call	0x35ca	; 0x35ca <sqrt>
    2f78:	60 93 51 01 	sts	0x0151, r22
    2f7c:	70 93 52 01 	sts	0x0152, r23
    2f80:	80 93 53 01 	sts	0x0153, r24
    2f84:	90 93 54 01 	sts	0x0154, r25
    2f88:	0d e3       	ldi	r16, 0x3D	; 61
    2f8a:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    2f8c:	e1 2c       	mov	r14, r1
    2f8e:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    2f90:	1e 82       	std	Y+6, r1	; 0x06
    2f92:	1d 82       	std	Y+5, r1	; 0x05
    2f94:	1a 82       	std	Y+2, r1	; 0x02
    2f96:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    2f98:	21 2c       	mov	r2, r1
    2f9a:	68 94       	set
    2f9c:	33 24       	eor	r3, r3
    2f9e:	36 f8       	bld	r3, 6
    2fa0:	0f 2e       	mov	r0, r31
    2fa2:	fc e1       	ldi	r31, 0x1C	; 28
    2fa4:	4f 2e       	mov	r4, r31
    2fa6:	f0 2d       	mov	r31, r0
    2fa8:	0f 2e       	mov	r0, r31
    2faa:	f6 e4       	ldi	r31, 0x46	; 70
    2fac:	5f 2e       	mov	r5, r31
    2fae:	f0 2d       	mov	r31, r0
    2fb0:	61 2c       	mov	r6, r1
    2fb2:	71 2c       	mov	r7, r1
    2fb4:	81 2c       	mov	r8, r1
    2fb6:	91 2c       	mov	r9, r1
    2fb8:	2b c8       	rjmp	.-4010   	; 0x2010 <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    2fba:	28 96       	adiw	r28, 0x08	; 8
    2fbc:	0f b6       	in	r0, 0x3f	; 63
    2fbe:	f8 94       	cli
    2fc0:	de bf       	out	0x3e, r29	; 62
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	cd bf       	out	0x3d, r28	; 61
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	bf 90       	pop	r11
    2fd8:	af 90       	pop	r10
    2fda:	9f 90       	pop	r9
    2fdc:	8f 90       	pop	r8
    2fde:	7f 90       	pop	r7
    2fe0:	6f 90       	pop	r6
    2fe2:	5f 90       	pop	r5
    2fe4:	4f 90       	pop	r4
    2fe6:	3f 90       	pop	r3
    2fe8:	2f 90       	pop	r2
    2fea:	08 95       	ret

00002fec <__subsf3>:
    2fec:	50 58       	subi	r21, 0x80	; 128

00002fee <__addsf3>:
    2fee:	bb 27       	eor	r27, r27
    2ff0:	aa 27       	eor	r26, r26
    2ff2:	0e d0       	rcall	.+28     	; 0x3010 <__addsf3x>
    2ff4:	27 c2       	rjmp	.+1102   	; 0x3444 <__fp_round>
    2ff6:	f0 d1       	rcall	.+992    	; 0x33d8 <__fp_pscA>
    2ff8:	30 f0       	brcs	.+12     	; 0x3006 <__addsf3+0x18>
    2ffa:	f5 d1       	rcall	.+1002   	; 0x33e6 <__fp_pscB>
    2ffc:	20 f0       	brcs	.+8      	; 0x3006 <__addsf3+0x18>
    2ffe:	31 f4       	brne	.+12     	; 0x300c <__addsf3+0x1e>
    3000:	9f 3f       	cpi	r25, 0xFF	; 255
    3002:	11 f4       	brne	.+4      	; 0x3008 <__addsf3+0x1a>
    3004:	1e f4       	brtc	.+6      	; 0x300c <__addsf3+0x1e>
    3006:	c0 c1       	rjmp	.+896    	; 0x3388 <__fp_nan>
    3008:	0e f4       	brtc	.+2      	; 0x300c <__addsf3+0x1e>
    300a:	e0 95       	com	r30
    300c:	e7 fb       	bst	r30, 7
    300e:	b6 c1       	rjmp	.+876    	; 0x337c <__fp_inf>

00003010 <__addsf3x>:
    3010:	e9 2f       	mov	r30, r25
    3012:	3a d2       	rcall	.+1140   	; 0x3488 <__fp_split3>
    3014:	80 f3       	brcs	.-32     	; 0x2ff6 <__addsf3+0x8>
    3016:	ba 17       	cp	r27, r26
    3018:	62 07       	cpc	r22, r18
    301a:	73 07       	cpc	r23, r19
    301c:	84 07       	cpc	r24, r20
    301e:	95 07       	cpc	r25, r21
    3020:	18 f0       	brcs	.+6      	; 0x3028 <__addsf3x+0x18>
    3022:	71 f4       	brne	.+28     	; 0x3040 <__addsf3x+0x30>
    3024:	9e f5       	brtc	.+102    	; 0x308c <__addsf3x+0x7c>
    3026:	52 c2       	rjmp	.+1188   	; 0x34cc <__fp_zero>
    3028:	0e f4       	brtc	.+2      	; 0x302c <__addsf3x+0x1c>
    302a:	e0 95       	com	r30
    302c:	0b 2e       	mov	r0, r27
    302e:	ba 2f       	mov	r27, r26
    3030:	a0 2d       	mov	r26, r0
    3032:	0b 01       	movw	r0, r22
    3034:	b9 01       	movw	r22, r18
    3036:	90 01       	movw	r18, r0
    3038:	0c 01       	movw	r0, r24
    303a:	ca 01       	movw	r24, r20
    303c:	a0 01       	movw	r20, r0
    303e:	11 24       	eor	r1, r1
    3040:	ff 27       	eor	r31, r31
    3042:	59 1b       	sub	r21, r25
    3044:	99 f0       	breq	.+38     	; 0x306c <__addsf3x+0x5c>
    3046:	59 3f       	cpi	r21, 0xF9	; 249
    3048:	50 f4       	brcc	.+20     	; 0x305e <__addsf3x+0x4e>
    304a:	50 3e       	cpi	r21, 0xE0	; 224
    304c:	68 f1       	brcs	.+90     	; 0x30a8 <__addsf3x+0x98>
    304e:	1a 16       	cp	r1, r26
    3050:	f0 40       	sbci	r31, 0x00	; 0
    3052:	a2 2f       	mov	r26, r18
    3054:	23 2f       	mov	r18, r19
    3056:	34 2f       	mov	r19, r20
    3058:	44 27       	eor	r20, r20
    305a:	58 5f       	subi	r21, 0xF8	; 248
    305c:	f3 cf       	rjmp	.-26     	; 0x3044 <__addsf3x+0x34>
    305e:	46 95       	lsr	r20
    3060:	37 95       	ror	r19
    3062:	27 95       	ror	r18
    3064:	a7 95       	ror	r26
    3066:	f0 40       	sbci	r31, 0x00	; 0
    3068:	53 95       	inc	r21
    306a:	c9 f7       	brne	.-14     	; 0x305e <__addsf3x+0x4e>
    306c:	7e f4       	brtc	.+30     	; 0x308c <__addsf3x+0x7c>
    306e:	1f 16       	cp	r1, r31
    3070:	ba 0b       	sbc	r27, r26
    3072:	62 0b       	sbc	r22, r18
    3074:	73 0b       	sbc	r23, r19
    3076:	84 0b       	sbc	r24, r20
    3078:	ba f0       	brmi	.+46     	; 0x30a8 <__addsf3x+0x98>
    307a:	91 50       	subi	r25, 0x01	; 1
    307c:	a1 f0       	breq	.+40     	; 0x30a6 <__addsf3x+0x96>
    307e:	ff 0f       	add	r31, r31
    3080:	bb 1f       	adc	r27, r27
    3082:	66 1f       	adc	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	c2 f7       	brpl	.-16     	; 0x307a <__addsf3x+0x6a>
    308a:	0e c0       	rjmp	.+28     	; 0x30a8 <__addsf3x+0x98>
    308c:	ba 0f       	add	r27, r26
    308e:	62 1f       	adc	r22, r18
    3090:	73 1f       	adc	r23, r19
    3092:	84 1f       	adc	r24, r20
    3094:	48 f4       	brcc	.+18     	; 0x30a8 <__addsf3x+0x98>
    3096:	87 95       	ror	r24
    3098:	77 95       	ror	r23
    309a:	67 95       	ror	r22
    309c:	b7 95       	ror	r27
    309e:	f7 95       	ror	r31
    30a0:	9e 3f       	cpi	r25, 0xFE	; 254
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <__addsf3x+0x96>
    30a4:	b3 cf       	rjmp	.-154    	; 0x300c <__addsf3+0x1e>
    30a6:	93 95       	inc	r25
    30a8:	88 0f       	add	r24, r24
    30aa:	08 f0       	brcs	.+2      	; 0x30ae <__addsf3x+0x9e>
    30ac:	99 27       	eor	r25, r25
    30ae:	ee 0f       	add	r30, r30
    30b0:	97 95       	ror	r25
    30b2:	87 95       	ror	r24
    30b4:	08 95       	ret
    30b6:	90 d1       	rcall	.+800    	; 0x33d8 <__fp_pscA>
    30b8:	58 f0       	brcs	.+22     	; 0x30d0 <__addsf3x+0xc0>
    30ba:	80 e8       	ldi	r24, 0x80	; 128
    30bc:	91 e0       	ldi	r25, 0x01	; 1
    30be:	09 f4       	brne	.+2      	; 0x30c2 <__addsf3x+0xb2>
    30c0:	9e ef       	ldi	r25, 0xFE	; 254
    30c2:	91 d1       	rcall	.+802    	; 0x33e6 <__fp_pscB>
    30c4:	28 f0       	brcs	.+10     	; 0x30d0 <__addsf3x+0xc0>
    30c6:	40 e8       	ldi	r20, 0x80	; 128
    30c8:	51 e0       	ldi	r21, 0x01	; 1
    30ca:	59 f4       	brne	.+22     	; 0x30e2 <atan2+0xe>
    30cc:	5e ef       	ldi	r21, 0xFE	; 254
    30ce:	09 c0       	rjmp	.+18     	; 0x30e2 <atan2+0xe>
    30d0:	5b c1       	rjmp	.+694    	; 0x3388 <__fp_nan>
    30d2:	fc c1       	rjmp	.+1016   	; 0x34cc <__fp_zero>

000030d4 <atan2>:
    30d4:	e9 2f       	mov	r30, r25
    30d6:	e0 78       	andi	r30, 0x80	; 128
    30d8:	d7 d1       	rcall	.+942    	; 0x3488 <__fp_split3>
    30da:	68 f3       	brcs	.-38     	; 0x30b6 <__addsf3x+0xa6>
    30dc:	09 2e       	mov	r0, r25
    30de:	05 2a       	or	r0, r21
    30e0:	c1 f3       	breq	.-16     	; 0x30d2 <__addsf3x+0xc2>
    30e2:	26 17       	cp	r18, r22
    30e4:	37 07       	cpc	r19, r23
    30e6:	48 07       	cpc	r20, r24
    30e8:	59 07       	cpc	r21, r25
    30ea:	38 f0       	brcs	.+14     	; 0x30fa <atan2+0x26>
    30ec:	0e 2e       	mov	r0, r30
    30ee:	07 f8       	bld	r0, 7
    30f0:	e0 25       	eor	r30, r0
    30f2:	69 f0       	breq	.+26     	; 0x310e <atan2+0x3a>
    30f4:	e0 25       	eor	r30, r0
    30f6:	e0 64       	ori	r30, 0x40	; 64
    30f8:	0a c0       	rjmp	.+20     	; 0x310e <atan2+0x3a>
    30fa:	ef 63       	ori	r30, 0x3F	; 63
    30fc:	07 f8       	bld	r0, 7
    30fe:	00 94       	com	r0
    3100:	07 fa       	bst	r0, 7
    3102:	db 01       	movw	r26, r22
    3104:	b9 01       	movw	r22, r18
    3106:	9d 01       	movw	r18, r26
    3108:	dc 01       	movw	r26, r24
    310a:	ca 01       	movw	r24, r20
    310c:	ad 01       	movw	r20, r26
    310e:	ef 93       	push	r30
    3110:	4a d0       	rcall	.+148    	; 0x31a6 <__divsf3_pse>
    3112:	98 d1       	rcall	.+816    	; 0x3444 <__fp_round>
    3114:	0a d0       	rcall	.+20     	; 0x312a <atan>
    3116:	5f 91       	pop	r21
    3118:	55 23       	and	r21, r21
    311a:	31 f0       	breq	.+12     	; 0x3128 <atan2+0x54>
    311c:	2b ed       	ldi	r18, 0xDB	; 219
    311e:	3f e0       	ldi	r19, 0x0F	; 15
    3120:	49 e4       	ldi	r20, 0x49	; 73
    3122:	50 fd       	sbrc	r21, 0
    3124:	49 ec       	ldi	r20, 0xC9	; 201
    3126:	63 cf       	rjmp	.-314    	; 0x2fee <__addsf3>
    3128:	08 95       	ret

0000312a <atan>:
    312a:	df 93       	push	r29
    312c:	dd 27       	eor	r29, r29
    312e:	b9 2f       	mov	r27, r25
    3130:	bf 77       	andi	r27, 0x7F	; 127
    3132:	40 e8       	ldi	r20, 0x80	; 128
    3134:	5f e3       	ldi	r21, 0x3F	; 63
    3136:	16 16       	cp	r1, r22
    3138:	17 06       	cpc	r1, r23
    313a:	48 07       	cpc	r20, r24
    313c:	5b 07       	cpc	r21, r27
    313e:	10 f4       	brcc	.+4      	; 0x3144 <atan+0x1a>
    3140:	d9 2f       	mov	r29, r25
    3142:	cf d1       	rcall	.+926    	; 0x34e2 <inverse>
    3144:	9f 93       	push	r25
    3146:	8f 93       	push	r24
    3148:	7f 93       	push	r23
    314a:	6f 93       	push	r22
    314c:	7c d2       	rcall	.+1272   	; 0x3646 <square>
    314e:	ec ea       	ldi	r30, 0xAC	; 172
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	1d d1       	rcall	.+570    	; 0x338e <__fp_powser>
    3154:	77 d1       	rcall	.+750    	; 0x3444 <__fp_round>
    3156:	2f 91       	pop	r18
    3158:	3f 91       	pop	r19
    315a:	4f 91       	pop	r20
    315c:	5f 91       	pop	r21
    315e:	d4 d1       	rcall	.+936    	; 0x3508 <__mulsf3x>
    3160:	dd 23       	and	r29, r29
    3162:	49 f0       	breq	.+18     	; 0x3176 <atan+0x4c>
    3164:	90 58       	subi	r25, 0x80	; 128
    3166:	a2 ea       	ldi	r26, 0xA2	; 162
    3168:	2a ed       	ldi	r18, 0xDA	; 218
    316a:	3f e0       	ldi	r19, 0x0F	; 15
    316c:	49 ec       	ldi	r20, 0xC9	; 201
    316e:	5f e3       	ldi	r21, 0x3F	; 63
    3170:	d0 78       	andi	r29, 0x80	; 128
    3172:	5d 27       	eor	r21, r29
    3174:	4d df       	rcall	.-358    	; 0x3010 <__addsf3x>
    3176:	df 91       	pop	r29
    3178:	65 c1       	rjmp	.+714    	; 0x3444 <__fp_round>

0000317a <__cmpsf2>:
    317a:	dc d0       	rcall	.+440    	; 0x3334 <__fp_cmp>
    317c:	08 f4       	brcc	.+2      	; 0x3180 <__cmpsf2+0x6>
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	08 95       	ret

00003182 <cos>:
    3182:	39 d1       	rcall	.+626    	; 0x33f6 <__fp_rempio2>
    3184:	e3 95       	inc	r30
    3186:	6f c1       	rjmp	.+734    	; 0x3466 <__fp_sinus>

00003188 <__divsf3>:
    3188:	0c d0       	rcall	.+24     	; 0x31a2 <__divsf3x>
    318a:	5c c1       	rjmp	.+696    	; 0x3444 <__fp_round>
    318c:	2c d1       	rcall	.+600    	; 0x33e6 <__fp_pscB>
    318e:	40 f0       	brcs	.+16     	; 0x31a0 <__divsf3+0x18>
    3190:	23 d1       	rcall	.+582    	; 0x33d8 <__fp_pscA>
    3192:	30 f0       	brcs	.+12     	; 0x31a0 <__divsf3+0x18>
    3194:	21 f4       	brne	.+8      	; 0x319e <__divsf3+0x16>
    3196:	5f 3f       	cpi	r21, 0xFF	; 255
    3198:	19 f0       	breq	.+6      	; 0x31a0 <__divsf3+0x18>
    319a:	f0 c0       	rjmp	.+480    	; 0x337c <__fp_inf>
    319c:	51 11       	cpse	r21, r1
    319e:	97 c1       	rjmp	.+814    	; 0x34ce <__fp_szero>
    31a0:	f3 c0       	rjmp	.+486    	; 0x3388 <__fp_nan>

000031a2 <__divsf3x>:
    31a2:	72 d1       	rcall	.+740    	; 0x3488 <__fp_split3>
    31a4:	98 f3       	brcs	.-26     	; 0x318c <__divsf3+0x4>

000031a6 <__divsf3_pse>:
    31a6:	99 23       	and	r25, r25
    31a8:	c9 f3       	breq	.-14     	; 0x319c <__divsf3+0x14>
    31aa:	55 23       	and	r21, r21
    31ac:	b1 f3       	breq	.-20     	; 0x319a <__divsf3+0x12>
    31ae:	95 1b       	sub	r25, r21
    31b0:	55 0b       	sbc	r21, r21
    31b2:	bb 27       	eor	r27, r27
    31b4:	aa 27       	eor	r26, r26
    31b6:	62 17       	cp	r22, r18
    31b8:	73 07       	cpc	r23, r19
    31ba:	84 07       	cpc	r24, r20
    31bc:	38 f0       	brcs	.+14     	; 0x31cc <__divsf3_pse+0x26>
    31be:	9f 5f       	subi	r25, 0xFF	; 255
    31c0:	5f 4f       	sbci	r21, 0xFF	; 255
    31c2:	22 0f       	add	r18, r18
    31c4:	33 1f       	adc	r19, r19
    31c6:	44 1f       	adc	r20, r20
    31c8:	aa 1f       	adc	r26, r26
    31ca:	a9 f3       	breq	.-22     	; 0x31b6 <__divsf3_pse+0x10>
    31cc:	33 d0       	rcall	.+102    	; 0x3234 <__divsf3_pse+0x8e>
    31ce:	0e 2e       	mov	r0, r30
    31d0:	3a f0       	brmi	.+14     	; 0x31e0 <__divsf3_pse+0x3a>
    31d2:	e0 e8       	ldi	r30, 0x80	; 128
    31d4:	30 d0       	rcall	.+96     	; 0x3236 <__divsf3_pse+0x90>
    31d6:	91 50       	subi	r25, 0x01	; 1
    31d8:	50 40       	sbci	r21, 0x00	; 0
    31da:	e6 95       	lsr	r30
    31dc:	00 1c       	adc	r0, r0
    31de:	ca f7       	brpl	.-14     	; 0x31d2 <__divsf3_pse+0x2c>
    31e0:	29 d0       	rcall	.+82     	; 0x3234 <__divsf3_pse+0x8e>
    31e2:	fe 2f       	mov	r31, r30
    31e4:	27 d0       	rcall	.+78     	; 0x3234 <__divsf3_pse+0x8e>
    31e6:	66 0f       	add	r22, r22
    31e8:	77 1f       	adc	r23, r23
    31ea:	88 1f       	adc	r24, r24
    31ec:	bb 1f       	adc	r27, r27
    31ee:	26 17       	cp	r18, r22
    31f0:	37 07       	cpc	r19, r23
    31f2:	48 07       	cpc	r20, r24
    31f4:	ab 07       	cpc	r26, r27
    31f6:	b0 e8       	ldi	r27, 0x80	; 128
    31f8:	09 f0       	breq	.+2      	; 0x31fc <__divsf3_pse+0x56>
    31fa:	bb 0b       	sbc	r27, r27
    31fc:	80 2d       	mov	r24, r0
    31fe:	bf 01       	movw	r22, r30
    3200:	ff 27       	eor	r31, r31
    3202:	93 58       	subi	r25, 0x83	; 131
    3204:	5f 4f       	sbci	r21, 0xFF	; 255
    3206:	2a f0       	brmi	.+10     	; 0x3212 <__divsf3_pse+0x6c>
    3208:	9e 3f       	cpi	r25, 0xFE	; 254
    320a:	51 05       	cpc	r21, r1
    320c:	68 f0       	brcs	.+26     	; 0x3228 <__divsf3_pse+0x82>
    320e:	b6 c0       	rjmp	.+364    	; 0x337c <__fp_inf>
    3210:	5e c1       	rjmp	.+700    	; 0x34ce <__fp_szero>
    3212:	5f 3f       	cpi	r21, 0xFF	; 255
    3214:	ec f3       	brlt	.-6      	; 0x3210 <__divsf3_pse+0x6a>
    3216:	98 3e       	cpi	r25, 0xE8	; 232
    3218:	dc f3       	brlt	.-10     	; 0x3210 <__divsf3_pse+0x6a>
    321a:	86 95       	lsr	r24
    321c:	77 95       	ror	r23
    321e:	67 95       	ror	r22
    3220:	b7 95       	ror	r27
    3222:	f7 95       	ror	r31
    3224:	9f 5f       	subi	r25, 0xFF	; 255
    3226:	c9 f7       	brne	.-14     	; 0x321a <__divsf3_pse+0x74>
    3228:	88 0f       	add	r24, r24
    322a:	91 1d       	adc	r25, r1
    322c:	96 95       	lsr	r25
    322e:	87 95       	ror	r24
    3230:	97 f9       	bld	r25, 7
    3232:	08 95       	ret
    3234:	e1 e0       	ldi	r30, 0x01	; 1
    3236:	66 0f       	add	r22, r22
    3238:	77 1f       	adc	r23, r23
    323a:	88 1f       	adc	r24, r24
    323c:	bb 1f       	adc	r27, r27
    323e:	62 17       	cp	r22, r18
    3240:	73 07       	cpc	r23, r19
    3242:	84 07       	cpc	r24, r20
    3244:	ba 07       	cpc	r27, r26
    3246:	20 f0       	brcs	.+8      	; 0x3250 <__divsf3_pse+0xaa>
    3248:	62 1b       	sub	r22, r18
    324a:	73 0b       	sbc	r23, r19
    324c:	84 0b       	sbc	r24, r20
    324e:	ba 0b       	sbc	r27, r26
    3250:	ee 1f       	adc	r30, r30
    3252:	88 f7       	brcc	.-30     	; 0x3236 <__divsf3_pse+0x90>
    3254:	e0 95       	com	r30
    3256:	08 95       	ret

00003258 <__fixsfsi>:
    3258:	04 d0       	rcall	.+8      	; 0x3262 <__fixunssfsi>
    325a:	68 94       	set
    325c:	b1 11       	cpse	r27, r1
    325e:	37 c1       	rjmp	.+622    	; 0x34ce <__fp_szero>
    3260:	08 95       	ret

00003262 <__fixunssfsi>:
    3262:	1a d1       	rcall	.+564    	; 0x3498 <__fp_splitA>
    3264:	88 f0       	brcs	.+34     	; 0x3288 <__fixunssfsi+0x26>
    3266:	9f 57       	subi	r25, 0x7F	; 127
    3268:	90 f0       	brcs	.+36     	; 0x328e <__fixunssfsi+0x2c>
    326a:	b9 2f       	mov	r27, r25
    326c:	99 27       	eor	r25, r25
    326e:	b7 51       	subi	r27, 0x17	; 23
    3270:	a0 f0       	brcs	.+40     	; 0x329a <__fixunssfsi+0x38>
    3272:	d1 f0       	breq	.+52     	; 0x32a8 <__fixunssfsi+0x46>
    3274:	66 0f       	add	r22, r22
    3276:	77 1f       	adc	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	1a f0       	brmi	.+6      	; 0x3284 <__fixunssfsi+0x22>
    327e:	ba 95       	dec	r27
    3280:	c9 f7       	brne	.-14     	; 0x3274 <__fixunssfsi+0x12>
    3282:	12 c0       	rjmp	.+36     	; 0x32a8 <__fixunssfsi+0x46>
    3284:	b1 30       	cpi	r27, 0x01	; 1
    3286:	81 f0       	breq	.+32     	; 0x32a8 <__fixunssfsi+0x46>
    3288:	21 d1       	rcall	.+578    	; 0x34cc <__fp_zero>
    328a:	b1 e0       	ldi	r27, 0x01	; 1
    328c:	08 95       	ret
    328e:	1e c1       	rjmp	.+572    	; 0x34cc <__fp_zero>
    3290:	67 2f       	mov	r22, r23
    3292:	78 2f       	mov	r23, r24
    3294:	88 27       	eor	r24, r24
    3296:	b8 5f       	subi	r27, 0xF8	; 248
    3298:	39 f0       	breq	.+14     	; 0x32a8 <__fixunssfsi+0x46>
    329a:	b9 3f       	cpi	r27, 0xF9	; 249
    329c:	cc f3       	brlt	.-14     	; 0x3290 <__fixunssfsi+0x2e>
    329e:	86 95       	lsr	r24
    32a0:	77 95       	ror	r23
    32a2:	67 95       	ror	r22
    32a4:	b3 95       	inc	r27
    32a6:	d9 f7       	brne	.-10     	; 0x329e <__fixunssfsi+0x3c>
    32a8:	3e f4       	brtc	.+14     	; 0x32b8 <__fixunssfsi+0x56>
    32aa:	90 95       	com	r25
    32ac:	80 95       	com	r24
    32ae:	70 95       	com	r23
    32b0:	61 95       	neg	r22
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	8f 4f       	sbci	r24, 0xFF	; 255
    32b6:	9f 4f       	sbci	r25, 0xFF	; 255
    32b8:	08 95       	ret

000032ba <__floatunsisf>:
    32ba:	e8 94       	clt
    32bc:	09 c0       	rjmp	.+18     	; 0x32d0 <__floatsisf+0x12>

000032be <__floatsisf>:
    32be:	97 fb       	bst	r25, 7
    32c0:	3e f4       	brtc	.+14     	; 0x32d0 <__floatsisf+0x12>
    32c2:	90 95       	com	r25
    32c4:	80 95       	com	r24
    32c6:	70 95       	com	r23
    32c8:	61 95       	neg	r22
    32ca:	7f 4f       	sbci	r23, 0xFF	; 255
    32cc:	8f 4f       	sbci	r24, 0xFF	; 255
    32ce:	9f 4f       	sbci	r25, 0xFF	; 255
    32d0:	99 23       	and	r25, r25
    32d2:	a9 f0       	breq	.+42     	; 0x32fe <__floatsisf+0x40>
    32d4:	f9 2f       	mov	r31, r25
    32d6:	96 e9       	ldi	r25, 0x96	; 150
    32d8:	bb 27       	eor	r27, r27
    32da:	93 95       	inc	r25
    32dc:	f6 95       	lsr	r31
    32de:	87 95       	ror	r24
    32e0:	77 95       	ror	r23
    32e2:	67 95       	ror	r22
    32e4:	b7 95       	ror	r27
    32e6:	f1 11       	cpse	r31, r1
    32e8:	f8 cf       	rjmp	.-16     	; 0x32da <__floatsisf+0x1c>
    32ea:	fa f4       	brpl	.+62     	; 0x332a <__floatsisf+0x6c>
    32ec:	bb 0f       	add	r27, r27
    32ee:	11 f4       	brne	.+4      	; 0x32f4 <__floatsisf+0x36>
    32f0:	60 ff       	sbrs	r22, 0
    32f2:	1b c0       	rjmp	.+54     	; 0x332a <__floatsisf+0x6c>
    32f4:	6f 5f       	subi	r22, 0xFF	; 255
    32f6:	7f 4f       	sbci	r23, 0xFF	; 255
    32f8:	8f 4f       	sbci	r24, 0xFF	; 255
    32fa:	9f 4f       	sbci	r25, 0xFF	; 255
    32fc:	16 c0       	rjmp	.+44     	; 0x332a <__floatsisf+0x6c>
    32fe:	88 23       	and	r24, r24
    3300:	11 f0       	breq	.+4      	; 0x3306 <__floatsisf+0x48>
    3302:	96 e9       	ldi	r25, 0x96	; 150
    3304:	11 c0       	rjmp	.+34     	; 0x3328 <__floatsisf+0x6a>
    3306:	77 23       	and	r23, r23
    3308:	21 f0       	breq	.+8      	; 0x3312 <__floatsisf+0x54>
    330a:	9e e8       	ldi	r25, 0x8E	; 142
    330c:	87 2f       	mov	r24, r23
    330e:	76 2f       	mov	r23, r22
    3310:	05 c0       	rjmp	.+10     	; 0x331c <__floatsisf+0x5e>
    3312:	66 23       	and	r22, r22
    3314:	71 f0       	breq	.+28     	; 0x3332 <__floatsisf+0x74>
    3316:	96 e8       	ldi	r25, 0x86	; 134
    3318:	86 2f       	mov	r24, r22
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	2a f0       	brmi	.+10     	; 0x332a <__floatsisf+0x6c>
    3320:	9a 95       	dec	r25
    3322:	66 0f       	add	r22, r22
    3324:	77 1f       	adc	r23, r23
    3326:	88 1f       	adc	r24, r24
    3328:	da f7       	brpl	.-10     	; 0x3320 <__floatsisf+0x62>
    332a:	88 0f       	add	r24, r24
    332c:	96 95       	lsr	r25
    332e:	87 95       	ror	r24
    3330:	97 f9       	bld	r25, 7
    3332:	08 95       	ret

00003334 <__fp_cmp>:
    3334:	99 0f       	add	r25, r25
    3336:	00 08       	sbc	r0, r0
    3338:	55 0f       	add	r21, r21
    333a:	aa 0b       	sbc	r26, r26
    333c:	e0 e8       	ldi	r30, 0x80	; 128
    333e:	fe ef       	ldi	r31, 0xFE	; 254
    3340:	16 16       	cp	r1, r22
    3342:	17 06       	cpc	r1, r23
    3344:	e8 07       	cpc	r30, r24
    3346:	f9 07       	cpc	r31, r25
    3348:	c0 f0       	brcs	.+48     	; 0x337a <__fp_cmp+0x46>
    334a:	12 16       	cp	r1, r18
    334c:	13 06       	cpc	r1, r19
    334e:	e4 07       	cpc	r30, r20
    3350:	f5 07       	cpc	r31, r21
    3352:	98 f0       	brcs	.+38     	; 0x337a <__fp_cmp+0x46>
    3354:	62 1b       	sub	r22, r18
    3356:	73 0b       	sbc	r23, r19
    3358:	84 0b       	sbc	r24, r20
    335a:	95 0b       	sbc	r25, r21
    335c:	39 f4       	brne	.+14     	; 0x336c <__fp_cmp+0x38>
    335e:	0a 26       	eor	r0, r26
    3360:	61 f0       	breq	.+24     	; 0x337a <__fp_cmp+0x46>
    3362:	23 2b       	or	r18, r19
    3364:	24 2b       	or	r18, r20
    3366:	25 2b       	or	r18, r21
    3368:	21 f4       	brne	.+8      	; 0x3372 <__fp_cmp+0x3e>
    336a:	08 95       	ret
    336c:	0a 26       	eor	r0, r26
    336e:	09 f4       	brne	.+2      	; 0x3372 <__fp_cmp+0x3e>
    3370:	a1 40       	sbci	r26, 0x01	; 1
    3372:	a6 95       	lsr	r26
    3374:	8f ef       	ldi	r24, 0xFF	; 255
    3376:	81 1d       	adc	r24, r1
    3378:	81 1d       	adc	r24, r1
    337a:	08 95       	ret

0000337c <__fp_inf>:
    337c:	97 f9       	bld	r25, 7
    337e:	9f 67       	ori	r25, 0x7F	; 127
    3380:	80 e8       	ldi	r24, 0x80	; 128
    3382:	70 e0       	ldi	r23, 0x00	; 0
    3384:	60 e0       	ldi	r22, 0x00	; 0
    3386:	08 95       	ret

00003388 <__fp_nan>:
    3388:	9f ef       	ldi	r25, 0xFF	; 255
    338a:	80 ec       	ldi	r24, 0xC0	; 192
    338c:	08 95       	ret

0000338e <__fp_powser>:
    338e:	df 93       	push	r29
    3390:	cf 93       	push	r28
    3392:	1f 93       	push	r17
    3394:	0f 93       	push	r16
    3396:	ff 92       	push	r15
    3398:	ef 92       	push	r14
    339a:	df 92       	push	r13
    339c:	7b 01       	movw	r14, r22
    339e:	8c 01       	movw	r16, r24
    33a0:	68 94       	set
    33a2:	05 c0       	rjmp	.+10     	; 0x33ae <__fp_powser+0x20>
    33a4:	da 2e       	mov	r13, r26
    33a6:	ef 01       	movw	r28, r30
    33a8:	af d0       	rcall	.+350    	; 0x3508 <__mulsf3x>
    33aa:	fe 01       	movw	r30, r28
    33ac:	e8 94       	clt
    33ae:	a5 91       	lpm	r26, Z+
    33b0:	25 91       	lpm	r18, Z+
    33b2:	35 91       	lpm	r19, Z+
    33b4:	45 91       	lpm	r20, Z+
    33b6:	55 91       	lpm	r21, Z+
    33b8:	ae f3       	brts	.-22     	; 0x33a4 <__fp_powser+0x16>
    33ba:	ef 01       	movw	r28, r30
    33bc:	29 de       	rcall	.-942    	; 0x3010 <__addsf3x>
    33be:	fe 01       	movw	r30, r28
    33c0:	97 01       	movw	r18, r14
    33c2:	a8 01       	movw	r20, r16
    33c4:	da 94       	dec	r13
    33c6:	79 f7       	brne	.-34     	; 0x33a6 <__fp_powser+0x18>
    33c8:	df 90       	pop	r13
    33ca:	ef 90       	pop	r14
    33cc:	ff 90       	pop	r15
    33ce:	0f 91       	pop	r16
    33d0:	1f 91       	pop	r17
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	08 95       	ret

000033d8 <__fp_pscA>:
    33d8:	00 24       	eor	r0, r0
    33da:	0a 94       	dec	r0
    33dc:	16 16       	cp	r1, r22
    33de:	17 06       	cpc	r1, r23
    33e0:	18 06       	cpc	r1, r24
    33e2:	09 06       	cpc	r0, r25
    33e4:	08 95       	ret

000033e6 <__fp_pscB>:
    33e6:	00 24       	eor	r0, r0
    33e8:	0a 94       	dec	r0
    33ea:	12 16       	cp	r1, r18
    33ec:	13 06       	cpc	r1, r19
    33ee:	14 06       	cpc	r1, r20
    33f0:	05 06       	cpc	r0, r21
    33f2:	08 95       	ret
    33f4:	c9 cf       	rjmp	.-110    	; 0x3388 <__fp_nan>

000033f6 <__fp_rempio2>:
    33f6:	50 d0       	rcall	.+160    	; 0x3498 <__fp_splitA>
    33f8:	e8 f3       	brcs	.-6      	; 0x33f4 <__fp_pscB+0xe>
    33fa:	e8 94       	clt
    33fc:	e0 e0       	ldi	r30, 0x00	; 0
    33fe:	bb 27       	eor	r27, r27
    3400:	9f 57       	subi	r25, 0x7F	; 127
    3402:	f0 f0       	brcs	.+60     	; 0x3440 <__fp_rempio2+0x4a>
    3404:	2a ed       	ldi	r18, 0xDA	; 218
    3406:	3f e0       	ldi	r19, 0x0F	; 15
    3408:	49 ec       	ldi	r20, 0xC9	; 201
    340a:	06 c0       	rjmp	.+12     	; 0x3418 <__fp_rempio2+0x22>
    340c:	ee 0f       	add	r30, r30
    340e:	bb 0f       	add	r27, r27
    3410:	66 1f       	adc	r22, r22
    3412:	77 1f       	adc	r23, r23
    3414:	88 1f       	adc	r24, r24
    3416:	28 f0       	brcs	.+10     	; 0x3422 <__fp_rempio2+0x2c>
    3418:	b2 3a       	cpi	r27, 0xA2	; 162
    341a:	62 07       	cpc	r22, r18
    341c:	73 07       	cpc	r23, r19
    341e:	84 07       	cpc	r24, r20
    3420:	28 f0       	brcs	.+10     	; 0x342c <__fp_rempio2+0x36>
    3422:	b2 5a       	subi	r27, 0xA2	; 162
    3424:	62 0b       	sbc	r22, r18
    3426:	73 0b       	sbc	r23, r19
    3428:	84 0b       	sbc	r24, r20
    342a:	e3 95       	inc	r30
    342c:	9a 95       	dec	r25
    342e:	72 f7       	brpl	.-36     	; 0x340c <__fp_rempio2+0x16>
    3430:	80 38       	cpi	r24, 0x80	; 128
    3432:	30 f4       	brcc	.+12     	; 0x3440 <__fp_rempio2+0x4a>
    3434:	9a 95       	dec	r25
    3436:	bb 0f       	add	r27, r27
    3438:	66 1f       	adc	r22, r22
    343a:	77 1f       	adc	r23, r23
    343c:	88 1f       	adc	r24, r24
    343e:	d2 f7       	brpl	.-12     	; 0x3434 <__fp_rempio2+0x3e>
    3440:	90 48       	sbci	r25, 0x80	; 128
    3442:	06 c1       	rjmp	.+524    	; 0x3650 <__fp_mpack_finite>

00003444 <__fp_round>:
    3444:	09 2e       	mov	r0, r25
    3446:	03 94       	inc	r0
    3448:	00 0c       	add	r0, r0
    344a:	11 f4       	brne	.+4      	; 0x3450 <__fp_round+0xc>
    344c:	88 23       	and	r24, r24
    344e:	52 f0       	brmi	.+20     	; 0x3464 <__fp_round+0x20>
    3450:	bb 0f       	add	r27, r27
    3452:	40 f4       	brcc	.+16     	; 0x3464 <__fp_round+0x20>
    3454:	bf 2b       	or	r27, r31
    3456:	11 f4       	brne	.+4      	; 0x345c <__fp_round+0x18>
    3458:	60 ff       	sbrs	r22, 0
    345a:	04 c0       	rjmp	.+8      	; 0x3464 <__fp_round+0x20>
    345c:	6f 5f       	subi	r22, 0xFF	; 255
    345e:	7f 4f       	sbci	r23, 0xFF	; 255
    3460:	8f 4f       	sbci	r24, 0xFF	; 255
    3462:	9f 4f       	sbci	r25, 0xFF	; 255
    3464:	08 95       	ret

00003466 <__fp_sinus>:
    3466:	ef 93       	push	r30
    3468:	e0 ff       	sbrs	r30, 0
    346a:	06 c0       	rjmp	.+12     	; 0x3478 <__fp_sinus+0x12>
    346c:	a2 ea       	ldi	r26, 0xA2	; 162
    346e:	2a ed       	ldi	r18, 0xDA	; 218
    3470:	3f e0       	ldi	r19, 0x0F	; 15
    3472:	49 ec       	ldi	r20, 0xC9	; 201
    3474:	5f eb       	ldi	r21, 0xBF	; 191
    3476:	cc dd       	rcall	.-1128   	; 0x3010 <__addsf3x>
    3478:	e5 df       	rcall	.-54     	; 0x3444 <__fp_round>
    347a:	0f 90       	pop	r0
    347c:	03 94       	inc	r0
    347e:	01 fc       	sbrc	r0, 1
    3480:	90 58       	subi	r25, 0x80	; 128
    3482:	e9 ed       	ldi	r30, 0xD9	; 217
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	f7 c0       	rjmp	.+494    	; 0x3676 <__fp_powsodd>

00003488 <__fp_split3>:
    3488:	57 fd       	sbrc	r21, 7
    348a:	90 58       	subi	r25, 0x80	; 128
    348c:	44 0f       	add	r20, r20
    348e:	55 1f       	adc	r21, r21
    3490:	59 f0       	breq	.+22     	; 0x34a8 <__fp_splitA+0x10>
    3492:	5f 3f       	cpi	r21, 0xFF	; 255
    3494:	71 f0       	breq	.+28     	; 0x34b2 <__fp_splitA+0x1a>
    3496:	47 95       	ror	r20

00003498 <__fp_splitA>:
    3498:	88 0f       	add	r24, r24
    349a:	97 fb       	bst	r25, 7
    349c:	99 1f       	adc	r25, r25
    349e:	61 f0       	breq	.+24     	; 0x34b8 <__fp_splitA+0x20>
    34a0:	9f 3f       	cpi	r25, 0xFF	; 255
    34a2:	79 f0       	breq	.+30     	; 0x34c2 <__fp_splitA+0x2a>
    34a4:	87 95       	ror	r24
    34a6:	08 95       	ret
    34a8:	12 16       	cp	r1, r18
    34aa:	13 06       	cpc	r1, r19
    34ac:	14 06       	cpc	r1, r20
    34ae:	55 1f       	adc	r21, r21
    34b0:	f2 cf       	rjmp	.-28     	; 0x3496 <__fp_split3+0xe>
    34b2:	46 95       	lsr	r20
    34b4:	f1 df       	rcall	.-30     	; 0x3498 <__fp_splitA>
    34b6:	08 c0       	rjmp	.+16     	; 0x34c8 <__fp_splitA+0x30>
    34b8:	16 16       	cp	r1, r22
    34ba:	17 06       	cpc	r1, r23
    34bc:	18 06       	cpc	r1, r24
    34be:	99 1f       	adc	r25, r25
    34c0:	f1 cf       	rjmp	.-30     	; 0x34a4 <__fp_splitA+0xc>
    34c2:	86 95       	lsr	r24
    34c4:	71 05       	cpc	r23, r1
    34c6:	61 05       	cpc	r22, r1
    34c8:	08 94       	sec
    34ca:	08 95       	ret

000034cc <__fp_zero>:
    34cc:	e8 94       	clt

000034ce <__fp_szero>:
    34ce:	bb 27       	eor	r27, r27
    34d0:	66 27       	eor	r22, r22
    34d2:	77 27       	eor	r23, r23
    34d4:	cb 01       	movw	r24, r22
    34d6:	97 f9       	bld	r25, 7
    34d8:	08 95       	ret

000034da <__gesf2>:
    34da:	2c df       	rcall	.-424    	; 0x3334 <__fp_cmp>
    34dc:	08 f4       	brcc	.+2      	; 0x34e0 <__gesf2+0x6>
    34de:	8f ef       	ldi	r24, 0xFF	; 255
    34e0:	08 95       	ret

000034e2 <inverse>:
    34e2:	9b 01       	movw	r18, r22
    34e4:	ac 01       	movw	r20, r24
    34e6:	60 e0       	ldi	r22, 0x00	; 0
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	80 e8       	ldi	r24, 0x80	; 128
    34ec:	9f e3       	ldi	r25, 0x3F	; 63
    34ee:	4c ce       	rjmp	.-872    	; 0x3188 <__divsf3>

000034f0 <__mulsf3>:
    34f0:	0b d0       	rcall	.+22     	; 0x3508 <__mulsf3x>
    34f2:	a8 cf       	rjmp	.-176    	; 0x3444 <__fp_round>
    34f4:	71 df       	rcall	.-286    	; 0x33d8 <__fp_pscA>
    34f6:	28 f0       	brcs	.+10     	; 0x3502 <__mulsf3+0x12>
    34f8:	76 df       	rcall	.-276    	; 0x33e6 <__fp_pscB>
    34fa:	18 f0       	brcs	.+6      	; 0x3502 <__mulsf3+0x12>
    34fc:	95 23       	and	r25, r21
    34fe:	09 f0       	breq	.+2      	; 0x3502 <__mulsf3+0x12>
    3500:	3d cf       	rjmp	.-390    	; 0x337c <__fp_inf>
    3502:	42 cf       	rjmp	.-380    	; 0x3388 <__fp_nan>
    3504:	11 24       	eor	r1, r1
    3506:	e3 cf       	rjmp	.-58     	; 0x34ce <__fp_szero>

00003508 <__mulsf3x>:
    3508:	bf df       	rcall	.-130    	; 0x3488 <__fp_split3>
    350a:	a0 f3       	brcs	.-24     	; 0x34f4 <__mulsf3+0x4>

0000350c <__mulsf3_pse>:
    350c:	95 9f       	mul	r25, r21
    350e:	d1 f3       	breq	.-12     	; 0x3504 <__mulsf3+0x14>
    3510:	95 0f       	add	r25, r21
    3512:	50 e0       	ldi	r21, 0x00	; 0
    3514:	55 1f       	adc	r21, r21
    3516:	62 9f       	mul	r22, r18
    3518:	f0 01       	movw	r30, r0
    351a:	72 9f       	mul	r23, r18
    351c:	bb 27       	eor	r27, r27
    351e:	f0 0d       	add	r31, r0
    3520:	b1 1d       	adc	r27, r1
    3522:	63 9f       	mul	r22, r19
    3524:	aa 27       	eor	r26, r26
    3526:	f0 0d       	add	r31, r0
    3528:	b1 1d       	adc	r27, r1
    352a:	aa 1f       	adc	r26, r26
    352c:	64 9f       	mul	r22, r20
    352e:	66 27       	eor	r22, r22
    3530:	b0 0d       	add	r27, r0
    3532:	a1 1d       	adc	r26, r1
    3534:	66 1f       	adc	r22, r22
    3536:	82 9f       	mul	r24, r18
    3538:	22 27       	eor	r18, r18
    353a:	b0 0d       	add	r27, r0
    353c:	a1 1d       	adc	r26, r1
    353e:	62 1f       	adc	r22, r18
    3540:	73 9f       	mul	r23, r19
    3542:	b0 0d       	add	r27, r0
    3544:	a1 1d       	adc	r26, r1
    3546:	62 1f       	adc	r22, r18
    3548:	83 9f       	mul	r24, r19
    354a:	a0 0d       	add	r26, r0
    354c:	61 1d       	adc	r22, r1
    354e:	22 1f       	adc	r18, r18
    3550:	74 9f       	mul	r23, r20
    3552:	33 27       	eor	r19, r19
    3554:	a0 0d       	add	r26, r0
    3556:	61 1d       	adc	r22, r1
    3558:	23 1f       	adc	r18, r19
    355a:	84 9f       	mul	r24, r20
    355c:	60 0d       	add	r22, r0
    355e:	21 1d       	adc	r18, r1
    3560:	82 2f       	mov	r24, r18
    3562:	76 2f       	mov	r23, r22
    3564:	6a 2f       	mov	r22, r26
    3566:	11 24       	eor	r1, r1
    3568:	9f 57       	subi	r25, 0x7F	; 127
    356a:	50 40       	sbci	r21, 0x00	; 0
    356c:	8a f0       	brmi	.+34     	; 0x3590 <__mulsf3_pse+0x84>
    356e:	e1 f0       	breq	.+56     	; 0x35a8 <__mulsf3_pse+0x9c>
    3570:	88 23       	and	r24, r24
    3572:	4a f0       	brmi	.+18     	; 0x3586 <__mulsf3_pse+0x7a>
    3574:	ee 0f       	add	r30, r30
    3576:	ff 1f       	adc	r31, r31
    3578:	bb 1f       	adc	r27, r27
    357a:	66 1f       	adc	r22, r22
    357c:	77 1f       	adc	r23, r23
    357e:	88 1f       	adc	r24, r24
    3580:	91 50       	subi	r25, 0x01	; 1
    3582:	50 40       	sbci	r21, 0x00	; 0
    3584:	a9 f7       	brne	.-22     	; 0x3570 <__mulsf3_pse+0x64>
    3586:	9e 3f       	cpi	r25, 0xFE	; 254
    3588:	51 05       	cpc	r21, r1
    358a:	70 f0       	brcs	.+28     	; 0x35a8 <__mulsf3_pse+0x9c>
    358c:	f7 ce       	rjmp	.-530    	; 0x337c <__fp_inf>
    358e:	9f cf       	rjmp	.-194    	; 0x34ce <__fp_szero>
    3590:	5f 3f       	cpi	r21, 0xFF	; 255
    3592:	ec f3       	brlt	.-6      	; 0x358e <__mulsf3_pse+0x82>
    3594:	98 3e       	cpi	r25, 0xE8	; 232
    3596:	dc f3       	brlt	.-10     	; 0x358e <__mulsf3_pse+0x82>
    3598:	86 95       	lsr	r24
    359a:	77 95       	ror	r23
    359c:	67 95       	ror	r22
    359e:	b7 95       	ror	r27
    35a0:	f7 95       	ror	r31
    35a2:	e7 95       	ror	r30
    35a4:	9f 5f       	subi	r25, 0xFF	; 255
    35a6:	c1 f7       	brne	.-16     	; 0x3598 <__mulsf3_pse+0x8c>
    35a8:	fe 2b       	or	r31, r30
    35aa:	88 0f       	add	r24, r24
    35ac:	91 1d       	adc	r25, r1
    35ae:	96 95       	lsr	r25
    35b0:	87 95       	ror	r24
    35b2:	97 f9       	bld	r25, 7
    35b4:	08 95       	ret

000035b6 <sin>:
    35b6:	9f 93       	push	r25
    35b8:	1e df       	rcall	.-452    	; 0x33f6 <__fp_rempio2>
    35ba:	0f 90       	pop	r0
    35bc:	07 fc       	sbrc	r0, 7
    35be:	ee 5f       	subi	r30, 0xFE	; 254
    35c0:	52 cf       	rjmp	.-348    	; 0x3466 <__fp_sinus>
    35c2:	11 f4       	brne	.+4      	; 0x35c8 <sin+0x12>
    35c4:	0e f4       	brtc	.+2      	; 0x35c8 <sin+0x12>
    35c6:	e0 ce       	rjmp	.-576    	; 0x3388 <__fp_nan>
    35c8:	41 c0       	rjmp	.+130    	; 0x364c <__fp_mpack>

000035ca <sqrt>:
    35ca:	66 df       	rcall	.-308    	; 0x3498 <__fp_splitA>
    35cc:	d0 f3       	brcs	.-12     	; 0x35c2 <sin+0xc>
    35ce:	99 23       	and	r25, r25
    35d0:	d9 f3       	breq	.-10     	; 0x35c8 <sin+0x12>
    35d2:	ce f3       	brts	.-14     	; 0x35c6 <sin+0x10>
    35d4:	9f 57       	subi	r25, 0x7F	; 127
    35d6:	55 0b       	sbc	r21, r21
    35d8:	87 ff       	sbrs	r24, 7
    35da:	46 d0       	rcall	.+140    	; 0x3668 <__fp_norm2>
    35dc:	00 24       	eor	r0, r0
    35de:	a0 e6       	ldi	r26, 0x60	; 96
    35e0:	40 ea       	ldi	r20, 0xA0	; 160
    35e2:	90 01       	movw	r18, r0
    35e4:	80 58       	subi	r24, 0x80	; 128
    35e6:	56 95       	lsr	r21
    35e8:	97 95       	ror	r25
    35ea:	28 f4       	brcc	.+10     	; 0x35f6 <sqrt+0x2c>
    35ec:	80 5c       	subi	r24, 0xC0	; 192
    35ee:	66 0f       	add	r22, r22
    35f0:	77 1f       	adc	r23, r23
    35f2:	88 1f       	adc	r24, r24
    35f4:	20 f0       	brcs	.+8      	; 0x35fe <sqrt+0x34>
    35f6:	26 17       	cp	r18, r22
    35f8:	37 07       	cpc	r19, r23
    35fa:	48 07       	cpc	r20, r24
    35fc:	30 f4       	brcc	.+12     	; 0x360a <sqrt+0x40>
    35fe:	62 1b       	sub	r22, r18
    3600:	73 0b       	sbc	r23, r19
    3602:	84 0b       	sbc	r24, r20
    3604:	20 29       	or	r18, r0
    3606:	31 29       	or	r19, r1
    3608:	4a 2b       	or	r20, r26
    360a:	a6 95       	lsr	r26
    360c:	17 94       	ror	r1
    360e:	07 94       	ror	r0
    3610:	20 25       	eor	r18, r0
    3612:	31 25       	eor	r19, r1
    3614:	4a 27       	eor	r20, r26
    3616:	58 f7       	brcc	.-42     	; 0x35ee <sqrt+0x24>
    3618:	66 0f       	add	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	88 1f       	adc	r24, r24
    361e:	20 f0       	brcs	.+8      	; 0x3628 <sqrt+0x5e>
    3620:	26 17       	cp	r18, r22
    3622:	37 07       	cpc	r19, r23
    3624:	48 07       	cpc	r20, r24
    3626:	30 f4       	brcc	.+12     	; 0x3634 <sqrt+0x6a>
    3628:	62 0b       	sbc	r22, r18
    362a:	73 0b       	sbc	r23, r19
    362c:	84 0b       	sbc	r24, r20
    362e:	20 0d       	add	r18, r0
    3630:	31 1d       	adc	r19, r1
    3632:	41 1d       	adc	r20, r1
    3634:	a0 95       	com	r26
    3636:	81 f7       	brne	.-32     	; 0x3618 <sqrt+0x4e>
    3638:	b9 01       	movw	r22, r18
    363a:	84 2f       	mov	r24, r20
    363c:	91 58       	subi	r25, 0x81	; 129
    363e:	88 0f       	add	r24, r24
    3640:	96 95       	lsr	r25
    3642:	87 95       	ror	r24
    3644:	08 95       	ret

00003646 <square>:
    3646:	9b 01       	movw	r18, r22
    3648:	ac 01       	movw	r20, r24
    364a:	52 cf       	rjmp	.-348    	; 0x34f0 <__mulsf3>

0000364c <__fp_mpack>:
    364c:	9f 3f       	cpi	r25, 0xFF	; 255
    364e:	31 f0       	breq	.+12     	; 0x365c <__fp_mpack_finite+0xc>

00003650 <__fp_mpack_finite>:
    3650:	91 50       	subi	r25, 0x01	; 1
    3652:	20 f4       	brcc	.+8      	; 0x365c <__fp_mpack_finite+0xc>
    3654:	87 95       	ror	r24
    3656:	77 95       	ror	r23
    3658:	67 95       	ror	r22
    365a:	b7 95       	ror	r27
    365c:	88 0f       	add	r24, r24
    365e:	91 1d       	adc	r25, r1
    3660:	96 95       	lsr	r25
    3662:	87 95       	ror	r24
    3664:	97 f9       	bld	r25, 7
    3666:	08 95       	ret

00003668 <__fp_norm2>:
    3668:	91 50       	subi	r25, 0x01	; 1
    366a:	50 40       	sbci	r21, 0x00	; 0
    366c:	66 0f       	add	r22, r22
    366e:	77 1f       	adc	r23, r23
    3670:	88 1f       	adc	r24, r24
    3672:	d2 f7       	brpl	.-12     	; 0x3668 <__fp_norm2>
    3674:	08 95       	ret

00003676 <__fp_powsodd>:
    3676:	9f 93       	push	r25
    3678:	8f 93       	push	r24
    367a:	7f 93       	push	r23
    367c:	6f 93       	push	r22
    367e:	ff 93       	push	r31
    3680:	ef 93       	push	r30
    3682:	9b 01       	movw	r18, r22
    3684:	ac 01       	movw	r20, r24
    3686:	34 df       	rcall	.-408    	; 0x34f0 <__mulsf3>
    3688:	ef 91       	pop	r30
    368a:	ff 91       	pop	r31
    368c:	80 de       	rcall	.-768    	; 0x338e <__fp_powser>
    368e:	2f 91       	pop	r18
    3690:	3f 91       	pop	r19
    3692:	4f 91       	pop	r20
    3694:	5f 91       	pop	r21
    3696:	2c cf       	rjmp	.-424    	; 0x34f0 <__mulsf3>

00003698 <__divmodhi4>:
    3698:	97 fb       	bst	r25, 7
    369a:	07 2e       	mov	r0, r23
    369c:	16 f4       	brtc	.+4      	; 0x36a2 <__divmodhi4+0xa>
    369e:	00 94       	com	r0
    36a0:	07 d0       	rcall	.+14     	; 0x36b0 <__divmodhi4_neg1>
    36a2:	77 fd       	sbrc	r23, 7
    36a4:	09 d0       	rcall	.+18     	; 0x36b8 <__divmodhi4_neg2>
    36a6:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <__udivmodhi4>
    36aa:	07 fc       	sbrc	r0, 7
    36ac:	05 d0       	rcall	.+10     	; 0x36b8 <__divmodhi4_neg2>
    36ae:	3e f4       	brtc	.+14     	; 0x36be <__divmodhi4_exit>

000036b0 <__divmodhi4_neg1>:
    36b0:	90 95       	com	r25
    36b2:	81 95       	neg	r24
    36b4:	9f 4f       	sbci	r25, 0xFF	; 255
    36b6:	08 95       	ret

000036b8 <__divmodhi4_neg2>:
    36b8:	70 95       	com	r23
    36ba:	61 95       	neg	r22
    36bc:	7f 4f       	sbci	r23, 0xFF	; 255

000036be <__divmodhi4_exit>:
    36be:	08 95       	ret

000036c0 <__udivmodhi4>:
    36c0:	aa 1b       	sub	r26, r26
    36c2:	bb 1b       	sub	r27, r27
    36c4:	51 e1       	ldi	r21, 0x11	; 17
    36c6:	07 c0       	rjmp	.+14     	; 0x36d6 <__udivmodhi4_ep>

000036c8 <__udivmodhi4_loop>:
    36c8:	aa 1f       	adc	r26, r26
    36ca:	bb 1f       	adc	r27, r27
    36cc:	a6 17       	cp	r26, r22
    36ce:	b7 07       	cpc	r27, r23
    36d0:	10 f0       	brcs	.+4      	; 0x36d6 <__udivmodhi4_ep>
    36d2:	a6 1b       	sub	r26, r22
    36d4:	b7 0b       	sbc	r27, r23

000036d6 <__udivmodhi4_ep>:
    36d6:	88 1f       	adc	r24, r24
    36d8:	99 1f       	adc	r25, r25
    36da:	5a 95       	dec	r21
    36dc:	a9 f7       	brne	.-22     	; 0x36c8 <__udivmodhi4_loop>
    36de:	80 95       	com	r24
    36e0:	90 95       	com	r25
    36e2:	bc 01       	movw	r22, r24
    36e4:	cd 01       	movw	r24, r26
    36e6:	08 95       	ret

000036e8 <_exit>:
    36e8:	f8 94       	cli

000036ea <__stop_program>:
    36ea:	ff cf       	rjmp	.-2      	; 0x36ea <__stop_program>
