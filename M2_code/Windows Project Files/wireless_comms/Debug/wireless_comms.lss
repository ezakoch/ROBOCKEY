
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000340  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000340  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003d4  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  000003d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  00000aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000b37  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000000b8  00000000  00000000  00000b66  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000006cc  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000372  00000000  00000000  000012ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000538  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000017c  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000026f  00000000  00000000  00001d10  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000584  00000000  00000000  00001f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000088  00000000  00000000  00002503  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  7c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  80:	0c 94 cb 00 	jmp	0x196	; 0x196 <__vector_32>
  84:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  88:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  8c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  90:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  94:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  98:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  9c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a0:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  a8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	a4 30       	cpi	r26, 0x04	; 4
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 96 00 	call	0x12c	; 0x12c <main>
  cc:	0c 94 9e 01 	jmp	0x33c	; 0x33c <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <set_timer3>:
}

//Timer 3 Initialization
void set_timer3(void)
{
	OCR3A = 7812;
  d4:	84 e8       	ldi	r24, 0x84	; 132
  d6:	9e e1       	ldi	r25, 0x1E	; 30
  d8:	90 93 99 00 	sts	0x0099, r25
  dc:	80 93 98 00 	sts	0x0098, r24
	
	//Set C6 as output (debugging)
	set(DDRC,6);
  e0:	3e 9a       	sbi	0x07, 6	; 7

	//Set to UP to OCR1A
	clear(TCCR3B,WGM33);
  e2:	e1 e9       	ldi	r30, 0x91	; 145
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	80 81       	ld	r24, Z
  e8:	8f 7e       	andi	r24, 0xEF	; 239
  ea:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
  ec:	80 81       	ld	r24, Z
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
  f2:	a0 e9       	ldi	r26, 0x90	; 144
  f4:	b0 e0       	ldi	r27, 0x00	; 0
  f6:	8c 91       	ld	r24, X
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	8c 93       	st	X, r24
	clear(TCCR3A,WGM30);
  fc:	8c 91       	ld	r24, X
  fe:	8e 7f       	andi	r24, 0xFE	; 254
 100:	8c 93       	st	X, r24

	//Set to toggle (debugging)
	clear(TCCR3A,COM3A1);
 102:	8c 91       	ld	r24, X
 104:	8f 77       	andi	r24, 0x7F	; 127
 106:	8c 93       	st	X, r24
	set(TCCR3A,COM3A0);
 108:	8c 91       	ld	r24, X
 10a:	80 64       	ori	r24, 0x40	; 64
 10c:	8c 93       	st	X, r24
	
	//Demask OCR3A interrupt
	set(TIMSK3,OCIE3A);
 10e:	a1 e7       	ldi	r26, 0x71	; 113
 110:	b0 e0       	ldi	r27, 0x00	; 0
 112:	8c 91       	ld	r24, X
 114:	82 60       	ori	r24, 0x02	; 2
 116:	8c 93       	st	X, r24

	//Set timer prescaler to /1024
	set(TCCR3B,CS32);
 118:	80 81       	ld	r24, Z
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
 11e:	80 81       	ld	r24, Z
 120:	8d 7f       	andi	r24, 0xFD	; 253
 122:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
 124:	80 81       	ld	r24, Z
 126:	81 60       	ori	r24, 0x01	; 1
 128:	80 83       	st	Z, r24
 12a:	08 95       	ret

0000012c <main>:
	//Variable declaration
	char x = 0;
	char y = 0;
	
	//Set the clock system prescaler
	m_clockdivide(N_CLOCK);
 12c:	e1 e6       	ldi	r30, 0x61	; 97
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	80 83       	st	Z, r24
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 83       	st	Z, r24

	//Initialize bus
	m_bus_init();
 138:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <m_bus_init>
	
	set_timer3();
 13c:	0e 94 6a 00 	call	0xd4	; 0xd4 <set_timer3>
	
	//Open the channel
	m_rf_open(CHANNEL,REC_ADDRESS_AUX,PACKET_LENGTH);
 140:	42 e0       	ldi	r20, 0x02	; 2
 142:	69 e4       	ldi	r22, 0x49	; 73
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <m_rf_open>
	
	//Turn off the LEDs
	m_green(ON);
 14a:	6a 9a       	sbi	0x0d, 2	; 13
 14c:	72 98       	cbi	0x0e, 2	; 14
	m_red(OFF);
 14e:	6e 9a       	sbi	0x0d, 6	; 13
 150:	76 9a       	sbi	0x0e, 6	; 14
	
	//Enable interruptions
	sei();
 152:	78 94       	sei
//Main function
int main(void)
{
	//Variable declaration
	char x = 0;
	char y = 0;
 154:	f1 2c       	mov	r15, r1
	while (1)
	{
		//Receiving commands
		if (flag_timer == 1)
		{
			buffer_send[0] = x;
 156:	c0 e0       	ldi	r28, 0x00	; 0
 158:	d1 e0       	ldi	r29, 0x01	; 1
			buffer_send[1]= y;
 15a:	01 e0       	ldi	r16, 0x01	; 1
 15c:	11 e0       	ldi	r17, 0x01	; 1
	
	//Main loop
	while (1)
	{
		//Receiving commands
		if (flag_timer == 1)
 15e:	80 91 02 01 	lds	r24, 0x0102
 162:	90 91 03 01 	lds	r25, 0x0103
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	d1 f7       	brne	.-12     	; 0x15e <main+0x32>
		{
			buffer_send[0] = x;
 16a:	f8 82       	st	Y, r15
			buffer_send[1]= y;
 16c:	f8 01       	movw	r30, r16
 16e:	f0 82       	st	Z, r15
			m_rf_send(SEN_ADDRESS,buffer_send,PACKET_LENGTH);
 170:	42 e0       	ldi	r20, 0x02	; 2
 172:	be 01       	movw	r22, r28
 174:	87 e4       	ldi	r24, 0x47	; 71
 176:	0e 94 48 01 	call	0x290	; 0x290 <m_rf_send>
				
			//Move to next number
			x++;
			y++;
 17a:	f3 94       	inc	r15
				
			//Reset flag
			flag_timer = 0;
 17c:	10 92 03 01 	sts	0x0103, r1
 180:	10 92 02 01 	sts	0x0102, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	8f e4       	ldi	r24, 0x4F	; 79
 186:	93 ec       	ldi	r25, 0xC3	; 195
 188:	01 97       	sbiw	r24, 0x01	; 1
 18a:	f1 f7       	brne	.-4      	; 0x188 <main+0x5c>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <main+0x62>
 18e:	00 00       	nop
			m_wait(200);
			m_red(OFF);
 190:	6e 9a       	sbi	0x0d, 6	; 13
 192:	76 9a       	sbi	0x0e, 6	; 14
 194:	e4 cf       	rjmp	.-56     	; 0x15e <main+0x32>

00000196 <__vector_32>:
	clear(TCCR3B,CS31);
	set(TCCR3B,CS30);
}

ISR(TIMER3_COMPA_vect)
{
 196:	1f 92       	push	r1
 198:	0f 92       	push	r0
 19a:	0f b6       	in	r0, 0x3f	; 63
 19c:	0f 92       	push	r0
 19e:	11 24       	eor	r1, r1
 1a0:	8f 93       	push	r24
 1a2:	9f 93       	push	r25
	m_red(ON);
 1a4:	6e 9a       	sbi	0x0d, 6	; 13
 1a6:	76 98       	cbi	0x0e, 6	; 14
	flag_timer = 1;
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	90 93 03 01 	sts	0x0103, r25
 1b0:	80 93 02 01 	sts	0x0102, r24
}
 1b4:	9f 91       	pop	r25
 1b6:	8f 91       	pop	r24
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
 1c2:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
 1c4:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
 1c6:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
 1c8:	8c e0       	ldi	r24, 0x0C	; 12
 1ca:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
 1ce:	e9 e6       	ldi	r30, 0x69	; 105
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	80 62       	ori	r24, 0x20	; 32
 1d6:	80 83       	st	Z, r24
 1d8:	80 81       	ld	r24, Z
 1da:	8f 7e       	andi	r24, 0xEF	; 239
 1dc:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
 1de:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
 1e0:	78 94       	sei
 1e2:	08 95       	ret

000001e4 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	18 2f       	mov	r17, r24
 1ec:	d6 2f       	mov	r29, r22
 1ee:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
 1f0:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 1f4:	94 ea       	ldi	r25, 0xA4	; 164
 1f6:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 1fa:	ec eb       	ldi	r30, 0xBC	; 188
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	90 81       	ld	r25, Z
 200:	99 23       	and	r25, r25
 202:	ec f7       	brge	.-6      	; 0x1fe <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 204:	90 e5       	ldi	r25, 0x50	; 80
 206:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 20a:	94 e8       	ldi	r25, 0x84	; 132
 20c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 210:	ec eb       	ldi	r30, 0xBC	; 188
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	90 81       	ld	r25, Z
 216:	99 23       	and	r25, r25
 218:	ec f7       	brge	.-6      	; 0x214 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 21a:	90 91 b9 00 	lds	r25, 0x00B9
 21e:	98 7f       	andi	r25, 0xF8	; 248
 220:	90 32       	cpi	r25, 0x20	; 32
 222:	29 f4       	brne	.+10     	; 0x22e <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 224:	84 e9       	ldi	r24, 0x94	; 148
 226:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	2d c0       	rjmp	.+90     	; 0x288 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 234:	84 e8       	ldi	r24, 0x84	; 132
 236:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 23a:	ec eb       	ldi	r30, 0xBC	; 188
 23c:	f0 e0       	ldi	r31, 0x00	; 0
 23e:	90 81       	ld	r25, Z
 240:	99 23       	and	r25, r25
 242:	ec f7       	brge	.-6      	; 0x23e <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
 244:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
 248:	84 e8       	ldi	r24, 0x84	; 132
 24a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 24e:	ec eb       	ldi	r30, 0xBC	; 188
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	88 23       	and	r24, r24
 256:	ec f7       	brge	.-6      	; 0x252 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
 258:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
 25c:	84 e8       	ldi	r24, 0x84	; 132
 25e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 262:	ec eb       	ldi	r30, 0xBC	; 188
 264:	f0 e0       	ldi	r31, 0x00	; 0
 266:	80 81       	ld	r24, Z
 268:	88 23       	and	r24, r24
 26a:	ec f7       	brge	.-6      	; 0x266 <m_rf_open+0x82>
	
	TWDR = packet_length;
 26c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
 270:	84 e8       	ldi	r24, 0x84	; 132
 272:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 276:	ec eb       	ldi	r30, 0xBC	; 188
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	ec f7       	brge	.-6      	; 0x27a <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 280:	84 e9       	ldi	r24, 0x94	; 148
 282:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
 286:	81 e0       	ldi	r24, 0x01	; 1
}
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	08 95       	ret

00000290 <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
 294:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
 296:	94 ea       	ldi	r25, 0xA4	; 164
 298:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 29c:	ec eb       	ldi	r30, 0xBC	; 188
 29e:	f0 e0       	ldi	r31, 0x00	; 0
 2a0:	90 81       	ld	r25, Z
 2a2:	99 23       	and	r25, r25
 2a4:	ec f7       	brge	.-6      	; 0x2a0 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
 2a6:	90 e5       	ldi	r25, 0x50	; 80
 2a8:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 2ac:	94 e8       	ldi	r25, 0x84	; 132
 2ae:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 2b2:	ec eb       	ldi	r30, 0xBC	; 188
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	90 81       	ld	r25, Z
 2b8:	99 23       	and	r25, r25
 2ba:	ec f7       	brge	.-6      	; 0x2b6 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
 2bc:	90 91 b9 00 	lds	r25, 0x00B9
 2c0:	98 7f       	andi	r25, 0xF8	; 248
 2c2:	90 32       	cpi	r25, 0x20	; 32
 2c4:	31 f4       	brne	.+12     	; 0x2d2 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
 2c6:	84 e9       	ldi	r24, 0x94	; 148
 2c8:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
 2cc:	78 94       	sei
		return 0;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	32 c0       	rjmp	.+100    	; 0x336 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
 2d2:	93 e0       	ldi	r25, 0x03	; 3
 2d4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
 2d8:	94 e8       	ldi	r25, 0x84	; 132
 2da:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
 2de:	ec eb       	ldi	r30, 0xBC	; 188
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	90 81       	ld	r25, Z
 2e4:	99 23       	and	r25, r25
 2e6:	ec f7       	brge	.-6      	; 0x2e2 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
 2e8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
 2ec:	84 e8       	ldi	r24, 0x84	; 132
 2ee:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
 2f2:	ec eb       	ldi	r30, 0xBC	; 188
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	80 81       	ld	r24, Z
 2f8:	88 23       	and	r24, r24
 2fa:	ec f7       	brge	.-6      	; 0x2f6 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
 2fc:	24 2f       	mov	r18, r20
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	12 16       	cp	r1, r18
 302:	13 06       	cpc	r1, r19
 304:	9c f4       	brge	.+38     	; 0x32c <m_rf_send+0x9c>
 306:	a6 2f       	mov	r26, r22
 308:	b7 2f       	mov	r27, r23
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
 30e:	cb eb       	ldi	r28, 0xBB	; 187
 310:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
 312:	ec eb       	ldi	r30, 0xBC	; 188
 314:	f0 e0       	ldi	r31, 0x00	; 0
 316:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
 318:	4d 91       	ld	r20, X+
 31a:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
 31c:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
 31e:	40 81       	ld	r20, Z
 320:	44 23       	and	r20, r20
 322:	ec f7       	brge	.-6      	; 0x31e <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
 324:	01 96       	adiw	r24, 0x01	; 1
 326:	82 17       	cp	r24, r18
 328:	93 07       	cpc	r25, r19
 32a:	b4 f3       	brlt	.-20     	; 0x318 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
 32c:	84 e9       	ldi	r24, 0x94	; 148
 32e:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
 332:	78 94       	sei
	
	return 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
}
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	08 95       	ret

0000033c <_exit>:
 33c:	f8 94       	cli

0000033e <__stop_program>:
 33e:	ff cf       	rjmp	.-2      	; 0x33e <__stop_program>
