
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00003514  000035a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  0080010e  0080010e  000035b6  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  000035b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007e02  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000310  00000000  00000000  00007e31  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003156  00000000  00000000  00008141  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bc4  00000000  00000000  0000b297  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000162c  00000000  00000000  0000be5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000938  00000000  00000000  0000d488  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c08  00000000  00000000  0000ddc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003e03  00000000  00000000  0000e9c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000328  00000000  00000000  000127cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 81 12 	jmp	0x2502	; 0x2502 <__vector_3>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 7b 13 	jmp	0x26f6	; 0x26f6 <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 b9 13 	jmp	0x2772	; 0x2772 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 6d 12 	jmp	0x24da	; 0x24da <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e4 e1       	ldi	r30, 0x14	; 20
     1be:	f5 e3       	ldi	r31, 0x35	; 53
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ae 30       	cpi	r26, 0x0E	; 14
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ae e0       	ldi	r26, 0x0E	; 14
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	ad 39       	cpi	r26, 0x9D	; 157
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 21 0d 	call	0x1a42	; 0x1a42 <main>
     1e0:	0c 94 88 1a 	jmp	0x3510	; 0x3510 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <turnOnBlueLED>:



void turnOnBlueLED(void)
{
	set(PORTD,5);
     1e8:	5d 9a       	sbi	0x0b, 5	; 11
     1ea:	08 95       	ret

000001ec <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
     1ec:	5d 98       	cbi	0x0b, 5	; 11
     1ee:	08 95       	ret

000001f0 <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
     1f0:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
     1f2:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
     1f4:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
     1f6:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
     1f8:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
     1fa:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
     1fc:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
     1fe:	5d 98       	cbi	0x0b, 5	; 11
     200:	08 95       	ret

00000202 <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
     202:	ea e7       	ldi	r30, 0x7A	; 122
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	20 81       	ld	r18, Z
     208:	2f 77       	andi	r18, 0x7F	; 127
     20a:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
     20c:	83 30       	cpi	r24, 0x03	; 3
     20e:	91 05       	cpc	r25, r1
     210:	09 f4       	brne	.+2      	; 0x214 <get_analog_val+0x12>
     212:	49 c0       	rjmp	.+146    	; 0x2a6 <get_analog_val+0xa4>
     214:	3c f4       	brge	.+14     	; 0x224 <get_analog_val+0x22>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	19 f1       	breq	.+70     	; 0x262 <get_analog_val+0x60>
     21c:	9c f5       	brge	.+102    	; 0x284 <get_analog_val+0x82>
     21e:	89 2b       	or	r24, r25
     220:	79 f0       	breq	.+30     	; 0x240 <get_analog_val+0x3e>
     222:	95 c0       	rjmp	.+298    	; 0x34e <get_analog_val+0x14c>
     224:	85 30       	cpi	r24, 0x05	; 5
     226:	91 05       	cpc	r25, r1
     228:	09 f4       	brne	.+2      	; 0x22c <get_analog_val+0x2a>
     22a:	5f c0       	rjmp	.+190    	; 0x2ea <get_analog_val+0xe8>
     22c:	0c f4       	brge	.+2      	; 0x230 <get_analog_val+0x2e>
     22e:	4c c0       	rjmp	.+152    	; 0x2c8 <get_analog_val+0xc6>
     230:	86 30       	cpi	r24, 0x06	; 6
     232:	91 05       	cpc	r25, r1
     234:	09 f4       	brne	.+2      	; 0x238 <get_analog_val+0x36>
     236:	6a c0       	rjmp	.+212    	; 0x30c <get_analog_val+0x10a>
     238:	07 97       	sbiw	r24, 0x07	; 7
     23a:	09 f0       	breq	.+2      	; 0x23e <get_analog_val+0x3c>
     23c:	88 c0       	rjmp	.+272    	; 0x34e <get_analog_val+0x14c>
     23e:	77 c0       	rjmp	.+238    	; 0x32e <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
     240:	eb e7       	ldi	r30, 0x7B	; 123
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8f 7d       	andi	r24, 0xDF	; 223
     248:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8b 7f       	andi	r24, 0xFB	; 251
     252:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     254:	80 81       	ld	r24, Z
     256:	8d 7f       	andi	r24, 0xFD	; 253
     258:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     25a:	80 81       	ld	r24, Z
     25c:	8e 7f       	andi	r24, 0xFE	; 254
     25e:	80 83       	st	Z, r24
            break;
     260:	76 c0       	rjmp	.+236    	; 0x34e <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
     262:	eb e7       	ldi	r30, 0x7B	; 123
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	8b 7f       	andi	r24, 0xFB	; 251
     274:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     276:	80 81       	ld	r24, Z
     278:	8d 7f       	andi	r24, 0xFD	; 253
     27a:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     27c:	80 81       	ld	r24, Z
     27e:	81 60       	ori	r24, 0x01	; 1
     280:	80 83       	st	Z, r24
            break;
     282:	65 c0       	rjmp	.+202    	; 0x34e <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
     284:	eb e7       	ldi	r30, 0x7B	; 123
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	8f 7d       	andi	r24, 0xDF	; 223
     28c:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     28e:	ec e7       	ldi	r30, 0x7C	; 124
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	84 60       	ori	r24, 0x04	; 4
     296:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     298:	80 81       	ld	r24, Z
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     29e:	80 81       	ld	r24, Z
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	80 83       	st	Z, r24
            break;
     2a4:	54 c0       	rjmp	.+168    	; 0x34e <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
     2a6:	eb e7       	ldi	r30, 0x7B	; 123
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 7d       	andi	r24, 0xDF	; 223
     2ae:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2b0:	ec e7       	ldi	r30, 0x7C	; 124
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	84 60       	ori	r24, 0x04	; 4
     2b8:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     2ba:	80 81       	ld	r24, Z
     2bc:	8d 7f       	andi	r24, 0xFD	; 253
     2be:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     2c0:	80 81       	ld	r24, Z
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
            break;
     2c6:	43 c0       	rjmp	.+134    	; 0x34e <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
     2c8:	eb e7       	ldi	r30, 0x7B	; 123
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2d2:	ec e7       	ldi	r30, 0x7C	; 124
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2dc:	80 81       	ld	r24, Z
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     2e2:	80 81       	ld	r24, Z
     2e4:	8e 7f       	andi	r24, 0xFE	; 254
     2e6:	80 83       	st	Z, r24
            break;
     2e8:	32 c0       	rjmp	.+100    	; 0x34e <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
     2ea:	eb e7       	ldi	r30, 0x7B	; 123
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8f 7d       	andi	r24, 0xDF	; 223
     2f2:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2f4:	ec e7       	ldi	r30, 0x7C	; 124
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	84 60       	ori	r24, 0x04	; 4
     2fc:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2fe:	80 81       	ld	r24, Z
     300:	82 60       	ori	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     304:	80 81       	ld	r24, Z
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 83       	st	Z, r24
            break;
     30a:	21 c0       	rjmp	.+66     	; 0x34e <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
     30c:	eb e7       	ldi	r30, 0x7B	; 123
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	80 62       	ori	r24, 0x20	; 32
     314:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     316:	ec e7       	ldi	r30, 0x7C	; 124
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	8b 7f       	andi	r24, 0xFB	; 251
     31e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     320:	80 81       	ld	r24, Z
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     326:	80 81       	ld	r24, Z
     328:	8e 7f       	andi	r24, 0xFE	; 254
     32a:	80 83       	st	Z, r24
            break;
     32c:	10 c0       	rjmp	.+32     	; 0x34e <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
     32e:	eb e7       	ldi	r30, 0x7B	; 123
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	80 62       	ori	r24, 0x20	; 32
     336:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     338:	ec e7       	ldi	r30, 0x7C	; 124
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 7f       	andi	r24, 0xFB	; 251
     340:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     348:	80 81       	ld	r24, Z
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
     34e:	ea e7       	ldi	r30, 0x7A	; 122
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	80 68       	ori	r24, 0x80	; 128
     356:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
     358:	80 81       	ld	r24, Z
     35a:	80 64       	ori	r24, 0x40	; 64
     35c:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
     35e:	80 81       	ld	r24, Z
     360:	80 61       	ori	r24, 0x10	; 16
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
     366:	83 ec       	ldi	r24, 0xC3	; 195
     368:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
     36c:	e3 ec       	ldi	r30, 0xC3	; 195
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8d 7f       	andi	r24, 0xFD	; 253
     374:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
     376:	80 81       	ld	r24, Z
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
     37c:	e2 e7       	ldi	r30, 0x72	; 114
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	84 60       	ori	r24, 0x04	; 4
     384:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
     386:	e1 ec       	ldi	r30, 0xC1	; 193
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 60       	ori	r24, 0x08	; 8
     38e:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
     390:	80 81       	ld	r24, Z
     392:	84 60       	ori	r24, 0x04	; 4
     394:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
     396:	80 81       	ld	r24, Z
     398:	8d 7f       	andi	r24, 0xFD	; 253
     39a:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
     39c:	80 81       	ld	r24, Z
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	80 83       	st	Z, r24
     3a2:	08 95       	ret

000003a4 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
     3a4:	ec e7       	ldi	r30, 0x7C	; 124
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
     3ae:	80 81       	ld	r24, Z
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
     3b4:	aa e7       	ldi	r26, 0x7A	; 122
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	8c 91       	ld	r24, X
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
     3be:	8c 91       	ld	r24, X
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
     3c4:	8c 91       	ld	r24, X
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
     3ca:	ee e7       	ldi	r30, 0x7E	; 126
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
     3d4:	80 81       	ld	r24, Z
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
     3da:	80 81       	ld	r24, Z
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
     3e0:	80 81       	ld	r24, Z
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
     3e6:	80 81       	ld	r24, Z
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
     3ec:	80 81       	ld	r24, Z
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
     3f2:	ed e7       	ldi	r30, 0x7D	; 125
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
     3fc:	80 81       	ld	r24, Z
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
     402:	8c 91       	ld	r24, X
     404:	80 62       	ori	r24, 0x20	; 32
     406:	8c 93       	st	X, r24
     408:	08 95       	ret

0000040a <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
     40a:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
     40c:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
     40e:	88 e8       	ldi	r24, 0x88	; 136
     410:	93 e1       	ldi	r25, 0x13	; 19
     412:	90 93 89 00 	sts	0x0089, r25
     416:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
     41a:	10 92 8b 00 	sts	0x008B, r1
     41e:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
     422:	10 92 8d 00 	sts	0x008D, r1
     426:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
     42a:	a1 e8       	ldi	r26, 0x81	; 129
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	8c 91       	ld	r24, X
     430:	80 61       	ori	r24, 0x10	; 16
     432:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
     434:	8c 91       	ld	r24, X
     436:	88 60       	ori	r24, 0x08	; 8
     438:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
     43a:	e0 e8       	ldi	r30, 0x80	; 128
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	82 60       	ori	r24, 0x02	; 2
     442:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
     444:	80 81       	ld	r24, Z
     446:	81 60       	ori	r24, 0x01	; 1
     448:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
     44a:	80 81       	ld	r24, Z
     44c:	80 62       	ori	r24, 0x20	; 32
     44e:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
     450:	80 81       	ld	r24, Z
     452:	8f 7e       	andi	r24, 0xEF	; 239
     454:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
     456:	80 81       	ld	r24, Z
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
     45c:	80 81       	ld	r24, Z
     45e:	8b 7f       	andi	r24, 0xFB	; 251
     460:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
     462:	8c 91       	ld	r24, X
     464:	8b 7f       	andi	r24, 0xFB	; 251
     466:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
     468:	8c 91       	ld	r24, X
     46a:	8d 7f       	andi	r24, 0xFD	; 253
     46c:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
     46e:	8c 91       	ld	r24, X
     470:	81 60       	ori	r24, 0x01	; 1
     472:	8c 93       	st	X, r24
     474:	08 95       	ret

00000476 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     476:	2f 92       	push	r2
     478:	3f 92       	push	r3
     47a:	4f 92       	push	r4
     47c:	5f 92       	push	r5
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	28 97       	sbiw	r28, 0x08	; 8
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	98 86       	std	Y+8, r9	; 0x08
     4ac:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     4ae:	10 92 0f 01 	sts	0x010F, r1
     4b2:	10 92 0e 01 	sts	0x010E, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     4b6:	8f 3f       	cpi	r24, 0xFF	; 255
     4b8:	e3 e0       	ldi	r30, 0x03	; 3
     4ba:	9e 07       	cpc	r25, r30
     4bc:	01 f1       	breq	.+64     	; 0x4fe <localize+0x88>
     4be:	6f 3f       	cpi	r22, 0xFF	; 255
     4c0:	f3 e0       	ldi	r31, 0x03	; 3
     4c2:	7f 07       	cpc	r23, r31
     4c4:	e1 f0       	breq	.+56     	; 0x4fe <localize+0x88>
     4c6:	4f 3f       	cpi	r20, 0xFF	; 255
     4c8:	e3 e0       	ldi	r30, 0x03	; 3
     4ca:	5e 07       	cpc	r21, r30
     4cc:	c1 f0       	breq	.+48     	; 0x4fe <localize+0x88>
     4ce:	2f 3f       	cpi	r18, 0xFF	; 255
     4d0:	f3 e0       	ldi	r31, 0x03	; 3
     4d2:	3f 07       	cpc	r19, r31
     4d4:	a1 f0       	breq	.+40     	; 0x4fe <localize+0x88>
     4d6:	0f 3f       	cpi	r16, 0xFF	; 255
     4d8:	e3 e0       	ldi	r30, 0x03	; 3
     4da:	1e 07       	cpc	r17, r30
     4dc:	81 f0       	breq	.+32     	; 0x4fe <localize+0x88>
     4de:	ff ef       	ldi	r31, 0xFF	; 255
     4e0:	ef 16       	cp	r14, r31
     4e2:	f3 e0       	ldi	r31, 0x03	; 3
     4e4:	ff 06       	cpc	r15, r31
     4e6:	59 f0       	breq	.+22     	; 0x4fe <localize+0x88>
     4e8:	ef ef       	ldi	r30, 0xFF	; 255
     4ea:	ce 16       	cp	r12, r30
     4ec:	e3 e0       	ldi	r30, 0x03	; 3
     4ee:	de 06       	cpc	r13, r30
     4f0:	31 f0       	breq	.+12     	; 0x4fe <localize+0x88>
     4f2:	ff ef       	ldi	r31, 0xFF	; 255
     4f4:	af 16       	cp	r10, r31
     4f6:	f3 e0       	ldi	r31, 0x03	; 3
     4f8:	bf 06       	cpc	r11, r31
     4fa:	09 f0       	breq	.+2      	; 0x4fe <localize+0x88>
     4fc:	b0 c6       	rjmp	.+3424   	; 0x125e <__stack+0x75f>
        flag_no_good_stars = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	90 93 0f 01 	sts	0x010F, r25
     506:	80 93 0e 01 	sts	0x010E, r24
     50a:	d1 c3       	rjmp	.+1954   	; 0xcae <__stack+0x1af>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     50c:	f8 01       	movw	r30, r16
     50e:	a0 80       	ld	r10, Z
     510:	b1 80       	ldd	r11, Z+1	; 0x01
     512:	c2 80       	ldd	r12, Z+2	; 0x02
     514:	d3 80       	ldd	r13, Z+3	; 0x03
     516:	0c 5f       	subi	r16, 0xFC	; 252
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	26 2d       	mov	r18, r6
     51c:	37 2d       	mov	r19, r7
     51e:	48 2d       	mov	r20, r8
     520:	59 2d       	mov	r21, r9
     522:	6a 2d       	mov	r22, r10
     524:	7b 2d       	mov	r23, r11
     526:	8c 2d       	mov	r24, r12
     528:	9d 2d       	mov	r25, r13
     52a:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
     52e:	18 16       	cp	r1, r24
     530:	34 f4       	brge	.+12     	; 0x53e <localize+0xc8>
     532:	fa 82       	std	Y+2, r15	; 0x02
     534:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     536:	6a 2c       	mov	r6, r10
     538:	7b 2c       	mov	r7, r11
     53a:	8c 2c       	mov	r8, r12
     53c:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     53e:	22 2d       	mov	r18, r2
     540:	33 2d       	mov	r19, r3
     542:	44 2d       	mov	r20, r4
     544:	55 2d       	mov	r21, r5
     546:	6a 2d       	mov	r22, r10
     548:	7b 2d       	mov	r23, r11
     54a:	8c 2d       	mov	r24, r12
     54c:	9d 2d       	mov	r25, r13
     54e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
     552:	88 23       	and	r24, r24
     554:	34 f4       	brge	.+12     	; 0x562 <localize+0xec>
     556:	fe 82       	std	Y+6, r15	; 0x06
     558:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     55a:	2a 2c       	mov	r2, r10
     55c:	3b 2c       	mov	r3, r11
     55e:	4c 2c       	mov	r4, r12
     560:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     562:	ff ef       	ldi	r31, 0xFF	; 255
     564:	ef 1a       	sub	r14, r31
     566:	ff 0a       	sbc	r15, r31
     568:	86 e0       	ldi	r24, 0x06	; 6
     56a:	e8 16       	cp	r14, r24
     56c:	f1 04       	cpc	r15, r1
     56e:	71 f6       	brne	.-100    	; 0x50c <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	e2 30       	cpi	r30, 0x02	; 2
     576:	f1 05       	cpc	r31, r1
     578:	09 f4       	brne	.+2      	; 0x57c <localize+0x106>
     57a:	3e c1       	rjmp	.+636    	; 0x7f8 <localize+0x382>
     57c:	34 f4       	brge	.+12     	; 0x58a <localize+0x114>
     57e:	30 97       	sbiw	r30, 0x00	; 0
     580:	81 f0       	breq	.+32     	; 0x5a2 <localize+0x12c>
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	09 f0       	breq	.+2      	; 0x588 <localize+0x112>
     586:	8d c3       	rjmp	.+1818   	; 0xca2 <__stack+0x1a3>
     588:	a2 c0       	rjmp	.+324    	; 0x6ce <localize+0x258>
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	84 30       	cpi	r24, 0x04	; 4
     590:	91 05       	cpc	r25, r1
     592:	09 f4       	brne	.+2      	; 0x596 <localize+0x120>
     594:	5b c2       	rjmp	.+1206   	; 0xa4c <localize+0x5d6>
     596:	0c f4       	brge	.+2      	; 0x59a <localize+0x124>
     598:	c4 c1       	rjmp	.+904    	; 0x922 <localize+0x4ac>
     59a:	05 97       	sbiw	r24, 0x05	; 5
     59c:	09 f0       	breq	.+2      	; 0x5a0 <localize+0x12a>
     59e:	81 c3       	rjmp	.+1794   	; 0xca2 <__stack+0x1a3>
     5a0:	ea c2       	rjmp	.+1492   	; 0xb76 <__stack+0x77>
            case 0:
                switch (min_id) {
     5a2:	ed 81       	ldd	r30, Y+5	; 0x05
     5a4:	fe 81       	ldd	r31, Y+6	; 0x06
     5a6:	e2 30       	cpi	r30, 0x02	; 2
     5a8:	f1 05       	cpc	r31, r1
     5aa:	39 f1       	breq	.+78     	; 0x5fa <localize+0x184>
     5ac:	24 f4       	brge	.+8      	; 0x5b6 <localize+0x140>
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <localize+0x13e>
     5b2:	6e c0       	rjmp	.+220    	; 0x690 <localize+0x21a>
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <localize+0x152>
     5b6:	8d 81       	ldd	r24, Y+5	; 0x05
     5b8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	91 05       	cpc	r25, r1
     5be:	b1 f1       	breq	.+108    	; 0x62c <localize+0x1b6>
     5c0:	04 97       	sbiw	r24, 0x04	; 4
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <localize+0x150>
     5c4:	65 c0       	rjmp	.+202    	; 0x690 <localize+0x21a>
     5c6:	4b c0       	rjmp	.+150    	; 0x65e <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     5c8:	84 e4       	ldi	r24, 0x44	; 68
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 90 01 	sts	0x0190, r25
     5d0:	80 93 8f 01 	sts	0x018F, r24
     5d4:	8c e3       	ldi	r24, 0x3C	; 60
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	90 93 76 01 	sts	0x0176, r25
     5dc:	80 93 75 01 	sts	0x0175, r24
     5e0:	80 e4       	ldi	r24, 0x40	; 64
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	90 93 78 01 	sts	0x0178, r25
     5e8:	80 93 77 01 	sts	0x0177, r24
     5ec:	88 e3       	ldi	r24, 0x38	; 56
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	90 93 8a 01 	sts	0x018A, r25
     5f4:	80 93 89 01 	sts	0x0189, r24
                        break;
     5f8:	54 c3       	rjmp	.+1704   	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     5fa:	84 e4       	ldi	r24, 0x44	; 68
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	90 93 90 01 	sts	0x0190, r25
     602:	80 93 8f 01 	sts	0x018F, r24
     606:	88 e3       	ldi	r24, 0x38	; 56
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 76 01 	sts	0x0176, r25
     60e:	80 93 75 01 	sts	0x0175, r24
     612:	80 e4       	ldi	r24, 0x40	; 64
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 78 01 	sts	0x0178, r25
     61a:	80 93 77 01 	sts	0x0177, r24
     61e:	8c e3       	ldi	r24, 0x3C	; 60
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 8a 01 	sts	0x018A, r25
     626:	80 93 89 01 	sts	0x0189, r24
                        break;
     62a:	3b c3       	rjmp	.+1654   	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     62c:	80 e4       	ldi	r24, 0x40	; 64
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	90 93 90 01 	sts	0x0190, r25
     634:	80 93 8f 01 	sts	0x018F, r24
     638:	8c e3       	ldi	r24, 0x3C	; 60
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 76 01 	sts	0x0176, r25
     640:	80 93 75 01 	sts	0x0175, r24
     644:	84 e4       	ldi	r24, 0x44	; 68
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 78 01 	sts	0x0178, r25
     64c:	80 93 77 01 	sts	0x0177, r24
     650:	88 e3       	ldi	r24, 0x38	; 56
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 8a 01 	sts	0x018A, r25
     658:	80 93 89 01 	sts	0x0189, r24
                        break;
     65c:	22 c3       	rjmp	.+1604   	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     65e:	80 e4       	ldi	r24, 0x40	; 64
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	90 93 90 01 	sts	0x0190, r25
     666:	80 93 8f 01 	sts	0x018F, r24
     66a:	88 e3       	ldi	r24, 0x38	; 56
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 76 01 	sts	0x0176, r25
     672:	80 93 75 01 	sts	0x0175, r24
     676:	84 e4       	ldi	r24, 0x44	; 68
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 78 01 	sts	0x0178, r25
     67e:	80 93 77 01 	sts	0x0177, r24
     682:	8c e3       	ldi	r24, 0x3C	; 60
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 8a 01 	sts	0x018A, r25
     68a:	80 93 89 01 	sts	0x0189, r24
                        break;
     68e:	09 c3       	rjmp	.+1554   	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     690:	84 e4       	ldi	r24, 0x44	; 68
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	90 93 90 01 	sts	0x0190, r25
     698:	80 93 8f 01 	sts	0x018F, r24
     69c:	80 e4       	ldi	r24, 0x40	; 64
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 76 01 	sts	0x0176, r25
     6a4:	80 93 75 01 	sts	0x0175, r24
     6a8:	8c e3       	ldi	r24, 0x3C	; 60
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 78 01 	sts	0x0178, r25
     6b0:	80 93 77 01 	sts	0x0177, r24
     6b4:	88 e3       	ldi	r24, 0x38	; 56
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 8a 01 	sts	0x018A, r25
     6bc:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	90 93 0f 01 	sts	0x010F, r25
     6c8:	80 93 0e 01 	sts	0x010E, r24
                        break;
     6cc:	f0 c2       	rjmp	.+1504   	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 1:
                switch (min_id) {
     6ce:	ed 81       	ldd	r30, Y+5	; 0x05
     6d0:	fe 81       	ldd	r31, Y+6	; 0x06
     6d2:	e2 30       	cpi	r30, 0x02	; 2
     6d4:	f1 05       	cpc	r31, r1
     6d6:	31 f1       	breq	.+76     	; 0x724 <localize+0x2ae>
     6d8:	1c f4       	brge	.+6      	; 0x6e0 <localize+0x26a>
     6da:	ef 2b       	or	r30, r31
     6dc:	51 f0       	breq	.+20     	; 0x6f2 <localize+0x27c>
     6de:	6d c0       	rjmp	.+218    	; 0x7ba <localize+0x344>
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	9e 81       	ldd	r25, Y+6	; 0x06
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	91 05       	cpc	r25, r1
     6e8:	b1 f1       	breq	.+108    	; 0x756 <localize+0x2e0>
     6ea:	05 97       	sbiw	r24, 0x05	; 5
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <localize+0x27a>
     6ee:	65 c0       	rjmp	.+202    	; 0x7ba <localize+0x344>
     6f0:	4b c0       	rjmp	.+150    	; 0x788 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6f2:	84 e4       	ldi	r24, 0x44	; 68
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	90 93 90 01 	sts	0x0190, r25
     6fa:	80 93 8f 01 	sts	0x018F, r24
     6fe:	80 e4       	ldi	r24, 0x40	; 64
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	90 93 76 01 	sts	0x0176, r25
     706:	80 93 75 01 	sts	0x0175, r24
     70a:	8c e3       	ldi	r24, 0x3C	; 60
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	90 93 78 01 	sts	0x0178, r25
     712:	80 93 77 01 	sts	0x0177, r24
     716:	88 e3       	ldi	r24, 0x38	; 56
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	90 93 8a 01 	sts	0x018A, r25
     71e:	80 93 89 01 	sts	0x0189, r24
                        break;
     722:	bf c2       	rjmp	.+1406   	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     724:	84 e4       	ldi	r24, 0x44	; 68
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	90 93 90 01 	sts	0x0190, r25
     72c:	80 93 8f 01 	sts	0x018F, r24
     730:	88 e3       	ldi	r24, 0x38	; 56
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	90 93 76 01 	sts	0x0176, r25
     738:	80 93 75 01 	sts	0x0175, r24
     73c:	8c e3       	ldi	r24, 0x3C	; 60
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 78 01 	sts	0x0178, r25
     744:	80 93 77 01 	sts	0x0177, r24
     748:	80 e4       	ldi	r24, 0x40	; 64
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	90 93 8a 01 	sts	0x018A, r25
     750:	80 93 89 01 	sts	0x0189, r24
                        break;
     754:	a6 c2       	rjmp	.+1356   	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     756:	8c e3       	ldi	r24, 0x3C	; 60
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	90 93 90 01 	sts	0x0190, r25
     75e:	80 93 8f 01 	sts	0x018F, r24
     762:	80 e4       	ldi	r24, 0x40	; 64
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	90 93 76 01 	sts	0x0176, r25
     76a:	80 93 75 01 	sts	0x0175, r24
     76e:	84 e4       	ldi	r24, 0x44	; 68
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 78 01 	sts	0x0178, r25
     776:	80 93 77 01 	sts	0x0177, r24
     77a:	88 e3       	ldi	r24, 0x38	; 56
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	90 93 8a 01 	sts	0x018A, r25
     782:	80 93 89 01 	sts	0x0189, r24
                        break;
     786:	8d c2       	rjmp	.+1306   	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     788:	8c e3       	ldi	r24, 0x3C	; 60
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	90 93 90 01 	sts	0x0190, r25
     790:	80 93 8f 01 	sts	0x018F, r24
     794:	88 e3       	ldi	r24, 0x38	; 56
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 76 01 	sts	0x0176, r25
     79c:	80 93 75 01 	sts	0x0175, r24
     7a0:	84 e4       	ldi	r24, 0x44	; 68
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 78 01 	sts	0x0178, r25
     7a8:	80 93 77 01 	sts	0x0177, r24
     7ac:	80 e4       	ldi	r24, 0x40	; 64
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 8a 01 	sts	0x018A, r25
     7b4:	80 93 89 01 	sts	0x0189, r24
                        break;
     7b8:	74 c2       	rjmp	.+1256   	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7ba:	84 e4       	ldi	r24, 0x44	; 68
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	90 93 90 01 	sts	0x0190, r25
     7c2:	80 93 8f 01 	sts	0x018F, r24
     7c6:	80 e4       	ldi	r24, 0x40	; 64
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 76 01 	sts	0x0176, r25
     7ce:	80 93 75 01 	sts	0x0175, r24
     7d2:	8c e3       	ldi	r24, 0x3C	; 60
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	90 93 78 01 	sts	0x0178, r25
     7da:	80 93 77 01 	sts	0x0177, r24
     7de:	88 e3       	ldi	r24, 0x38	; 56
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 8a 01 	sts	0x018A, r25
     7e6:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	90 93 0f 01 	sts	0x010F, r25
     7f2:	80 93 0e 01 	sts	0x010E, r24
                        break;
     7f6:	5b c2       	rjmp	.+1206   	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 2:
                switch (min_id) {
     7f8:	ed 81       	ldd	r30, Y+5	; 0x05
     7fa:	fe 81       	ldd	r31, Y+6	; 0x06
     7fc:	e1 30       	cpi	r30, 0x01	; 1
     7fe:	f1 05       	cpc	r31, r1
     800:	31 f1       	breq	.+76     	; 0x84e <localize+0x3d8>
     802:	1c f4       	brge	.+6      	; 0x80a <localize+0x394>
     804:	ef 2b       	or	r30, r31
     806:	51 f0       	breq	.+20     	; 0x81c <localize+0x3a6>
     808:	6d c0       	rjmp	.+218    	; 0x8e4 <localize+0x46e>
     80a:	8d 81       	ldd	r24, Y+5	; 0x05
     80c:	9e 81       	ldd	r25, Y+6	; 0x06
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	91 05       	cpc	r25, r1
     812:	b1 f1       	breq	.+108    	; 0x880 <localize+0x40a>
     814:	05 97       	sbiw	r24, 0x05	; 5
     816:	09 f0       	breq	.+2      	; 0x81a <localize+0x3a4>
     818:	65 c0       	rjmp	.+202    	; 0x8e4 <localize+0x46e>
     81a:	4b c0       	rjmp	.+150    	; 0x8b2 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     81c:	84 e4       	ldi	r24, 0x44	; 68
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 90 01 	sts	0x0190, r25
     824:	80 93 8f 01 	sts	0x018F, r24
     828:	80 e4       	ldi	r24, 0x40	; 64
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	90 93 76 01 	sts	0x0176, r25
     830:	80 93 75 01 	sts	0x0175, r24
     834:	88 e3       	ldi	r24, 0x38	; 56
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	90 93 78 01 	sts	0x0178, r25
     83c:	80 93 77 01 	sts	0x0177, r24
     840:	8c e3       	ldi	r24, 0x3C	; 60
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	90 93 8a 01 	sts	0x018A, r25
     848:	80 93 89 01 	sts	0x0189, r24
                        break;
     84c:	2a c2       	rjmp	.+1108   	; 0xca2 <__stack+0x1a3>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     84e:	84 e4       	ldi	r24, 0x44	; 68
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	90 93 90 01 	sts	0x0190, r25
     856:	80 93 8f 01 	sts	0x018F, r24
     85a:	8c e3       	ldi	r24, 0x3C	; 60
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	90 93 76 01 	sts	0x0176, r25
     862:	80 93 75 01 	sts	0x0175, r24
     866:	88 e3       	ldi	r24, 0x38	; 56
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 78 01 	sts	0x0178, r25
     86e:	80 93 77 01 	sts	0x0177, r24
     872:	80 e4       	ldi	r24, 0x40	; 64
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	90 93 8a 01 	sts	0x018A, r25
     87a:	80 93 89 01 	sts	0x0189, r24
                        break;
     87e:	11 c2       	rjmp	.+1058   	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     880:	88 e3       	ldi	r24, 0x38	; 56
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 90 01 	sts	0x0190, r25
     888:	80 93 8f 01 	sts	0x018F, r24
     88c:	80 e4       	ldi	r24, 0x40	; 64
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	90 93 76 01 	sts	0x0176, r25
     894:	80 93 75 01 	sts	0x0175, r24
     898:	84 e4       	ldi	r24, 0x44	; 68
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	90 93 78 01 	sts	0x0178, r25
     8a0:	80 93 77 01 	sts	0x0177, r24
     8a4:	8c e3       	ldi	r24, 0x3C	; 60
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	90 93 8a 01 	sts	0x018A, r25
     8ac:	80 93 89 01 	sts	0x0189, r24
                        break;
     8b0:	f8 c1       	rjmp	.+1008   	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     8b2:	88 e3       	ldi	r24, 0x38	; 56
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 90 01 	sts	0x0190, r25
     8ba:	80 93 8f 01 	sts	0x018F, r24
     8be:	8c e3       	ldi	r24, 0x3C	; 60
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	90 93 76 01 	sts	0x0176, r25
     8c6:	80 93 75 01 	sts	0x0175, r24
     8ca:	84 e4       	ldi	r24, 0x44	; 68
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	90 93 78 01 	sts	0x0178, r25
     8d2:	80 93 77 01 	sts	0x0177, r24
     8d6:	80 e4       	ldi	r24, 0x40	; 64
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	90 93 8a 01 	sts	0x018A, r25
     8de:	80 93 89 01 	sts	0x0189, r24
                        break;
     8e2:	df c1       	rjmp	.+958    	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     8e4:	84 e4       	ldi	r24, 0x44	; 68
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	90 93 90 01 	sts	0x0190, r25
     8ec:	80 93 8f 01 	sts	0x018F, r24
     8f0:	80 e4       	ldi	r24, 0x40	; 64
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	90 93 76 01 	sts	0x0176, r25
     8f8:	80 93 75 01 	sts	0x0175, r24
     8fc:	8c e3       	ldi	r24, 0x3C	; 60
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	90 93 78 01 	sts	0x0178, r25
     904:	80 93 77 01 	sts	0x0177, r24
     908:	88 e3       	ldi	r24, 0x38	; 56
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	90 93 8a 01 	sts	0x018A, r25
     910:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	90 93 0f 01 	sts	0x010F, r25
     91c:	80 93 0e 01 	sts	0x010E, r24
                        break;
     920:	c6 c1       	rjmp	.+908    	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 3:
                switch (min_id) {
     922:	ed 81       	ldd	r30, Y+5	; 0x05
     924:	fe 81       	ldd	r31, Y+6	; 0x06
     926:	e1 30       	cpi	r30, 0x01	; 1
     928:	f1 05       	cpc	r31, r1
     92a:	31 f1       	breq	.+76     	; 0x978 <localize+0x502>
     92c:	1c f4       	brge	.+6      	; 0x934 <localize+0x4be>
     92e:	ef 2b       	or	r30, r31
     930:	51 f0       	breq	.+20     	; 0x946 <localize+0x4d0>
     932:	6d c0       	rjmp	.+218    	; 0xa0e <localize+0x598>
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	84 30       	cpi	r24, 0x04	; 4
     93a:	91 05       	cpc	r25, r1
     93c:	b1 f1       	breq	.+108    	; 0x9aa <localize+0x534>
     93e:	05 97       	sbiw	r24, 0x05	; 5
     940:	09 f0       	breq	.+2      	; 0x944 <localize+0x4ce>
     942:	65 c0       	rjmp	.+202    	; 0xa0e <localize+0x598>
     944:	4b c0       	rjmp	.+150    	; 0x9dc <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     946:	80 e4       	ldi	r24, 0x40	; 64
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	90 93 90 01 	sts	0x0190, r25
     94e:	80 93 8f 01 	sts	0x018F, r24
     952:	84 e4       	ldi	r24, 0x44	; 68
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	90 93 76 01 	sts	0x0176, r25
     95a:	80 93 75 01 	sts	0x0175, r24
     95e:	8c e3       	ldi	r24, 0x3C	; 60
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	90 93 78 01 	sts	0x0178, r25
     966:	80 93 77 01 	sts	0x0177, r24
     96a:	88 e3       	ldi	r24, 0x38	; 56
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	90 93 8a 01 	sts	0x018A, r25
     972:	80 93 89 01 	sts	0x0189, r24
                        break;
     976:	95 c1       	rjmp	.+810    	; 0xca2 <__stack+0x1a3>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     978:	8c e3       	ldi	r24, 0x3C	; 60
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	90 93 90 01 	sts	0x0190, r25
     980:	80 93 8f 01 	sts	0x018F, r24
     984:	84 e4       	ldi	r24, 0x44	; 68
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	90 93 76 01 	sts	0x0176, r25
     98c:	80 93 75 01 	sts	0x0175, r24
     990:	80 e4       	ldi	r24, 0x40	; 64
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	90 93 78 01 	sts	0x0178, r25
     998:	80 93 77 01 	sts	0x0177, r24
     99c:	88 e3       	ldi	r24, 0x38	; 56
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	90 93 8a 01 	sts	0x018A, r25
     9a4:	80 93 89 01 	sts	0x0189, r24
                        break;
     9a8:	7c c1       	rjmp	.+760    	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     9aa:	80 e4       	ldi	r24, 0x40	; 64
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	90 93 90 01 	sts	0x0190, r25
     9b2:	80 93 8f 01 	sts	0x018F, r24
     9b6:	88 e3       	ldi	r24, 0x38	; 56
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	90 93 76 01 	sts	0x0176, r25
     9be:	80 93 75 01 	sts	0x0175, r24
     9c2:	8c e3       	ldi	r24, 0x3C	; 60
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	90 93 78 01 	sts	0x0178, r25
     9ca:	80 93 77 01 	sts	0x0177, r24
     9ce:	84 e4       	ldi	r24, 0x44	; 68
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	90 93 8a 01 	sts	0x018A, r25
     9d6:	80 93 89 01 	sts	0x0189, r24
                        break;
     9da:	63 c1       	rjmp	.+710    	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     9dc:	8c e3       	ldi	r24, 0x3C	; 60
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	90 93 90 01 	sts	0x0190, r25
     9e4:	80 93 8f 01 	sts	0x018F, r24
     9e8:	88 e3       	ldi	r24, 0x38	; 56
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	90 93 76 01 	sts	0x0176, r25
     9f0:	80 93 75 01 	sts	0x0175, r24
     9f4:	80 e4       	ldi	r24, 0x40	; 64
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	90 93 78 01 	sts	0x0178, r25
     9fc:	80 93 77 01 	sts	0x0177, r24
     a00:	84 e4       	ldi	r24, 0x44	; 68
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	90 93 8a 01 	sts	0x018A, r25
     a08:	80 93 89 01 	sts	0x0189, r24
                        break;
     a0c:	4a c1       	rjmp	.+660    	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     a0e:	84 e4       	ldi	r24, 0x44	; 68
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	90 93 90 01 	sts	0x0190, r25
     a16:	80 93 8f 01 	sts	0x018F, r24
     a1a:	80 e4       	ldi	r24, 0x40	; 64
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	90 93 76 01 	sts	0x0176, r25
     a22:	80 93 75 01 	sts	0x0175, r24
     a26:	8c e3       	ldi	r24, 0x3C	; 60
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	90 93 78 01 	sts	0x0178, r25
     a2e:	80 93 77 01 	sts	0x0177, r24
     a32:	88 e3       	ldi	r24, 0x38	; 56
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	90 93 8a 01 	sts	0x018A, r25
     a3a:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 0f 01 	sts	0x010F, r25
     a46:	80 93 0e 01 	sts	0x010E, r24
                        break;
     a4a:	31 c1       	rjmp	.+610    	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 4:
                switch (min_id) {
     a4c:	ed 81       	ldd	r30, Y+5	; 0x05
     a4e:	fe 81       	ldd	r31, Y+6	; 0x06
     a50:	e2 30       	cpi	r30, 0x02	; 2
     a52:	f1 05       	cpc	r31, r1
     a54:	31 f1       	breq	.+76     	; 0xaa2 <localize+0x62c>
     a56:	1c f4       	brge	.+6      	; 0xa5e <localize+0x5e8>
     a58:	ef 2b       	or	r30, r31
     a5a:	51 f0       	breq	.+20     	; 0xa70 <localize+0x5fa>
     a5c:	6d c0       	rjmp	.+218    	; 0xb38 <__stack+0x39>
     a5e:	8d 81       	ldd	r24, Y+5	; 0x05
     a60:	9e 81       	ldd	r25, Y+6	; 0x06
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	91 05       	cpc	r25, r1
     a66:	b1 f1       	breq	.+108    	; 0xad4 <localize+0x65e>
     a68:	05 97       	sbiw	r24, 0x05	; 5
     a6a:	09 f0       	breq	.+2      	; 0xa6e <localize+0x5f8>
     a6c:	65 c0       	rjmp	.+202    	; 0xb38 <__stack+0x39>
     a6e:	4b c0       	rjmp	.+150    	; 0xb06 <__stack+0x7>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     a70:	80 e4       	ldi	r24, 0x40	; 64
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	90 93 90 01 	sts	0x0190, r25
     a78:	80 93 8f 01 	sts	0x018F, r24
     a7c:	84 e4       	ldi	r24, 0x44	; 68
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	90 93 76 01 	sts	0x0176, r25
     a84:	80 93 75 01 	sts	0x0175, r24
     a88:	88 e3       	ldi	r24, 0x38	; 56
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	90 93 78 01 	sts	0x0178, r25
     a90:	80 93 77 01 	sts	0x0177, r24
     a94:	8c e3       	ldi	r24, 0x3C	; 60
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	90 93 8a 01 	sts	0x018A, r25
     a9c:	80 93 89 01 	sts	0x0189, r24
                        break;
     aa0:	00 c1       	rjmp	.+512    	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     aa2:	88 e3       	ldi	r24, 0x38	; 56
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	90 93 90 01 	sts	0x0190, r25
     aaa:	80 93 8f 01 	sts	0x018F, r24
     aae:	84 e4       	ldi	r24, 0x44	; 68
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	90 93 76 01 	sts	0x0176, r25
     ab6:	80 93 75 01 	sts	0x0175, r24
     aba:	80 e4       	ldi	r24, 0x40	; 64
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	90 93 78 01 	sts	0x0178, r25
     ac2:	80 93 77 01 	sts	0x0177, r24
     ac6:	8c e3       	ldi	r24, 0x3C	; 60
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	90 93 8a 01 	sts	0x018A, r25
     ace:	80 93 89 01 	sts	0x0189, r24
                        break;
     ad2:	e7 c0       	rjmp	.+462    	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     ad4:	80 e4       	ldi	r24, 0x40	; 64
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	90 93 90 01 	sts	0x0190, r25
     adc:	80 93 8f 01 	sts	0x018F, r24
     ae0:	8c e3       	ldi	r24, 0x3C	; 60
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	90 93 76 01 	sts	0x0176, r25
     ae8:	80 93 75 01 	sts	0x0175, r24
     aec:	88 e3       	ldi	r24, 0x38	; 56
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	90 93 78 01 	sts	0x0178, r25
     af4:	80 93 77 01 	sts	0x0177, r24
     af8:	84 e4       	ldi	r24, 0x44	; 68
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	90 93 8a 01 	sts	0x018A, r25
     b00:	80 93 89 01 	sts	0x0189, r24
                        break;
     b04:	ce c0       	rjmp	.+412    	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     b06:	88 e3       	ldi	r24, 0x38	; 56
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	90 93 90 01 	sts	0x0190, r25
     b0e:	80 93 8f 01 	sts	0x018F, r24
     b12:	8c e3       	ldi	r24, 0x3C	; 60
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	90 93 76 01 	sts	0x0176, r25
     b1a:	80 93 75 01 	sts	0x0175, r24
     b1e:	80 e4       	ldi	r24, 0x40	; 64
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	90 93 78 01 	sts	0x0178, r25
     b26:	80 93 77 01 	sts	0x0177, r24
     b2a:	84 e4       	ldi	r24, 0x44	; 68
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	90 93 8a 01 	sts	0x018A, r25
     b32:	80 93 89 01 	sts	0x0189, r24
                        break;
     b36:	b5 c0       	rjmp	.+362    	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     b38:	84 e4       	ldi	r24, 0x44	; 68
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	90 93 90 01 	sts	0x0190, r25
     b40:	80 93 8f 01 	sts	0x018F, r24
     b44:	80 e4       	ldi	r24, 0x40	; 64
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	90 93 76 01 	sts	0x0176, r25
     b4c:	80 93 75 01 	sts	0x0175, r24
     b50:	8c e3       	ldi	r24, 0x3C	; 60
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	90 93 78 01 	sts	0x0178, r25
     b58:	80 93 77 01 	sts	0x0177, r24
     b5c:	88 e3       	ldi	r24, 0x38	; 56
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	90 93 8a 01 	sts	0x018A, r25
     b64:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	90 93 0f 01 	sts	0x010F, r25
     b70:	80 93 0e 01 	sts	0x010E, r24
                        break;
     b74:	9c c0       	rjmp	.+312    	; 0xcae <__stack+0x1af>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     b76:	ed 81       	ldd	r30, Y+5	; 0x05
     b78:	fe 81       	ldd	r31, Y+6	; 0x06
     b7a:	e2 30       	cpi	r30, 0x02	; 2
     b7c:	f1 05       	cpc	r31, r1
     b7e:	39 f1       	breq	.+78     	; 0xbce <__stack+0xcf>
     b80:	24 f4       	brge	.+8      	; 0xb8a <__stack+0x8b>
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	09 f0       	breq	.+2      	; 0xb88 <__stack+0x89>
     b86:	6e c0       	rjmp	.+220    	; 0xc64 <__stack+0x165>
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__stack+0x9d>
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	b1 f1       	breq	.+108    	; 0xc00 <__stack+0x101>
     b94:	04 97       	sbiw	r24, 0x04	; 4
     b96:	09 f0       	breq	.+2      	; 0xb9a <__stack+0x9b>
     b98:	65 c0       	rjmp	.+202    	; 0xc64 <__stack+0x165>
     b9a:	4b c0       	rjmp	.+150    	; 0xc32 <__stack+0x133>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     b9c:	8c e3       	ldi	r24, 0x3C	; 60
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	90 93 90 01 	sts	0x0190, r25
     ba4:	80 93 8f 01 	sts	0x018F, r24
     ba8:	84 e4       	ldi	r24, 0x44	; 68
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	90 93 76 01 	sts	0x0176, r25
     bb0:	80 93 75 01 	sts	0x0175, r24
     bb4:	88 e3       	ldi	r24, 0x38	; 56
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	90 93 78 01 	sts	0x0178, r25
     bbc:	80 93 77 01 	sts	0x0177, r24
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	90 93 8a 01 	sts	0x018A, r25
     bc8:	80 93 89 01 	sts	0x0189, r24
                        break;
     bcc:	6a c0       	rjmp	.+212    	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     bce:	88 e3       	ldi	r24, 0x38	; 56
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	90 93 90 01 	sts	0x0190, r25
     bd6:	80 93 8f 01 	sts	0x018F, r24
     bda:	84 e4       	ldi	r24, 0x44	; 68
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	90 93 76 01 	sts	0x0176, r25
     be2:	80 93 75 01 	sts	0x0175, r24
     be6:	8c e3       	ldi	r24, 0x3C	; 60
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	90 93 78 01 	sts	0x0178, r25
     bee:	80 93 77 01 	sts	0x0177, r24
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	90 93 8a 01 	sts	0x018A, r25
     bfa:	80 93 89 01 	sts	0x0189, r24
                        break;
     bfe:	51 c0       	rjmp	.+162    	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     c00:	8c e3       	ldi	r24, 0x3C	; 60
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	90 93 90 01 	sts	0x0190, r25
     c08:	80 93 8f 01 	sts	0x018F, r24
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	90 93 76 01 	sts	0x0176, r25
     c14:	80 93 75 01 	sts	0x0175, r24
     c18:	88 e3       	ldi	r24, 0x38	; 56
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	90 93 78 01 	sts	0x0178, r25
     c20:	80 93 77 01 	sts	0x0177, r24
     c24:	84 e4       	ldi	r24, 0x44	; 68
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	90 93 8a 01 	sts	0x018A, r25
     c2c:	80 93 89 01 	sts	0x0189, r24
                        break;
     c30:	38 c0       	rjmp	.+112    	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     c32:	88 e3       	ldi	r24, 0x38	; 56
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	90 93 90 01 	sts	0x0190, r25
     c3a:	80 93 8f 01 	sts	0x018F, r24
     c3e:	80 e4       	ldi	r24, 0x40	; 64
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	90 93 76 01 	sts	0x0176, r25
     c46:	80 93 75 01 	sts	0x0175, r24
     c4a:	8c e3       	ldi	r24, 0x3C	; 60
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	90 93 78 01 	sts	0x0178, r25
     c52:	80 93 77 01 	sts	0x0177, r24
     c56:	84 e4       	ldi	r24, 0x44	; 68
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	90 93 8a 01 	sts	0x018A, r25
     c5e:	80 93 89 01 	sts	0x0189, r24
                        break;
     c62:	1f c0       	rjmp	.+62     	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     c64:	84 e4       	ldi	r24, 0x44	; 68
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	90 93 90 01 	sts	0x0190, r25
     c6c:	80 93 8f 01 	sts	0x018F, r24
     c70:	80 e4       	ldi	r24, 0x40	; 64
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	90 93 76 01 	sts	0x0176, r25
     c78:	80 93 75 01 	sts	0x0175, r24
     c7c:	8c e3       	ldi	r24, 0x3C	; 60
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	90 93 78 01 	sts	0x0178, r25
     c84:	80 93 77 01 	sts	0x0177, r24
     c88:	88 e3       	ldi	r24, 0x38	; 56
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	90 93 8a 01 	sts	0x018A, r25
     c90:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 0f 01 	sts	0x010F, r25
     c9c:	80 93 0e 01 	sts	0x010E, r24
                        break;
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <__stack+0x1af>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     ca2:	80 91 0e 01 	lds	r24, 0x010E
     ca6:	90 91 0f 01 	lds	r25, 0x010F
     caa:	89 2b       	or	r24, r25
     cac:	d1 f0       	breq	.+52     	; 0xce2 <__stack+0x1e3>
        *orientation = orientation_prev;
     cae:	80 91 1e 01 	lds	r24, 0x011E
     cb2:	90 91 1f 01 	lds	r25, 0x011F
     cb6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     cb8:	f8 a1       	ldd	r31, Y+32	; 0x20
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     cbe:	80 91 1c 01 	lds	r24, 0x011C
     cc2:	90 91 1d 01 	lds	r25, 0x011D
     cc6:	ef 81       	ldd	r30, Y+7	; 0x07
     cc8:	f8 85       	ldd	r31, Y+8	; 0x08
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     cce:	80 91 1a 01 	lds	r24, 0x011A
     cd2:	90 91 1b 01 	lds	r25, 0x011B
     cd6:	ed 8d       	ldd	r30, Y+29	; 0x1d
     cd8:	fe 8d       	ldd	r31, Y+30	; 0x1e
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
        return 0;
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	ea c3       	rjmp	.+2004   	; 0x14b6 <__stack+0x9b7>
    }
    
    
    float scale = P_vertical/max_distance;
     ce2:	26 2d       	mov	r18, r6
     ce4:	37 2d       	mov	r19, r7
     ce6:	48 2d       	mov	r20, r8
     ce8:	59 2d       	mov	r21, r9
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	88 ee       	ldi	r24, 0xE8	; 232
     cf0:	91 e4       	ldi	r25, 0x41	; 65
     cf2:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
     cf6:	26 2e       	mov	r2, r22
     cf8:	37 2e       	mov	r3, r23
     cfa:	48 2e       	mov	r4, r24
     cfc:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     cfe:	e0 90 8f 01 	lds	r14, 0x018F
     d02:	f0 90 90 01 	lds	r15, 0x0190
     d06:	0f 2e       	mov	r0, r31
     d08:	f1 e8       	ldi	r31, 0x81	; 129
     d0a:	8f 2e       	mov	r8, r31
     d0c:	f1 e0       	ldi	r31, 0x01	; 1
     d0e:	9f 2e       	mov	r9, r31
     d10:	f0 2d       	mov	r31, r0
     d12:	f7 01       	movw	r30, r14
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	88 27       	eor	r24, r24
     d1a:	77 fd       	sbrc	r23, 7
     d1c:	80 95       	com	r24
     d1e:	98 2f       	mov	r25, r24
     d20:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     d24:	22 2d       	mov	r18, r2
     d26:	33 2d       	mov	r19, r3
     d28:	44 2d       	mov	r20, r4
     d2a:	55 2d       	mov	r21, r5
     d2c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     d30:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     d34:	f4 01       	movw	r30, r8
     d36:	71 83       	std	Z+1, r23	; 0x01
     d38:	60 83       	st	Z, r22
     d3a:	0f 2e       	mov	r0, r31
     d3c:	f3 e8       	ldi	r31, 0x83	; 131
     d3e:	6f 2e       	mov	r6, r31
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	7f 2e       	mov	r7, r31
     d44:	f0 2d       	mov	r31, r0
     d46:	f7 01       	movw	r30, r14
     d48:	62 81       	ldd	r22, Z+2	; 0x02
     d4a:	73 81       	ldd	r23, Z+3	; 0x03
     d4c:	88 27       	eor	r24, r24
     d4e:	77 fd       	sbrc	r23, 7
     d50:	80 95       	com	r24
     d52:	98 2f       	mov	r25, r24
     d54:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     d58:	22 2d       	mov	r18, r2
     d5a:	33 2d       	mov	r19, r3
     d5c:	44 2d       	mov	r20, r4
     d5e:	55 2d       	mov	r21, r5
     d60:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     d64:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     d68:	f3 01       	movw	r30, r6
     d6a:	71 83       	std	Z+1, r23	; 0x01
     d6c:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     d6e:	00 91 77 01 	lds	r16, 0x0177
     d72:	10 91 78 01 	lds	r17, 0x0178
     d76:	0f 2e       	mov	r0, r31
     d78:	f1 e7       	ldi	r31, 0x71	; 113
     d7a:	af 2e       	mov	r10, r31
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
     d7e:	bf 2e       	mov	r11, r31
     d80:	f0 2d       	mov	r31, r0
     d82:	f8 01       	movw	r30, r16
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	88 27       	eor	r24, r24
     d8a:	77 fd       	sbrc	r23, 7
     d8c:	80 95       	com	r24
     d8e:	98 2f       	mov	r25, r24
     d90:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     d94:	22 2d       	mov	r18, r2
     d96:	33 2d       	mov	r19, r3
     d98:	44 2d       	mov	r20, r4
     d9a:	55 2d       	mov	r21, r5
     d9c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     da0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     da4:	f5 01       	movw	r30, r10
     da6:	71 83       	std	Z+1, r23	; 0x01
     da8:	60 83       	st	Z, r22
     daa:	0f 2e       	mov	r0, r31
     dac:	f3 e7       	ldi	r31, 0x73	; 115
     dae:	cf 2e       	mov	r12, r31
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	df 2e       	mov	r13, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	f8 01       	movw	r30, r16
     db8:	62 81       	ldd	r22, Z+2	; 0x02
     dba:	73 81       	ldd	r23, Z+3	; 0x03
     dbc:	88 27       	eor	r24, r24
     dbe:	77 fd       	sbrc	r23, 7
     dc0:	80 95       	com	r24
     dc2:	98 2f       	mov	r25, r24
     dc4:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     dc8:	22 2d       	mov	r18, r2
     dca:	33 2d       	mov	r19, r3
     dcc:	44 2d       	mov	r20, r4
     dce:	55 2d       	mov	r21, r5
     dd0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     dd4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     dd8:	f6 01       	movw	r30, r12
     dda:	71 83       	std	Z+1, r23	; 0x01
     ddc:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     dde:	f7 01       	movw	r30, r14
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	68 0f       	add	r22, r24
     dec:	79 1f       	adc	r23, r25
     dee:	88 27       	eor	r24, r24
     df0:	77 fd       	sbrc	r23, 7
     df2:	80 95       	com	r24
     df4:	98 2f       	mov	r25, r24
     df6:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     e06:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     e0a:	e9 a1       	ldd	r30, Y+33	; 0x21
     e0c:	fa a1       	ldd	r31, Y+34	; 0x22
     e0e:	71 83       	std	Z+1, r23	; 0x01
     e10:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     e12:	a0 91 8f 01 	lds	r26, 0x018F
     e16:	b0 91 90 01 	lds	r27, 0x0190
     e1a:	e0 91 77 01 	lds	r30, 0x0177
     e1e:	f0 91 78 01 	lds	r31, 0x0178
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	6d 91       	ld	r22, X+
     e26:	7c 91       	ld	r23, X
     e28:	13 97       	sbiw	r26, 0x03	; 3
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	68 0f       	add	r22, r24
     e30:	79 1f       	adc	r23, r25
     e32:	88 27       	eor	r24, r24
     e34:	77 fd       	sbrc	r23, 7
     e36:	80 95       	com	r24
     e38:	98 2f       	mov	r25, r24
     e3a:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     e4a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     e4e:	eb a1       	ldd	r30, Y+35	; 0x23
     e50:	fc a1       	ldd	r31, Y+36	; 0x24
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     e56:	f4 01       	movw	r30, r8
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	f5 01       	movw	r30, r10
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	68 0f       	add	r22, r24
     e64:	79 1f       	adc	r23, r25
     e66:	88 27       	eor	r24, r24
     e68:	77 fd       	sbrc	r23, 7
     e6a:	80 95       	com	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	5f e3       	ldi	r21, 0x3F	; 63
     e7a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     e7e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     e82:	1b 01       	movw	r2, r22
     e84:	70 93 96 01 	sts	0x0196, r23
     e88:	60 93 95 01 	sts	0x0195, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     e8c:	f3 01       	movw	r30, r6
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	f6 01       	movw	r30, r12
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	68 0f       	add	r22, r24
     e9a:	79 1f       	adc	r23, r25
     e9c:	88 27       	eor	r24, r24
     e9e:	77 fd       	sbrc	r23, 7
     ea0:	80 95       	com	r24
     ea2:	98 2f       	mov	r25, r24
     ea4:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
     eb4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
     eb8:	8b 01       	movw	r16, r22
     eba:	70 93 98 01 	sts	0x0198, r23
     ebe:	60 93 97 01 	sts	0x0197, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     ec2:	22 9c       	mul	r2, r2
     ec4:	b0 01       	movw	r22, r0
     ec6:	23 9c       	mul	r2, r3
     ec8:	70 0d       	add	r23, r0
     eca:	70 0d       	add	r23, r0
     ecc:	11 24       	eor	r1, r1
     ece:	00 9f       	mul	r16, r16
     ed0:	c0 01       	movw	r24, r0
     ed2:	01 9f       	mul	r16, r17
     ed4:	90 0d       	add	r25, r0
     ed6:	90 0d       	add	r25, r0
     ed8:	11 24       	eor	r1, r1
     eda:	68 0f       	add	r22, r24
     edc:	79 1f       	adc	r23, r25
     ede:	88 27       	eor	r24, r24
     ee0:	77 fd       	sbrc	r23, 7
     ee2:	80 95       	com	r24
     ee4:	98 2f       	mov	r25, r24
     ee6:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     eea:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
     eee:	2b 01       	movw	r4, r22
     ef0:	3c 01       	movw	r6, r24
     ef2:	60 93 79 01 	sts	0x0179, r22
     ef6:	70 93 7a 01 	sts	0x017A, r23
     efa:	80 93 7b 01 	sts	0x017B, r24
     efe:	90 93 7c 01 	sts	0x017C, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     f02:	80 91 77 01 	lds	r24, 0x0177
     f06:	90 91 78 01 	lds	r25, 0x0178
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	e0 91 8f 01 	lds	r30, 0x018F
     f12:	f0 91 90 01 	lds	r31, 0x0190
     f16:	fe 83       	std	Y+6, r31	; 0x06
     f18:	ed 83       	std	Y+5, r30	; 0x05
     f1a:	fc 01       	movw	r30, r24
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	ed 81       	ldd	r30, Y+5	; 0x05
     f22:	fe 81       	ldd	r31, Y+6	; 0x06
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	68 1b       	sub	r22, r24
     f2a:	79 0b       	sbc	r23, r25
     f2c:	88 27       	eor	r24, r24
     f2e:	77 fd       	sbrc	r23, 7
     f30:	80 95       	com	r24
     f32:	98 2f       	mov	r25, r24
     f34:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     f38:	6b 01       	movw	r12, r22
     f3a:	7c 01       	movw	r14, r24
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	62 81       	ldd	r22, Z+2	; 0x02
     f42:	73 81       	ldd	r23, Z+3	; 0x03
     f44:	ed 81       	ldd	r30, Y+5	; 0x05
     f46:	fe 81       	ldd	r31, Y+6	; 0x06
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	68 1b       	sub	r22, r24
     f4e:	79 0b       	sbc	r23, r25
     f50:	88 27       	eor	r24, r24
     f52:	77 fd       	sbrc	r23, 7
     f54:	80 95       	com	r24
     f56:	98 2f       	mov	r25, r24
     f58:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     f5c:	a7 01       	movw	r20, r14
     f5e:	96 01       	movw	r18, r12
     f60:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <atan2>
     f64:	4b 01       	movw	r8, r22
     f66:	5c 01       	movw	r10, r24
     f68:	60 93 85 01 	sts	0x0185, r22
     f6c:	70 93 86 01 	sts	0x0186, r23
     f70:	80 93 87 01 	sts	0x0187, r24
     f74:	90 93 88 01 	sts	0x0188, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     f78:	ed 81       	ldd	r30, Y+5	; 0x05
     f7a:	fe 81       	ldd	r31, Y+6	; 0x06
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	e9 81       	ldd	r30, Y+1	; 0x01
     f82:	fa 81       	ldd	r31, Y+2	; 0x02
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	68 1b       	sub	r22, r24
     f8a:	79 0b       	sbc	r23, r25
     f8c:	88 27       	eor	r24, r24
     f8e:	77 fd       	sbrc	r23, 7
     f90:	80 95       	com	r24
     f92:	98 2f       	mov	r25, r24
     f94:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     f98:	6b 01       	movw	r12, r22
     f9a:	7c 01       	movw	r14, r24
     f9c:	ed 81       	ldd	r30, Y+5	; 0x05
     f9e:	fe 81       	ldd	r31, Y+6	; 0x06
     fa0:	62 81       	ldd	r22, Z+2	; 0x02
     fa2:	73 81       	ldd	r23, Z+3	; 0x03
     fa4:	e9 81       	ldd	r30, Y+1	; 0x01
     fa6:	fa 81       	ldd	r31, Y+2	; 0x02
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	68 1b       	sub	r22, r24
     fae:	79 0b       	sbc	r23, r25
     fb0:	88 27       	eor	r24, r24
     fb2:	77 fd       	sbrc	r23, 7
     fb4:	80 95       	com	r24
     fb6:	98 2f       	mov	r25, r24
     fb8:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     fbc:	a7 01       	movw	r20, r14
     fbe:	96 01       	movw	r18, r12
     fc0:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <atan2>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24
     fc8:	60 93 7d 01 	sts	0x017D, r22
     fcc:	70 93 7e 01 	sts	0x017E, r23
     fd0:	80 93 7f 01 	sts	0x017F, r24
     fd4:	90 93 80 01 	sts	0x0180, r25
    alpha = -atan2(S0[0],S0[1]);
     fd8:	b8 01       	movw	r22, r16
     fda:	88 27       	eor	r24, r24
     fdc:	77 fd       	sbrc	r23, 7
     fde:	80 95       	com	r24
     fe0:	98 2f       	mov	r25, r24
     fe2:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     fe6:	69 83       	std	Y+1, r22	; 0x01
     fe8:	7a 83       	std	Y+2, r23	; 0x02
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	b1 01       	movw	r22, r2
     ff0:	88 27       	eor	r24, r24
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	80 95       	com	r24
     ff6:	98 2f       	mov	r25, r24
     ff8:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
     ffc:	29 81       	ldd	r18, Y+1	; 0x01
     ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    1000:	4b 81       	ldd	r20, Y+3	; 0x03
    1002:	5c 81       	ldd	r21, Y+4	; 0x04
    1004:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <atan2>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	b0 58       	subi	r27, 0x80	; 128
    1012:	80 93 99 01 	sts	0x0199, r24
    1016:	90 93 9a 01 	sts	0x019A, r25
    101a:	a0 93 9b 01 	sts	0x019B, r26
    101e:	b0 93 9c 01 	sts	0x019C, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    1022:	77 fa       	bst	r7, 7
    1024:	70 94       	com	r7
    1026:	77 f8       	bld	r7, 7
    1028:	70 94       	com	r7
    102a:	c5 01       	movw	r24, r10
    102c:	b4 01       	movw	r22, r8
    102e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1032:	86 2e       	mov	r8, r22
    1034:	97 2e       	mov	r9, r23
    1036:	a8 2e       	mov	r10, r24
    1038:	b9 2e       	mov	r11, r25
    103a:	0e 94 fd 17 	call	0x2ffa	; 0x2ffa <cos>
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	c3 01       	movw	r24, r6
    1044:	b2 01       	movw	r22, r4
    1046:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e2       	ldi	r20, 0x20	; 32
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1056:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    105a:	8b 01       	movw	r16, r22
    105c:	70 93 17 01 	sts	0x0117, r23
    1060:	60 93 16 01 	sts	0x0116, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    1064:	68 2d       	mov	r22, r8
    1066:	79 2d       	mov	r23, r9
    1068:	8a 2d       	mov	r24, r10
    106a:	9b 2d       	mov	r25, r11
    106c:	0e 94 17 1a 	call	0x342e	; 0x342e <sin>
    1070:	9b 01       	movw	r18, r22
    1072:	ac 01       	movw	r20, r24
    1074:	c3 01       	movw	r24, r6
    1076:	b2 01       	movw	r22, r4
    1078:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    107c:	20 e0       	ldi	r18, 0x00	; 0
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	40 ec       	ldi	r20, 0xC0	; 192
    1082:	50 e4       	ldi	r21, 0x40	; 64
    1084:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1088:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    108c:	70 93 15 01 	sts	0x0115, r23
    1090:	60 93 14 01 	sts	0x0114, r22
    orientation_current = (theta2) * 180/M_PI;
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	44 e3       	ldi	r20, 0x34	; 52
    109a:	53 e4       	ldi	r21, 0x43	; 67
    109c:	c7 01       	movw	r24, r14
    109e:	b6 01       	movw	r22, r12
    10a0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    10a4:	2b ed       	ldi	r18, 0xDB	; 219
    10a6:	3f e0       	ldi	r19, 0x0F	; 15
    10a8:	49 e4       	ldi	r20, 0x49	; 73
    10aa:	50 e4       	ldi	r21, 0x40	; 64
    10ac:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
    10b0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    10b4:	70 93 19 01 	sts	0x0119, r23
    10b8:	60 93 18 01 	sts	0x0118, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    10bc:	c0 90 10 01 	lds	r12, 0x0110
    10c0:	d0 90 11 01 	lds	r13, 0x0111
    10c4:	e0 90 12 01 	lds	r14, 0x0112
    10c8:	f0 90 13 01 	lds	r15, 0x0113
    10cc:	60 91 1c 01 	lds	r22, 0x011C
    10d0:	70 91 1d 01 	lds	r23, 0x011D
    10d4:	88 27       	eor	r24, r24
    10d6:	77 fd       	sbrc	r23, 7
    10d8:	80 95       	com	r24
    10da:	98 2f       	mov	r25, r24
    10dc:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    10e0:	a7 01       	movw	r20, r14
    10e2:	96 01       	movw	r18, r12
    10e4:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    10e8:	4b 01       	movw	r8, r22
    10ea:	5c 01       	movw	r10, r24
    10ec:	a7 01       	movw	r20, r14
    10ee:	96 01       	movw	r18, r12
    10f0:	60 e0       	ldi	r22, 0x00	; 0
    10f2:	70 e0       	ldi	r23, 0x00	; 0
    10f4:	80 e8       	ldi	r24, 0x80	; 128
    10f6:	9f e3       	ldi	r25, 0x3F	; 63
    10f8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    10fc:	6b 01       	movw	r12, r22
    10fe:	7c 01       	movw	r14, r24
    1100:	b8 01       	movw	r22, r16
    1102:	88 27       	eor	r24, r24
    1104:	77 fd       	sbrc	r23, 7
    1106:	80 95       	com	r24
    1108:	98 2f       	mov	r25, r24
    110a:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    110e:	9b 01       	movw	r18, r22
    1110:	ac 01       	movw	r20, r24
    1112:	c7 01       	movw	r24, r14
    1114:	b6 01       	movw	r22, r12
    1116:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    111a:	9b 01       	movw	r18, r22
    111c:	ac 01       	movw	r20, r24
    111e:	c5 01       	movw	r24, r10
    1120:	b4 01       	movw	r22, r8
    1122:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1126:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    112a:	ef 81       	ldd	r30, Y+7	; 0x07
    112c:	f8 85       	ldd	r31, Y+8	; 0x08
    112e:	71 83       	std	Z+1, r23	; 0x01
    1130:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    1132:	c0 90 10 01 	lds	r12, 0x0110
    1136:	d0 90 11 01 	lds	r13, 0x0111
    113a:	e0 90 12 01 	lds	r14, 0x0112
    113e:	f0 90 13 01 	lds	r15, 0x0113
    1142:	60 91 1a 01 	lds	r22, 0x011A
    1146:	70 91 1b 01 	lds	r23, 0x011B
    114a:	88 27       	eor	r24, r24
    114c:	77 fd       	sbrc	r23, 7
    114e:	80 95       	com	r24
    1150:	98 2f       	mov	r25, r24
    1152:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1156:	a7 01       	movw	r20, r14
    1158:	96 01       	movw	r18, r12
    115a:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    115e:	4b 01       	movw	r8, r22
    1160:	5c 01       	movw	r10, r24
    1162:	a7 01       	movw	r20, r14
    1164:	96 01       	movw	r18, r12
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	80 e8       	ldi	r24, 0x80	; 128
    116c:	9f e3       	ldi	r25, 0x3F	; 63
    116e:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1172:	6b 01       	movw	r12, r22
    1174:	7c 01       	movw	r14, r24
    1176:	60 91 14 01 	lds	r22, 0x0114
    117a:	70 91 15 01 	lds	r23, 0x0115
    117e:	88 27       	eor	r24, r24
    1180:	77 fd       	sbrc	r23, 7
    1182:	80 95       	com	r24
    1184:	98 2f       	mov	r25, r24
    1186:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    118a:	9b 01       	movw	r18, r22
    118c:	ac 01       	movw	r20, r24
    118e:	c7 01       	movw	r24, r14
    1190:	b6 01       	movw	r22, r12
    1192:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1196:	9b 01       	movw	r18, r22
    1198:	ac 01       	movw	r20, r24
    119a:	c5 01       	movw	r24, r10
    119c:	b4 01       	movw	r22, r8
    119e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    11a2:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    11a6:	ed 8d       	ldd	r30, Y+29	; 0x1d
    11a8:	fe 8d       	ldd	r31, Y+30	; 0x1e
    11aa:	71 83       	std	Z+1, r23	; 0x01
    11ac:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    11ae:	c0 90 10 01 	lds	r12, 0x0110
    11b2:	d0 90 11 01 	lds	r13, 0x0111
    11b6:	e0 90 12 01 	lds	r14, 0x0112
    11ba:	f0 90 13 01 	lds	r15, 0x0113
    11be:	60 91 1e 01 	lds	r22, 0x011E
    11c2:	70 91 1f 01 	lds	r23, 0x011F
    11c6:	88 27       	eor	r24, r24
    11c8:	77 fd       	sbrc	r23, 7
    11ca:	80 95       	com	r24
    11cc:	98 2f       	mov	r25, r24
    11ce:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    11d2:	a7 01       	movw	r20, r14
    11d4:	96 01       	movw	r18, r12
    11d6:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    11da:	4b 01       	movw	r8, r22
    11dc:	5c 01       	movw	r10, r24
    11de:	a7 01       	movw	r20, r14
    11e0:	96 01       	movw	r18, r12
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	70 e0       	ldi	r23, 0x00	; 0
    11e6:	80 e8       	ldi	r24, 0x80	; 128
    11e8:	9f e3       	ldi	r25, 0x3F	; 63
    11ea:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    11ee:	6b 01       	movw	r12, r22
    11f0:	7c 01       	movw	r14, r24
    11f2:	60 91 18 01 	lds	r22, 0x0118
    11f6:	70 91 19 01 	lds	r23, 0x0119
    11fa:	88 27       	eor	r24, r24
    11fc:	77 fd       	sbrc	r23, 7
    11fe:	80 95       	com	r24
    1200:	98 2f       	mov	r25, r24
    1202:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1206:	9b 01       	movw	r18, r22
    1208:	ac 01       	movw	r20, r24
    120a:	c7 01       	movw	r24, r14
    120c:	b6 01       	movw	r22, r12
    120e:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1212:	9b 01       	movw	r18, r22
    1214:	ac 01       	movw	r20, r24
    1216:	c5 01       	movw	r24, r10
    1218:	b4 01       	movw	r22, r8
    121a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    121e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    1222:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1224:	f8 a1       	ldd	r31, Y+32	; 0x20
    1226:	71 83       	std	Z+1, r23	; 0x01
    1228:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    122a:	ef 81       	ldd	r30, Y+7	; 0x07
    122c:	f8 85       	ldd	r31, Y+8	; 0x08
    122e:	80 81       	ld	r24, Z
    1230:	91 81       	ldd	r25, Z+1	; 0x01
    1232:	90 93 1d 01 	sts	0x011D, r25
    1236:	80 93 1c 01 	sts	0x011C, r24
    y_robot_prev     = *y_robot;
    123a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    123c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    123e:	80 81       	ld	r24, Z
    1240:	91 81       	ldd	r25, Z+1	; 0x01
    1242:	90 93 1b 01 	sts	0x011B, r25
    1246:	80 93 1a 01 	sts	0x011A, r24
    orientation_prev = *orientation;
    124a:	ef 8d       	ldd	r30, Y+31	; 0x1f
    124c:	f8 a1       	ldd	r31, Y+32	; 0x20
    124e:	80 81       	ld	r24, Z
    1250:	91 81       	ldd	r25, Z+1	; 0x01
    1252:	90 93 1f 01 	sts	0x011F, r25
    1256:	80 93 1e 01 	sts	0x011E, r24
    
    return 1;
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	2c c1       	rjmp	.+600    	; 0x14b6 <__stack+0x9b7>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    125e:	e0 91 02 01 	lds	r30, 0x0102
    1262:	f0 91 03 01 	lds	r31, 0x0103
    1266:	4c 01       	movw	r8, r24
    1268:	8e 1a       	sub	r8, r30
    126a:	9f 0a       	sbc	r9, r31
    126c:	90 92 45 01 	sts	0x0145, r9
    1270:	80 92 44 01 	sts	0x0144, r8
    1274:	80 91 00 01 	lds	r24, 0x0100
    1278:	90 91 01 01 	lds	r25, 0x0101
    127c:	08 1b       	sub	r16, r24
    127e:	19 0b       	sbc	r17, r25
    1280:	10 93 47 01 	sts	0x0147, r17
    1284:	00 93 46 01 	sts	0x0146, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    1288:	3b 01       	movw	r6, r22
    128a:	6e 1a       	sub	r6, r30
    128c:	7f 0a       	sbc	r7, r31
    128e:	70 92 41 01 	sts	0x0141, r7
    1292:	60 92 40 01 	sts	0x0140, r6
    1296:	e8 1a       	sub	r14, r24
    1298:	f9 0a       	sbc	r15, r25
    129a:	f0 92 43 01 	sts	0x0143, r15
    129e:	e0 92 42 01 	sts	0x0142, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    12a2:	2a 01       	movw	r4, r20
    12a4:	4e 1a       	sub	r4, r30
    12a6:	5f 0a       	sbc	r5, r31
    12a8:	50 92 3d 01 	sts	0x013D, r5
    12ac:	40 92 3c 01 	sts	0x013C, r4
    12b0:	16 01       	movw	r2, r12
    12b2:	28 1a       	sub	r2, r24
    12b4:	39 0a       	sbc	r3, r25
    12b6:	30 92 3f 01 	sts	0x013F, r3
    12ba:	20 92 3e 01 	sts	0x013E, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    12be:	69 01       	movw	r12, r18
    12c0:	ce 1a       	sub	r12, r30
    12c2:	df 0a       	sbc	r13, r31
    12c4:	d0 92 39 01 	sts	0x0139, r13
    12c8:	c0 92 38 01 	sts	0x0138, r12
    12cc:	a8 1a       	sub	r10, r24
    12ce:	b9 0a       	sbc	r11, r25
    12d0:	b0 92 3b 01 	sts	0x013B, r11
    12d4:	a0 92 3a 01 	sts	0x013A, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    12d8:	93 01       	movw	r18, r6
    12da:	28 19       	sub	r18, r8
    12dc:	39 09       	sbc	r19, r9
    12de:	c7 01       	movw	r24, r14
    12e0:	80 1b       	sub	r24, r16
    12e2:	91 0b       	sbc	r25, r17
    12e4:	22 9f       	mul	r18, r18
    12e6:	b0 01       	movw	r22, r0
    12e8:	23 9f       	mul	r18, r19
    12ea:	70 0d       	add	r23, r0
    12ec:	70 0d       	add	r23, r0
    12ee:	11 24       	eor	r1, r1
    12f0:	88 9f       	mul	r24, r24
    12f2:	90 01       	movw	r18, r0
    12f4:	89 9f       	mul	r24, r25
    12f6:	30 0d       	add	r19, r0
    12f8:	30 0d       	add	r19, r0
    12fa:	11 24       	eor	r1, r1
    12fc:	62 0f       	add	r22, r18
    12fe:	73 1f       	adc	r23, r19
    1300:	88 27       	eor	r24, r24
    1302:	77 fd       	sbrc	r23, 7
    1304:	80 95       	com	r24
    1306:	98 2f       	mov	r25, r24
    1308:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    130c:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
    1310:	60 93 20 01 	sts	0x0120, r22
    1314:	70 93 21 01 	sts	0x0121, r23
    1318:	80 93 22 01 	sts	0x0122, r24
    131c:	90 93 23 01 	sts	0x0123, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    1320:	92 01       	movw	r18, r4
    1322:	28 19       	sub	r18, r8
    1324:	39 09       	sbc	r19, r9
    1326:	c1 01       	movw	r24, r2
    1328:	80 1b       	sub	r24, r16
    132a:	91 0b       	sbc	r25, r17
    132c:	22 9f       	mul	r18, r18
    132e:	b0 01       	movw	r22, r0
    1330:	23 9f       	mul	r18, r19
    1332:	70 0d       	add	r23, r0
    1334:	70 0d       	add	r23, r0
    1336:	11 24       	eor	r1, r1
    1338:	88 9f       	mul	r24, r24
    133a:	90 01       	movw	r18, r0
    133c:	89 9f       	mul	r24, r25
    133e:	30 0d       	add	r19, r0
    1340:	30 0d       	add	r19, r0
    1342:	11 24       	eor	r1, r1
    1344:	62 0f       	add	r22, r18
    1346:	73 1f       	adc	r23, r19
    1348:	88 27       	eor	r24, r24
    134a:	77 fd       	sbrc	r23, 7
    134c:	80 95       	com	r24
    134e:	98 2f       	mov	r25, r24
    1350:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1354:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
    1358:	60 93 24 01 	sts	0x0124, r22
    135c:	70 93 25 01 	sts	0x0125, r23
    1360:	80 93 26 01 	sts	0x0126, r24
    1364:	90 93 27 01 	sts	0x0127, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    1368:	96 01       	movw	r18, r12
    136a:	28 19       	sub	r18, r8
    136c:	39 09       	sbc	r19, r9
    136e:	c5 01       	movw	r24, r10
    1370:	80 1b       	sub	r24, r16
    1372:	91 0b       	sbc	r25, r17
    1374:	22 9f       	mul	r18, r18
    1376:	b0 01       	movw	r22, r0
    1378:	23 9f       	mul	r18, r19
    137a:	70 0d       	add	r23, r0
    137c:	70 0d       	add	r23, r0
    137e:	11 24       	eor	r1, r1
    1380:	88 9f       	mul	r24, r24
    1382:	90 01       	movw	r18, r0
    1384:	89 9f       	mul	r24, r25
    1386:	30 0d       	add	r19, r0
    1388:	30 0d       	add	r19, r0
    138a:	11 24       	eor	r1, r1
    138c:	62 0f       	add	r22, r18
    138e:	73 1f       	adc	r23, r19
    1390:	88 27       	eor	r24, r24
    1392:	77 fd       	sbrc	r23, 7
    1394:	80 95       	com	r24
    1396:	98 2f       	mov	r25, r24
    1398:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    139c:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
    13a0:	60 93 28 01 	sts	0x0128, r22
    13a4:	70 93 29 01 	sts	0x0129, r23
    13a8:	80 93 2a 01 	sts	0x012A, r24
    13ac:	90 93 2b 01 	sts	0x012B, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    13b0:	92 01       	movw	r18, r4
    13b2:	26 19       	sub	r18, r6
    13b4:	37 09       	sbc	r19, r7
    13b6:	c1 01       	movw	r24, r2
    13b8:	8e 19       	sub	r24, r14
    13ba:	9f 09       	sbc	r25, r15
    13bc:	22 9f       	mul	r18, r18
    13be:	b0 01       	movw	r22, r0
    13c0:	23 9f       	mul	r18, r19
    13c2:	70 0d       	add	r23, r0
    13c4:	70 0d       	add	r23, r0
    13c6:	11 24       	eor	r1, r1
    13c8:	88 9f       	mul	r24, r24
    13ca:	90 01       	movw	r18, r0
    13cc:	89 9f       	mul	r24, r25
    13ce:	30 0d       	add	r19, r0
    13d0:	30 0d       	add	r19, r0
    13d2:	11 24       	eor	r1, r1
    13d4:	62 0f       	add	r22, r18
    13d6:	73 1f       	adc	r23, r19
    13d8:	88 27       	eor	r24, r24
    13da:	77 fd       	sbrc	r23, 7
    13dc:	80 95       	com	r24
    13de:	98 2f       	mov	r25, r24
    13e0:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    13e4:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
    13e8:	60 93 2c 01 	sts	0x012C, r22
    13ec:	70 93 2d 01 	sts	0x012D, r23
    13f0:	80 93 2e 01 	sts	0x012E, r24
    13f4:	90 93 2f 01 	sts	0x012F, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    13f8:	96 01       	movw	r18, r12
    13fa:	26 19       	sub	r18, r6
    13fc:	37 09       	sbc	r19, r7
    13fe:	c5 01       	movw	r24, r10
    1400:	8e 19       	sub	r24, r14
    1402:	9f 09       	sbc	r25, r15
    1404:	22 9f       	mul	r18, r18
    1406:	b0 01       	movw	r22, r0
    1408:	23 9f       	mul	r18, r19
    140a:	70 0d       	add	r23, r0
    140c:	70 0d       	add	r23, r0
    140e:	11 24       	eor	r1, r1
    1410:	88 9f       	mul	r24, r24
    1412:	90 01       	movw	r18, r0
    1414:	89 9f       	mul	r24, r25
    1416:	30 0d       	add	r19, r0
    1418:	30 0d       	add	r19, r0
    141a:	11 24       	eor	r1, r1
    141c:	62 0f       	add	r22, r18
    141e:	73 1f       	adc	r23, r19
    1420:	88 27       	eor	r24, r24
    1422:	77 fd       	sbrc	r23, 7
    1424:	80 95       	com	r24
    1426:	98 2f       	mov	r25, r24
    1428:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    142c:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
    1430:	60 93 30 01 	sts	0x0130, r22
    1434:	70 93 31 01 	sts	0x0131, r23
    1438:	80 93 32 01 	sts	0x0132, r24
    143c:	90 93 33 01 	sts	0x0133, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    1440:	c4 18       	sub	r12, r4
    1442:	d5 08       	sbc	r13, r5
    1444:	a2 18       	sub	r10, r2
    1446:	b3 08       	sbc	r11, r3
    1448:	cc 9c       	mul	r12, r12
    144a:	b0 01       	movw	r22, r0
    144c:	cd 9c       	mul	r12, r13
    144e:	70 0d       	add	r23, r0
    1450:	70 0d       	add	r23, r0
    1452:	11 24       	eor	r1, r1
    1454:	aa 9c       	mul	r10, r10
    1456:	c0 01       	movw	r24, r0
    1458:	ab 9c       	mul	r10, r11
    145a:	90 0d       	add	r25, r0
    145c:	90 0d       	add	r25, r0
    145e:	11 24       	eor	r1, r1
    1460:	68 0f       	add	r22, r24
    1462:	79 1f       	adc	r23, r25
    1464:	88 27       	eor	r24, r24
    1466:	77 fd       	sbrc	r23, 7
    1468:	80 95       	com	r24
    146a:	98 2f       	mov	r25, r24
    146c:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1470:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
    1474:	60 93 34 01 	sts	0x0134, r22
    1478:	70 93 35 01 	sts	0x0135, r23
    147c:	80 93 36 01 	sts	0x0136, r24
    1480:	90 93 37 01 	sts	0x0137, r25
    1484:	00 e2       	ldi	r16, 0x20	; 32
    1486:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    1488:	e1 2c       	mov	r14, r1
    148a:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    148c:	1e 82       	std	Y+6, r1	; 0x06
    148e:	1d 82       	std	Y+5, r1	; 0x05
    1490:	1a 82       	std	Y+2, r1	; 0x02
    1492:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    1494:	21 2c       	mov	r2, r1
    1496:	68 94       	set
    1498:	33 24       	eor	r3, r3
    149a:	36 f8       	bld	r3, 6
    149c:	0f 2e       	mov	r0, r31
    149e:	fc e1       	ldi	r31, 0x1C	; 28
    14a0:	4f 2e       	mov	r4, r31
    14a2:	f0 2d       	mov	r31, r0
    14a4:	0f 2e       	mov	r0, r31
    14a6:	f6 e4       	ldi	r31, 0x46	; 70
    14a8:	5f 2e       	mov	r5, r31
    14aa:	f0 2d       	mov	r31, r0
    14ac:	61 2c       	mov	r6, r1
    14ae:	71 2c       	mov	r7, r1
    14b0:	81 2c       	mov	r8, r1
    14b2:	91 2c       	mov	r9, r1
    14b4:	2b c8       	rjmp	.-4010   	; 0x50c <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    14b6:	28 96       	adiw	r28, 0x08	; 8
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	1f 91       	pop	r17
    14c8:	0f 91       	pop	r16
    14ca:	ff 90       	pop	r15
    14cc:	ef 90       	pop	r14
    14ce:	df 90       	pop	r13
    14d0:	cf 90       	pop	r12
    14d2:	bf 90       	pop	r11
    14d4:	af 90       	pop	r10
    14d6:	9f 90       	pop	r9
    14d8:	8f 90       	pop	r8
    14da:	7f 90       	pop	r7
    14dc:	6f 90       	pop	r6
    14de:	5f 90       	pop	r5
    14e0:	4f 90       	pop	r4
    14e2:	3f 90       	pop	r3
    14e4:	2f 90       	pop	r2
    14e6:	08 95       	ret

000014e8 <calculate_diff_theta>:


// --------------------------------------------------------------
// CALCULATE ERROR IN ORIENTATION and OPTIMAL TURNING
// --------------------------------------------------------------
void calculate_diff_theta(float theta_des, float* err_theta, int* dir_to_turn){
    14e8:	2f 92       	push	r2
    14ea:	3f 92       	push	r3
    14ec:	4f 92       	push	r4
    14ee:	5f 92       	push	r5
    14f0:	6f 92       	push	r6
    14f2:	7f 92       	push	r7
    14f4:	8f 92       	push	r8
    14f6:	9f 92       	push	r9
    14f8:	af 92       	push	r10
    14fa:	bf 92       	push	r11
    14fc:	cf 92       	push	r12
    14fe:	df 92       	push	r13
    1500:	ef 92       	push	r14
    1502:	ff 92       	push	r15
    1504:	0f 93       	push	r16
    1506:	1f 93       	push	r17
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	6b 01       	movw	r12, r22
    150e:	7c 01       	movw	r14, r24
    1510:	ea 01       	movw	r28, r20
    1512:	89 01       	movw	r16, r18
    
    float angle_dir_aux = theta_des-180;
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	44 e3       	ldi	r20, 0x34	; 52
    151a:	53 e4       	ldi	r21, 0x43	; 67
    151c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1520:	96 2e       	mov	r9, r22
    1522:	87 2e       	mov	r8, r23
    1524:	38 2e       	mov	r3, r24
    1526:	29 2e       	mov	r2, r25
    float add_360 = 0;
    if (angle_dir_aux < -180)
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	44 e3       	ldi	r20, 0x34	; 52
    152e:	53 ec       	ldi	r21, 0xC3	; 195
    1530:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    1534:	88 23       	and	r24, r24
    1536:	0c f0       	brlt	.+2      	; 0x153a <calculate_diff_theta+0x52>
    1538:	c8 c0       	rjmp	.+400    	; 0x16ca <calculate_diff_theta+0x1e2>
    {
        angle_dir_aux += 360;
    153a:	20 e0       	ldi	r18, 0x00	; 0
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	44 eb       	ldi	r20, 0xB4	; 180
    1540:	53 e4       	ldi	r21, 0x43	; 67
    1542:	69 2d       	mov	r22, r9
    1544:	78 2d       	mov	r23, r8
    1546:	83 2d       	mov	r24, r3
    1548:	92 2d       	mov	r25, r2
    154a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    154e:	26 2e       	mov	r2, r22
    1550:	37 2e       	mov	r3, r23
    1552:	88 2e       	mov	r8, r24
    1554:	99 2e       	mov	r9, r25
            *err_theta = (theta_robot+360) - theta_des;
        else
            *err_theta = (theta_robot) - theta_des;
        *dir_to_turn = 1;
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1556:	a0 90 56 01 	lds	r10, 0x0156
    155a:	b0 90 57 01 	lds	r11, 0x0157
    155e:	b5 01       	movw	r22, r10
    1560:	88 27       	eor	r24, r24
    1562:	77 fd       	sbrc	r23, 7
    1564:	80 95       	com	r24
    1566:	98 2f       	mov	r25, r24
    1568:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    156c:	2b 01       	movw	r4, r22
    156e:	3c 01       	movw	r6, r24
    1570:	9b 01       	movw	r18, r22
    1572:	ac 01       	movw	r20, r24
    1574:	c7 01       	movw	r24, r14
    1576:	b6 01       	movw	r22, r12
    1578:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    157c:	88 23       	and	r24, r24
    157e:	0c f0       	brlt	.+2      	; 0x1582 <calculate_diff_theta+0x9a>
    1580:	4e c0       	rjmp	.+156    	; 0x161e <calculate_diff_theta+0x136>
    1582:	52 c0       	rjmp	.+164    	; 0x1628 <calculate_diff_theta+0x140>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
    1584:	a3 01       	movw	r20, r6
    1586:	92 01       	movw	r18, r4
    1588:	c7 01       	movw	r24, r14
    158a:	b6 01       	movw	r22, r12
    158c:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    1590:	88 23       	and	r24, r24
    1592:	74 f0       	brlt	.+28     	; 0x15b0 <calculate_diff_theta+0xc8>
    {
        *err_theta = theta_des - theta_robot;
    1594:	a3 01       	movw	r20, r6
    1596:	92 01       	movw	r18, r4
    1598:	c7 01       	movw	r24, r14
    159a:	b6 01       	movw	r22, r12
    159c:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    15a0:	68 83       	st	Y, r22
    15a2:	79 83       	std	Y+1, r23	; 0x01
    15a4:	8a 83       	std	Y+2, r24	; 0x02
    15a6:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
    15a8:	f8 01       	movw	r30, r16
    15aa:	11 82       	std	Z+1, r1	; 0x01
    15ac:	10 82       	st	Z, r1
    15ae:	a6 c0       	rjmp	.+332    	; 0x16fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > theta_des))
    15b0:	a3 01       	movw	r20, r6
    15b2:	92 01       	movw	r18, r4
    15b4:	69 2d       	mov	r22, r9
    15b6:	78 2d       	mov	r23, r8
    15b8:	83 2d       	mov	r24, r3
    15ba:	92 2d       	mov	r25, r2
    15bc:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    15c0:	18 16       	cp	r1, r24
    15c2:	4c f0       	brlt	.+18     	; 0x15d6 <calculate_diff_theta+0xee>
    15c4:	a3 01       	movw	r20, r6
    15c6:	92 01       	movw	r18, r4
    15c8:	c7 01       	movw	r24, r14
    15ca:	b6 01       	movw	r22, r12
    15cc:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    15d0:	88 23       	and	r24, r24
    15d2:	0c f0       	brlt	.+2      	; 0x15d6 <calculate_diff_theta+0xee>
    15d4:	93 c0       	rjmp	.+294    	; 0x16fc <calculate_diff_theta+0x214>
    {
        if (theta_robot < 0)
    15d6:	bb 20       	and	r11, r11
    15d8:	94 f4       	brge	.+36     	; 0x15fe <calculate_diff_theta+0x116>
            *err_theta = (theta_robot+360) - theta_des;
    15da:	b5 01       	movw	r22, r10
    15dc:	68 59       	subi	r22, 0x98	; 152
    15de:	7e 4f       	sbci	r23, 0xFE	; 254
    15e0:	88 27       	eor	r24, r24
    15e2:	77 fd       	sbrc	r23, 7
    15e4:	80 95       	com	r24
    15e6:	98 2f       	mov	r25, r24
    15e8:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    15ec:	a7 01       	movw	r20, r14
    15ee:	96 01       	movw	r18, r12
    15f0:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    15f4:	68 83       	st	Y, r22
    15f6:	79 83       	std	Y+1, r23	; 0x01
    15f8:	8a 83       	std	Y+2, r24	; 0x02
    15fa:	9b 83       	std	Y+3, r25	; 0x03
    15fc:	0a c0       	rjmp	.+20     	; 0x1612 <calculate_diff_theta+0x12a>
        else
            *err_theta = (theta_robot) - theta_des;
    15fe:	a7 01       	movw	r20, r14
    1600:	96 01       	movw	r18, r12
    1602:	c3 01       	movw	r24, r6
    1604:	b2 01       	movw	r22, r4
    1606:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    160a:	68 83       	st	Y, r22
    160c:	79 83       	std	Y+1, r23	; 0x01
    160e:	8a 83       	std	Y+2, r24	; 0x02
    1610:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	f8 01       	movw	r30, r16
    1618:	91 83       	std	Z+1, r25	; 0x01
    161a:	80 83       	st	Z, r24
    161c:	6f c0       	rjmp	.+222    	; 0x16fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    161e:	fc e4       	ldi	r31, 0x4C	; 76
    1620:	af 16       	cp	r10, r31
    1622:	ff ef       	ldi	r31, 0xFF	; 255
    1624:	bf 06       	cpc	r11, r31
    1626:	74 f4       	brge	.+28     	; 0x1644 <calculate_diff_theta+0x15c>
    1628:	a3 01       	movw	r20, r6
    162a:	92 01       	movw	r18, r4
    162c:	62 2d       	mov	r22, r2
    162e:	73 2d       	mov	r23, r3
    1630:	88 2d       	mov	r24, r8
    1632:	99 2d       	mov	r25, r9
    1634:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    1638:	18 16       	cp	r1, r24
    163a:	2c f1       	brlt	.+74     	; 0x1686 <calculate_diff_theta+0x19e>
    163c:	85 eb       	ldi	r24, 0xB5	; 181
    163e:	a8 16       	cp	r10, r24
    1640:	b1 04       	cpc	r11, r1
    1642:	0c f5       	brge	.+66     	; 0x1686 <calculate_diff_theta+0x19e>
    {
        if (theta_robot < 0)
    1644:	bb 20       	and	r11, r11
    1646:	5c f4       	brge	.+22     	; 0x165e <calculate_diff_theta+0x176>
            *err_theta = theta_des - theta_robot;
    1648:	a3 01       	movw	r20, r6
    164a:	92 01       	movw	r18, r4
    164c:	c7 01       	movw	r24, r14
    164e:	b6 01       	movw	r22, r12
    1650:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1654:	68 83       	st	Y, r22
    1656:	79 83       	std	Y+1, r23	; 0x01
    1658:	8a 83       	std	Y+2, r24	; 0x02
    165a:	9b 83       	std	Y+3, r25	; 0x03
    165c:	10 c0       	rjmp	.+32     	; 0x167e <calculate_diff_theta+0x196>
        else
            *err_theta = (theta_des + 360) - theta_robot;
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	44 eb       	ldi	r20, 0xB4	; 180
    1664:	53 e4       	ldi	r21, 0x43	; 67
    1666:	c7 01       	movw	r24, r14
    1668:	b6 01       	movw	r22, r12
    166a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    166e:	a3 01       	movw	r20, r6
    1670:	92 01       	movw	r18, r4
    1672:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1676:	68 83       	st	Y, r22
    1678:	79 83       	std	Y+1, r23	; 0x01
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
    167e:	f8 01       	movw	r30, r16
    1680:	11 82       	std	Z+1, r1	; 0x01
    1682:	10 82       	st	Z, r1
    1684:	3b c0       	rjmp	.+118    	; 0x16fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && (theta_robot > theta_des && theta_robot < angle_dir_aux))
    1686:	a3 01       	movw	r20, r6
    1688:	92 01       	movw	r18, r4
    168a:	c7 01       	movw	r24, r14
    168c:	b6 01       	movw	r22, r12
    168e:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    1692:	88 23       	and	r24, r24
    1694:	9c f5       	brge	.+102    	; 0x16fc <calculate_diff_theta+0x214>
    1696:	a3 01       	movw	r20, r6
    1698:	92 01       	movw	r18, r4
    169a:	62 2d       	mov	r22, r2
    169c:	73 2d       	mov	r23, r3
    169e:	88 2d       	mov	r24, r8
    16a0:	99 2d       	mov	r25, r9
    16a2:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    16a6:	18 16       	cp	r1, r24
    16a8:	4c f5       	brge	.+82     	; 0x16fc <calculate_diff_theta+0x214>
    {
        *err_theta = theta_robot - theta_des;
    16aa:	a7 01       	movw	r20, r14
    16ac:	96 01       	movw	r18, r12
    16ae:	c3 01       	movw	r24, r6
    16b0:	b2 01       	movw	r22, r4
    16b2:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    16b6:	68 83       	st	Y, r22
    16b8:	79 83       	std	Y+1, r23	; 0x01
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	f8 01       	movw	r30, r16
    16c4:	91 83       	std	Z+1, r25	; 0x01
    16c6:	80 83       	st	Z, r24
    16c8:	19 c0       	rjmp	.+50     	; 0x16fc <calculate_diff_theta+0x214>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
    16ca:	a0 90 56 01 	lds	r10, 0x0156
    16ce:	b0 90 57 01 	lds	r11, 0x0157
    16d2:	b5 01       	movw	r22, r10
    16d4:	88 27       	eor	r24, r24
    16d6:	77 fd       	sbrc	r23, 7
    16d8:	80 95       	com	r24
    16da:	98 2f       	mov	r25, r24
    16dc:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    16e0:	2b 01       	movw	r4, r22
    16e2:	3c 01       	movw	r6, r24
    16e4:	9b 01       	movw	r18, r22
    16e6:	ac 01       	movw	r20, r24
    16e8:	69 2d       	mov	r22, r9
    16ea:	78 2d       	mov	r23, r8
    16ec:	83 2d       	mov	r24, r3
    16ee:	92 2d       	mov	r25, r2
    16f0:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	0c f0       	brlt	.+2      	; 0x16fa <calculate_diff_theta+0x212>
    16f8:	45 cf       	rjmp	.-374    	; 0x1584 <calculate_diff_theta+0x9c>
    16fa:	5a cf       	rjmp	.-332    	; 0x15b0 <calculate_diff_theta+0xc8>
        *dir_to_turn = 1;
    }else {
        err_theta = 0;
        dir_to_turn = 0;
    }
}
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	ff 90       	pop	r15
    1706:	ef 90       	pop	r14
    1708:	df 90       	pop	r13
    170a:	cf 90       	pop	r12
    170c:	bf 90       	pop	r11
    170e:	af 90       	pop	r10
    1710:	9f 90       	pop	r9
    1712:	8f 90       	pop	r8
    1714:	7f 90       	pop	r7
    1716:	6f 90       	pop	r6
    1718:	5f 90       	pop	r5
    171a:	4f 90       	pop	r4
    171c:	3f 90       	pop	r3
    171e:	2f 90       	pop	r2
    1720:	08 95       	ret

00001722 <turn_robot>:

// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO TURN ROBOT
// --------------------------------------------------------------
void turn_robot(float theta, int dir, float diff){
	if (dir == 1) {             // Move with a right curve
    1722:	41 30       	cpi	r20, 0x01	; 1
    1724:	51 05       	cpc	r21, r1
    1726:	c9 f4       	brne	.+50     	; 0x175a <turn_robot+0x38>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
    1728:	20 e0       	ldi	r18, 0x00	; 0
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	40 e0       	ldi	r20, 0x00	; 0
    172e:	51 e4       	ldi	r21, 0x41	; 65
    1730:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1734:	20 e0       	ldi	r18, 0x00	; 0
    1736:	30 e8       	ldi	r19, 0x80	; 128
    1738:	49 e0       	ldi	r20, 0x09	; 9
    173a:	55 e4       	ldi	r21, 0x45	; 69
    173c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1740:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    1744:	70 93 8b 00 	sts	0x008B, r23
    1748:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
    174c:	70 93 8d 00 	sts	0x008D, r23
    1750:	60 93 8c 00 	sts	0x008C, r22
		
		set(PORTB,3);
    1754:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTD,3);
    1756:	5b 98       	cbi	0x0b, 3	; 11
    1758:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1C = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);;
    175a:	20 e0       	ldi	r18, 0x00	; 0
    175c:	30 e0       	ldi	r19, 0x00	; 0
    175e:	40 e0       	ldi	r20, 0x00	; 0
    1760:	51 e4       	ldi	r21, 0x41	; 65
    1762:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	30 e8       	ldi	r19, 0x80	; 128
    176a:	49 e0       	ldi	r20, 0x09	; 9
    176c:	55 e4       	ldi	r21, 0x45	; 69
    176e:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1772:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    1776:	70 93 8d 00 	sts	0x008D, r23
    177a:	60 93 8c 00 	sts	0x008C, r22
		OCR1B = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);
    177e:	70 93 8b 00 	sts	0x008B, r23
    1782:	60 93 8a 00 	sts	0x008A, r22
		
		clear(PORTB,3);
    1786:	2b 98       	cbi	0x05, 3	; 5
		set(PORTD,3);
    1788:	5b 9a       	sbi	0x0b, 3	; 11
    178a:	08 95       	ret

0000178c <move_robot>:
// --------------------------------------------------------------

// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO MOVE ROBOT FORWARD
// --------------------------------------------------------------
void move_robot(float theta, int dir){
    178c:	cf 92       	push	r12
    178e:	df 92       	push	r13
    1790:	ef 92       	push	r14
    1792:	ff 92       	push	r15
    1794:	6b 01       	movw	r12, r22
    1796:	7c 01       	movw	r14, r24
	if (dir == 1) {             // Move with a right curve
    1798:	41 30       	cpi	r20, 0x01	; 1
    179a:	51 05       	cpc	r21, r1
    179c:	c1 f5       	brne	.+112    	; 0x180e <move_robot+0x82>
		OCR1C = PWM_SPEED_FWD_LFT;
    179e:	88 eb       	ldi	r24, 0xB8	; 184
    17a0:	9b e0       	ldi	r25, 0x0B	; 11
    17a2:	90 93 8d 00 	sts	0x008D, r25
    17a6:	80 93 8c 00 	sts	0x008C, r24
		if (theta> TURNING_ANGLE)
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	44 e3       	ldi	r20, 0x34	; 52
    17b0:	53 e4       	ldi	r21, 0x43	; 67
    17b2:	c7 01       	movw	r24, r14
    17b4:	b6 01       	movw	r22, r12
    17b6:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    17ba:	18 16       	cp	r1, r24
    17bc:	3c f4       	brge	.+14     	; 0x17cc <move_robot+0x40>
		OCR1B = PWM_MIN_RGHT;
    17be:	88 e9       	ldi	r24, 0x98	; 152
    17c0:	98 e0       	ldi	r25, 0x08	; 8
    17c2:	90 93 8b 00 	sts	0x008B, r25
    17c6:	80 93 8a 00 	sts	0x008A, r24
    17ca:	58 c0       	rjmp	.+176    	; 0x187c <move_robot+0xf0>
		else
		OCR1B = PWM_MIN_RGHT+((TURNING_ANGLE - theta)/TURNING_ANGLE)*(PWM_SPEED_FWD_RGHT-PWM_MIN_RGHT);
    17cc:	a7 01       	movw	r20, r14
    17ce:	96 01       	movw	r18, r12
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	84 e3       	ldi	r24, 0x34	; 52
    17d6:	93 e4       	ldi	r25, 0x43	; 67
    17d8:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    17dc:	20 e0       	ldi	r18, 0x00	; 0
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	44 e3       	ldi	r20, 0x34	; 52
    17e2:	53 e4       	ldi	r21, 0x43	; 67
    17e4:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	4f e2       	ldi	r20, 0x2F	; 47
    17ee:	54 e4       	ldi	r21, 0x44	; 68
    17f0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e8       	ldi	r19, 0x80	; 128
    17f8:	49 e0       	ldi	r20, 0x09	; 9
    17fa:	55 e4       	ldi	r21, 0x45	; 69
    17fc:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1800:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixunssfsi>
    1804:	70 93 8b 00 	sts	0x008B, r23
    1808:	60 93 8a 00 	sts	0x008A, r22
    180c:	37 c0       	rjmp	.+110    	; 0x187c <move_robot+0xf0>
	}
	else
	{
		// Move with a left curve
		OCR1B = PWM_SPEED_FWD_RGHT;
    180e:	84 e5       	ldi	r24, 0x54	; 84
    1810:	9b e0       	ldi	r25, 0x0B	; 11
    1812:	90 93 8b 00 	sts	0x008B, r25
    1816:	80 93 8a 00 	sts	0x008A, r24
		if (theta> TURNING_ANGLE)
    181a:	20 e0       	ldi	r18, 0x00	; 0
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	44 e3       	ldi	r20, 0x34	; 52
    1820:	53 e4       	ldi	r21, 0x43	; 67
    1822:	c7 01       	movw	r24, r14
    1824:	b6 01       	movw	r22, r12
    1826:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    182a:	18 16       	cp	r1, r24
    182c:	3c f4       	brge	.+14     	; 0x183c <move_robot+0xb0>
		OCR1C = PWM_MIN_LEFT;
    182e:	88 e9       	ldi	r24, 0x98	; 152
    1830:	98 e0       	ldi	r25, 0x08	; 8
    1832:	90 93 8d 00 	sts	0x008D, r25
    1836:	80 93 8c 00 	sts	0x008C, r24
    183a:	20 c0       	rjmp	.+64     	; 0x187c <move_robot+0xf0>
		else
		OCR1C = PWM_MIN_LEFT+((TURNING_ANGLE - theta)/TURNING_ANGLE)*(PWM_SPEED_FWD_LFT-PWM_MIN_LEFT);
    183c:	a7 01       	movw	r20, r14
    183e:	96 01       	movw	r18, r12
    1840:	60 e0       	ldi	r22, 0x00	; 0
    1842:	70 e0       	ldi	r23, 0x00	; 0
    1844:	84 e3       	ldi	r24, 0x34	; 52
    1846:	93 e4       	ldi	r25, 0x43	; 67
    1848:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    184c:	20 e0       	ldi	r18, 0x00	; 0
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	44 e3       	ldi	r20, 0x34	; 52
    1852:	53 e4       	ldi	r21, 0x43	; 67
    1854:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
    1858:	20 e0       	ldi	r18, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	48 e4       	ldi	r20, 0x48	; 72
    185e:	54 e4       	ldi	r21, 0x44	; 68
    1860:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1864:	20 e0       	ldi	r18, 0x00	; 0
    1866:	30 e8       	ldi	r19, 0x80	; 128
    1868:	49 e0       	ldi	r20, 0x09	; 9
    186a:	55 e4       	ldi	r21, 0x45	; 69
    186c:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1870:	0e 94 6d 18 	call	0x30da	; 0x30da <__fixunssfsi>
    1874:	70 93 8d 00 	sts	0x008D, r23
    1878:	60 93 8c 00 	sts	0x008C, r22
		
	}
	
	clear(PORTB,3);
    187c:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    187e:	5b 98       	cbi	0x0b, 3	; 11
}
    1880:	ff 90       	pop	r15
    1882:	ef 90       	pop	r14
    1884:	df 90       	pop	r13
    1886:	cf 90       	pop	r12
    1888:	08 95       	ret

0000188a <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
    188a:	01 97       	sbiw	r24, 0x01	; 1
    188c:	09 f5       	brne	.+66     	; 0x18d0 <move_robot_to_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
    188e:	88 eb       	ldi	r24, 0xB8	; 184
    1890:	9b e0       	ldi	r25, 0x0B	; 11
    1892:	90 93 8b 00 	sts	0x008B, r25
    1896:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
    189a:	88 27       	eor	r24, r24
    189c:	77 fd       	sbrc	r23, 7
    189e:	80 95       	com	r24
    18a0:	98 2f       	mov	r25, r24
    18a2:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    18a6:	2d ec       	ldi	r18, 0xCD	; 205
    18a8:	3c ec       	ldi	r19, 0xCC	; 204
    18aa:	4c ec       	ldi	r20, 0xCC	; 204
    18ac:	5d e3       	ldi	r21, 0x3D	; 61
    18ae:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e4       	ldi	r19, 0x40	; 64
    18b6:	45 e3       	ldi	r20, 0x35	; 53
    18b8:	55 e4       	ldi	r21, 0x45	; 69
    18ba:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    18be:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    18c2:	70 93 8d 00 	sts	0x008D, r23
    18c6:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
    18ca:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    18cc:	5b 98       	cbi	0x0b, 3	; 11
    18ce:	08 95       	ret
	}
	else
	{                      // Move with a right curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
    18d0:	88 27       	eor	r24, r24
    18d2:	77 fd       	sbrc	r23, 7
    18d4:	80 95       	com	r24
    18d6:	98 2f       	mov	r25, r24
    18d8:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    18dc:	2d ec       	ldi	r18, 0xCD	; 205
    18de:	3c ec       	ldi	r19, 0xCC	; 204
    18e0:	4c ec       	ldi	r20, 0xCC	; 204
    18e2:	5d e3       	ldi	r21, 0x3D	; 61
    18e4:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    18e8:	20 e0       	ldi	r18, 0x00	; 0
    18ea:	30 e8       	ldi	r19, 0x80	; 128
    18ec:	4b e3       	ldi	r20, 0x3B	; 59
    18ee:	55 e4       	ldi	r21, 0x45	; 69
    18f0:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    18f4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    18f8:	70 93 8b 00 	sts	0x008B, r23
    18fc:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
    1900:	84 e5       	ldi	r24, 0x54	; 84
    1902:	9b e0       	ldi	r25, 0x0B	; 11
    1904:	90 93 8d 00 	sts	0x008D, r25
    1908:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
    190c:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    190e:	5b 98       	cbi	0x0b, 3	; 11
    1910:	08 95       	ret

00001912 <move_robot_after_get_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_after_get_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
    1912:	01 97       	sbiw	r24, 0x01	; 1
    1914:	09 f5       	brne	.+66     	; 0x1958 <move_robot_after_get_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT);
    1916:	84 e0       	ldi	r24, 0x04	; 4
    1918:	90 e1       	ldi	r25, 0x10	; 16
    191a:	90 93 8b 00 	sts	0x008B, r25
    191e:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT+diff*Kp_move_puck);
    1922:	88 27       	eor	r24, r24
    1924:	77 fd       	sbrc	r23, 7
    1926:	80 95       	com	r24
    1928:	98 2f       	mov	r25, r24
    192a:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    192e:	2d ec       	ldi	r18, 0xCD	; 205
    1930:	3c ec       	ldi	r19, 0xCC	; 204
    1932:	4c ec       	ldi	r20, 0xCC	; 204
    1934:	5d e3       	ldi	r21, 0x3D	; 61
    1936:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e2       	ldi	r19, 0x20	; 32
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	55 e4       	ldi	r21, 0x45	; 69
    1942:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1946:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    194a:	70 93 8d 00 	sts	0x008D, r23
    194e:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
    1952:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1954:	5b 98       	cbi	0x0b, 3	; 11
    1956:	08 95       	ret
	}
	else
	{                      // Move with a right curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT+diff*Kp_move_puck);
    1958:	88 27       	eor	r24, r24
    195a:	77 fd       	sbrc	r23, 7
    195c:	80 95       	com	r24
    195e:	98 2f       	mov	r25, r24
    1960:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1964:	2d ec       	ldi	r18, 0xCD	; 205
    1966:	3c ec       	ldi	r19, 0xCC	; 204
    1968:	4c ec       	ldi	r20, 0xCC	; 204
    196a:	5d e3       	ldi	r21, 0x3D	; 61
    196c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e2       	ldi	r19, 0x20	; 32
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	55 e4       	ldi	r21, 0x45	; 69
    1978:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    197c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    1980:	70 93 8b 00 	sts	0x008B, r23
    1984:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT);
    1988:	84 e0       	ldi	r24, 0x04	; 4
    198a:	90 e1       	ldi	r25, 0x10	; 16
    198c:	90 93 8d 00 	sts	0x008D, r25
    1990:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
    1994:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1996:	5b 98       	cbi	0x0b, 3	; 11
    1998:	08 95       	ret

0000199a <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
    199a:	10 92 8b 00 	sts	0x008B, r1
    199e:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    19a2:	10 92 8d 00 	sts	0x008D, r1
    19a6:	10 92 8c 00 	sts	0x008C, r1
    19aa:	08 95       	ret

000019ac <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
    19ac:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
    19ae:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
    19b0:	8c ef       	ldi	r24, 0xFC	; 252
    19b2:	98 e0       	ldi	r25, 0x08	; 8
    19b4:	90 93 8d 00 	sts	0x008D, r25
    19b8:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    19bc:	84 e5       	ldi	r24, 0x54	; 84
    19be:	9b e0       	ldi	r25, 0x0B	; 11
    19c0:	90 93 8b 00 	sts	0x008B, r25
    19c4:	80 93 8a 00 	sts	0x008A, r24
    19c8:	08 95       	ret

000019ca <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
    19ca:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
    19cc:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
    19ce:	8c ef       	ldi	r24, 0xFC	; 252
    19d0:	98 e0       	ldi	r25, 0x08	; 8
    19d2:	90 93 8d 00 	sts	0x008D, r25
    19d6:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    19da:	84 e5       	ldi	r24, 0x54	; 84
    19dc:	9b e0       	ldi	r25, 0x0B	; 11
    19de:	90 93 8b 00 	sts	0x008B, r25
    19e2:	80 93 8a 00 	sts	0x008A, r24
    19e6:	08 95       	ret

000019e8 <go_bwd>:
// --------------------------------------------------------------
// GO BACKWARDS
// --------------------------------------------------------------
void go_bwd(void)
{
    set(PORTB,3);
    19e8:	2b 9a       	sbi	0x05, 3	; 5
    set(PORTD,3);
    19ea:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_FWD_LFT;
    19ec:	88 eb       	ldi	r24, 0xB8	; 184
    19ee:	9b e0       	ldi	r25, 0x0B	; 11
    19f0:	90 93 8d 00 	sts	0x008D, r25
    19f4:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_FWD_RGHT;
    19f8:	84 e5       	ldi	r24, 0x54	; 84
    19fa:	9b e0       	ldi	r25, 0x0B	; 11
    19fc:	90 93 8b 00 	sts	0x008B, r25
    1a00:	80 93 8a 00 	sts	0x008A, r24
    1a04:	08 95       	ret

00001a06 <circle_left>:
// --------------------------------------------------------------
// CIRCLE_LEFT
// --------------------------------------------------------------
void circle_left()
{
	clear(PORTB,3);
    1a06:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    1a08:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
    1a0a:	80 e8       	ldi	r24, 0x80	; 128
    1a0c:	9c e0       	ldi	r25, 0x0C	; 12
    1a0e:	90 93 8b 00 	sts	0x008B, r25
    1a12:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
    1a16:	80 ea       	ldi	r24, 0xA0	; 160
    1a18:	99 e0       	ldi	r25, 0x09	; 9
    1a1a:	90 93 8d 00 	sts	0x008D, r25
    1a1e:	80 93 8c 00 	sts	0x008C, r24
    1a22:	08 95       	ret

00001a24 <circle_right>:
// --------------------------------------------------------------
// CIRCLE_RIGHT
// --------------------------------------------------------------
void circle_right()
{
	clear(PORTB,3);
    1a24:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    1a26:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
    1a28:	80 ea       	ldi	r24, 0xA0	; 160
    1a2a:	99 e0       	ldi	r25, 0x09	; 9
    1a2c:	90 93 8b 00 	sts	0x008B, r25
    1a30:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
    1a34:	80 e8       	ldi	r24, 0x80	; 128
    1a36:	9c e0       	ldi	r25, 0x0C	; 12
    1a38:	90 93 8d 00 	sts	0x008D, r25
    1a3c:	80 93 8c 00 	sts	0x008C, r24
    1a40:	08 95       	ret

00001a42 <main>:
//Variable for receiving data
char buffer_rec[PACKET_LENGTH_SYSTEM] = {0};

//Main function
int main(void)
{
    1a42:	cf 93       	push	r28
    1a44:	df 93       	push	r29
    1a46:	cd b7       	in	r28, 0x3d	; 61
    1a48:	de b7       	in	r29, 0x3e	; 62
    1a4a:	c2 54       	subi	r28, 0x42	; 66
    1a4c:	d1 09       	sbc	r29, r1
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	f8 94       	cli
    1a52:	de bf       	out	0x3e, r29	; 62
    1a54:	0f be       	out	0x3f, r0	; 63
    1a56:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
    1a58:	20 e8       	ldi	r18, 0x80	; 128
    1a5a:	25 bf       	out	0x35, r18	; 53
    1a5c:	25 bf       	out	0x35, r18	; 53
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    1a5e:	19 82       	std	Y+1, r1	; 0x01
    1a60:	1a 82       	std	Y+2, r1	; 0x02
    1a62:	1b 82       	std	Y+3, r1	; 0x03
    1a64:	1c 82       	std	Y+4, r1	; 0x04
    int bank = 22;
    1a66:	86 e1       	ldi	r24, 0x16	; 22
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	9e 83       	std	Y+6, r25	; 0x06
    1a6c:	8d 83       	std	Y+5, r24	; 0x05
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1a6e:	18 86       	std	Y+8, r1	; 0x08
    1a70:	1f 82       	std	Y+7, r1	; 0x07
    1a72:	1a 86       	std	Y+10, r1	; 0x0a
    1a74:	19 86       	std	Y+9, r1	; 0x09
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
    1a76:	1c a2       	std	Y+36, r1	; 0x24
    1a78:	1b a2       	std	Y+35, r1	; 0x23
    1a7a:	1e a2       	std	Y+38, r1	; 0x26
    1a7c:	1d a2       	std	Y+37, r1	; 0x25
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
    1a7e:	e1 e6       	ldi	r30, 0x61	; 97
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	20 83       	st	Z, r18
    1a84:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
    1a86:	6a 9a       	sbi	0x0d, 2	; 13
    1a88:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
    1a8a:	6e 9a       	sbi	0x0d, 6	; 13
    1a8c:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
    1a8e:	6e 9a       	sbi	0x0d, 6	; 13
    1a90:	76 98       	cbi	0x0e, 6	; 14
    
    m_bus_init();                       // Initialize bus
    1a92:	0e 94 b3 12 	call	0x2566	; 0x2566 <m_bus_init>
    init_ports();                       // Initialize ports
    1a96:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_ports>
    set_timer1();                       // Set timer 1 for motor
    1a9a:	0e 94 05 02 	call	0x40a	; 0x40a <set_timer1>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    1a9e:	0e 94 b3 01 	call	0x366	; 0x366 <set_timer4>
    init_analog();                      // Set the ADC System
    1aa2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
    1aa6:	0e 94 2f 16 	call	0x2c5e	; 0x2c5e <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    1aaa:	88 23       	and	r24, r24
    1aac:	e1 f3       	breq	.-8      	; 0x1aa6 <main+0x64>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
    m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);       // Open the RF channel
    1aae:	4a e0       	ldi	r20, 0x0A	; 10
    1ab0:	62 e4       	ldi	r22, 0x42	; 66
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	0e 94 c4 12 	call	0x2588	; 0x2588 <m_rf_open>
	//m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    
    sei();                              // Enable interruptions
    1ab8:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
    1aba:	6e 9a       	sbi	0x0d, 6	; 13
    1abc:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
    1abe:	10 92 60 01 	sts	0x0160, r1
    1ac2:	10 92 61 01 	sts	0x0161, r1
    1ac6:	10 92 62 01 	sts	0x0162, r1
    1aca:	10 92 63 01 	sts	0x0163, r1
    TARGETS_Y[0] = 0;
    1ace:	10 92 58 01 	sts	0x0158, r1
    1ad2:	10 92 59 01 	sts	0x0159, r1
    1ad6:	10 92 5a 01 	sts	0x015A, r1
    1ada:	10 92 5b 01 	sts	0x015B, r1
    TARGETS_X[1] = 0;
    1ade:	10 92 64 01 	sts	0x0164, r1
    1ae2:	10 92 65 01 	sts	0x0165, r1
    1ae6:	10 92 66 01 	sts	0x0166, r1
    1aea:	10 92 67 01 	sts	0x0167, r1
    TARGETS_Y[1] = 0;
    1aee:	10 92 5c 01 	sts	0x015C, r1
    1af2:	10 92 5d 01 	sts	0x015D, r1
    1af6:	10 92 5e 01 	sts	0x015E, r1
    1afa:	10 92 5f 01 	sts	0x015F, r1
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
    1afe:	1e a6       	std	Y+46, r1	; 0x2e
    1b00:	1d a6       	std	Y+45, r1	; 0x2d
    1b02:	18 aa       	std	Y+48, r1	; 0x30
    1b04:	1f a6       	std	Y+47, r1	; 0x2f
    1b06:	1a aa       	std	Y+50, r1	; 0x32
    1b08:	19 aa       	std	Y+49, r1	; 0x31
    1b0a:	1c aa       	std	Y+52, r1	; 0x34
    1b0c:	1b aa       	std	Y+51, r1	; 0x33
    1b0e:	1e aa       	std	Y+54, r1	; 0x36
    1b10:	1d aa       	std	Y+53, r1	; 0x35
    1b12:	61 2c       	mov	r6, r1
    1b14:	71 2c       	mov	r7, r1
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    1b16:	21 96       	adiw	r28, 0x01	; 1
    1b18:	1f ae       	std	Y+63, r1	; 0x3f
    1b1a:	1e ae       	std	Y+62, r1	; 0x3e
    1b1c:	21 97       	sbiw	r28, 0x01	; 1
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    1b1e:	1a ae       	std	Y+58, r1	; 0x3a
    1b20:	19 ae       	std	Y+57, r1	; 0x39
            
        // If data received correctly
        if (wii_OK)
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1b22:	9e 01       	movw	r18, r28
    1b24:	27 5f       	subi	r18, 0xF7	; 247
    1b26:	3f 4f       	sbci	r19, 0xFF	; 255
    1b28:	38 a7       	std	Y+40, r19	; 0x28
    1b2a:	2f a3       	std	Y+39, r18	; 0x27
    1b2c:	ce 01       	movw	r24, r28
    1b2e:	07 96       	adiw	r24, 0x07	; 7
    1b30:	9a a7       	std	Y+42, r25	; 0x2a
    1b32:	89 a7       	std	Y+41, r24	; 0x29
    1b34:	fe 01       	movw	r30, r28
    1b36:	b5 96       	adiw	r30, 0x25	; 37
    1b38:	fc a7       	std	Y+44, r31	; 0x2c
    1b3a:	eb a7       	std	Y+43, r30	; 0x2b
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1b3c:	0f 2e       	mov	r0, r31
    1b3e:	fa e7       	ldi	r31, 0x7A	; 122
    1b40:	4f 2e       	mov	r4, r31
    1b42:	51 2c       	mov	r5, r1
    1b44:	f0 2d       	mov	r31, r0
                    break;
                case(2):
                    PT3_right_inside = ADC;
                    break;
                case(3):
					PT4_right_outside = ADC;
    1b46:	0f 2e       	mov	r0, r31
    1b48:	f8 e7       	ldi	r31, 0x78	; 120
    1b4a:	2f 2e       	mov	r2, r31
    1b4c:	31 2c       	mov	r3, r1
    1b4e:	f0 2d       	mov	r31, r0
    1b50:	13 c0       	rjmp	.+38     	; 0x1b78 <main+0x136>
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
    1b52:	22 e0       	ldi	r18, 0x02	; 2
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	3a af       	std	Y+58, r19	; 0x3a
    1b58:	29 af       	std	Y+57, r18	; 0x39
    1b5a:	0e c0       	rjmp	.+28     	; 0x1b78 <main+0x136>
					}
					
					
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
						status_go_to_goal = 1;
    1b5c:	81 e0       	ldi	r24, 0x01	; 1
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	9a af       	std	Y+58, r25	; 0x3a
    1b62:	89 af       	std	Y+57, r24	; 0x39
    1b64:	09 c0       	rjmp	.+18     	; 0x1b78 <main+0x136>
					calculate_diff_theta(0,&diff_theta, &bank);
				
				
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 3;
    1b66:	e3 e0       	ldi	r30, 0x03	; 3
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	fa af       	std	Y+58, r31	; 0x3a
    1b6c:	e9 af       	std	Y+57, r30	; 0x39
    1b6e:	04 c0       	rjmp	.+8      	; 0x1b78 <main+0x136>
		                 
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
						
						if (diff_theta <20)
						{
							status_go_to_goal = 1;
    1b70:	21 e0       	ldi	r18, 0x01	; 1
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	3a af       	std	Y+58, r19	; 0x3a
    1b76:	29 af       	std	Y+57, r18	; 0x39
		}*/
		
		// --------------------------------------------------------------
		// SYSTEM COMMAND CHECK
		// --------------------------------------------------------------
		if (flag_system == 1)
    1b78:	80 91 52 01 	lds	r24, 0x0152
    1b7c:	90 91 53 01 	lds	r25, 0x0153
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	51 f4       	brne	.+20     	; 0x1b98 <main+0x156>
		{
			state = SYSTEM_STATE;
    1b84:	83 e6       	ldi	r24, 0x63	; 99
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	90 93 05 01 	sts	0x0105, r25
    1b8c:	80 93 04 01 	sts	0x0104, r24
			flag_system = 0;
    1b90:	10 92 53 01 	sts	0x0153, r1
    1b94:	10 92 52 01 	sts	0x0152, r1
        
           
        // --------------------------------------------------------------
        // LOCALIZATION CODE
        // --------------------------------------------------------------
        cli();                                          // Clear Interupts to not interfere with the mWii
    1b98:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
    1b9a:	ce 01       	movw	r24, r28
    1b9c:	0b 96       	adiw	r24, 0x0b	; 11
    1b9e:	0e 94 9a 15 	call	0x2b34	; 0x2b34 <m_wii_read>
        sei();                                          // Enable back the interupts
    1ba2:	78 94       	sei
            
        // If data received correctly
        if (wii_OK)
    1ba4:	88 23       	and	r24, r24
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <main+0x168>
    1ba8:	8f c4       	rjmp	.+2334   	; 0x24c8 <main+0xa86>
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1baa:	af 8c       	ldd	r10, Y+31	; 0x1f
    1bac:	b8 a0       	ldd	r11, Y+32	; 0x20
    1bae:	c9 8c       	ldd	r12, Y+25	; 0x19
    1bb0:	da 8c       	ldd	r13, Y+26	; 0x1a
    1bb2:	eb 88       	ldd	r14, Y+19	; 0x13
    1bb4:	fc 88       	ldd	r15, Y+20	; 0x14
    1bb6:	0d 85       	ldd	r16, Y+13	; 0x0d
    1bb8:	1e 85       	ldd	r17, Y+14	; 0x0e
    1bba:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1bbc:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1bbe:	4f 89       	ldd	r20, Y+23	; 0x17
    1bc0:	58 8d       	ldd	r21, Y+24	; 0x18
    1bc2:	69 89       	ldd	r22, Y+17	; 0x11
    1bc4:	7a 89       	ldd	r23, Y+18	; 0x12
    1bc6:	98 a5       	ldd	r25, Y+40	; 0x28
    1bc8:	9f 93       	push	r25
    1bca:	ef a1       	ldd	r30, Y+39	; 0x27
    1bcc:	ef 93       	push	r30
    1bce:	fa a5       	ldd	r31, Y+42	; 0x2a
    1bd0:	ff 93       	push	r31
    1bd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd4:	8f 93       	push	r24
    1bd6:	e6 e5       	ldi	r30, 0x56	; 86
    1bd8:	f1 e0       	ldi	r31, 0x01	; 1
    1bda:	ff 93       	push	r31
    1bdc:	ef 93       	push	r30
    1bde:	9c a5       	ldd	r25, Y+44	; 0x2c
    1be0:	9f 93       	push	r25
    1be2:	eb a5       	ldd	r30, Y+43	; 0x2b
    1be4:	ef 93       	push	r30
    1be6:	0f 2e       	mov	r0, r31
    1be8:	f3 e2       	ldi	r31, 0x23	; 35
    1bea:	8f 2e       	mov	r8, r31
    1bec:	91 2c       	mov	r9, r1
    1bee:	f0 2d       	mov	r31, r0
    1bf0:	8c 0e       	add	r8, r28
    1bf2:	9d 1e       	adc	r9, r29
    1bf4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1bf6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1bf8:	0e 94 3b 02 	call	0x476	; 0x476 <localize>
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61
    1c06:	60 c4       	rjmp	.+2240   	; 0x24c8 <main+0xa86>
    1c08:	3f ef       	ldi	r19, 0xFF	; 255
    1c0a:	e3 1a       	sub	r14, r19
    1c0c:	f3 0a       	sbc	r15, r19

//Variable for receiving data
char buffer_rec[PACKET_LENGTH_SYSTEM] = {0};

//Main function
int main(void)
    1c0e:	87 01       	movw	r16, r14
    1c10:	01 50       	subi	r16, 0x01	; 1
    1c12:	11 09       	sbc	r17, r1
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
    1c14:	c8 01       	movw	r24, r16
    1c16:	0e 94 01 01 	call	0x202	; 0x202 <get_analog_val>
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1c1a:	f2 01       	movw	r30, r4
    1c1c:	80 81       	ld	r24, Z
    1c1e:	84 ff       	sbrs	r24, 4
    1c20:	fc cf       	rjmp	.-8      	; 0x1c1a <main+0x1d8>
            switch(i)
    1c22:	03 30       	cpi	r16, 0x03	; 3
    1c24:	11 05       	cpc	r17, r1
    1c26:	11 f1       	breq	.+68     	; 0x1c6c <main+0x22a>
    1c28:	3c f4       	brge	.+14     	; 0x1c38 <main+0x1f6>
    1c2a:	01 30       	cpi	r16, 0x01	; 1
    1c2c:	11 05       	cpc	r17, r1
    1c2e:	81 f0       	breq	.+32     	; 0x1c50 <main+0x20e>
    1c30:	b4 f4       	brge	.+44     	; 0x1c5e <main+0x21c>
    1c32:	01 2b       	or	r16, r17
    1c34:	49 f0       	breq	.+18     	; 0x1c48 <main+0x206>
    1c36:	44 c0       	rjmp	.+136    	; 0x1cc0 <main+0x27e>
    1c38:	05 30       	cpi	r16, 0x05	; 5
    1c3a:	11 05       	cpc	r17, r1
    1c3c:	29 f1       	breq	.+74     	; 0x1c88 <main+0x246>
    1c3e:	ec f0       	brlt	.+58     	; 0x1c7a <main+0x238>
    1c40:	06 30       	cpi	r16, 0x06	; 6
    1c42:	11 05       	cpc	r17, r1
    1c44:	e9 f5       	brne	.+122    	; 0x1cc0 <main+0x27e>
    1c46:	27 c0       	rjmp	.+78     	; 0x1c96 <main+0x254>
            {
                case(0):
                    PT1_left_outside = ADC;
    1c48:	f1 01       	movw	r30, r2
    1c4a:	60 80       	ld	r6, Z
    1c4c:	71 80       	ldd	r7, Z+1	; 0x01
                    break;
    1c4e:	40 c4       	rjmp	.+2176   	; 0x24d0 <main+0xa8e>
                case(1):
                    PT2_left_inside = ADC;
    1c50:	f1 01       	movw	r30, r2
    1c52:	01 90       	ld	r0, Z+
    1c54:	f0 81       	ld	r31, Z
    1c56:	e0 2d       	mov	r30, r0
    1c58:	fe ab       	std	Y+54, r31	; 0x36
    1c5a:	ed ab       	std	Y+53, r30	; 0x35
                    break;
    1c5c:	39 c4       	rjmp	.+2162   	; 0x24d0 <main+0xa8e>
                case(2):
                    PT3_right_inside = ADC;
    1c5e:	f1 01       	movw	r30, r2
    1c60:	01 90       	ld	r0, Z+
    1c62:	f0 81       	ld	r31, Z
    1c64:	e0 2d       	mov	r30, r0
    1c66:	fc ab       	std	Y+52, r31	; 0x34
    1c68:	eb ab       	std	Y+51, r30	; 0x33
                    break;
    1c6a:	32 c4       	rjmp	.+2148   	; 0x24d0 <main+0xa8e>
                case(3):
					PT4_right_outside = ADC;
    1c6c:	f1 01       	movw	r30, r2
    1c6e:	01 90       	ld	r0, Z+
    1c70:	f0 81       	ld	r31, Z
    1c72:	e0 2d       	mov	r30, r0
    1c74:	fa ab       	std	Y+50, r31	; 0x32
    1c76:	e9 ab       	std	Y+49, r30	; 0x31
                    break;
    1c78:	2b c4       	rjmp	.+2134   	; 0x24d0 <main+0xa8e>
                case(4):
                    PT5_back_right = ADC;
    1c7a:	f1 01       	movw	r30, r2
    1c7c:	01 90       	ld	r0, Z+
    1c7e:	f0 81       	ld	r31, Z
    1c80:	e0 2d       	mov	r30, r0
    1c82:	f8 ab       	std	Y+48, r31	; 0x30
    1c84:	ef a7       	std	Y+47, r30	; 0x2f
                    break;
    1c86:	24 c4       	rjmp	.+2120   	; 0x24d0 <main+0xa8e>
                case(5):
                    PT6_back_left = ADC;
    1c88:	f1 01       	movw	r30, r2
    1c8a:	01 90       	ld	r0, Z+
    1c8c:	f0 81       	ld	r31, Z
    1c8e:	e0 2d       	mov	r30, r0
    1c90:	fe a7       	std	Y+46, r31	; 0x2e
    1c92:	ed a7       	std	Y+45, r30	; 0x2d
                    break;
    1c94:	1d c4       	rjmp	.+2106   	; 0x24d0 <main+0xa8e>
                case(6):
                    PT7_have_puck = ADC;
    1c96:	f1 01       	movw	r30, r2
    1c98:	80 81       	ld	r24, Z
    1c9a:	91 81       	ldd	r25, Z+1	; 0x01
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
    1c9c:	f2 01       	movw	r30, r4
    1c9e:	80 81       	ld	r24, Z
    1ca0:	80 61       	ori	r24, 0x10	; 16
    1ca2:	80 83       	st	Z, r24
    1ca4:	2d a5       	ldd	r18, Y+45	; 0x2d
    1ca6:	3e a5       	ldd	r19, Y+46	; 0x2e
    1ca8:	38 af       	std	Y+56, r19	; 0x38
    1caa:	2f ab       	std	Y+55, r18	; 0x37
    1cac:	8f a4       	ldd	r8, Y+47	; 0x2f
    1cae:	98 a8       	ldd	r9, Y+48	; 0x30
    1cb0:	e9 a8       	ldd	r14, Y+49	; 0x31
    1cb2:	fa a8       	ldd	r15, Y+50	; 0x32
    1cb4:	ab a8       	ldd	r10, Y+51	; 0x33
    1cb6:	bc a8       	ldd	r11, Y+52	; 0x34
    1cb8:	cd a8       	ldd	r12, Y+53	; 0x35
    1cba:	de a8       	ldd	r13, Y+54	; 0x36
    1cbc:	83 01       	movw	r16, r6
    1cbe:	16 c0       	rjmp	.+44     	; 0x1cec <main+0x2aa>
    1cc0:	f2 01       	movw	r30, r4
    1cc2:	80 81       	ld	r24, Z
    1cc4:	80 61       	ori	r24, 0x10	; 16
    1cc6:	80 83       	st	Z, r24
            
        // --------------------------------------------------------------
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
    1cc8:	f7 e0       	ldi	r31, 0x07	; 7
    1cca:	ef 16       	cp	r14, r31
    1ccc:	f1 04       	cpc	r15, r1
    1cce:	0c f4       	brge	.+2      	; 0x1cd2 <main+0x290>
    1cd0:	9b cf       	rjmp	.-202    	; 0x1c08 <main+0x1c6>
    1cd2:	2d a5       	ldd	r18, Y+45	; 0x2d
    1cd4:	3e a5       	ldd	r19, Y+46	; 0x2e
    1cd6:	38 af       	std	Y+56, r19	; 0x38
    1cd8:	2f ab       	std	Y+55, r18	; 0x37
    1cda:	8f a4       	ldd	r8, Y+47	; 0x2f
    1cdc:	98 a8       	ldd	r9, Y+48	; 0x30
    1cde:	e9 a8       	ldd	r14, Y+49	; 0x31
    1ce0:	fa a8       	ldd	r15, Y+50	; 0x32
    1ce2:	ab a8       	ldd	r10, Y+51	; 0x33
    1ce4:	bc a8       	ldd	r11, Y+52	; 0x34
    1ce6:	cd a8       	ldd	r12, Y+53	; 0x35
    1ce8:	de a8       	ldd	r13, Y+54	; 0x36
    1cea:	83 01       	movw	r16, r6
            
            
        // --------------------------------------------------------------
        // STATE COMMANDS
        // --------------------------------------------------------------
        switch (state)
    1cec:	80 91 04 01 	lds	r24, 0x0104
    1cf0:	90 91 05 01 	lds	r25, 0x0105
    1cf4:	85 31       	cpi	r24, 0x15	; 21
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	09 f4       	brne	.+2      	; 0x1cfc <main+0x2ba>
    1cfa:	de c3       	rjmp	.+1980   	; 0x24b8 <main+0xa76>
    1cfc:	64 f4       	brge	.+24     	; 0x1d16 <main+0x2d4>
    1cfe:	83 30       	cpi	r24, 0x03	; 3
    1d00:	91 05       	cpc	r25, r1
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <main+0x2c4>
    1d04:	c3 c1       	rjmp	.+902    	; 0x208c <main+0x64a>
    1d06:	85 30       	cpi	r24, 0x05	; 5
    1d08:	91 05       	cpc	r25, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <main+0x2cc>
    1d0c:	b7 c2       	rjmp	.+1390   	; 0x227c <main+0x83a>
    1d0e:	89 2b       	or	r24, r25
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <main+0x2d2>
    1d12:	9c c2       	rjmp	.+1336   	; 0x224c <main+0x80a>
    1d14:	d6 c3       	rjmp	.+1964   	; 0x24c2 <main+0xa80>
    1d16:	80 35       	cpi	r24, 0x50	; 80
    1d18:	91 05       	cpc	r25, r1
    1d1a:	41 f0       	breq	.+16     	; 0x1d2c <main+0x2ea>
    1d1c:	83 36       	cpi	r24, 0x63	; 99
    1d1e:	91 05       	cpc	r25, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <main+0x2e2>
    1d22:	47 c3       	rjmp	.+1678   	; 0x23b2 <main+0x970>
    1d24:	46 97       	sbiw	r24, 0x16	; 22
    1d26:	09 f0       	breq	.+2      	; 0x1d2a <main+0x2e8>
    1d28:	cc c3       	rjmp	.+1944   	; 0x24c2 <main+0xa80>
    1d2a:	b0 c3       	rjmp	.+1888   	; 0x248c <main+0xa4a>
			case GO_TO_WPT:
			
				//m_green(ON);
			
			
				if (PT1_left_outside > NOT_SEE_PUCK || PT2_left_inside > NOT_SEE_PUCK || PT3_right_inside > NOT_SEE_PUCK || PT4_right_outside > NOT_SEE_PUCK || PT5_back_right > NOT_SEE_PUCK || PT6_back_left > NOT_SEE_PUCK) 
    1d2c:	0d 32       	cpi	r16, 0x2D	; 45
    1d2e:	11 40       	sbci	r17, 0x01	; 1
    1d30:	cc f4       	brge	.+50     	; 0x1d64 <main+0x322>
    1d32:	8d e2       	ldi	r24, 0x2D	; 45
    1d34:	c8 16       	cp	r12, r24
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	d8 06       	cpc	r13, r24
    1d3a:	a4 f4       	brge	.+40     	; 0x1d64 <main+0x322>
    1d3c:	9d e2       	ldi	r25, 0x2D	; 45
    1d3e:	a9 16       	cp	r10, r25
    1d40:	91 e0       	ldi	r25, 0x01	; 1
    1d42:	b9 06       	cpc	r11, r25
    1d44:	7c f4       	brge	.+30     	; 0x1d64 <main+0x322>
    1d46:	ed e2       	ldi	r30, 0x2D	; 45
    1d48:	ee 16       	cp	r14, r30
    1d4a:	e1 e0       	ldi	r30, 0x01	; 1
    1d4c:	fe 06       	cpc	r15, r30
    1d4e:	54 f4       	brge	.+20     	; 0x1d64 <main+0x322>
    1d50:	fd e2       	ldi	r31, 0x2D	; 45
    1d52:	8f 16       	cp	r8, r31
    1d54:	f1 e0       	ldi	r31, 0x01	; 1
    1d56:	9f 06       	cpc	r9, r31
    1d58:	2c f4       	brge	.+10     	; 0x1d64 <main+0x322>
    1d5a:	2f a9       	ldd	r18, Y+55	; 0x37
    1d5c:	38 ad       	ldd	r19, Y+56	; 0x38
    1d5e:	2d 32       	cpi	r18, 0x2D	; 45
    1d60:	31 40       	sbci	r19, 0x01	; 1
    1d62:	3c f0       	brlt	.+14     	; 0x1d72 <main+0x330>
				{
					state = FIND_PUCK;
    1d64:	83 e0       	ldi	r24, 0x03	; 3
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	90 93 05 01 	sts	0x0105, r25
    1d6c:	80 93 04 01 	sts	0x0104, r24
					break;
    1d70:	03 cf       	rjmp	.-506    	; 0x1b78 <main+0x136>
				}
			
				dir_x = TARGETS_X[0]-x_robot;
				dir_y = TARGETS_Y[0]-y_robot;
    1d72:	6d a1       	ldd	r22, Y+37	; 0x25
    1d74:	7e a1       	ldd	r23, Y+38	; 0x26
    1d76:	88 27       	eor	r24, r24
    1d78:	77 fd       	sbrc	r23, 7
    1d7a:	80 95       	com	r24
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	60 91 58 01 	lds	r22, 0x0158
    1d8a:	70 91 59 01 	lds	r23, 0x0159
    1d8e:	80 91 5a 01 	lds	r24, 0x015A
    1d92:	90 91 5b 01 	lds	r25, 0x015B
    1d96:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1d9a:	6b 01       	movw	r12, r22
    1d9c:	7c 01       	movw	r14, r24
				{
					state = FIND_PUCK;
					break;
				}
			
				dir_x = TARGETS_X[0]-x_robot;
    1d9e:	6b a1       	ldd	r22, Y+35	; 0x23
    1da0:	7c a1       	ldd	r23, Y+36	; 0x24
    1da2:	88 27       	eor	r24, r24
    1da4:	77 fd       	sbrc	r23, 7
    1da6:	80 95       	com	r24
    1da8:	98 2f       	mov	r25, r24
    1daa:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1dae:	9b 01       	movw	r18, r22
    1db0:	ac 01       	movw	r20, r24
    1db2:	60 91 60 01 	lds	r22, 0x0160
    1db6:	70 91 61 01 	lds	r23, 0x0161
    1dba:	80 91 62 01 	lds	r24, 0x0162
    1dbe:	90 91 63 01 	lds	r25, 0x0163
    1dc2:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
				dir_y = TARGETS_Y[0]-y_robot;
				dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1dc6:	90 58       	subi	r25, 0x80	; 128
    1dc8:	a7 01       	movw	r20, r14
    1dca:	96 01       	movw	r18, r12
    1dcc:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <atan2>
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	44 e3       	ldi	r20, 0x34	; 52
    1dd6:	53 e4       	ldi	r21, 0x43	; 67
    1dd8:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1ddc:	2b ed       	ldi	r18, 0xDB	; 219
    1dde:	3f e0       	ldi	r19, 0x0F	; 15
    1de0:	49 e4       	ldi	r20, 0x49	; 73
    1de2:	50 e4       	ldi	r21, 0x40	; 64
    1de4:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
			
				calculate_diff_theta(dir_angle,&diff_theta, &bank);
    1de8:	9e 01       	movw	r18, r28
    1dea:	2b 5f       	subi	r18, 0xFB	; 251
    1dec:	3f 4f       	sbci	r19, 0xFF	; 255
    1dee:	ae 01       	movw	r20, r28
    1df0:	4f 5f       	subi	r20, 0xFF	; 255
    1df2:	5f 4f       	sbci	r21, 0xFF	; 255
    1df4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <calculate_diff_theta>
			
			
				cur_error = diff_theta;
    1df8:	c9 80       	ldd	r12, Y+1	; 0x01
    1dfa:	da 80       	ldd	r13, Y+2	; 0x02
    1dfc:	eb 80       	ldd	r14, Y+3	; 0x03
    1dfe:	fc 80       	ldd	r15, Y+4	; 0x04
    1e00:	c7 01       	movw	r24, r14
    1e02:	b6 01       	movw	r22, r12
    1e04:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    1e08:	8b 01       	movw	r16, r22
    1e0a:	70 93 6b 01 	sts	0x016B, r23
    1e0e:	60 93 6a 01 	sts	0x016A, r22
				diff_error = cur_error - prev_error;
    1e12:	20 91 68 01 	lds	r18, 0x0168
    1e16:	30 91 69 01 	lds	r19, 0x0169
    1e1a:	02 1b       	sub	r16, r18
    1e1c:	13 0b       	sbc	r17, r19
    1e1e:	10 93 6d 01 	sts	0x016D, r17
    1e22:	00 93 6c 01 	sts	0x016C, r16
				prev_error = cur_error;
    1e26:	70 93 69 01 	sts	0x0169, r23
    1e2a:	60 93 68 01 	sts	0x0168, r22
			
				if (status_go_to_goal == 0)
    1e2e:	e9 ad       	ldd	r30, Y+57	; 0x39
    1e30:	fa ad       	ldd	r31, Y+58	; 0x3a
    1e32:	ef 2b       	or	r30, r31
    1e34:	09 f0       	breq	.+2      	; 0x1e38 <main+0x3f6>
    1e36:	71 c0       	rjmp	.+226    	; 0x1f1a <main+0x4d8>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
    1e38:	6b a1       	ldd	r22, Y+35	; 0x23
    1e3a:	7c a1       	ldd	r23, Y+36	; 0x24
    1e3c:	88 27       	eor	r24, r24
    1e3e:	77 fd       	sbrc	r23, 7
    1e40:	80 95       	com	r24
    1e42:	98 2f       	mov	r25, r24
    1e44:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1e48:	20 91 60 01 	lds	r18, 0x0160
    1e4c:	30 91 61 01 	lds	r19, 0x0161
    1e50:	40 91 62 01 	lds	r20, 0x0162
    1e54:	50 91 63 01 	lds	r21, 0x0163
    1e58:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1e5c:	86 2e       	mov	r8, r22
    1e5e:	97 2e       	mov	r9, r23
    1e60:	a8 2e       	mov	r10, r24
    1e62:	b9 2e       	mov	r11, r25
    1e64:	6d a1       	ldd	r22, Y+37	; 0x25
    1e66:	7e a1       	ldd	r23, Y+38	; 0x26
    1e68:	88 27       	eor	r24, r24
    1e6a:	77 fd       	sbrc	r23, 7
    1e6c:	80 95       	com	r24
    1e6e:	98 2f       	mov	r25, r24
    1e70:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1e74:	20 91 58 01 	lds	r18, 0x0158
    1e78:	30 91 59 01 	lds	r19, 0x0159
    1e7c:	40 91 5a 01 	lds	r20, 0x015A
    1e80:	50 91 5b 01 	lds	r21, 0x015B
    1e84:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1e88:	6f ab       	std	Y+55, r22	; 0x37
    1e8a:	7b af       	std	Y+59, r23	; 0x3b
    1e8c:	8d af       	std	Y+61, r24	; 0x3d
    1e8e:	9e af       	std	Y+62, r25	; 0x3e
    1e90:	28 2d       	mov	r18, r8
    1e92:	39 2d       	mov	r19, r9
    1e94:	4a 2d       	mov	r20, r10
    1e96:	5b 2d       	mov	r21, r11
    1e98:	68 2d       	mov	r22, r8
    1e9a:	79 2d       	mov	r23, r9
    1e9c:	8a 2d       	mov	r24, r10
    1e9e:	9b 2d       	mov	r25, r11
    1ea0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1ea4:	4b 01       	movw	r8, r22
    1ea6:	5c 01       	movw	r10, r24
    1ea8:	7f a9       	ldd	r23, Y+55	; 0x37
    1eaa:	6b ad       	ldd	r22, Y+59	; 0x3b
    1eac:	9d ad       	ldd	r25, Y+61	; 0x3d
    1eae:	8e ad       	ldd	r24, Y+62	; 0x3e
    1eb0:	27 2f       	mov	r18, r23
    1eb2:	36 2f       	mov	r19, r22
    1eb4:	49 2f       	mov	r20, r25
    1eb6:	58 2f       	mov	r21, r24
    1eb8:	67 2f       	mov	r22, r23
    1eba:	73 2f       	mov	r23, r19
    1ebc:	89 2f       	mov	r24, r25
    1ebe:	95 2f       	mov	r25, r21
    1ec0:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1ec4:	9b 01       	movw	r18, r22
    1ec6:	ac 01       	movw	r20, r24
    1ec8:	c5 01       	movw	r24, r10
    1eca:	b4 01       	movw	r22, r8
    1ecc:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1ed0:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	a9 01       	movw	r20, r18
    1eda:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    1ede:	88 23       	and	r24, r24
    1ee0:	0c f4       	brge	.+2      	; 0x1ee4 <main+0x4a2>
    1ee2:	37 ce       	rjmp	.-914    	; 0x1b52 <main+0x110>
						status_go_to_goal = 2;
					}
					
					
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e7       	ldi	r20, 0x70	; 112
    1eea:	51 e4       	ldi	r21, 0x41	; 65
    1eec:	c7 01       	movw	r24, r14
    1eee:	b6 01       	movw	r22, r12
    1ef0:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	0c f4       	brge	.+2      	; 0x1efa <main+0x4b8>
    1ef8:	31 ce       	rjmp	.-926    	; 0x1b5c <main+0x11a>
						status_go_to_goal = 1;
					}
					else
					turn_robot(diff_theta,bank,diff_error);
    1efa:	b8 01       	movw	r22, r16
    1efc:	88 27       	eor	r24, r24
    1efe:	77 fd       	sbrc	r23, 7
    1f00:	80 95       	com	r24
    1f02:	98 2f       	mov	r25, r24
    1f04:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1f08:	8b 01       	movw	r16, r22
    1f0a:	9c 01       	movw	r18, r24
    1f0c:	4d 81       	ldd	r20, Y+5	; 0x05
    1f0e:	5e 81       	ldd	r21, Y+6	; 0x06
    1f10:	c7 01       	movw	r24, r14
    1f12:	b6 01       	movw	r22, r12
    1f14:	0e 94 91 0b 	call	0x1722	; 0x1722 <turn_robot>
    1f18:	2f ce       	rjmp	.-930    	; 0x1b78 <main+0x136>
					
				}
			
				else if (status_go_to_goal == 1)
    1f1a:	29 ad       	ldd	r18, Y+57	; 0x39
    1f1c:	3a ad       	ldd	r19, Y+58	; 0x3a
    1f1e:	21 30       	cpi	r18, 0x01	; 1
    1f20:	31 05       	cpc	r19, r1
    1f22:	09 f0       	breq	.+2      	; 0x1f26 <main+0x4e4>
    1f24:	71 c0       	rjmp	.+226    	; 0x2008 <main+0x5c6>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
    1f26:	6b a1       	ldd	r22, Y+35	; 0x23
    1f28:	7c a1       	ldd	r23, Y+36	; 0x24
    1f2a:	88 27       	eor	r24, r24
    1f2c:	77 fd       	sbrc	r23, 7
    1f2e:	80 95       	com	r24
    1f30:	98 2f       	mov	r25, r24
    1f32:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1f36:	20 91 60 01 	lds	r18, 0x0160
    1f3a:	30 91 61 01 	lds	r19, 0x0161
    1f3e:	40 91 62 01 	lds	r20, 0x0162
    1f42:	50 91 63 01 	lds	r21, 0x0163
    1f46:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1f4a:	86 2e       	mov	r8, r22
    1f4c:	97 2e       	mov	r9, r23
    1f4e:	a8 2e       	mov	r10, r24
    1f50:	b9 2e       	mov	r11, r25
    1f52:	6d a1       	ldd	r22, Y+37	; 0x25
    1f54:	7e a1       	ldd	r23, Y+38	; 0x26
    1f56:	88 27       	eor	r24, r24
    1f58:	77 fd       	sbrc	r23, 7
    1f5a:	80 95       	com	r24
    1f5c:	98 2f       	mov	r25, r24
    1f5e:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    1f62:	20 91 58 01 	lds	r18, 0x0158
    1f66:	30 91 59 01 	lds	r19, 0x0159
    1f6a:	40 91 5a 01 	lds	r20, 0x015A
    1f6e:	50 91 5b 01 	lds	r21, 0x015B
    1f72:	0e 94 32 17 	call	0x2e64	; 0x2e64 <__subsf3>
    1f76:	6f ab       	std	Y+55, r22	; 0x37
    1f78:	7b af       	std	Y+59, r23	; 0x3b
    1f7a:	08 2f       	mov	r16, r24
    1f7c:	19 2f       	mov	r17, r25
    1f7e:	28 2d       	mov	r18, r8
    1f80:	39 2d       	mov	r19, r9
    1f82:	4a 2d       	mov	r20, r10
    1f84:	5b 2d       	mov	r21, r11
    1f86:	68 2d       	mov	r22, r8
    1f88:	79 2d       	mov	r23, r9
    1f8a:	8a 2d       	mov	r24, r10
    1f8c:	9b 2d       	mov	r25, r11
    1f8e:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1f92:	4b 01       	movw	r8, r22
    1f94:	5c 01       	movw	r10, r24
    1f96:	7f a9       	ldd	r23, Y+55	; 0x37
    1f98:	6b ad       	ldd	r22, Y+59	; 0x3b
    1f9a:	27 2f       	mov	r18, r23
    1f9c:	36 2f       	mov	r19, r22
    1f9e:	40 2f       	mov	r20, r16
    1fa0:	51 2f       	mov	r21, r17
    1fa2:	67 2f       	mov	r22, r23
    1fa4:	73 2f       	mov	r23, r19
    1fa6:	80 2f       	mov	r24, r16
    1fa8:	91 2f       	mov	r25, r17
    1faa:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    1fae:	9b 01       	movw	r18, r22
    1fb0:	ac 01       	movw	r20, r24
    1fb2:	c5 01       	movw	r24, r10
    1fb4:	b4 01       	movw	r22, r8
    1fb6:	0e 94 33 17 	call	0x2e66	; 0x2e66 <__addsf3>
    1fba:	0e 94 21 1a 	call	0x3442	; 0x3442 <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	a9 01       	movw	r20, r18
    1fc4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    1fc8:	88 23       	and	r24, r24
    1fca:	34 f4       	brge	.+12     	; 0x1fd8 <main+0x596>
					{
						status_go_to_goal = 2;
						set(PORTD,5);
    1fcc:	5d 9a       	sbi	0x0b, 5	; 11
				else if (status_go_to_goal == 1)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
    1fce:	82 e0       	ldi	r24, 0x02	; 2
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	9a af       	std	Y+58, r25	; 0x3a
    1fd4:	89 af       	std	Y+57, r24	; 0x39
    1fd6:	d0 cd       	rjmp	.-1120   	; 0x1b78 <main+0x136>
						//                                stop_counter++;
						//                            }
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 ef       	ldi	r20, 0xF0	; 240
    1fde:	51 e4       	ldi	r21, 0x41	; 65
    1fe0:	c7 01       	movw	r24, r14
    1fe2:	b6 01       	movw	r22, r12
    1fe4:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    1fe8:	18 16       	cp	r1, r24
    1fea:	24 f4       	brge	.+8      	; 0x1ff4 <main+0x5b2>
					{
						status_go_to_goal = 0;
						set(PORTD,5);
    1fec:	5d 9a       	sbi	0x0b, 5	; 11
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 0;
    1fee:	1a ae       	std	Y+58, r1	; 0x3a
    1ff0:	19 ae       	std	Y+57, r1	; 0x39
    1ff2:	c2 cd       	rjmp	.-1148   	; 0x1b78 <main+0x136>
						set(PORTD,5);
					}
					else 
					{
						clear(PORTD,5);
    1ff4:	5d 98       	cbi	0x0b, 5	; 11
						move_robot(diff_theta,bank);
    1ff6:	4d 81       	ldd	r20, Y+5	; 0x05
    1ff8:	5e 81       	ldd	r21, Y+6	; 0x06
    1ffa:	69 81       	ldd	r22, Y+1	; 0x01
    1ffc:	7a 81       	ldd	r23, Y+2	; 0x02
    1ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    2000:	9c 81       	ldd	r25, Y+4	; 0x04
    2002:	0e 94 c6 0b 	call	0x178c	; 0x178c <move_robot>
    2006:	b8 cd       	rjmp	.-1168   	; 0x1b78 <main+0x136>
					}
				
				}
				else if (status_go_to_goal == 2){
    2008:	e9 ad       	ldd	r30, Y+57	; 0x39
    200a:	fa ad       	ldd	r31, Y+58	; 0x3a
    200c:	32 97       	sbiw	r30, 0x02	; 2
    200e:	69 f5       	brne	.+90     	; 0x206a <main+0x628>
				
					calculate_diff_theta(0,&diff_theta, &bank);
    2010:	9e 01       	movw	r18, r28
    2012:	2b 5f       	subi	r18, 0xFB	; 251
    2014:	3f 4f       	sbci	r19, 0xFF	; 255
    2016:	ae 01       	movw	r20, r28
    2018:	4f 5f       	subi	r20, 0xFF	; 255
    201a:	5f 4f       	sbci	r21, 0xFF	; 255
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	70 e0       	ldi	r23, 0x00	; 0
    2020:	cb 01       	movw	r24, r22
    2022:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <calculate_diff_theta>
				
				
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
    2026:	c9 80       	ldd	r12, Y+1	; 0x01
    2028:	da 80       	ldd	r13, Y+2	; 0x02
    202a:	eb 80       	ldd	r14, Y+3	; 0x03
    202c:	fc 80       	ldd	r15, Y+4	; 0x04
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	40 e7       	ldi	r20, 0x70	; 112
    2034:	51 e4       	ldi	r21, 0x41	; 65
    2036:	c7 01       	movw	r24, r14
    2038:	b6 01       	movw	r22, r12
    203a:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    203e:	88 23       	and	r24, r24
    2040:	0c f4       	brge	.+2      	; 0x2044 <main+0x602>
    2042:	91 cd       	rjmp	.-1246   	; 0x1b66 <main+0x124>
						//m_wait(1000);
						//set(PORTD,5);
					}
					else 
					{
						turn_robot(diff_theta,bank,diff_error);
    2044:	60 91 6c 01 	lds	r22, 0x016C
    2048:	70 91 6d 01 	lds	r23, 0x016D
    204c:	88 27       	eor	r24, r24
    204e:	77 fd       	sbrc	r23, 7
    2050:	80 95       	com	r24
    2052:	98 2f       	mov	r25, r24
    2054:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    2058:	8b 01       	movw	r16, r22
    205a:	9c 01       	movw	r18, r24
    205c:	4d 81       	ldd	r20, Y+5	; 0x05
    205e:	5e 81       	ldd	r21, Y+6	; 0x06
    2060:	c7 01       	movw	r24, r14
    2062:	b6 01       	movw	r22, r12
    2064:	0e 94 91 0b 	call	0x1722	; 0x1722 <turn_robot>
    2068:	87 cd       	rjmp	.-1266   	; 0x1b78 <main+0x136>
					}
				
				}
				else if (status_go_to_goal == 3)
    206a:	29 ad       	ldd	r18, Y+57	; 0x39
    206c:	3a ad       	ldd	r19, Y+58	; 0x3a
    206e:	23 30       	cpi	r18, 0x03	; 3
    2070:	31 05       	cpc	r19, r1
    2072:	09 f0       	breq	.+2      	; 0x2076 <main+0x634>
    2074:	81 cd       	rjmp	.-1278   	; 0x1b78 <main+0x136>
				{
				
					stop_motor();
    2076:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
					//                        //                            clear(PORTD,5);
					//                    }
					//                    goal_pos_x = TARGETS_X[TARGET_NUM];
					//                    goal_pos_y = TARGETS_Y[TARGET_NUM];
					status_go_to_goal = 0;
					state = FIND_PUCK;
    207a:	83 e0       	ldi	r24, 0x03	; 3
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	90 93 05 01 	sts	0x0105, r25
    2082:	80 93 04 01 	sts	0x0104, r24
					//                        TARGET_NUM = 0;
					//                        //                            clear(PORTD,5);
					//                    }
					//                    goal_pos_x = TARGETS_X[TARGET_NUM];
					//                    goal_pos_y = TARGETS_Y[TARGET_NUM];
					status_go_to_goal = 0;
    2086:	1a ae       	std	Y+58, r1	; 0x3a
    2088:	19 ae       	std	Y+57, r1	; 0x39
    208a:	76 cd       	rjmp	.-1300   	; 0x1b78 <main+0x136>
				//}
				//
            
            
				//Check if we have the puck
				if (PT2_left_inside > 1010 &&  PT3_right_inside > 1010)
    208c:	33 ef       	ldi	r19, 0xF3	; 243
    208e:	c3 16       	cp	r12, r19
    2090:	33 e0       	ldi	r19, 0x03	; 3
    2092:	d3 06       	cpc	r13, r19
    2094:	74 f0       	brlt	.+28     	; 0x20b2 <main+0x670>
    2096:	83 ef       	ldi	r24, 0xF3	; 243
    2098:	a8 16       	cp	r10, r24
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	b8 06       	cpc	r11, r24
    209e:	4c f0       	brlt	.+18     	; 0x20b2 <main+0x670>
				{
					state = GO_TO_GOAL_WITH_PUCK;
    20a0:	85 e0       	ldi	r24, 0x05	; 5
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	90 93 05 01 	sts	0x0105, r25
    20a8:	80 93 04 01 	sts	0x0104, r24
					//turnOnBlueLED();
	            
					status_go_to_goal = 0;
    20ac:	1a ae       	std	Y+58, r1	; 0x3a
    20ae:	19 ae       	std	Y+57, r1	; 0x39
					break;
    20b0:	63 cd       	rjmp	.-1338   	; 0x1b78 <main+0x136>
				max_lr = 0;
				else
				max_lr = 1;
            
				//Check if the puck is up or down
				if (max_lr == 0)
    20b2:	e0 16       	cp	r14, r16
    20b4:	f1 06       	cpc	r15, r17
    20b6:	64 f4       	brge	.+24     	; 0x20d0 <main+0x68e>
				{
					if (PT1_left_outside >= PT6_back_left)
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	ef a9       	ldd	r30, Y+55	; 0x37
    20be:	f8 ad       	ldd	r31, Y+56	; 0x38
    20c0:	0e 17       	cp	r16, r30
    20c2:	1f 07       	cpc	r17, r31
    20c4:	14 f0       	brlt	.+4      	; 0x20ca <main+0x688>
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	90 e0       	ldi	r25, 0x00	; 0
					half_range = 0;
					else
					half_range = 1;
    20ca:	9c af       	std	Y+60, r25	; 0x3c
    20cc:	8b af       	std	Y+59, r24	; 0x3b
    20ce:	09 c0       	rjmp	.+18     	; 0x20e2 <main+0x6a0>
				}
				else
				{
					if (PT4_right_outside >= PT5_back_right)
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	e8 14       	cp	r14, r8
    20d6:	f9 04       	cpc	r15, r9
    20d8:	14 f0       	brlt	.+4      	; 0x20de <main+0x69c>
    20da:	80 e0       	ldi	r24, 0x00	; 0
    20dc:	90 e0       	ldi	r25, 0x00	; 0
				if (max_lr == 0)
				{
					if (PT1_left_outside >= PT6_back_left)
					half_range = 0;
					else
					half_range = 1;
    20de:	9c af       	std	Y+60, r25	; 0x3c
    20e0:	8b af       	std	Y+59, r24	; 0x3b
				max_pt_backs = PT6_back_left;
            
            
            
				//                // If Insides see the puck
				if (PT1_left_outside < NOT_SEE_PUCK && PT2_left_inside < NOT_SEE_PUCK && PT3_right_inside < NOT_SEE_PUCK && PT4_right_outside < NOT_SEE_PUCK && PT5_back_right < NOT_SEE_PUCK && PT6_back_left < NOT_SEE_PUCK) 
    20e2:	0c 32       	cpi	r16, 0x2C	; 44
    20e4:	f1 e0       	ldi	r31, 0x01	; 1
    20e6:	1f 07       	cpc	r17, r31
    20e8:	04 f5       	brge	.+64     	; 0x212a <main+0x6e8>
    20ea:	2c e2       	ldi	r18, 0x2C	; 44
    20ec:	c2 16       	cp	r12, r18
    20ee:	21 e0       	ldi	r18, 0x01	; 1
    20f0:	d2 06       	cpc	r13, r18
    20f2:	dc f4       	brge	.+54     	; 0x212a <main+0x6e8>
    20f4:	3c e2       	ldi	r19, 0x2C	; 44
    20f6:	a3 16       	cp	r10, r19
    20f8:	31 e0       	ldi	r19, 0x01	; 1
    20fa:	b3 06       	cpc	r11, r19
    20fc:	b4 f4       	brge	.+44     	; 0x212a <main+0x6e8>
    20fe:	8c e2       	ldi	r24, 0x2C	; 44
    2100:	e8 16       	cp	r14, r24
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	f8 06       	cpc	r15, r24
    2106:	8c f4       	brge	.+34     	; 0x212a <main+0x6e8>
    2108:	9c e2       	ldi	r25, 0x2C	; 44
    210a:	89 16       	cp	r8, r25
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	99 06       	cpc	r9, r25
    2110:	64 f4       	brge	.+24     	; 0x212a <main+0x6e8>
    2112:	ef a9       	ldd	r30, Y+55	; 0x37
    2114:	f8 ad       	ldd	r31, Y+56	; 0x38
    2116:	ec 32       	cpi	r30, 0x2C	; 44
    2118:	f1 40       	sbci	r31, 0x01	; 1
    211a:	3c f4       	brge	.+14     	; 0x212a <main+0x6e8>
				{
					state = GO_TO_WPT;
    211c:	80 e5       	ldi	r24, 0x50	; 80
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	90 93 05 01 	sts	0x0105, r25
    2124:	80 93 04 01 	sts	0x0104, r24
					break;
    2128:	27 cd       	rjmp	.-1458   	; 0x1b78 <main+0x136>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
    212a:	b6 01       	movw	r22, r12
    212c:	6a 0d       	add	r22, r10
    212e:	7b 1d       	adc	r23, r11
    2130:	88 27       	eor	r24, r24
    2132:	77 fd       	sbrc	r23, 7
    2134:	80 95       	com	r24
    2136:	98 2f       	mov	r25, r24
    2138:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    213c:	20 e0       	ldi	r18, 0x00	; 0
    213e:	30 e0       	ldi	r19, 0x00	; 0
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	5f e3       	ldi	r21, 0x3F	; 63
    2144:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    2148:	6d af       	std	Y+61, r22	; 0x3d
    214a:	7e af       	std	Y+62, r23	; 0x3e
    214c:	22 96       	adiw	r28, 0x02	; 2
    214e:	8f af       	std	Y+63, r24	; 0x3f
    2150:	22 97       	sbiw	r28, 0x02	; 2
    2152:	23 96       	adiw	r28, 0x03	; 3
    2154:	9f af       	std	Y+63, r25	; 0x3f
    2156:	23 97       	sbiw	r28, 0x03	; 3
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	48 e4       	ldi	r20, 0x48	; 72
    215e:	53 e4       	ldi	r21, 0x43	; 67
    2160:	0e 94 a9 19 	call	0x3352	; 0x3352 <__gesf2>
    2164:	88 23       	and	r24, r24
    2166:	3c f1       	brlt	.+78     	; 0x21b6 <main+0x774>
    2168:	0d 3b       	cpi	r16, 0xBD	; 189
    216a:	32 e0       	ldi	r19, 0x02	; 2
    216c:	13 07       	cpc	r17, r19
    216e:	1c f5       	brge	.+70     	; 0x21b6 <main+0x774>
    2170:	8d eb       	ldi	r24, 0xBD	; 189
    2172:	e8 16       	cp	r14, r24
    2174:	82 e0       	ldi	r24, 0x02	; 2
    2176:	f8 06       	cpc	r15, r24
    2178:	f4 f4       	brge	.+60     	; 0x21b6 <main+0x774>
				{
					//turnOnBlueLED();
					status_go_to_goal = 1;
					int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
    217a:	c6 01       	movw	r24, r12
    217c:	8a 19       	sub	r24, r10
    217e:	9b 09       	sbc	r25, r11
    2180:	1a f4       	brpl	.+6      	; 0x2188 <main+0x746>
    2182:	91 95       	neg	r25
    2184:	81 95       	neg	r24
    2186:	91 09       	sbc	r25, r1
    2188:	68 2f       	mov	r22, r24
    218a:	79 2f       	mov	r23, r25
					if (PT2_left_inside >= PT3_right_inside) 
    218c:	ca 14       	cp	r12, r10
    218e:	db 04       	cpc	r13, r11
    2190:	4c f0       	brlt	.+18     	; 0x21a4 <main+0x762>
					{
						move_robot_to_puck(1,diff_PT_inside);
    2192:	81 e0       	ldi	r24, 0x01	; 1
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	0e 94 45 0c 	call	0x188a	; 0x188a <move_robot_to_puck>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
				{
					//turnOnBlueLED();
					status_go_to_goal = 1;
    219a:	e1 e0       	ldi	r30, 0x01	; 1
    219c:	f0 e0       	ldi	r31, 0x00	; 0
    219e:	fa af       	std	Y+58, r31	; 0x3a
    21a0:	e9 af       	std	Y+57, r30	; 0x39
    21a2:	ea cc       	rjmp	.-1580   	; 0x1b78 <main+0x136>
						move_robot_to_puck(1,diff_PT_inside);
		            
					}
					else
					{
						move_robot_to_puck(0,diff_PT_inside);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 45 0c 	call	0x188a	; 0x188a <move_robot_to_puck>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
				{
					//turnOnBlueLED();
					status_go_to_goal = 1;
    21ac:	21 e0       	ldi	r18, 0x01	; 1
    21ae:	30 e0       	ldi	r19, 0x00	; 0
    21b0:	3a af       	std	Y+58, r19	; 0x3a
    21b2:	29 af       	std	Y+57, r18	; 0x39
    21b4:	e1 cc       	rjmp	.-1598   	; 0x1b78 <main+0x136>
					{
						move_robot_to_puck(0,diff_PT_inside);
					}
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	48 e4       	ldi	r20, 0x48	; 72
    21bc:	53 e4       	ldi	r21, 0x43	; 67
    21be:	ed ad       	ldd	r30, Y+61	; 0x3d
    21c0:	be ad       	ldd	r27, Y+62	; 0x3e
    21c2:	22 96       	adiw	r28, 0x02	; 2
    21c4:	af ad       	ldd	r26, Y+63	; 0x3f
    21c6:	22 97       	sbiw	r28, 0x02	; 2
    21c8:	23 96       	adiw	r28, 0x03	; 3
    21ca:	ff ad       	ldd	r31, Y+63	; 0x3f
    21cc:	23 97       	sbiw	r28, 0x03	; 3
    21ce:	6e 2f       	mov	r22, r30
    21d0:	7b 2f       	mov	r23, r27
    21d2:	8a 2f       	mov	r24, r26
    21d4:	9f 2f       	mov	r25, r31
    21d6:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    21da:	88 23       	and	r24, r24
    21dc:	84 f5       	brge	.+96     	; 0x223e <main+0x7fc>
    21de:	05 36       	cpi	r16, 0x65	; 101
    21e0:	11 05       	cpc	r17, r1
    21e2:	6c f4       	brge	.+26     	; 0x21fe <main+0x7bc>
    21e4:	35 e6       	ldi	r19, 0x65	; 101
    21e6:	e3 16       	cp	r14, r19
    21e8:	f1 04       	cpc	r15, r1
    21ea:	4c f4       	brge	.+18     	; 0x21fe <main+0x7bc>
    21ec:	8f a9       	ldd	r24, Y+55	; 0x37
    21ee:	98 ad       	ldd	r25, Y+56	; 0x38
    21f0:	85 36       	cpi	r24, 0x65	; 101
    21f2:	91 05       	cpc	r25, r1
    21f4:	24 f4       	brge	.+8      	; 0x21fe <main+0x7bc>
    21f6:	95 e6       	ldi	r25, 0x65	; 101
    21f8:	89 16       	cp	r8, r25
    21fa:	91 04       	cpc	r9, r1
    21fc:	04 f1       	brlt	.+64     	; 0x223e <main+0x7fc>
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
					//Case where the puck is in front
					if (half_range == 0)
    21fe:	eb ad       	ldd	r30, Y+59	; 0x3b
    2200:	fc ad       	ldd	r31, Y+60	; 0x3c
    2202:	ef 2b       	or	r30, r31
    2204:	69 f4       	brne	.+26     	; 0x2220 <main+0x7de>
					{
						if (PT1_left_outside >= PT4_right_outside) 
    2206:	0e 15       	cp	r16, r14
    2208:	1f 05       	cpc	r17, r15
    220a:	2c f0       	brlt	.+10     	; 0x2216 <main+0x7d4>
						{
							turn_left();
    220c:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
    2210:	1a ae       	std	Y+58, r1	; 0x3a
    2212:	19 ae       	std	Y+57, r1	; 0x39
    2214:	b1 cc       	rjmp	.-1694   	; 0x1b78 <main+0x136>
						if (PT1_left_outside >= PT4_right_outside) 
						{
							turn_left();
						}
						else
						turn_right();
    2216:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
    221a:	1a ae       	std	Y+58, r1	; 0x3a
    221c:	19 ae       	std	Y+57, r1	; 0x39
    221e:	ac cc       	rjmp	.-1704   	; 0x1b78 <main+0x136>
						else
						turn_right();
					}
					else
					{
						if (PT6_back_left >= PT5_back_right) 
    2220:	2f a9       	ldd	r18, Y+55	; 0x37
    2222:	38 ad       	ldd	r19, Y+56	; 0x38
    2224:	28 15       	cp	r18, r8
    2226:	39 05       	cpc	r19, r9
    2228:	2c f0       	brlt	.+10     	; 0x2234 <main+0x7f2>
						{
							turn_left();
    222a:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
    222e:	1a ae       	std	Y+58, r1	; 0x3a
    2230:	19 ae       	std	Y+57, r1	; 0x39
    2232:	a2 cc       	rjmp	.-1724   	; 0x1b78 <main+0x136>
						if (PT6_back_left >= PT5_back_right) 
						{
							turn_left();
						}
						else
						turn_right();
    2234:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
    2238:	1a ae       	std	Y+58, r1	; 0x3a
    223a:	19 ae       	std	Y+57, r1	; 0x39
    223c:	9d cc       	rjmp	.-1734   	; 0x1b78 <main+0x136>
						turn_right();
		            
					}
				}
				else{
					state = GO_TO_WPT;
    223e:	80 e5       	ldi	r24, 0x50	; 80
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	90 93 05 01 	sts	0x0105, r25
    2246:	80 93 04 01 	sts	0x0104, r24
    224a:	96 cc       	rjmp	.-1748   	; 0x1b78 <main+0x136>
                    
                // --------------------------------------------------------------
                // INITIAL STATE
                // --------------------------------------------------------------
            case INITIAL_STATE:
                if (check(PINB,2))
    224c:	1a 9b       	sbis	0x03, 2	; 3
    224e:	07 c0       	rjmp	.+14     	; 0x225e <main+0x81c>
                {
                    goal_pos_x = GOAL_A_POS_X;
    2250:	8c e9       	ldi	r24, 0x9C	; 156
    2252:	9f ef       	ldi	r25, 0xFF	; 255
    2254:	21 96       	adiw	r28, 0x01	; 1
    2256:	9f af       	std	Y+63, r25	; 0x3f
    2258:	8e af       	std	Y+62, r24	; 0x3e
    225a:	21 97       	sbiw	r28, 0x01	; 1
    225c:	06 c0       	rjmp	.+12     	; 0x226a <main+0x828>
                    //                        goal_pos_y = TARGETS_Y[TARGET_NUM];
                    //
                }
				else
                {
                    goal_pos_x = GOAL_B_POS_X;
    225e:	e3 e7       	ldi	r30, 0x73	; 115
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	21 96       	adiw	r28, 0x01	; 1
    2264:	ff af       	std	Y+63, r31	; 0x3f
    2266:	ee af       	std	Y+62, r30	; 0x3e
    2268:	21 97       	sbiw	r28, 0x01	; 1
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
    226a:	83 e0       	ldi	r24, 0x03	; 3
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	90 93 05 01 	sts	0x0105, r25
    2272:	80 93 04 01 	sts	0x0104, r24
				else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    2276:	1a ae       	std	Y+58, r1	; 0x3a
    2278:	19 ae       	std	Y+57, r1	; 0x39
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
                break;
    227a:	7e cc       	rjmp	.-1796   	; 0x1b78 <main+0x136>
						status_go_to_goal = 0;
						state  = FIND_PUCK;
						break;
					}*/
					
					if (status_go_to_goal == 0)
    227c:	29 ad       	ldd	r18, Y+57	; 0x39
    227e:	3a ad       	ldd	r19, Y+58	; 0x3a
    2280:	23 2b       	or	r18, r19
    2282:	09 f0       	breq	.+2      	; 0x2286 <main+0x844>
    2284:	52 c0       	rjmp	.+164    	; 0x232a <main+0x8e8>
					{
					
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    2286:	6d a1       	ldd	r22, Y+37	; 0x25
    2288:	7e a1       	ldd	r23, Y+38	; 0x26
    228a:	71 95       	neg	r23
    228c:	61 95       	neg	r22
    228e:	71 09       	sbc	r23, r1
    2290:	88 27       	eor	r24, r24
    2292:	77 fd       	sbrc	r23, 7
    2294:	80 95       	com	r24
    2296:	98 2f       	mov	r25, r24
    2298:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    229c:	6b 01       	movw	r12, r22
    229e:	7c 01       	movw	r14, r24
					}*/
					
					if (status_go_to_goal == 0)
					{
					
						dir_x = goal_pos_x-x_robot;
    22a0:	8b a1       	ldd	r24, Y+35	; 0x23
    22a2:	9c a1       	ldd	r25, Y+36	; 0x24
    22a4:	21 96       	adiw	r28, 0x01	; 1
    22a6:	6e ad       	ldd	r22, Y+62	; 0x3e
    22a8:	7f ad       	ldd	r23, Y+63	; 0x3f
    22aa:	21 97       	sbiw	r28, 0x01	; 1
    22ac:	68 1b       	sub	r22, r24
    22ae:	79 0b       	sbc	r23, r25
    22b0:	88 27       	eor	r24, r24
    22b2:	77 fd       	sbrc	r23, 7
    22b4:	80 95       	com	r24
    22b6:	98 2f       	mov	r25, r24
    22b8:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    22bc:	90 58       	subi	r25, 0x80	; 128
    22be:	a7 01       	movw	r20, r14
    22c0:	96 01       	movw	r18, r12
    22c2:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <atan2>
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	44 e3       	ldi	r20, 0x34	; 52
    22cc:	53 e4       	ldi	r21, 0x43	; 67
    22ce:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    22d2:	2b ed       	ldi	r18, 0xDB	; 219
    22d4:	3f e0       	ldi	r19, 0x0F	; 15
    22d6:	49 e4       	ldi	r20, 0x49	; 73
    22d8:	50 e4       	ldi	r21, 0x40	; 64
    22da:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
		                 
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    22de:	9e 01       	movw	r18, r28
    22e0:	2b 5f       	subi	r18, 0xFB	; 251
    22e2:	3f 4f       	sbci	r19, 0xFF	; 255
    22e4:	ae 01       	movw	r20, r28
    22e6:	4f 5f       	subi	r20, 0xFF	; 255
    22e8:	5f 4f       	sbci	r21, 0xFF	; 255
    22ea:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <calculate_diff_theta>
						
						if (diff_theta <20)
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	40 ea       	ldi	r20, 0xA0	; 160
    22f4:	51 e4       	ldi	r21, 0x41	; 65
    22f6:	69 81       	ldd	r22, Y+1	; 0x01
    22f8:	7a 81       	ldd	r23, Y+2	; 0x02
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__cmpsf2>
    2302:	88 23       	and	r24, r24
    2304:	0c f4       	brge	.+2      	; 0x2308 <main+0x8c6>
    2306:	34 cc       	rjmp	.-1944   	; 0x1b70 <main+0x12e>
							break;
						}
						else
						{
							
							if (bank == 0)
    2308:	8d 81       	ldd	r24, Y+5	; 0x05
    230a:	9e 81       	ldd	r25, Y+6	; 0x06
    230c:	00 97       	sbiw	r24, 0x00	; 0
    230e:	29 f4       	brne	.+10     	; 0x231a <main+0x8d8>
							{
								turnOnBlueLED();
    2310:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
								circle_left();
    2314:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <circle_left>
    2318:	2f cc       	rjmp	.-1954   	; 0x1b78 <main+0x136>
								circle_started_before = 1;
							}
							else if (bank == 1)
    231a:	01 97       	sbiw	r24, 0x01	; 1
    231c:	09 f0       	breq	.+2      	; 0x2320 <main+0x8de>
    231e:	2c cc       	rjmp	.-1960   	; 0x1b78 <main+0x136>
							{
								turnOffBlueLED();
    2320:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
								circle_right();
    2324:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <circle_right>
    2328:	27 cc       	rjmp	.-1970   	; 0x1b78 <main+0x136>
								circle_started_before = 1;
							}								
						
						}		                 
					}
					else if (status_go_to_goal == 1)
    232a:	89 ad       	ldd	r24, Y+57	; 0x39
    232c:	9a ad       	ldd	r25, Y+58	; 0x3a
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	09 f0       	breq	.+2      	; 0x2334 <main+0x8f2>
    2332:	22 cc       	rjmp	.-1980   	; 0x1b78 <main+0x136>
					{
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    2334:	6d a1       	ldd	r22, Y+37	; 0x25
    2336:	7e a1       	ldd	r23, Y+38	; 0x26
    2338:	71 95       	neg	r23
    233a:	61 95       	neg	r22
    233c:	71 09       	sbc	r23, r1
    233e:	88 27       	eor	r24, r24
    2340:	77 fd       	sbrc	r23, 7
    2342:	80 95       	com	r24
    2344:	98 2f       	mov	r25, r24
    2346:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
    234a:	6b 01       	movw	r12, r22
    234c:	7c 01       	movw	r14, r24
						
						}		                 
					}
					else if (status_go_to_goal == 1)
					{
						dir_x = goal_pos_x-x_robot;
    234e:	8b a1       	ldd	r24, Y+35	; 0x23
    2350:	9c a1       	ldd	r25, Y+36	; 0x24
    2352:	21 96       	adiw	r28, 0x01	; 1
    2354:	6e ad       	ldd	r22, Y+62	; 0x3e
    2356:	7f ad       	ldd	r23, Y+63	; 0x3f
    2358:	21 97       	sbiw	r28, 0x01	; 1
    235a:	68 1b       	sub	r22, r24
    235c:	79 0b       	sbc	r23, r25
    235e:	88 27       	eor	r24, r24
    2360:	77 fd       	sbrc	r23, 7
    2362:	80 95       	com	r24
    2364:	98 2f       	mov	r25, r24
    2366:	0e 94 9b 18 	call	0x3136	; 0x3136 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    236a:	90 58       	subi	r25, 0x80	; 128
    236c:	a7 01       	movw	r20, r14
    236e:	96 01       	movw	r18, r12
    2370:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <atan2>
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	30 e0       	ldi	r19, 0x00	; 0
    2378:	44 e3       	ldi	r20, 0x34	; 52
    237a:	53 e4       	ldi	r21, 0x43	; 67
    237c:	0e 94 b4 19 	call	0x3368	; 0x3368 <__mulsf3>
    2380:	2b ed       	ldi	r18, 0xDB	; 219
    2382:	3f e0       	ldi	r19, 0x0F	; 15
    2384:	49 e4       	ldi	r20, 0x49	; 73
    2386:	50 e4       	ldi	r21, 0x40	; 64
    2388:	0e 94 00 18 	call	0x3000	; 0x3000 <__divsf3>
					
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    238c:	9e 01       	movw	r18, r28
    238e:	2b 5f       	subi	r18, 0xFB	; 251
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	ae 01       	movw	r20, r28
    2394:	4f 5f       	subi	r20, 0xFF	; 255
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
    2398:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <calculate_diff_theta>
					
						move_robot_after_get_puck(bank,diff_theta);
    239c:	69 81       	ldd	r22, Y+1	; 0x01
    239e:	7a 81       	ldd	r23, Y+2	; 0x02
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	9c 81       	ldd	r25, Y+4	; 0x04
    23a4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__fixsfsi>
    23a8:	8d 81       	ldd	r24, Y+5	; 0x05
    23aa:	9e 81       	ldd	r25, Y+6	; 0x06
    23ac:	0e 94 89 0c 	call	0x1912	; 0x1912 <move_robot_after_get_puck>
    23b0:	e3 cb       	rjmp	.-2106   	; 0x1b78 <main+0x136>
                    
                // --------------------------------------------------------------
                // SYSTEM STATE
                // --------------------------------------------------------------
				case SYSTEM_STATE:
					m_red(TOGGLE);
    23b2:	6e 9a       	sbi	0x0d, 6	; 13
    23b4:	9e b1       	in	r25, 0x0e	; 14
    23b6:	80 e4       	ldi	r24, 0x40	; 64
    23b8:	89 27       	eor	r24, r25
    23ba:	8e b9       	out	0x0e, r24	; 14
					switch (buffer_rec[0])
    23bc:	80 91 48 01 	lds	r24, 0x0148
    23c0:	83 3a       	cpi	r24, 0xA3	; 163
    23c2:	39 f1       	breq	.+78     	; 0x2412 <main+0x9d0>
    23c4:	38 f4       	brcc	.+14     	; 0x23d4 <main+0x992>
    23c6:	81 3a       	cpi	r24, 0xA1	; 161
    23c8:	a9 f0       	breq	.+42     	; 0x23f4 <main+0x9b2>
    23ca:	c8 f4       	brcc	.+50     	; 0x23fe <main+0x9bc>
    23cc:	80 3a       	cpi	r24, 0xA0	; 160
    23ce:	09 f0       	breq	.+2      	; 0x23d2 <main+0x990>
    23d0:	d3 cb       	rjmp	.-2138   	; 0x1b78 <main+0x136>
    23d2:	09 c0       	rjmp	.+18     	; 0x23e6 <main+0x9a4>
    23d4:	86 3a       	cpi	r24, 0xA6	; 166
    23d6:	b9 f1       	breq	.+110    	; 0x2446 <main+0xa04>
    23d8:	87 3a       	cpi	r24, 0xA7	; 167
    23da:	09 f4       	brne	.+2      	; 0x23de <main+0x99c>
    23dc:	44 c0       	rjmp	.+136    	; 0x2466 <main+0xa24>
    23de:	84 3a       	cpi	r24, 0xA4	; 164
    23e0:	09 f0       	breq	.+2      	; 0x23e4 <main+0x9a2>
    23e2:	ca cb       	rjmp	.-2156   	; 0x1b78 <main+0x136>
    23e4:	20 c0       	rjmp	.+64     	; 0x2426 <main+0x9e4>
					{
						//Comm test
						case 0xA0:
							state = BLUE_LED_STATE;
    23e6:	86 e1       	ldi	r24, 0x16	; 22
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	90 93 05 01 	sts	0x0105, r25
    23ee:	80 93 04 01 	sts	0x0104, r24
							break;
    23f2:	c2 cb       	rjmp	.-2172   	; 0x1b78 <main+0x136>
							//pause_bool = 0;
							//}else
							//{
							//state = INITIAL_STATE;
							//}
							state = INITIAL_STATE;
    23f4:	10 92 05 01 	sts	0x0105, r1
    23f8:	10 92 04 01 	sts	0x0104, r1
							//turnOnBlueLED();
							break;
    23fc:	bd cb       	rjmp	.-2182   	; 0x1b78 <main+0x136>
                        
							//Goal A
						case 0xA2:
							if (check(PINB,2))
    23fe:	83 b1       	in	r24, 0x03	; 3
								celebrate();
							stop_motor();
    2400:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
							scoreA = buffer_rec[1];
							scoreB = buffer_rec[2];
							state = STOP_STATE;
    2404:	85 e1       	ldi	r24, 0x15	; 21
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	90 93 05 01 	sts	0x0105, r25
    240c:	80 93 04 01 	sts	0x0104, r24
							break;
    2410:	b3 cb       	rjmp	.-2202   	; 0x1b78 <main+0x136>
                        
							//Goal B
						case 0xA3:
							if (!check(PINB,2))
    2412:	83 b1       	in	r24, 0x03	; 3
								celebrate();
							stop_motor();
    2414:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
							scoreA = buffer_rec[1];
							scoreB = buffer_rec[2];
							state = STOP_STATE;
    2418:	85 e1       	ldi	r24, 0x15	; 21
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	90 93 05 01 	sts	0x0105, r25
    2420:	80 93 04 01 	sts	0x0104, r24
							break;
    2424:	a9 cb       	rjmp	.-2222   	; 0x1b78 <main+0x136>
                        
							//Pause
						case 0xA4:
							pause_bool = 1;
							stop_counter = 0;
							go_bwd();
    2426:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <go_bwd>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	90 e0       	ldi	r25, 0x00	; 0
    242e:	01 96       	adiw	r24, 0x01	; 1
							while(stop_counter<TIME_STOP)
    2430:	88 3e       	cpi	r24, 0xE8	; 232
    2432:	e3 e0       	ldi	r30, 0x03	; 3
    2434:	9e 07       	cpc	r25, r30
    2436:	d9 f7       	brne	.-10     	; 0x242e <main+0x9ec>
							{
								stop_counter++;
							}
							state = STOP_STATE;
    2438:	85 e1       	ldi	r24, 0x15	; 21
    243a:	90 e0       	ldi	r25, 0x00	; 0
    243c:	90 93 05 01 	sts	0x0105, r25
    2440:	80 93 04 01 	sts	0x0104, r24
							break;
    2444:	99 cb       	rjmp	.-2254   	; 0x1b78 <main+0x136>
                        
							//Halftime
						case 0xA6:
							stop_counter = 0;
							go_bwd();
    2446:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <go_bwd>
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	01 96       	adiw	r24, 0x01	; 1
							while(stop_counter<TIME_STOP)
    2450:	88 3e       	cpi	r24, 0xE8	; 232
    2452:	f3 e0       	ldi	r31, 0x03	; 3
    2454:	9f 07       	cpc	r25, r31
    2456:	d9 f7       	brne	.-10     	; 0x244e <main+0xa0c>
							{
								stop_counter++;
							}
							state = STOP_STATE;
    2458:	85 e1       	ldi	r24, 0x15	; 21
    245a:	90 e0       	ldi	r25, 0x00	; 0
    245c:	90 93 05 01 	sts	0x0105, r25
    2460:	80 93 04 01 	sts	0x0104, r24
							break;
    2464:	89 cb       	rjmp	.-2286   	; 0x1b78 <main+0x136>
                        
							//Game over
						case 0xA7:
							if (check(PINB,2))
    2466:	83 b1       	in	r24, 0x03	; 3
							}else
							{
								if (scoreA < scoreB)
									celebrate();
							}
							stop_motor();
    2468:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
							stop_counter = 0;
							go_bwd();
    246c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <go_bwd>
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	01 96       	adiw	r24, 0x01	; 1
							while(stop_counter<TIME_STOP)
    2476:	88 3e       	cpi	r24, 0xE8	; 232
    2478:	23 e0       	ldi	r18, 0x03	; 3
    247a:	92 07       	cpc	r25, r18
    247c:	d9 f7       	brne	.-10     	; 0x2474 <main+0xa32>
							{
								stop_counter++;
							}
							state = STOP_STATE;
    247e:	85 e1       	ldi	r24, 0x15	; 21
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	90 93 05 01 	sts	0x0105, r25
    2486:	80 93 04 01 	sts	0x0104, r24
							break;
    248a:	76 cb       	rjmp	.-2324   	; 0x1b78 <main+0x136>
                    
					// --------------------------------------------------------------
					// BLUE LED STATE
					// --------------------------------------------------------------
				case BLUE_LED_STATE:
					stop_motor();
    248c:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
					turnOnBlueLED();
    2490:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
    2494:	3f eb       	ldi	r19, 0xBF	; 191
    2496:	87 e2       	ldi	r24, 0x27	; 39
    2498:	99 e0       	ldi	r25, 0x09	; 9
    249a:	31 50       	subi	r19, 0x01	; 1
    249c:	80 40       	sbci	r24, 0x00	; 0
    249e:	90 40       	sbci	r25, 0x00	; 0
    24a0:	e1 f7       	brne	.-8      	; 0x249a <main+0xa58>
    24a2:	00 c0       	rjmp	.+0      	; 0x24a4 <main+0xa62>
    24a4:	00 00       	nop
					m_wait(3000);
					turnOffBlueLED();
    24a6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
					state = STOP_STATE;
    24aa:	85 e1       	ldi	r24, 0x15	; 21
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	90 93 05 01 	sts	0x0105, r25
    24b2:	80 93 04 01 	sts	0x0104, r24
					break;
    24b6:	60 cb       	rjmp	.-2368   	; 0x1b78 <main+0x136>
					// --------------------------------------------------------------
					// STOP STATE
					// --------------------------------------------------------------
				case STOP_STATE:
					//m_green(ON);
					turnOffBlueLED();
    24b8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
					stop_motor();
    24bc:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
					break;
    24c0:	5b cb       	rjmp	.-2378   	; 0x1b78 <main+0x136>
                    
					// --------------------------------------------------------------
					// DEFAULT STATE
					// --------------------------------------------------------------
				default:
					stop_motor();
    24c2:	0e 94 cd 0c 	call	0x199a	; 0x199a <stop_motor>
					break;
    24c6:	58 cb       	rjmp	.-2384   	; 0x1b78 <main+0x136>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    24c8:	ee 24       	eor	r14, r14
    24ca:	e3 94       	inc	r14
    24cc:	f1 2c       	mov	r15, r1
    24ce:	9f cb       	rjmp	.-2242   	; 0x1c0e <main+0x1cc>
                case(6):
                    PT7_have_puck = ADC;
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
    24d0:	f2 01       	movw	r30, r4
    24d2:	80 81       	ld	r24, Z
    24d4:	80 61       	ori	r24, 0x10	; 16
    24d6:	80 83       	st	Z, r24
    24d8:	97 cb       	rjmp	.-2258   	; 0x1c08 <main+0x1c6>

000024da <__vector_41>:

// --------------------------------------------------------------
// INTERRUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    24da:	1f 92       	push	r1
    24dc:	0f 92       	push	r0
    24de:	0f b6       	in	r0, 0x3f	; 63
    24e0:	0f 92       	push	r0
    24e2:	11 24       	eor	r1, r1
    24e4:	8f 93       	push	r24
    24e6:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    24e8:	81 e0       	ldi	r24, 0x01	; 1
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	90 93 55 01 	sts	0x0155, r25
    24f0:	80 93 54 01 	sts	0x0154, r24
}
    24f4:	9f 91       	pop	r25
    24f6:	8f 91       	pop	r24
    24f8:	0f 90       	pop	r0
    24fa:	0f be       	out	0x3f, r0	; 63
    24fc:	0f 90       	pop	r0
    24fe:	1f 90       	pop	r1
    2500:	18 95       	reti

00002502 <__vector_3>:

ISR(INT2_vect)
{
    2502:	1f 92       	push	r1
    2504:	0f 92       	push	r0
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	0f 92       	push	r0
    250a:	11 24       	eor	r1, r1
    250c:	2f 93       	push	r18
    250e:	3f 93       	push	r19
    2510:	4f 93       	push	r20
    2512:	5f 93       	push	r21
    2514:	6f 93       	push	r22
    2516:	7f 93       	push	r23
    2518:	8f 93       	push	r24
    251a:	9f 93       	push	r25
    251c:	af 93       	push	r26
    251e:	bf 93       	push	r27
    2520:	ef 93       	push	r30
    2522:	ff 93       	push	r31
	//Read
	m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    2524:	6a e0       	ldi	r22, 0x0A	; 10
    2526:	88 e4       	ldi	r24, 0x48	; 72
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	0e 94 1a 13 	call	0x2634	; 0x2634 <m_rf_read>
	//past_state = state;
	//state = SYSTEM_STATE;
	flag_system = 1;
    252e:	81 e0       	ldi	r24, 0x01	; 1
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	90 93 53 01 	sts	0x0153, r25
    2536:	80 93 52 01 	sts	0x0152, r24
	m_green(TOGGLE); // Indicator receiving from RF
    253a:	6a 9a       	sbi	0x0d, 2	; 13
    253c:	9e b1       	in	r25, 0x0e	; 14
    253e:	84 e0       	ldi	r24, 0x04	; 4
    2540:	89 27       	eor	r24, r25
    2542:	8e b9       	out	0x0e, r24	; 14
}
    2544:	ff 91       	pop	r31
    2546:	ef 91       	pop	r30
    2548:	bf 91       	pop	r27
    254a:	af 91       	pop	r26
    254c:	9f 91       	pop	r25
    254e:	8f 91       	pop	r24
    2550:	7f 91       	pop	r23
    2552:	6f 91       	pop	r22
    2554:	5f 91       	pop	r21
    2556:	4f 91       	pop	r20
    2558:	3f 91       	pop	r19
    255a:	2f 91       	pop	r18
    255c:	0f 90       	pop	r0
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	0f 90       	pop	r0
    2562:	1f 90       	pop	r1
    2564:	18 95       	reti

00002566 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2566:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2568:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    256a:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    256c:	8c e0       	ldi	r24, 0x0C	; 12
    256e:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2572:	e9 e6       	ldi	r30, 0x69	; 105
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	80 62       	ori	r24, 0x20	; 32
    257a:	80 83       	st	Z, r24
    257c:	80 81       	ld	r24, Z
    257e:	8f 7e       	andi	r24, 0xEF	; 239
    2580:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2582:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2584:	78 94       	sei
    2586:	08 95       	ret

00002588 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2588:	1f 93       	push	r17
    258a:	cf 93       	push	r28
    258c:	df 93       	push	r29
    258e:	18 2f       	mov	r17, r24
    2590:	d6 2f       	mov	r29, r22
    2592:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2594:	0e 94 b3 12 	call	0x2566	; 0x2566 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2598:	94 ea       	ldi	r25, 0xA4	; 164
    259a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    259e:	ec eb       	ldi	r30, 0xBC	; 188
    25a0:	f0 e0       	ldi	r31, 0x00	; 0
    25a2:	90 81       	ld	r25, Z
    25a4:	99 23       	and	r25, r25
    25a6:	ec f7       	brge	.-6      	; 0x25a2 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    25a8:	90 e5       	ldi	r25, 0x50	; 80
    25aa:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    25ae:	94 e8       	ldi	r25, 0x84	; 132
    25b0:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    25b4:	ec eb       	ldi	r30, 0xBC	; 188
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	90 81       	ld	r25, Z
    25ba:	99 23       	and	r25, r25
    25bc:	ec f7       	brge	.-6      	; 0x25b8 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    25be:	90 91 b9 00 	lds	r25, 0x00B9
    25c2:	98 7f       	andi	r25, 0xF8	; 248
    25c4:	90 32       	cpi	r25, 0x20	; 32
    25c6:	29 f4       	brne	.+10     	; 0x25d2 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    25c8:	84 e9       	ldi	r24, 0x94	; 148
    25ca:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	2d c0       	rjmp	.+90     	; 0x262c <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    25d8:	84 e8       	ldi	r24, 0x84	; 132
    25da:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    25de:	ec eb       	ldi	r30, 0xBC	; 188
    25e0:	f0 e0       	ldi	r31, 0x00	; 0
    25e2:	90 81       	ld	r25, Z
    25e4:	99 23       	and	r25, r25
    25e6:	ec f7       	brge	.-6      	; 0x25e2 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    25e8:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    25ec:	84 e8       	ldi	r24, 0x84	; 132
    25ee:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    25f2:	ec eb       	ldi	r30, 0xBC	; 188
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	88 23       	and	r24, r24
    25fa:	ec f7       	brge	.-6      	; 0x25f6 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    25fc:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2600:	84 e8       	ldi	r24, 0x84	; 132
    2602:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2606:	ec eb       	ldi	r30, 0xBC	; 188
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 23       	and	r24, r24
    260e:	ec f7       	brge	.-6      	; 0x260a <m_rf_open+0x82>
	
	TWDR = packet_length;
    2610:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2614:	84 e8       	ldi	r24, 0x84	; 132
    2616:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    261a:	ec eb       	ldi	r30, 0xBC	; 188
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	88 23       	and	r24, r24
    2622:	ec f7       	brge	.-6      	; 0x261e <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2624:	84 e9       	ldi	r24, 0x94	; 148
    2626:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    262a:	81 e0       	ldi	r24, 0x01	; 1
}
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	08 95       	ret

00002634 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2638:	24 ea       	ldi	r18, 0xA4	; 164
    263a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    263e:	ec eb       	ldi	r30, 0xBC	; 188
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	20 81       	ld	r18, Z
    2644:	22 23       	and	r18, r18
    2646:	ec f7       	brge	.-6      	; 0x2642 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2648:	21 e5       	ldi	r18, 0x51	; 81
    264a:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    264e:	24 e8       	ldi	r18, 0x84	; 132
    2650:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2654:	ec eb       	ldi	r30, 0xBC	; 188
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	20 81       	ld	r18, Z
    265a:	22 23       	and	r18, r18
    265c:	ec f7       	brge	.-6      	; 0x2658 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    265e:	20 91 b9 00 	lds	r18, 0x00B9
    2662:	28 7f       	andi	r18, 0xF8	; 248
    2664:	28 34       	cpi	r18, 0x48	; 72
    2666:	29 f4       	brne	.+10     	; 0x2672 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2668:	84 e9       	ldi	r24, 0x94	; 148
    266a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	3f c0       	rjmp	.+126    	; 0x26f0 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2672:	24 ec       	ldi	r18, 0xC4	; 196
    2674:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2678:	ec eb       	ldi	r30, 0xBC	; 188
    267a:	f0 e0       	ldi	r31, 0x00	; 0
    267c:	20 81       	ld	r18, Z
    267e:	22 23       	and	r18, r18
    2680:	ec f7       	brge	.-6      	; 0x267c <m_rf_read+0x48>
	bytes = TWDR;
    2682:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    2686:	46 13       	cpse	r20, r22
    2688:	09 c0       	rjmp	.+18     	; 0x269c <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    268a:	50 e0       	ldi	r21, 0x00	; 0
    268c:	41 50       	subi	r20, 0x01	; 1
    268e:	51 09       	sbc	r21, r1
    2690:	14 16       	cp	r1, r20
    2692:	15 06       	cpc	r1, r21
    2694:	44 f0       	brlt	.+16     	; 0x26a6 <m_rf_read+0x72>
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	18 c0       	rjmp	.+48     	; 0x26cc <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    269c:	84 e9       	ldi	r24, 0x94	; 148
    269e:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    26a2:	80 e0       	ldi	r24, 0x00	; 0
    26a4:	25 c0       	rjmp	.+74     	; 0x26f0 <m_rf_read+0xbc>
    26a6:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26ac:	ec eb       	ldi	r30, 0xBC	; 188
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    26b2:	cb eb       	ldi	r28, 0xBB	; 187
    26b4:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26b6:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26b8:	60 81       	ld	r22, Z
    26ba:	66 23       	and	r22, r22
    26bc:	ec f7       	brge	.-6      	; 0x26b8 <m_rf_read+0x84>
		buffer[i] = TWDR;
    26be:	68 81       	ld	r22, Y
    26c0:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    26c2:	2f 5f       	subi	r18, 0xFF	; 255
    26c4:	3f 4f       	sbci	r19, 0xFF	; 255
    26c6:	24 17       	cp	r18, r20
    26c8:	35 07       	cpc	r19, r21
    26ca:	ac f3       	brlt	.-22     	; 0x26b6 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    26cc:	24 e8       	ldi	r18, 0x84	; 132
    26ce:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26d2:	ec eb       	ldi	r30, 0xBC	; 188
    26d4:	f0 e0       	ldi	r31, 0x00	; 0
    26d6:	20 81       	ld	r18, Z
    26d8:	22 23       	and	r18, r18
    26da:	ec f7       	brge	.-6      	; 0x26d6 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    26dc:	20 91 bb 00 	lds	r18, 0x00BB
    26e0:	fc 01       	movw	r30, r24
    26e2:	e4 0f       	add	r30, r20
    26e4:	f5 1f       	adc	r31, r21
    26e6:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    26e8:	84 e9       	ldi	r24, 0x94	; 148
    26ea:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
}
    26f0:	df 91       	pop	r29
    26f2:	cf 91       	pop	r28
    26f4:	08 95       	ret

000026f6 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    26f6:	1f 92       	push	r1
    26f8:	0f 92       	push	r0
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	0f 92       	push	r0
    26fe:	11 24       	eor	r1, r1
    2700:	8f 93       	push	r24
    2702:	9f 93       	push	r25
    2704:	ef 93       	push	r30
    2706:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2708:	e1 ee       	ldi	r30, 0xE1	; 225
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	80 81       	ld	r24, Z
        UDINT = 0;
    270e:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2710:	83 ff       	sbrs	r24, 3
    2712:	11 c0       	rjmp	.+34     	; 0x2736 <__vector_10+0x40>
		UENUM = 0;
    2714:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2718:	91 e0       	ldi	r25, 0x01	; 1
    271a:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    271e:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2722:	92 e1       	ldi	r25, 0x12	; 18
    2724:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2728:	98 e0       	ldi	r25, 0x08	; 8
    272a:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    272e:	10 92 6f 01 	sts	0x016F, r1
		cdc_line_rtsdtr = 0;
    2732:	10 92 70 01 	sts	0x0170, r1
        }
	if (intbits & (1<<SOFI)) {
    2736:	82 ff       	sbrs	r24, 2
    2738:	13 c0       	rjmp	.+38     	; 0x2760 <__vector_10+0x6a>
		if (usb_configuration) {
    273a:	80 91 6f 01 	lds	r24, 0x016F
    273e:	88 23       	and	r24, r24
    2740:	79 f0       	breq	.+30     	; 0x2760 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2742:	80 91 6e 01 	lds	r24, 0x016E
			if (t) {
    2746:	88 23       	and	r24, r24
    2748:	59 f0       	breq	.+22     	; 0x2760 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    274a:	81 50       	subi	r24, 0x01	; 1
    274c:	80 93 6e 01 	sts	0x016E, r24
				if (!t) {
    2750:	81 11       	cpse	r24, r1
    2752:	06 c0       	rjmp	.+12     	; 0x2760 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2754:	84 e0       	ldi	r24, 0x04	; 4
    2756:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    275a:	8a e3       	ldi	r24, 0x3A	; 58
    275c:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2760:	ff 91       	pop	r31
    2762:	ef 91       	pop	r30
    2764:	9f 91       	pop	r25
    2766:	8f 91       	pop	r24
    2768:	0f 90       	pop	r0
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	0f 90       	pop	r0
    276e:	1f 90       	pop	r1
    2770:	18 95       	reti

00002772 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2772:	1f 92       	push	r1
    2774:	0f 92       	push	r0
    2776:	0f b6       	in	r0, 0x3f	; 63
    2778:	0f 92       	push	r0
    277a:	11 24       	eor	r1, r1
    277c:	0f 93       	push	r16
    277e:	1f 93       	push	r17
    2780:	2f 93       	push	r18
    2782:	3f 93       	push	r19
    2784:	4f 93       	push	r20
    2786:	5f 93       	push	r21
    2788:	6f 93       	push	r22
    278a:	7f 93       	push	r23
    278c:	8f 93       	push	r24
    278e:	9f 93       	push	r25
    2790:	af 93       	push	r26
    2792:	bf 93       	push	r27
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	ef 93       	push	r30
    279a:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    279c:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    27a0:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    27a4:	83 ff       	sbrs	r24, 3
    27a6:	51 c1       	rjmp	.+674    	; 0x2a4a <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    27a8:	e1 ef       	ldi	r30, 0xF1	; 241
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    27ae:	40 81       	ld	r20, Z
                wValue = UEDATX;
    27b0:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    27b2:	30 81       	ld	r19, Z
    27b4:	93 2f       	mov	r25, r19
    27b6:	80 e0       	ldi	r24, 0x00	; 0
    27b8:	dc 01       	movw	r26, r24
    27ba:	a2 2b       	or	r26, r18
    27bc:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    27be:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    27c0:	60 81       	ld	r22, Z
    27c2:	96 2f       	mov	r25, r22
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	85 2b       	or	r24, r21
                wLength = UEDATX;
    27c8:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    27ca:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    27cc:	52 ef       	ldi	r21, 0xF2	; 242
    27ce:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    27d2:	46 30       	cpi	r20, 0x06	; 6
    27d4:	09 f0       	breq	.+2      	; 0x27d8 <__vector_11+0x66>
    27d6:	5c c0       	rjmp	.+184    	; 0x2890 <__vector_11+0x11e>
    27d8:	04 c0       	rjmp	.+8      	; 0x27e2 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    27da:	81 e2       	ldi	r24, 0x21	; 33
    27dc:	80 93 eb 00 	sts	0x00EB, r24
					return;
    27e0:	3b c1       	rjmp	.+630    	; 0x2a58 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    27e2:	c6 e0       	ldi	r28, 0x06	; 6
    27e4:	47 ef       	ldi	r20, 0xF7	; 247
    27e6:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    27e8:	fa 01       	movw	r30, r20
    27ea:	65 91       	lpm	r22, Z+
    27ec:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    27ee:	26 17       	cp	r18, r22
    27f0:	37 07       	cpc	r19, r23
    27f2:	19 f0       	breq	.+6      	; 0x27fa <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    27f4:	49 5f       	subi	r20, 0xF9	; 249
    27f6:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    27f8:	20 c0       	rjmp	.+64     	; 0x283a <__vector_11+0xc8>
				}
				list += 2;
    27fa:	fa 01       	movw	r30, r20
    27fc:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    27fe:	65 91       	lpm	r22, Z+
    2800:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2802:	86 17       	cp	r24, r22
    2804:	97 07       	cpc	r25, r23
    2806:	19 f0       	breq	.+6      	; 0x280e <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    2808:	49 5f       	subi	r20, 0xF9	; 249
    280a:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    280c:	16 c0       	rjmp	.+44     	; 0x283a <__vector_11+0xc8>
				}
				list += 2;
    280e:	fa 01       	movw	r30, r20
    2810:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2812:	85 91       	lpm	r24, Z+
    2814:	94 91       	lpm	r25, Z
    2816:	28 2f       	mov	r18, r24
    2818:	39 2f       	mov	r19, r25
				list += 2;
    281a:	fa 01       	movw	r30, r20
    281c:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    281e:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2820:	9b 2f       	mov	r25, r27
    2822:	80 e0       	ldi	r24, 0x00	; 0
    2824:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2826:	8f 3f       	cpi	r24, 0xFF	; 255
    2828:	91 05       	cpc	r25, r1
    282a:	19 f0       	breq	.+6      	; 0x2832 <__vector_11+0xc0>
    282c:	10 f0       	brcs	.+4      	; 0x2832 <__vector_11+0xc0>
    282e:	8f ef       	ldi	r24, 0xFF	; 255
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	84 17       	cp	r24, r20
    2834:	28 f4       	brcc	.+10     	; 0x2840 <__vector_11+0xce>
    2836:	48 2f       	mov	r20, r24
    2838:	03 c0       	rjmp	.+6      	; 0x2840 <__vector_11+0xce>
    283a:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    283c:	a9 f6       	brne	.-86     	; 0x27e8 <__vector_11+0x76>
    283e:	cd cf       	rjmp	.-102    	; 0x27da <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2840:	c8 ee       	ldi	r28, 0xE8	; 232
    2842:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2844:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2846:	a1 ef       	ldi	r26, 0xF1	; 241
    2848:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    284a:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    284c:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    284e:	98 2f       	mov	r25, r24
    2850:	95 70       	andi	r25, 0x05	; 5
    2852:	e1 f3       	breq	.-8      	; 0x284c <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2854:	82 fd       	sbrc	r24, 2
    2856:	00 c1       	rjmp	.+512    	; 0x2a58 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2858:	64 2f       	mov	r22, r20
    285a:	41 31       	cpi	r20, 0x11	; 17
    285c:	08 f0       	brcs	.+2      	; 0x2860 <__vector_11+0xee>
    285e:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    2860:	66 23       	and	r22, r22
    2862:	09 f4       	brne	.+2      	; 0x2866 <__vector_11+0xf4>
    2864:	f6 c0       	rjmp	.+492    	; 0x2a52 <__vector_11+0x2e0>
    2866:	c9 01       	movw	r24, r18
    2868:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    286a:	fc 01       	movw	r30, r24
    286c:	01 96       	adiw	r24, 0x01	; 1
    286e:	e4 91       	lpm	r30, Z
    2870:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2872:	51 50       	subi	r21, 0x01	; 1
    2874:	d1 f7       	brne	.-12     	; 0x286a <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2876:	86 2f       	mov	r24, r22
    2878:	81 50       	subi	r24, 0x01	; 1
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	01 96       	adiw	r24, 0x01	; 1
    287e:	28 0f       	add	r18, r24
    2880:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2882:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2884:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2886:	41 11       	cpse	r20, r1
    2888:	e1 cf       	rjmp	.-62     	; 0x284c <__vector_11+0xda>
    288a:	60 31       	cpi	r22, 0x10	; 16
    288c:	f9 f2       	breq	.-66     	; 0x284c <__vector_11+0xda>
    288e:	e4 c0       	rjmp	.+456    	; 0x2a58 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2890:	45 30       	cpi	r20, 0x05	; 5
    2892:	61 f4       	brne	.+24     	; 0x28ac <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2894:	8e ef       	ldi	r24, 0xFE	; 254
    2896:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    289a:	e8 ee       	ldi	r30, 0xE8	; 232
    289c:	f0 e0       	ldi	r31, 0x00	; 0
    289e:	80 81       	ld	r24, Z
    28a0:	80 ff       	sbrs	r24, 0
    28a2:	fd cf       	rjmp	.-6      	; 0x289e <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    28a4:	20 68       	ori	r18, 0x80	; 128
    28a6:	20 93 e3 00 	sts	0x00E3, r18
			return;
    28aa:	d6 c0       	rjmp	.+428    	; 0x2a58 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    28ac:	49 30       	cpi	r20, 0x09	; 9
    28ae:	a1 f5       	brne	.+104    	; 0x2918 <__vector_11+0x1a6>
    28b0:	71 11       	cpse	r23, r1
    28b2:	5b c0       	rjmp	.+182    	; 0x296a <__vector_11+0x1f8>
			usb_configuration = wValue;
    28b4:	20 93 6f 01 	sts	0x016F, r18
			cdc_line_rtsdtr = 0;
    28b8:	10 92 70 01 	sts	0x0170, r1
			transmit_flush_timer = 0;
    28bc:	10 92 6e 01 	sts	0x016E, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    28c0:	8e ef       	ldi	r24, 0xFE	; 254
    28c2:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    28c6:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    28c8:	81 e2       	ldi	r24, 0x21	; 33
    28ca:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    28cc:	c9 ee       	ldi	r28, 0xE9	; 233
    28ce:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    28d0:	ab ee       	ldi	r26, 0xEB	; 235
    28d2:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    28d4:	6c ee       	ldi	r22, 0xEC	; 236
    28d6:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    28d8:	4d ee       	ldi	r20, 0xED	; 237
    28da:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    28dc:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    28de:	9c 01       	movw	r18, r24
    28e0:	2f 5f       	subi	r18, 0xFF	; 255
    28e2:	3f 4f       	sbci	r19, 0xFF	; 255
    28e4:	fc 01       	movw	r30, r24
    28e6:	04 91       	lpm	r16, Z
				UECONX = en;
    28e8:	0c 93       	st	X, r16
				if (en) {
    28ea:	00 23       	and	r16, r16
    28ec:	59 f0       	breq	.+22     	; 0x2904 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    28ee:	f9 01       	movw	r30, r18
    28f0:	24 91       	lpm	r18, Z
    28f2:	fb 01       	movw	r30, r22
    28f4:	20 83       	st	Z, r18
    28f6:	fc 01       	movw	r30, r24
    28f8:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    28fa:	03 96       	adiw	r24, 0x03	; 3
    28fc:	24 91       	lpm	r18, Z
    28fe:	fa 01       	movw	r30, r20
    2900:	20 83       	st	Z, r18
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2904:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2906:	1f 5f       	subi	r17, 0xFF	; 255
    2908:	15 30       	cpi	r17, 0x05	; 5
    290a:	41 f7       	brne	.-48     	; 0x28dc <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    290c:	ea ee       	ldi	r30, 0xEA	; 234
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	8e e1       	ldi	r24, 0x1E	; 30
    2912:	80 83       	st	Z, r24
        		UERST = 0;
    2914:	10 82       	st	Z, r1
			return;
    2916:	a0 c0       	rjmp	.+320    	; 0x2a58 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2918:	48 30       	cpi	r20, 0x08	; 8
    291a:	81 f4       	brne	.+32     	; 0x293c <__vector_11+0x1ca>
    291c:	70 38       	cpi	r23, 0x80	; 128
    291e:	09 f0       	breq	.+2      	; 0x2922 <__vector_11+0x1b0>
    2920:	3f c0       	rjmp	.+126    	; 0x29a0 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2922:	e8 ee       	ldi	r30, 0xE8	; 232
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	80 ff       	sbrs	r24, 0
    292a:	fd cf       	rjmp	.-6      	; 0x2926 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    292c:	80 91 6f 01 	lds	r24, 0x016F
    2930:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2934:	8e ef       	ldi	r24, 0xFE	; 254
    2936:	80 93 e8 00 	sts	0x00E8, r24
    293a:	8e c0       	rjmp	.+284    	; 0x2a58 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    293c:	41 32       	cpi	r20, 0x21	; 33
    293e:	a9 f4       	brne	.+42     	; 0x296a <__vector_11+0x1f8>
    2940:	71 3a       	cpi	r23, 0xA1	; 161
    2942:	f1 f5       	brne	.+124    	; 0x29c0 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2944:	e8 ee       	ldi	r30, 0xE8	; 232
    2946:	f0 e0       	ldi	r31, 0x00	; 0
    2948:	80 81       	ld	r24, Z
    294a:	80 ff       	sbrs	r24, 0
    294c:	fd cf       	rjmp	.-6      	; 0x2948 <__vector_11+0x1d6>
    294e:	e6 e0       	ldi	r30, 0x06	; 6
    2950:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2952:	a1 ef       	ldi	r26, 0xF1	; 241
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	81 91       	ld	r24, Z+
    2958:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    295a:	41 e0       	ldi	r20, 0x01	; 1
    295c:	ed 30       	cpi	r30, 0x0D	; 13
    295e:	f4 07       	cpc	r31, r20
    2960:	d1 f7       	brne	.-12     	; 0x2956 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2962:	8e ef       	ldi	r24, 0xFE	; 254
    2964:	80 93 e8 00 	sts	0x00E8, r24
    2968:	77 c0       	rjmp	.+238    	; 0x2a58 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    296a:	40 32       	cpi	r20, 0x20	; 32
    296c:	c9 f4       	brne	.+50     	; 0x29a0 <__vector_11+0x22e>
    296e:	71 32       	cpi	r23, 0x21	; 33
    2970:	09 f0       	breq	.+2      	; 0x2974 <__vector_11+0x202>
    2972:	6b c0       	rjmp	.+214    	; 0x2a4a <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2974:	e8 ee       	ldi	r30, 0xE8	; 232
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	80 81       	ld	r24, Z
    297a:	82 ff       	sbrs	r24, 2
    297c:	fd cf       	rjmp	.-6      	; 0x2978 <__vector_11+0x206>
    297e:	e6 e0       	ldi	r30, 0x06	; 6
    2980:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2982:	a1 ef       	ldi	r26, 0xF1	; 241
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	8c 91       	ld	r24, X
    2988:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    298a:	51 e0       	ldi	r21, 0x01	; 1
    298c:	ed 30       	cpi	r30, 0x0D	; 13
    298e:	f5 07       	cpc	r31, r21
    2990:	d1 f7       	brne	.-12     	; 0x2986 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2992:	e8 ee       	ldi	r30, 0xE8	; 232
    2994:	f0 e0       	ldi	r31, 0x00	; 0
    2996:	8b ef       	ldi	r24, 0xFB	; 251
    2998:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    299a:	8e ef       	ldi	r24, 0xFE	; 254
    299c:	80 83       	st	Z, r24
    299e:	5c c0       	rjmp	.+184    	; 0x2a58 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    29a0:	42 32       	cpi	r20, 0x22	; 34
    29a2:	71 f4       	brne	.+28     	; 0x29c0 <__vector_11+0x24e>
    29a4:	71 32       	cpi	r23, 0x21	; 33
    29a6:	09 f0       	breq	.+2      	; 0x29aa <__vector_11+0x238>
    29a8:	50 c0       	rjmp	.+160    	; 0x2a4a <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    29aa:	20 93 70 01 	sts	0x0170, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    29ae:	e8 ee       	ldi	r30, 0xE8	; 232
    29b0:	f0 e0       	ldi	r31, 0x00	; 0
    29b2:	80 81       	ld	r24, Z
    29b4:	80 ff       	sbrs	r24, 0
    29b6:	fd cf       	rjmp	.-6      	; 0x29b2 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29b8:	8e ef       	ldi	r24, 0xFE	; 254
    29ba:	80 93 e8 00 	sts	0x00E8, r24
    29be:	4c c0       	rjmp	.+152    	; 0x2a58 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    29c0:	41 11       	cpse	r20, r1
    29c2:	1a c0       	rjmp	.+52     	; 0x29f8 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    29c4:	e8 ee       	ldi	r30, 0xE8	; 232
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	20 81       	ld	r18, Z
    29ca:	20 ff       	sbrs	r18, 0
    29cc:	fd cf       	rjmp	.-6      	; 0x29c8 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    29ce:	72 38       	cpi	r23, 0x82	; 130
    29d0:	51 f4       	brne	.+20     	; 0x29e6 <__vector_11+0x274>
				UENUM = wIndex;
    29d2:	e9 ee       	ldi	r30, 0xE9	; 233
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    29d8:	80 91 eb 00 	lds	r24, 0x00EB
    29dc:	85 fb       	bst	r24, 5
    29de:	88 27       	eor	r24, r24
    29e0:	80 f9       	bld	r24, 0
				UENUM = 0;
    29e2:	10 82       	st	Z, r1
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    29e6:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    29e8:	e1 ef       	ldi	r30, 0xF1	; 241
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 83       	st	Z, r24
			UEDATX = 0;
    29ee:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29f0:	8e ef       	ldi	r24, 0xFE	; 254
    29f2:	80 93 e8 00 	sts	0x00E8, r24
    29f6:	30 c0       	rjmp	.+96     	; 0x2a58 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    29f8:	41 30       	cpi	r20, 0x01	; 1
    29fa:	11 f0       	breq	.+4      	; 0x2a00 <__vector_11+0x28e>
    29fc:	43 30       	cpi	r20, 0x03	; 3
    29fe:	29 f5       	brne	.+74     	; 0x2a4a <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    2a00:	72 30       	cpi	r23, 0x02	; 2
    2a02:	19 f5       	brne	.+70     	; 0x2a4a <__vector_11+0x2d8>
    2a04:	23 2b       	or	r18, r19
    2a06:	09 f5       	brne	.+66     	; 0x2a4a <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    2a08:	8f 77       	andi	r24, 0x7F	; 127
    2a0a:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2a0c:	38 2f       	mov	r19, r24
    2a0e:	31 50       	subi	r19, 0x01	; 1
    2a10:	34 30       	cpi	r19, 0x04	; 4
    2a12:	d8 f4       	brcc	.+54     	; 0x2a4a <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a14:	3e ef       	ldi	r19, 0xFE	; 254
    2a16:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2a1a:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    2a1e:	43 30       	cpi	r20, 0x03	; 3
    2a20:	21 f4       	brne	.+8      	; 0x2a2a <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2a22:	81 e2       	ldi	r24, 0x21	; 33
    2a24:	80 93 eb 00 	sts	0x00EB, r24
    2a28:	17 c0       	rjmp	.+46     	; 0x2a58 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2a2a:	99 e1       	ldi	r25, 0x19	; 25
    2a2c:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    2a30:	21 e0       	ldi	r18, 0x01	; 1
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	d9 01       	movw	r26, r18
    2a36:	02 c0       	rjmp	.+4      	; 0x2a3c <__vector_11+0x2ca>
    2a38:	aa 0f       	add	r26, r26
    2a3a:	bb 1f       	adc	r27, r27
    2a3c:	8a 95       	dec	r24
    2a3e:	e2 f7       	brpl	.-8      	; 0x2a38 <__vector_11+0x2c6>
    2a40:	ea ee       	ldi	r30, 0xEA	; 234
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	a0 83       	st	Z, r26
					UERST = 0;
    2a46:	10 82       	st	Z, r1
    2a48:	07 c0       	rjmp	.+14     	; 0x2a58 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2a4a:	81 e2       	ldi	r24, 0x21	; 33
    2a4c:	80 93 eb 00 	sts	0x00EB, r24
    2a50:	03 c0       	rjmp	.+6      	; 0x2a58 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a52:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2a54:	41 11       	cpse	r20, r1
    2a56:	fa ce       	rjmp	.-524    	; 0x284c <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2a58:	ff 91       	pop	r31
    2a5a:	ef 91       	pop	r30
    2a5c:	df 91       	pop	r29
    2a5e:	cf 91       	pop	r28
    2a60:	bf 91       	pop	r27
    2a62:	af 91       	pop	r26
    2a64:	9f 91       	pop	r25
    2a66:	8f 91       	pop	r24
    2a68:	7f 91       	pop	r23
    2a6a:	6f 91       	pop	r22
    2a6c:	5f 91       	pop	r21
    2a6e:	4f 91       	pop	r20
    2a70:	3f 91       	pop	r19
    2a72:	2f 91       	pop	r18
    2a74:	1f 91       	pop	r17
    2a76:	0f 91       	pop	r16
    2a78:	0f 90       	pop	r0
    2a7a:	0f be       	out	0x3f, r0	; 63
    2a7c:	0f 90       	pop	r0
    2a7e:	1f 90       	pop	r1
    2a80:	18 95       	reti

00002a82 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2a86:	ec eb       	ldi	r30, 0xBC	; 188
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	80 81       	ld	r24, Z
    2a8c:	88 23       	and	r24, r24
    2a8e:	34 f0       	brlt	.+12     	; 0x2a9c <twi_wait+0x1a>
    2a90:	2f 5f       	subi	r18, 0xFF	; 255
    2a92:	3f 4f       	sbci	r19, 0xFF	; 255
    2a94:	29 3e       	cpi	r18, 0xE9	; 233
    2a96:	83 e0       	ldi	r24, 0x03	; 3
    2a98:	38 07       	cpc	r19, r24
    2a9a:	b9 f7       	brne	.-18     	; 0x2a8a <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	28 3e       	cpi	r18, 0xE8	; 232
    2aa0:	33 40       	sbci	r19, 0x03	; 3
    2aa2:	09 f4       	brne	.+2      	; 0x2aa6 <twi_wait+0x24>
    2aa4:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2aa6:	08 95       	ret

00002aa8 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2aa8:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2aac:	84 e8       	ldi	r24, 0x84	; 132
    2aae:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2ab2:	0e 94 41 15 	call	0x2a82	; 0x2a82 <twi_wait>
    2ab6:	88 23       	and	r24, r24
    2ab8:	21 f0       	breq	.+8      	; 0x2ac2 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2aba:	80 91 b9 00 	lds	r24, 0x00B9
    2abe:	88 7f       	andi	r24, 0xF8	; 248
    2ac0:	08 95       	ret
	} else {
		return 0;					// comm failure
    2ac2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2ac4:	08 95       	ret

00002ac6 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2ac6:	cf 93       	push	r28
    2ac8:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2aca:	94 ea       	ldi	r25, 0xA4	; 164
    2acc:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2ad0:	0e 94 41 15 	call	0x2a82	; 0x2a82 <twi_wait>
    2ad4:	88 23       	and	r24, r24
    2ad6:	61 f0       	breq	.+24     	; 0x2af0 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2ad8:	8c 2f       	mov	r24, r28
    2ada:	88 0f       	add	r24, r24
    2adc:	8f 5f       	subi	r24, 0xFF	; 255
    2ade:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2ae2:	88 34       	cpi	r24, 0x48	; 72
    2ae4:	39 f4       	brne	.+14     	; 0x2af4 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2ae6:	84 e9       	ldi	r24, 0x94	; 148
    2ae8:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	03 c0       	rjmp	.+6      	; 0x2af6 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2af0:	80 e0       	ldi	r24, 0x00	; 0
    2af2:	01 c0       	rjmp	.+2      	; 0x2af6 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2af4:	81 e0       	ldi	r24, 0x01	; 1
}	
    2af6:	cf 91       	pop	r28
    2af8:	08 95       	ret

00002afa <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2afa:	cf 93       	push	r28
    2afc:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2afe:	94 ea       	ldi	r25, 0xA4	; 164
    2b00:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2b04:	0e 94 41 15 	call	0x2a82	; 0x2a82 <twi_wait>
    2b08:	88 23       	and	r24, r24
    2b0a:	59 f0       	breq	.+22     	; 0x2b22 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2b0c:	8c 2f       	mov	r24, r28
    2b0e:	88 0f       	add	r24, r24
    2b10:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2b14:	80 32       	cpi	r24, 0x20	; 32
    2b16:	39 f4       	brne	.+14     	; 0x2b26 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b18:	84 e9       	ldi	r24, 0x94	; 148
    2b1a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	03 c0       	rjmp	.+6      	; 0x2b28 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	01 c0       	rjmp	.+2      	; 0x2b28 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2b26:	81 e0       	ldi	r24, 0x01	; 1
}	
    2b28:	cf 91       	pop	r28
    2b2a:	08 95       	ret

00002b2c <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2b2c:	84 e9       	ldi	r24, 0x94	; 148
    2b2e:	80 93 bc 00 	sts	0x00BC, r24
    2b32:	08 95       	ret

00002b34 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2b34:	ef 92       	push	r14
    2b36:	ff 92       	push	r15
    2b38:	0f 93       	push	r16
    2b3a:	1f 93       	push	r17
    2b3c:	cf 93       	push	r28
    2b3e:	df 93       	push	r29
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
    2b44:	60 97       	sbiw	r28, 0x10	; 16
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	de bf       	out	0x3e, r29	; 62
    2b4c:	0f be       	out	0x3f, r0	; 63
    2b4e:	cd bf       	out	0x3d, r28	; 61
    2b50:	e8 2e       	mov	r14, r24
    2b52:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2b54:	fe 01       	movw	r30, r28
    2b56:	31 96       	adiw	r30, 0x01	; 1
    2b58:	80 e1       	ldi	r24, 0x10	; 16
    2b5a:	df 01       	movw	r26, r30
    2b5c:	1d 92       	st	X+, r1
    2b5e:	8a 95       	dec	r24
    2b60:	e9 f7       	brne	.-6      	; 0x2b5c <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2b62:	88 e5       	ldi	r24, 0x58	; 88
    2b64:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2b68:	88 23       	and	r24, r24
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <m_wii_read+0x3a>
    2b6c:	66 c0       	rjmp	.+204    	; 0x2c3a <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2b6e:	86 e3       	ldi	r24, 0x36	; 54
    2b70:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <m_wii_read+0x46>
    2b78:	62 c0       	rjmp	.+196    	; 0x2c3e <m_wii_read+0x10a>
	end();
    2b7a:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b7e:	b8 e0       	ldi	r27, 0x08	; 8
    2b80:	ba 95       	dec	r27
    2b82:	f1 f7       	brne	.-4      	; 0x2b80 <m_wii_read+0x4c>
    2b84:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2b86:	88 e5       	ldi	r24, 0x58	; 88
    2b88:	0e 94 63 15 	call	0x2ac6	; 0x2ac6 <start_read>
    2b8c:	88 23       	and	r24, r24
    2b8e:	09 f4       	brne	.+2      	; 0x2b92 <m_wii_read+0x5e>
    2b90:	58 c0       	rjmp	.+176    	; 0x2c42 <m_wii_read+0x10e>
    2b92:	ae 01       	movw	r20, r28
    2b94:	4f 5f       	subi	r20, 0xFF	; 255
    2b96:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2b98:	8e 01       	movw	r16, r28
    2b9a:	00 5f       	subi	r16, 0xF0	; 240
    2b9c:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2b9e:	ec eb       	ldi	r30, 0xBC	; 188
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2ba4:	2b eb       	ldi	r18, 0xBB	; 187
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2ba8:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2baa:	80 81       	ld	r24, Z
    2bac:	88 23       	and	r24, r24
    2bae:	ec f7       	brge	.-6      	; 0x2baa <m_wii_read+0x76>
		temp[i] = TWDR;
    2bb0:	d9 01       	movw	r26, r18
    2bb2:	8c 91       	ld	r24, X
    2bb4:	da 01       	movw	r26, r20
    2bb6:	8d 93       	st	X+, r24
    2bb8:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2bba:	a0 17       	cp	r26, r16
    2bbc:	b1 07       	cpc	r27, r17
    2bbe:	a1 f7       	brne	.-24     	; 0x2ba8 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2bc0:	84 e8       	ldi	r24, 0x84	; 132
    2bc2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2bc6:	ec eb       	ldi	r30, 0xBC	; 188
    2bc8:	f0 e0       	ldi	r31, 0x00	; 0
    2bca:	80 81       	ld	r24, Z
    2bcc:	88 23       	and	r24, r24
    2bce:	ec f7       	brge	.-6      	; 0x2bca <m_wii_read+0x96>
	temp[15] = TWDR;
    2bd0:	80 91 bb 00 	lds	r24, 0x00BB
    2bd4:	88 8b       	std	Y+16, r24	; 0x10
	end();
    2bd6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
    2bda:	de 01       	movw	r26, r28
    2bdc:	14 96       	adiw	r26, 0x04	; 4
    2bde:	6e 2d       	mov	r22, r14
    2be0:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2be2:	4c 91       	ld	r20, X
    2be4:	24 2f       	mov	r18, r20
    2be6:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2be8:	cd 01       	movw	r24, r26
    2bea:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2bec:	fc 01       	movw	r30, r24
    2bee:	80 81       	ld	r24, Z
    2bf0:	90 e0       	ldi	r25, 0x00	; 0
    2bf2:	f0 e1       	ldi	r31, 0x10	; 16
    2bf4:	2f 9f       	mul	r18, r31
    2bf6:	80 0d       	add	r24, r0
    2bf8:	91 1d       	adc	r25, r1
    2bfa:	11 24       	eor	r1, r1
    2bfc:	fb 01       	movw	r30, r22
    2bfe:	91 83       	std	Z+1, r25	; 0x01
    2c00:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2c02:	84 2f       	mov	r24, r20
    2c04:	80 7c       	andi	r24, 0xC0	; 192
    2c06:	90 e0       	ldi	r25, 0x00	; 0
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	88 0f       	add	r24, r24
    2c0e:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2c10:	9d 01       	movw	r18, r26
    2c12:	21 50       	subi	r18, 0x01	; 1
    2c14:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2c16:	f9 01       	movw	r30, r18
    2c18:	20 81       	ld	r18, Z
    2c1a:	82 0f       	add	r24, r18
    2c1c:	91 1d       	adc	r25, r1
    2c1e:	fb 01       	movw	r30, r22
    2c20:	93 83       	std	Z+3, r25	; 0x03
    2c22:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2c24:	4f 70       	andi	r20, 0x0F	; 15
    2c26:	44 83       	std	Z+4, r20	; 0x04
    2c28:	15 82       	std	Z+5, r1	; 0x05
    2c2a:	13 96       	adiw	r26, 0x03	; 3
    2c2c:	6a 5f       	subi	r22, 0xFA	; 250
    2c2e:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2c30:	0a 17       	cp	r16, r26
    2c32:	1b 07       	cpc	r17, r27
    2c34:	b1 f6       	brne	.-84     	; 0x2be2 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2c36:	81 e0       	ldi	r24, 0x01	; 1
    2c38:	05 c0       	rjmp	.+10     	; 0x2c44 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	03 c0       	rjmp	.+6      	; 0x2c44 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	01 c0       	rjmp	.+2      	; 0x2c44 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2c42:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2c44:	60 96       	adiw	r28, 0x10	; 16
    2c46:	0f b6       	in	r0, 0x3f	; 63
    2c48:	f8 94       	cli
    2c4a:	de bf       	out	0x3e, r29	; 62
    2c4c:	0f be       	out	0x3f, r0	; 63
    2c4e:	cd bf       	out	0x3d, r28	; 61
    2c50:	df 91       	pop	r29
    2c52:	cf 91       	pop	r28
    2c54:	1f 91       	pop	r17
    2c56:	0f 91       	pop	r16
    2c58:	ff 90       	pop	r15
    2c5a:	ef 90       	pop	r14
    2c5c:	08 95       	ret

00002c5e <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2c5e:	0e 94 b3 12 	call	0x2566	; 0x2566 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2c62:	88 e5       	ldi	r24, 0x58	; 88
    2c64:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2c68:	88 23       	and	r24, r24
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <m_wii_open+0x10>
    2c6c:	c7 c0       	rjmp	.+398    	; 0x2dfc <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    2c6e:	80 e3       	ldi	r24, 0x30	; 48
    2c70:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2c74:	88 23       	and	r24, r24
    2c76:	09 f4       	brne	.+2      	; 0x2c7a <m_wii_open+0x1c>
    2c78:	c3 c0       	rjmp	.+390    	; 0x2e00 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2c80:	88 23       	and	r24, r24
    2c82:	09 f4       	brne	.+2      	; 0x2c86 <m_wii_open+0x28>
    2c84:	bf c0       	rjmp	.+382    	; 0x2e04 <m_wii_open+0x1a6>
	end();
    2c86:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c8a:	83 ec       	ldi	r24, 0xC3	; 195
    2c8c:	99 e0       	ldi	r25, 0x09	; 9
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <m_wii_open+0x30>
    2c92:	00 c0       	rjmp	.+0      	; 0x2c94 <m_wii_open+0x36>
    2c94:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2c96:	88 e5       	ldi	r24, 0x58	; 88
    2c98:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2c9c:	88 23       	and	r24, r24
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <m_wii_open+0x44>
    2ca0:	b3 c0       	rjmp	.+358    	; 0x2e08 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2ca8:	88 23       	and	r24, r24
    2caa:	09 f4       	brne	.+2      	; 0x2cae <m_wii_open+0x50>
    2cac:	af c0       	rjmp	.+350    	; 0x2e0c <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    2cae:	80 e0       	ldi	r24, 0x00	; 0
    2cb0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2cb4:	88 23       	and	r24, r24
    2cb6:	09 f4       	brne	.+2      	; 0x2cba <m_wii_open+0x5c>
    2cb8:	ab c0       	rjmp	.+342    	; 0x2e10 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2cba:	80 e0       	ldi	r24, 0x00	; 0
    2cbc:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2cc0:	88 23       	and	r24, r24
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <m_wii_open+0x68>
    2cc4:	a7 c0       	rjmp	.+334    	; 0x2e14 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2cc6:	80 e0       	ldi	r24, 0x00	; 0
    2cc8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2ccc:	88 23       	and	r24, r24
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <m_wii_open+0x74>
    2cd0:	a3 c0       	rjmp	.+326    	; 0x2e18 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
    2cd4:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2cd8:	88 23       	and	r24, r24
    2cda:	09 f4       	brne	.+2      	; 0x2cde <m_wii_open+0x80>
    2cdc:	9f c0       	rjmp	.+318    	; 0x2e1c <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2cde:	80 e0       	ldi	r24, 0x00	; 0
    2ce0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2ce4:	88 23       	and	r24, r24
    2ce6:	09 f4       	brne	.+2      	; 0x2cea <m_wii_open+0x8c>
    2ce8:	9b c0       	rjmp	.+310    	; 0x2e20 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2cea:	80 e0       	ldi	r24, 0x00	; 0
    2cec:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2cf0:	88 23       	and	r24, r24
    2cf2:	09 f4       	brne	.+2      	; 0x2cf6 <m_wii_open+0x98>
    2cf4:	97 c0       	rjmp	.+302    	; 0x2e24 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2cf6:	80 e9       	ldi	r24, 0x90	; 144
    2cf8:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2cfc:	88 23       	and	r24, r24
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <m_wii_open+0xa4>
    2d00:	93 c0       	rjmp	.+294    	; 0x2e28 <m_wii_open+0x1ca>
	end();
    2d02:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
    2d06:	83 ec       	ldi	r24, 0xC3	; 195
    2d08:	99 e0       	ldi	r25, 0x09	; 9
    2d0a:	01 97       	sbiw	r24, 0x01	; 1
    2d0c:	f1 f7       	brne	.-4      	; 0x2d0a <m_wii_open+0xac>
    2d0e:	00 c0       	rjmp	.+0      	; 0x2d10 <m_wii_open+0xb2>
    2d10:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2d12:	88 e5       	ldi	r24, 0x58	; 88
    2d14:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2d18:	88 23       	and	r24, r24
    2d1a:	09 f4       	brne	.+2      	; 0x2d1e <m_wii_open+0xc0>
    2d1c:	87 c0       	rjmp	.+270    	; 0x2e2c <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2d1e:	87 e0       	ldi	r24, 0x07	; 7
    2d20:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2d24:	88 23       	and	r24, r24
    2d26:	09 f4       	brne	.+2      	; 0x2d2a <m_wii_open+0xcc>
    2d28:	83 c0       	rjmp	.+262    	; 0x2e30 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2d2a:	80 e0       	ldi	r24, 0x00	; 0
    2d2c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2d30:	88 23       	and	r24, r24
    2d32:	09 f4       	brne	.+2      	; 0x2d36 <m_wii_open+0xd8>
    2d34:	7f c0       	rjmp	.+254    	; 0x2e34 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    2d36:	81 e4       	ldi	r24, 0x41	; 65
    2d38:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2d3c:	88 23       	and	r24, r24
    2d3e:	09 f4       	brne	.+2      	; 0x2d42 <m_wii_open+0xe4>
    2d40:	7b c0       	rjmp	.+246    	; 0x2e38 <m_wii_open+0x1da>
	end();
    2d42:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
    2d46:	83 ec       	ldi	r24, 0xC3	; 195
    2d48:	99 e0       	ldi	r25, 0x09	; 9
    2d4a:	01 97       	sbiw	r24, 0x01	; 1
    2d4c:	f1 f7       	brne	.-4      	; 0x2d4a <m_wii_open+0xec>
    2d4e:	00 c0       	rjmp	.+0      	; 0x2d50 <m_wii_open+0xf2>
    2d50:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2d52:	88 e5       	ldi	r24, 0x58	; 88
    2d54:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2d58:	88 23       	and	r24, r24
    2d5a:	09 f4       	brne	.+2      	; 0x2d5e <m_wii_open+0x100>
    2d5c:	6f c0       	rjmp	.+222    	; 0x2e3c <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    2d5e:	8a e1       	ldi	r24, 0x1A	; 26
    2d60:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2d64:	88 23       	and	r24, r24
    2d66:	09 f4       	brne	.+2      	; 0x2d6a <m_wii_open+0x10c>
    2d68:	6b c0       	rjmp	.+214    	; 0x2e40 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    2d6a:	80 e4       	ldi	r24, 0x40	; 64
    2d6c:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2d70:	88 23       	and	r24, r24
    2d72:	09 f4       	brne	.+2      	; 0x2d76 <m_wii_open+0x118>
    2d74:	67 c0       	rjmp	.+206    	; 0x2e44 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    2d76:	80 e0       	ldi	r24, 0x00	; 0
    2d78:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2d7c:	88 23       	and	r24, r24
    2d7e:	09 f4       	brne	.+2      	; 0x2d82 <m_wii_open+0x124>
    2d80:	63 c0       	rjmp	.+198    	; 0x2e48 <m_wii_open+0x1ea>
	end();
    2d82:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
    2d86:	83 ec       	ldi	r24, 0xC3	; 195
    2d88:	99 e0       	ldi	r25, 0x09	; 9
    2d8a:	01 97       	sbiw	r24, 0x01	; 1
    2d8c:	f1 f7       	brne	.-4      	; 0x2d8a <m_wii_open+0x12c>
    2d8e:	00 c0       	rjmp	.+0      	; 0x2d90 <m_wii_open+0x132>
    2d90:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2d92:	88 e5       	ldi	r24, 0x58	; 88
    2d94:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2d98:	88 23       	and	r24, r24
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <m_wii_open+0x140>
    2d9c:	57 c0       	rjmp	.+174    	; 0x2e4c <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    2d9e:	83 e3       	ldi	r24, 0x33	; 51
    2da0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2da4:	88 23       	and	r24, r24
    2da6:	09 f4       	brne	.+2      	; 0x2daa <m_wii_open+0x14c>
    2da8:	53 c0       	rjmp	.+166    	; 0x2e50 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2daa:	83 e0       	ldi	r24, 0x03	; 3
    2dac:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2db0:	88 23       	and	r24, r24
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <m_wii_open+0x158>
    2db4:	4f c0       	rjmp	.+158    	; 0x2e54 <m_wii_open+0x1f6>
	end();
    2db6:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
    2dba:	83 ec       	ldi	r24, 0xC3	; 195
    2dbc:	99 e0       	ldi	r25, 0x09	; 9
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <m_wii_open+0x160>
    2dc2:	00 c0       	rjmp	.+0      	; 0x2dc4 <m_wii_open+0x166>
    2dc4:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2dc6:	88 e5       	ldi	r24, 0x58	; 88
    2dc8:	0e 94 7d 15 	call	0x2afa	; 0x2afa <start_write>
    2dcc:	88 23       	and	r24, r24
    2dce:	09 f4       	brne	.+2      	; 0x2dd2 <m_wii_open+0x174>
    2dd0:	43 c0       	rjmp	.+134    	; 0x2e58 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    2dd2:	80 e3       	ldi	r24, 0x30	; 48
    2dd4:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2dd8:	88 23       	and	r24, r24
    2dda:	09 f4       	brne	.+2      	; 0x2dde <m_wii_open+0x180>
    2ddc:	3f c0       	rjmp	.+126    	; 0x2e5c <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2dde:	88 e0       	ldi	r24, 0x08	; 8
    2de0:	0e 94 54 15 	call	0x2aa8	; 0x2aa8 <send_byte>
    2de4:	88 23       	and	r24, r24
    2de6:	e1 f1       	breq	.+120    	; 0x2e60 <m_wii_open+0x202>
	end();
    2de8:	0e 94 96 15 	call	0x2b2c	; 0x2b2c <end>
    2dec:	83 ec       	ldi	r24, 0xC3	; 195
    2dee:	99 e0       	ldi	r25, 0x09	; 9
    2df0:	01 97       	sbiw	r24, 0x01	; 1
    2df2:	f1 f7       	brne	.-4      	; 0x2df0 <m_wii_open+0x192>
    2df4:	00 c0       	rjmp	.+0      	; 0x2df6 <m_wii_open+0x198>
    2df6:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2dfc:	80 e0       	ldi	r24, 0x00	; 0
    2dfe:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2e04:	80 e0       	ldi	r24, 0x00	; 0
    2e06:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2e08:	80 e0       	ldi	r24, 0x00	; 0
    2e0a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e0c:	80 e0       	ldi	r24, 0x00	; 0
    2e0e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e10:	80 e0       	ldi	r24, 0x00	; 0
    2e12:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e14:	80 e0       	ldi	r24, 0x00	; 0
    2e16:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e18:	80 e0       	ldi	r24, 0x00	; 0
    2e1a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e1c:	80 e0       	ldi	r24, 0x00	; 0
    2e1e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2e58:	80 e0       	ldi	r24, 0x00	; 0
    2e5a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2e60:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2e62:	08 95       	ret

00002e64 <__subsf3>:
    2e64:	50 58       	subi	r21, 0x80	; 128

00002e66 <__addsf3>:
    2e66:	bb 27       	eor	r27, r27
    2e68:	aa 27       	eor	r26, r26
    2e6a:	0e d0       	rcall	.+28     	; 0x2e88 <__addsf3x>
    2e6c:	27 c2       	rjmp	.+1102   	; 0x32bc <__fp_round>
    2e6e:	f0 d1       	rcall	.+992    	; 0x3250 <__fp_pscA>
    2e70:	30 f0       	brcs	.+12     	; 0x2e7e <__addsf3+0x18>
    2e72:	f5 d1       	rcall	.+1002   	; 0x325e <__fp_pscB>
    2e74:	20 f0       	brcs	.+8      	; 0x2e7e <__addsf3+0x18>
    2e76:	31 f4       	brne	.+12     	; 0x2e84 <__addsf3+0x1e>
    2e78:	9f 3f       	cpi	r25, 0xFF	; 255
    2e7a:	11 f4       	brne	.+4      	; 0x2e80 <__addsf3+0x1a>
    2e7c:	1e f4       	brtc	.+6      	; 0x2e84 <__addsf3+0x1e>
    2e7e:	c0 c1       	rjmp	.+896    	; 0x3200 <__fp_nan>
    2e80:	0e f4       	brtc	.+2      	; 0x2e84 <__addsf3+0x1e>
    2e82:	e0 95       	com	r30
    2e84:	e7 fb       	bst	r30, 7
    2e86:	b6 c1       	rjmp	.+876    	; 0x31f4 <__fp_inf>

00002e88 <__addsf3x>:
    2e88:	e9 2f       	mov	r30, r25
    2e8a:	3a d2       	rcall	.+1140   	; 0x3300 <__fp_split3>
    2e8c:	80 f3       	brcs	.-32     	; 0x2e6e <__addsf3+0x8>
    2e8e:	ba 17       	cp	r27, r26
    2e90:	62 07       	cpc	r22, r18
    2e92:	73 07       	cpc	r23, r19
    2e94:	84 07       	cpc	r24, r20
    2e96:	95 07       	cpc	r25, r21
    2e98:	18 f0       	brcs	.+6      	; 0x2ea0 <__addsf3x+0x18>
    2e9a:	71 f4       	brne	.+28     	; 0x2eb8 <__addsf3x+0x30>
    2e9c:	9e f5       	brtc	.+102    	; 0x2f04 <__addsf3x+0x7c>
    2e9e:	52 c2       	rjmp	.+1188   	; 0x3344 <__fp_zero>
    2ea0:	0e f4       	brtc	.+2      	; 0x2ea4 <__addsf3x+0x1c>
    2ea2:	e0 95       	com	r30
    2ea4:	0b 2e       	mov	r0, r27
    2ea6:	ba 2f       	mov	r27, r26
    2ea8:	a0 2d       	mov	r26, r0
    2eaa:	0b 01       	movw	r0, r22
    2eac:	b9 01       	movw	r22, r18
    2eae:	90 01       	movw	r18, r0
    2eb0:	0c 01       	movw	r0, r24
    2eb2:	ca 01       	movw	r24, r20
    2eb4:	a0 01       	movw	r20, r0
    2eb6:	11 24       	eor	r1, r1
    2eb8:	ff 27       	eor	r31, r31
    2eba:	59 1b       	sub	r21, r25
    2ebc:	99 f0       	breq	.+38     	; 0x2ee4 <__addsf3x+0x5c>
    2ebe:	59 3f       	cpi	r21, 0xF9	; 249
    2ec0:	50 f4       	brcc	.+20     	; 0x2ed6 <__addsf3x+0x4e>
    2ec2:	50 3e       	cpi	r21, 0xE0	; 224
    2ec4:	68 f1       	brcs	.+90     	; 0x2f20 <__addsf3x+0x98>
    2ec6:	1a 16       	cp	r1, r26
    2ec8:	f0 40       	sbci	r31, 0x00	; 0
    2eca:	a2 2f       	mov	r26, r18
    2ecc:	23 2f       	mov	r18, r19
    2ece:	34 2f       	mov	r19, r20
    2ed0:	44 27       	eor	r20, r20
    2ed2:	58 5f       	subi	r21, 0xF8	; 248
    2ed4:	f3 cf       	rjmp	.-26     	; 0x2ebc <__addsf3x+0x34>
    2ed6:	46 95       	lsr	r20
    2ed8:	37 95       	ror	r19
    2eda:	27 95       	ror	r18
    2edc:	a7 95       	ror	r26
    2ede:	f0 40       	sbci	r31, 0x00	; 0
    2ee0:	53 95       	inc	r21
    2ee2:	c9 f7       	brne	.-14     	; 0x2ed6 <__addsf3x+0x4e>
    2ee4:	7e f4       	brtc	.+30     	; 0x2f04 <__addsf3x+0x7c>
    2ee6:	1f 16       	cp	r1, r31
    2ee8:	ba 0b       	sbc	r27, r26
    2eea:	62 0b       	sbc	r22, r18
    2eec:	73 0b       	sbc	r23, r19
    2eee:	84 0b       	sbc	r24, r20
    2ef0:	ba f0       	brmi	.+46     	; 0x2f20 <__addsf3x+0x98>
    2ef2:	91 50       	subi	r25, 0x01	; 1
    2ef4:	a1 f0       	breq	.+40     	; 0x2f1e <__addsf3x+0x96>
    2ef6:	ff 0f       	add	r31, r31
    2ef8:	bb 1f       	adc	r27, r27
    2efa:	66 1f       	adc	r22, r22
    2efc:	77 1f       	adc	r23, r23
    2efe:	88 1f       	adc	r24, r24
    2f00:	c2 f7       	brpl	.-16     	; 0x2ef2 <__addsf3x+0x6a>
    2f02:	0e c0       	rjmp	.+28     	; 0x2f20 <__addsf3x+0x98>
    2f04:	ba 0f       	add	r27, r26
    2f06:	62 1f       	adc	r22, r18
    2f08:	73 1f       	adc	r23, r19
    2f0a:	84 1f       	adc	r24, r20
    2f0c:	48 f4       	brcc	.+18     	; 0x2f20 <__addsf3x+0x98>
    2f0e:	87 95       	ror	r24
    2f10:	77 95       	ror	r23
    2f12:	67 95       	ror	r22
    2f14:	b7 95       	ror	r27
    2f16:	f7 95       	ror	r31
    2f18:	9e 3f       	cpi	r25, 0xFE	; 254
    2f1a:	08 f0       	brcs	.+2      	; 0x2f1e <__addsf3x+0x96>
    2f1c:	b3 cf       	rjmp	.-154    	; 0x2e84 <__addsf3+0x1e>
    2f1e:	93 95       	inc	r25
    2f20:	88 0f       	add	r24, r24
    2f22:	08 f0       	brcs	.+2      	; 0x2f26 <__addsf3x+0x9e>
    2f24:	99 27       	eor	r25, r25
    2f26:	ee 0f       	add	r30, r30
    2f28:	97 95       	ror	r25
    2f2a:	87 95       	ror	r24
    2f2c:	08 95       	ret
    2f2e:	90 d1       	rcall	.+800    	; 0x3250 <__fp_pscA>
    2f30:	58 f0       	brcs	.+22     	; 0x2f48 <__addsf3x+0xc0>
    2f32:	80 e8       	ldi	r24, 0x80	; 128
    2f34:	91 e0       	ldi	r25, 0x01	; 1
    2f36:	09 f4       	brne	.+2      	; 0x2f3a <__addsf3x+0xb2>
    2f38:	9e ef       	ldi	r25, 0xFE	; 254
    2f3a:	91 d1       	rcall	.+802    	; 0x325e <__fp_pscB>
    2f3c:	28 f0       	brcs	.+10     	; 0x2f48 <__addsf3x+0xc0>
    2f3e:	40 e8       	ldi	r20, 0x80	; 128
    2f40:	51 e0       	ldi	r21, 0x01	; 1
    2f42:	59 f4       	brne	.+22     	; 0x2f5a <atan2+0xe>
    2f44:	5e ef       	ldi	r21, 0xFE	; 254
    2f46:	09 c0       	rjmp	.+18     	; 0x2f5a <atan2+0xe>
    2f48:	5b c1       	rjmp	.+694    	; 0x3200 <__fp_nan>
    2f4a:	fc c1       	rjmp	.+1016   	; 0x3344 <__fp_zero>

00002f4c <atan2>:
    2f4c:	e9 2f       	mov	r30, r25
    2f4e:	e0 78       	andi	r30, 0x80	; 128
    2f50:	d7 d1       	rcall	.+942    	; 0x3300 <__fp_split3>
    2f52:	68 f3       	brcs	.-38     	; 0x2f2e <__addsf3x+0xa6>
    2f54:	09 2e       	mov	r0, r25
    2f56:	05 2a       	or	r0, r21
    2f58:	c1 f3       	breq	.-16     	; 0x2f4a <__addsf3x+0xc2>
    2f5a:	26 17       	cp	r18, r22
    2f5c:	37 07       	cpc	r19, r23
    2f5e:	48 07       	cpc	r20, r24
    2f60:	59 07       	cpc	r21, r25
    2f62:	38 f0       	brcs	.+14     	; 0x2f72 <atan2+0x26>
    2f64:	0e 2e       	mov	r0, r30
    2f66:	07 f8       	bld	r0, 7
    2f68:	e0 25       	eor	r30, r0
    2f6a:	69 f0       	breq	.+26     	; 0x2f86 <atan2+0x3a>
    2f6c:	e0 25       	eor	r30, r0
    2f6e:	e0 64       	ori	r30, 0x40	; 64
    2f70:	0a c0       	rjmp	.+20     	; 0x2f86 <atan2+0x3a>
    2f72:	ef 63       	ori	r30, 0x3F	; 63
    2f74:	07 f8       	bld	r0, 7
    2f76:	00 94       	com	r0
    2f78:	07 fa       	bst	r0, 7
    2f7a:	db 01       	movw	r26, r22
    2f7c:	b9 01       	movw	r22, r18
    2f7e:	9d 01       	movw	r18, r26
    2f80:	dc 01       	movw	r26, r24
    2f82:	ca 01       	movw	r24, r20
    2f84:	ad 01       	movw	r20, r26
    2f86:	ef 93       	push	r30
    2f88:	4a d0       	rcall	.+148    	; 0x301e <__divsf3_pse>
    2f8a:	98 d1       	rcall	.+816    	; 0x32bc <__fp_round>
    2f8c:	0a d0       	rcall	.+20     	; 0x2fa2 <atan>
    2f8e:	5f 91       	pop	r21
    2f90:	55 23       	and	r21, r21
    2f92:	31 f0       	breq	.+12     	; 0x2fa0 <atan2+0x54>
    2f94:	2b ed       	ldi	r18, 0xDB	; 219
    2f96:	3f e0       	ldi	r19, 0x0F	; 15
    2f98:	49 e4       	ldi	r20, 0x49	; 73
    2f9a:	50 fd       	sbrc	r21, 0
    2f9c:	49 ec       	ldi	r20, 0xC9	; 201
    2f9e:	63 cf       	rjmp	.-314    	; 0x2e66 <__addsf3>
    2fa0:	08 95       	ret

00002fa2 <atan>:
    2fa2:	df 93       	push	r29
    2fa4:	dd 27       	eor	r29, r29
    2fa6:	b9 2f       	mov	r27, r25
    2fa8:	bf 77       	andi	r27, 0x7F	; 127
    2faa:	40 e8       	ldi	r20, 0x80	; 128
    2fac:	5f e3       	ldi	r21, 0x3F	; 63
    2fae:	16 16       	cp	r1, r22
    2fb0:	17 06       	cpc	r1, r23
    2fb2:	48 07       	cpc	r20, r24
    2fb4:	5b 07       	cpc	r21, r27
    2fb6:	10 f4       	brcc	.+4      	; 0x2fbc <atan+0x1a>
    2fb8:	d9 2f       	mov	r29, r25
    2fba:	cf d1       	rcall	.+926    	; 0x335a <inverse>
    2fbc:	9f 93       	push	r25
    2fbe:	8f 93       	push	r24
    2fc0:	7f 93       	push	r23
    2fc2:	6f 93       	push	r22
    2fc4:	7c d2       	rcall	.+1272   	; 0x34be <square>
    2fc6:	ec ea       	ldi	r30, 0xAC	; 172
    2fc8:	f0 e0       	ldi	r31, 0x00	; 0
    2fca:	1d d1       	rcall	.+570    	; 0x3206 <__fp_powser>
    2fcc:	77 d1       	rcall	.+750    	; 0x32bc <__fp_round>
    2fce:	2f 91       	pop	r18
    2fd0:	3f 91       	pop	r19
    2fd2:	4f 91       	pop	r20
    2fd4:	5f 91       	pop	r21
    2fd6:	d4 d1       	rcall	.+936    	; 0x3380 <__mulsf3x>
    2fd8:	dd 23       	and	r29, r29
    2fda:	49 f0       	breq	.+18     	; 0x2fee <atan+0x4c>
    2fdc:	90 58       	subi	r25, 0x80	; 128
    2fde:	a2 ea       	ldi	r26, 0xA2	; 162
    2fe0:	2a ed       	ldi	r18, 0xDA	; 218
    2fe2:	3f e0       	ldi	r19, 0x0F	; 15
    2fe4:	49 ec       	ldi	r20, 0xC9	; 201
    2fe6:	5f e3       	ldi	r21, 0x3F	; 63
    2fe8:	d0 78       	andi	r29, 0x80	; 128
    2fea:	5d 27       	eor	r21, r29
    2fec:	4d df       	rcall	.-358    	; 0x2e88 <__addsf3x>
    2fee:	df 91       	pop	r29
    2ff0:	65 c1       	rjmp	.+714    	; 0x32bc <__fp_round>

00002ff2 <__cmpsf2>:
    2ff2:	dc d0       	rcall	.+440    	; 0x31ac <__fp_cmp>
    2ff4:	08 f4       	brcc	.+2      	; 0x2ff8 <__cmpsf2+0x6>
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	08 95       	ret

00002ffa <cos>:
    2ffa:	39 d1       	rcall	.+626    	; 0x326e <__fp_rempio2>
    2ffc:	e3 95       	inc	r30
    2ffe:	6f c1       	rjmp	.+734    	; 0x32de <__fp_sinus>

00003000 <__divsf3>:
    3000:	0c d0       	rcall	.+24     	; 0x301a <__divsf3x>
    3002:	5c c1       	rjmp	.+696    	; 0x32bc <__fp_round>
    3004:	2c d1       	rcall	.+600    	; 0x325e <__fp_pscB>
    3006:	40 f0       	brcs	.+16     	; 0x3018 <__divsf3+0x18>
    3008:	23 d1       	rcall	.+582    	; 0x3250 <__fp_pscA>
    300a:	30 f0       	brcs	.+12     	; 0x3018 <__divsf3+0x18>
    300c:	21 f4       	brne	.+8      	; 0x3016 <__divsf3+0x16>
    300e:	5f 3f       	cpi	r21, 0xFF	; 255
    3010:	19 f0       	breq	.+6      	; 0x3018 <__divsf3+0x18>
    3012:	f0 c0       	rjmp	.+480    	; 0x31f4 <__fp_inf>
    3014:	51 11       	cpse	r21, r1
    3016:	97 c1       	rjmp	.+814    	; 0x3346 <__fp_szero>
    3018:	f3 c0       	rjmp	.+486    	; 0x3200 <__fp_nan>

0000301a <__divsf3x>:
    301a:	72 d1       	rcall	.+740    	; 0x3300 <__fp_split3>
    301c:	98 f3       	brcs	.-26     	; 0x3004 <__divsf3+0x4>

0000301e <__divsf3_pse>:
    301e:	99 23       	and	r25, r25
    3020:	c9 f3       	breq	.-14     	; 0x3014 <__divsf3+0x14>
    3022:	55 23       	and	r21, r21
    3024:	b1 f3       	breq	.-20     	; 0x3012 <__divsf3+0x12>
    3026:	95 1b       	sub	r25, r21
    3028:	55 0b       	sbc	r21, r21
    302a:	bb 27       	eor	r27, r27
    302c:	aa 27       	eor	r26, r26
    302e:	62 17       	cp	r22, r18
    3030:	73 07       	cpc	r23, r19
    3032:	84 07       	cpc	r24, r20
    3034:	38 f0       	brcs	.+14     	; 0x3044 <__divsf3_pse+0x26>
    3036:	9f 5f       	subi	r25, 0xFF	; 255
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
    303a:	22 0f       	add	r18, r18
    303c:	33 1f       	adc	r19, r19
    303e:	44 1f       	adc	r20, r20
    3040:	aa 1f       	adc	r26, r26
    3042:	a9 f3       	breq	.-22     	; 0x302e <__divsf3_pse+0x10>
    3044:	33 d0       	rcall	.+102    	; 0x30ac <__divsf3_pse+0x8e>
    3046:	0e 2e       	mov	r0, r30
    3048:	3a f0       	brmi	.+14     	; 0x3058 <__divsf3_pse+0x3a>
    304a:	e0 e8       	ldi	r30, 0x80	; 128
    304c:	30 d0       	rcall	.+96     	; 0x30ae <__divsf3_pse+0x90>
    304e:	91 50       	subi	r25, 0x01	; 1
    3050:	50 40       	sbci	r21, 0x00	; 0
    3052:	e6 95       	lsr	r30
    3054:	00 1c       	adc	r0, r0
    3056:	ca f7       	brpl	.-14     	; 0x304a <__divsf3_pse+0x2c>
    3058:	29 d0       	rcall	.+82     	; 0x30ac <__divsf3_pse+0x8e>
    305a:	fe 2f       	mov	r31, r30
    305c:	27 d0       	rcall	.+78     	; 0x30ac <__divsf3_pse+0x8e>
    305e:	66 0f       	add	r22, r22
    3060:	77 1f       	adc	r23, r23
    3062:	88 1f       	adc	r24, r24
    3064:	bb 1f       	adc	r27, r27
    3066:	26 17       	cp	r18, r22
    3068:	37 07       	cpc	r19, r23
    306a:	48 07       	cpc	r20, r24
    306c:	ab 07       	cpc	r26, r27
    306e:	b0 e8       	ldi	r27, 0x80	; 128
    3070:	09 f0       	breq	.+2      	; 0x3074 <__divsf3_pse+0x56>
    3072:	bb 0b       	sbc	r27, r27
    3074:	80 2d       	mov	r24, r0
    3076:	bf 01       	movw	r22, r30
    3078:	ff 27       	eor	r31, r31
    307a:	93 58       	subi	r25, 0x83	; 131
    307c:	5f 4f       	sbci	r21, 0xFF	; 255
    307e:	2a f0       	brmi	.+10     	; 0x308a <__divsf3_pse+0x6c>
    3080:	9e 3f       	cpi	r25, 0xFE	; 254
    3082:	51 05       	cpc	r21, r1
    3084:	68 f0       	brcs	.+26     	; 0x30a0 <__divsf3_pse+0x82>
    3086:	b6 c0       	rjmp	.+364    	; 0x31f4 <__fp_inf>
    3088:	5e c1       	rjmp	.+700    	; 0x3346 <__fp_szero>
    308a:	5f 3f       	cpi	r21, 0xFF	; 255
    308c:	ec f3       	brlt	.-6      	; 0x3088 <__divsf3_pse+0x6a>
    308e:	98 3e       	cpi	r25, 0xE8	; 232
    3090:	dc f3       	brlt	.-10     	; 0x3088 <__divsf3_pse+0x6a>
    3092:	86 95       	lsr	r24
    3094:	77 95       	ror	r23
    3096:	67 95       	ror	r22
    3098:	b7 95       	ror	r27
    309a:	f7 95       	ror	r31
    309c:	9f 5f       	subi	r25, 0xFF	; 255
    309e:	c9 f7       	brne	.-14     	; 0x3092 <__divsf3_pse+0x74>
    30a0:	88 0f       	add	r24, r24
    30a2:	91 1d       	adc	r25, r1
    30a4:	96 95       	lsr	r25
    30a6:	87 95       	ror	r24
    30a8:	97 f9       	bld	r25, 7
    30aa:	08 95       	ret
    30ac:	e1 e0       	ldi	r30, 0x01	; 1
    30ae:	66 0f       	add	r22, r22
    30b0:	77 1f       	adc	r23, r23
    30b2:	88 1f       	adc	r24, r24
    30b4:	bb 1f       	adc	r27, r27
    30b6:	62 17       	cp	r22, r18
    30b8:	73 07       	cpc	r23, r19
    30ba:	84 07       	cpc	r24, r20
    30bc:	ba 07       	cpc	r27, r26
    30be:	20 f0       	brcs	.+8      	; 0x30c8 <__divsf3_pse+0xaa>
    30c0:	62 1b       	sub	r22, r18
    30c2:	73 0b       	sbc	r23, r19
    30c4:	84 0b       	sbc	r24, r20
    30c6:	ba 0b       	sbc	r27, r26
    30c8:	ee 1f       	adc	r30, r30
    30ca:	88 f7       	brcc	.-30     	; 0x30ae <__divsf3_pse+0x90>
    30cc:	e0 95       	com	r30
    30ce:	08 95       	ret

000030d0 <__fixsfsi>:
    30d0:	04 d0       	rcall	.+8      	; 0x30da <__fixunssfsi>
    30d2:	68 94       	set
    30d4:	b1 11       	cpse	r27, r1
    30d6:	37 c1       	rjmp	.+622    	; 0x3346 <__fp_szero>
    30d8:	08 95       	ret

000030da <__fixunssfsi>:
    30da:	1a d1       	rcall	.+564    	; 0x3310 <__fp_splitA>
    30dc:	88 f0       	brcs	.+34     	; 0x3100 <__fixunssfsi+0x26>
    30de:	9f 57       	subi	r25, 0x7F	; 127
    30e0:	90 f0       	brcs	.+36     	; 0x3106 <__fixunssfsi+0x2c>
    30e2:	b9 2f       	mov	r27, r25
    30e4:	99 27       	eor	r25, r25
    30e6:	b7 51       	subi	r27, 0x17	; 23
    30e8:	a0 f0       	brcs	.+40     	; 0x3112 <__fixunssfsi+0x38>
    30ea:	d1 f0       	breq	.+52     	; 0x3120 <__fixunssfsi+0x46>
    30ec:	66 0f       	add	r22, r22
    30ee:	77 1f       	adc	r23, r23
    30f0:	88 1f       	adc	r24, r24
    30f2:	99 1f       	adc	r25, r25
    30f4:	1a f0       	brmi	.+6      	; 0x30fc <__fixunssfsi+0x22>
    30f6:	ba 95       	dec	r27
    30f8:	c9 f7       	brne	.-14     	; 0x30ec <__fixunssfsi+0x12>
    30fa:	12 c0       	rjmp	.+36     	; 0x3120 <__fixunssfsi+0x46>
    30fc:	b1 30       	cpi	r27, 0x01	; 1
    30fe:	81 f0       	breq	.+32     	; 0x3120 <__fixunssfsi+0x46>
    3100:	21 d1       	rcall	.+578    	; 0x3344 <__fp_zero>
    3102:	b1 e0       	ldi	r27, 0x01	; 1
    3104:	08 95       	ret
    3106:	1e c1       	rjmp	.+572    	; 0x3344 <__fp_zero>
    3108:	67 2f       	mov	r22, r23
    310a:	78 2f       	mov	r23, r24
    310c:	88 27       	eor	r24, r24
    310e:	b8 5f       	subi	r27, 0xF8	; 248
    3110:	39 f0       	breq	.+14     	; 0x3120 <__fixunssfsi+0x46>
    3112:	b9 3f       	cpi	r27, 0xF9	; 249
    3114:	cc f3       	brlt	.-14     	; 0x3108 <__fixunssfsi+0x2e>
    3116:	86 95       	lsr	r24
    3118:	77 95       	ror	r23
    311a:	67 95       	ror	r22
    311c:	b3 95       	inc	r27
    311e:	d9 f7       	brne	.-10     	; 0x3116 <__fixunssfsi+0x3c>
    3120:	3e f4       	brtc	.+14     	; 0x3130 <__fixunssfsi+0x56>
    3122:	90 95       	com	r25
    3124:	80 95       	com	r24
    3126:	70 95       	com	r23
    3128:	61 95       	neg	r22
    312a:	7f 4f       	sbci	r23, 0xFF	; 255
    312c:	8f 4f       	sbci	r24, 0xFF	; 255
    312e:	9f 4f       	sbci	r25, 0xFF	; 255
    3130:	08 95       	ret

00003132 <__floatunsisf>:
    3132:	e8 94       	clt
    3134:	09 c0       	rjmp	.+18     	; 0x3148 <__floatsisf+0x12>

00003136 <__floatsisf>:
    3136:	97 fb       	bst	r25, 7
    3138:	3e f4       	brtc	.+14     	; 0x3148 <__floatsisf+0x12>
    313a:	90 95       	com	r25
    313c:	80 95       	com	r24
    313e:	70 95       	com	r23
    3140:	61 95       	neg	r22
    3142:	7f 4f       	sbci	r23, 0xFF	; 255
    3144:	8f 4f       	sbci	r24, 0xFF	; 255
    3146:	9f 4f       	sbci	r25, 0xFF	; 255
    3148:	99 23       	and	r25, r25
    314a:	a9 f0       	breq	.+42     	; 0x3176 <__floatsisf+0x40>
    314c:	f9 2f       	mov	r31, r25
    314e:	96 e9       	ldi	r25, 0x96	; 150
    3150:	bb 27       	eor	r27, r27
    3152:	93 95       	inc	r25
    3154:	f6 95       	lsr	r31
    3156:	87 95       	ror	r24
    3158:	77 95       	ror	r23
    315a:	67 95       	ror	r22
    315c:	b7 95       	ror	r27
    315e:	f1 11       	cpse	r31, r1
    3160:	f8 cf       	rjmp	.-16     	; 0x3152 <__floatsisf+0x1c>
    3162:	fa f4       	brpl	.+62     	; 0x31a2 <__floatsisf+0x6c>
    3164:	bb 0f       	add	r27, r27
    3166:	11 f4       	brne	.+4      	; 0x316c <__floatsisf+0x36>
    3168:	60 ff       	sbrs	r22, 0
    316a:	1b c0       	rjmp	.+54     	; 0x31a2 <__floatsisf+0x6c>
    316c:	6f 5f       	subi	r22, 0xFF	; 255
    316e:	7f 4f       	sbci	r23, 0xFF	; 255
    3170:	8f 4f       	sbci	r24, 0xFF	; 255
    3172:	9f 4f       	sbci	r25, 0xFF	; 255
    3174:	16 c0       	rjmp	.+44     	; 0x31a2 <__floatsisf+0x6c>
    3176:	88 23       	and	r24, r24
    3178:	11 f0       	breq	.+4      	; 0x317e <__floatsisf+0x48>
    317a:	96 e9       	ldi	r25, 0x96	; 150
    317c:	11 c0       	rjmp	.+34     	; 0x31a0 <__floatsisf+0x6a>
    317e:	77 23       	and	r23, r23
    3180:	21 f0       	breq	.+8      	; 0x318a <__floatsisf+0x54>
    3182:	9e e8       	ldi	r25, 0x8E	; 142
    3184:	87 2f       	mov	r24, r23
    3186:	76 2f       	mov	r23, r22
    3188:	05 c0       	rjmp	.+10     	; 0x3194 <__floatsisf+0x5e>
    318a:	66 23       	and	r22, r22
    318c:	71 f0       	breq	.+28     	; 0x31aa <__floatsisf+0x74>
    318e:	96 e8       	ldi	r25, 0x86	; 134
    3190:	86 2f       	mov	r24, r22
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	60 e0       	ldi	r22, 0x00	; 0
    3196:	2a f0       	brmi	.+10     	; 0x31a2 <__floatsisf+0x6c>
    3198:	9a 95       	dec	r25
    319a:	66 0f       	add	r22, r22
    319c:	77 1f       	adc	r23, r23
    319e:	88 1f       	adc	r24, r24
    31a0:	da f7       	brpl	.-10     	; 0x3198 <__floatsisf+0x62>
    31a2:	88 0f       	add	r24, r24
    31a4:	96 95       	lsr	r25
    31a6:	87 95       	ror	r24
    31a8:	97 f9       	bld	r25, 7
    31aa:	08 95       	ret

000031ac <__fp_cmp>:
    31ac:	99 0f       	add	r25, r25
    31ae:	00 08       	sbc	r0, r0
    31b0:	55 0f       	add	r21, r21
    31b2:	aa 0b       	sbc	r26, r26
    31b4:	e0 e8       	ldi	r30, 0x80	; 128
    31b6:	fe ef       	ldi	r31, 0xFE	; 254
    31b8:	16 16       	cp	r1, r22
    31ba:	17 06       	cpc	r1, r23
    31bc:	e8 07       	cpc	r30, r24
    31be:	f9 07       	cpc	r31, r25
    31c0:	c0 f0       	brcs	.+48     	; 0x31f2 <__fp_cmp+0x46>
    31c2:	12 16       	cp	r1, r18
    31c4:	13 06       	cpc	r1, r19
    31c6:	e4 07       	cpc	r30, r20
    31c8:	f5 07       	cpc	r31, r21
    31ca:	98 f0       	brcs	.+38     	; 0x31f2 <__fp_cmp+0x46>
    31cc:	62 1b       	sub	r22, r18
    31ce:	73 0b       	sbc	r23, r19
    31d0:	84 0b       	sbc	r24, r20
    31d2:	95 0b       	sbc	r25, r21
    31d4:	39 f4       	brne	.+14     	; 0x31e4 <__fp_cmp+0x38>
    31d6:	0a 26       	eor	r0, r26
    31d8:	61 f0       	breq	.+24     	; 0x31f2 <__fp_cmp+0x46>
    31da:	23 2b       	or	r18, r19
    31dc:	24 2b       	or	r18, r20
    31de:	25 2b       	or	r18, r21
    31e0:	21 f4       	brne	.+8      	; 0x31ea <__fp_cmp+0x3e>
    31e2:	08 95       	ret
    31e4:	0a 26       	eor	r0, r26
    31e6:	09 f4       	brne	.+2      	; 0x31ea <__fp_cmp+0x3e>
    31e8:	a1 40       	sbci	r26, 0x01	; 1
    31ea:	a6 95       	lsr	r26
    31ec:	8f ef       	ldi	r24, 0xFF	; 255
    31ee:	81 1d       	adc	r24, r1
    31f0:	81 1d       	adc	r24, r1
    31f2:	08 95       	ret

000031f4 <__fp_inf>:
    31f4:	97 f9       	bld	r25, 7
    31f6:	9f 67       	ori	r25, 0x7F	; 127
    31f8:	80 e8       	ldi	r24, 0x80	; 128
    31fa:	70 e0       	ldi	r23, 0x00	; 0
    31fc:	60 e0       	ldi	r22, 0x00	; 0
    31fe:	08 95       	ret

00003200 <__fp_nan>:
    3200:	9f ef       	ldi	r25, 0xFF	; 255
    3202:	80 ec       	ldi	r24, 0xC0	; 192
    3204:	08 95       	ret

00003206 <__fp_powser>:
    3206:	df 93       	push	r29
    3208:	cf 93       	push	r28
    320a:	1f 93       	push	r17
    320c:	0f 93       	push	r16
    320e:	ff 92       	push	r15
    3210:	ef 92       	push	r14
    3212:	df 92       	push	r13
    3214:	7b 01       	movw	r14, r22
    3216:	8c 01       	movw	r16, r24
    3218:	68 94       	set
    321a:	05 c0       	rjmp	.+10     	; 0x3226 <__fp_powser+0x20>
    321c:	da 2e       	mov	r13, r26
    321e:	ef 01       	movw	r28, r30
    3220:	af d0       	rcall	.+350    	; 0x3380 <__mulsf3x>
    3222:	fe 01       	movw	r30, r28
    3224:	e8 94       	clt
    3226:	a5 91       	lpm	r26, Z+
    3228:	25 91       	lpm	r18, Z+
    322a:	35 91       	lpm	r19, Z+
    322c:	45 91       	lpm	r20, Z+
    322e:	55 91       	lpm	r21, Z+
    3230:	ae f3       	brts	.-22     	; 0x321c <__fp_powser+0x16>
    3232:	ef 01       	movw	r28, r30
    3234:	29 de       	rcall	.-942    	; 0x2e88 <__addsf3x>
    3236:	fe 01       	movw	r30, r28
    3238:	97 01       	movw	r18, r14
    323a:	a8 01       	movw	r20, r16
    323c:	da 94       	dec	r13
    323e:	79 f7       	brne	.-34     	; 0x321e <__fp_powser+0x18>
    3240:	df 90       	pop	r13
    3242:	ef 90       	pop	r14
    3244:	ff 90       	pop	r15
    3246:	0f 91       	pop	r16
    3248:	1f 91       	pop	r17
    324a:	cf 91       	pop	r28
    324c:	df 91       	pop	r29
    324e:	08 95       	ret

00003250 <__fp_pscA>:
    3250:	00 24       	eor	r0, r0
    3252:	0a 94       	dec	r0
    3254:	16 16       	cp	r1, r22
    3256:	17 06       	cpc	r1, r23
    3258:	18 06       	cpc	r1, r24
    325a:	09 06       	cpc	r0, r25
    325c:	08 95       	ret

0000325e <__fp_pscB>:
    325e:	00 24       	eor	r0, r0
    3260:	0a 94       	dec	r0
    3262:	12 16       	cp	r1, r18
    3264:	13 06       	cpc	r1, r19
    3266:	14 06       	cpc	r1, r20
    3268:	05 06       	cpc	r0, r21
    326a:	08 95       	ret
    326c:	c9 cf       	rjmp	.-110    	; 0x3200 <__fp_nan>

0000326e <__fp_rempio2>:
    326e:	50 d0       	rcall	.+160    	; 0x3310 <__fp_splitA>
    3270:	e8 f3       	brcs	.-6      	; 0x326c <__fp_pscB+0xe>
    3272:	e8 94       	clt
    3274:	e0 e0       	ldi	r30, 0x00	; 0
    3276:	bb 27       	eor	r27, r27
    3278:	9f 57       	subi	r25, 0x7F	; 127
    327a:	f0 f0       	brcs	.+60     	; 0x32b8 <__fp_rempio2+0x4a>
    327c:	2a ed       	ldi	r18, 0xDA	; 218
    327e:	3f e0       	ldi	r19, 0x0F	; 15
    3280:	49 ec       	ldi	r20, 0xC9	; 201
    3282:	06 c0       	rjmp	.+12     	; 0x3290 <__fp_rempio2+0x22>
    3284:	ee 0f       	add	r30, r30
    3286:	bb 0f       	add	r27, r27
    3288:	66 1f       	adc	r22, r22
    328a:	77 1f       	adc	r23, r23
    328c:	88 1f       	adc	r24, r24
    328e:	28 f0       	brcs	.+10     	; 0x329a <__fp_rempio2+0x2c>
    3290:	b2 3a       	cpi	r27, 0xA2	; 162
    3292:	62 07       	cpc	r22, r18
    3294:	73 07       	cpc	r23, r19
    3296:	84 07       	cpc	r24, r20
    3298:	28 f0       	brcs	.+10     	; 0x32a4 <__fp_rempio2+0x36>
    329a:	b2 5a       	subi	r27, 0xA2	; 162
    329c:	62 0b       	sbc	r22, r18
    329e:	73 0b       	sbc	r23, r19
    32a0:	84 0b       	sbc	r24, r20
    32a2:	e3 95       	inc	r30
    32a4:	9a 95       	dec	r25
    32a6:	72 f7       	brpl	.-36     	; 0x3284 <__fp_rempio2+0x16>
    32a8:	80 38       	cpi	r24, 0x80	; 128
    32aa:	30 f4       	brcc	.+12     	; 0x32b8 <__fp_rempio2+0x4a>
    32ac:	9a 95       	dec	r25
    32ae:	bb 0f       	add	r27, r27
    32b0:	66 1f       	adc	r22, r22
    32b2:	77 1f       	adc	r23, r23
    32b4:	88 1f       	adc	r24, r24
    32b6:	d2 f7       	brpl	.-12     	; 0x32ac <__fp_rempio2+0x3e>
    32b8:	90 48       	sbci	r25, 0x80	; 128
    32ba:	06 c1       	rjmp	.+524    	; 0x34c8 <__fp_mpack_finite>

000032bc <__fp_round>:
    32bc:	09 2e       	mov	r0, r25
    32be:	03 94       	inc	r0
    32c0:	00 0c       	add	r0, r0
    32c2:	11 f4       	brne	.+4      	; 0x32c8 <__fp_round+0xc>
    32c4:	88 23       	and	r24, r24
    32c6:	52 f0       	brmi	.+20     	; 0x32dc <__fp_round+0x20>
    32c8:	bb 0f       	add	r27, r27
    32ca:	40 f4       	brcc	.+16     	; 0x32dc <__fp_round+0x20>
    32cc:	bf 2b       	or	r27, r31
    32ce:	11 f4       	brne	.+4      	; 0x32d4 <__fp_round+0x18>
    32d0:	60 ff       	sbrs	r22, 0
    32d2:	04 c0       	rjmp	.+8      	; 0x32dc <__fp_round+0x20>
    32d4:	6f 5f       	subi	r22, 0xFF	; 255
    32d6:	7f 4f       	sbci	r23, 0xFF	; 255
    32d8:	8f 4f       	sbci	r24, 0xFF	; 255
    32da:	9f 4f       	sbci	r25, 0xFF	; 255
    32dc:	08 95       	ret

000032de <__fp_sinus>:
    32de:	ef 93       	push	r30
    32e0:	e0 ff       	sbrs	r30, 0
    32e2:	06 c0       	rjmp	.+12     	; 0x32f0 <__fp_sinus+0x12>
    32e4:	a2 ea       	ldi	r26, 0xA2	; 162
    32e6:	2a ed       	ldi	r18, 0xDA	; 218
    32e8:	3f e0       	ldi	r19, 0x0F	; 15
    32ea:	49 ec       	ldi	r20, 0xC9	; 201
    32ec:	5f eb       	ldi	r21, 0xBF	; 191
    32ee:	cc dd       	rcall	.-1128   	; 0x2e88 <__addsf3x>
    32f0:	e5 df       	rcall	.-54     	; 0x32bc <__fp_round>
    32f2:	0f 90       	pop	r0
    32f4:	03 94       	inc	r0
    32f6:	01 fc       	sbrc	r0, 1
    32f8:	90 58       	subi	r25, 0x80	; 128
    32fa:	e9 ed       	ldi	r30, 0xD9	; 217
    32fc:	f0 e0       	ldi	r31, 0x00	; 0
    32fe:	f7 c0       	rjmp	.+494    	; 0x34ee <__fp_powsodd>

00003300 <__fp_split3>:
    3300:	57 fd       	sbrc	r21, 7
    3302:	90 58       	subi	r25, 0x80	; 128
    3304:	44 0f       	add	r20, r20
    3306:	55 1f       	adc	r21, r21
    3308:	59 f0       	breq	.+22     	; 0x3320 <__fp_splitA+0x10>
    330a:	5f 3f       	cpi	r21, 0xFF	; 255
    330c:	71 f0       	breq	.+28     	; 0x332a <__fp_splitA+0x1a>
    330e:	47 95       	ror	r20

00003310 <__fp_splitA>:
    3310:	88 0f       	add	r24, r24
    3312:	97 fb       	bst	r25, 7
    3314:	99 1f       	adc	r25, r25
    3316:	61 f0       	breq	.+24     	; 0x3330 <__fp_splitA+0x20>
    3318:	9f 3f       	cpi	r25, 0xFF	; 255
    331a:	79 f0       	breq	.+30     	; 0x333a <__fp_splitA+0x2a>
    331c:	87 95       	ror	r24
    331e:	08 95       	ret
    3320:	12 16       	cp	r1, r18
    3322:	13 06       	cpc	r1, r19
    3324:	14 06       	cpc	r1, r20
    3326:	55 1f       	adc	r21, r21
    3328:	f2 cf       	rjmp	.-28     	; 0x330e <__fp_split3+0xe>
    332a:	46 95       	lsr	r20
    332c:	f1 df       	rcall	.-30     	; 0x3310 <__fp_splitA>
    332e:	08 c0       	rjmp	.+16     	; 0x3340 <__fp_splitA+0x30>
    3330:	16 16       	cp	r1, r22
    3332:	17 06       	cpc	r1, r23
    3334:	18 06       	cpc	r1, r24
    3336:	99 1f       	adc	r25, r25
    3338:	f1 cf       	rjmp	.-30     	; 0x331c <__fp_splitA+0xc>
    333a:	86 95       	lsr	r24
    333c:	71 05       	cpc	r23, r1
    333e:	61 05       	cpc	r22, r1
    3340:	08 94       	sec
    3342:	08 95       	ret

00003344 <__fp_zero>:
    3344:	e8 94       	clt

00003346 <__fp_szero>:
    3346:	bb 27       	eor	r27, r27
    3348:	66 27       	eor	r22, r22
    334a:	77 27       	eor	r23, r23
    334c:	cb 01       	movw	r24, r22
    334e:	97 f9       	bld	r25, 7
    3350:	08 95       	ret

00003352 <__gesf2>:
    3352:	2c df       	rcall	.-424    	; 0x31ac <__fp_cmp>
    3354:	08 f4       	brcc	.+2      	; 0x3358 <__gesf2+0x6>
    3356:	8f ef       	ldi	r24, 0xFF	; 255
    3358:	08 95       	ret

0000335a <inverse>:
    335a:	9b 01       	movw	r18, r22
    335c:	ac 01       	movw	r20, r24
    335e:	60 e0       	ldi	r22, 0x00	; 0
    3360:	70 e0       	ldi	r23, 0x00	; 0
    3362:	80 e8       	ldi	r24, 0x80	; 128
    3364:	9f e3       	ldi	r25, 0x3F	; 63
    3366:	4c ce       	rjmp	.-872    	; 0x3000 <__divsf3>

00003368 <__mulsf3>:
    3368:	0b d0       	rcall	.+22     	; 0x3380 <__mulsf3x>
    336a:	a8 cf       	rjmp	.-176    	; 0x32bc <__fp_round>
    336c:	71 df       	rcall	.-286    	; 0x3250 <__fp_pscA>
    336e:	28 f0       	brcs	.+10     	; 0x337a <__mulsf3+0x12>
    3370:	76 df       	rcall	.-276    	; 0x325e <__fp_pscB>
    3372:	18 f0       	brcs	.+6      	; 0x337a <__mulsf3+0x12>
    3374:	95 23       	and	r25, r21
    3376:	09 f0       	breq	.+2      	; 0x337a <__mulsf3+0x12>
    3378:	3d cf       	rjmp	.-390    	; 0x31f4 <__fp_inf>
    337a:	42 cf       	rjmp	.-380    	; 0x3200 <__fp_nan>
    337c:	11 24       	eor	r1, r1
    337e:	e3 cf       	rjmp	.-58     	; 0x3346 <__fp_szero>

00003380 <__mulsf3x>:
    3380:	bf df       	rcall	.-130    	; 0x3300 <__fp_split3>
    3382:	a0 f3       	brcs	.-24     	; 0x336c <__mulsf3+0x4>

00003384 <__mulsf3_pse>:
    3384:	95 9f       	mul	r25, r21
    3386:	d1 f3       	breq	.-12     	; 0x337c <__mulsf3+0x14>
    3388:	95 0f       	add	r25, r21
    338a:	50 e0       	ldi	r21, 0x00	; 0
    338c:	55 1f       	adc	r21, r21
    338e:	62 9f       	mul	r22, r18
    3390:	f0 01       	movw	r30, r0
    3392:	72 9f       	mul	r23, r18
    3394:	bb 27       	eor	r27, r27
    3396:	f0 0d       	add	r31, r0
    3398:	b1 1d       	adc	r27, r1
    339a:	63 9f       	mul	r22, r19
    339c:	aa 27       	eor	r26, r26
    339e:	f0 0d       	add	r31, r0
    33a0:	b1 1d       	adc	r27, r1
    33a2:	aa 1f       	adc	r26, r26
    33a4:	64 9f       	mul	r22, r20
    33a6:	66 27       	eor	r22, r22
    33a8:	b0 0d       	add	r27, r0
    33aa:	a1 1d       	adc	r26, r1
    33ac:	66 1f       	adc	r22, r22
    33ae:	82 9f       	mul	r24, r18
    33b0:	22 27       	eor	r18, r18
    33b2:	b0 0d       	add	r27, r0
    33b4:	a1 1d       	adc	r26, r1
    33b6:	62 1f       	adc	r22, r18
    33b8:	73 9f       	mul	r23, r19
    33ba:	b0 0d       	add	r27, r0
    33bc:	a1 1d       	adc	r26, r1
    33be:	62 1f       	adc	r22, r18
    33c0:	83 9f       	mul	r24, r19
    33c2:	a0 0d       	add	r26, r0
    33c4:	61 1d       	adc	r22, r1
    33c6:	22 1f       	adc	r18, r18
    33c8:	74 9f       	mul	r23, r20
    33ca:	33 27       	eor	r19, r19
    33cc:	a0 0d       	add	r26, r0
    33ce:	61 1d       	adc	r22, r1
    33d0:	23 1f       	adc	r18, r19
    33d2:	84 9f       	mul	r24, r20
    33d4:	60 0d       	add	r22, r0
    33d6:	21 1d       	adc	r18, r1
    33d8:	82 2f       	mov	r24, r18
    33da:	76 2f       	mov	r23, r22
    33dc:	6a 2f       	mov	r22, r26
    33de:	11 24       	eor	r1, r1
    33e0:	9f 57       	subi	r25, 0x7F	; 127
    33e2:	50 40       	sbci	r21, 0x00	; 0
    33e4:	8a f0       	brmi	.+34     	; 0x3408 <__mulsf3_pse+0x84>
    33e6:	e1 f0       	breq	.+56     	; 0x3420 <__mulsf3_pse+0x9c>
    33e8:	88 23       	and	r24, r24
    33ea:	4a f0       	brmi	.+18     	; 0x33fe <__mulsf3_pse+0x7a>
    33ec:	ee 0f       	add	r30, r30
    33ee:	ff 1f       	adc	r31, r31
    33f0:	bb 1f       	adc	r27, r27
    33f2:	66 1f       	adc	r22, r22
    33f4:	77 1f       	adc	r23, r23
    33f6:	88 1f       	adc	r24, r24
    33f8:	91 50       	subi	r25, 0x01	; 1
    33fa:	50 40       	sbci	r21, 0x00	; 0
    33fc:	a9 f7       	brne	.-22     	; 0x33e8 <__mulsf3_pse+0x64>
    33fe:	9e 3f       	cpi	r25, 0xFE	; 254
    3400:	51 05       	cpc	r21, r1
    3402:	70 f0       	brcs	.+28     	; 0x3420 <__mulsf3_pse+0x9c>
    3404:	f7 ce       	rjmp	.-530    	; 0x31f4 <__fp_inf>
    3406:	9f cf       	rjmp	.-194    	; 0x3346 <__fp_szero>
    3408:	5f 3f       	cpi	r21, 0xFF	; 255
    340a:	ec f3       	brlt	.-6      	; 0x3406 <__mulsf3_pse+0x82>
    340c:	98 3e       	cpi	r25, 0xE8	; 232
    340e:	dc f3       	brlt	.-10     	; 0x3406 <__mulsf3_pse+0x82>
    3410:	86 95       	lsr	r24
    3412:	77 95       	ror	r23
    3414:	67 95       	ror	r22
    3416:	b7 95       	ror	r27
    3418:	f7 95       	ror	r31
    341a:	e7 95       	ror	r30
    341c:	9f 5f       	subi	r25, 0xFF	; 255
    341e:	c1 f7       	brne	.-16     	; 0x3410 <__mulsf3_pse+0x8c>
    3420:	fe 2b       	or	r31, r30
    3422:	88 0f       	add	r24, r24
    3424:	91 1d       	adc	r25, r1
    3426:	96 95       	lsr	r25
    3428:	87 95       	ror	r24
    342a:	97 f9       	bld	r25, 7
    342c:	08 95       	ret

0000342e <sin>:
    342e:	9f 93       	push	r25
    3430:	1e df       	rcall	.-452    	; 0x326e <__fp_rempio2>
    3432:	0f 90       	pop	r0
    3434:	07 fc       	sbrc	r0, 7
    3436:	ee 5f       	subi	r30, 0xFE	; 254
    3438:	52 cf       	rjmp	.-348    	; 0x32de <__fp_sinus>
    343a:	11 f4       	brne	.+4      	; 0x3440 <sin+0x12>
    343c:	0e f4       	brtc	.+2      	; 0x3440 <sin+0x12>
    343e:	e0 ce       	rjmp	.-576    	; 0x3200 <__fp_nan>
    3440:	41 c0       	rjmp	.+130    	; 0x34c4 <__fp_mpack>

00003442 <sqrt>:
    3442:	66 df       	rcall	.-308    	; 0x3310 <__fp_splitA>
    3444:	d0 f3       	brcs	.-12     	; 0x343a <sin+0xc>
    3446:	99 23       	and	r25, r25
    3448:	d9 f3       	breq	.-10     	; 0x3440 <sin+0x12>
    344a:	ce f3       	brts	.-14     	; 0x343e <sin+0x10>
    344c:	9f 57       	subi	r25, 0x7F	; 127
    344e:	55 0b       	sbc	r21, r21
    3450:	87 ff       	sbrs	r24, 7
    3452:	46 d0       	rcall	.+140    	; 0x34e0 <__fp_norm2>
    3454:	00 24       	eor	r0, r0
    3456:	a0 e6       	ldi	r26, 0x60	; 96
    3458:	40 ea       	ldi	r20, 0xA0	; 160
    345a:	90 01       	movw	r18, r0
    345c:	80 58       	subi	r24, 0x80	; 128
    345e:	56 95       	lsr	r21
    3460:	97 95       	ror	r25
    3462:	28 f4       	brcc	.+10     	; 0x346e <sqrt+0x2c>
    3464:	80 5c       	subi	r24, 0xC0	; 192
    3466:	66 0f       	add	r22, r22
    3468:	77 1f       	adc	r23, r23
    346a:	88 1f       	adc	r24, r24
    346c:	20 f0       	brcs	.+8      	; 0x3476 <sqrt+0x34>
    346e:	26 17       	cp	r18, r22
    3470:	37 07       	cpc	r19, r23
    3472:	48 07       	cpc	r20, r24
    3474:	30 f4       	brcc	.+12     	; 0x3482 <sqrt+0x40>
    3476:	62 1b       	sub	r22, r18
    3478:	73 0b       	sbc	r23, r19
    347a:	84 0b       	sbc	r24, r20
    347c:	20 29       	or	r18, r0
    347e:	31 29       	or	r19, r1
    3480:	4a 2b       	or	r20, r26
    3482:	a6 95       	lsr	r26
    3484:	17 94       	ror	r1
    3486:	07 94       	ror	r0
    3488:	20 25       	eor	r18, r0
    348a:	31 25       	eor	r19, r1
    348c:	4a 27       	eor	r20, r26
    348e:	58 f7       	brcc	.-42     	; 0x3466 <sqrt+0x24>
    3490:	66 0f       	add	r22, r22
    3492:	77 1f       	adc	r23, r23
    3494:	88 1f       	adc	r24, r24
    3496:	20 f0       	brcs	.+8      	; 0x34a0 <sqrt+0x5e>
    3498:	26 17       	cp	r18, r22
    349a:	37 07       	cpc	r19, r23
    349c:	48 07       	cpc	r20, r24
    349e:	30 f4       	brcc	.+12     	; 0x34ac <sqrt+0x6a>
    34a0:	62 0b       	sbc	r22, r18
    34a2:	73 0b       	sbc	r23, r19
    34a4:	84 0b       	sbc	r24, r20
    34a6:	20 0d       	add	r18, r0
    34a8:	31 1d       	adc	r19, r1
    34aa:	41 1d       	adc	r20, r1
    34ac:	a0 95       	com	r26
    34ae:	81 f7       	brne	.-32     	; 0x3490 <sqrt+0x4e>
    34b0:	b9 01       	movw	r22, r18
    34b2:	84 2f       	mov	r24, r20
    34b4:	91 58       	subi	r25, 0x81	; 129
    34b6:	88 0f       	add	r24, r24
    34b8:	96 95       	lsr	r25
    34ba:	87 95       	ror	r24
    34bc:	08 95       	ret

000034be <square>:
    34be:	9b 01       	movw	r18, r22
    34c0:	ac 01       	movw	r20, r24
    34c2:	52 cf       	rjmp	.-348    	; 0x3368 <__mulsf3>

000034c4 <__fp_mpack>:
    34c4:	9f 3f       	cpi	r25, 0xFF	; 255
    34c6:	31 f0       	breq	.+12     	; 0x34d4 <__fp_mpack_finite+0xc>

000034c8 <__fp_mpack_finite>:
    34c8:	91 50       	subi	r25, 0x01	; 1
    34ca:	20 f4       	brcc	.+8      	; 0x34d4 <__fp_mpack_finite+0xc>
    34cc:	87 95       	ror	r24
    34ce:	77 95       	ror	r23
    34d0:	67 95       	ror	r22
    34d2:	b7 95       	ror	r27
    34d4:	88 0f       	add	r24, r24
    34d6:	91 1d       	adc	r25, r1
    34d8:	96 95       	lsr	r25
    34da:	87 95       	ror	r24
    34dc:	97 f9       	bld	r25, 7
    34de:	08 95       	ret

000034e0 <__fp_norm2>:
    34e0:	91 50       	subi	r25, 0x01	; 1
    34e2:	50 40       	sbci	r21, 0x00	; 0
    34e4:	66 0f       	add	r22, r22
    34e6:	77 1f       	adc	r23, r23
    34e8:	88 1f       	adc	r24, r24
    34ea:	d2 f7       	brpl	.-12     	; 0x34e0 <__fp_norm2>
    34ec:	08 95       	ret

000034ee <__fp_powsodd>:
    34ee:	9f 93       	push	r25
    34f0:	8f 93       	push	r24
    34f2:	7f 93       	push	r23
    34f4:	6f 93       	push	r22
    34f6:	ff 93       	push	r31
    34f8:	ef 93       	push	r30
    34fa:	9b 01       	movw	r18, r22
    34fc:	ac 01       	movw	r20, r24
    34fe:	34 df       	rcall	.-408    	; 0x3368 <__mulsf3>
    3500:	ef 91       	pop	r30
    3502:	ff 91       	pop	r31
    3504:	80 de       	rcall	.-768    	; 0x3206 <__fp_powser>
    3506:	2f 91       	pop	r18
    3508:	3f 91       	pop	r19
    350a:	4f 91       	pop	r20
    350c:	5f 91       	pop	r21
    350e:	2c cf       	rjmp	.-424    	; 0x3368 <__mulsf3>

00003510 <_exit>:
    3510:	f8 94       	cli

00003512 <__stop_program>:
    3512:	ff cf       	rjmp	.-2      	; 0x3512 <__stop_program>
