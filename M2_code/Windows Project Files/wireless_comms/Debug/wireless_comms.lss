
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00003a76  00003b0a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000077  0080010c  0080010c  00003b16  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00003b18  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  000071fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00008362  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000280  00000000  00000000  00008391  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000029bb  00000000  00000000  00008611  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000099a  00000000  00000000  0000afcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012d1  00000000  00000000  0000b966  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000006f0  00000000  00000000  0000cc38  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000a11  00000000  00000000  0000d328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000395b  00000000  00000000  0000dd39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000318  00000000  00000000  00011694  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 04 16 	jmp	0x2c08	; 0x2c08 <__vector_10>
      2c:	0c 94 42 16 	jmp	0x2c84	; 0x2c84 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <__vector_41>
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e6 e7       	ldi	r30, 0x76	; 118
     1be:	fa e3       	ldi	r31, 0x3A	; 58
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ac 30       	cpi	r26, 0x0C	; 12
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ac e0       	ldi	r26, 0x0C	; 12
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a3 38       	cpi	r26, 0x83	; 131
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 3f 0b 	call	0x167e	; 0x167e <main>
     1e0:	0c 94 39 1d 	jmp	0x3a72	; 0x3a72 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     1e8:	2f 92       	push	r2
     1ea:	3f 92       	push	r3
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	28 97       	sbiw	r28, 0x08	; 8
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	98 86       	std	Y+8, r9	; 0x08
     21e:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     220:	10 92 0d 01 	sts	0x010D, r1
     224:	10 92 0c 01 	sts	0x010C, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     228:	8f 3f       	cpi	r24, 0xFF	; 255
     22a:	e3 e0       	ldi	r30, 0x03	; 3
     22c:	9e 07       	cpc	r25, r30
     22e:	01 f1       	breq	.+64     	; 0x270 <localize+0x88>
     230:	6f 3f       	cpi	r22, 0xFF	; 255
     232:	f3 e0       	ldi	r31, 0x03	; 3
     234:	7f 07       	cpc	r23, r31
     236:	e1 f0       	breq	.+56     	; 0x270 <localize+0x88>
     238:	4f 3f       	cpi	r20, 0xFF	; 255
     23a:	e3 e0       	ldi	r30, 0x03	; 3
     23c:	5e 07       	cpc	r21, r30
     23e:	c1 f0       	breq	.+48     	; 0x270 <localize+0x88>
     240:	2f 3f       	cpi	r18, 0xFF	; 255
     242:	f3 e0       	ldi	r31, 0x03	; 3
     244:	3f 07       	cpc	r19, r31
     246:	a1 f0       	breq	.+40     	; 0x270 <localize+0x88>
     248:	0f 3f       	cpi	r16, 0xFF	; 255
     24a:	e3 e0       	ldi	r30, 0x03	; 3
     24c:	1e 07       	cpc	r17, r30
     24e:	81 f0       	breq	.+32     	; 0x270 <localize+0x88>
     250:	ff ef       	ldi	r31, 0xFF	; 255
     252:	ef 16       	cp	r14, r31
     254:	f3 e0       	ldi	r31, 0x03	; 3
     256:	ff 06       	cpc	r15, r31
     258:	59 f0       	breq	.+22     	; 0x270 <localize+0x88>
     25a:	ef ef       	ldi	r30, 0xFF	; 255
     25c:	ce 16       	cp	r12, r30
     25e:	e3 e0       	ldi	r30, 0x03	; 3
     260:	de 06       	cpc	r13, r30
     262:	31 f0       	breq	.+12     	; 0x270 <localize+0x88>
     264:	ff ef       	ldi	r31, 0xFF	; 255
     266:	af 16       	cp	r10, r31
     268:	f3 e0       	ldi	r31, 0x03	; 3
     26a:	bf 06       	cpc	r11, r31
     26c:	09 f0       	breq	.+2      	; 0x270 <localize+0x88>
     26e:	b0 c6       	rjmp	.+3424   	; 0xfd0 <__stack+0x4d1>
        flag_no_good_stars = 1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	90 93 0d 01 	sts	0x010D, r25
     278:	80 93 0c 01 	sts	0x010C, r24
     27c:	d1 c3       	rjmp	.+1954   	; 0xa20 <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     27e:	f8 01       	movw	r30, r16
     280:	a0 80       	ld	r10, Z
     282:	b1 80       	ldd	r11, Z+1	; 0x01
     284:	c2 80       	ldd	r12, Z+2	; 0x02
     286:	d3 80       	ldd	r13, Z+3	; 0x03
     288:	0c 5f       	subi	r16, 0xFC	; 252
     28a:	1f 4f       	sbci	r17, 0xFF	; 255
     28c:	26 2d       	mov	r18, r6
     28e:	37 2d       	mov	r19, r7
     290:	48 2d       	mov	r20, r8
     292:	59 2d       	mov	r21, r9
     294:	6a 2d       	mov	r22, r10
     296:	7b 2d       	mov	r23, r11
     298:	8c 2d       	mov	r24, r12
     29a:	9d 2d       	mov	r25, r13
     29c:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
     2a0:	18 16       	cp	r1, r24
     2a2:	34 f4       	brge	.+12     	; 0x2b0 <localize+0xc8>
     2a4:	fa 82       	std	Y+2, r15	; 0x02
     2a6:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     2a8:	6a 2c       	mov	r6, r10
     2aa:	7b 2c       	mov	r7, r11
     2ac:	8c 2c       	mov	r8, r12
     2ae:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     2b0:	22 2d       	mov	r18, r2
     2b2:	33 2d       	mov	r19, r3
     2b4:	44 2d       	mov	r20, r4
     2b6:	55 2d       	mov	r21, r5
     2b8:	6a 2d       	mov	r22, r10
     2ba:	7b 2d       	mov	r23, r11
     2bc:	8c 2d       	mov	r24, r12
     2be:	9d 2d       	mov	r25, r13
     2c0:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
     2c4:	88 23       	and	r24, r24
     2c6:	34 f4       	brge	.+12     	; 0x2d4 <localize+0xec>
     2c8:	fe 82       	std	Y+6, r15	; 0x06
     2ca:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     2cc:	2a 2c       	mov	r2, r10
     2ce:	3b 2c       	mov	r3, r11
     2d0:	4c 2c       	mov	r4, r12
     2d2:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     2d4:	ff ef       	ldi	r31, 0xFF	; 255
     2d6:	ef 1a       	sub	r14, r31
     2d8:	ff 0a       	sbc	r15, r31
     2da:	86 e0       	ldi	r24, 0x06	; 6
     2dc:	e8 16       	cp	r14, r24
     2de:	f1 04       	cpc	r15, r1
     2e0:	71 f6       	brne	.-100    	; 0x27e <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     2e2:	e9 81       	ldd	r30, Y+1	; 0x01
     2e4:	fa 81       	ldd	r31, Y+2	; 0x02
     2e6:	e2 30       	cpi	r30, 0x02	; 2
     2e8:	f1 05       	cpc	r31, r1
     2ea:	09 f4       	brne	.+2      	; 0x2ee <localize+0x106>
     2ec:	3e c1       	rjmp	.+636    	; 0x56a <localize+0x382>
     2ee:	34 f4       	brge	.+12     	; 0x2fc <localize+0x114>
     2f0:	30 97       	sbiw	r30, 0x00	; 0
     2f2:	81 f0       	breq	.+32     	; 0x314 <localize+0x12c>
     2f4:	31 97       	sbiw	r30, 0x01	; 1
     2f6:	09 f0       	breq	.+2      	; 0x2fa <localize+0x112>
     2f8:	8d c3       	rjmp	.+1818   	; 0xa14 <localize+0x82c>
     2fa:	a2 c0       	rjmp	.+324    	; 0x440 <localize+0x258>
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	84 30       	cpi	r24, 0x04	; 4
     302:	91 05       	cpc	r25, r1
     304:	09 f4       	brne	.+2      	; 0x308 <localize+0x120>
     306:	5b c2       	rjmp	.+1206   	; 0x7be <localize+0x5d6>
     308:	0c f4       	brge	.+2      	; 0x30c <localize+0x124>
     30a:	c4 c1       	rjmp	.+904    	; 0x694 <localize+0x4ac>
     30c:	05 97       	sbiw	r24, 0x05	; 5
     30e:	09 f0       	breq	.+2      	; 0x312 <localize+0x12a>
     310:	81 c3       	rjmp	.+1794   	; 0xa14 <localize+0x82c>
     312:	ea c2       	rjmp	.+1492   	; 0x8e8 <localize+0x700>
            case 0:
                switch (min_id) {
     314:	ed 81       	ldd	r30, Y+5	; 0x05
     316:	fe 81       	ldd	r31, Y+6	; 0x06
     318:	e2 30       	cpi	r30, 0x02	; 2
     31a:	f1 05       	cpc	r31, r1
     31c:	39 f1       	breq	.+78     	; 0x36c <localize+0x184>
     31e:	24 f4       	brge	.+8      	; 0x328 <localize+0x140>
     320:	31 97       	sbiw	r30, 0x01	; 1
     322:	09 f0       	breq	.+2      	; 0x326 <localize+0x13e>
     324:	6e c0       	rjmp	.+220    	; 0x402 <localize+0x21a>
     326:	09 c0       	rjmp	.+18     	; 0x33a <localize+0x152>
     328:	8d 81       	ldd	r24, Y+5	; 0x05
     32a:	9e 81       	ldd	r25, Y+6	; 0x06
     32c:	83 30       	cpi	r24, 0x03	; 3
     32e:	91 05       	cpc	r25, r1
     330:	b1 f1       	breq	.+108    	; 0x39e <localize+0x1b6>
     332:	04 97       	sbiw	r24, 0x04	; 4
     334:	09 f0       	breq	.+2      	; 0x338 <localize+0x150>
     336:	65 c0       	rjmp	.+202    	; 0x402 <localize+0x21a>
     338:	4b c0       	rjmp	.+150    	; 0x3d0 <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     33a:	82 e4       	ldi	r24, 0x42	; 66
     33c:	91 e0       	ldi	r25, 0x01	; 1
     33e:	90 93 76 01 	sts	0x0176, r25
     342:	80 93 75 01 	sts	0x0175, r24
     346:	8a e3       	ldi	r24, 0x3A	; 58
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	90 93 5c 01 	sts	0x015C, r25
     34e:	80 93 5b 01 	sts	0x015B, r24
     352:	8e e3       	ldi	r24, 0x3E	; 62
     354:	91 e0       	ldi	r25, 0x01	; 1
     356:	90 93 5e 01 	sts	0x015E, r25
     35a:	80 93 5d 01 	sts	0x015D, r24
     35e:	86 e3       	ldi	r24, 0x36	; 54
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	90 93 70 01 	sts	0x0170, r25
     366:	80 93 6f 01 	sts	0x016F, r24
                        break;
     36a:	54 c3       	rjmp	.+1704   	; 0xa14 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     36c:	82 e4       	ldi	r24, 0x42	; 66
     36e:	91 e0       	ldi	r25, 0x01	; 1
     370:	90 93 76 01 	sts	0x0176, r25
     374:	80 93 75 01 	sts	0x0175, r24
     378:	86 e3       	ldi	r24, 0x36	; 54
     37a:	91 e0       	ldi	r25, 0x01	; 1
     37c:	90 93 5c 01 	sts	0x015C, r25
     380:	80 93 5b 01 	sts	0x015B, r24
     384:	8e e3       	ldi	r24, 0x3E	; 62
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	90 93 5e 01 	sts	0x015E, r25
     38c:	80 93 5d 01 	sts	0x015D, r24
     390:	8a e3       	ldi	r24, 0x3A	; 58
     392:	91 e0       	ldi	r25, 0x01	; 1
     394:	90 93 70 01 	sts	0x0170, r25
     398:	80 93 6f 01 	sts	0x016F, r24
                        break;
     39c:	3b c3       	rjmp	.+1654   	; 0xa14 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     39e:	8e e3       	ldi	r24, 0x3E	; 62
     3a0:	91 e0       	ldi	r25, 0x01	; 1
     3a2:	90 93 76 01 	sts	0x0176, r25
     3a6:	80 93 75 01 	sts	0x0175, r24
     3aa:	8a e3       	ldi	r24, 0x3A	; 58
     3ac:	91 e0       	ldi	r25, 0x01	; 1
     3ae:	90 93 5c 01 	sts	0x015C, r25
     3b2:	80 93 5b 01 	sts	0x015B, r24
     3b6:	82 e4       	ldi	r24, 0x42	; 66
     3b8:	91 e0       	ldi	r25, 0x01	; 1
     3ba:	90 93 5e 01 	sts	0x015E, r25
     3be:	80 93 5d 01 	sts	0x015D, r24
     3c2:	86 e3       	ldi	r24, 0x36	; 54
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	90 93 70 01 	sts	0x0170, r25
     3ca:	80 93 6f 01 	sts	0x016F, r24
                        break;
     3ce:	22 c3       	rjmp	.+1604   	; 0xa14 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     3d0:	8e e3       	ldi	r24, 0x3E	; 62
     3d2:	91 e0       	ldi	r25, 0x01	; 1
     3d4:	90 93 76 01 	sts	0x0176, r25
     3d8:	80 93 75 01 	sts	0x0175, r24
     3dc:	86 e3       	ldi	r24, 0x36	; 54
     3de:	91 e0       	ldi	r25, 0x01	; 1
     3e0:	90 93 5c 01 	sts	0x015C, r25
     3e4:	80 93 5b 01 	sts	0x015B, r24
     3e8:	82 e4       	ldi	r24, 0x42	; 66
     3ea:	91 e0       	ldi	r25, 0x01	; 1
     3ec:	90 93 5e 01 	sts	0x015E, r25
     3f0:	80 93 5d 01 	sts	0x015D, r24
     3f4:	8a e3       	ldi	r24, 0x3A	; 58
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	90 93 70 01 	sts	0x0170, r25
     3fc:	80 93 6f 01 	sts	0x016F, r24
                        break;
     400:	09 c3       	rjmp	.+1554   	; 0xa14 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     402:	82 e4       	ldi	r24, 0x42	; 66
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	90 93 76 01 	sts	0x0176, r25
     40a:	80 93 75 01 	sts	0x0175, r24
     40e:	8e e3       	ldi	r24, 0x3E	; 62
     410:	91 e0       	ldi	r25, 0x01	; 1
     412:	90 93 5c 01 	sts	0x015C, r25
     416:	80 93 5b 01 	sts	0x015B, r24
     41a:	8a e3       	ldi	r24, 0x3A	; 58
     41c:	91 e0       	ldi	r25, 0x01	; 1
     41e:	90 93 5e 01 	sts	0x015E, r25
     422:	80 93 5d 01 	sts	0x015D, r24
     426:	86 e3       	ldi	r24, 0x36	; 54
     428:	91 e0       	ldi	r25, 0x01	; 1
     42a:	90 93 70 01 	sts	0x0170, r25
     42e:	80 93 6f 01 	sts	0x016F, r24
                        flag_no_good_stars = 1;
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	90 93 0d 01 	sts	0x010D, r25
     43a:	80 93 0c 01 	sts	0x010C, r24
                        break;
     43e:	f0 c2       	rjmp	.+1504   	; 0xa20 <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
     440:	ed 81       	ldd	r30, Y+5	; 0x05
     442:	fe 81       	ldd	r31, Y+6	; 0x06
     444:	e2 30       	cpi	r30, 0x02	; 2
     446:	f1 05       	cpc	r31, r1
     448:	31 f1       	breq	.+76     	; 0x496 <localize+0x2ae>
     44a:	1c f4       	brge	.+6      	; 0x452 <localize+0x26a>
     44c:	ef 2b       	or	r30, r31
     44e:	51 f0       	breq	.+20     	; 0x464 <localize+0x27c>
     450:	6d c0       	rjmp	.+218    	; 0x52c <localize+0x344>
     452:	8d 81       	ldd	r24, Y+5	; 0x05
     454:	9e 81       	ldd	r25, Y+6	; 0x06
     456:	83 30       	cpi	r24, 0x03	; 3
     458:	91 05       	cpc	r25, r1
     45a:	b1 f1       	breq	.+108    	; 0x4c8 <localize+0x2e0>
     45c:	05 97       	sbiw	r24, 0x05	; 5
     45e:	09 f0       	breq	.+2      	; 0x462 <localize+0x27a>
     460:	65 c0       	rjmp	.+202    	; 0x52c <localize+0x344>
     462:	4b c0       	rjmp	.+150    	; 0x4fa <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     464:	82 e4       	ldi	r24, 0x42	; 66
     466:	91 e0       	ldi	r25, 0x01	; 1
     468:	90 93 76 01 	sts	0x0176, r25
     46c:	80 93 75 01 	sts	0x0175, r24
     470:	8e e3       	ldi	r24, 0x3E	; 62
     472:	91 e0       	ldi	r25, 0x01	; 1
     474:	90 93 5c 01 	sts	0x015C, r25
     478:	80 93 5b 01 	sts	0x015B, r24
     47c:	8a e3       	ldi	r24, 0x3A	; 58
     47e:	91 e0       	ldi	r25, 0x01	; 1
     480:	90 93 5e 01 	sts	0x015E, r25
     484:	80 93 5d 01 	sts	0x015D, r24
     488:	86 e3       	ldi	r24, 0x36	; 54
     48a:	91 e0       	ldi	r25, 0x01	; 1
     48c:	90 93 70 01 	sts	0x0170, r25
     490:	80 93 6f 01 	sts	0x016F, r24
                        break;
     494:	bf c2       	rjmp	.+1406   	; 0xa14 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     496:	82 e4       	ldi	r24, 0x42	; 66
     498:	91 e0       	ldi	r25, 0x01	; 1
     49a:	90 93 76 01 	sts	0x0176, r25
     49e:	80 93 75 01 	sts	0x0175, r24
     4a2:	86 e3       	ldi	r24, 0x36	; 54
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	90 93 5c 01 	sts	0x015C, r25
     4aa:	80 93 5b 01 	sts	0x015B, r24
     4ae:	8a e3       	ldi	r24, 0x3A	; 58
     4b0:	91 e0       	ldi	r25, 0x01	; 1
     4b2:	90 93 5e 01 	sts	0x015E, r25
     4b6:	80 93 5d 01 	sts	0x015D, r24
     4ba:	8e e3       	ldi	r24, 0x3E	; 62
     4bc:	91 e0       	ldi	r25, 0x01	; 1
     4be:	90 93 70 01 	sts	0x0170, r25
     4c2:	80 93 6f 01 	sts	0x016F, r24
                        break;
     4c6:	a6 c2       	rjmp	.+1356   	; 0xa14 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     4c8:	8a e3       	ldi	r24, 0x3A	; 58
     4ca:	91 e0       	ldi	r25, 0x01	; 1
     4cc:	90 93 76 01 	sts	0x0176, r25
     4d0:	80 93 75 01 	sts	0x0175, r24
     4d4:	8e e3       	ldi	r24, 0x3E	; 62
     4d6:	91 e0       	ldi	r25, 0x01	; 1
     4d8:	90 93 5c 01 	sts	0x015C, r25
     4dc:	80 93 5b 01 	sts	0x015B, r24
     4e0:	82 e4       	ldi	r24, 0x42	; 66
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	90 93 5e 01 	sts	0x015E, r25
     4e8:	80 93 5d 01 	sts	0x015D, r24
     4ec:	86 e3       	ldi	r24, 0x36	; 54
     4ee:	91 e0       	ldi	r25, 0x01	; 1
     4f0:	90 93 70 01 	sts	0x0170, r25
     4f4:	80 93 6f 01 	sts	0x016F, r24
                        break;
     4f8:	8d c2       	rjmp	.+1306   	; 0xa14 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     4fa:	8a e3       	ldi	r24, 0x3A	; 58
     4fc:	91 e0       	ldi	r25, 0x01	; 1
     4fe:	90 93 76 01 	sts	0x0176, r25
     502:	80 93 75 01 	sts	0x0175, r24
     506:	86 e3       	ldi	r24, 0x36	; 54
     508:	91 e0       	ldi	r25, 0x01	; 1
     50a:	90 93 5c 01 	sts	0x015C, r25
     50e:	80 93 5b 01 	sts	0x015B, r24
     512:	82 e4       	ldi	r24, 0x42	; 66
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	90 93 5e 01 	sts	0x015E, r25
     51a:	80 93 5d 01 	sts	0x015D, r24
     51e:	8e e3       	ldi	r24, 0x3E	; 62
     520:	91 e0       	ldi	r25, 0x01	; 1
     522:	90 93 70 01 	sts	0x0170, r25
     526:	80 93 6f 01 	sts	0x016F, r24
                        break;
     52a:	74 c2       	rjmp	.+1256   	; 0xa14 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     52c:	82 e4       	ldi	r24, 0x42	; 66
     52e:	91 e0       	ldi	r25, 0x01	; 1
     530:	90 93 76 01 	sts	0x0176, r25
     534:	80 93 75 01 	sts	0x0175, r24
     538:	8e e3       	ldi	r24, 0x3E	; 62
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	90 93 5c 01 	sts	0x015C, r25
     540:	80 93 5b 01 	sts	0x015B, r24
     544:	8a e3       	ldi	r24, 0x3A	; 58
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	90 93 5e 01 	sts	0x015E, r25
     54c:	80 93 5d 01 	sts	0x015D, r24
     550:	86 e3       	ldi	r24, 0x36	; 54
     552:	91 e0       	ldi	r25, 0x01	; 1
     554:	90 93 70 01 	sts	0x0170, r25
     558:	80 93 6f 01 	sts	0x016F, r24
                        flag_no_good_stars = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 0d 01 	sts	0x010D, r25
     564:	80 93 0c 01 	sts	0x010C, r24
                        break;
     568:	5b c2       	rjmp	.+1206   	; 0xa20 <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
     56a:	ed 81       	ldd	r30, Y+5	; 0x05
     56c:	fe 81       	ldd	r31, Y+6	; 0x06
     56e:	e1 30       	cpi	r30, 0x01	; 1
     570:	f1 05       	cpc	r31, r1
     572:	31 f1       	breq	.+76     	; 0x5c0 <localize+0x3d8>
     574:	1c f4       	brge	.+6      	; 0x57c <localize+0x394>
     576:	ef 2b       	or	r30, r31
     578:	51 f0       	breq	.+20     	; 0x58e <localize+0x3a6>
     57a:	6d c0       	rjmp	.+218    	; 0x656 <localize+0x46e>
     57c:	8d 81       	ldd	r24, Y+5	; 0x05
     57e:	9e 81       	ldd	r25, Y+6	; 0x06
     580:	84 30       	cpi	r24, 0x04	; 4
     582:	91 05       	cpc	r25, r1
     584:	b1 f1       	breq	.+108    	; 0x5f2 <localize+0x40a>
     586:	05 97       	sbiw	r24, 0x05	; 5
     588:	09 f0       	breq	.+2      	; 0x58c <localize+0x3a4>
     58a:	65 c0       	rjmp	.+202    	; 0x656 <localize+0x46e>
     58c:	4b c0       	rjmp	.+150    	; 0x624 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     58e:	82 e4       	ldi	r24, 0x42	; 66
     590:	91 e0       	ldi	r25, 0x01	; 1
     592:	90 93 76 01 	sts	0x0176, r25
     596:	80 93 75 01 	sts	0x0175, r24
     59a:	8e e3       	ldi	r24, 0x3E	; 62
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	90 93 5c 01 	sts	0x015C, r25
     5a2:	80 93 5b 01 	sts	0x015B, r24
     5a6:	86 e3       	ldi	r24, 0x36	; 54
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	90 93 5e 01 	sts	0x015E, r25
     5ae:	80 93 5d 01 	sts	0x015D, r24
     5b2:	8a e3       	ldi	r24, 0x3A	; 58
     5b4:	91 e0       	ldi	r25, 0x01	; 1
     5b6:	90 93 70 01 	sts	0x0170, r25
     5ba:	80 93 6f 01 	sts	0x016F, r24
                        break;
     5be:	2a c2       	rjmp	.+1108   	; 0xa14 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     5c0:	82 e4       	ldi	r24, 0x42	; 66
     5c2:	91 e0       	ldi	r25, 0x01	; 1
     5c4:	90 93 76 01 	sts	0x0176, r25
     5c8:	80 93 75 01 	sts	0x0175, r24
     5cc:	8a e3       	ldi	r24, 0x3A	; 58
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	90 93 5c 01 	sts	0x015C, r25
     5d4:	80 93 5b 01 	sts	0x015B, r24
     5d8:	86 e3       	ldi	r24, 0x36	; 54
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	90 93 5e 01 	sts	0x015E, r25
     5e0:	80 93 5d 01 	sts	0x015D, r24
     5e4:	8e e3       	ldi	r24, 0x3E	; 62
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	90 93 70 01 	sts	0x0170, r25
     5ec:	80 93 6f 01 	sts	0x016F, r24
                        break;
     5f0:	11 c2       	rjmp	.+1058   	; 0xa14 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     5f2:	86 e3       	ldi	r24, 0x36	; 54
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	90 93 76 01 	sts	0x0176, r25
     5fa:	80 93 75 01 	sts	0x0175, r24
     5fe:	8e e3       	ldi	r24, 0x3E	; 62
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	90 93 5c 01 	sts	0x015C, r25
     606:	80 93 5b 01 	sts	0x015B, r24
     60a:	82 e4       	ldi	r24, 0x42	; 66
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	90 93 5e 01 	sts	0x015E, r25
     612:	80 93 5d 01 	sts	0x015D, r24
     616:	8a e3       	ldi	r24, 0x3A	; 58
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	90 93 70 01 	sts	0x0170, r25
     61e:	80 93 6f 01 	sts	0x016F, r24
                        break;
     622:	f8 c1       	rjmp	.+1008   	; 0xa14 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     624:	86 e3       	ldi	r24, 0x36	; 54
     626:	91 e0       	ldi	r25, 0x01	; 1
     628:	90 93 76 01 	sts	0x0176, r25
     62c:	80 93 75 01 	sts	0x0175, r24
     630:	8a e3       	ldi	r24, 0x3A	; 58
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	90 93 5c 01 	sts	0x015C, r25
     638:	80 93 5b 01 	sts	0x015B, r24
     63c:	82 e4       	ldi	r24, 0x42	; 66
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	90 93 5e 01 	sts	0x015E, r25
     644:	80 93 5d 01 	sts	0x015D, r24
     648:	8e e3       	ldi	r24, 0x3E	; 62
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	90 93 70 01 	sts	0x0170, r25
     650:	80 93 6f 01 	sts	0x016F, r24
                        break;
     654:	df c1       	rjmp	.+958    	; 0xa14 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     656:	82 e4       	ldi	r24, 0x42	; 66
     658:	91 e0       	ldi	r25, 0x01	; 1
     65a:	90 93 76 01 	sts	0x0176, r25
     65e:	80 93 75 01 	sts	0x0175, r24
     662:	8e e3       	ldi	r24, 0x3E	; 62
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	90 93 5c 01 	sts	0x015C, r25
     66a:	80 93 5b 01 	sts	0x015B, r24
     66e:	8a e3       	ldi	r24, 0x3A	; 58
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	90 93 5e 01 	sts	0x015E, r25
     676:	80 93 5d 01 	sts	0x015D, r24
     67a:	86 e3       	ldi	r24, 0x36	; 54
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	90 93 70 01 	sts	0x0170, r25
     682:	80 93 6f 01 	sts	0x016F, r24
                        flag_no_good_stars = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	90 93 0d 01 	sts	0x010D, r25
     68e:	80 93 0c 01 	sts	0x010C, r24
                        break;
     692:	c6 c1       	rjmp	.+908    	; 0xa20 <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
     694:	ed 81       	ldd	r30, Y+5	; 0x05
     696:	fe 81       	ldd	r31, Y+6	; 0x06
     698:	e1 30       	cpi	r30, 0x01	; 1
     69a:	f1 05       	cpc	r31, r1
     69c:	31 f1       	breq	.+76     	; 0x6ea <localize+0x502>
     69e:	1c f4       	brge	.+6      	; 0x6a6 <localize+0x4be>
     6a0:	ef 2b       	or	r30, r31
     6a2:	51 f0       	breq	.+20     	; 0x6b8 <localize+0x4d0>
     6a4:	6d c0       	rjmp	.+218    	; 0x780 <localize+0x598>
     6a6:	8d 81       	ldd	r24, Y+5	; 0x05
     6a8:	9e 81       	ldd	r25, Y+6	; 0x06
     6aa:	84 30       	cpi	r24, 0x04	; 4
     6ac:	91 05       	cpc	r25, r1
     6ae:	b1 f1       	breq	.+108    	; 0x71c <localize+0x534>
     6b0:	05 97       	sbiw	r24, 0x05	; 5
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <localize+0x4ce>
     6b4:	65 c0       	rjmp	.+202    	; 0x780 <localize+0x598>
     6b6:	4b c0       	rjmp	.+150    	; 0x74e <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     6b8:	8e e3       	ldi	r24, 0x3E	; 62
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	90 93 76 01 	sts	0x0176, r25
     6c0:	80 93 75 01 	sts	0x0175, r24
     6c4:	82 e4       	ldi	r24, 0x42	; 66
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	90 93 5c 01 	sts	0x015C, r25
     6cc:	80 93 5b 01 	sts	0x015B, r24
     6d0:	8a e3       	ldi	r24, 0x3A	; 58
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	90 93 5e 01 	sts	0x015E, r25
     6d8:	80 93 5d 01 	sts	0x015D, r24
     6dc:	86 e3       	ldi	r24, 0x36	; 54
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	90 93 70 01 	sts	0x0170, r25
     6e4:	80 93 6f 01 	sts	0x016F, r24
                        break;
     6e8:	95 c1       	rjmp	.+810    	; 0xa14 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     6ea:	8a e3       	ldi	r24, 0x3A	; 58
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	90 93 76 01 	sts	0x0176, r25
     6f2:	80 93 75 01 	sts	0x0175, r24
     6f6:	82 e4       	ldi	r24, 0x42	; 66
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	90 93 5c 01 	sts	0x015C, r25
     6fe:	80 93 5b 01 	sts	0x015B, r24
     702:	8e e3       	ldi	r24, 0x3E	; 62
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	90 93 5e 01 	sts	0x015E, r25
     70a:	80 93 5d 01 	sts	0x015D, r24
     70e:	86 e3       	ldi	r24, 0x36	; 54
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	90 93 70 01 	sts	0x0170, r25
     716:	80 93 6f 01 	sts	0x016F, r24
                        break;
     71a:	7c c1       	rjmp	.+760    	; 0xa14 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     71c:	8e e3       	ldi	r24, 0x3E	; 62
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	90 93 76 01 	sts	0x0176, r25
     724:	80 93 75 01 	sts	0x0175, r24
     728:	86 e3       	ldi	r24, 0x36	; 54
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	90 93 5c 01 	sts	0x015C, r25
     730:	80 93 5b 01 	sts	0x015B, r24
     734:	8a e3       	ldi	r24, 0x3A	; 58
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	90 93 5e 01 	sts	0x015E, r25
     73c:	80 93 5d 01 	sts	0x015D, r24
     740:	82 e4       	ldi	r24, 0x42	; 66
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	90 93 70 01 	sts	0x0170, r25
     748:	80 93 6f 01 	sts	0x016F, r24
                        break;
     74c:	63 c1       	rjmp	.+710    	; 0xa14 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     74e:	8a e3       	ldi	r24, 0x3A	; 58
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	90 93 76 01 	sts	0x0176, r25
     756:	80 93 75 01 	sts	0x0175, r24
     75a:	86 e3       	ldi	r24, 0x36	; 54
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	90 93 5c 01 	sts	0x015C, r25
     762:	80 93 5b 01 	sts	0x015B, r24
     766:	8e e3       	ldi	r24, 0x3E	; 62
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	90 93 5e 01 	sts	0x015E, r25
     76e:	80 93 5d 01 	sts	0x015D, r24
     772:	82 e4       	ldi	r24, 0x42	; 66
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	90 93 70 01 	sts	0x0170, r25
     77a:	80 93 6f 01 	sts	0x016F, r24
                        break;
     77e:	4a c1       	rjmp	.+660    	; 0xa14 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     780:	82 e4       	ldi	r24, 0x42	; 66
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	90 93 76 01 	sts	0x0176, r25
     788:	80 93 75 01 	sts	0x0175, r24
     78c:	8e e3       	ldi	r24, 0x3E	; 62
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	90 93 5c 01 	sts	0x015C, r25
     794:	80 93 5b 01 	sts	0x015B, r24
     798:	8a e3       	ldi	r24, 0x3A	; 58
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	90 93 5e 01 	sts	0x015E, r25
     7a0:	80 93 5d 01 	sts	0x015D, r24
     7a4:	86 e3       	ldi	r24, 0x36	; 54
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	90 93 70 01 	sts	0x0170, r25
     7ac:	80 93 6f 01 	sts	0x016F, r24
                        flag_no_good_stars = 1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	90 93 0d 01 	sts	0x010D, r25
     7b8:	80 93 0c 01 	sts	0x010C, r24
                        break;
     7bc:	31 c1       	rjmp	.+610    	; 0xa20 <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
     7be:	ed 81       	ldd	r30, Y+5	; 0x05
     7c0:	fe 81       	ldd	r31, Y+6	; 0x06
     7c2:	e2 30       	cpi	r30, 0x02	; 2
     7c4:	f1 05       	cpc	r31, r1
     7c6:	31 f1       	breq	.+76     	; 0x814 <localize+0x62c>
     7c8:	1c f4       	brge	.+6      	; 0x7d0 <localize+0x5e8>
     7ca:	ef 2b       	or	r30, r31
     7cc:	51 f0       	breq	.+20     	; 0x7e2 <localize+0x5fa>
     7ce:	6d c0       	rjmp	.+218    	; 0x8aa <localize+0x6c2>
     7d0:	8d 81       	ldd	r24, Y+5	; 0x05
     7d2:	9e 81       	ldd	r25, Y+6	; 0x06
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	91 05       	cpc	r25, r1
     7d8:	b1 f1       	breq	.+108    	; 0x846 <localize+0x65e>
     7da:	05 97       	sbiw	r24, 0x05	; 5
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <localize+0x5f8>
     7de:	65 c0       	rjmp	.+202    	; 0x8aa <localize+0x6c2>
     7e0:	4b c0       	rjmp	.+150    	; 0x878 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     7e2:	8e e3       	ldi	r24, 0x3E	; 62
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	90 93 76 01 	sts	0x0176, r25
     7ea:	80 93 75 01 	sts	0x0175, r24
     7ee:	82 e4       	ldi	r24, 0x42	; 66
     7f0:	91 e0       	ldi	r25, 0x01	; 1
     7f2:	90 93 5c 01 	sts	0x015C, r25
     7f6:	80 93 5b 01 	sts	0x015B, r24
     7fa:	86 e3       	ldi	r24, 0x36	; 54
     7fc:	91 e0       	ldi	r25, 0x01	; 1
     7fe:	90 93 5e 01 	sts	0x015E, r25
     802:	80 93 5d 01 	sts	0x015D, r24
     806:	8a e3       	ldi	r24, 0x3A	; 58
     808:	91 e0       	ldi	r25, 0x01	; 1
     80a:	90 93 70 01 	sts	0x0170, r25
     80e:	80 93 6f 01 	sts	0x016F, r24
                        break;
     812:	00 c1       	rjmp	.+512    	; 0xa14 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     814:	86 e3       	ldi	r24, 0x36	; 54
     816:	91 e0       	ldi	r25, 0x01	; 1
     818:	90 93 76 01 	sts	0x0176, r25
     81c:	80 93 75 01 	sts	0x0175, r24
     820:	82 e4       	ldi	r24, 0x42	; 66
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	90 93 5c 01 	sts	0x015C, r25
     828:	80 93 5b 01 	sts	0x015B, r24
     82c:	8e e3       	ldi	r24, 0x3E	; 62
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	90 93 5e 01 	sts	0x015E, r25
     834:	80 93 5d 01 	sts	0x015D, r24
     838:	8a e3       	ldi	r24, 0x3A	; 58
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	90 93 70 01 	sts	0x0170, r25
     840:	80 93 6f 01 	sts	0x016F, r24
                        break;
     844:	e7 c0       	rjmp	.+462    	; 0xa14 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     846:	8e e3       	ldi	r24, 0x3E	; 62
     848:	91 e0       	ldi	r25, 0x01	; 1
     84a:	90 93 76 01 	sts	0x0176, r25
     84e:	80 93 75 01 	sts	0x0175, r24
     852:	8a e3       	ldi	r24, 0x3A	; 58
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	90 93 5c 01 	sts	0x015C, r25
     85a:	80 93 5b 01 	sts	0x015B, r24
     85e:	86 e3       	ldi	r24, 0x36	; 54
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	90 93 5e 01 	sts	0x015E, r25
     866:	80 93 5d 01 	sts	0x015D, r24
     86a:	82 e4       	ldi	r24, 0x42	; 66
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	90 93 70 01 	sts	0x0170, r25
     872:	80 93 6f 01 	sts	0x016F, r24
                        break;
     876:	ce c0       	rjmp	.+412    	; 0xa14 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     878:	86 e3       	ldi	r24, 0x36	; 54
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	90 93 76 01 	sts	0x0176, r25
     880:	80 93 75 01 	sts	0x0175, r24
     884:	8a e3       	ldi	r24, 0x3A	; 58
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	90 93 5c 01 	sts	0x015C, r25
     88c:	80 93 5b 01 	sts	0x015B, r24
     890:	8e e3       	ldi	r24, 0x3E	; 62
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	90 93 5e 01 	sts	0x015E, r25
     898:	80 93 5d 01 	sts	0x015D, r24
     89c:	82 e4       	ldi	r24, 0x42	; 66
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	90 93 70 01 	sts	0x0170, r25
     8a4:	80 93 6f 01 	sts	0x016F, r24
                        break;
     8a8:	b5 c0       	rjmp	.+362    	; 0xa14 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     8aa:	82 e4       	ldi	r24, 0x42	; 66
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	90 93 76 01 	sts	0x0176, r25
     8b2:	80 93 75 01 	sts	0x0175, r24
     8b6:	8e e3       	ldi	r24, 0x3E	; 62
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	90 93 5c 01 	sts	0x015C, r25
     8be:	80 93 5b 01 	sts	0x015B, r24
     8c2:	8a e3       	ldi	r24, 0x3A	; 58
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	90 93 5e 01 	sts	0x015E, r25
     8ca:	80 93 5d 01 	sts	0x015D, r24
     8ce:	86 e3       	ldi	r24, 0x36	; 54
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	90 93 70 01 	sts	0x0170, r25
     8d6:	80 93 6f 01 	sts	0x016F, r24
                        flag_no_good_stars = 1;
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	90 93 0d 01 	sts	0x010D, r25
     8e2:	80 93 0c 01 	sts	0x010C, r24
                        break;
     8e6:	9c c0       	rjmp	.+312    	; 0xa20 <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     8e8:	ed 81       	ldd	r30, Y+5	; 0x05
     8ea:	fe 81       	ldd	r31, Y+6	; 0x06
     8ec:	e2 30       	cpi	r30, 0x02	; 2
     8ee:	f1 05       	cpc	r31, r1
     8f0:	39 f1       	breq	.+78     	; 0x940 <localize+0x758>
     8f2:	24 f4       	brge	.+8      	; 0x8fc <localize+0x714>
     8f4:	31 97       	sbiw	r30, 0x01	; 1
     8f6:	09 f0       	breq	.+2      	; 0x8fa <localize+0x712>
     8f8:	6e c0       	rjmp	.+220    	; 0x9d6 <localize+0x7ee>
     8fa:	09 c0       	rjmp	.+18     	; 0x90e <localize+0x726>
     8fc:	8d 81       	ldd	r24, Y+5	; 0x05
     8fe:	9e 81       	ldd	r25, Y+6	; 0x06
     900:	83 30       	cpi	r24, 0x03	; 3
     902:	91 05       	cpc	r25, r1
     904:	b1 f1       	breq	.+108    	; 0x972 <localize+0x78a>
     906:	04 97       	sbiw	r24, 0x04	; 4
     908:	09 f0       	breq	.+2      	; 0x90c <localize+0x724>
     90a:	65 c0       	rjmp	.+202    	; 0x9d6 <localize+0x7ee>
     90c:	4b c0       	rjmp	.+150    	; 0x9a4 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     90e:	8a e3       	ldi	r24, 0x3A	; 58
     910:	91 e0       	ldi	r25, 0x01	; 1
     912:	90 93 76 01 	sts	0x0176, r25
     916:	80 93 75 01 	sts	0x0175, r24
     91a:	82 e4       	ldi	r24, 0x42	; 66
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	90 93 5c 01 	sts	0x015C, r25
     922:	80 93 5b 01 	sts	0x015B, r24
     926:	86 e3       	ldi	r24, 0x36	; 54
     928:	91 e0       	ldi	r25, 0x01	; 1
     92a:	90 93 5e 01 	sts	0x015E, r25
     92e:	80 93 5d 01 	sts	0x015D, r24
     932:	8e e3       	ldi	r24, 0x3E	; 62
     934:	91 e0       	ldi	r25, 0x01	; 1
     936:	90 93 70 01 	sts	0x0170, r25
     93a:	80 93 6f 01 	sts	0x016F, r24
                        break;
     93e:	6a c0       	rjmp	.+212    	; 0xa14 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     940:	86 e3       	ldi	r24, 0x36	; 54
     942:	91 e0       	ldi	r25, 0x01	; 1
     944:	90 93 76 01 	sts	0x0176, r25
     948:	80 93 75 01 	sts	0x0175, r24
     94c:	82 e4       	ldi	r24, 0x42	; 66
     94e:	91 e0       	ldi	r25, 0x01	; 1
     950:	90 93 5c 01 	sts	0x015C, r25
     954:	80 93 5b 01 	sts	0x015B, r24
     958:	8a e3       	ldi	r24, 0x3A	; 58
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	90 93 5e 01 	sts	0x015E, r25
     960:	80 93 5d 01 	sts	0x015D, r24
     964:	8e e3       	ldi	r24, 0x3E	; 62
     966:	91 e0       	ldi	r25, 0x01	; 1
     968:	90 93 70 01 	sts	0x0170, r25
     96c:	80 93 6f 01 	sts	0x016F, r24
                        break;
     970:	51 c0       	rjmp	.+162    	; 0xa14 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     972:	8a e3       	ldi	r24, 0x3A	; 58
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	90 93 76 01 	sts	0x0176, r25
     97a:	80 93 75 01 	sts	0x0175, r24
     97e:	8e e3       	ldi	r24, 0x3E	; 62
     980:	91 e0       	ldi	r25, 0x01	; 1
     982:	90 93 5c 01 	sts	0x015C, r25
     986:	80 93 5b 01 	sts	0x015B, r24
     98a:	86 e3       	ldi	r24, 0x36	; 54
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	90 93 5e 01 	sts	0x015E, r25
     992:	80 93 5d 01 	sts	0x015D, r24
     996:	82 e4       	ldi	r24, 0x42	; 66
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	90 93 70 01 	sts	0x0170, r25
     99e:	80 93 6f 01 	sts	0x016F, r24
                        break;
     9a2:	38 c0       	rjmp	.+112    	; 0xa14 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     9a4:	86 e3       	ldi	r24, 0x36	; 54
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	90 93 76 01 	sts	0x0176, r25
     9ac:	80 93 75 01 	sts	0x0175, r24
     9b0:	8e e3       	ldi	r24, 0x3E	; 62
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	90 93 5c 01 	sts	0x015C, r25
     9b8:	80 93 5b 01 	sts	0x015B, r24
     9bc:	8a e3       	ldi	r24, 0x3A	; 58
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	90 93 5e 01 	sts	0x015E, r25
     9c4:	80 93 5d 01 	sts	0x015D, r24
     9c8:	82 e4       	ldi	r24, 0x42	; 66
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	90 93 70 01 	sts	0x0170, r25
     9d0:	80 93 6f 01 	sts	0x016F, r24
                        break;
     9d4:	1f c0       	rjmp	.+62     	; 0xa14 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     9d6:	82 e4       	ldi	r24, 0x42	; 66
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	90 93 76 01 	sts	0x0176, r25
     9de:	80 93 75 01 	sts	0x0175, r24
     9e2:	8e e3       	ldi	r24, 0x3E	; 62
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	90 93 5c 01 	sts	0x015C, r25
     9ea:	80 93 5b 01 	sts	0x015B, r24
     9ee:	8a e3       	ldi	r24, 0x3A	; 58
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	90 93 5e 01 	sts	0x015E, r25
     9f6:	80 93 5d 01 	sts	0x015D, r24
     9fa:	86 e3       	ldi	r24, 0x36	; 54
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	90 93 70 01 	sts	0x0170, r25
     a02:	80 93 6f 01 	sts	0x016F, r24
                        flag_no_good_stars = 1;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 0d 01 	sts	0x010D, r25
     a0e:	80 93 0c 01 	sts	0x010C, r24
                        break;
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     a14:	80 91 0c 01 	lds	r24, 0x010C
     a18:	90 91 0d 01 	lds	r25, 0x010D
     a1c:	89 2b       	or	r24, r25
     a1e:	d1 f0       	breq	.+52     	; 0xa54 <localize+0x86c>
        *orientation = orientation_prev;
     a20:	80 91 1c 01 	lds	r24, 0x011C
     a24:	90 91 1d 01 	lds	r25, 0x011D
     a28:	ef 8d       	ldd	r30, Y+31	; 0x1f
     a2a:	f8 a1       	ldd	r31, Y+32	; 0x20
     a2c:	91 83       	std	Z+1, r25	; 0x01
     a2e:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     a30:	80 91 1a 01 	lds	r24, 0x011A
     a34:	90 91 1b 01 	lds	r25, 0x011B
     a38:	ef 81       	ldd	r30, Y+7	; 0x07
     a3a:	f8 85       	ldd	r31, Y+8	; 0x08
     a3c:	91 83       	std	Z+1, r25	; 0x01
     a3e:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     a40:	80 91 18 01 	lds	r24, 0x0118
     a44:	90 91 19 01 	lds	r25, 0x0119
     a48:	ed 8d       	ldd	r30, Y+29	; 0x1d
     a4a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     a4c:	91 83       	std	Z+1, r25	; 0x01
     a4e:	80 83       	st	Z, r24
        return 0;
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	ea c3       	rjmp	.+2004   	; 0x1228 <__stack+0x729>
    }
    
    
    float scale = P_vertical/max_distance;
     a54:	26 2d       	mov	r18, r6
     a56:	37 2d       	mov	r19, r7
     a58:	48 2d       	mov	r20, r8
     a5a:	59 2d       	mov	r21, r9
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	88 ee       	ldi	r24, 0xE8	; 232
     a62:	91 e4       	ldi	r25, 0x41	; 65
     a64:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
     a68:	26 2e       	mov	r2, r22
     a6a:	37 2e       	mov	r3, r23
     a6c:	48 2e       	mov	r4, r24
     a6e:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     a70:	e0 90 75 01 	lds	r14, 0x0175
     a74:	f0 90 76 01 	lds	r15, 0x0176
     a78:	0f 2e       	mov	r0, r31
     a7a:	f7 e6       	ldi	r31, 0x67	; 103
     a7c:	8f 2e       	mov	r8, r31
     a7e:	f1 e0       	ldi	r31, 0x01	; 1
     a80:	9f 2e       	mov	r9, r31
     a82:	f0 2d       	mov	r31, r0
     a84:	f7 01       	movw	r30, r14
     a86:	60 81       	ld	r22, Z
     a88:	71 81       	ldd	r23, Z+1	; 0x01
     a8a:	88 27       	eor	r24, r24
     a8c:	77 fd       	sbrc	r23, 7
     a8e:	80 95       	com	r24
     a90:	98 2f       	mov	r25, r24
     a92:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     a96:	22 2d       	mov	r18, r2
     a98:	33 2d       	mov	r19, r3
     a9a:	44 2d       	mov	r20, r4
     a9c:	55 2d       	mov	r21, r5
     a9e:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     aa2:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     aa6:	f4 01       	movw	r30, r8
     aa8:	71 83       	std	Z+1, r23	; 0x01
     aaa:	60 83       	st	Z, r22
     aac:	0f 2e       	mov	r0, r31
     aae:	f9 e6       	ldi	r31, 0x69	; 105
     ab0:	6f 2e       	mov	r6, r31
     ab2:	f1 e0       	ldi	r31, 0x01	; 1
     ab4:	7f 2e       	mov	r7, r31
     ab6:	f0 2d       	mov	r31, r0
     ab8:	f7 01       	movw	r30, r14
     aba:	62 81       	ldd	r22, Z+2	; 0x02
     abc:	73 81       	ldd	r23, Z+3	; 0x03
     abe:	88 27       	eor	r24, r24
     ac0:	77 fd       	sbrc	r23, 7
     ac2:	80 95       	com	r24
     ac4:	98 2f       	mov	r25, r24
     ac6:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     aca:	22 2d       	mov	r18, r2
     acc:	33 2d       	mov	r19, r3
     ace:	44 2d       	mov	r20, r4
     ad0:	55 2d       	mov	r21, r5
     ad2:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     ad6:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     ada:	f3 01       	movw	r30, r6
     adc:	71 83       	std	Z+1, r23	; 0x01
     ade:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     ae0:	00 91 5d 01 	lds	r16, 0x015D
     ae4:	10 91 5e 01 	lds	r17, 0x015E
     ae8:	0f 2e       	mov	r0, r31
     aea:	f7 e5       	ldi	r31, 0x57	; 87
     aec:	af 2e       	mov	r10, r31
     aee:	f1 e0       	ldi	r31, 0x01	; 1
     af0:	bf 2e       	mov	r11, r31
     af2:	f0 2d       	mov	r31, r0
     af4:	f8 01       	movw	r30, r16
     af6:	60 81       	ld	r22, Z
     af8:	71 81       	ldd	r23, Z+1	; 0x01
     afa:	88 27       	eor	r24, r24
     afc:	77 fd       	sbrc	r23, 7
     afe:	80 95       	com	r24
     b00:	98 2f       	mov	r25, r24
     b02:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     b06:	22 2d       	mov	r18, r2
     b08:	33 2d       	mov	r19, r3
     b0a:	44 2d       	mov	r20, r4
     b0c:	55 2d       	mov	r21, r5
     b0e:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     b12:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     b16:	f5 01       	movw	r30, r10
     b18:	71 83       	std	Z+1, r23	; 0x01
     b1a:	60 83       	st	Z, r22
     b1c:	0f 2e       	mov	r0, r31
     b1e:	f9 e5       	ldi	r31, 0x59	; 89
     b20:	cf 2e       	mov	r12, r31
     b22:	f1 e0       	ldi	r31, 0x01	; 1
     b24:	df 2e       	mov	r13, r31
     b26:	f0 2d       	mov	r31, r0
     b28:	f8 01       	movw	r30, r16
     b2a:	62 81       	ldd	r22, Z+2	; 0x02
     b2c:	73 81       	ldd	r23, Z+3	; 0x03
     b2e:	88 27       	eor	r24, r24
     b30:	77 fd       	sbrc	r23, 7
     b32:	80 95       	com	r24
     b34:	98 2f       	mov	r25, r24
     b36:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     b3a:	22 2d       	mov	r18, r2
     b3c:	33 2d       	mov	r19, r3
     b3e:	44 2d       	mov	r20, r4
     b40:	55 2d       	mov	r21, r5
     b42:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     b46:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     b4a:	f6 01       	movw	r30, r12
     b4c:	71 83       	std	Z+1, r23	; 0x01
     b4e:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     b50:	f7 01       	movw	r30, r14
     b52:	60 81       	ld	r22, Z
     b54:	71 81       	ldd	r23, Z+1	; 0x01
     b56:	f8 01       	movw	r30, r16
     b58:	80 81       	ld	r24, Z
     b5a:	91 81       	ldd	r25, Z+1	; 0x01
     b5c:	68 0f       	add	r22, r24
     b5e:	79 1f       	adc	r23, r25
     b60:	88 27       	eor	r24, r24
     b62:	77 fd       	sbrc	r23, 7
     b64:	80 95       	com	r24
     b66:	98 2f       	mov	r25, r24
     b68:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e0       	ldi	r20, 0x00	; 0
     b72:	5f e3       	ldi	r21, 0x3F	; 63
     b74:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     b78:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     b7c:	e9 a1       	ldd	r30, Y+33	; 0x21
     b7e:	fa a1       	ldd	r31, Y+34	; 0x22
     b80:	71 83       	std	Z+1, r23	; 0x01
     b82:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     b84:	a0 91 75 01 	lds	r26, 0x0175
     b88:	b0 91 76 01 	lds	r27, 0x0176
     b8c:	e0 91 5d 01 	lds	r30, 0x015D
     b90:	f0 91 5e 01 	lds	r31, 0x015E
     b94:	12 96       	adiw	r26, 0x02	; 2
     b96:	6d 91       	ld	r22, X+
     b98:	7c 91       	ld	r23, X
     b9a:	13 97       	sbiw	r26, 0x03	; 3
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	68 0f       	add	r22, r24
     ba2:	79 1f       	adc	r23, r25
     ba4:	88 27       	eor	r24, r24
     ba6:	77 fd       	sbrc	r23, 7
     ba8:	80 95       	com	r24
     baa:	98 2f       	mov	r25, r24
     bac:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     bbc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     bc0:	eb a1       	ldd	r30, Y+35	; 0x23
     bc2:	fc a1       	ldd	r31, Y+36	; 0x24
     bc4:	71 83       	std	Z+1, r23	; 0x01
     bc6:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     bc8:	f4 01       	movw	r30, r8
     bca:	60 81       	ld	r22, Z
     bcc:	71 81       	ldd	r23, Z+1	; 0x01
     bce:	f5 01       	movw	r30, r10
     bd0:	80 81       	ld	r24, Z
     bd2:	91 81       	ldd	r25, Z+1	; 0x01
     bd4:	68 0f       	add	r22, r24
     bd6:	79 1f       	adc	r23, r25
     bd8:	88 27       	eor	r24, r24
     bda:	77 fd       	sbrc	r23, 7
     bdc:	80 95       	com	r24
     bde:	98 2f       	mov	r25, r24
     be0:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e0       	ldi	r20, 0x00	; 0
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     bf0:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     bf4:	1b 01       	movw	r2, r22
     bf6:	70 93 7c 01 	sts	0x017C, r23
     bfa:	60 93 7b 01 	sts	0x017B, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     bfe:	f3 01       	movw	r30, r6
     c00:	60 81       	ld	r22, Z
     c02:	71 81       	ldd	r23, Z+1	; 0x01
     c04:	f6 01       	movw	r30, r12
     c06:	80 81       	ld	r24, Z
     c08:	91 81       	ldd	r25, Z+1	; 0x01
     c0a:	68 0f       	add	r22, r24
     c0c:	79 1f       	adc	r23, r25
     c0e:	88 27       	eor	r24, r24
     c10:	77 fd       	sbrc	r23, 7
     c12:	80 95       	com	r24
     c14:	98 2f       	mov	r25, r24
     c16:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	40 e0       	ldi	r20, 0x00	; 0
     c20:	5f e3       	ldi	r21, 0x3F	; 63
     c22:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     c26:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     c2a:	8b 01       	movw	r16, r22
     c2c:	70 93 7e 01 	sts	0x017E, r23
     c30:	60 93 7d 01 	sts	0x017D, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     c34:	22 9c       	mul	r2, r2
     c36:	b0 01       	movw	r22, r0
     c38:	23 9c       	mul	r2, r3
     c3a:	70 0d       	add	r23, r0
     c3c:	70 0d       	add	r23, r0
     c3e:	11 24       	eor	r1, r1
     c40:	00 9f       	mul	r16, r16
     c42:	c0 01       	movw	r24, r0
     c44:	01 9f       	mul	r16, r17
     c46:	90 0d       	add	r25, r0
     c48:	90 0d       	add	r25, r0
     c4a:	11 24       	eor	r1, r1
     c4c:	68 0f       	add	r22, r24
     c4e:	79 1f       	adc	r23, r25
     c50:	88 27       	eor	r24, r24
     c52:	77 fd       	sbrc	r23, 7
     c54:	80 95       	com	r24
     c56:	98 2f       	mov	r25, r24
     c58:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     c5c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
     c60:	2b 01       	movw	r4, r22
     c62:	3c 01       	movw	r6, r24
     c64:	60 93 5f 01 	sts	0x015F, r22
     c68:	70 93 60 01 	sts	0x0160, r23
     c6c:	80 93 61 01 	sts	0x0161, r24
     c70:	90 93 62 01 	sts	0x0162, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     c74:	80 91 5d 01 	lds	r24, 0x015D
     c78:	90 91 5e 01 	lds	r25, 0x015E
     c7c:	9a 83       	std	Y+2, r25	; 0x02
     c7e:	89 83       	std	Y+1, r24	; 0x01
     c80:	e0 91 75 01 	lds	r30, 0x0175
     c84:	f0 91 76 01 	lds	r31, 0x0176
     c88:	fe 83       	std	Y+6, r31	; 0x06
     c8a:	ed 83       	std	Y+5, r30	; 0x05
     c8c:	fc 01       	movw	r30, r24
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	ed 81       	ldd	r30, Y+5	; 0x05
     c94:	fe 81       	ldd	r31, Y+6	; 0x06
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	68 1b       	sub	r22, r24
     c9c:	79 0b       	sbc	r23, r25
     c9e:	88 27       	eor	r24, r24
     ca0:	77 fd       	sbrc	r23, 7
     ca2:	80 95       	com	r24
     ca4:	98 2f       	mov	r25, r24
     ca6:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     caa:	6b 01       	movw	r12, r22
     cac:	7c 01       	movw	r14, r24
     cae:	e9 81       	ldd	r30, Y+1	; 0x01
     cb0:	fa 81       	ldd	r31, Y+2	; 0x02
     cb2:	62 81       	ldd	r22, Z+2	; 0x02
     cb4:	73 81       	ldd	r23, Z+3	; 0x03
     cb6:	ed 81       	ldd	r30, Y+5	; 0x05
     cb8:	fe 81       	ldd	r31, Y+6	; 0x06
     cba:	82 81       	ldd	r24, Z+2	; 0x02
     cbc:	93 81       	ldd	r25, Z+3	; 0x03
     cbe:	68 1b       	sub	r22, r24
     cc0:	79 0b       	sbc	r23, r25
     cc2:	88 27       	eor	r24, r24
     cc4:	77 fd       	sbrc	r23, 7
     cc6:	80 95       	com	r24
     cc8:	98 2f       	mov	r25, r24
     cca:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     cce:	a7 01       	movw	r20, r14
     cd0:	96 01       	movw	r18, r12
     cd2:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
     cd6:	4b 01       	movw	r8, r22
     cd8:	5c 01       	movw	r10, r24
     cda:	60 93 6b 01 	sts	0x016B, r22
     cde:	70 93 6c 01 	sts	0x016C, r23
     ce2:	80 93 6d 01 	sts	0x016D, r24
     ce6:	90 93 6e 01 	sts	0x016E, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     cea:	ed 81       	ldd	r30, Y+5	; 0x05
     cec:	fe 81       	ldd	r31, Y+6	; 0x06
     cee:	60 81       	ld	r22, Z
     cf0:	71 81       	ldd	r23, Z+1	; 0x01
     cf2:	e9 81       	ldd	r30, Y+1	; 0x01
     cf4:	fa 81       	ldd	r31, Y+2	; 0x02
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	68 1b       	sub	r22, r24
     cfc:	79 0b       	sbc	r23, r25
     cfe:	88 27       	eor	r24, r24
     d00:	77 fd       	sbrc	r23, 7
     d02:	80 95       	com	r24
     d04:	98 2f       	mov	r25, r24
     d06:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     d0a:	6b 01       	movw	r12, r22
     d0c:	7c 01       	movw	r14, r24
     d0e:	ed 81       	ldd	r30, Y+5	; 0x05
     d10:	fe 81       	ldd	r31, Y+6	; 0x06
     d12:	62 81       	ldd	r22, Z+2	; 0x02
     d14:	73 81       	ldd	r23, Z+3	; 0x03
     d16:	e9 81       	ldd	r30, Y+1	; 0x01
     d18:	fa 81       	ldd	r31, Y+2	; 0x02
     d1a:	82 81       	ldd	r24, Z+2	; 0x02
     d1c:	93 81       	ldd	r25, Z+3	; 0x03
     d1e:	68 1b       	sub	r22, r24
     d20:	79 0b       	sbc	r23, r25
     d22:	88 27       	eor	r24, r24
     d24:	77 fd       	sbrc	r23, 7
     d26:	80 95       	com	r24
     d28:	98 2f       	mov	r25, r24
     d2a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     d2e:	a7 01       	movw	r20, r14
     d30:	96 01       	movw	r18, r12
     d32:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
     d36:	6b 01       	movw	r12, r22
     d38:	7c 01       	movw	r14, r24
     d3a:	60 93 63 01 	sts	0x0163, r22
     d3e:	70 93 64 01 	sts	0x0164, r23
     d42:	80 93 65 01 	sts	0x0165, r24
     d46:	90 93 66 01 	sts	0x0166, r25
    alpha = -atan2(S0[0],S0[1]);
     d4a:	b8 01       	movw	r22, r16
     d4c:	88 27       	eor	r24, r24
     d4e:	77 fd       	sbrc	r23, 7
     d50:	80 95       	com	r24
     d52:	98 2f       	mov	r25, r24
     d54:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     d58:	69 83       	std	Y+1, r22	; 0x01
     d5a:	7a 83       	std	Y+2, r23	; 0x02
     d5c:	8b 83       	std	Y+3, r24	; 0x03
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	b1 01       	movw	r22, r2
     d62:	88 27       	eor	r24, r24
     d64:	77 fd       	sbrc	r23, 7
     d66:	80 95       	com	r24
     d68:	98 2f       	mov	r25, r24
     d6a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     d6e:	29 81       	ldd	r18, Y+1	; 0x01
     d70:	3a 81       	ldd	r19, Y+2	; 0x02
     d72:	4b 81       	ldd	r20, Y+3	; 0x03
     d74:	5c 81       	ldd	r21, Y+4	; 0x04
     d76:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
     d7a:	9b 01       	movw	r18, r22
     d7c:	ac 01       	movw	r20, r24
     d7e:	dc 01       	movw	r26, r24
     d80:	cb 01       	movw	r24, r22
     d82:	b0 58       	subi	r27, 0x80	; 128
     d84:	80 93 7f 01 	sts	0x017F, r24
     d88:	90 93 80 01 	sts	0x0180, r25
     d8c:	a0 93 81 01 	sts	0x0181, r26
     d90:	b0 93 82 01 	sts	0x0182, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
     d94:	77 fa       	bst	r7, 7
     d96:	70 94       	com	r7
     d98:	77 f8       	bld	r7, 7
     d9a:	70 94       	com	r7
     d9c:	c5 01       	movw	r24, r10
     d9e:	b4 01       	movw	r22, r8
     da0:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
     da4:	86 2e       	mov	r8, r22
     da6:	97 2e       	mov	r9, r23
     da8:	a8 2e       	mov	r10, r24
     daa:	b9 2e       	mov	r11, r25
     dac:	0e 94 86 1a 	call	0x350c	; 0x350c <cos>
     db0:	9b 01       	movw	r18, r22
     db2:	ac 01       	movw	r20, r24
     db4:	c3 01       	movw	r24, r6
     db6:	b2 01       	movw	r22, r4
     db8:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	40 e0       	ldi	r20, 0x00	; 0
     dc2:	51 e4       	ldi	r21, 0x41	; 65
     dc4:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
     dc8:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     dcc:	8b 01       	movw	r16, r22
     dce:	70 93 15 01 	sts	0x0115, r23
     dd2:	60 93 14 01 	sts	0x0114, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
     dd6:	68 2d       	mov	r22, r8
     dd8:	79 2d       	mov	r23, r9
     dda:	8a 2d       	mov	r24, r10
     ddc:	9b 2d       	mov	r25, r11
     dde:	0e 94 a0 1c 	call	0x3940	; 0x3940 <sin>
     de2:	9b 01       	movw	r18, r22
     de4:	ac 01       	movw	r20, r24
     de6:	c3 01       	movw	r24, r6
     de8:	b2 01       	movw	r22, r4
     dea:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     dee:	20 e0       	ldi	r18, 0x00	; 0
     df0:	30 e0       	ldi	r19, 0x00	; 0
     df2:	40 ee       	ldi	r20, 0xE0	; 224
     df4:	50 e4       	ldi	r21, 0x40	; 64
     df6:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
     dfa:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     dfe:	70 93 13 01 	sts	0x0113, r23
     e02:	60 93 12 01 	sts	0x0112, r22
    orientation_current = (theta2) * 180/M_PI;
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	44 e3       	ldi	r20, 0x34	; 52
     e0c:	53 e4       	ldi	r21, 0x43	; 67
     e0e:	c7 01       	movw	r24, r14
     e10:	b6 01       	movw	r22, r12
     e12:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     e16:	2b ed       	ldi	r18, 0xDB	; 219
     e18:	3f e0       	ldi	r19, 0x0F	; 15
     e1a:	49 e4       	ldi	r20, 0x49	; 73
     e1c:	50 e4       	ldi	r21, 0x40	; 64
     e1e:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
     e22:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     e26:	70 93 17 01 	sts	0x0117, r23
     e2a:	60 93 16 01 	sts	0x0116, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
     e2e:	c0 90 0e 01 	lds	r12, 0x010E
     e32:	d0 90 0f 01 	lds	r13, 0x010F
     e36:	e0 90 10 01 	lds	r14, 0x0110
     e3a:	f0 90 11 01 	lds	r15, 0x0111
     e3e:	60 91 1a 01 	lds	r22, 0x011A
     e42:	70 91 1b 01 	lds	r23, 0x011B
     e46:	88 27       	eor	r24, r24
     e48:	77 fd       	sbrc	r23, 7
     e4a:	80 95       	com	r24
     e4c:	98 2f       	mov	r25, r24
     e4e:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     e52:	a7 01       	movw	r20, r14
     e54:	96 01       	movw	r18, r12
     e56:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     e5a:	4b 01       	movw	r8, r22
     e5c:	5c 01       	movw	r10, r24
     e5e:	a7 01       	movw	r20, r14
     e60:	96 01       	movw	r18, r12
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	80 e8       	ldi	r24, 0x80	; 128
     e68:	9f e3       	ldi	r25, 0x3F	; 63
     e6a:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
     e6e:	6b 01       	movw	r12, r22
     e70:	7c 01       	movw	r14, r24
     e72:	b8 01       	movw	r22, r16
     e74:	88 27       	eor	r24, r24
     e76:	77 fd       	sbrc	r23, 7
     e78:	80 95       	com	r24
     e7a:	98 2f       	mov	r25, r24
     e7c:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     e80:	9b 01       	movw	r18, r22
     e82:	ac 01       	movw	r20, r24
     e84:	c7 01       	movw	r24, r14
     e86:	b6 01       	movw	r22, r12
     e88:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     e8c:	9b 01       	movw	r18, r22
     e8e:	ac 01       	movw	r20, r24
     e90:	c5 01       	movw	r24, r10
     e92:	b4 01       	movw	r22, r8
     e94:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
     e98:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     e9c:	ef 81       	ldd	r30, Y+7	; 0x07
     e9e:	f8 85       	ldd	r31, Y+8	; 0x08
     ea0:	71 83       	std	Z+1, r23	; 0x01
     ea2:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
     ea4:	c0 90 0e 01 	lds	r12, 0x010E
     ea8:	d0 90 0f 01 	lds	r13, 0x010F
     eac:	e0 90 10 01 	lds	r14, 0x0110
     eb0:	f0 90 11 01 	lds	r15, 0x0111
     eb4:	60 91 18 01 	lds	r22, 0x0118
     eb8:	70 91 19 01 	lds	r23, 0x0119
     ebc:	88 27       	eor	r24, r24
     ebe:	77 fd       	sbrc	r23, 7
     ec0:	80 95       	com	r24
     ec2:	98 2f       	mov	r25, r24
     ec4:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     ec8:	a7 01       	movw	r20, r14
     eca:	96 01       	movw	r18, r12
     ecc:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     ed0:	4b 01       	movw	r8, r22
     ed2:	5c 01       	movw	r10, r24
     ed4:	a7 01       	movw	r20, r14
     ed6:	96 01       	movw	r18, r12
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	80 e8       	ldi	r24, 0x80	; 128
     ede:	9f e3       	ldi	r25, 0x3F	; 63
     ee0:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
     ee4:	6b 01       	movw	r12, r22
     ee6:	7c 01       	movw	r14, r24
     ee8:	60 91 12 01 	lds	r22, 0x0112
     eec:	70 91 13 01 	lds	r23, 0x0113
     ef0:	88 27       	eor	r24, r24
     ef2:	77 fd       	sbrc	r23, 7
     ef4:	80 95       	com	r24
     ef6:	98 2f       	mov	r25, r24
     ef8:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     efc:	9b 01       	movw	r18, r22
     efe:	ac 01       	movw	r20, r24
     f00:	c7 01       	movw	r24, r14
     f02:	b6 01       	movw	r22, r12
     f04:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f08:	9b 01       	movw	r18, r22
     f0a:	ac 01       	movw	r20, r24
     f0c:	c5 01       	movw	r24, r10
     f0e:	b4 01       	movw	r22, r8
     f10:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
     f14:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     f18:	ed 8d       	ldd	r30, Y+29	; 0x1d
     f1a:	fe 8d       	ldd	r31, Y+30	; 0x1e
     f1c:	71 83       	std	Z+1, r23	; 0x01
     f1e:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
     f20:	c0 90 0e 01 	lds	r12, 0x010E
     f24:	d0 90 0f 01 	lds	r13, 0x010F
     f28:	e0 90 10 01 	lds	r14, 0x0110
     f2c:	f0 90 11 01 	lds	r15, 0x0111
     f30:	60 91 1c 01 	lds	r22, 0x011C
     f34:	70 91 1d 01 	lds	r23, 0x011D
     f38:	88 27       	eor	r24, r24
     f3a:	77 fd       	sbrc	r23, 7
     f3c:	80 95       	com	r24
     f3e:	98 2f       	mov	r25, r24
     f40:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     f44:	a7 01       	movw	r20, r14
     f46:	96 01       	movw	r18, r12
     f48:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f4c:	4b 01       	movw	r8, r22
     f4e:	5c 01       	movw	r10, r24
     f50:	a7 01       	movw	r20, r14
     f52:	96 01       	movw	r18, r12
     f54:	60 e0       	ldi	r22, 0x00	; 0
     f56:	70 e0       	ldi	r23, 0x00	; 0
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	9f e3       	ldi	r25, 0x3F	; 63
     f5c:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
     f60:	6b 01       	movw	r12, r22
     f62:	7c 01       	movw	r14, r24
     f64:	60 91 16 01 	lds	r22, 0x0116
     f68:	70 91 17 01 	lds	r23, 0x0117
     f6c:	88 27       	eor	r24, r24
     f6e:	77 fd       	sbrc	r23, 7
     f70:	80 95       	com	r24
     f72:	98 2f       	mov	r25, r24
     f74:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
     f78:	9b 01       	movw	r18, r22
     f7a:	ac 01       	movw	r20, r24
     f7c:	c7 01       	movw	r24, r14
     f7e:	b6 01       	movw	r22, r12
     f80:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
     f84:	9b 01       	movw	r18, r22
     f86:	ac 01       	movw	r20, r24
     f88:	c5 01       	movw	r24, r10
     f8a:	b4 01       	movw	r22, r8
     f8c:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
     f90:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
     f94:	ef 8d       	ldd	r30, Y+31	; 0x1f
     f96:	f8 a1       	ldd	r31, Y+32	; 0x20
     f98:	71 83       	std	Z+1, r23	; 0x01
     f9a:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
     f9c:	ef 81       	ldd	r30, Y+7	; 0x07
     f9e:	f8 85       	ldd	r31, Y+8	; 0x08
     fa0:	80 81       	ld	r24, Z
     fa2:	91 81       	ldd	r25, Z+1	; 0x01
     fa4:	90 93 1b 01 	sts	0x011B, r25
     fa8:	80 93 1a 01 	sts	0x011A, r24
    y_robot_prev     = *y_robot;
     fac:	ed 8d       	ldd	r30, Y+29	; 0x1d
     fae:	fe 8d       	ldd	r31, Y+30	; 0x1e
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	90 93 19 01 	sts	0x0119, r25
     fb8:	80 93 18 01 	sts	0x0118, r24
    orientation_prev = *orientation;
     fbc:	ef 8d       	ldd	r30, Y+31	; 0x1f
     fbe:	f8 a1       	ldd	r31, Y+32	; 0x20
     fc0:	80 81       	ld	r24, Z
     fc2:	91 81       	ldd	r25, Z+1	; 0x01
     fc4:	90 93 1d 01 	sts	0x011D, r25
     fc8:	80 93 1c 01 	sts	0x011C, r24
    
    return 1;
     fcc:	81 e0       	ldi	r24, 0x01	; 1
     fce:	2c c1       	rjmp	.+600    	; 0x1228 <__stack+0x729>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
     fd0:	e0 91 02 01 	lds	r30, 0x0102
     fd4:	f0 91 03 01 	lds	r31, 0x0103
     fd8:	4c 01       	movw	r8, r24
     fda:	8e 1a       	sub	r8, r30
     fdc:	9f 0a       	sbc	r9, r31
     fde:	90 92 43 01 	sts	0x0143, r9
     fe2:	80 92 42 01 	sts	0x0142, r8
     fe6:	80 91 00 01 	lds	r24, 0x0100
     fea:	90 91 01 01 	lds	r25, 0x0101
     fee:	08 1b       	sub	r16, r24
     ff0:	19 0b       	sbc	r17, r25
     ff2:	10 93 45 01 	sts	0x0145, r17
     ff6:	00 93 44 01 	sts	0x0144, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
     ffa:	3b 01       	movw	r6, r22
     ffc:	6e 1a       	sub	r6, r30
     ffe:	7f 0a       	sbc	r7, r31
    1000:	70 92 3f 01 	sts	0x013F, r7
    1004:	60 92 3e 01 	sts	0x013E, r6
    1008:	e8 1a       	sub	r14, r24
    100a:	f9 0a       	sbc	r15, r25
    100c:	f0 92 41 01 	sts	0x0141, r15
    1010:	e0 92 40 01 	sts	0x0140, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    1014:	2a 01       	movw	r4, r20
    1016:	4e 1a       	sub	r4, r30
    1018:	5f 0a       	sbc	r5, r31
    101a:	50 92 3b 01 	sts	0x013B, r5
    101e:	40 92 3a 01 	sts	0x013A, r4
    1022:	16 01       	movw	r2, r12
    1024:	28 1a       	sub	r2, r24
    1026:	39 0a       	sbc	r3, r25
    1028:	30 92 3d 01 	sts	0x013D, r3
    102c:	20 92 3c 01 	sts	0x013C, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    1030:	69 01       	movw	r12, r18
    1032:	ce 1a       	sub	r12, r30
    1034:	df 0a       	sbc	r13, r31
    1036:	d0 92 37 01 	sts	0x0137, r13
    103a:	c0 92 36 01 	sts	0x0136, r12
    103e:	a8 1a       	sub	r10, r24
    1040:	b9 0a       	sbc	r11, r25
    1042:	b0 92 39 01 	sts	0x0139, r11
    1046:	a0 92 38 01 	sts	0x0138, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    104a:	93 01       	movw	r18, r6
    104c:	28 19       	sub	r18, r8
    104e:	39 09       	sbc	r19, r9
    1050:	c7 01       	movw	r24, r14
    1052:	80 1b       	sub	r24, r16
    1054:	91 0b       	sbc	r25, r17
    1056:	22 9f       	mul	r18, r18
    1058:	b0 01       	movw	r22, r0
    105a:	23 9f       	mul	r18, r19
    105c:	70 0d       	add	r23, r0
    105e:	70 0d       	add	r23, r0
    1060:	11 24       	eor	r1, r1
    1062:	88 9f       	mul	r24, r24
    1064:	90 01       	movw	r18, r0
    1066:	89 9f       	mul	r24, r25
    1068:	30 0d       	add	r19, r0
    106a:	30 0d       	add	r19, r0
    106c:	11 24       	eor	r1, r1
    106e:	62 0f       	add	r22, r18
    1070:	73 1f       	adc	r23, r19
    1072:	88 27       	eor	r24, r24
    1074:	77 fd       	sbrc	r23, 7
    1076:	80 95       	com	r24
    1078:	98 2f       	mov	r25, r24
    107a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    107e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    1082:	60 93 1e 01 	sts	0x011E, r22
    1086:	70 93 1f 01 	sts	0x011F, r23
    108a:	80 93 20 01 	sts	0x0120, r24
    108e:	90 93 21 01 	sts	0x0121, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    1092:	92 01       	movw	r18, r4
    1094:	28 19       	sub	r18, r8
    1096:	39 09       	sbc	r19, r9
    1098:	c1 01       	movw	r24, r2
    109a:	80 1b       	sub	r24, r16
    109c:	91 0b       	sbc	r25, r17
    109e:	22 9f       	mul	r18, r18
    10a0:	b0 01       	movw	r22, r0
    10a2:	23 9f       	mul	r18, r19
    10a4:	70 0d       	add	r23, r0
    10a6:	70 0d       	add	r23, r0
    10a8:	11 24       	eor	r1, r1
    10aa:	88 9f       	mul	r24, r24
    10ac:	90 01       	movw	r18, r0
    10ae:	89 9f       	mul	r24, r25
    10b0:	30 0d       	add	r19, r0
    10b2:	30 0d       	add	r19, r0
    10b4:	11 24       	eor	r1, r1
    10b6:	62 0f       	add	r22, r18
    10b8:	73 1f       	adc	r23, r19
    10ba:	88 27       	eor	r24, r24
    10bc:	77 fd       	sbrc	r23, 7
    10be:	80 95       	com	r24
    10c0:	98 2f       	mov	r25, r24
    10c2:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    10c6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    10ca:	60 93 22 01 	sts	0x0122, r22
    10ce:	70 93 23 01 	sts	0x0123, r23
    10d2:	80 93 24 01 	sts	0x0124, r24
    10d6:	90 93 25 01 	sts	0x0125, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    10da:	96 01       	movw	r18, r12
    10dc:	28 19       	sub	r18, r8
    10de:	39 09       	sbc	r19, r9
    10e0:	c5 01       	movw	r24, r10
    10e2:	80 1b       	sub	r24, r16
    10e4:	91 0b       	sbc	r25, r17
    10e6:	22 9f       	mul	r18, r18
    10e8:	b0 01       	movw	r22, r0
    10ea:	23 9f       	mul	r18, r19
    10ec:	70 0d       	add	r23, r0
    10ee:	70 0d       	add	r23, r0
    10f0:	11 24       	eor	r1, r1
    10f2:	88 9f       	mul	r24, r24
    10f4:	90 01       	movw	r18, r0
    10f6:	89 9f       	mul	r24, r25
    10f8:	30 0d       	add	r19, r0
    10fa:	30 0d       	add	r19, r0
    10fc:	11 24       	eor	r1, r1
    10fe:	62 0f       	add	r22, r18
    1100:	73 1f       	adc	r23, r19
    1102:	88 27       	eor	r24, r24
    1104:	77 fd       	sbrc	r23, 7
    1106:	80 95       	com	r24
    1108:	98 2f       	mov	r25, r24
    110a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    110e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    1112:	60 93 26 01 	sts	0x0126, r22
    1116:	70 93 27 01 	sts	0x0127, r23
    111a:	80 93 28 01 	sts	0x0128, r24
    111e:	90 93 29 01 	sts	0x0129, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    1122:	92 01       	movw	r18, r4
    1124:	26 19       	sub	r18, r6
    1126:	37 09       	sbc	r19, r7
    1128:	c1 01       	movw	r24, r2
    112a:	8e 19       	sub	r24, r14
    112c:	9f 09       	sbc	r25, r15
    112e:	22 9f       	mul	r18, r18
    1130:	b0 01       	movw	r22, r0
    1132:	23 9f       	mul	r18, r19
    1134:	70 0d       	add	r23, r0
    1136:	70 0d       	add	r23, r0
    1138:	11 24       	eor	r1, r1
    113a:	88 9f       	mul	r24, r24
    113c:	90 01       	movw	r18, r0
    113e:	89 9f       	mul	r24, r25
    1140:	30 0d       	add	r19, r0
    1142:	30 0d       	add	r19, r0
    1144:	11 24       	eor	r1, r1
    1146:	62 0f       	add	r22, r18
    1148:	73 1f       	adc	r23, r19
    114a:	88 27       	eor	r24, r24
    114c:	77 fd       	sbrc	r23, 7
    114e:	80 95       	com	r24
    1150:	98 2f       	mov	r25, r24
    1152:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    1156:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    115a:	60 93 2a 01 	sts	0x012A, r22
    115e:	70 93 2b 01 	sts	0x012B, r23
    1162:	80 93 2c 01 	sts	0x012C, r24
    1166:	90 93 2d 01 	sts	0x012D, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    116a:	96 01       	movw	r18, r12
    116c:	26 19       	sub	r18, r6
    116e:	37 09       	sbc	r19, r7
    1170:	c5 01       	movw	r24, r10
    1172:	8e 19       	sub	r24, r14
    1174:	9f 09       	sbc	r25, r15
    1176:	22 9f       	mul	r18, r18
    1178:	b0 01       	movw	r22, r0
    117a:	23 9f       	mul	r18, r19
    117c:	70 0d       	add	r23, r0
    117e:	70 0d       	add	r23, r0
    1180:	11 24       	eor	r1, r1
    1182:	88 9f       	mul	r24, r24
    1184:	90 01       	movw	r18, r0
    1186:	89 9f       	mul	r24, r25
    1188:	30 0d       	add	r19, r0
    118a:	30 0d       	add	r19, r0
    118c:	11 24       	eor	r1, r1
    118e:	62 0f       	add	r22, r18
    1190:	73 1f       	adc	r23, r19
    1192:	88 27       	eor	r24, r24
    1194:	77 fd       	sbrc	r23, 7
    1196:	80 95       	com	r24
    1198:	98 2f       	mov	r25, r24
    119a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    119e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    11a2:	60 93 2e 01 	sts	0x012E, r22
    11a6:	70 93 2f 01 	sts	0x012F, r23
    11aa:	80 93 30 01 	sts	0x0130, r24
    11ae:	90 93 31 01 	sts	0x0131, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    11b2:	c4 18       	sub	r12, r4
    11b4:	d5 08       	sbc	r13, r5
    11b6:	a2 18       	sub	r10, r2
    11b8:	b3 08       	sbc	r11, r3
    11ba:	cc 9c       	mul	r12, r12
    11bc:	b0 01       	movw	r22, r0
    11be:	cd 9c       	mul	r12, r13
    11c0:	70 0d       	add	r23, r0
    11c2:	70 0d       	add	r23, r0
    11c4:	11 24       	eor	r1, r1
    11c6:	aa 9c       	mul	r10, r10
    11c8:	c0 01       	movw	r24, r0
    11ca:	ab 9c       	mul	r10, r11
    11cc:	90 0d       	add	r25, r0
    11ce:	90 0d       	add	r25, r0
    11d0:	11 24       	eor	r1, r1
    11d2:	68 0f       	add	r22, r24
    11d4:	79 1f       	adc	r23, r25
    11d6:	88 27       	eor	r24, r24
    11d8:	77 fd       	sbrc	r23, 7
    11da:	80 95       	com	r24
    11dc:	98 2f       	mov	r25, r24
    11de:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    11e2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    11e6:	60 93 32 01 	sts	0x0132, r22
    11ea:	70 93 33 01 	sts	0x0133, r23
    11ee:	80 93 34 01 	sts	0x0134, r24
    11f2:	90 93 35 01 	sts	0x0135, r25
    11f6:	0e e1       	ldi	r16, 0x1E	; 30
    11f8:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    11fa:	e1 2c       	mov	r14, r1
    11fc:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    11fe:	1e 82       	std	Y+6, r1	; 0x06
    1200:	1d 82       	std	Y+5, r1	; 0x05
    1202:	1a 82       	std	Y+2, r1	; 0x02
    1204:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    1206:	21 2c       	mov	r2, r1
    1208:	68 94       	set
    120a:	33 24       	eor	r3, r3
    120c:	36 f8       	bld	r3, 6
    120e:	0f 2e       	mov	r0, r31
    1210:	fc e1       	ldi	r31, 0x1C	; 28
    1212:	4f 2e       	mov	r4, r31
    1214:	f0 2d       	mov	r31, r0
    1216:	0f 2e       	mov	r0, r31
    1218:	f6 e4       	ldi	r31, 0x46	; 70
    121a:	5f 2e       	mov	r5, r31
    121c:	f0 2d       	mov	r31, r0
    121e:	61 2c       	mov	r6, r1
    1220:	71 2c       	mov	r7, r1
    1222:	81 2c       	mov	r8, r1
    1224:	91 2c       	mov	r9, r1
    1226:	2b c8       	rjmp	.-4010   	; 0x27e <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    1228:	28 96       	adiw	r28, 0x08	; 8
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	7f 90       	pop	r7
    124e:	6f 90       	pop	r6
    1250:	5f 90       	pop	r5
    1252:	4f 90       	pop	r4
    1254:	3f 90       	pop	r3
    1256:	2f 90       	pop	r2
    1258:	08 95       	ret

0000125a <set_timer1>:
}

void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    125a:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    125c:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    125e:	88 e8       	ldi	r24, 0x88	; 136
    1260:	93 e1       	ldi	r25, 0x13	; 19
    1262:	90 93 89 00 	sts	0x0089, r25
    1266:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
    126a:	10 92 8b 00 	sts	0x008B, r1
    126e:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    1272:	10 92 8d 00 	sts	0x008D, r1
    1276:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    127a:	a1 e8       	ldi	r26, 0x81	; 129
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	8c 91       	ld	r24, X
    1280:	80 61       	ori	r24, 0x10	; 16
    1282:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    1284:	8c 91       	ld	r24, X
    1286:	88 60       	ori	r24, 0x08	; 8
    1288:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    128a:	e0 e8       	ldi	r30, 0x80	; 128
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	82 60       	ori	r24, 0x02	; 2
    1292:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    1294:	80 81       	ld	r24, Z
    1296:	81 60       	ori	r24, 0x01	; 1
    1298:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    129a:	80 81       	ld	r24, Z
    129c:	80 62       	ori	r24, 0x20	; 32
    129e:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    12a0:	80 81       	ld	r24, Z
    12a2:	8f 7e       	andi	r24, 0xEF	; 239
    12a4:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    12a6:	80 81       	ld	r24, Z
    12a8:	88 60       	ori	r24, 0x08	; 8
    12aa:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    12ac:	80 81       	ld	r24, Z
    12ae:	8b 7f       	andi	r24, 0xFB	; 251
    12b0:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    12b2:	8c 91       	ld	r24, X
    12b4:	8b 7f       	andi	r24, 0xFB	; 251
    12b6:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    12b8:	8c 91       	ld	r24, X
    12ba:	8d 7f       	andi	r24, 0xFD	; 253
    12bc:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    12be:	8c 91       	ld	r24, X
    12c0:	81 60       	ori	r24, 0x01	; 1
    12c2:	8c 93       	st	X, r24
    12c4:	08 95       	ret

000012c6 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
    12c6:	83 ec       	ldi	r24, 0xC3	; 195
    12c8:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    12cc:	e3 ec       	ldi	r30, 0xC3	; 195
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	8d 7f       	andi	r24, 0xFD	; 253
    12d4:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    12d6:	80 81       	ld	r24, Z
    12d8:	8e 7f       	andi	r24, 0xFE	; 254
    12da:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    12dc:	e2 e7       	ldi	r30, 0x72	; 114
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	84 60       	ori	r24, 0x04	; 4
    12e4:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
    12e6:	e1 ec       	ldi	r30, 0xC1	; 193
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	80 81       	ld	r24, Z
    12ec:	88 60       	ori	r24, 0x08	; 8
    12ee:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
    12f0:	80 81       	ld	r24, Z
    12f2:	84 60       	ori	r24, 0x04	; 4
    12f4:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    12f6:	80 81       	ld	r24, Z
    12f8:	8d 7f       	andi	r24, 0xFD	; 253
    12fa:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    12fc:	80 81       	ld	r24, Z
    12fe:	81 60       	ori	r24, 0x01	; 1
    1300:	80 83       	st	Z, r24
    1302:	08 95       	ret

00001304 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    1304:	ec e7       	ldi	r30, 0x7C	; 124
    1306:	f0 e0       	ldi	r31, 0x00	; 0
    1308:	80 81       	ld	r24, Z
    130a:	8f 77       	andi	r24, 0x7F	; 127
    130c:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    130e:	80 81       	ld	r24, Z
    1310:	80 64       	ori	r24, 0x40	; 64
    1312:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    1314:	aa e7       	ldi	r26, 0x7A	; 122
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	8c 91       	ld	r24, X
    131a:	84 60       	ori	r24, 0x04	; 4
    131c:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    131e:	8c 91       	ld	r24, X
    1320:	82 60       	ori	r24, 0x02	; 2
    1322:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    1324:	8c 91       	ld	r24, X
    1326:	81 60       	ori	r24, 0x01	; 1
    1328:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    132a:	ee e7       	ldi	r30, 0x7E	; 126
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	81 60       	ori	r24, 0x01	; 1
    1332:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    1334:	80 81       	ld	r24, Z
    1336:	82 60       	ori	r24, 0x02	; 2
    1338:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    133a:	80 81       	ld	r24, Z
    133c:	80 61       	ori	r24, 0x10	; 16
    133e:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    1340:	80 81       	ld	r24, Z
    1342:	80 62       	ori	r24, 0x20	; 32
    1344:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    1346:	80 81       	ld	r24, Z
    1348:	80 64       	ori	r24, 0x40	; 64
    134a:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    134c:	80 81       	ld	r24, Z
    134e:	80 68       	ori	r24, 0x80	; 128
    1350:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    1352:	ed e7       	ldi	r30, 0x7D	; 125
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	81 60       	ori	r24, 0x01	; 1
    135a:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    135c:	80 81       	ld	r24, Z
    135e:	82 60       	ori	r24, 0x02	; 2
    1360:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    1362:	8c 91       	ld	r24, X
    1364:	80 62       	ori	r24, 0x20	; 32
    1366:	8c 93       	st	X, r24
    1368:	08 95       	ret

0000136a <get_analog_val>:
}

void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
    136a:	ea e7       	ldi	r30, 0x7A	; 122
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	20 81       	ld	r18, Z
    1370:	2f 77       	andi	r18, 0x7F	; 127
    1372:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
    1374:	83 30       	cpi	r24, 0x03	; 3
    1376:	91 05       	cpc	r25, r1
    1378:	09 f4       	brne	.+2      	; 0x137c <get_analog_val+0x12>
    137a:	49 c0       	rjmp	.+146    	; 0x140e <get_analog_val+0xa4>
    137c:	3c f4       	brge	.+14     	; 0x138c <get_analog_val+0x22>
    137e:	81 30       	cpi	r24, 0x01	; 1
    1380:	91 05       	cpc	r25, r1
    1382:	19 f1       	breq	.+70     	; 0x13ca <get_analog_val+0x60>
    1384:	9c f5       	brge	.+102    	; 0x13ec <get_analog_val+0x82>
    1386:	89 2b       	or	r24, r25
    1388:	79 f0       	breq	.+30     	; 0x13a8 <get_analog_val+0x3e>
    138a:	95 c0       	rjmp	.+298    	; 0x14b6 <get_analog_val+0x14c>
    138c:	85 30       	cpi	r24, 0x05	; 5
    138e:	91 05       	cpc	r25, r1
    1390:	09 f4       	brne	.+2      	; 0x1394 <get_analog_val+0x2a>
    1392:	5f c0       	rjmp	.+190    	; 0x1452 <get_analog_val+0xe8>
    1394:	0c f4       	brge	.+2      	; 0x1398 <get_analog_val+0x2e>
    1396:	4c c0       	rjmp	.+152    	; 0x1430 <get_analog_val+0xc6>
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	91 05       	cpc	r25, r1
    139c:	09 f4       	brne	.+2      	; 0x13a0 <get_analog_val+0x36>
    139e:	6a c0       	rjmp	.+212    	; 0x1474 <get_analog_val+0x10a>
    13a0:	07 97       	sbiw	r24, 0x07	; 7
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <get_analog_val+0x3c>
    13a4:	88 c0       	rjmp	.+272    	; 0x14b6 <get_analog_val+0x14c>
    13a6:	77 c0       	rjmp	.+238    	; 0x1496 <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
    13a8:	eb e7       	ldi	r30, 0x7B	; 123
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 7d       	andi	r24, 0xDF	; 223
    13b0:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    13b2:	ec e7       	ldi	r30, 0x7C	; 124
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8b 7f       	andi	r24, 0xFB	; 251
    13ba:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    13bc:	80 81       	ld	r24, Z
    13be:	8d 7f       	andi	r24, 0xFD	; 253
    13c0:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    13c2:	80 81       	ld	r24, Z
    13c4:	8e 7f       	andi	r24, 0xFE	; 254
    13c6:	80 83       	st	Z, r24
            break;
    13c8:	76 c0       	rjmp	.+236    	; 0x14b6 <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
    13ca:	eb e7       	ldi	r30, 0x7B	; 123
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	8f 7d       	andi	r24, 0xDF	; 223
    13d2:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    13d4:	ec e7       	ldi	r30, 0x7C	; 124
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	8b 7f       	andi	r24, 0xFB	; 251
    13dc:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    13de:	80 81       	ld	r24, Z
    13e0:	8d 7f       	andi	r24, 0xFD	; 253
    13e2:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    13e4:	80 81       	ld	r24, Z
    13e6:	81 60       	ori	r24, 0x01	; 1
    13e8:	80 83       	st	Z, r24
            break;
    13ea:	65 c0       	rjmp	.+202    	; 0x14b6 <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
    13ec:	eb e7       	ldi	r30, 0x7B	; 123
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 7d       	andi	r24, 0xDF	; 223
    13f4:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    13f6:	ec e7       	ldi	r30, 0x7C	; 124
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	84 60       	ori	r24, 0x04	; 4
    13fe:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1400:	80 81       	ld	r24, Z
    1402:	8d 7f       	andi	r24, 0xFD	; 253
    1404:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1406:	80 81       	ld	r24, Z
    1408:	8e 7f       	andi	r24, 0xFE	; 254
    140a:	80 83       	st	Z, r24
            break;
    140c:	54 c0       	rjmp	.+168    	; 0x14b6 <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
    140e:	eb e7       	ldi	r30, 0x7B	; 123
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	80 81       	ld	r24, Z
    1414:	8f 7d       	andi	r24, 0xDF	; 223
    1416:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    1418:	ec e7       	ldi	r30, 0x7C	; 124
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	84 60       	ori	r24, 0x04	; 4
    1420:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1422:	80 81       	ld	r24, Z
    1424:	8d 7f       	andi	r24, 0xFD	; 253
    1426:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1428:	80 81       	ld	r24, Z
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	80 83       	st	Z, r24
            break;
    142e:	43 c0       	rjmp	.+134    	; 0x14b6 <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
    1430:	eb e7       	ldi	r30, 0x7B	; 123
    1432:	f0 e0       	ldi	r31, 0x00	; 0
    1434:	80 81       	ld	r24, Z
    1436:	8f 7d       	andi	r24, 0xDF	; 223
    1438:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    143a:	ec e7       	ldi	r30, 0x7C	; 124
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	84 60       	ori	r24, 0x04	; 4
    1442:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    1444:	80 81       	ld	r24, Z
    1446:	82 60       	ori	r24, 0x02	; 2
    1448:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    144a:	80 81       	ld	r24, Z
    144c:	8e 7f       	andi	r24, 0xFE	; 254
    144e:	80 83       	st	Z, r24
            break;
    1450:	32 c0       	rjmp	.+100    	; 0x14b6 <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
    1452:	eb e7       	ldi	r30, 0x7B	; 123
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	8f 7d       	andi	r24, 0xDF	; 223
    145a:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    145c:	ec e7       	ldi	r30, 0x7C	; 124
    145e:	f0 e0       	ldi	r31, 0x00	; 0
    1460:	80 81       	ld	r24, Z
    1462:	84 60       	ori	r24, 0x04	; 4
    1464:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    1466:	80 81       	ld	r24, Z
    1468:	82 60       	ori	r24, 0x02	; 2
    146a:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    146c:	80 81       	ld	r24, Z
    146e:	81 60       	ori	r24, 0x01	; 1
    1470:	80 83       	st	Z, r24
            break;
    1472:	21 c0       	rjmp	.+66     	; 0x14b6 <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
    1474:	eb e7       	ldi	r30, 0x7B	; 123
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	80 81       	ld	r24, Z
    147a:	80 62       	ori	r24, 0x20	; 32
    147c:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    147e:	ec e7       	ldi	r30, 0x7C	; 124
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	80 81       	ld	r24, Z
    1484:	8b 7f       	andi	r24, 0xFB	; 251
    1486:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1488:	80 81       	ld	r24, Z
    148a:	8d 7f       	andi	r24, 0xFD	; 253
    148c:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    148e:	80 81       	ld	r24, Z
    1490:	8e 7f       	andi	r24, 0xFE	; 254
    1492:	80 83       	st	Z, r24
            break;
    1494:	10 c0       	rjmp	.+32     	; 0x14b6 <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
    1496:	eb e7       	ldi	r30, 0x7B	; 123
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 62       	ori	r24, 0x20	; 32
    149e:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    14a0:	ec e7       	ldi	r30, 0x7C	; 124
    14a2:	f0 e0       	ldi	r31, 0x00	; 0
    14a4:	80 81       	ld	r24, Z
    14a6:	8b 7f       	andi	r24, 0xFB	; 251
    14a8:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    14aa:	80 81       	ld	r24, Z
    14ac:	8d 7f       	andi	r24, 0xFD	; 253
    14ae:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    14b0:	80 81       	ld	r24, Z
    14b2:	81 60       	ori	r24, 0x01	; 1
    14b4:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
    14b6:	ea e7       	ldi	r30, 0x7A	; 122
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	80 68       	ori	r24, 0x80	; 128
    14be:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
    14c0:	80 81       	ld	r24, Z
    14c2:	80 64       	ori	r24, 0x40	; 64
    14c4:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
    14c6:	80 81       	ld	r24, Z
    14c8:	80 61       	ori	r24, 0x10	; 16
    14ca:	80 83       	st	Z, r24
    14cc:	08 95       	ret

000014ce <init_ports>:
}

void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
    14ce:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
    14d0:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
    14d2:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
    14d4:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
    14d6:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
    14d8:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
    14da:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
    14dc:	5d 98       	cbi	0x0b, 5	; 11
    14de:	08 95       	ret

000014e0 <stop_motor>:
}


void stop_motor(void)
{
    OCR1B = 0;
    14e0:	10 92 8b 00 	sts	0x008B, r1
    14e4:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    14e8:	10 92 8d 00 	sts	0x008D, r1
    14ec:	10 92 8c 00 	sts	0x008C, r1
    14f0:	08 95       	ret

000014f2 <turn_left>:
}

void turn_left(void)
{
    clear(PORTB,3);
    14f2:	2b 98       	cbi	0x05, 3	; 5
   set(PORTD,3);
    14f4:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_TURN_RGHT;
    14f6:	84 ec       	ldi	r24, 0xC4	; 196
    14f8:	99 e0       	ldi	r25, 0x09	; 9
    14fa:	90 93 8b 00 	sts	0x008B, r25
    14fe:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    1502:	90 93 8d 00 	sts	0x008D, r25
    1506:	80 93 8c 00 	sts	0x008C, r24
    150a:	08 95       	ret

0000150c <turn_right>:
	//m_green(ON);
}

void turn_right(void)
{
    set(PORTB,3);
    150c:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
    150e:	5b 98       	cbi	0x0b, 3	; 11
    OCR1B = PWM_SPEED_TURN_RGHT;
    1510:	84 ec       	ldi	r24, 0xC4	; 196
    1512:	99 e0       	ldi	r25, 0x09	; 9
    1514:	90 93 8b 00 	sts	0x008B, r25
    1518:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    151c:	90 93 8d 00 	sts	0x008D, r25
    1520:	80 93 8c 00 	sts	0x008C, r24
    1524:	08 95       	ret

00001526 <go_bwd>:
	//m_green(ON);
}

void go_bwd(void)
{
    set(PORTB,3);
    1526:	2b 9a       	sbi	0x05, 3	; 5
    set(PORTD,3);
    1528:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1B = PWM_SPEED_FWD_RGHT;
    152a:	80 ea       	ldi	r24, 0xA0	; 160
    152c:	9f e0       	ldi	r25, 0x0F	; 15
    152e:	90 93 8b 00 	sts	0x008B, r25
    1532:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_FWD_LFT;
    1536:	90 93 8d 00 	sts	0x008D, r25
    153a:	80 93 8c 00 	sts	0x008C, r24
    153e:	08 95       	ret

00001540 <circle_left>:
	//m_green(ON);
}

void circle_left()
{
	clear(PORTB,3);
    1540:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    1542:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
    1544:	8e e2       	ldi	r24, 0x2E	; 46
    1546:	99 e0       	ldi	r25, 0x09	; 9
    1548:	90 93 8b 00 	sts	0x008B, r25
    154c:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
    1550:	8e e9       	ldi	r24, 0x9E	; 158
    1552:	97 e0       	ldi	r25, 0x07	; 7
    1554:	90 93 8d 00 	sts	0x008D, r25
    1558:	80 93 8c 00 	sts	0x008C, r24
    155c:	08 95       	ret

0000155e <circle_right>:
	//m_green(ON);
}

void circle_right()
{
	clear(PORTB,3);
    155e:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    1560:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
    1562:	87 e9       	ldi	r24, 0x97	; 151
    1564:	97 e0       	ldi	r25, 0x07	; 7
    1566:	90 93 8b 00 	sts	0x008B, r25
    156a:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
    156e:	8c ef       	ldi	r24, 0xFC	; 252
    1570:	98 e0       	ldi	r25, 0x08	; 8
    1572:	90 93 8d 00 	sts	0x008D, r25
    1576:	80 93 8c 00 	sts	0x008C, r24
    157a:	08 95       	ret

0000157c <move_robot>:
    //m_green(ON);
    clear(PORTB,0);
    set(PORTB,1);
}*/

void move_robot(float theta, int dir){
    157c:	cf 92       	push	r12
    157e:	df 92       	push	r13
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	6b 01       	movw	r12, r22
    1586:	7c 01       	movw	r14, r24
	if (dir == 1) {             // Move with a right curve
    1588:	41 30       	cpi	r20, 0x01	; 1
    158a:	51 05       	cpc	r21, r1
    158c:	c1 f5       	brne	.+112    	; 0x15fe <move_robot+0x82>
		OCR1C = PWM_SPEED_FWD_LFT;
    158e:	80 ea       	ldi	r24, 0xA0	; 160
    1590:	9f e0       	ldi	r25, 0x0F	; 15
    1592:	90 93 8d 00 	sts	0x008D, r25
    1596:	80 93 8c 00 	sts	0x008C, r24
		if (theta> TURNING_ANGLE)
    159a:	20 e0       	ldi	r18, 0x00	; 0
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	40 e2       	ldi	r20, 0x20	; 32
    15a0:	53 e4       	ldi	r21, 0x43	; 67
    15a2:	c7 01       	movw	r24, r14
    15a4:	b6 01       	movw	r22, r12
    15a6:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	3c f4       	brge	.+14     	; 0x15bc <move_robot+0x40>
			OCR1B = PWM_MIN_RGHT;
    15ae:	8e e5       	ldi	r24, 0x5E	; 94
    15b0:	91 e0       	ldi	r25, 0x01	; 1
    15b2:	90 93 8b 00 	sts	0x008B, r25
    15b6:	80 93 8a 00 	sts	0x008A, r24
    15ba:	58 c0       	rjmp	.+176    	; 0x166c <move_robot+0xf0>
		else
			OCR1B = PWM_MIN_RGHT+((TURNING_ANGLE - theta)/TURNING_ANGLE)*(PWM_SPEED_FWD_RGHT-PWM_MIN_RGHT);
    15bc:	a7 01       	movw	r20, r14
    15be:	96 01       	movw	r18, r12
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	80 e2       	ldi	r24, 0x20	; 32
    15c6:	93 e4       	ldi	r25, 0x43	; 67
    15c8:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    15cc:	20 e0       	ldi	r18, 0x00	; 0
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	40 e2       	ldi	r20, 0x20	; 32
    15d2:	53 e4       	ldi	r21, 0x43	; 67
    15d4:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e2       	ldi	r19, 0x20	; 32
    15dc:	44 e6       	ldi	r20, 0x64	; 100
    15de:	55 e4       	ldi	r21, 0x45	; 69
    15e0:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    15e4:	20 e0       	ldi	r18, 0x00	; 0
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	4f ea       	ldi	r20, 0xAF	; 175
    15ea:	53 e4       	ldi	r21, 0x43	; 67
    15ec:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    15f0:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__fixunssfsi>
    15f4:	70 93 8b 00 	sts	0x008B, r23
    15f8:	60 93 8a 00 	sts	0x008A, r22
    15fc:	37 c0       	rjmp	.+110    	; 0x166c <move_robot+0xf0>
	}
	else
	{                      
		// Move with a left curve
		OCR1B = PWM_SPEED_FWD_RGHT;		
    15fe:	80 ea       	ldi	r24, 0xA0	; 160
    1600:	9f e0       	ldi	r25, 0x0F	; 15
    1602:	90 93 8b 00 	sts	0x008B, r25
    1606:	80 93 8a 00 	sts	0x008A, r24
		if (theta> TURNING_ANGLE)
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	40 e2       	ldi	r20, 0x20	; 32
    1610:	53 e4       	ldi	r21, 0x43	; 67
    1612:	c7 01       	movw	r24, r14
    1614:	b6 01       	movw	r22, r12
    1616:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    161a:	18 16       	cp	r1, r24
    161c:	3c f4       	brge	.+14     	; 0x162c <move_robot+0xb0>
			OCR1C = PWM_MIN_LEFT;
    161e:	8b e6       	ldi	r24, 0x6B	; 107
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	90 93 8d 00 	sts	0x008D, r25
    1626:	80 93 8c 00 	sts	0x008C, r24
    162a:	20 c0       	rjmp	.+64     	; 0x166c <move_robot+0xf0>
		else
			OCR1C = PWM_MIN_LEFT+((TURNING_ANGLE - theta)/TURNING_ANGLE)*(PWM_SPEED_FWD_LFT-PWM_MIN_LEFT);
    162c:	a7 01       	movw	r20, r14
    162e:	96 01       	movw	r18, r12
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	70 e0       	ldi	r23, 0x00	; 0
    1634:	80 e2       	ldi	r24, 0x20	; 32
    1636:	93 e4       	ldi	r25, 0x43	; 67
    1638:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e2       	ldi	r20, 0x20	; 32
    1642:	53 e4       	ldi	r21, 0x43	; 67
    1644:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
    1648:	20 e0       	ldi	r18, 0x00	; 0
    164a:	30 e5       	ldi	r19, 0x50	; 80
    164c:	43 e6       	ldi	r20, 0x63	; 99
    164e:	55 e4       	ldi	r21, 0x45	; 69
    1650:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e8       	ldi	r19, 0x80	; 128
    1658:	45 eb       	ldi	r20, 0xB5	; 181
    165a:	53 e4       	ldi	r21, 0x43	; 67
    165c:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    1660:	0e 94 f6 1a 	call	0x35ec	; 0x35ec <__fixunssfsi>
    1664:	70 93 8d 00 	sts	0x008D, r23
    1668:	60 93 8c 00 	sts	0x008C, r22
		
	}
	
	clear(PORTB,3);
    166c:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    166e:	5b 98       	cbi	0x0b, 3	; 11
}
    1670:	ff 90       	pop	r15
    1672:	ef 90       	pop	r14
    1674:	df 90       	pop	r13
    1676:	cf 90       	pop	r12
    1678:	08 95       	ret

0000167a <turnOnBlueLED>:

void turnOnBlueLED(void)
{
	set(PORTD,5);
    167a:	5d 9a       	sbi	0x0b, 5	; 11
    167c:	08 95       	ret

0000167e <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	cd 56       	subi	r28, 0x6D	; 109
    1688:	d1 09       	sbc	r29, r1
    168a:	0f b6       	in	r0, 0x3f	; 63
    168c:	f8 94       	cli
    168e:	de bf       	out	0x3e, r29	; 62
    1690:	0f be       	out	0x3f, r0	; 63
    1692:	cd bf       	out	0x3d, r28	; 61
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1694:	1a 82       	std	Y+2, r1	; 0x02
    1696:	19 82       	std	Y+1, r1	; 0x01
    1698:	1c 82       	std	Y+4, r1	; 0x04
    169a:	1b 82       	std	Y+3, r1	; 0x03
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
		
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
    169c:	fe 01       	movw	r30, r28
    169e:	35 96       	adiw	r30, 0x05	; 5
    16a0:	80 e2       	ldi	r24, 0x20	; 32
    16a2:	df 01       	movw	r26, r30
    16a4:	1d 92       	st	X+, r1
    16a6:	8a 95       	dec	r24
    16a8:	e9 f7       	brne	.-6      	; 0x16a4 <main+0x26>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0, theta_robot = 0;
    16aa:	1e ae       	std	Y+62, r1	; 0x3e
    16ac:	1d ae       	std	Y+61, r1	; 0x3d
    16ae:	21 96       	adiw	r28, 0x01	; 1
    16b0:	1f ae       	std	Y+63, r1	; 0x3f
    16b2:	1e ae       	std	Y+62, r1	; 0x3e
    16b4:	21 97       	sbiw	r28, 0x01	; 1
    16b6:	23 96       	adiw	r28, 0x03	; 3
    16b8:	1f ae       	std	Y+63, r1	; 0x3f
    16ba:	1e ae       	std	Y+62, r1	; 0x3e
    16bc:	23 97       	sbiw	r28, 0x03	; 3
    div_t aux_conversion;
    
    //Set the clock system prescaler
    m_clockdivide(N_CLOCK);
    16be:	e1 e6       	ldi	r30, 0x61	; 97
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 e8       	ldi	r24, 0x80	; 128
    16c4:	80 83       	st	Z, r24
    16c6:	10 82       	st	Z, r1
    
    //Turn off the LEDs
    m_green(OFF);
    16c8:	6a 9a       	sbi	0x0d, 2	; 13
    16ca:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);
    16cc:	6e 9a       	sbi	0x0d, 6	; 13
    16ce:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);    
    16d0:	6e 9a       	sbi	0x0d, 6	; 13
    16d2:	76 98       	cbi	0x0e, 6	; 14
    //Initialize bus
    m_bus_init();
    16d4:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <m_bus_init>
    
    //Initialize ports
    init_ports();
    16d8:	0e 94 67 0a 	call	0x14ce	; 0x14ce <init_ports>
    
    //Set timer 1 for motor
    set_timer1();
    16dc:	0e 94 2d 09 	call	0x125a	; 0x125a <set_timer1>
    
    //Set timer 3 for solenoid
    //set_timer3();
    
    //Set timer to every 0.1 s (10 Hz)
    set_timer4();
    16e0:	0e 94 63 09 	call	0x12c6	; 0x12c6 <set_timer4>
    
    //Set the ADC
    init_analog();
    16e4:	0e 94 82 09 	call	0x1304	; 0x1304 <init_analog>
    
    //Initialize wii camera
    char aux = 0;
	while(!aux)
    {
        aux = m_wii_open();
    16e8:	0e 94 b8 18 	call	0x3170	; 0x3170 <m_wii_open>
    //Set the ADC
    init_analog();
    
    //Initialize wii camera
    char aux = 0;
	while(!aux)
    16ec:	88 23       	and	r24, r24
    16ee:	e1 f3       	breq	.-8      	; 0x16e8 <main+0x6a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16f0:	bf e3       	ldi	r27, 0x3F	; 63
    16f2:	ed e0       	ldi	r30, 0x0D	; 13
    16f4:	f3 e0       	ldi	r31, 0x03	; 3
    16f6:	b1 50       	subi	r27, 0x01	; 1
    16f8:	e0 40       	sbci	r30, 0x00	; 0
    16fa:	f0 40       	sbci	r31, 0x00	; 0
    16fc:	e1 f7       	brne	.-8      	; 0x16f6 <main+0x78>
    16fe:	00 c0       	rjmp	.+0      	; 0x1700 <main+0x82>
    1700:	00 00       	nop
    {
        aux = m_wii_open();
    };
    
    m_wait(1000);
    m_red(OFF);
    1702:	6e 9a       	sbi	0x0d, 6	; 13
    1704:	76 9a       	sbi	0x0e, 6	; 14
	
    
    //Open the channel
    //m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
	m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    1706:	40 e2       	ldi	r20, 0x20	; 32
    1708:	69 e4       	ldi	r22, 0x49	; 73
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <m_rf_open>
		
    //Enable interruptions
    sei();
    1710:	78 94       	sei
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1712:	6f 96       	adiw	r28, 0x1f	; 31
    1714:	1f ae       	std	Y+63, r1	; 0x3f
    1716:	1e ae       	std	Y+62, r1	; 0x3e
    1718:	6f 97       	sbiw	r28, 0x1f	; 31
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    171a:	68 96       	adiw	r28, 0x18	; 24
    171c:	1f ae       	std	Y+63, r1	; 0x3f
    171e:	68 97       	sbiw	r28, 0x18	; 24
    1720:	69 96       	adiw	r28, 0x19	; 25
    1722:	1f ae       	std	Y+63, r1	; 0x3f
    1724:	69 97       	sbiw	r28, 0x19	; 25
    1726:	6a 96       	adiw	r28, 0x1a	; 26
    1728:	1f ae       	std	Y+63, r1	; 0x3f
    172a:	6a 97       	sbiw	r28, 0x1a	; 26
    172c:	6b 96       	adiw	r28, 0x1b	; 27
    172e:	1f ae       	std	Y+63, r1	; 0x3f
    1730:	6b 97       	sbiw	r28, 0x1b	; 27
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    1732:	aa 96       	adiw	r28, 0x2a	; 42
    1734:	1c ae       	std	Y+60, r1	; 0x3c
    1736:	1d ae       	std	Y+61, r1	; 0x3d
    1738:	1e ae       	std	Y+62, r1	; 0x3e
    173a:	1f ae       	std	Y+63, r1	; 0x3f
    173c:	aa 97       	sbiw	r28, 0x2a	; 42
	int circle_started_before = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    173e:	ab 96       	adiw	r28, 0x2b	; 43
    1740:	1f ae       	std	Y+63, r1	; 0x3f
    1742:	ab 97       	sbiw	r28, 0x2b	; 43
    1744:	ac 96       	adiw	r28, 0x2c	; 44
    1746:	1f ae       	std	Y+63, r1	; 0x3f
    1748:	ac 97       	sbiw	r28, 0x2c	; 44
    174a:	ad 96       	adiw	r28, 0x2d	; 45
    174c:	1f ae       	std	Y+63, r1	; 0x3f
    174e:	ad 97       	sbiw	r28, 0x2d	; 45
    1750:	ae 96       	adiw	r28, 0x2e	; 46
    1752:	1f ae       	std	Y+63, r1	; 0x3f
    1754:	ae 97       	sbiw	r28, 0x2e	; 46
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
	int circle_started_before = 0;
    1756:	a6 96       	adiw	r28, 0x26	; 38
    1758:	1f ae       	std	Y+63, r1	; 0x3f
    175a:	1e ae       	std	Y+62, r1	; 0x3e
    175c:	a6 97       	sbiw	r28, 0x26	; 38
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
    175e:	a1 96       	adiw	r28, 0x21	; 33
    1760:	1f ae       	std	Y+63, r1	; 0x3f
    1762:	1e ae       	std	Y+62, r1	; 0x3e
    1764:	a1 97       	sbiw	r28, 0x21	; 33
    1766:	2d 96       	adiw	r28, 0x0d	; 13
    1768:	1f ae       	std	Y+63, r1	; 0x3f
    176a:	1e ae       	std	Y+62, r1	; 0x3e
    176c:	2d 97       	sbiw	r28, 0x0d	; 13
    176e:	2f 96       	adiw	r28, 0x0f	; 15
    1770:	1f ae       	std	Y+63, r1	; 0x3f
    1772:	1e ae       	std	Y+62, r1	; 0x3e
    1774:	2f 97       	sbiw	r28, 0x0f	; 15
    1776:	61 96       	adiw	r28, 0x11	; 17
    1778:	1f ae       	std	Y+63, r1	; 0x3f
    177a:	1e ae       	std	Y+62, r1	; 0x3e
    177c:	61 97       	sbiw	r28, 0x11	; 17
    177e:	63 96       	adiw	r28, 0x13	; 19
    1780:	1f ae       	std	Y+63, r1	; 0x3f
    1782:	1e ae       	std	Y+62, r1	; 0x3e
    1784:	63 97       	sbiw	r28, 0x13	; 19
    1786:	65 96       	adiw	r28, 0x15	; 21
    1788:	1f ae       	std	Y+63, r1	; 0x3f
    178a:	1e ae       	std	Y+62, r1	; 0x3e
    178c:	65 97       	sbiw	r28, 0x15	; 21
    178e:	67 96       	adiw	r28, 0x17	; 23
    1790:	1f ae       	std	Y+63, r1	; 0x3f
    1792:	1e ae       	std	Y+62, r1	; 0x3e
    1794:	67 97       	sbiw	r28, 0x17	; 23
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    1796:	a3 96       	adiw	r28, 0x23	; 35
    1798:	1f ae       	std	Y+63, r1	; 0x3f
    179a:	1e ae       	std	Y+62, r1	; 0x3e
    179c:	a3 97       	sbiw	r28, 0x23	; 35
int main(void)
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    179e:	6d 96       	adiw	r28, 0x1d	; 29
    17a0:	1f ae       	std	Y+63, r1	; 0x3f
    17a2:	1e ae       	std	Y+62, r1	; 0x3e
    17a4:	6d 97       	sbiw	r28, 0x1d	; 29
        
        //If data received correctly
        if (wii_OK)
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    17a6:	9e 01       	movw	r18, r28
    17a8:	2d 5f       	subi	r18, 0xFD	; 253
    17aa:	3f 4f       	sbci	r19, 0xFF	; 255
    17ac:	25 96       	adiw	r28, 0x05	; 5
    17ae:	3f af       	std	Y+63, r19	; 0x3f
    17b0:	2e af       	std	Y+62, r18	; 0x3e
    17b2:	25 97       	sbiw	r28, 0x05	; 5
    17b4:	ce 01       	movw	r24, r28
    17b6:	01 96       	adiw	r24, 0x01	; 1
    17b8:	27 96       	adiw	r28, 0x07	; 7
    17ba:	9f af       	std	Y+63, r25	; 0x3f
    17bc:	8e af       	std	Y+62, r24	; 0x3e
    17be:	27 97       	sbiw	r28, 0x07	; 7
    17c0:	de 01       	movw	r26, r28
    17c2:	af 5b       	subi	r26, 0xBF	; 191
    17c4:	bf 4f       	sbci	r27, 0xFF	; 255
    17c6:	29 96       	adiw	r28, 0x09	; 9
    17c8:	bf af       	std	Y+63, r27	; 0x3f
    17ca:	ae af       	std	Y+62, r26	; 0x3e
    17cc:	29 97       	sbiw	r28, 0x09	; 9
    17ce:	fe 01       	movw	r30, r28
    17d0:	ff 96       	adiw	r30, 0x3f	; 63
    17d2:	2b 96       	adiw	r28, 0x0b	; 11
    17d4:	ff af       	std	Y+63, r31	; 0x3f
    17d6:	ee af       	std	Y+62, r30	; 0x3e
    17d8:	2b 97       	sbiw	r28, 0x0b	; 11
        for (int i=0;i<NUM_LEDS;i++)
        {
			get_analog_val(i);
         
			//Wait until flag is on
			while(!check(ADCSRA,ADIF));
    17da:	0f 2e       	mov	r0, r31
    17dc:	fa e7       	ldi	r31, 0x7A	; 122
    17de:	4f 2e       	mov	r4, r31
    17e0:	51 2c       	mov	r5, r1
    17e2:	f0 2d       	mov	r31, r0
					break;
				case(2):
					PT3_right_inside = ADC;
					break;
				case(3):
					PT4_right_outside = ADC;
    17e4:	0f 2e       	mov	r0, r31
    17e6:	f8 e7       	ldi	r31, 0x78	; 120
    17e8:	6f 2e       	mov	r6, r31
    17ea:	71 2c       	mov	r7, r1
    17ec:	f0 2d       	mov	r31, r0
    17ee:	23 c0       	rjmp	.+70     	; 0x1836 <main+0x1b8>
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
                        status_go_to_goal = 2;
    17f0:	22 e0       	ldi	r18, 0x02	; 2
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	6d 96       	adiw	r28, 0x1d	; 29
    17f6:	3f af       	std	Y+63, r19	; 0x3f
    17f8:	2e af       	std	Y+62, r18	; 0x3e
    17fa:	6d 97       	sbiw	r28, 0x1d	; 29
    17fc:	1c c0       	rjmp	.+56     	; 0x1836 <main+0x1b8>
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
						{
                            turn_right();
							commands_var = 4;
						}else
							commands_var = 0;
    17fe:	6f 96       	adiw	r28, 0x1f	; 31
    1800:	1f ae       	std	Y+63, r1	; 0x3f
    1802:	1e ae       	std	Y+62, r1	; 0x3e
    1804:	6f 97       	sbiw	r28, 0x1f	; 31
    1806:	17 c0       	rjmp	.+46     	; 0x1836 <main+0x1b8>
    1808:	6f 96       	adiw	r28, 0x1f	; 31
    180a:	1f ae       	std	Y+63, r1	; 0x3f
    180c:	1e ae       	std	Y+62, r1	; 0x3e
    180e:	6f 97       	sbiw	r28, 0x1f	; 31
    1810:	12 c0       	rjmp	.+36     	; 0x1836 <main+0x1b8>
    1812:	6f 96       	adiw	r28, 0x1f	; 31
    1814:	1f ae       	std	Y+63, r1	; 0x3f
    1816:	1e ae       	std	Y+62, r1	; 0x3e
    1818:	6f 97       	sbiw	r28, 0x1f	; 31
    181a:	0d c0       	rjmp	.+26     	; 0x1836 <main+0x1b8>
				turnOnBlueLED();
                if (status_go_to_goal == 0)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 1;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	6d 96       	adiw	r28, 0x1d	; 29
    1822:	9f af       	std	Y+63, r25	; 0x3f
    1824:	8e af       	std	Y+62, r24	; 0x3e
    1826:	6d 97       	sbiw	r28, 0x1d	; 29
    1828:	06 c0       	rjmp	.+12     	; 0x1836 <main+0x1b8>
			case GO_TO_GOAL_WITH_PUCK:
			if (status_go_to_goal == 0)
			{
				dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
				if (dist_goal < THRESHOLD_DIST_GOAL)
					status_go_to_goal = 1;
    182a:	a1 e0       	ldi	r26, 0x01	; 1
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	6d 96       	adiw	r28, 0x1d	; 29
    1830:	bf af       	std	Y+63, r27	; 0x3f
    1832:	ae af       	std	Y+62, r26	; 0x3e
    1834:	6d 97       	sbiw	r28, 0x1d	; 29
		
		
		
        //LOCALIZATION CODE
        //Get the blobs
        cli();
    1836:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);
    1838:	ce 01       	movw	r24, r28
    183a:	85 96       	adiw	r24, 0x25	; 37
    183c:	0e 94 23 18 	call	0x3046	; 0x3046 <m_wii_read>
        sei();
    1840:	78 94       	sei
        
        //If data received correctly
        if (wii_OK)
    1842:	88 23       	and	r24, r24
    1844:	11 f4       	brne	.+4      	; 0x184a <main+0x1cc>
    1846:	0c 94 cf 14 	jmp	0x299e	; 0x299e <main+0x1320>
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    184a:	a9 ac       	ldd	r10, Y+57	; 0x39
    184c:	ba ac       	ldd	r11, Y+58	; 0x3a
    184e:	cb a8       	ldd	r12, Y+51	; 0x33
    1850:	dc a8       	ldd	r13, Y+52	; 0x34
    1852:	ed a4       	ldd	r14, Y+45	; 0x2d
    1854:	fe a4       	ldd	r15, Y+46	; 0x2e
    1856:	0f a1       	ldd	r16, Y+39	; 0x27
    1858:	18 a5       	ldd	r17, Y+40	; 0x28
    185a:	2f a9       	ldd	r18, Y+55	; 0x37
    185c:	38 ad       	ldd	r19, Y+56	; 0x38
    185e:	49 a9       	ldd	r20, Y+49	; 0x31
    1860:	5a a9       	ldd	r21, Y+50	; 0x32
    1862:	6b a5       	ldd	r22, Y+43	; 0x2b
    1864:	7c a5       	ldd	r23, Y+44	; 0x2c
    1866:	25 96       	adiw	r28, 0x05	; 5
    1868:	bf ad       	ldd	r27, Y+63	; 0x3f
    186a:	25 97       	sbiw	r28, 0x05	; 5
    186c:	bf 93       	push	r27
    186e:	24 96       	adiw	r28, 0x04	; 4
    1870:	ef ad       	ldd	r30, Y+63	; 0x3f
    1872:	24 97       	sbiw	r28, 0x04	; 4
    1874:	ef 93       	push	r30
    1876:	27 96       	adiw	r28, 0x07	; 7
    1878:	ff ad       	ldd	r31, Y+63	; 0x3f
    187a:	27 97       	sbiw	r28, 0x07	; 7
    187c:	ff 93       	push	r31
    187e:	26 96       	adiw	r28, 0x06	; 6
    1880:	8f ad       	ldd	r24, Y+63	; 0x3f
    1882:	26 97       	sbiw	r28, 0x06	; 6
    1884:	8f 93       	push	r24
    1886:	29 96       	adiw	r28, 0x09	; 9
    1888:	9f ad       	ldd	r25, Y+63	; 0x3f
    188a:	29 97       	sbiw	r28, 0x09	; 9
    188c:	9f 93       	push	r25
    188e:	28 96       	adiw	r28, 0x08	; 8
    1890:	af ad       	ldd	r26, Y+63	; 0x3f
    1892:	28 97       	sbiw	r28, 0x08	; 8
    1894:	af 93       	push	r26
    1896:	2b 96       	adiw	r28, 0x0b	; 11
    1898:	bf ad       	ldd	r27, Y+63	; 0x3f
    189a:	2b 97       	sbiw	r28, 0x0b	; 11
    189c:	bf 93       	push	r27
    189e:	2a 96       	adiw	r28, 0x0a	; 10
    18a0:	ef ad       	ldd	r30, Y+63	; 0x3f
    18a2:	2a 97       	sbiw	r28, 0x0a	; 10
    18a4:	ef 93       	push	r30
    18a6:	0f 2e       	mov	r0, r31
    18a8:	fd e3       	ldi	r31, 0x3D	; 61
    18aa:	8f 2e       	mov	r8, r31
    18ac:	91 2c       	mov	r9, r1
    18ae:	f0 2d       	mov	r31, r0
    18b0:	8c 0e       	add	r8, r28
    18b2:	9d 1e       	adc	r9, r29
    18b4:	8d a1       	ldd	r24, Y+37	; 0x25
    18b6:	9e a1       	ldd	r25, Y+38	; 0x26
    18b8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <localize>
    18bc:	0f b6       	in	r0, 0x3f	; 63
    18be:	f8 94       	cli
    18c0:	de bf       	out	0x3e, r29	; 62
    18c2:	0f be       	out	0x3f, r0	; 63
    18c4:	cd bf       	out	0x3d, r28	; 61
    18c6:	0c 94 cf 14 	jmp	0x299e	; 0x299e <main+0x1320>
    18ca:	3f ef       	ldi	r19, 0xFF	; 255
    18cc:	e3 1a       	sub	r14, r19
    18ce:	f3 0a       	sbc	r15, r19

//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
    18d0:	87 01       	movw	r16, r14
    18d2:	01 50       	subi	r16, 0x01	; 1
    18d4:	11 09       	sbc	r17, r1
		}
        
        //ANALOG CODE
        for (int i=0;i<NUM_LEDS;i++)
        {
			get_analog_val(i);
    18d6:	c8 01       	movw	r24, r16
    18d8:	0e 94 b5 09 	call	0x136a	; 0x136a <get_analog_val>
         
			//Wait until flag is on
			while(!check(ADCSRA,ADIF));
    18dc:	d2 01       	movw	r26, r4
    18de:	8c 91       	ld	r24, X
    18e0:	84 ff       	sbrs	r24, 4
    18e2:	fc cf       	rjmp	.-8      	; 0x18dc <main+0x25e>
			switch(i)
    18e4:	03 30       	cpi	r16, 0x03	; 3
    18e6:	11 05       	cpc	r17, r1
    18e8:	79 f1       	breq	.+94     	; 0x1948 <main+0x2ca>
    18ea:	3c f4       	brge	.+14     	; 0x18fa <main+0x27c>
    18ec:	01 30       	cpi	r16, 0x01	; 1
    18ee:	11 05       	cpc	r17, r1
    18f0:	b9 f0       	breq	.+46     	; 0x1920 <main+0x2a2>
    18f2:	04 f5       	brge	.+64     	; 0x1934 <main+0x2b6>
    18f4:	01 2b       	or	r16, r17
    18f6:	51 f0       	breq	.+20     	; 0x190c <main+0x28e>
    18f8:	76 c0       	rjmp	.+236    	; 0x19e6 <main+0x368>
    18fa:	05 30       	cpi	r16, 0x05	; 5
    18fc:	11 05       	cpc	r17, r1
    18fe:	c1 f1       	breq	.+112    	; 0x1970 <main+0x2f2>
    1900:	6c f1       	brlt	.+90     	; 0x195c <main+0x2de>
    1902:	06 30       	cpi	r16, 0x06	; 6
    1904:	11 05       	cpc	r17, r1
    1906:	09 f0       	breq	.+2      	; 0x190a <main+0x28c>
    1908:	6e c0       	rjmp	.+220    	; 0x19e6 <main+0x368>
    190a:	3c c0       	rjmp	.+120    	; 0x1984 <main+0x306>
			{
				case(0):
					PT1_left_outside = ADC;
    190c:	f3 01       	movw	r30, r6
    190e:	01 90       	ld	r0, Z+
    1910:	f0 81       	ld	r31, Z
    1912:	e0 2d       	mov	r30, r0
    1914:	67 96       	adiw	r28, 0x17	; 23
    1916:	ff af       	std	Y+63, r31	; 0x3f
    1918:	ee af       	std	Y+62, r30	; 0x3e
    191a:	67 97       	sbiw	r28, 0x17	; 23
					break;
    191c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <main+0x132a>
				case(1): 
					PT2_left_inside = ADC;
    1920:	d3 01       	movw	r26, r6
    1922:	0d 90       	ld	r0, X+
    1924:	bc 91       	ld	r27, X
    1926:	a0 2d       	mov	r26, r0
    1928:	65 96       	adiw	r28, 0x15	; 21
    192a:	bf af       	std	Y+63, r27	; 0x3f
    192c:	ae af       	std	Y+62, r26	; 0x3e
    192e:	65 97       	sbiw	r28, 0x15	; 21
					break;
    1930:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <main+0x132a>
				case(2):
					PT3_right_inside = ADC;
    1934:	f3 01       	movw	r30, r6
    1936:	01 90       	ld	r0, Z+
    1938:	f0 81       	ld	r31, Z
    193a:	e0 2d       	mov	r30, r0
    193c:	63 96       	adiw	r28, 0x13	; 19
    193e:	ff af       	std	Y+63, r31	; 0x3f
    1940:	ee af       	std	Y+62, r30	; 0x3e
    1942:	63 97       	sbiw	r28, 0x13	; 19
					break;
    1944:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <main+0x132a>
				case(3):
					PT4_right_outside = ADC;
    1948:	d3 01       	movw	r26, r6
    194a:	0d 90       	ld	r0, X+
    194c:	bc 91       	ld	r27, X
    194e:	a0 2d       	mov	r26, r0
    1950:	61 96       	adiw	r28, 0x11	; 17
    1952:	bf af       	std	Y+63, r27	; 0x3f
    1954:	ae af       	std	Y+62, r26	; 0x3e
    1956:	61 97       	sbiw	r28, 0x11	; 17
					break;
    1958:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <main+0x132a>
				case(4):
					PT5_back_right = ADC;
    195c:	f3 01       	movw	r30, r6
    195e:	01 90       	ld	r0, Z+
    1960:	f0 81       	ld	r31, Z
    1962:	e0 2d       	mov	r30, r0
    1964:	2f 96       	adiw	r28, 0x0f	; 15
    1966:	ff af       	std	Y+63, r31	; 0x3f
    1968:	ee af       	std	Y+62, r30	; 0x3e
    196a:	2f 97       	sbiw	r28, 0x0f	; 15
					break;
    196c:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <main+0x132a>
				case(5): 
					PT6_back_left = ADC;
    1970:	d3 01       	movw	r26, r6
    1972:	0d 90       	ld	r0, X+
    1974:	bc 91       	ld	r27, X
    1976:	a0 2d       	mov	r26, r0
    1978:	2d 96       	adiw	r28, 0x0d	; 13
    197a:	bf af       	std	Y+63, r27	; 0x3f
    197c:	ae af       	std	Y+62, r26	; 0x3e
    197e:	2d 97       	sbiw	r28, 0x0d	; 13
					break;
    1980:	0c 94 d4 14 	jmp	0x29a8	; 0x29a8 <main+0x132a>
				case(6):
					PT7_have_puck = ADC;
    1984:	f3 01       	movw	r30, r6
    1986:	01 90       	ld	r0, Z+
    1988:	f0 81       	ld	r31, Z
    198a:	e0 2d       	mov	r30, r0
    198c:	a1 96       	adiw	r28, 0x21	; 33
    198e:	ff af       	std	Y+63, r31	; 0x3f
    1990:	ee af       	std	Y+62, r30	; 0x3e
    1992:	a1 97       	sbiw	r28, 0x21	; 33
					break;
			}
         
			//After doing the conversion reset flag
			set(ADCSRA,ADIF);
    1994:	d2 01       	movw	r26, r4
    1996:	8c 91       	ld	r24, X
    1998:	80 61       	ori	r24, 0x10	; 16
    199a:	8c 93       	st	X, r24
    199c:	2c 96       	adiw	r28, 0x0c	; 12
    199e:	0f ad       	ldd	r16, Y+63	; 0x3f
    19a0:	2c 97       	sbiw	r28, 0x0c	; 12
    19a2:	2d 96       	adiw	r28, 0x0d	; 13
    19a4:	1f ad       	ldd	r17, Y+63	; 0x3f
    19a6:	2d 97       	sbiw	r28, 0x0d	; 13
    19a8:	2e 96       	adiw	r28, 0x0e	; 14
    19aa:	ef ac       	ldd	r14, Y+63	; 0x3f
    19ac:	2e 97       	sbiw	r28, 0x0e	; 14
    19ae:	2f 96       	adiw	r28, 0x0f	; 15
    19b0:	ff ac       	ldd	r15, Y+63	; 0x3f
    19b2:	2f 97       	sbiw	r28, 0x0f	; 15
    19b4:	60 96       	adiw	r28, 0x10	; 16
    19b6:	cf ac       	ldd	r12, Y+63	; 0x3f
    19b8:	60 97       	sbiw	r28, 0x10	; 16
    19ba:	61 96       	adiw	r28, 0x11	; 17
    19bc:	df ac       	ldd	r13, Y+63	; 0x3f
    19be:	61 97       	sbiw	r28, 0x11	; 17
    19c0:	62 96       	adiw	r28, 0x12	; 18
    19c2:	af ac       	ldd	r10, Y+63	; 0x3f
    19c4:	62 97       	sbiw	r28, 0x12	; 18
    19c6:	63 96       	adiw	r28, 0x13	; 19
    19c8:	bf ac       	ldd	r11, Y+63	; 0x3f
    19ca:	63 97       	sbiw	r28, 0x13	; 19
    19cc:	64 96       	adiw	r28, 0x14	; 20
    19ce:	8f ac       	ldd	r8, Y+63	; 0x3f
    19d0:	64 97       	sbiw	r28, 0x14	; 20
    19d2:	65 96       	adiw	r28, 0x15	; 21
    19d4:	9f ac       	ldd	r9, Y+63	; 0x3f
    19d6:	65 97       	sbiw	r28, 0x15	; 21
    19d8:	66 96       	adiw	r28, 0x16	; 22
    19da:	2f ac       	ldd	r2, Y+63	; 0x3f
    19dc:	66 97       	sbiw	r28, 0x16	; 22
    19de:	67 96       	adiw	r28, 0x17	; 23
    19e0:	3f ac       	ldd	r3, Y+63	; 0x3f
    19e2:	67 97       	sbiw	r28, 0x17	; 23
    19e4:	2d c0       	rjmp	.+90     	; 0x1a40 <main+0x3c2>
    19e6:	f2 01       	movw	r30, r4
    19e8:	80 81       	ld	r24, Z
    19ea:	80 61       	ori	r24, 0x10	; 16
    19ec:	80 83       	st	Z, r24
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
 
		}
        
        //ANALOG CODE
        for (int i=0;i<NUM_LEDS;i++)
    19ee:	f7 e0       	ldi	r31, 0x07	; 7
    19f0:	ef 16       	cp	r14, r31
    19f2:	f1 04       	cpc	r15, r1
    19f4:	0c f4       	brge	.+2      	; 0x19f8 <main+0x37a>
    19f6:	69 cf       	rjmp	.-302    	; 0x18ca <main+0x24c>
    19f8:	2c 96       	adiw	r28, 0x0c	; 12
    19fa:	0f ad       	ldd	r16, Y+63	; 0x3f
    19fc:	2c 97       	sbiw	r28, 0x0c	; 12
    19fe:	2d 96       	adiw	r28, 0x0d	; 13
    1a00:	1f ad       	ldd	r17, Y+63	; 0x3f
    1a02:	2d 97       	sbiw	r28, 0x0d	; 13
    1a04:	2e 96       	adiw	r28, 0x0e	; 14
    1a06:	ef ac       	ldd	r14, Y+63	; 0x3f
    1a08:	2e 97       	sbiw	r28, 0x0e	; 14
    1a0a:	2f 96       	adiw	r28, 0x0f	; 15
    1a0c:	ff ac       	ldd	r15, Y+63	; 0x3f
    1a0e:	2f 97       	sbiw	r28, 0x0f	; 15
    1a10:	60 96       	adiw	r28, 0x10	; 16
    1a12:	cf ac       	ldd	r12, Y+63	; 0x3f
    1a14:	60 97       	sbiw	r28, 0x10	; 16
    1a16:	61 96       	adiw	r28, 0x11	; 17
    1a18:	df ac       	ldd	r13, Y+63	; 0x3f
    1a1a:	61 97       	sbiw	r28, 0x11	; 17
    1a1c:	62 96       	adiw	r28, 0x12	; 18
    1a1e:	af ac       	ldd	r10, Y+63	; 0x3f
    1a20:	62 97       	sbiw	r28, 0x12	; 18
    1a22:	63 96       	adiw	r28, 0x13	; 19
    1a24:	bf ac       	ldd	r11, Y+63	; 0x3f
    1a26:	63 97       	sbiw	r28, 0x13	; 19
    1a28:	64 96       	adiw	r28, 0x14	; 20
    1a2a:	8f ac       	ldd	r8, Y+63	; 0x3f
    1a2c:	64 97       	sbiw	r28, 0x14	; 20
    1a2e:	65 96       	adiw	r28, 0x15	; 21
    1a30:	9f ac       	ldd	r9, Y+63	; 0x3f
    1a32:	65 97       	sbiw	r28, 0x15	; 21
    1a34:	66 96       	adiw	r28, 0x16	; 22
    1a36:	2f ac       	ldd	r2, Y+63	; 0x3f
    1a38:	66 97       	sbiw	r28, 0x16	; 22
    1a3a:	67 96       	adiw	r28, 0x17	; 23
    1a3c:	3f ac       	ldd	r3, Y+63	; 0x3f
    1a3e:	67 97       	sbiw	r28, 0x17	; 23
        }
         
        
        
        //SEND COMMANDS
        if (flag_timer == 1)
    1a40:	80 91 52 01 	lds	r24, 0x0152
    1a44:	90 91 53 01 	lds	r25, 0x0153
    1a48:	01 97       	sbiw	r24, 0x01	; 1
    1a4a:	09 f0       	breq	.+2      	; 0x1a4e <main+0x3d0>
    1a4c:	b9 c0       	rjmp	.+370    	; 0x1bc0 <main+0x542>
            		
				//DEBUG COMMANDS SENDING
				//Open the channel
				m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);*/	
            
                output_buffer[0] = 1;
    1a4e:	21 e0       	ldi	r18, 0x01	; 1
    1a50:	2d 83       	std	Y+5, r18	; 0x05
				output_buffer[1] = state;
    1a52:	80 91 50 01 	lds	r24, 0x0150
    1a56:	8e 83       	std	Y+6, r24	; 0x06
				output_buffer[2] = x_robot;
    1a58:	8d ad       	ldd	r24, Y+61	; 0x3d
    1a5a:	8f 83       	std	Y+7, r24	; 0x07
				output_buffer[3] = y_robot;
    1a5c:	8f ad       	ldd	r24, Y+63	; 0x3f
    1a5e:	88 87       	std	Y+8, r24	; 0x08
							
				aux_conversion = div(theta_robot,128);
    1a60:	60 e8       	ldi	r22, 0x80	; 128
    1a62:	70 e0       	ldi	r23, 0x00	; 0
    1a64:	23 96       	adiw	r28, 0x03	; 3
    1a66:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a68:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a6a:	23 97       	sbiw	r28, 0x03	; 3
    1a6c:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[4] = (signed char)aux_conversion.quot;
    1a70:	69 87       	std	Y+9, r22	; 0x09
				output_buffer[5] = (signed char)aux_conversion.rem;
    1a72:	8a 87       	std	Y+10, r24	; 0x0a
			
				output_buffer[6] = (signed char)status_go_to_goal;
    1a74:	6c 96       	adiw	r28, 0x1c	; 28
    1a76:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a78:	6c 97       	sbiw	r28, 0x1c	; 28
    1a7a:	3b 87       	std	Y+11, r19	; 0x0b
			
				aux_conversion = div((int)dir_angle,128);
    1a7c:	ab 96       	adiw	r28, 0x2b	; 43
    1a7e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1a80:	ab 97       	sbiw	r28, 0x2b	; 43
    1a82:	ac 96       	adiw	r28, 0x2c	; 44
    1a84:	4f ad       	ldd	r20, Y+63	; 0x3f
    1a86:	ac 97       	sbiw	r28, 0x2c	; 44
    1a88:	ad 96       	adiw	r28, 0x2d	; 45
    1a8a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1a8c:	ad 97       	sbiw	r28, 0x2d	; 45
    1a8e:	ae 96       	adiw	r28, 0x2e	; 46
    1a90:	2f ad       	ldd	r18, Y+63	; 0x3f
    1a92:	ae 97       	sbiw	r28, 0x2e	; 46
    1a94:	65 2f       	mov	r22, r21
    1a96:	74 2f       	mov	r23, r20
    1a98:	83 2f       	mov	r24, r19
    1a9a:	92 2f       	mov	r25, r18
    1a9c:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	60 e8       	ldi	r22, 0x80	; 128
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[7] = (signed char)aux_conversion.quot;
    1aac:	6c 87       	std	Y+12, r22	; 0x0c
				output_buffer[8] = (signed char)aux_conversion.rem;
    1aae:	8d 87       	std	Y+13, r24	; 0x0d
			
				aux_conversion = div((int)dist_goal,128);
    1ab0:	aa 96       	adiw	r28, 0x2a	; 42
    1ab2:	6c ad       	ldd	r22, Y+60	; 0x3c
    1ab4:	7d ad       	ldd	r23, Y+61	; 0x3d
    1ab6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ab8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aba:	aa 97       	sbiw	r28, 0x2a	; 42
    1abc:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	60 e8       	ldi	r22, 0x80	; 128
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[9] = (signed char)aux_conversion.quot;
    1acc:	6e 87       	std	Y+14, r22	; 0x0e
				output_buffer[10] = (signed char)aux_conversion.rem;
    1ace:	8f 87       	std	Y+15, r24	; 0x0f
			
				aux_conversion = div(cam_X,128);
    1ad0:	60 e8       	ldi	r22, 0x80	; 128
    1ad2:	70 e0       	ldi	r23, 0x00	; 0
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ad8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[11] = (signed char)aux_conversion.quot;
    1adc:	68 8b       	std	Y+16, r22	; 0x10
				output_buffer[12] = (signed char)aux_conversion.rem;
    1ade:	89 8b       	std	Y+17, r24	; 0x11
			
				aux_conversion = div(cam_Y,128);
    1ae0:	60 e8       	ldi	r22, 0x80	; 128
    1ae2:	70 e0       	ldi	r23, 0x00	; 0
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[13] = (signed char)aux_conversion.quot;
    1aec:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[14] = (signed char)aux_conversion.rem;
    1aee:	8b 8b       	std	Y+19, r24	; 0x13
			
				output_buffer[15] = (signed char)commands_var;
    1af0:	6e 96       	adiw	r28, 0x1e	; 30
    1af2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1af4:	6e 97       	sbiw	r28, 0x1e	; 30
    1af6:	8c 8b       	std	Y+20, r24	; 0x14
			
				aux_conversion = div((int)diff_theta,128);
    1af8:	68 96       	adiw	r28, 0x18	; 24
    1afa:	5f ad       	ldd	r21, Y+63	; 0x3f
    1afc:	68 97       	sbiw	r28, 0x18	; 24
    1afe:	69 96       	adiw	r28, 0x19	; 25
    1b00:	4f ad       	ldd	r20, Y+63	; 0x3f
    1b02:	69 97       	sbiw	r28, 0x19	; 25
    1b04:	6a 96       	adiw	r28, 0x1a	; 26
    1b06:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b08:	6a 97       	sbiw	r28, 0x1a	; 26
    1b0a:	6b 96       	adiw	r28, 0x1b	; 27
    1b0c:	2f ad       	ldd	r18, Y+63	; 0x3f
    1b0e:	6b 97       	sbiw	r28, 0x1b	; 27
    1b10:	65 2f       	mov	r22, r21
    1b12:	74 2f       	mov	r23, r20
    1b14:	83 2f       	mov	r24, r19
    1b16:	92 2f       	mov	r25, r18
    1b18:	0e 94 f1 1a 	call	0x35e2	; 0x35e2 <__fixsfsi>
    1b1c:	dc 01       	movw	r26, r24
    1b1e:	cb 01       	movw	r24, r22
    1b20:	60 e8       	ldi	r22, 0x80	; 128
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[16] = (signed char)aux_conversion.quot;
    1b28:	6d 8b       	std	Y+21, r22	; 0x15
				output_buffer[17] = (signed char)aux_conversion.rem;
    1b2a:	8e 8b       	std	Y+22, r24	; 0x16
			
				aux_conversion = div(PT1_left_outside,128);
    1b2c:	60 e8       	ldi	r22, 0x80	; 128
    1b2e:	70 e0       	ldi	r23, 0x00	; 0
    1b30:	82 2d       	mov	r24, r2
    1b32:	93 2d       	mov	r25, r3
    1b34:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[18] = (signed char)aux_conversion.quot;
    1b38:	6f 8b       	std	Y+23, r22	; 0x17
				output_buffer[19] = (signed char)aux_conversion.rem;
    1b3a:	88 8f       	std	Y+24, r24	; 0x18
				
				aux_conversion = div(PT2_left_inside,128);
    1b3c:	60 e8       	ldi	r22, 0x80	; 128
    1b3e:	70 e0       	ldi	r23, 0x00	; 0
    1b40:	88 2d       	mov	r24, r8
    1b42:	99 2d       	mov	r25, r9
    1b44:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[20] = (signed char)aux_conversion.quot;
    1b48:	69 8f       	std	Y+25, r22	; 0x19
				output_buffer[21] = (signed char)aux_conversion.rem;
    1b4a:	8a 8f       	std	Y+26, r24	; 0x1a
				
				aux_conversion = div(PT3_right_inside,128);
    1b4c:	60 e8       	ldi	r22, 0x80	; 128
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	8a 2d       	mov	r24, r10
    1b52:	9b 2d       	mov	r25, r11
    1b54:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[22] = (signed char)aux_conversion.quot;
    1b58:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[23] = (signed char)aux_conversion.rem;
    1b5a:	8c 8f       	std	Y+28, r24	; 0x1c
				
				aux_conversion = div(PT4_right_outside,128);
    1b5c:	60 e8       	ldi	r22, 0x80	; 128
    1b5e:	70 e0       	ldi	r23, 0x00	; 0
    1b60:	8c 2d       	mov	r24, r12
    1b62:	9d 2d       	mov	r25, r13
    1b64:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[24] = (signed char)aux_conversion.quot;
    1b68:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[25] = (signed char)aux_conversion.rem;
    1b6a:	8e 8f       	std	Y+30, r24	; 0x1e
				
				aux_conversion = div(PT5_back_right,128);
    1b6c:	60 e8       	ldi	r22, 0x80	; 128
    1b6e:	70 e0       	ldi	r23, 0x00	; 0
    1b70:	8e 2d       	mov	r24, r14
    1b72:	9f 2d       	mov	r25, r15
    1b74:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[26] = (signed char)aux_conversion.quot;
    1b78:	6f 8f       	std	Y+31, r22	; 0x1f
				output_buffer[27] = (signed char)aux_conversion.rem;
    1b7a:	88 a3       	std	Y+32, r24	; 0x20
				
				aux_conversion = div(PT6_back_left,128);
    1b7c:	60 e8       	ldi	r22, 0x80	; 128
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	80 2f       	mov	r24, r16
    1b82:	91 2f       	mov	r25, r17
    1b84:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[28] = (signed char)aux_conversion.quot;
    1b88:	69 a3       	std	Y+33, r22	; 0x21
				output_buffer[29] = (signed char)aux_conversion.rem;
    1b8a:	8a a3       	std	Y+34, r24	; 0x22
				
				aux_conversion = div(PT7_have_puck,128);
    1b8c:	60 e8       	ldi	r22, 0x80	; 128
    1b8e:	70 e0       	ldi	r23, 0x00	; 0
    1b90:	a1 96       	adiw	r28, 0x21	; 33
    1b92:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b94:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b96:	a1 97       	sbiw	r28, 0x21	; 33
    1b98:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <__divmodhi4>
				output_buffer[30] = (signed char)aux_conversion.quot;
    1b9c:	6b a3       	std	Y+35, r22	; 0x23
				output_buffer[31] = (signed char)aux_conversion.rem;
    1b9e:	8c a3       	std	Y+36, r24	; 0x24
			
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
    1ba0:	40 e2       	ldi	r20, 0x20	; 32
    1ba2:	be 01       	movw	r22, r28
    1ba4:	6b 5f       	subi	r22, 0xFB	; 251
    1ba6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ba8:	80 e6       	ldi	r24, 0x60	; 96
    1baa:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <m_rf_send>
				m_red(TOGGLE);
    1bae:	6e 9a       	sbi	0x0d, 6	; 13
    1bb0:	9e b1       	in	r25, 0x0e	; 14
    1bb2:	80 e4       	ldi	r24, 0x40	; 64
    1bb4:	89 27       	eor	r24, r25
    1bb6:	8e b9       	out	0x0e, r24	; 14
				timer_switch = 0;
			}*/
			
			
			//Reset flag
			flag_timer = 0;
    1bb8:	10 92 53 01 	sts	0x0153, r1
    1bbc:	10 92 52 01 	sts	0x0152, r1
				
			
        }
		
        //STATE COMMANDS
        switch (state)
    1bc0:	80 91 50 01 	lds	r24, 0x0150
    1bc4:	90 91 51 01 	lds	r25, 0x0151
    1bc8:	83 30       	cpi	r24, 0x03	; 3
    1bca:	91 05       	cpc	r25, r1
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <main+0x552>
    1bce:	f8 c3       	rjmp	.+2032   	; 0x23c0 <main+0xd42>
    1bd0:	44 f4       	brge	.+16     	; 0x1be2 <main+0x564>
    1bd2:	81 30       	cpi	r24, 0x01	; 1
    1bd4:	91 05       	cpc	r25, r1
    1bd6:	59 f1       	breq	.+86     	; 0x1c2e <main+0x5b0>
    1bd8:	0c f0       	brlt	.+2      	; 0x1bdc <main+0x55e>
    1bda:	e4 c1       	rjmp	.+968    	; 0x1fa4 <main+0x926>
    1bdc:	89 2b       	or	r24, r25
    1bde:	69 f0       	breq	.+26     	; 0x1bfa <main+0x57c>
    1be0:	da c6       	rjmp	.+3508   	; 0x2996 <main+0x1318>
    1be2:	86 31       	cpi	r24, 0x16	; 22
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <main+0x56c>
    1be8:	c4 c6       	rjmp	.+3464   	; 0x2972 <main+0x12f4>
    1bea:	83 36       	cpi	r24, 0x63	; 99
    1bec:	91 05       	cpc	r25, r1
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <main+0x574>
    1bf0:	4c c6       	rjmp	.+3224   	; 0x288a <main+0x120c>
    1bf2:	45 97       	sbiw	r24, 0x15	; 21
    1bf4:	09 f0       	breq	.+2      	; 0x1bf8 <main+0x57a>
    1bf6:	cf c6       	rjmp	.+3486   	; 0x2996 <main+0x1318>
    1bf8:	c8 c6       	rjmp	.+3472   	; 0x298a <main+0x130c>
        {
			long stop_counter = 0;
            case INITIAL_STATE:
				//m_green(ON);
                if (check(PINB,2))
    1bfa:	1a 9b       	sbis	0x03, 2	; 3
    1bfc:	07 c0       	rjmp	.+14     	; 0x1c0c <main+0x58e>
                {
                    goal_pos_x = GOAL_A_POS_X;
    1bfe:	ad e8       	ldi	r26, 0x8D	; 141
    1c00:	bf ef       	ldi	r27, 0xFF	; 255
    1c02:	a3 96       	adiw	r28, 0x23	; 35
    1c04:	bf af       	std	Y+63, r27	; 0x3f
    1c06:	ae af       	std	Y+62, r26	; 0x3e
    1c08:	a3 97       	sbiw	r28, 0x23	; 35
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <main+0x59a>
                    goal_pos_y = GOAL_A_POS_Y;
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
    1c0c:	e3 e7       	ldi	r30, 0x73	; 115
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	a3 96       	adiw	r28, 0x23	; 35
    1c12:	ff af       	std	Y+63, r31	; 0x3f
    1c14:	ee af       	std	Y+62, r30	; 0x3e
    1c16:	a3 97       	sbiw	r28, 0x23	; 35
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                state = GO_TO_GOAL_WITH_PUCK;
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	90 93 51 01 	sts	0x0151, r25
    1c20:	80 93 50 01 	sts	0x0150, r24
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    1c24:	6d 96       	adiw	r28, 0x1d	; 29
    1c26:	1f ae       	std	Y+63, r1	; 0x3f
    1c28:	1e ae       	std	Y+62, r1	; 0x3e
    1c2a:	6d 97       	sbiw	r28, 0x1d	; 29
                state = GO_TO_GOAL_WITH_PUCK;
                break;
    1c2c:	04 ce       	rjmp	.-1016   	; 0x1836 <main+0x1b8>
                
            case GO_TO_GOAL:
                if (status_go_to_goal == 0)
    1c2e:	6d 96       	adiw	r28, 0x1d	; 29
    1c30:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c32:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c34:	6d 97       	sbiw	r28, 0x1d	; 29
    1c36:	23 2b       	or	r18, r19
    1c38:	09 f0       	breq	.+2      	; 0x1c3c <main+0x5be>
    1c3a:	41 c0       	rjmp	.+130    	; 0x1cbe <main+0x640>
                {
                    dir_x = goal_pos_x-x_robot;
                    dir_y = goal_pos_y-y_robot;
    1c3c:	21 96       	adiw	r28, 0x01	; 1
    1c3e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1c40:	7f ad       	ldd	r23, Y+63	; 0x3f
    1c42:	21 97       	sbiw	r28, 0x01	; 1
    1c44:	71 95       	neg	r23
    1c46:	61 95       	neg	r22
    1c48:	71 09       	sbc	r23, r1
    1c4a:	88 27       	eor	r24, r24
    1c4c:	77 fd       	sbrc	r23, 7
    1c4e:	80 95       	com	r24
    1c50:	98 2f       	mov	r25, r24
    1c52:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    1c56:	6b 01       	movw	r12, r22
    1c58:	7c 01       	movw	r14, r24
                break;
                
            case GO_TO_GOAL:
                if (status_go_to_goal == 0)
                {
                    dir_x = goal_pos_x-x_robot;
    1c5a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c5c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c5e:	a3 96       	adiw	r28, 0x23	; 35
    1c60:	6e ad       	ldd	r22, Y+62	; 0x3e
    1c62:	7f ad       	ldd	r23, Y+63	; 0x3f
    1c64:	a3 97       	sbiw	r28, 0x23	; 35
    1c66:	68 1b       	sub	r22, r24
    1c68:	79 0b       	sbc	r23, r25
    1c6a:	88 27       	eor	r24, r24
    1c6c:	77 fd       	sbrc	r23, 7
    1c6e:	80 95       	com	r24
    1c70:	98 2f       	mov	r25, r24
    1c72:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
                    dir_y = goal_pos_y-y_robot;
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1c76:	90 58       	subi	r25, 0x80	; 128
    1c78:	a7 01       	movw	r20, r14
    1c7a:	96 01       	movw	r18, r12
    1c7c:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
    1c80:	20 e0       	ldi	r18, 0x00	; 0
    1c82:	30 e0       	ldi	r19, 0x00	; 0
    1c84:	44 e3       	ldi	r20, 0x34	; 52
    1c86:	53 e4       	ldi	r21, 0x43	; 67
    1c88:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1c8c:	2b ed       	ldi	r18, 0xDB	; 219
    1c8e:	3f e0       	ldi	r19, 0x0F	; 15
    1c90:	49 e4       	ldi	r20, 0x49	; 73
    1c92:	50 e4       	ldi	r21, 0x40	; 64
    1c94:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
    1c98:	ab 96       	adiw	r28, 0x2b	; 43
    1c9a:	6f af       	std	Y+63, r22	; 0x3f
    1c9c:	ab 97       	sbiw	r28, 0x2b	; 43
    1c9e:	ac 96       	adiw	r28, 0x2c	; 44
    1ca0:	7f af       	std	Y+63, r23	; 0x3f
    1ca2:	ac 97       	sbiw	r28, 0x2c	; 44
    1ca4:	ad 96       	adiw	r28, 0x2d	; 45
    1ca6:	8f af       	std	Y+63, r24	; 0x3f
    1ca8:	ad 97       	sbiw	r28, 0x2d	; 45
    1caa:	ae 96       	adiw	r28, 0x2e	; 46
    1cac:	9f af       	std	Y+63, r25	; 0x3f
    1cae:	ae 97       	sbiw	r28, 0x2e	; 46
                    
                    status_go_to_goal = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	6d 96       	adiw	r28, 0x1d	; 29
    1cb6:	9f af       	std	Y+63, r25	; 0x3f
    1cb8:	8e af       	std	Y+62, r24	; 0x3e
    1cba:	6d 97       	sbiw	r28, 0x1d	; 29
    1cbc:	bc cd       	rjmp	.-1160   	; 0x1836 <main+0x1b8>
                }else if (status_go_to_goal == 1)
    1cbe:	6d 96       	adiw	r28, 0x1d	; 29
    1cc0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1cc2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1cc4:	6d 97       	sbiw	r28, 0x1d	; 29
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	09 f0       	breq	.+2      	; 0x1ccc <main+0x64e>
    1cca:	2a c1       	rjmp	.+596    	; 0x1f20 <main+0x8a2>
                {
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
    1ccc:	21 96       	adiw	r28, 0x01	; 1
    1cce:	6e ad       	ldd	r22, Y+62	; 0x3e
    1cd0:	7f ad       	ldd	r23, Y+63	; 0x3f
    1cd2:	21 97       	sbiw	r28, 0x01	; 1
    1cd4:	71 95       	neg	r23
    1cd6:	61 95       	neg	r22
    1cd8:	71 09       	sbc	r23, r1
    1cda:	88 27       	eor	r24, r24
    1cdc:	77 fd       	sbrc	r23, 7
    1cde:	80 95       	com	r24
    1ce0:	98 2f       	mov	r25, r24
    1ce2:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    1ce6:	6b 01       	movw	r12, r22
    1ce8:	7c 01       	movw	r14, r24
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
                    
                    status_go_to_goal = 1;
                }else if (status_go_to_goal == 1)
                {
					dir_x = goal_pos_x-x_robot;
    1cea:	8d ad       	ldd	r24, Y+61	; 0x3d
    1cec:	9e ad       	ldd	r25, Y+62	; 0x3e
    1cee:	a3 96       	adiw	r28, 0x23	; 35
    1cf0:	6e ad       	ldd	r22, Y+62	; 0x3e
    1cf2:	7f ad       	ldd	r23, Y+63	; 0x3f
    1cf4:	a3 97       	sbiw	r28, 0x23	; 35
    1cf6:	68 1b       	sub	r22, r24
    1cf8:	79 0b       	sbc	r23, r25
    1cfa:	88 27       	eor	r24, r24
    1cfc:	77 fd       	sbrc	r23, 7
    1cfe:	80 95       	com	r24
    1d00:	98 2f       	mov	r25, r24
    1d02:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1d06:	90 58       	subi	r25, 0x80	; 128
    1d08:	a7 01       	movw	r20, r14
    1d0a:	96 01       	movw	r18, r12
    1d0c:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	44 e3       	ldi	r20, 0x34	; 52
    1d16:	53 e4       	ldi	r21, 0x43	; 67
    1d18:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    1d1c:	2b ed       	ldi	r18, 0xDB	; 219
    1d1e:	3f e0       	ldi	r19, 0x0F	; 15
    1d20:	49 e4       	ldi	r20, 0x49	; 73
    1d22:	50 e4       	ldi	r21, 0x40	; 64
    1d24:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
    1d28:	b6 2e       	mov	r11, r22
    1d2a:	a7 2e       	mov	r10, r23
    1d2c:	98 2e       	mov	r9, r24
    1d2e:	89 2e       	mov	r8, r25
    1d30:	ab 96       	adiw	r28, 0x2b	; 43
    1d32:	6f af       	std	Y+63, r22	; 0x3f
    1d34:	ab 97       	sbiw	r28, 0x2b	; 43
    1d36:	ac 96       	adiw	r28, 0x2c	; 44
    1d38:	7f af       	std	Y+63, r23	; 0x3f
    1d3a:	ac 97       	sbiw	r28, 0x2c	; 44
    1d3c:	ad 96       	adiw	r28, 0x2d	; 45
    1d3e:	8f af       	std	Y+63, r24	; 0x3f
    1d40:	ad 97       	sbiw	r28, 0x2d	; 45
    1d42:	ae 96       	adiw	r28, 0x2e	; 46
    1d44:	9f af       	std	Y+63, r25	; 0x3f
    1d46:	ae 97       	sbiw	r28, 0x2e	; 46
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
    1d48:	23 96       	adiw	r28, 0x03	; 3
    1d4a:	0e ad       	ldd	r16, Y+62	; 0x3e
    1d4c:	1f ad       	ldd	r17, Y+63	; 0x3f
    1d4e:	23 97       	sbiw	r28, 0x03	; 3
    1d50:	b8 01       	movw	r22, r16
    1d52:	88 27       	eor	r24, r24
    1d54:	77 fd       	sbrc	r23, 7
    1d56:	80 95       	com	r24
    1d58:	98 2f       	mov	r25, r24
    1d5a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    1d5e:	6b 01       	movw	r12, r22
    1d60:	7c 01       	movw	r14, r24
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 ee       	ldi	r20, 0xE0	; 224
    1d68:	50 e4       	ldi	r21, 0x40	; 64
    1d6a:	6b 2d       	mov	r22, r11
    1d6c:	7a 2d       	mov	r23, r10
    1d6e:	89 2d       	mov	r24, r9
    1d70:	98 2d       	mov	r25, r8
    1d72:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    1d76:	9b 01       	movw	r18, r22
    1d78:	ac 01       	movw	r20, r24
    1d7a:	c7 01       	movw	r24, r14
    1d7c:	b6 01       	movw	r22, r12
    1d7e:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    1d82:	88 23       	and	r24, r24
    1d84:	9c f0       	brlt	.+38     	; 0x1dac <main+0x72e>
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	40 ee       	ldi	r20, 0xE0	; 224
    1d8c:	50 e4       	ldi	r21, 0x40	; 64
    1d8e:	6b 2d       	mov	r22, r11
    1d90:	7a 2d       	mov	r23, r10
    1d92:	89 2d       	mov	r24, r9
    1d94:	98 2d       	mov	r25, r8
    1d96:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    1d9a:	9b 01       	movw	r18, r22
    1d9c:	ac 01       	movw	r20, r24
    1d9e:	c7 01       	movw	r24, r14
    1da0:	b6 01       	movw	r22, r12
    1da2:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    1da6:	18 16       	cp	r1, r24
    1da8:	0c f0       	brlt	.+2      	; 0x1dac <main+0x72e>
    1daa:	22 cd       	rjmp	.-1468   	; 0x17f0 <main+0x172>
                        status_go_to_goal = 2;
                    else
                    {
                        float angle_dir_aux = dir_angle-180;
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	44 e3       	ldi	r20, 0x34	; 52
    1db2:	53 e4       	ldi	r21, 0x43	; 67
    1db4:	6b 2d       	mov	r22, r11
    1db6:	7a 2d       	mov	r23, r10
    1db8:	89 2d       	mov	r24, r9
    1dba:	98 2d       	mov	r25, r8
    1dbc:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    1dc0:	36 2e       	mov	r3, r22
    1dc2:	27 2e       	mov	r2, r23
    1dc4:	6e 96       	adiw	r28, 0x1e	; 30
    1dc6:	8f af       	std	Y+63, r24	; 0x3f
    1dc8:	6e 97       	sbiw	r28, 0x1e	; 30
    1dca:	a4 96       	adiw	r28, 0x24	; 36
    1dcc:	9f af       	std	Y+63, r25	; 0x3f
    1dce:	a4 97       	sbiw	r28, 0x24	; 36
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	44 e3       	ldi	r20, 0x34	; 52
    1dd6:	53 ec       	ldi	r21, 0xC3	; 195
    1dd8:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    1ddc:	88 23       	and	r24, r24
    1dde:	0c f0       	brlt	.+2      	; 0x1de2 <main+0x764>
    1de0:	e9 c5       	rjmp	.+3026   	; 0x29b4 <main+0x1336>
                        {
                            angle_dir_aux += 360;
    1de2:	20 e0       	ldi	r18, 0x00	; 0
    1de4:	30 e0       	ldi	r19, 0x00	; 0
    1de6:	44 eb       	ldi	r20, 0xB4	; 180
    1de8:	53 e4       	ldi	r21, 0x43	; 67
    1dea:	6e 96       	adiw	r28, 0x1e	; 30
    1dec:	af ad       	ldd	r26, Y+63	; 0x3f
    1dee:	6e 97       	sbiw	r28, 0x1e	; 30
    1df0:	a4 96       	adiw	r28, 0x24	; 36
    1df2:	ff ad       	ldd	r31, Y+63	; 0x3f
    1df4:	a4 97       	sbiw	r28, 0x24	; 36
    1df6:	63 2d       	mov	r22, r3
    1df8:	72 2d       	mov	r23, r2
    1dfa:	8a 2f       	mov	r24, r26
    1dfc:	9f 2f       	mov	r25, r31
    1dfe:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    1e02:	6e 96       	adiw	r28, 0x1e	; 30
    1e04:	6f af       	std	Y+63, r22	; 0x3f
    1e06:	6e 97       	sbiw	r28, 0x1e	; 30
    1e08:	a4 96       	adiw	r28, 0x24	; 36
    1e0a:	7f af       	std	Y+63, r23	; 0x3f
    1e0c:	a4 97       	sbiw	r28, 0x24	; 36
    1e0e:	28 2e       	mov	r2, r24
    1e10:	39 2e       	mov	r3, r25
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
						{
                            turn_right();
							commands_var = 2;
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1e12:	a7 01       	movw	r20, r14
    1e14:	96 01       	movw	r18, r12
    1e16:	6b 2d       	mov	r22, r11
    1e18:	7a 2d       	mov	r23, r10
    1e1a:	89 2d       	mov	r24, r9
    1e1c:	98 2d       	mov	r25, r8
    1e1e:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    1e22:	88 23       	and	r24, r24
    1e24:	c4 f5       	brge	.+112    	; 0x1e96 <main+0x818>
    1e26:	3b c0       	rjmp	.+118    	; 0x1e9e <main+0x820>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1e28:	a7 01       	movw	r20, r14
    1e2a:	96 01       	movw	r18, r12
    1e2c:	6b 2d       	mov	r22, r11
    1e2e:	7a 2d       	mov	r23, r10
    1e30:	89 2d       	mov	r24, r9
    1e32:	98 2d       	mov	r25, r8
    1e34:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    1e38:	88 23       	and	r24, r24
    1e3a:	4c f0       	brlt	.+18     	; 0x1e4e <main+0x7d0>
						{
                            turn_left();
    1e3c:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <turn_left>
							commands_var = 1;
    1e40:	e1 e0       	ldi	r30, 0x01	; 1
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	6f 96       	adiw	r28, 0x1f	; 31
    1e46:	ff af       	std	Y+63, r31	; 0x3f
    1e48:	ee af       	std	Y+62, r30	; 0x3e
    1e4a:	6f 97       	sbiw	r28, 0x1f	; 31
    1e4c:	f4 cc       	rjmp	.-1560   	; 0x1836 <main+0x1b8>
                        }
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    1e4e:	6e 96       	adiw	r28, 0x1e	; 30
    1e50:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e52:	6e 97       	sbiw	r28, 0x1e	; 30
    1e54:	a4 96       	adiw	r28, 0x24	; 36
    1e56:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e58:	a4 97       	sbiw	r28, 0x24	; 36
    1e5a:	23 2d       	mov	r18, r3
    1e5c:	32 2d       	mov	r19, r2
    1e5e:	49 2f       	mov	r20, r25
    1e60:	58 2f       	mov	r21, r24
    1e62:	c7 01       	movw	r24, r14
    1e64:	b6 01       	movw	r22, r12
    1e66:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	5c f0       	brlt	.+22     	; 0x1e84 <main+0x806>
    1e6e:	a7 01       	movw	r20, r14
    1e70:	96 01       	movw	r18, r12
    1e72:	6b 2d       	mov	r22, r11
    1e74:	7a 2d       	mov	r23, r10
    1e76:	89 2d       	mov	r24, r9
    1e78:	98 2d       	mov	r25, r8
    1e7a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    1e7e:	88 23       	and	r24, r24
    1e80:	0c f0       	brlt	.+2      	; 0x1e84 <main+0x806>
    1e82:	bd cc       	rjmp	.-1670   	; 0x17fe <main+0x180>
						{
                            turn_right();
    1e84:	0e 94 86 0a 	call	0x150c	; 0x150c <turn_right>
							commands_var = 2;
    1e88:	22 e0       	ldi	r18, 0x02	; 2
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	6f 96       	adiw	r28, 0x1f	; 31
    1e8e:	3f af       	std	Y+63, r19	; 0x3f
    1e90:	2e af       	std	Y+62, r18	; 0x3e
    1e92:	6f 97       	sbiw	r28, 0x1f	; 31
    1e94:	d0 cc       	rjmp	.-1632   	; 0x1836 <main+0x1b8>
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1e96:	0c 34       	cpi	r16, 0x4C	; 76
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	13 07       	cpc	r17, r19
    1e9c:	9c f4       	brge	.+38     	; 0x1ec4 <main+0x846>
    1e9e:	6e 96       	adiw	r28, 0x1e	; 30
    1ea0:	7f ad       	ldd	r23, Y+63	; 0x3f
    1ea2:	6e 97       	sbiw	r28, 0x1e	; 30
    1ea4:	a4 96       	adiw	r28, 0x24	; 36
    1ea6:	6f ad       	ldd	r22, Y+63	; 0x3f
    1ea8:	a4 97       	sbiw	r28, 0x24	; 36
    1eaa:	27 2f       	mov	r18, r23
    1eac:	36 2f       	mov	r19, r22
    1eae:	42 2d       	mov	r20, r2
    1eb0:	53 2d       	mov	r21, r3
    1eb2:	c7 01       	movw	r24, r14
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    1eba:	88 23       	and	r24, r24
    1ebc:	64 f0       	brlt	.+24     	; 0x1ed6 <main+0x858>
    1ebe:	05 3b       	cpi	r16, 0xB5	; 181
    1ec0:	11 05       	cpc	r17, r1
    1ec2:	4c f4       	brge	.+18     	; 0x1ed6 <main+0x858>
						{
                            turn_left();
    1ec4:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <turn_left>
							commands_var = 3;
    1ec8:	83 e0       	ldi	r24, 0x03	; 3
    1eca:	90 e0       	ldi	r25, 0x00	; 0
    1ecc:	6f 96       	adiw	r28, 0x1f	; 31
    1ece:	9f af       	std	Y+63, r25	; 0x3f
    1ed0:	8e af       	std	Y+62, r24	; 0x3e
    1ed2:	6f 97       	sbiw	r28, 0x1f	; 31
    1ed4:	b0 cc       	rjmp	.-1696   	; 0x1836 <main+0x1b8>
						}
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    1ed6:	a7 01       	movw	r20, r14
    1ed8:	96 01       	movw	r18, r12
    1eda:	6b 2d       	mov	r22, r11
    1edc:	7a 2d       	mov	r23, r10
    1ede:	89 2d       	mov	r24, r9
    1ee0:	98 2d       	mov	r25, r8
    1ee2:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    1ee6:	88 23       	and	r24, r24
    1ee8:	0c f0       	brlt	.+2      	; 0x1eec <main+0x86e>
    1eea:	8e cc       	rjmp	.-1764   	; 0x1808 <main+0x18a>
    1eec:	6e 96       	adiw	r28, 0x1e	; 30
    1eee:	7f ad       	ldd	r23, Y+63	; 0x3f
    1ef0:	6e 97       	sbiw	r28, 0x1e	; 30
    1ef2:	a4 96       	adiw	r28, 0x24	; 36
    1ef4:	6f ad       	ldd	r22, Y+63	; 0x3f
    1ef6:	a4 97       	sbiw	r28, 0x24	; 36
    1ef8:	27 2f       	mov	r18, r23
    1efa:	36 2f       	mov	r19, r22
    1efc:	42 2d       	mov	r20, r2
    1efe:	53 2d       	mov	r21, r3
    1f00:	c7 01       	movw	r24, r14
    1f02:	b6 01       	movw	r22, r12
    1f04:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	0c f0       	brlt	.+2      	; 0x1f0e <main+0x890>
    1f0c:	82 cc       	rjmp	.-1788   	; 0x1812 <main+0x194>
						{
                            turn_right();
    1f0e:	0e 94 86 0a 	call	0x150c	; 0x150c <turn_right>
							commands_var = 4;
    1f12:	a4 e0       	ldi	r26, 0x04	; 4
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
    1f16:	6f 96       	adiw	r28, 0x1f	; 31
    1f18:	bf af       	std	Y+63, r27	; 0x3f
    1f1a:	ae af       	std	Y+62, r26	; 0x3e
    1f1c:	6f 97       	sbiw	r28, 0x1f	; 31
    1f1e:	8b cc       	rjmp	.-1770   	; 0x1836 <main+0x1b8>
						}else
							commands_var = 0;
                        
                    }
                }else if (status_go_to_goal == 2)
    1f20:	6d 96       	adiw	r28, 0x1d	; 29
    1f22:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f24:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f26:	6d 97       	sbiw	r28, 0x1d	; 29
    1f28:	32 97       	sbiw	r30, 0x02	; 2
    1f2a:	51 f5       	brne	.+84     	; 0x1f80 <main+0x902>
                {
					state = GO_TO_GOAL_CURVED;
    1f2c:	82 e0       	ldi	r24, 0x02	; 2
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	90 93 51 01 	sts	0x0151, r25
    1f34:	80 93 50 01 	sts	0x0150, r24
					status_go_to_goal = 0;
					stop_counter = 0;
					if (commands_var == 1 || commands_var == 3)
    1f38:	6f 96       	adiw	r28, 0x1f	; 31
    1f3a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f3c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f3e:	6f 97       	sbiw	r28, 0x1f	; 31
    1f40:	21 30       	cpi	r18, 0x01	; 1
    1f42:	31 05       	cpc	r19, r1
    1f44:	19 f0       	breq	.+6      	; 0x1f4c <main+0x8ce>
    1f46:	23 30       	cpi	r18, 0x03	; 3
    1f48:	31 05       	cpc	r19, r1
    1f4a:	19 f4       	brne	.+6      	; 0x1f52 <main+0x8d4>
						turn_right();
    1f4c:	0e 94 86 0a 	call	0x150c	; 0x150c <turn_right>
    1f50:	43 c5       	rjmp	.+2694   	; 0x29d8 <main+0x135a>
					else if (commands_var == 2 || commands_var == 4)
    1f52:	6f 96       	adiw	r28, 0x1f	; 31
    1f54:	8e ad       	ldd	r24, Y+62	; 0x3e
    1f56:	9f ad       	ldd	r25, Y+63	; 0x3f
    1f58:	6f 97       	sbiw	r28, 0x1f	; 31
    1f5a:	82 30       	cpi	r24, 0x02	; 2
    1f5c:	91 05       	cpc	r25, r1
    1f5e:	19 f0       	breq	.+6      	; 0x1f66 <main+0x8e8>
    1f60:	04 97       	sbiw	r24, 0x04	; 4
    1f62:	09 f0       	breq	.+2      	; 0x1f66 <main+0x8e8>
    1f64:	39 c5       	rjmp	.+2674   	; 0x29d8 <main+0x135a>
						turn_left();
    1f66:	0e 94 79 0a 	call	0x14f2	; 0x14f2 <turn_left>
    1f6a:	36 c5       	rjmp	.+2668   	; 0x29d8 <main+0x135a>
    1f6c:	01 96       	adiw	r24, 0x01	; 1
			
					while(stop_counter<TIME_STOP_TURNING)
    1f6e:	8c 34       	cpi	r24, 0x4C	; 76
    1f70:	ad e1       	ldi	r26, 0x1D	; 29
    1f72:	9a 07       	cpc	r25, r26
    1f74:	d9 f7       	brne	.-10     	; 0x1f6c <main+0x8ee>
                        
                    }
                }else if (status_go_to_goal == 2)
                {
					state = GO_TO_GOAL_CURVED;
					status_go_to_goal = 0;
    1f76:	6d 96       	adiw	r28, 0x1d	; 29
    1f78:	1f ae       	std	Y+63, r1	; 0x3f
    1f7a:	1e ae       	std	Y+62, r1	; 0x3e
    1f7c:	6d 97       	sbiw	r28, 0x1d	; 29
    1f7e:	5b cc       	rjmp	.-1866   	; 0x1836 <main+0x1b8>
						}
						
                        
                    }
                }
                else if (status_go_to_goal == 3)
    1f80:	6d 96       	adiw	r28, 0x1d	; 29
    1f82:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f84:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f86:	6d 97       	sbiw	r28, 0x1d	; 29
    1f88:	33 97       	sbiw	r30, 0x03	; 3
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <main+0x910>
    1f8c:	54 cc       	rjmp	.-1880   	; 0x1836 <main+0x1b8>
                {
                    //stop_motor();
                    status_go_to_goal = 0;
                    state = STOP_STATE;
    1f8e:	85 e1       	ldi	r24, 0x15	; 21
    1f90:	90 e0       	ldi	r25, 0x00	; 0
    1f92:	90 93 51 01 	sts	0x0151, r25
    1f96:	80 93 50 01 	sts	0x0150, r24
                    }
                }
                else if (status_go_to_goal == 3)
                {
                    //stop_motor();
                    status_go_to_goal = 0;
    1f9a:	6d 96       	adiw	r28, 0x1d	; 29
    1f9c:	1f ae       	std	Y+63, r1	; 0x3f
    1f9e:	1e ae       	std	Y+62, r1	; 0x3e
    1fa0:	6d 97       	sbiw	r28, 0x1d	; 29
    1fa2:	49 cc       	rjmp	.-1902   	; 0x1836 <main+0x1b8>
                break;
                
                
            case GO_TO_GOAL_CURVED:
                //m_green(ON);
				turnOnBlueLED();
    1fa4:	0e 94 3d 0b 	call	0x167a	; 0x167a <turnOnBlueLED>
                if (status_go_to_goal == 0)
    1fa8:	6d 96       	adiw	r28, 0x1d	; 29
    1faa:	2e ad       	ldd	r18, Y+62	; 0x3e
    1fac:	3f ad       	ldd	r19, Y+63	; 0x3f
    1fae:	6d 97       	sbiw	r28, 0x1d	; 29
    1fb0:	23 2b       	or	r18, r19
    1fb2:	09 f0       	breq	.+2      	; 0x1fb6 <main+0x938>
    1fb4:	e8 c1       	rjmp	.+976    	; 0x2386 <main+0xd08>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1fb6:	ed ac       	ldd	r14, Y+61	; 0x3d
    1fb8:	fe ac       	ldd	r15, Y+62	; 0x3e
    1fba:	c7 01       	movw	r24, r14
    1fbc:	a3 96       	adiw	r28, 0x23	; 35
    1fbe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1fc0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1fc2:	a3 97       	sbiw	r28, 0x23	; 35
    1fc4:	8a 1b       	sub	r24, r26
    1fc6:	9b 0b       	sbc	r25, r27
    1fc8:	21 96       	adiw	r28, 0x01	; 1
    1fca:	0e ad       	ldd	r16, Y+62	; 0x3e
    1fcc:	1f ad       	ldd	r17, Y+63	; 0x3f
    1fce:	21 97       	sbiw	r28, 0x01	; 1
    1fd0:	88 9f       	mul	r24, r24
    1fd2:	b0 01       	movw	r22, r0
    1fd4:	89 9f       	mul	r24, r25
    1fd6:	70 0d       	add	r23, r0
    1fd8:	70 0d       	add	r23, r0
    1fda:	11 24       	eor	r1, r1
    1fdc:	00 9f       	mul	r16, r16
    1fde:	c0 01       	movw	r24, r0
    1fe0:	01 9f       	mul	r16, r17
    1fe2:	90 0d       	add	r25, r0
    1fe4:	90 0d       	add	r25, r0
    1fe6:	11 24       	eor	r1, r1
    1fe8:	68 0f       	add	r22, r24
    1fea:	79 1f       	adc	r23, r25
    1fec:	88 27       	eor	r24, r24
    1fee:	77 fd       	sbrc	r23, 7
    1ff0:	80 95       	com	r24
    1ff2:	98 2f       	mov	r25, r24
    1ff4:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    1ff8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    1ffc:	aa 96       	adiw	r28, 0x2a	; 42
    1ffe:	6c af       	std	Y+60, r22	; 0x3c
    2000:	7d af       	std	Y+61, r23	; 0x3d
    2002:	8e af       	std	Y+62, r24	; 0x3e
    2004:	9f af       	std	Y+63, r25	; 0x3f
    2006:	aa 97       	sbiw	r28, 0x2a	; 42
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 ea       	ldi	r20, 0xA0	; 160
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    2014:	88 23       	and	r24, r24
    2016:	0c f4       	brge	.+2      	; 0x201a <main+0x99c>
    2018:	01 cc       	rjmp	.-2046   	; 0x181c <main+0x19e>
                        status_go_to_goal = 1;
                    else
                    {
                        
                        dir_x = goal_pos_x-x_robot;
                        dir_y = goal_pos_y-y_robot;
    201a:	66 27       	eor	r22, r22
    201c:	77 27       	eor	r23, r23
    201e:	60 1b       	sub	r22, r16
    2020:	71 0b       	sbc	r23, r17
    2022:	88 27       	eor	r24, r24
    2024:	77 fd       	sbrc	r23, 7
    2026:	80 95       	com	r24
    2028:	98 2f       	mov	r25, r24
    202a:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    202e:	4b 01       	movw	r8, r22
    2030:	5c 01       	movw	r10, r24
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 1;
                    else
                    {
                        
                        dir_x = goal_pos_x-x_robot;
    2032:	a3 96       	adiw	r28, 0x23	; 35
    2034:	6e ad       	ldd	r22, Y+62	; 0x3e
    2036:	7f ad       	ldd	r23, Y+63	; 0x3f
    2038:	a3 97       	sbiw	r28, 0x23	; 35
    203a:	6e 19       	sub	r22, r14
    203c:	7f 09       	sbc	r23, r15
    203e:	88 27       	eor	r24, r24
    2040:	77 fd       	sbrc	r23, 7
    2042:	80 95       	com	r24
    2044:	98 2f       	mov	r25, r24
    2046:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
                        dir_y = goal_pos_y-y_robot;
                        dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    204a:	90 58       	subi	r25, 0x80	; 128
    204c:	a5 01       	movw	r20, r10
    204e:	94 01       	movw	r18, r8
    2050:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	44 e3       	ldi	r20, 0x34	; 52
    205a:	53 e4       	ldi	r21, 0x43	; 67
    205c:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    2060:	2b ed       	ldi	r18, 0xDB	; 219
    2062:	3f e0       	ldi	r19, 0x0F	; 15
    2064:	49 e4       	ldi	r20, 0x49	; 73
    2066:	50 e4       	ldi	r21, 0x40	; 64
    2068:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
    206c:	b6 2e       	mov	r11, r22
    206e:	a7 2e       	mov	r10, r23
    2070:	98 2e       	mov	r9, r24
    2072:	89 2e       	mov	r8, r25
    2074:	ab 96       	adiw	r28, 0x2b	; 43
    2076:	6f af       	std	Y+63, r22	; 0x3f
    2078:	ab 97       	sbiw	r28, 0x2b	; 43
    207a:	ac 96       	adiw	r28, 0x2c	; 44
    207c:	7f af       	std	Y+63, r23	; 0x3f
    207e:	ac 97       	sbiw	r28, 0x2c	; 44
    2080:	ad 96       	adiw	r28, 0x2d	; 45
    2082:	8f af       	std	Y+63, r24	; 0x3f
    2084:	ad 97       	sbiw	r28, 0x2d	; 45
    2086:	ae 96       	adiw	r28, 0x2e	; 46
    2088:	9f af       	std	Y+63, r25	; 0x3f
    208a:	ae 97       	sbiw	r28, 0x2e	; 46
                        
                        
                        float angle_dir_aux = dir_angle-180;
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	44 e3       	ldi	r20, 0x34	; 52
    2092:	53 e4       	ldi	r21, 0x43	; 67
    2094:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    2098:	36 2e       	mov	r3, r22
    209a:	27 2e       	mov	r2, r23
    209c:	68 96       	adiw	r28, 0x18	; 24
    209e:	8f af       	std	Y+63, r24	; 0x3f
    20a0:	68 97       	sbiw	r28, 0x18	; 24
    20a2:	69 96       	adiw	r28, 0x19	; 25
    20a4:	9f af       	std	Y+63, r25	; 0x3f
    20a6:	69 97       	sbiw	r28, 0x19	; 25
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	44 e3       	ldi	r20, 0x34	; 52
    20ae:	53 ec       	ldi	r21, 0xC3	; 195
    20b0:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    20b4:	88 23       	and	r24, r24
    20b6:	0c f0       	brlt	.+2      	; 0x20ba <main+0xa3c>
    20b8:	92 c4       	rjmp	.+2340   	; 0x29de <main+0x1360>
                        {
                            angle_dir_aux += 360;
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	44 eb       	ldi	r20, 0xB4	; 180
    20c0:	53 e4       	ldi	r21, 0x43	; 67
    20c2:	68 96       	adiw	r28, 0x18	; 24
    20c4:	ff ad       	ldd	r31, Y+63	; 0x3f
    20c6:	68 97       	sbiw	r28, 0x18	; 24
    20c8:	69 96       	adiw	r28, 0x19	; 25
    20ca:	ef ad       	ldd	r30, Y+63	; 0x3f
    20cc:	69 97       	sbiw	r28, 0x19	; 25
    20ce:	63 2d       	mov	r22, r3
    20d0:	72 2d       	mov	r23, r2
    20d2:	8f 2f       	mov	r24, r31
    20d4:	9e 2f       	mov	r25, r30
    20d6:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    20da:	68 96       	adiw	r28, 0x18	; 24
    20dc:	6f af       	std	Y+63, r22	; 0x3f
    20de:	68 97       	sbiw	r28, 0x18	; 24
    20e0:	69 96       	adiw	r28, 0x19	; 25
    20e2:	7f af       	std	Y+63, r23	; 0x3f
    20e4:	69 97       	sbiw	r28, 0x19	; 25
    20e6:	28 2e       	mov	r2, r24
    20e8:	39 2e       	mov	r3, r25
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
                            //commands_var = 2;
                        }
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    20ea:	23 96       	adiw	r28, 0x03	; 3
    20ec:	0e ad       	ldd	r16, Y+62	; 0x3e
    20ee:	1f ad       	ldd	r17, Y+63	; 0x3f
    20f0:	23 97       	sbiw	r28, 0x03	; 3
    20f2:	b8 01       	movw	r22, r16
    20f4:	88 27       	eor	r24, r24
    20f6:	77 fd       	sbrc	r23, 7
    20f8:	80 95       	com	r24
    20fa:	98 2f       	mov	r25, r24
    20fc:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    2100:	6b 01       	movw	r12, r22
    2102:	7c 01       	movw	r14, r24
    2104:	9b 01       	movw	r18, r22
    2106:	ac 01       	movw	r20, r24
    2108:	6b 2d       	mov	r22, r11
    210a:	7a 2d       	mov	r23, r10
    210c:	89 2d       	mov	r24, r9
    210e:	98 2d       	mov	r25, r8
    2110:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    2114:	88 23       	and	r24, r24
    2116:	0c f0       	brlt	.+2      	; 0x211a <main+0xa9c>
    2118:	74 c0       	rjmp	.+232    	; 0x2202 <main+0xb84>
    211a:	77 c0       	rjmp	.+238    	; 0x220a <main+0xb8c>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    211c:	a7 01       	movw	r20, r14
    211e:	96 01       	movw	r18, r12
    2120:	6b 2d       	mov	r22, r11
    2122:	7a 2d       	mov	r23, r10
    2124:	89 2d       	mov	r24, r9
    2126:	98 2d       	mov	r25, r8
    2128:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    212c:	88 23       	and	r24, r24
    212e:	bc f0       	brlt	.+46     	; 0x215e <main+0xae0>
                        {
                            diff_theta = dir_angle - theta_robot;
    2130:	a7 01       	movw	r20, r14
    2132:	96 01       	movw	r18, r12
    2134:	6b 2d       	mov	r22, r11
    2136:	7a 2d       	mov	r23, r10
    2138:	89 2d       	mov	r24, r9
    213a:	98 2d       	mov	r25, r8
    213c:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    2140:	68 96       	adiw	r28, 0x18	; 24
    2142:	6f af       	std	Y+63, r22	; 0x3f
    2144:	68 97       	sbiw	r28, 0x18	; 24
    2146:	69 96       	adiw	r28, 0x19	; 25
    2148:	7f af       	std	Y+63, r23	; 0x3f
    214a:	69 97       	sbiw	r28, 0x19	; 25
    214c:	6a 96       	adiw	r28, 0x1a	; 26
    214e:	8f af       	std	Y+63, r24	; 0x3f
    2150:	6a 97       	sbiw	r28, 0x1a	; 26
    2152:	6b 96       	adiw	r28, 0x1b	; 27
    2154:	9f af       	std	Y+63, r25	; 0x3f
    2156:	6b 97       	sbiw	r28, 0x1b	; 27
                            bank = 0;
    2158:	00 e0       	ldi	r16, 0x00	; 0
    215a:	10 e0       	ldi	r17, 0x00	; 0
    215c:	fc c0       	rjmp	.+504    	; 0x2356 <main+0xcd8>
                            //commands_var = 1;
                        }
                        else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    215e:	a7 01       	movw	r20, r14
    2160:	96 01       	movw	r18, r12
    2162:	68 96       	adiw	r28, 0x18	; 24
    2164:	af ad       	ldd	r26, Y+63	; 0x3f
    2166:	68 97       	sbiw	r28, 0x18	; 24
    2168:	69 96       	adiw	r28, 0x19	; 25
    216a:	ff ad       	ldd	r31, Y+63	; 0x3f
    216c:	69 97       	sbiw	r28, 0x19	; 25
    216e:	63 2d       	mov	r22, r3
    2170:	72 2d       	mov	r23, r2
    2172:	8a 2f       	mov	r24, r26
    2174:	9f 2f       	mov	r25, r31
    2176:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    217a:	18 16       	cp	r1, r24
    217c:	5c f0       	brlt	.+22     	; 0x2194 <main+0xb16>
    217e:	a7 01       	movw	r20, r14
    2180:	96 01       	movw	r18, r12
    2182:	6b 2d       	mov	r22, r11
    2184:	7a 2d       	mov	r23, r10
    2186:	89 2d       	mov	r24, r9
    2188:	98 2d       	mov	r25, r8
    218a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    218e:	88 23       	and	r24, r24
    2190:	0c f0       	brlt	.+2      	; 0x2194 <main+0xb16>
    2192:	b5 c0       	rjmp	.+362    	; 0x22fe <main+0xc80>
                        {
                            if (theta_robot < 0)
    2194:	11 23       	and	r17, r17
    2196:	f4 f4       	brge	.+60     	; 0x21d4 <main+0xb56>
                                diff_theta = (theta_robot+360) - dir_angle;
    2198:	b8 01       	movw	r22, r16
    219a:	68 59       	subi	r22, 0x98	; 152
    219c:	7e 4f       	sbci	r23, 0xFE	; 254
    219e:	88 27       	eor	r24, r24
    21a0:	77 fd       	sbrc	r23, 7
    21a2:	80 95       	com	r24
    21a4:	98 2f       	mov	r25, r24
    21a6:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    21aa:	2b 2d       	mov	r18, r11
    21ac:	3a 2d       	mov	r19, r10
    21ae:	49 2d       	mov	r20, r9
    21b0:	58 2d       	mov	r21, r8
    21b2:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    21b6:	68 96       	adiw	r28, 0x18	; 24
    21b8:	6f af       	std	Y+63, r22	; 0x3f
    21ba:	68 97       	sbiw	r28, 0x18	; 24
    21bc:	69 96       	adiw	r28, 0x19	; 25
    21be:	7f af       	std	Y+63, r23	; 0x3f
    21c0:	69 97       	sbiw	r28, 0x19	; 25
    21c2:	6a 96       	adiw	r28, 0x1a	; 26
    21c4:	8f af       	std	Y+63, r24	; 0x3f
    21c6:	6a 97       	sbiw	r28, 0x1a	; 26
    21c8:	6b 96       	adiw	r28, 0x1b	; 27
    21ca:	9f af       	std	Y+63, r25	; 0x3f
    21cc:	6b 97       	sbiw	r28, 0x1b	; 27
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
    21ce:	01 e0       	ldi	r16, 0x01	; 1
    21d0:	10 e0       	ldi	r17, 0x00	; 0
    21d2:	c1 c0       	rjmp	.+386    	; 0x2356 <main+0xcd8>
                        else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
    21d4:	2b 2d       	mov	r18, r11
    21d6:	3a 2d       	mov	r19, r10
    21d8:	49 2d       	mov	r20, r9
    21da:	58 2d       	mov	r21, r8
    21dc:	c7 01       	movw	r24, r14
    21de:	b6 01       	movw	r22, r12
    21e0:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    21e4:	68 96       	adiw	r28, 0x18	; 24
    21e6:	6f af       	std	Y+63, r22	; 0x3f
    21e8:	68 97       	sbiw	r28, 0x18	; 24
    21ea:	69 96       	adiw	r28, 0x19	; 25
    21ec:	7f af       	std	Y+63, r23	; 0x3f
    21ee:	69 97       	sbiw	r28, 0x19	; 25
    21f0:	6a 96       	adiw	r28, 0x1a	; 26
    21f2:	8f af       	std	Y+63, r24	; 0x3f
    21f4:	6a 97       	sbiw	r28, 0x1a	; 26
    21f6:	6b 96       	adiw	r28, 0x1b	; 27
    21f8:	9f af       	std	Y+63, r25	; 0x3f
    21fa:	6b 97       	sbiw	r28, 0x1b	; 27
                            bank = 1;
    21fc:	01 e0       	ldi	r16, 0x01	; 1
    21fe:	10 e0       	ldi	r17, 0x00	; 0
    2200:	aa c0       	rjmp	.+340    	; 0x2356 <main+0xcd8>
                            //commands_var = 2;
                        }
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    2202:	0c 34       	cpi	r16, 0x4C	; 76
    2204:	bf ef       	ldi	r27, 0xFF	; 255
    2206:	1b 07       	cpc	r17, r27
    2208:	9c f4       	brge	.+38     	; 0x2230 <main+0xbb2>
    220a:	a7 01       	movw	r20, r14
    220c:	96 01       	movw	r18, r12
    220e:	68 96       	adiw	r28, 0x18	; 24
    2210:	bf ad       	ldd	r27, Y+63	; 0x3f
    2212:	68 97       	sbiw	r28, 0x18	; 24
    2214:	69 96       	adiw	r28, 0x19	; 25
    2216:	af ad       	ldd	r26, Y+63	; 0x3f
    2218:	69 97       	sbiw	r28, 0x19	; 25
    221a:	6b 2f       	mov	r22, r27
    221c:	7a 2f       	mov	r23, r26
    221e:	82 2d       	mov	r24, r2
    2220:	93 2d       	mov	r25, r3
    2222:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    2226:	18 16       	cp	r1, r24
    2228:	cc f1       	brlt	.+114    	; 0x229c <main+0xc1e>
    222a:	05 3b       	cpi	r16, 0xB5	; 181
    222c:	11 05       	cpc	r17, r1
    222e:	b4 f5       	brge	.+108    	; 0x229c <main+0xc1e>
                        {
                            if (theta_robot < 0)
    2230:	11 23       	and	r17, r17
    2232:	bc f4       	brge	.+46     	; 0x2262 <main+0xbe4>
                                diff_theta = dir_angle - theta_robot;
    2234:	a7 01       	movw	r20, r14
    2236:	96 01       	movw	r18, r12
    2238:	6b 2d       	mov	r22, r11
    223a:	7a 2d       	mov	r23, r10
    223c:	89 2d       	mov	r24, r9
    223e:	98 2d       	mov	r25, r8
    2240:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    2244:	68 96       	adiw	r28, 0x18	; 24
    2246:	6f af       	std	Y+63, r22	; 0x3f
    2248:	68 97       	sbiw	r28, 0x18	; 24
    224a:	69 96       	adiw	r28, 0x19	; 25
    224c:	7f af       	std	Y+63, r23	; 0x3f
    224e:	69 97       	sbiw	r28, 0x19	; 25
    2250:	6a 96       	adiw	r28, 0x1a	; 26
    2252:	8f af       	std	Y+63, r24	; 0x3f
    2254:	6a 97       	sbiw	r28, 0x1a	; 26
    2256:	6b 96       	adiw	r28, 0x1b	; 27
    2258:	9f af       	std	Y+63, r25	; 0x3f
    225a:	6b 97       	sbiw	r28, 0x1b	; 27
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
    225c:	00 e0       	ldi	r16, 0x00	; 0
    225e:	10 e0       	ldi	r17, 0x00	; 0
    2260:	7a c0       	rjmp	.+244    	; 0x2356 <main+0xcd8>
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	44 eb       	ldi	r20, 0xB4	; 180
    2268:	53 e4       	ldi	r21, 0x43	; 67
    226a:	6b 2d       	mov	r22, r11
    226c:	7a 2d       	mov	r23, r10
    226e:	89 2d       	mov	r24, r9
    2270:	98 2d       	mov	r25, r8
    2272:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    2276:	a7 01       	movw	r20, r14
    2278:	96 01       	movw	r18, r12
    227a:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    227e:	68 96       	adiw	r28, 0x18	; 24
    2280:	6f af       	std	Y+63, r22	; 0x3f
    2282:	68 97       	sbiw	r28, 0x18	; 24
    2284:	69 96       	adiw	r28, 0x19	; 25
    2286:	7f af       	std	Y+63, r23	; 0x3f
    2288:	69 97       	sbiw	r28, 0x19	; 25
    228a:	6a 96       	adiw	r28, 0x1a	; 26
    228c:	8f af       	std	Y+63, r24	; 0x3f
    228e:	6a 97       	sbiw	r28, 0x1a	; 26
    2290:	6b 96       	adiw	r28, 0x1b	; 27
    2292:	9f af       	std	Y+63, r25	; 0x3f
    2294:	6b 97       	sbiw	r28, 0x1b	; 27
                            bank = 0;
    2296:	00 e0       	ldi	r16, 0x00	; 0
    2298:	10 e0       	ldi	r17, 0x00	; 0
    229a:	5d c0       	rjmp	.+186    	; 0x2356 <main+0xcd8>
                            //commands_var = 3;
                        }
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    229c:	a7 01       	movw	r20, r14
    229e:	96 01       	movw	r18, r12
    22a0:	6b 2d       	mov	r22, r11
    22a2:	7a 2d       	mov	r23, r10
    22a4:	89 2d       	mov	r24, r9
    22a6:	98 2d       	mov	r25, r8
    22a8:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    22ac:	88 23       	and	r24, r24
    22ae:	b4 f5       	brge	.+108    	; 0x231c <main+0xc9e>
    22b0:	a7 01       	movw	r20, r14
    22b2:	96 01       	movw	r18, r12
    22b4:	68 96       	adiw	r28, 0x18	; 24
    22b6:	bf ad       	ldd	r27, Y+63	; 0x3f
    22b8:	68 97       	sbiw	r28, 0x18	; 24
    22ba:	69 96       	adiw	r28, 0x19	; 25
    22bc:	af ad       	ldd	r26, Y+63	; 0x3f
    22be:	69 97       	sbiw	r28, 0x19	; 25
    22c0:	6b 2f       	mov	r22, r27
    22c2:	7a 2f       	mov	r23, r26
    22c4:	82 2d       	mov	r24, r2
    22c6:	93 2d       	mov	r25, r3
    22c8:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	ac f5       	brge	.+106    	; 0x233a <main+0xcbc>
                        {
                            diff_theta = theta_robot - dir_angle;
    22d0:	2b 2d       	mov	r18, r11
    22d2:	3a 2d       	mov	r19, r10
    22d4:	49 2d       	mov	r20, r9
    22d6:	58 2d       	mov	r21, r8
    22d8:	c7 01       	movw	r24, r14
    22da:	b6 01       	movw	r22, r12
    22dc:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    22e0:	68 96       	adiw	r28, 0x18	; 24
    22e2:	6f af       	std	Y+63, r22	; 0x3f
    22e4:	68 97       	sbiw	r28, 0x18	; 24
    22e6:	69 96       	adiw	r28, 0x19	; 25
    22e8:	7f af       	std	Y+63, r23	; 0x3f
    22ea:	69 97       	sbiw	r28, 0x19	; 25
    22ec:	6a 96       	adiw	r28, 0x1a	; 26
    22ee:	8f af       	std	Y+63, r24	; 0x3f
    22f0:	6a 97       	sbiw	r28, 0x1a	; 26
    22f2:	6b 96       	adiw	r28, 0x1b	; 27
    22f4:	9f af       	std	Y+63, r25	; 0x3f
    22f6:	6b 97       	sbiw	r28, 0x1b	; 27
                            bank = 1;
    22f8:	01 e0       	ldi	r16, 0x01	; 1
    22fa:	10 e0       	ldi	r17, 0x00	; 0
    22fc:	2c c0       	rjmp	.+88     	; 0x2356 <main+0xcd8>
                            //commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    22fe:	00 e0       	ldi	r16, 0x00	; 0
    2300:	10 e0       	ldi	r17, 0x00	; 0
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            //commands_var = 4;
                        }else {
                            diff_theta = 0;
    2302:	68 96       	adiw	r28, 0x18	; 24
    2304:	1f ae       	std	Y+63, r1	; 0x3f
    2306:	68 97       	sbiw	r28, 0x18	; 24
    2308:	69 96       	adiw	r28, 0x19	; 25
    230a:	1f ae       	std	Y+63, r1	; 0x3f
    230c:	69 97       	sbiw	r28, 0x19	; 25
    230e:	6a 96       	adiw	r28, 0x1a	; 26
    2310:	1f ae       	std	Y+63, r1	; 0x3f
    2312:	6a 97       	sbiw	r28, 0x1a	; 26
    2314:	6b 96       	adiw	r28, 0x1b	; 27
    2316:	1f ae       	std	Y+63, r1	; 0x3f
    2318:	6b 97       	sbiw	r28, 0x1b	; 27
    231a:	1d c0       	rjmp	.+58     	; 0x2356 <main+0xcd8>
                            bank = 0;
    231c:	00 e0       	ldi	r16, 0x00	; 0
    231e:	10 e0       	ldi	r17, 0x00	; 0
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            //commands_var = 4;
                        }else {
                            diff_theta = 0;
    2320:	68 96       	adiw	r28, 0x18	; 24
    2322:	1f ae       	std	Y+63, r1	; 0x3f
    2324:	68 97       	sbiw	r28, 0x18	; 24
    2326:	69 96       	adiw	r28, 0x19	; 25
    2328:	1f ae       	std	Y+63, r1	; 0x3f
    232a:	69 97       	sbiw	r28, 0x19	; 25
    232c:	6a 96       	adiw	r28, 0x1a	; 26
    232e:	1f ae       	std	Y+63, r1	; 0x3f
    2330:	6a 97       	sbiw	r28, 0x1a	; 26
    2332:	6b 96       	adiw	r28, 0x1b	; 27
    2334:	1f ae       	std	Y+63, r1	; 0x3f
    2336:	6b 97       	sbiw	r28, 0x1b	; 27
    2338:	0e c0       	rjmp	.+28     	; 0x2356 <main+0xcd8>
                            bank = 0;
    233a:	00 e0       	ldi	r16, 0x00	; 0
    233c:	10 e0       	ldi	r17, 0x00	; 0
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            //commands_var = 4;
                        }else {
                            diff_theta = 0;
    233e:	68 96       	adiw	r28, 0x18	; 24
    2340:	1f ae       	std	Y+63, r1	; 0x3f
    2342:	68 97       	sbiw	r28, 0x18	; 24
    2344:	69 96       	adiw	r28, 0x19	; 25
    2346:	1f ae       	std	Y+63, r1	; 0x3f
    2348:	69 97       	sbiw	r28, 0x19	; 25
    234a:	6a 96       	adiw	r28, 0x1a	; 26
    234c:	1f ae       	std	Y+63, r1	; 0x3f
    234e:	6a 97       	sbiw	r28, 0x1a	; 26
    2350:	6b 96       	adiw	r28, 0x1b	; 27
    2352:	1f ae       	std	Y+63, r1	; 0x3f
    2354:	6b 97       	sbiw	r28, 0x1b	; 27
                            bank = 0;
                            //commands_var = 0;
                        }
						commands_var = bank;
						
						move_robot(diff_theta,bank);
    2356:	a8 01       	movw	r20, r16
    2358:	68 96       	adiw	r28, 0x18	; 24
    235a:	ff ad       	ldd	r31, Y+63	; 0x3f
    235c:	68 97       	sbiw	r28, 0x18	; 24
    235e:	69 96       	adiw	r28, 0x19	; 25
    2360:	ef ad       	ldd	r30, Y+63	; 0x3f
    2362:	69 97       	sbiw	r28, 0x19	; 25
    2364:	6a 96       	adiw	r28, 0x1a	; 26
    2366:	3f ad       	ldd	r19, Y+63	; 0x3f
    2368:	6a 97       	sbiw	r28, 0x1a	; 26
    236a:	6b 96       	adiw	r28, 0x1b	; 27
    236c:	2f ad       	ldd	r18, Y+63	; 0x3f
    236e:	6b 97       	sbiw	r28, 0x1b	; 27
    2370:	6f 2f       	mov	r22, r31
    2372:	7e 2f       	mov	r23, r30
    2374:	83 2f       	mov	r24, r19
    2376:	92 2f       	mov	r25, r18
    2378:	0e 94 be 0a 	call	0x157c	; 0x157c <move_robot>
                        }else {
                            diff_theta = 0;
                            bank = 0;
                            //commands_var = 0;
                        }
						commands_var = bank;
    237c:	6f 96       	adiw	r28, 0x1f	; 31
    237e:	1f af       	std	Y+63, r17	; 0x3f
    2380:	0e af       	std	Y+62, r16	; 0x3e
    2382:	6f 97       	sbiw	r28, 0x1f	; 31
    2384:	58 ca       	rjmp	.-2896   	; 0x1836 <main+0x1b8>
						move_robot(diff_theta,bank);
						//move_robot(diff_theta,dist_goal,bank);                        
                    }
					
                }
                else if (status_go_to_goal == 1)
    2386:	6d 96       	adiw	r28, 0x1d	; 29
    2388:	ee ad       	ldd	r30, Y+62	; 0x3e
    238a:	ff ad       	ldd	r31, Y+63	; 0x3f
    238c:	6d 97       	sbiw	r28, 0x1d	; 29
    238e:	31 97       	sbiw	r30, 0x01	; 1
    2390:	09 f0       	breq	.+2      	; 0x2394 <main+0xd16>
    2392:	51 ca       	rjmp	.-2910   	; 0x1836 <main+0x1b8>
                {
                    //stop_motor();
					m_green(ON);
    2394:	6a 9a       	sbi	0x0d, 2	; 13
    2396:	72 98       	cbi	0x0e, 2	; 14
                    status_go_to_goal = 0;
					stop_counter = 0;
					go_bwd();
    2398:	0e 94 93 0a 	call	0x1526	; 0x1526 <go_bwd>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	01 96       	adiw	r24, 0x01	; 1
					while(stop_counter<TIME_STOP)
    23a2:	80 34       	cpi	r24, 0x40	; 64
    23a4:	fc e9       	ldi	r31, 0x9C	; 156
    23a6:	9f 07       	cpc	r25, r31
    23a8:	d9 f7       	brne	.-10     	; 0x23a0 <main+0xd22>
					{
						stop_counter++;
					}
                    state = STOP_STATE;
    23aa:	85 e1       	ldi	r24, 0x15	; 21
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	90 93 51 01 	sts	0x0151, r25
    23b2:	80 93 50 01 	sts	0x0150, r24
                }
                else if (status_go_to_goal == 1)
                {
                    //stop_motor();
					m_green(ON);
                    status_go_to_goal = 0;
    23b6:	6d 96       	adiw	r28, 0x1d	; 29
    23b8:	1f ae       	std	Y+63, r1	; 0x3f
    23ba:	1e ae       	std	Y+62, r1	; 0x3e
    23bc:	6d 97       	sbiw	r28, 0x1d	; 29
    23be:	3b ca       	rjmp	.-2954   	; 0x1836 <main+0x1b8>
                    state = STOP_STATE;
                }
                break;
				
			case GO_TO_GOAL_WITH_PUCK:
			if (status_go_to_goal == 0)
    23c0:	6d 96       	adiw	r28, 0x1d	; 29
    23c2:	2e ad       	ldd	r18, Y+62	; 0x3e
    23c4:	3f ad       	ldd	r19, Y+63	; 0x3f
    23c6:	6d 97       	sbiw	r28, 0x1d	; 29
    23c8:	23 2b       	or	r18, r19
    23ca:	09 f0       	breq	.+2      	; 0x23ce <main+0xd50>
    23cc:	45 c2       	rjmp	.+1162   	; 0x2858 <main+0x11da>
			{
				dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    23ce:	ed ac       	ldd	r14, Y+61	; 0x3d
    23d0:	fe ac       	ldd	r15, Y+62	; 0x3e
    23d2:	c7 01       	movw	r24, r14
    23d4:	a3 96       	adiw	r28, 0x23	; 35
    23d6:	ae ad       	ldd	r26, Y+62	; 0x3e
    23d8:	bf ad       	ldd	r27, Y+63	; 0x3f
    23da:	a3 97       	sbiw	r28, 0x23	; 35
    23dc:	8a 1b       	sub	r24, r26
    23de:	9b 0b       	sbc	r25, r27
    23e0:	21 96       	adiw	r28, 0x01	; 1
    23e2:	0e ad       	ldd	r16, Y+62	; 0x3e
    23e4:	1f ad       	ldd	r17, Y+63	; 0x3f
    23e6:	21 97       	sbiw	r28, 0x01	; 1
    23e8:	88 9f       	mul	r24, r24
    23ea:	b0 01       	movw	r22, r0
    23ec:	89 9f       	mul	r24, r25
    23ee:	70 0d       	add	r23, r0
    23f0:	70 0d       	add	r23, r0
    23f2:	11 24       	eor	r1, r1
    23f4:	00 9f       	mul	r16, r16
    23f6:	c0 01       	movw	r24, r0
    23f8:	01 9f       	mul	r16, r17
    23fa:	90 0d       	add	r25, r0
    23fc:	90 0d       	add	r25, r0
    23fe:	11 24       	eor	r1, r1
    2400:	68 0f       	add	r22, r24
    2402:	79 1f       	adc	r23, r25
    2404:	88 27       	eor	r24, r24
    2406:	77 fd       	sbrc	r23, 7
    2408:	80 95       	com	r24
    240a:	98 2f       	mov	r25, r24
    240c:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    2410:	0e 94 aa 1c 	call	0x3954	; 0x3954 <sqrt>
    2414:	aa 96       	adiw	r28, 0x2a	; 42
    2416:	6c af       	std	Y+60, r22	; 0x3c
    2418:	7d af       	std	Y+61, r23	; 0x3d
    241a:	8e af       	std	Y+62, r24	; 0x3e
    241c:	9f af       	std	Y+63, r25	; 0x3f
    241e:	aa 97       	sbiw	r28, 0x2a	; 42
				if (dist_goal < THRESHOLD_DIST_GOAL)
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 ea       	ldi	r20, 0xA0	; 160
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    242c:	88 23       	and	r24, r24
    242e:	0c f4       	brge	.+2      	; 0x2432 <main+0xdb4>
    2430:	fc c9       	rjmp	.-3080   	; 0x182a <main+0x1ac>
					status_go_to_goal = 1;
				else
				{
					
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
    2432:	66 27       	eor	r22, r22
    2434:	77 27       	eor	r23, r23
    2436:	60 1b       	sub	r22, r16
    2438:	71 0b       	sbc	r23, r17
    243a:	88 27       	eor	r24, r24
    243c:	77 fd       	sbrc	r23, 7
    243e:	80 95       	com	r24
    2440:	98 2f       	mov	r25, r24
    2442:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    2446:	4b 01       	movw	r8, r22
    2448:	5c 01       	movw	r10, r24
				if (dist_goal < THRESHOLD_DIST_GOAL)
					status_go_to_goal = 1;
				else
				{
					
					dir_x = goal_pos_x-x_robot;
    244a:	a3 96       	adiw	r28, 0x23	; 35
    244c:	6e ad       	ldd	r22, Y+62	; 0x3e
    244e:	7f ad       	ldd	r23, Y+63	; 0x3f
    2450:	a3 97       	sbiw	r28, 0x23	; 35
    2452:	6e 19       	sub	r22, r14
    2454:	7f 09       	sbc	r23, r15
    2456:	88 27       	eor	r24, r24
    2458:	77 fd       	sbrc	r23, 7
    245a:	80 95       	com	r24
    245c:	98 2f       	mov	r25, r24
    245e:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    2462:	90 58       	subi	r25, 0x80	; 128
    2464:	a5 01       	movw	r20, r10
    2466:	94 01       	movw	r18, r8
    2468:	0e 94 2f 1a 	call	0x345e	; 0x345e <atan2>
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	44 e3       	ldi	r20, 0x34	; 52
    2472:	53 e4       	ldi	r21, 0x43	; 67
    2474:	0e 94 3d 1c 	call	0x387a	; 0x387a <__mulsf3>
    2478:	2b ed       	ldi	r18, 0xDB	; 219
    247a:	3f e0       	ldi	r19, 0x0F	; 15
    247c:	49 e4       	ldi	r20, 0x49	; 73
    247e:	50 e4       	ldi	r21, 0x40	; 64
    2480:	0e 94 89 1a 	call	0x3512	; 0x3512 <__divsf3>
    2484:	d6 2e       	mov	r13, r22
    2486:	c7 2e       	mov	r12, r23
    2488:	38 2e       	mov	r3, r24
    248a:	29 2e       	mov	r2, r25
    248c:	ab 96       	adiw	r28, 0x2b	; 43
    248e:	6f af       	std	Y+63, r22	; 0x3f
    2490:	ab 97       	sbiw	r28, 0x2b	; 43
    2492:	ac 96       	adiw	r28, 0x2c	; 44
    2494:	7f af       	std	Y+63, r23	; 0x3f
    2496:	ac 97       	sbiw	r28, 0x2c	; 44
    2498:	ad 96       	adiw	r28, 0x2d	; 45
    249a:	8f af       	std	Y+63, r24	; 0x3f
    249c:	ad 97       	sbiw	r28, 0x2d	; 45
    249e:	ae 96       	adiw	r28, 0x2e	; 46
    24a0:	9f af       	std	Y+63, r25	; 0x3f
    24a2:	ae 97       	sbiw	r28, 0x2e	; 46
					
					
					float angle_dir_aux = dir_angle-180;
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
    24a8:	44 e3       	ldi	r20, 0x34	; 52
    24aa:	53 e4       	ldi	r21, 0x43	; 67
    24ac:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    24b0:	68 96       	adiw	r28, 0x18	; 24
    24b2:	6f af       	std	Y+63, r22	; 0x3f
    24b4:	68 97       	sbiw	r28, 0x18	; 24
    24b6:	69 96       	adiw	r28, 0x19	; 25
    24b8:	7f af       	std	Y+63, r23	; 0x3f
    24ba:	69 97       	sbiw	r28, 0x19	; 25
    24bc:	6a 96       	adiw	r28, 0x1a	; 26
    24be:	8f af       	std	Y+63, r24	; 0x3f
    24c0:	6a 97       	sbiw	r28, 0x1a	; 26
    24c2:	6b 96       	adiw	r28, 0x1b	; 27
    24c4:	9f af       	std	Y+63, r25	; 0x3f
    24c6:	6b 97       	sbiw	r28, 0x1b	; 27
					float add_360 = 0;
					if (angle_dir_aux < -180)
    24c8:	20 e0       	ldi	r18, 0x00	; 0
    24ca:	30 e0       	ldi	r19, 0x00	; 0
    24cc:	44 e3       	ldi	r20, 0x34	; 52
    24ce:	53 ec       	ldi	r21, 0xC3	; 195
    24d0:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    24d4:	88 23       	and	r24, r24
    24d6:	0c f0       	brlt	.+2      	; 0x24da <main+0xe5c>
    24d8:	a1 c2       	rjmp	.+1346   	; 0x2a1c <main+0x139e>
					{
						angle_dir_aux += 360;
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	44 eb       	ldi	r20, 0xB4	; 180
    24e0:	53 e4       	ldi	r21, 0x43	; 67
    24e2:	68 96       	adiw	r28, 0x18	; 24
    24e4:	bf ad       	ldd	r27, Y+63	; 0x3f
    24e6:	68 97       	sbiw	r28, 0x18	; 24
    24e8:	69 96       	adiw	r28, 0x19	; 25
    24ea:	af ad       	ldd	r26, Y+63	; 0x3f
    24ec:	69 97       	sbiw	r28, 0x19	; 25
    24ee:	6a 96       	adiw	r28, 0x1a	; 26
    24f0:	ff ad       	ldd	r31, Y+63	; 0x3f
    24f2:	6a 97       	sbiw	r28, 0x1a	; 26
    24f4:	6b 96       	adiw	r28, 0x1b	; 27
    24f6:	ef ad       	ldd	r30, Y+63	; 0x3f
    24f8:	6b 97       	sbiw	r28, 0x1b	; 27
    24fa:	6b 2f       	mov	r22, r27
    24fc:	7a 2f       	mov	r23, r26
    24fe:	8f 2f       	mov	r24, r31
    2500:	9e 2f       	mov	r25, r30
    2502:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    2506:	68 96       	adiw	r28, 0x18	; 24
    2508:	6f af       	std	Y+63, r22	; 0x3f
    250a:	68 97       	sbiw	r28, 0x18	; 24
    250c:	69 96       	adiw	r28, 0x19	; 25
    250e:	7f af       	std	Y+63, r23	; 0x3f
    2510:	69 97       	sbiw	r28, 0x19	; 25
    2512:	6a 96       	adiw	r28, 0x1a	; 26
    2514:	8f af       	std	Y+63, r24	; 0x3f
    2516:	6a 97       	sbiw	r28, 0x1a	; 26
    2518:	6b 96       	adiw	r28, 0x1b	; 27
    251a:	9f af       	std	Y+63, r25	; 0x3f
    251c:	6b 97       	sbiw	r28, 0x1b	; 27
							diff_theta = (theta_robot+360) - dir_angle;
						else
							diff_theta = (theta_robot) - dir_angle;

					}
					else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    251e:	23 96       	adiw	r28, 0x03	; 3
    2520:	ee ac       	ldd	r14, Y+62	; 0x3e
    2522:	ff ac       	ldd	r15, Y+63	; 0x3f
    2524:	23 97       	sbiw	r28, 0x03	; 3
    2526:	b7 01       	movw	r22, r14
    2528:	88 27       	eor	r24, r24
    252a:	77 fd       	sbrc	r23, 7
    252c:	80 95       	com	r24
    252e:	98 2f       	mov	r25, r24
    2530:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    2534:	4b 01       	movw	r8, r22
    2536:	5c 01       	movw	r10, r24
    2538:	9b 01       	movw	r18, r22
    253a:	ac 01       	movw	r20, r24
    253c:	6d 2d       	mov	r22, r13
    253e:	7c 2d       	mov	r23, r12
    2540:	83 2d       	mov	r24, r3
    2542:	92 2d       	mov	r25, r2
    2544:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    2548:	88 23       	and	r24, r24
    254a:	0c f0       	brlt	.+2      	; 0x254e <main+0xed0>
    254c:	74 c0       	rjmp	.+232    	; 0x2636 <main+0xfb8>
    254e:	78 c0       	rjmp	.+240    	; 0x2640 <main+0xfc2>
						angle_dir_aux += 360;
						add_360 = 1;
					}
					
					
					if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    2550:	a5 01       	movw	r20, r10
    2552:	94 01       	movw	r18, r8
    2554:	6d 2d       	mov	r22, r13
    2556:	7c 2d       	mov	r23, r12
    2558:	83 2d       	mov	r24, r3
    255a:	92 2d       	mov	r25, r2
    255c:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    2560:	88 23       	and	r24, r24
    2562:	ac f0       	brlt	.+42     	; 0x258e <main+0xf10>
					{
						diff_theta = dir_angle - theta_robot;
    2564:	a5 01       	movw	r20, r10
    2566:	94 01       	movw	r18, r8
    2568:	6d 2d       	mov	r22, r13
    256a:	7c 2d       	mov	r23, r12
    256c:	83 2d       	mov	r24, r3
    256e:	92 2d       	mov	r25, r2
    2570:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    2574:	68 96       	adiw	r28, 0x18	; 24
    2576:	6f af       	std	Y+63, r22	; 0x3f
    2578:	68 97       	sbiw	r28, 0x18	; 24
    257a:	69 96       	adiw	r28, 0x19	; 25
    257c:	7f af       	std	Y+63, r23	; 0x3f
    257e:	69 97       	sbiw	r28, 0x19	; 25
    2580:	6a 96       	adiw	r28, 0x1a	; 26
    2582:	8f af       	std	Y+63, r24	; 0x3f
    2584:	6a 97       	sbiw	r28, 0x1a	; 26
    2586:	6b 96       	adiw	r28, 0x1b	; 27
    2588:	9f af       	std	Y+63, r25	; 0x3f
    258a:	6b 97       	sbiw	r28, 0x1b	; 27
    258c:	db c0       	rjmp	.+438    	; 0x2744 <main+0x10c6>

					}
					else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    258e:	a5 01       	movw	r20, r10
    2590:	94 01       	movw	r18, r8
    2592:	68 96       	adiw	r28, 0x18	; 24
    2594:	ef ad       	ldd	r30, Y+63	; 0x3f
    2596:	68 97       	sbiw	r28, 0x18	; 24
    2598:	69 96       	adiw	r28, 0x19	; 25
    259a:	bf ad       	ldd	r27, Y+63	; 0x3f
    259c:	69 97       	sbiw	r28, 0x19	; 25
    259e:	6a 96       	adiw	r28, 0x1a	; 26
    25a0:	af ad       	ldd	r26, Y+63	; 0x3f
    25a2:	6a 97       	sbiw	r28, 0x1a	; 26
    25a4:	6b 96       	adiw	r28, 0x1b	; 27
    25a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    25a8:	6b 97       	sbiw	r28, 0x1b	; 27
    25aa:	6e 2f       	mov	r22, r30
    25ac:	7b 2f       	mov	r23, r27
    25ae:	8a 2f       	mov	r24, r26
    25b0:	9f 2f       	mov	r25, r31
    25b2:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	5c f0       	brlt	.+22     	; 0x25d0 <main+0xf52>
    25ba:	a5 01       	movw	r20, r10
    25bc:	94 01       	movw	r18, r8
    25be:	6d 2d       	mov	r22, r13
    25c0:	7c 2d       	mov	r23, r12
    25c2:	83 2d       	mov	r24, r3
    25c4:	92 2d       	mov	r25, r2
    25c6:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	0c f0       	brlt	.+2      	; 0x25d0 <main+0xf52>
    25ce:	ec c0       	rjmp	.+472    	; 0x27a8 <main+0x112a>
					{
						if (theta_robot < 0)
    25d0:	ff 20       	and	r15, r15
    25d2:	e4 f4       	brge	.+56     	; 0x260c <main+0xf8e>
							diff_theta = (theta_robot+360) - dir_angle;
    25d4:	b7 01       	movw	r22, r14
    25d6:	68 59       	subi	r22, 0x98	; 152
    25d8:	7e 4f       	sbci	r23, 0xFE	; 254
    25da:	88 27       	eor	r24, r24
    25dc:	77 fd       	sbrc	r23, 7
    25de:	80 95       	com	r24
    25e0:	98 2f       	mov	r25, r24
    25e2:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    25e6:	2d 2d       	mov	r18, r13
    25e8:	3c 2d       	mov	r19, r12
    25ea:	43 2d       	mov	r20, r3
    25ec:	52 2d       	mov	r21, r2
    25ee:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    25f2:	68 96       	adiw	r28, 0x18	; 24
    25f4:	6f af       	std	Y+63, r22	; 0x3f
    25f6:	68 97       	sbiw	r28, 0x18	; 24
    25f8:	69 96       	adiw	r28, 0x19	; 25
    25fa:	7f af       	std	Y+63, r23	; 0x3f
    25fc:	69 97       	sbiw	r28, 0x19	; 25
    25fe:	6a 96       	adiw	r28, 0x1a	; 26
    2600:	8f af       	std	Y+63, r24	; 0x3f
    2602:	6a 97       	sbiw	r28, 0x1a	; 26
    2604:	6b 96       	adiw	r28, 0x1b	; 27
    2606:	9f af       	std	Y+63, r25	; 0x3f
    2608:	6b 97       	sbiw	r28, 0x1b	; 27
    260a:	9c c0       	rjmp	.+312    	; 0x2744 <main+0x10c6>
						else
							diff_theta = (theta_robot) - dir_angle;
    260c:	2d 2d       	mov	r18, r13
    260e:	3c 2d       	mov	r19, r12
    2610:	43 2d       	mov	r20, r3
    2612:	52 2d       	mov	r21, r2
    2614:	c5 01       	movw	r24, r10
    2616:	b4 01       	movw	r22, r8
    2618:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    261c:	68 96       	adiw	r28, 0x18	; 24
    261e:	6f af       	std	Y+63, r22	; 0x3f
    2620:	68 97       	sbiw	r28, 0x18	; 24
    2622:	69 96       	adiw	r28, 0x19	; 25
    2624:	7f af       	std	Y+63, r23	; 0x3f
    2626:	69 97       	sbiw	r28, 0x19	; 25
    2628:	6a 96       	adiw	r28, 0x1a	; 26
    262a:	8f af       	std	Y+63, r24	; 0x3f
    262c:	6a 97       	sbiw	r28, 0x1a	; 26
    262e:	6b 96       	adiw	r28, 0x1b	; 27
    2630:	9f af       	std	Y+63, r25	; 0x3f
    2632:	6b 97       	sbiw	r28, 0x1b	; 27
    2634:	87 c0       	rjmp	.+270    	; 0x2744 <main+0x10c6>

					}
					else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    2636:	bc e4       	ldi	r27, 0x4C	; 76
    2638:	eb 16       	cp	r14, r27
    263a:	bf ef       	ldi	r27, 0xFF	; 255
    263c:	fb 06       	cpc	r15, r27
    263e:	d4 f4       	brge	.+52     	; 0x2674 <main+0xff6>
    2640:	a5 01       	movw	r20, r10
    2642:	94 01       	movw	r18, r8
    2644:	68 96       	adiw	r28, 0x18	; 24
    2646:	ff ad       	ldd	r31, Y+63	; 0x3f
    2648:	68 97       	sbiw	r28, 0x18	; 24
    264a:	69 96       	adiw	r28, 0x19	; 25
    264c:	ef ad       	ldd	r30, Y+63	; 0x3f
    264e:	69 97       	sbiw	r28, 0x19	; 25
    2650:	6a 96       	adiw	r28, 0x1a	; 26
    2652:	af ad       	ldd	r26, Y+63	; 0x3f
    2654:	6a 97       	sbiw	r28, 0x1a	; 26
    2656:	6b 96       	adiw	r28, 0x1b	; 27
    2658:	bf ad       	ldd	r27, Y+63	; 0x3f
    265a:	6b 97       	sbiw	r28, 0x1b	; 27
    265c:	6f 2f       	mov	r22, r31
    265e:	7e 2f       	mov	r23, r30
    2660:	8a 2f       	mov	r24, r26
    2662:	9b 2f       	mov	r25, r27
    2664:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    2668:	18 16       	cp	r1, r24
    266a:	b4 f1       	brlt	.+108    	; 0x26d8 <main+0x105a>
    266c:	e5 eb       	ldi	r30, 0xB5	; 181
    266e:	ee 16       	cp	r14, r30
    2670:	f1 04       	cpc	r15, r1
    2672:	94 f5       	brge	.+100    	; 0x26d8 <main+0x105a>
					{
						if (theta_robot < 0)
    2674:	ff 20       	and	r15, r15
    2676:	ac f4       	brge	.+42     	; 0x26a2 <main+0x1024>
							diff_theta = dir_angle - theta_robot;
    2678:	a5 01       	movw	r20, r10
    267a:	94 01       	movw	r18, r8
    267c:	6d 2d       	mov	r22, r13
    267e:	7c 2d       	mov	r23, r12
    2680:	83 2d       	mov	r24, r3
    2682:	92 2d       	mov	r25, r2
    2684:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    2688:	68 96       	adiw	r28, 0x18	; 24
    268a:	6f af       	std	Y+63, r22	; 0x3f
    268c:	68 97       	sbiw	r28, 0x18	; 24
    268e:	69 96       	adiw	r28, 0x19	; 25
    2690:	7f af       	std	Y+63, r23	; 0x3f
    2692:	69 97       	sbiw	r28, 0x19	; 25
    2694:	6a 96       	adiw	r28, 0x1a	; 26
    2696:	8f af       	std	Y+63, r24	; 0x3f
    2698:	6a 97       	sbiw	r28, 0x1a	; 26
    269a:	6b 96       	adiw	r28, 0x1b	; 27
    269c:	9f af       	std	Y+63, r25	; 0x3f
    269e:	6b 97       	sbiw	r28, 0x1b	; 27
    26a0:	51 c0       	rjmp	.+162    	; 0x2744 <main+0x10c6>
						else
							diff_theta = (dir_angle + 360) - theta_robot;
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	44 eb       	ldi	r20, 0xB4	; 180
    26a8:	53 e4       	ldi	r21, 0x43	; 67
    26aa:	6d 2d       	mov	r22, r13
    26ac:	7c 2d       	mov	r23, r12
    26ae:	83 2d       	mov	r24, r3
    26b0:	92 2d       	mov	r25, r2
    26b2:	0e 94 bc 19 	call	0x3378	; 0x3378 <__addsf3>
    26b6:	a5 01       	movw	r20, r10
    26b8:	94 01       	movw	r18, r8
    26ba:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    26be:	68 96       	adiw	r28, 0x18	; 24
    26c0:	6f af       	std	Y+63, r22	; 0x3f
    26c2:	68 97       	sbiw	r28, 0x18	; 24
    26c4:	69 96       	adiw	r28, 0x19	; 25
    26c6:	7f af       	std	Y+63, r23	; 0x3f
    26c8:	69 97       	sbiw	r28, 0x19	; 25
    26ca:	6a 96       	adiw	r28, 0x1a	; 26
    26cc:	8f af       	std	Y+63, r24	; 0x3f
    26ce:	6a 97       	sbiw	r28, 0x1a	; 26
    26d0:	6b 96       	adiw	r28, 0x1b	; 27
    26d2:	9f af       	std	Y+63, r25	; 0x3f
    26d4:	6b 97       	sbiw	r28, 0x1b	; 27
    26d6:	36 c0       	rjmp	.+108    	; 0x2744 <main+0x10c6>
					}
					else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    26d8:	a5 01       	movw	r20, r10
    26da:	94 01       	movw	r18, r8
    26dc:	6d 2d       	mov	r22, r13
    26de:	7c 2d       	mov	r23, r12
    26e0:	83 2d       	mov	r24, r3
    26e2:	92 2d       	mov	r25, r2
    26e4:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    26e8:	88 23       	and	r24, r24
    26ea:	0c f0       	brlt	.+2      	; 0x26ee <main+0x1070>
    26ec:	6a c0       	rjmp	.+212    	; 0x27c2 <main+0x1144>
    26ee:	a5 01       	movw	r20, r10
    26f0:	94 01       	movw	r18, r8
    26f2:	68 96       	adiw	r28, 0x18	; 24
    26f4:	ef ad       	ldd	r30, Y+63	; 0x3f
    26f6:	68 97       	sbiw	r28, 0x18	; 24
    26f8:	69 96       	adiw	r28, 0x19	; 25
    26fa:	bf ad       	ldd	r27, Y+63	; 0x3f
    26fc:	69 97       	sbiw	r28, 0x19	; 25
    26fe:	6a 96       	adiw	r28, 0x1a	; 26
    2700:	af ad       	ldd	r26, Y+63	; 0x3f
    2702:	6a 97       	sbiw	r28, 0x1a	; 26
    2704:	6b 96       	adiw	r28, 0x1b	; 27
    2706:	ff ad       	ldd	r31, Y+63	; 0x3f
    2708:	6b 97       	sbiw	r28, 0x1b	; 27
    270a:	6e 2f       	mov	r22, r30
    270c:	7b 2f       	mov	r23, r27
    270e:	8a 2f       	mov	r24, r26
    2710:	9f 2f       	mov	r25, r31
    2712:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    2716:	18 16       	cp	r1, r24
    2718:	0c f0       	brlt	.+2      	; 0x271c <main+0x109e>
    271a:	60 c0       	rjmp	.+192    	; 0x27dc <main+0x115e>
					{
						diff_theta = theta_robot - dir_angle;
    271c:	2d 2d       	mov	r18, r13
    271e:	3c 2d       	mov	r19, r12
    2720:	43 2d       	mov	r20, r3
    2722:	52 2d       	mov	r21, r2
    2724:	c5 01       	movw	r24, r10
    2726:	b4 01       	movw	r22, r8
    2728:	0e 94 bb 19 	call	0x3376	; 0x3376 <__subsf3>
    272c:	68 96       	adiw	r28, 0x18	; 24
    272e:	6f af       	std	Y+63, r22	; 0x3f
    2730:	68 97       	sbiw	r28, 0x18	; 24
    2732:	69 96       	adiw	r28, 0x19	; 25
    2734:	7f af       	std	Y+63, r23	; 0x3f
    2736:	69 97       	sbiw	r28, 0x19	; 25
    2738:	6a 96       	adiw	r28, 0x1a	; 26
    273a:	8f af       	std	Y+63, r24	; 0x3f
    273c:	6a 97       	sbiw	r28, 0x1a	; 26
    273e:	6b 96       	adiw	r28, 0x1b	; 27
    2740:	9f af       	std	Y+63, r25	; 0x3f
    2742:	6b 97       	sbiw	r28, 0x1b	; 27
					}else 
					{
						diff_theta = 0;
					}
					
					if (diff_theta > -60 && diff_theta <60)
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	30 e0       	ldi	r19, 0x00	; 0
    2748:	40 e7       	ldi	r20, 0x70	; 112
    274a:	52 ec       	ldi	r21, 0xC2	; 194
    274c:	68 96       	adiw	r28, 0x18	; 24
    274e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2750:	68 97       	sbiw	r28, 0x18	; 24
    2752:	69 96       	adiw	r28, 0x19	; 25
    2754:	af ad       	ldd	r26, Y+63	; 0x3f
    2756:	69 97       	sbiw	r28, 0x19	; 25
    2758:	6a 96       	adiw	r28, 0x1a	; 26
    275a:	ff ad       	ldd	r31, Y+63	; 0x3f
    275c:	6a 97       	sbiw	r28, 0x1a	; 26
    275e:	6b 96       	adiw	r28, 0x1b	; 27
    2760:	ef ad       	ldd	r30, Y+63	; 0x3f
    2762:	6b 97       	sbiw	r28, 0x1b	; 27
    2764:	6b 2f       	mov	r22, r27
    2766:	7a 2f       	mov	r23, r26
    2768:	8f 2f       	mov	r24, r31
    276a:	9e 2f       	mov	r25, r30
    276c:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    2770:	18 16       	cp	r1, r24
    2772:	0c f0       	brlt	.+2      	; 0x2776 <main+0x10f8>
    2774:	4a c0       	rjmp	.+148    	; 0x280a <main+0x118c>
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e7       	ldi	r20, 0x70	; 112
    277c:	52 e4       	ldi	r21, 0x42	; 66
    277e:	68 96       	adiw	r28, 0x18	; 24
    2780:	bf ad       	ldd	r27, Y+63	; 0x3f
    2782:	68 97       	sbiw	r28, 0x18	; 24
    2784:	69 96       	adiw	r28, 0x19	; 25
    2786:	af ad       	ldd	r26, Y+63	; 0x3f
    2788:	69 97       	sbiw	r28, 0x19	; 25
    278a:	6a 96       	adiw	r28, 0x1a	; 26
    278c:	ff ad       	ldd	r31, Y+63	; 0x3f
    278e:	6a 97       	sbiw	r28, 0x1a	; 26
    2790:	6b 96       	adiw	r28, 0x1b	; 27
    2792:	ef ad       	ldd	r30, Y+63	; 0x3f
    2794:	6b 97       	sbiw	r28, 0x1b	; 27
    2796:	6b 2f       	mov	r22, r27
    2798:	7a 2f       	mov	r23, r26
    279a:	8f 2f       	mov	r24, r31
    279c:	9e 2f       	mov	r25, r30
    279e:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    27a2:	88 23       	and	r24, r24
    27a4:	3c f1       	brlt	.+78     	; 0x27f4 <main+0x1176>
    27a6:	31 c0       	rjmp	.+98     	; 0x280a <main+0x118c>
					if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
					{
						diff_theta = dir_angle - theta_robot;

					}
					else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    27a8:	68 96       	adiw	r28, 0x18	; 24
    27aa:	1f ae       	std	Y+63, r1	; 0x3f
    27ac:	68 97       	sbiw	r28, 0x18	; 24
    27ae:	69 96       	adiw	r28, 0x19	; 25
    27b0:	1f ae       	std	Y+63, r1	; 0x3f
    27b2:	69 97       	sbiw	r28, 0x19	; 25
    27b4:	6a 96       	adiw	r28, 0x1a	; 26
    27b6:	1f ae       	std	Y+63, r1	; 0x3f
    27b8:	6a 97       	sbiw	r28, 0x1a	; 26
    27ba:	6b 96       	adiw	r28, 0x1b	; 27
    27bc:	1f ae       	std	Y+63, r1	; 0x3f
    27be:	6b 97       	sbiw	r28, 0x1b	; 27
    27c0:	19 c0       	rjmp	.+50     	; 0x27f4 <main+0x1176>
						if (theta_robot < 0)
							diff_theta = dir_angle - theta_robot;
						else
							diff_theta = (dir_angle + 360) - theta_robot;
					}
					else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    27c2:	68 96       	adiw	r28, 0x18	; 24
    27c4:	1f ae       	std	Y+63, r1	; 0x3f
    27c6:	68 97       	sbiw	r28, 0x18	; 24
    27c8:	69 96       	adiw	r28, 0x19	; 25
    27ca:	1f ae       	std	Y+63, r1	; 0x3f
    27cc:	69 97       	sbiw	r28, 0x19	; 25
    27ce:	6a 96       	adiw	r28, 0x1a	; 26
    27d0:	1f ae       	std	Y+63, r1	; 0x3f
    27d2:	6a 97       	sbiw	r28, 0x1a	; 26
    27d4:	6b 96       	adiw	r28, 0x1b	; 27
    27d6:	1f ae       	std	Y+63, r1	; 0x3f
    27d8:	6b 97       	sbiw	r28, 0x1b	; 27
    27da:	0c c0       	rjmp	.+24     	; 0x27f4 <main+0x1176>
    27dc:	68 96       	adiw	r28, 0x18	; 24
    27de:	1f ae       	std	Y+63, r1	; 0x3f
    27e0:	68 97       	sbiw	r28, 0x18	; 24
    27e2:	69 96       	adiw	r28, 0x19	; 25
    27e4:	1f ae       	std	Y+63, r1	; 0x3f
    27e6:	69 97       	sbiw	r28, 0x19	; 25
    27e8:	6a 96       	adiw	r28, 0x1a	; 26
    27ea:	1f ae       	std	Y+63, r1	; 0x3f
    27ec:	6a 97       	sbiw	r28, 0x1a	; 26
    27ee:	6b 96       	adiw	r28, 0x1b	; 27
    27f0:	1f ae       	std	Y+63, r1	; 0x3f
    27f2:	6b 97       	sbiw	r28, 0x1b	; 27
					
					if (diff_theta > -60 && diff_theta <60)
					{
						status_go_to_goal = 0;
						circle_started_before = 0;
						state = GO_TO_GOAL_CURVED;
    27f4:	82 e0       	ldi	r24, 0x02	; 2
    27f6:	90 e0       	ldi	r25, 0x00	; 0
    27f8:	90 93 51 01 	sts	0x0151, r25
    27fc:	80 93 50 01 	sts	0x0150, r24
					}
					
					if (diff_theta > -60 && diff_theta <60)
					{
						status_go_to_goal = 0;
						circle_started_before = 0;
    2800:	a6 96       	adiw	r28, 0x26	; 38
    2802:	1f ae       	std	Y+63, r1	; 0x3f
    2804:	1e ae       	std	Y+62, r1	; 0x3e
    2806:	a6 97       	sbiw	r28, 0x26	; 38
						state = GO_TO_GOAL_CURVED;
						break;
    2808:	16 c8       	rjmp	.-4052   	; 0x1836 <main+0x1b8>
					}
					else
					{
						if (y_robot <= 0 && circle_started_before == 0)
    280a:	10 16       	cp	r1, r16
    280c:	11 06       	cpc	r1, r17
    280e:	94 f0       	brlt	.+36     	; 0x2834 <main+0x11b6>
    2810:	a6 96       	adiw	r28, 0x26	; 38
    2812:	2e ad       	ldd	r18, Y+62	; 0x3e
    2814:	3f ad       	ldd	r19, Y+63	; 0x3f
    2816:	a6 97       	sbiw	r28, 0x26	; 38
    2818:	23 2b       	or	r18, r19
    281a:	11 f0       	breq	.+4      	; 0x2820 <main+0x11a2>
    281c:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						{
							circle_left();
    2820:	0e 94 a0 0a 	call	0x1540	; 0x1540 <circle_left>
							circle_started_before = 1;
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	a6 96       	adiw	r28, 0x26	; 38
    282a:	9f af       	std	Y+63, r25	; 0x3f
    282c:	8e af       	std	Y+62, r24	; 0x3e
    282e:	a6 97       	sbiw	r28, 0x26	; 38
    2830:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						}
						else if (y_robot > 0 && circle_started_before == 0)
    2834:	a6 96       	adiw	r28, 0x26	; 38
    2836:	ae ad       	ldd	r26, Y+62	; 0x3e
    2838:	bf ad       	ldd	r27, Y+63	; 0x3f
    283a:	a6 97       	sbiw	r28, 0x26	; 38
    283c:	ab 2b       	or	r26, r27
    283e:	11 f0       	breq	.+4      	; 0x2844 <main+0x11c6>
    2840:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						{
							circle_right();
    2844:	0e 94 af 0a 	call	0x155e	; 0x155e <circle_right>
							circle_started_before = 1;							
    2848:	e1 e0       	ldi	r30, 0x01	; 1
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	a6 96       	adiw	r28, 0x26	; 38
    284e:	ff af       	std	Y+63, r31	; 0x3f
    2850:	ee af       	std	Y+62, r30	; 0x3e
    2852:	a6 97       	sbiw	r28, 0x26	; 38
    2854:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
					}	
														
				}
				
			}
			else if (status_go_to_goal == 1)
    2858:	6d 96       	adiw	r28, 0x1d	; 29
    285a:	2e ad       	ldd	r18, Y+62	; 0x3e
    285c:	3f ad       	ldd	r19, Y+63	; 0x3f
    285e:	6d 97       	sbiw	r28, 0x1d	; 29
    2860:	21 30       	cpi	r18, 0x01	; 1
    2862:	31 05       	cpc	r19, r1
    2864:	11 f0       	breq	.+4      	; 0x286a <main+0x11ec>
    2866:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
			{
				//stop_motor();
				status_go_to_goal = 0;
				circle_started_before = 0;
				state = STOP_STATE;
    286a:	85 e1       	ldi	r24, 0x15	; 21
    286c:	90 e0       	ldi	r25, 0x00	; 0
    286e:	90 93 51 01 	sts	0x0151, r25
    2872:	80 93 50 01 	sts	0x0150, r24
			}
			else if (status_go_to_goal == 1)
			{
				//stop_motor();
				status_go_to_goal = 0;
				circle_started_before = 0;
    2876:	a6 96       	adiw	r28, 0x26	; 38
    2878:	1f ae       	std	Y+63, r1	; 0x3f
    287a:	1e ae       	std	Y+62, r1	; 0x3e
    287c:	a6 97       	sbiw	r28, 0x26	; 38
				
			}
			else if (status_go_to_goal == 1)
			{
				//stop_motor();
				status_go_to_goal = 0;
    287e:	6d 96       	adiw	r28, 0x1d	; 29
    2880:	1f ae       	std	Y+63, r1	; 0x3f
    2882:	1e ae       	std	Y+62, r1	; 0x3e
    2884:	6d 97       	sbiw	r28, 0x1d	; 29
    2886:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
				state = STOP_STATE;
			}
			break;
             
			case SYSTEM_STATE:
				switch (buffer_rec[0])
    288a:	80 91 46 01 	lds	r24, 0x0146
    288e:	83 3a       	cpi	r24, 0xA3	; 163
    2890:	79 f1       	breq	.+94     	; 0x28f0 <main+0x1272>
    2892:	40 f4       	brcc	.+16     	; 0x28a4 <main+0x1226>
    2894:	81 3a       	cpi	r24, 0xA1	; 161
    2896:	c9 f0       	breq	.+50     	; 0x28ca <main+0x124c>
    2898:	00 f5       	brcc	.+64     	; 0x28da <main+0x125c>
    289a:	80 3a       	cpi	r24, 0xA0	; 160
    289c:	11 f0       	breq	.+4      	; 0x28a2 <main+0x1224>
    289e:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
    28a2:	0b c0       	rjmp	.+22     	; 0x28ba <main+0x123c>
    28a4:	86 3a       	cpi	r24, 0xA6	; 166
    28a6:	09 f4       	brne	.+2      	; 0x28aa <main+0x122c>
    28a8:	3f c0       	rjmp	.+126    	; 0x2928 <main+0x12aa>
    28aa:	87 3a       	cpi	r24, 0xA7	; 167
    28ac:	09 f4       	brne	.+2      	; 0x28b0 <main+0x1232>
    28ae:	4d c0       	rjmp	.+154    	; 0x294a <main+0x12cc>
    28b0:	84 3a       	cpi	r24, 0xA4	; 164
    28b2:	11 f0       	breq	.+4      	; 0x28b8 <main+0x123a>
    28b4:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
    28b8:	26 c0       	rjmp	.+76     	; 0x2906 <main+0x1288>
				{
					//Comm test
					case 0xA0:
						state = BLUE_LED_STATE;
    28ba:	86 e1       	ldi	r24, 0x16	; 22
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	90 93 51 01 	sts	0x0151, r25
    28c2:	80 93 50 01 	sts	0x0150, r24
						break;
    28c6:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
							//pause_bool = 0;
						//}else
						//{
							//state = INITIAL_STATE;
						//}
						state = INITIAL_STATE;
    28ca:	10 92 51 01 	sts	0x0151, r1
    28ce:	10 92 50 01 	sts	0x0150, r1
						m_red(ON);
    28d2:	6e 9a       	sbi	0x0d, 6	; 13
    28d4:	76 98       	cbi	0x0e, 6	; 14
    28d6:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						break;
					
					//Goal A
					case 0xA2:
						if (check(PINB,2))
    28da:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();					
    28dc:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    28e0:	85 e1       	ldi	r24, 0x15	; 21
    28e2:	90 e0       	ldi	r25, 0x00	; 0
    28e4:	90 93 51 01 	sts	0x0151, r25
    28e8:	80 93 50 01 	sts	0x0150, r24
						break;
    28ec:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						
					//Goal B
					case 0xA3:
						if (!check(PINB,2))
    28f0:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();
    28f2:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    28f6:	85 e1       	ldi	r24, 0x15	; 21
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	90 93 51 01 	sts	0x0151, r25
    28fe:	80 93 50 01 	sts	0x0150, r24
						break;
    2902:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						
					//Pause
					case 0xA4:
						pause_bool = 1;
						stop_counter = 0;
						go_bwd();
    2906:	0e 94 93 0a 	call	0x1526	; 0x1526 <go_bwd>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    2910:	80 34       	cpi	r24, 0x40	; 64
    2912:	3c e9       	ldi	r19, 0x9C	; 156
    2914:	93 07       	cpc	r25, r19
    2916:	d9 f7       	brne	.-10     	; 0x290e <main+0x1290>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    2918:	85 e1       	ldi	r24, 0x15	; 21
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	90 93 51 01 	sts	0x0151, r25
    2920:	80 93 50 01 	sts	0x0150, r24
						break;
    2924:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						
					//Halftime
					case 0xA6:
						stop_counter = 0;
						go_bwd();
    2928:	0e 94 93 0a 	call	0x1526	; 0x1526 <go_bwd>
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	90 e0       	ldi	r25, 0x00	; 0
    2930:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    2932:	80 34       	cpi	r24, 0x40	; 64
    2934:	ac e9       	ldi	r26, 0x9C	; 156
    2936:	9a 07       	cpc	r25, r26
    2938:	d9 f7       	brne	.-10     	; 0x2930 <main+0x12b2>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    293a:	85 e1       	ldi	r24, 0x15	; 21
    293c:	90 e0       	ldi	r25, 0x00	; 0
    293e:	90 93 51 01 	sts	0x0151, r25
    2942:	80 93 50 01 	sts	0x0150, r24
						break;
    2946:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						
					//Game over
					case 0xA7:
						if (check(PINB,2))
    294a:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
							celebrate();
						}
						stop_motor();
    294c:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stop_motor>
						stop_counter = 0;
						go_bwd();
    2950:	0e 94 93 0a 	call	0x1526	; 0x1526 <go_bwd>
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	90 e0       	ldi	r25, 0x00	; 0
    2958:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    295a:	80 34       	cpi	r24, 0x40	; 64
    295c:	bc e9       	ldi	r27, 0x9C	; 156
    295e:	9b 07       	cpc	r25, r27
    2960:	d9 f7       	brne	.-10     	; 0x2958 <main+0x12da>
						{
							stop_counter++;
						}
						state = STOP_STATE;													
    2962:	85 e1       	ldi	r24, 0x15	; 21
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	90 93 51 01 	sts	0x0151, r25
    296a:	80 93 50 01 	sts	0x0150, r24
						break;
    296e:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
						break;						
				}
				break;
				
			case BLUE_LED_STATE:
				stop_motor();
    2972:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stop_motor>
				turnOnBlueLED();
    2976:	0e 94 3d 0b 	call	0x167a	; 0x167a <turnOnBlueLED>
				state = STOP_STATE;
    297a:	85 e1       	ldi	r24, 0x15	; 21
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	90 93 51 01 	sts	0x0151, r25
    2982:	80 93 50 01 	sts	0x0150, r24
				break;
    2986:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
				
			case STOP_STATE:
				m_green(ON);
    298a:	6a 9a       	sbi	0x0d, 2	; 13
    298c:	72 98       	cbi	0x0e, 2	; 14
				stop_motor();
    298e:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stop_motor>
				break;			  
    2992:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
                
            default:
			    stop_motor();
    2996:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <stop_motor>
    299a:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <main+0x1b8>
int main(void)
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    299e:	ee 24       	eor	r14, r14
    29a0:	e3 94       	inc	r14
    29a2:	f1 2c       	mov	r15, r1
    29a4:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <main+0x252>
					PT7_have_puck = ADC;
					break;
			}
         
			//After doing the conversion reset flag
			set(ADCSRA,ADIF);
    29a8:	f2 01       	movw	r30, r4
    29aa:	80 81       	ld	r24, Z
    29ac:	80 61       	ori	r24, 0x10	; 16
    29ae:	80 83       	st	Z, r24
    29b0:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <main+0x24c>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    29b4:	6e 96       	adiw	r28, 0x1e	; 30
    29b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    29b8:	6e 97       	sbiw	r28, 0x1e	; 30
    29ba:	a4 96       	adiw	r28, 0x24	; 36
    29bc:	8f ad       	ldd	r24, Y+63	; 0x3f
    29be:	a4 97       	sbiw	r28, 0x24	; 36
    29c0:	23 2d       	mov	r18, r3
    29c2:	32 2d       	mov	r19, r2
    29c4:	49 2f       	mov	r20, r25
    29c6:	58 2f       	mov	r21, r24
    29c8:	c7 01       	movw	r24, r14
    29ca:	b6 01       	movw	r22, r12
    29cc:	0e 94 32 1c 	call	0x3864	; 0x3864 <__gesf2>
    29d0:	88 23       	and	r24, r24
    29d2:	0c f0       	brlt	.+2      	; 0x29d6 <main+0x1358>
    29d4:	29 ca       	rjmp	.-2990   	; 0x1e28 <main+0x7aa>
    29d6:	3b ca       	rjmp	.-2954   	; 0x1e4e <main+0x7d0>
                {
                    goal_pos_x = GOAL_A_POS_X;
                    goal_pos_y = GOAL_A_POS_Y;
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
    29d8:	80 e0       	ldi	r24, 0x00	; 0
    29da:	90 e0       	ldi	r25, 0x00	; 0
    29dc:	c7 ca       	rjmp	.-2674   	; 0x1f6c <main+0x8ee>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    29de:	23 96       	adiw	r28, 0x03	; 3
    29e0:	0e ad       	ldd	r16, Y+62	; 0x3e
    29e2:	1f ad       	ldd	r17, Y+63	; 0x3f
    29e4:	23 97       	sbiw	r28, 0x03	; 3
    29e6:	b8 01       	movw	r22, r16
    29e8:	88 27       	eor	r24, r24
    29ea:	77 fd       	sbrc	r23, 7
    29ec:	80 95       	com	r24
    29ee:	98 2f       	mov	r25, r24
    29f0:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    29f4:	6b 01       	movw	r12, r22
    29f6:	7c 01       	movw	r14, r24
    29f8:	9b 01       	movw	r18, r22
    29fa:	ac 01       	movw	r20, r24
    29fc:	68 96       	adiw	r28, 0x18	; 24
    29fe:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a00:	68 97       	sbiw	r28, 0x18	; 24
    2a02:	69 96       	adiw	r28, 0x19	; 25
    2a04:	ef ad       	ldd	r30, Y+63	; 0x3f
    2a06:	69 97       	sbiw	r28, 0x19	; 25
    2a08:	63 2d       	mov	r22, r3
    2a0a:	72 2d       	mov	r23, r2
    2a0c:	8f 2f       	mov	r24, r31
    2a0e:	9e 2f       	mov	r25, r30
    2a10:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	0c f0       	brlt	.+2      	; 0x2a1a <main+0x139c>
    2a18:	81 cb       	rjmp	.-2302   	; 0x211c <main+0xa9e>
    2a1a:	a1 cb       	rjmp	.-2238   	; 0x215e <main+0xae0>
						angle_dir_aux += 360;
						add_360 = 1;
					}
					
					
					if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    2a1c:	23 96       	adiw	r28, 0x03	; 3
    2a1e:	ee ac       	ldd	r14, Y+62	; 0x3e
    2a20:	ff ac       	ldd	r15, Y+63	; 0x3f
    2a22:	23 97       	sbiw	r28, 0x03	; 3
    2a24:	b7 01       	movw	r22, r14
    2a26:	88 27       	eor	r24, r24
    2a28:	77 fd       	sbrc	r23, 7
    2a2a:	80 95       	com	r24
    2a2c:	98 2f       	mov	r25, r24
    2a2e:	0e 94 24 1b 	call	0x3648	; 0x3648 <__floatsisf>
    2a32:	4b 01       	movw	r8, r22
    2a34:	5c 01       	movw	r10, r24
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	68 96       	adiw	r28, 0x18	; 24
    2a3c:	ff ad       	ldd	r31, Y+63	; 0x3f
    2a3e:	68 97       	sbiw	r28, 0x18	; 24
    2a40:	69 96       	adiw	r28, 0x19	; 25
    2a42:	ef ad       	ldd	r30, Y+63	; 0x3f
    2a44:	69 97       	sbiw	r28, 0x19	; 25
    2a46:	6a 96       	adiw	r28, 0x1a	; 26
    2a48:	af ad       	ldd	r26, Y+63	; 0x3f
    2a4a:	6a 97       	sbiw	r28, 0x1a	; 26
    2a4c:	6b 96       	adiw	r28, 0x1b	; 27
    2a4e:	bf ad       	ldd	r27, Y+63	; 0x3f
    2a50:	6b 97       	sbiw	r28, 0x1b	; 27
    2a52:	6f 2f       	mov	r22, r31
    2a54:	7e 2f       	mov	r23, r30
    2a56:	8a 2f       	mov	r24, r26
    2a58:	9b 2f       	mov	r25, r27
    2a5a:	0e 94 82 1a 	call	0x3504	; 0x3504 <__cmpsf2>
    2a5e:	18 16       	cp	r1, r24
    2a60:	0c f0       	brlt	.+2      	; 0x2a64 <main+0x13e6>
    2a62:	76 cd       	rjmp	.-1300   	; 0x2550 <main+0xed2>
    2a64:	94 cd       	rjmp	.-1240   	; 0x258e <main+0xf10>

00002a66 <__vector_41>:
 m_red(ON);
 flag_timer = 1;
 }*/

ISR(TIMER4_OVF_vect)
{
    2a66:	1f 92       	push	r1
    2a68:	0f 92       	push	r0
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	0f 92       	push	r0
    2a6e:	11 24       	eor	r1, r1
    2a70:	8f 93       	push	r24
    2a72:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    2a74:	81 e0       	ldi	r24, 0x01	; 1
    2a76:	90 e0       	ldi	r25, 0x00	; 0
    2a78:	90 93 53 01 	sts	0x0153, r25
    2a7c:	80 93 52 01 	sts	0x0152, r24
}
    2a80:	9f 91       	pop	r25
    2a82:	8f 91       	pop	r24
    2a84:	0f 90       	pop	r0
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	0f 90       	pop	r0
    2a8a:	1f 90       	pop	r1
    2a8c:	18 95       	reti

00002a8e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2a8e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2a90:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2a92:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2a94:	8c e0       	ldi	r24, 0x0C	; 12
    2a96:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2a9a:	e9 e6       	ldi	r30, 0x69	; 105
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	80 62       	ori	r24, 0x20	; 32
    2aa2:	80 83       	st	Z, r24
    2aa4:	80 81       	ld	r24, Z
    2aa6:	8f 7e       	andi	r24, 0xEF	; 239
    2aa8:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2aaa:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2aac:	78 94       	sei
    2aae:	08 95       	ret

00002ab0 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2ab0:	1f 93       	push	r17
    2ab2:	cf 93       	push	r28
    2ab4:	df 93       	push	r29
    2ab6:	18 2f       	mov	r17, r24
    2ab8:	d6 2f       	mov	r29, r22
    2aba:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2abc:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2ac0:	94 ea       	ldi	r25, 0xA4	; 164
    2ac2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2ac6:	ec eb       	ldi	r30, 0xBC	; 188
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	90 81       	ld	r25, Z
    2acc:	99 23       	and	r25, r25
    2ace:	ec f7       	brge	.-6      	; 0x2aca <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2ad0:	90 e5       	ldi	r25, 0x50	; 80
    2ad2:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ad6:	94 e8       	ldi	r25, 0x84	; 132
    2ad8:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2adc:	ec eb       	ldi	r30, 0xBC	; 188
    2ade:	f0 e0       	ldi	r31, 0x00	; 0
    2ae0:	90 81       	ld	r25, Z
    2ae2:	99 23       	and	r25, r25
    2ae4:	ec f7       	brge	.-6      	; 0x2ae0 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2ae6:	90 91 b9 00 	lds	r25, 0x00B9
    2aea:	98 7f       	andi	r25, 0xF8	; 248
    2aec:	90 32       	cpi	r25, 0x20	; 32
    2aee:	29 f4       	brne	.+10     	; 0x2afa <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2af0:	84 e9       	ldi	r24, 0x94	; 148
    2af2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2af6:	80 e0       	ldi	r24, 0x00	; 0
    2af8:	2d c0       	rjmp	.+90     	; 0x2b54 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b00:	84 e8       	ldi	r24, 0x84	; 132
    2b02:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b06:	ec eb       	ldi	r30, 0xBC	; 188
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	90 81       	ld	r25, Z
    2b0c:	99 23       	and	r25, r25
    2b0e:	ec f7       	brge	.-6      	; 0x2b0a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2b10:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b14:	84 e8       	ldi	r24, 0x84	; 132
    2b16:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b1a:	ec eb       	ldi	r30, 0xBC	; 188
    2b1c:	f0 e0       	ldi	r31, 0x00	; 0
    2b1e:	80 81       	ld	r24, Z
    2b20:	88 23       	and	r24, r24
    2b22:	ec f7       	brge	.-6      	; 0x2b1e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2b24:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b28:	84 e8       	ldi	r24, 0x84	; 132
    2b2a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b2e:	ec eb       	ldi	r30, 0xBC	; 188
    2b30:	f0 e0       	ldi	r31, 0x00	; 0
    2b32:	80 81       	ld	r24, Z
    2b34:	88 23       	and	r24, r24
    2b36:	ec f7       	brge	.-6      	; 0x2b32 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2b38:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b3c:	84 e8       	ldi	r24, 0x84	; 132
    2b3e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b42:	ec eb       	ldi	r30, 0xBC	; 188
    2b44:	f0 e0       	ldi	r31, 0x00	; 0
    2b46:	80 81       	ld	r24, Z
    2b48:	88 23       	and	r24, r24
    2b4a:	ec f7       	brge	.-6      	; 0x2b46 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2b4c:	84 e9       	ldi	r24, 0x94	; 148
    2b4e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2b52:	81 e0       	ldi	r24, 0x01	; 1
}
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	08 95       	ret

00002b5c <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    2b5c:	cf 93       	push	r28
    2b5e:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    2b60:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2b62:	94 ea       	ldi	r25, 0xA4	; 164
    2b64:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b68:	ec eb       	ldi	r30, 0xBC	; 188
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	90 81       	ld	r25, Z
    2b6e:	99 23       	and	r25, r25
    2b70:	ec f7       	brge	.-6      	; 0x2b6c <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2b72:	90 e5       	ldi	r25, 0x50	; 80
    2b74:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b78:	94 e8       	ldi	r25, 0x84	; 132
    2b7a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b7e:	ec eb       	ldi	r30, 0xBC	; 188
    2b80:	f0 e0       	ldi	r31, 0x00	; 0
    2b82:	90 81       	ld	r25, Z
    2b84:	99 23       	and	r25, r25
    2b86:	ec f7       	brge	.-6      	; 0x2b82 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2b88:	90 91 b9 00 	lds	r25, 0x00B9
    2b8c:	98 7f       	andi	r25, 0xF8	; 248
    2b8e:	90 32       	cpi	r25, 0x20	; 32
    2b90:	31 f4       	brne	.+12     	; 0x2b9e <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b92:	84 e9       	ldi	r24, 0x94	; 148
    2b94:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2b98:	78 94       	sei
		return 0;
    2b9a:	80 e0       	ldi	r24, 0x00	; 0
    2b9c:	32 c0       	rjmp	.+100    	; 0x2c02 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    2b9e:	93 e0       	ldi	r25, 0x03	; 3
    2ba0:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2ba4:	94 e8       	ldi	r25, 0x84	; 132
    2ba6:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2baa:	ec eb       	ldi	r30, 0xBC	; 188
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	90 81       	ld	r25, Z
    2bb0:	99 23       	and	r25, r25
    2bb2:	ec f7       	brge	.-6      	; 0x2bae <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    2bb4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2bb8:	84 e8       	ldi	r24, 0x84	; 132
    2bba:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2bbe:	ec eb       	ldi	r30, 0xBC	; 188
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	80 81       	ld	r24, Z
    2bc4:	88 23       	and	r24, r24
    2bc6:	ec f7       	brge	.-6      	; 0x2bc2 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2bc8:	24 2f       	mov	r18, r20
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	12 16       	cp	r1, r18
    2bce:	13 06       	cpc	r1, r19
    2bd0:	9c f4       	brge	.+38     	; 0x2bf8 <m_rf_send+0x9c>
    2bd2:	a6 2f       	mov	r26, r22
    2bd4:	b7 2f       	mov	r27, r23
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    2bda:	cb eb       	ldi	r28, 0xBB	; 187
    2bdc:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    2bde:	ec eb       	ldi	r30, 0xBC	; 188
    2be0:	f0 e0       	ldi	r31, 0x00	; 0
    2be2:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    2be4:	4d 91       	ld	r20, X+
    2be6:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    2be8:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    2bea:	40 81       	ld	r20, Z
    2bec:	44 23       	and	r20, r20
    2bee:	ec f7       	brge	.-6      	; 0x2bea <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2bf0:	01 96       	adiw	r24, 0x01	; 1
    2bf2:	82 17       	cp	r24, r18
    2bf4:	93 07       	cpc	r25, r19
    2bf6:	b4 f3       	brlt	.-20     	; 0x2be4 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2bf8:	84 e9       	ldi	r24, 0x94	; 148
    2bfa:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    2bfe:	78 94       	sei
	
	return 1;
    2c00:	81 e0       	ldi	r24, 0x01	; 1
}
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	08 95       	ret

00002c08 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2c08:	1f 92       	push	r1
    2c0a:	0f 92       	push	r0
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	0f 92       	push	r0
    2c10:	11 24       	eor	r1, r1
    2c12:	8f 93       	push	r24
    2c14:	9f 93       	push	r25
    2c16:	ef 93       	push	r30
    2c18:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2c1a:	e1 ee       	ldi	r30, 0xE1	; 225
    2c1c:	f0 e0       	ldi	r31, 0x00	; 0
    2c1e:	80 81       	ld	r24, Z
        UDINT = 0;
    2c20:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2c22:	83 ff       	sbrs	r24, 3
    2c24:	11 c0       	rjmp	.+34     	; 0x2c48 <__vector_10+0x40>
		UENUM = 0;
    2c26:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2c2a:	91 e0       	ldi	r25, 0x01	; 1
    2c2c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2c30:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2c34:	92 e1       	ldi	r25, 0x12	; 18
    2c36:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2c3a:	98 e0       	ldi	r25, 0x08	; 8
    2c3c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2c40:	10 92 55 01 	sts	0x0155, r1
		cdc_line_rtsdtr = 0;
    2c44:	10 92 56 01 	sts	0x0156, r1
        }
	if (intbits & (1<<SOFI)) {
    2c48:	82 ff       	sbrs	r24, 2
    2c4a:	13 c0       	rjmp	.+38     	; 0x2c72 <__vector_10+0x6a>
		if (usb_configuration) {
    2c4c:	80 91 55 01 	lds	r24, 0x0155
    2c50:	88 23       	and	r24, r24
    2c52:	79 f0       	breq	.+30     	; 0x2c72 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2c54:	80 91 54 01 	lds	r24, 0x0154
			if (t) {
    2c58:	88 23       	and	r24, r24
    2c5a:	59 f0       	breq	.+22     	; 0x2c72 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2c5c:	81 50       	subi	r24, 0x01	; 1
    2c5e:	80 93 54 01 	sts	0x0154, r24
				if (!t) {
    2c62:	81 11       	cpse	r24, r1
    2c64:	06 c0       	rjmp	.+12     	; 0x2c72 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2c66:	84 e0       	ldi	r24, 0x04	; 4
    2c68:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2c6c:	8a e3       	ldi	r24, 0x3A	; 58
    2c6e:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2c72:	ff 91       	pop	r31
    2c74:	ef 91       	pop	r30
    2c76:	9f 91       	pop	r25
    2c78:	8f 91       	pop	r24
    2c7a:	0f 90       	pop	r0
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	0f 90       	pop	r0
    2c80:	1f 90       	pop	r1
    2c82:	18 95       	reti

00002c84 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2c84:	1f 92       	push	r1
    2c86:	0f 92       	push	r0
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	0f 92       	push	r0
    2c8c:	11 24       	eor	r1, r1
    2c8e:	0f 93       	push	r16
    2c90:	1f 93       	push	r17
    2c92:	2f 93       	push	r18
    2c94:	3f 93       	push	r19
    2c96:	4f 93       	push	r20
    2c98:	5f 93       	push	r21
    2c9a:	6f 93       	push	r22
    2c9c:	7f 93       	push	r23
    2c9e:	8f 93       	push	r24
    2ca0:	9f 93       	push	r25
    2ca2:	af 93       	push	r26
    2ca4:	bf 93       	push	r27
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	ef 93       	push	r30
    2cac:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2cae:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2cb2:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2cb6:	83 ff       	sbrs	r24, 3
    2cb8:	51 c1       	rjmp	.+674    	; 0x2f5c <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    2cba:	e1 ef       	ldi	r30, 0xF1	; 241
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    2cc0:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2cc2:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2cc4:	30 81       	ld	r19, Z
    2cc6:	93 2f       	mov	r25, r19
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	dc 01       	movw	r26, r24
    2ccc:	a2 2b       	or	r26, r18
    2cce:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    2cd0:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    2cd2:	60 81       	ld	r22, Z
    2cd4:	96 2f       	mov	r25, r22
    2cd6:	80 e0       	ldi	r24, 0x00	; 0
    2cd8:	85 2b       	or	r24, r21
                wLength = UEDATX;
    2cda:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    2cdc:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2cde:	52 ef       	ldi	r21, 0xF2	; 242
    2ce0:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    2ce4:	46 30       	cpi	r20, 0x06	; 6
    2ce6:	09 f0       	breq	.+2      	; 0x2cea <__vector_11+0x66>
    2ce8:	5c c0       	rjmp	.+184    	; 0x2da2 <__vector_11+0x11e>
    2cea:	04 c0       	rjmp	.+8      	; 0x2cf4 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2cec:	81 e2       	ldi	r24, 0x21	; 33
    2cee:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2cf2:	3b c1       	rjmp	.+630    	; 0x2f6a <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2cf4:	c6 e0       	ldi	r28, 0x06	; 6
    2cf6:	47 ef       	ldi	r20, 0xF7	; 247
    2cf8:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    2cfa:	fa 01       	movw	r30, r20
    2cfc:	65 91       	lpm	r22, Z+
    2cfe:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    2d00:	26 17       	cp	r18, r22
    2d02:	37 07       	cpc	r19, r23
    2d04:	19 f0       	breq	.+6      	; 0x2d0c <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    2d06:	49 5f       	subi	r20, 0xF9	; 249
    2d08:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    2d0a:	20 c0       	rjmp	.+64     	; 0x2d4c <__vector_11+0xc8>
				}
				list += 2;
    2d0c:	fa 01       	movw	r30, r20
    2d0e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2d10:	65 91       	lpm	r22, Z+
    2d12:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2d14:	86 17       	cp	r24, r22
    2d16:	97 07       	cpc	r25, r23
    2d18:	19 f0       	breq	.+6      	; 0x2d20 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    2d1a:	49 5f       	subi	r20, 0xF9	; 249
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    2d1e:	16 c0       	rjmp	.+44     	; 0x2d4c <__vector_11+0xc8>
				}
				list += 2;
    2d20:	fa 01       	movw	r30, r20
    2d22:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2d24:	85 91       	lpm	r24, Z+
    2d26:	94 91       	lpm	r25, Z
    2d28:	28 2f       	mov	r18, r24
    2d2a:	39 2f       	mov	r19, r25
				list += 2;
    2d2c:	fa 01       	movw	r30, r20
    2d2e:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2d30:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2d32:	9b 2f       	mov	r25, r27
    2d34:	80 e0       	ldi	r24, 0x00	; 0
    2d36:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2d38:	8f 3f       	cpi	r24, 0xFF	; 255
    2d3a:	91 05       	cpc	r25, r1
    2d3c:	19 f0       	breq	.+6      	; 0x2d44 <__vector_11+0xc0>
    2d3e:	10 f0       	brcs	.+4      	; 0x2d44 <__vector_11+0xc0>
    2d40:	8f ef       	ldi	r24, 0xFF	; 255
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	84 17       	cp	r24, r20
    2d46:	28 f4       	brcc	.+10     	; 0x2d52 <__vector_11+0xce>
    2d48:	48 2f       	mov	r20, r24
    2d4a:	03 c0       	rjmp	.+6      	; 0x2d52 <__vector_11+0xce>
    2d4c:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2d4e:	a9 f6       	brne	.-86     	; 0x2cfa <__vector_11+0x76>
    2d50:	cd cf       	rjmp	.-102    	; 0x2cec <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2d52:	c8 ee       	ldi	r28, 0xE8	; 232
    2d54:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d56:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2d58:	a1 ef       	ldi	r26, 0xF1	; 241
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2d5c:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2d5e:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2d60:	98 2f       	mov	r25, r24
    2d62:	95 70       	andi	r25, 0x05	; 5
    2d64:	e1 f3       	breq	.-8      	; 0x2d5e <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2d66:	82 fd       	sbrc	r24, 2
    2d68:	00 c1       	rjmp	.+512    	; 0x2f6a <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2d6a:	64 2f       	mov	r22, r20
    2d6c:	41 31       	cpi	r20, 0x11	; 17
    2d6e:	08 f0       	brcs	.+2      	; 0x2d72 <__vector_11+0xee>
    2d70:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    2d72:	66 23       	and	r22, r22
    2d74:	09 f4       	brne	.+2      	; 0x2d78 <__vector_11+0xf4>
    2d76:	f6 c0       	rjmp	.+492    	; 0x2f64 <__vector_11+0x2e0>
    2d78:	c9 01       	movw	r24, r18
    2d7a:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	01 96       	adiw	r24, 0x01	; 1
    2d80:	e4 91       	lpm	r30, Z
    2d82:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2d84:	51 50       	subi	r21, 0x01	; 1
    2d86:	d1 f7       	brne	.-12     	; 0x2d7c <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2d88:	86 2f       	mov	r24, r22
    2d8a:	81 50       	subi	r24, 0x01	; 1
    2d8c:	90 e0       	ldi	r25, 0x00	; 0
    2d8e:	01 96       	adiw	r24, 0x01	; 1
    2d90:	28 0f       	add	r18, r24
    2d92:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2d94:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d96:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2d98:	41 11       	cpse	r20, r1
    2d9a:	e1 cf       	rjmp	.-62     	; 0x2d5e <__vector_11+0xda>
    2d9c:	60 31       	cpi	r22, 0x10	; 16
    2d9e:	f9 f2       	breq	.-66     	; 0x2d5e <__vector_11+0xda>
    2da0:	e4 c0       	rjmp	.+456    	; 0x2f6a <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2da2:	45 30       	cpi	r20, 0x05	; 5
    2da4:	61 f4       	brne	.+24     	; 0x2dbe <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2da6:	8e ef       	ldi	r24, 0xFE	; 254
    2da8:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2dac:	e8 ee       	ldi	r30, 0xE8	; 232
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	80 ff       	sbrs	r24, 0
    2db4:	fd cf       	rjmp	.-6      	; 0x2db0 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2db6:	20 68       	ori	r18, 0x80	; 128
    2db8:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2dbc:	d6 c0       	rjmp	.+428    	; 0x2f6a <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2dbe:	49 30       	cpi	r20, 0x09	; 9
    2dc0:	a1 f5       	brne	.+104    	; 0x2e2a <__vector_11+0x1a6>
    2dc2:	71 11       	cpse	r23, r1
    2dc4:	5b c0       	rjmp	.+182    	; 0x2e7c <__vector_11+0x1f8>
			usb_configuration = wValue;
    2dc6:	20 93 55 01 	sts	0x0155, r18
			cdc_line_rtsdtr = 0;
    2dca:	10 92 56 01 	sts	0x0156, r1
			transmit_flush_timer = 0;
    2dce:	10 92 54 01 	sts	0x0154, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2dd2:	8e ef       	ldi	r24, 0xFE	; 254
    2dd4:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2dd8:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2dda:	81 e2       	ldi	r24, 0x21	; 33
    2ddc:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    2dde:	c9 ee       	ldi	r28, 0xE9	; 233
    2de0:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2de2:	ab ee       	ldi	r26, 0xEB	; 235
    2de4:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2de6:	6c ee       	ldi	r22, 0xEC	; 236
    2de8:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2dea:	4d ee       	ldi	r20, 0xED	; 237
    2dec:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2dee:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2df0:	9c 01       	movw	r18, r24
    2df2:	2f 5f       	subi	r18, 0xFF	; 255
    2df4:	3f 4f       	sbci	r19, 0xFF	; 255
    2df6:	fc 01       	movw	r30, r24
    2df8:	04 91       	lpm	r16, Z
				UECONX = en;
    2dfa:	0c 93       	st	X, r16
				if (en) {
    2dfc:	00 23       	and	r16, r16
    2dfe:	59 f0       	breq	.+22     	; 0x2e16 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    2e00:	f9 01       	movw	r30, r18
    2e02:	24 91       	lpm	r18, Z
    2e04:	fb 01       	movw	r30, r22
    2e06:	20 83       	st	Z, r18
    2e08:	fc 01       	movw	r30, r24
    2e0a:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    2e0c:	03 96       	adiw	r24, 0x03	; 3
    2e0e:	24 91       	lpm	r18, Z
    2e10:	fa 01       	movw	r30, r20
    2e12:	20 83       	st	Z, r18
    2e14:	01 c0       	rjmp	.+2      	; 0x2e18 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2e16:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2e18:	1f 5f       	subi	r17, 0xFF	; 255
    2e1a:	15 30       	cpi	r17, 0x05	; 5
    2e1c:	41 f7       	brne	.-48     	; 0x2dee <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2e1e:	ea ee       	ldi	r30, 0xEA	; 234
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	8e e1       	ldi	r24, 0x1E	; 30
    2e24:	80 83       	st	Z, r24
        		UERST = 0;
    2e26:	10 82       	st	Z, r1
			return;
    2e28:	a0 c0       	rjmp	.+320    	; 0x2f6a <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2e2a:	48 30       	cpi	r20, 0x08	; 8
    2e2c:	81 f4       	brne	.+32     	; 0x2e4e <__vector_11+0x1ca>
    2e2e:	70 38       	cpi	r23, 0x80	; 128
    2e30:	09 f0       	breq	.+2      	; 0x2e34 <__vector_11+0x1b0>
    2e32:	3f c0       	rjmp	.+126    	; 0x2eb2 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2e34:	e8 ee       	ldi	r30, 0xE8	; 232
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	80 81       	ld	r24, Z
    2e3a:	80 ff       	sbrs	r24, 0
    2e3c:	fd cf       	rjmp	.-6      	; 0x2e38 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2e3e:	80 91 55 01 	lds	r24, 0x0155
    2e42:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e46:	8e ef       	ldi	r24, 0xFE	; 254
    2e48:	80 93 e8 00 	sts	0x00E8, r24
    2e4c:	8e c0       	rjmp	.+284    	; 0x2f6a <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2e4e:	41 32       	cpi	r20, 0x21	; 33
    2e50:	a9 f4       	brne	.+42     	; 0x2e7c <__vector_11+0x1f8>
    2e52:	71 3a       	cpi	r23, 0xA1	; 161
    2e54:	f1 f5       	brne	.+124    	; 0x2ed2 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2e56:	e8 ee       	ldi	r30, 0xE8	; 232
    2e58:	f0 e0       	ldi	r31, 0x00	; 0
    2e5a:	80 81       	ld	r24, Z
    2e5c:	80 ff       	sbrs	r24, 0
    2e5e:	fd cf       	rjmp	.-6      	; 0x2e5a <__vector_11+0x1d6>
    2e60:	e4 e0       	ldi	r30, 0x04	; 4
    2e62:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2e64:	a1 ef       	ldi	r26, 0xF1	; 241
    2e66:	b0 e0       	ldi	r27, 0x00	; 0
    2e68:	81 91       	ld	r24, Z+
    2e6a:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2e6c:	41 e0       	ldi	r20, 0x01	; 1
    2e6e:	eb 30       	cpi	r30, 0x0B	; 11
    2e70:	f4 07       	cpc	r31, r20
    2e72:	d1 f7       	brne	.-12     	; 0x2e68 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e74:	8e ef       	ldi	r24, 0xFE	; 254
    2e76:	80 93 e8 00 	sts	0x00E8, r24
    2e7a:	77 c0       	rjmp	.+238    	; 0x2f6a <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2e7c:	40 32       	cpi	r20, 0x20	; 32
    2e7e:	c9 f4       	brne	.+50     	; 0x2eb2 <__vector_11+0x22e>
    2e80:	71 32       	cpi	r23, 0x21	; 33
    2e82:	09 f0       	breq	.+2      	; 0x2e86 <__vector_11+0x202>
    2e84:	6b c0       	rjmp	.+214    	; 0x2f5c <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2e86:	e8 ee       	ldi	r30, 0xE8	; 232
    2e88:	f0 e0       	ldi	r31, 0x00	; 0
    2e8a:	80 81       	ld	r24, Z
    2e8c:	82 ff       	sbrs	r24, 2
    2e8e:	fd cf       	rjmp	.-6      	; 0x2e8a <__vector_11+0x206>
    2e90:	e4 e0       	ldi	r30, 0x04	; 4
    2e92:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2e94:	a1 ef       	ldi	r26, 0xF1	; 241
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	8c 91       	ld	r24, X
    2e9a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2e9c:	51 e0       	ldi	r21, 0x01	; 1
    2e9e:	eb 30       	cpi	r30, 0x0B	; 11
    2ea0:	f5 07       	cpc	r31, r21
    2ea2:	d1 f7       	brne	.-12     	; 0x2e98 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2ea4:	e8 ee       	ldi	r30, 0xE8	; 232
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	8b ef       	ldi	r24, 0xFB	; 251
    2eaa:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2eac:	8e ef       	ldi	r24, 0xFE	; 254
    2eae:	80 83       	st	Z, r24
    2eb0:	5c c0       	rjmp	.+184    	; 0x2f6a <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2eb2:	42 32       	cpi	r20, 0x22	; 34
    2eb4:	71 f4       	brne	.+28     	; 0x2ed2 <__vector_11+0x24e>
    2eb6:	71 32       	cpi	r23, 0x21	; 33
    2eb8:	09 f0       	breq	.+2      	; 0x2ebc <__vector_11+0x238>
    2eba:	50 c0       	rjmp	.+160    	; 0x2f5c <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    2ebc:	20 93 56 01 	sts	0x0156, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2ec0:	e8 ee       	ldi	r30, 0xE8	; 232
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	80 ff       	sbrs	r24, 0
    2ec8:	fd cf       	rjmp	.-6      	; 0x2ec4 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2eca:	8e ef       	ldi	r24, 0xFE	; 254
    2ecc:	80 93 e8 00 	sts	0x00E8, r24
    2ed0:	4c c0       	rjmp	.+152    	; 0x2f6a <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2ed2:	41 11       	cpse	r20, r1
    2ed4:	1a c0       	rjmp	.+52     	; 0x2f0a <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2ed6:	e8 ee       	ldi	r30, 0xE8	; 232
    2ed8:	f0 e0       	ldi	r31, 0x00	; 0
    2eda:	20 81       	ld	r18, Z
    2edc:	20 ff       	sbrs	r18, 0
    2ede:	fd cf       	rjmp	.-6      	; 0x2eda <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2ee0:	72 38       	cpi	r23, 0x82	; 130
    2ee2:	51 f4       	brne	.+20     	; 0x2ef8 <__vector_11+0x274>
				UENUM = wIndex;
    2ee4:	e9 ee       	ldi	r30, 0xE9	; 233
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    2eea:	80 91 eb 00 	lds	r24, 0x00EB
    2eee:	85 fb       	bst	r24, 5
    2ef0:	88 27       	eor	r24, r24
    2ef2:	80 f9       	bld	r24, 0
				UENUM = 0;
    2ef4:	10 82       	st	Z, r1
    2ef6:	01 c0       	rjmp	.+2      	; 0x2efa <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    2efa:	e1 ef       	ldi	r30, 0xF1	; 241
    2efc:	f0 e0       	ldi	r31, 0x00	; 0
    2efe:	80 83       	st	Z, r24
			UEDATX = 0;
    2f00:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f02:	8e ef       	ldi	r24, 0xFE	; 254
    2f04:	80 93 e8 00 	sts	0x00E8, r24
    2f08:	30 c0       	rjmp	.+96     	; 0x2f6a <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2f0a:	41 30       	cpi	r20, 0x01	; 1
    2f0c:	11 f0       	breq	.+4      	; 0x2f12 <__vector_11+0x28e>
    2f0e:	43 30       	cpi	r20, 0x03	; 3
    2f10:	29 f5       	brne	.+74     	; 0x2f5c <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    2f12:	72 30       	cpi	r23, 0x02	; 2
    2f14:	19 f5       	brne	.+70     	; 0x2f5c <__vector_11+0x2d8>
    2f16:	23 2b       	or	r18, r19
    2f18:	09 f5       	brne	.+66     	; 0x2f5c <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    2f1a:	8f 77       	andi	r24, 0x7F	; 127
    2f1c:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2f1e:	38 2f       	mov	r19, r24
    2f20:	31 50       	subi	r19, 0x01	; 1
    2f22:	34 30       	cpi	r19, 0x04	; 4
    2f24:	d8 f4       	brcc	.+54     	; 0x2f5c <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f26:	3e ef       	ldi	r19, 0xFE	; 254
    2f28:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2f2c:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    2f30:	43 30       	cpi	r20, 0x03	; 3
    2f32:	21 f4       	brne	.+8      	; 0x2f3c <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2f34:	81 e2       	ldi	r24, 0x21	; 33
    2f36:	80 93 eb 00 	sts	0x00EB, r24
    2f3a:	17 c0       	rjmp	.+46     	; 0x2f6a <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2f3c:	99 e1       	ldi	r25, 0x19	; 25
    2f3e:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    2f42:	21 e0       	ldi	r18, 0x01	; 1
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	d9 01       	movw	r26, r18
    2f48:	02 c0       	rjmp	.+4      	; 0x2f4e <__vector_11+0x2ca>
    2f4a:	aa 0f       	add	r26, r26
    2f4c:	bb 1f       	adc	r27, r27
    2f4e:	8a 95       	dec	r24
    2f50:	e2 f7       	brpl	.-8      	; 0x2f4a <__vector_11+0x2c6>
    2f52:	ea ee       	ldi	r30, 0xEA	; 234
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	a0 83       	st	Z, r26
					UERST = 0;
    2f58:	10 82       	st	Z, r1
    2f5a:	07 c0       	rjmp	.+14     	; 0x2f6a <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2f5c:	81 e2       	ldi	r24, 0x21	; 33
    2f5e:	80 93 eb 00 	sts	0x00EB, r24
    2f62:	03 c0       	rjmp	.+6      	; 0x2f6a <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2f64:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2f66:	41 11       	cpse	r20, r1
    2f68:	fa ce       	rjmp	.-524    	; 0x2d5e <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2f6a:	ff 91       	pop	r31
    2f6c:	ef 91       	pop	r30
    2f6e:	df 91       	pop	r29
    2f70:	cf 91       	pop	r28
    2f72:	bf 91       	pop	r27
    2f74:	af 91       	pop	r26
    2f76:	9f 91       	pop	r25
    2f78:	8f 91       	pop	r24
    2f7a:	7f 91       	pop	r23
    2f7c:	6f 91       	pop	r22
    2f7e:	5f 91       	pop	r21
    2f80:	4f 91       	pop	r20
    2f82:	3f 91       	pop	r19
    2f84:	2f 91       	pop	r18
    2f86:	1f 91       	pop	r17
    2f88:	0f 91       	pop	r16
    2f8a:	0f 90       	pop	r0
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	0f 90       	pop	r0
    2f90:	1f 90       	pop	r1
    2f92:	18 95       	reti

00002f94 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2f98:	ec eb       	ldi	r30, 0xBC	; 188
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	80 81       	ld	r24, Z
    2f9e:	88 23       	and	r24, r24
    2fa0:	34 f0       	brlt	.+12     	; 0x2fae <twi_wait+0x1a>
    2fa2:	2f 5f       	subi	r18, 0xFF	; 255
    2fa4:	3f 4f       	sbci	r19, 0xFF	; 255
    2fa6:	29 3e       	cpi	r18, 0xE9	; 233
    2fa8:	83 e0       	ldi	r24, 0x03	; 3
    2faa:	38 07       	cpc	r19, r24
    2fac:	b9 f7       	brne	.-18     	; 0x2f9c <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	28 3e       	cpi	r18, 0xE8	; 232
    2fb2:	33 40       	sbci	r19, 0x03	; 3
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <twi_wait+0x24>
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2fb8:	08 95       	ret

00002fba <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2fba:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2fbe:	84 e8       	ldi	r24, 0x84	; 132
    2fc0:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2fc4:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <twi_wait>
    2fc8:	88 23       	and	r24, r24
    2fca:	21 f0       	breq	.+8      	; 0x2fd4 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2fcc:	80 91 b9 00 	lds	r24, 0x00B9
    2fd0:	88 7f       	andi	r24, 0xF8	; 248
    2fd2:	08 95       	ret
	} else {
		return 0;					// comm failure
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2fd6:	08 95       	ret

00002fd8 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2fd8:	cf 93       	push	r28
    2fda:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2fdc:	94 ea       	ldi	r25, 0xA4	; 164
    2fde:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2fe2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <twi_wait>
    2fe6:	88 23       	and	r24, r24
    2fe8:	61 f0       	breq	.+24     	; 0x3002 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2fea:	8c 2f       	mov	r24, r28
    2fec:	88 0f       	add	r24, r24
    2fee:	8f 5f       	subi	r24, 0xFF	; 255
    2ff0:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2ff4:	88 34       	cpi	r24, 0x48	; 72
    2ff6:	39 f4       	brne	.+14     	; 0x3006 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2ff8:	84 e9       	ldi	r24, 0x94	; 148
    2ffa:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2ffe:	80 e0       	ldi	r24, 0x00	; 0
    3000:	03 c0       	rjmp	.+6      	; 0x3008 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    3002:	80 e0       	ldi	r24, 0x00	; 0
    3004:	01 c0       	rjmp	.+2      	; 0x3008 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    3006:	81 e0       	ldi	r24, 0x01	; 1
}	
    3008:	cf 91       	pop	r28
    300a:	08 95       	ret

0000300c <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    300c:	cf 93       	push	r28
    300e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    3010:	94 ea       	ldi	r25, 0xA4	; 164
    3012:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    3016:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <twi_wait>
    301a:	88 23       	and	r24, r24
    301c:	59 f0       	breq	.+22     	; 0x3034 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    301e:	8c 2f       	mov	r24, r28
    3020:	88 0f       	add	r24, r24
    3022:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    3026:	80 32       	cpi	r24, 0x20	; 32
    3028:	39 f4       	brne	.+14     	; 0x3038 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    302a:	84 e9       	ldi	r24, 0x94	; 148
    302c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	03 c0       	rjmp	.+6      	; 0x303a <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    3034:	80 e0       	ldi	r24, 0x00	; 0
    3036:	01 c0       	rjmp	.+2      	; 0x303a <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    3038:	81 e0       	ldi	r24, 0x01	; 1
}	
    303a:	cf 91       	pop	r28
    303c:	08 95       	ret

0000303e <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    303e:	84 e9       	ldi	r24, 0x94	; 148
    3040:	80 93 bc 00 	sts	0x00BC, r24
    3044:	08 95       	ret

00003046 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    3046:	ef 92       	push	r14
    3048:	ff 92       	push	r15
    304a:	0f 93       	push	r16
    304c:	1f 93       	push	r17
    304e:	cf 93       	push	r28
    3050:	df 93       	push	r29
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
    3056:	60 97       	sbiw	r28, 0x10	; 16
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	f8 94       	cli
    305c:	de bf       	out	0x3e, r29	; 62
    305e:	0f be       	out	0x3f, r0	; 63
    3060:	cd bf       	out	0x3d, r28	; 61
    3062:	e8 2e       	mov	r14, r24
    3064:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    3066:	fe 01       	movw	r30, r28
    3068:	31 96       	adiw	r30, 0x01	; 1
    306a:	80 e1       	ldi	r24, 0x10	; 16
    306c:	df 01       	movw	r26, r30
    306e:	1d 92       	st	X+, r1
    3070:	8a 95       	dec	r24
    3072:	e9 f7       	brne	.-6      	; 0x306e <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    3074:	88 e5       	ldi	r24, 0x58	; 88
    3076:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    307a:	88 23       	and	r24, r24
    307c:	09 f4       	brne	.+2      	; 0x3080 <m_wii_read+0x3a>
    307e:	66 c0       	rjmp	.+204    	; 0x314c <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    3080:	86 e3       	ldi	r24, 0x36	; 54
    3082:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3086:	88 23       	and	r24, r24
    3088:	09 f4       	brne	.+2      	; 0x308c <m_wii_read+0x46>
    308a:	62 c0       	rjmp	.+196    	; 0x3150 <m_wii_read+0x10a>
	end();
    308c:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3090:	b8 e0       	ldi	r27, 0x08	; 8
    3092:	ba 95       	dec	r27
    3094:	f1 f7       	brne	.-4      	; 0x3092 <m_wii_read+0x4c>
    3096:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3098:	88 e5       	ldi	r24, 0x58	; 88
    309a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <start_read>
    309e:	88 23       	and	r24, r24
    30a0:	09 f4       	brne	.+2      	; 0x30a4 <m_wii_read+0x5e>
    30a2:	58 c0       	rjmp	.+176    	; 0x3154 <m_wii_read+0x10e>
    30a4:	ae 01       	movw	r20, r28
    30a6:	4f 5f       	subi	r20, 0xFF	; 255
    30a8:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    30aa:	8e 01       	movw	r16, r28
    30ac:	00 5f       	subi	r16, 0xF0	; 240
    30ae:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    30b0:	ec eb       	ldi	r30, 0xBC	; 188
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    30b6:	2b eb       	ldi	r18, 0xBB	; 187
    30b8:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    30ba:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    30bc:	80 81       	ld	r24, Z
    30be:	88 23       	and	r24, r24
    30c0:	ec f7       	brge	.-6      	; 0x30bc <m_wii_read+0x76>
		temp[i] = TWDR;
    30c2:	d9 01       	movw	r26, r18
    30c4:	8c 91       	ld	r24, X
    30c6:	da 01       	movw	r26, r20
    30c8:	8d 93       	st	X+, r24
    30ca:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    30cc:	a0 17       	cp	r26, r16
    30ce:	b1 07       	cpc	r27, r17
    30d0:	a1 f7       	brne	.-24     	; 0x30ba <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    30d2:	84 e8       	ldi	r24, 0x84	; 132
    30d4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    30d8:	ec eb       	ldi	r30, 0xBC	; 188
    30da:	f0 e0       	ldi	r31, 0x00	; 0
    30dc:	80 81       	ld	r24, Z
    30de:	88 23       	and	r24, r24
    30e0:	ec f7       	brge	.-6      	; 0x30dc <m_wii_read+0x96>
	temp[15] = TWDR;
    30e2:	80 91 bb 00 	lds	r24, 0x00BB
    30e6:	88 8b       	std	Y+16, r24	; 0x10
	end();
    30e8:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
    30ec:	de 01       	movw	r26, r28
    30ee:	14 96       	adiw	r26, 0x04	; 4
    30f0:	6e 2d       	mov	r22, r14
    30f2:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    30f4:	4c 91       	ld	r20, X
    30f6:	24 2f       	mov	r18, r20
    30f8:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    30fa:	cd 01       	movw	r24, r26
    30fc:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    30fe:	fc 01       	movw	r30, r24
    3100:	80 81       	ld	r24, Z
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	f0 e1       	ldi	r31, 0x10	; 16
    3106:	2f 9f       	mul	r18, r31
    3108:	80 0d       	add	r24, r0
    310a:	91 1d       	adc	r25, r1
    310c:	11 24       	eor	r1, r1
    310e:	fb 01       	movw	r30, r22
    3110:	91 83       	std	Z+1, r25	; 0x01
    3112:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    3114:	84 2f       	mov	r24, r20
    3116:	80 7c       	andi	r24, 0xC0	; 192
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	88 0f       	add	r24, r24
    311c:	99 1f       	adc	r25, r25
    311e:	88 0f       	add	r24, r24
    3120:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    3122:	9d 01       	movw	r18, r26
    3124:	21 50       	subi	r18, 0x01	; 1
    3126:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    3128:	f9 01       	movw	r30, r18
    312a:	20 81       	ld	r18, Z
    312c:	82 0f       	add	r24, r18
    312e:	91 1d       	adc	r25, r1
    3130:	fb 01       	movw	r30, r22
    3132:	93 83       	std	Z+3, r25	; 0x03
    3134:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    3136:	4f 70       	andi	r20, 0x0F	; 15
    3138:	44 83       	std	Z+4, r20	; 0x04
    313a:	15 82       	std	Z+5, r1	; 0x05
    313c:	13 96       	adiw	r26, 0x03	; 3
    313e:	6a 5f       	subi	r22, 0xFA	; 250
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    3142:	0a 17       	cp	r16, r26
    3144:	1b 07       	cpc	r17, r27
    3146:	b1 f6       	brne	.-84     	; 0x30f4 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	05 c0       	rjmp	.+10     	; 0x3156 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    314c:	80 e0       	ldi	r24, 0x00	; 0
    314e:	03 c0       	rjmp	.+6      	; 0x3156 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	01 c0       	rjmp	.+2      	; 0x3156 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3154:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    3156:	60 96       	adiw	r28, 0x10	; 16
    3158:	0f b6       	in	r0, 0x3f	; 63
    315a:	f8 94       	cli
    315c:	de bf       	out	0x3e, r29	; 62
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	cd bf       	out	0x3d, r28	; 61
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	ff 90       	pop	r15
    316c:	ef 90       	pop	r14
    316e:	08 95       	ret

00003170 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    3170:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    3174:	88 e5       	ldi	r24, 0x58	; 88
    3176:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    317a:	88 23       	and	r24, r24
    317c:	09 f4       	brne	.+2      	; 0x3180 <m_wii_open+0x10>
    317e:	c7 c0       	rjmp	.+398    	; 0x330e <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    3180:	80 e3       	ldi	r24, 0x30	; 48
    3182:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3186:	88 23       	and	r24, r24
    3188:	09 f4       	brne	.+2      	; 0x318c <m_wii_open+0x1c>
    318a:	c3 c0       	rjmp	.+390    	; 0x3312 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3192:	88 23       	and	r24, r24
    3194:	09 f4       	brne	.+2      	; 0x3198 <m_wii_open+0x28>
    3196:	bf c0       	rjmp	.+382    	; 0x3316 <m_wii_open+0x1a6>
	end();
    3198:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    319c:	83 ec       	ldi	r24, 0xC3	; 195
    319e:	99 e0       	ldi	r25, 0x09	; 9
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <m_wii_open+0x30>
    31a4:	00 c0       	rjmp	.+0      	; 0x31a6 <m_wii_open+0x36>
    31a6:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    31a8:	88 e5       	ldi	r24, 0x58	; 88
    31aa:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    31ae:	88 23       	and	r24, r24
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <m_wii_open+0x44>
    31b2:	b3 c0       	rjmp	.+358    	; 0x331a <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    31b4:	80 e0       	ldi	r24, 0x00	; 0
    31b6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    31ba:	88 23       	and	r24, r24
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <m_wii_open+0x50>
    31be:	af c0       	rjmp	.+350    	; 0x331e <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    31c6:	88 23       	and	r24, r24
    31c8:	09 f4       	brne	.+2      	; 0x31cc <m_wii_open+0x5c>
    31ca:	ab c0       	rjmp	.+342    	; 0x3322 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    31d2:	88 23       	and	r24, r24
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <m_wii_open+0x68>
    31d6:	a7 c0       	rjmp	.+334    	; 0x3326 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    31d8:	80 e0       	ldi	r24, 0x00	; 0
    31da:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    31de:	88 23       	and	r24, r24
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <m_wii_open+0x74>
    31e2:	a3 c0       	rjmp	.+326    	; 0x332a <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    31ea:	88 23       	and	r24, r24
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <m_wii_open+0x80>
    31ee:	9f c0       	rjmp	.+318    	; 0x332e <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    31f0:	80 e0       	ldi	r24, 0x00	; 0
    31f2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    31f6:	88 23       	and	r24, r24
    31f8:	09 f4       	brne	.+2      	; 0x31fc <m_wii_open+0x8c>
    31fa:	9b c0       	rjmp	.+310    	; 0x3332 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    31fc:	80 e0       	ldi	r24, 0x00	; 0
    31fe:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3202:	88 23       	and	r24, r24
    3204:	09 f4       	brne	.+2      	; 0x3208 <m_wii_open+0x98>
    3206:	97 c0       	rjmp	.+302    	; 0x3336 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    3208:	80 e9       	ldi	r24, 0x90	; 144
    320a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    320e:	88 23       	and	r24, r24
    3210:	09 f4       	brne	.+2      	; 0x3214 <m_wii_open+0xa4>
    3212:	93 c0       	rjmp	.+294    	; 0x333a <m_wii_open+0x1ca>
	end();
    3214:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
    3218:	83 ec       	ldi	r24, 0xC3	; 195
    321a:	99 e0       	ldi	r25, 0x09	; 9
    321c:	01 97       	sbiw	r24, 0x01	; 1
    321e:	f1 f7       	brne	.-4      	; 0x321c <m_wii_open+0xac>
    3220:	00 c0       	rjmp	.+0      	; 0x3222 <m_wii_open+0xb2>
    3222:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    3224:	88 e5       	ldi	r24, 0x58	; 88
    3226:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    322a:	88 23       	and	r24, r24
    322c:	09 f4       	brne	.+2      	; 0x3230 <m_wii_open+0xc0>
    322e:	87 c0       	rjmp	.+270    	; 0x333e <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    3230:	87 e0       	ldi	r24, 0x07	; 7
    3232:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3236:	88 23       	and	r24, r24
    3238:	09 f4       	brne	.+2      	; 0x323c <m_wii_open+0xcc>
    323a:	83 c0       	rjmp	.+262    	; 0x3342 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    323c:	80 e0       	ldi	r24, 0x00	; 0
    323e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3242:	88 23       	and	r24, r24
    3244:	09 f4       	brne	.+2      	; 0x3248 <m_wii_open+0xd8>
    3246:	7f c0       	rjmp	.+254    	; 0x3346 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    3248:	81 e4       	ldi	r24, 0x41	; 65
    324a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    324e:	88 23       	and	r24, r24
    3250:	09 f4       	brne	.+2      	; 0x3254 <m_wii_open+0xe4>
    3252:	7b c0       	rjmp	.+246    	; 0x334a <m_wii_open+0x1da>
	end();
    3254:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
    3258:	83 ec       	ldi	r24, 0xC3	; 195
    325a:	99 e0       	ldi	r25, 0x09	; 9
    325c:	01 97       	sbiw	r24, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <m_wii_open+0xec>
    3260:	00 c0       	rjmp	.+0      	; 0x3262 <m_wii_open+0xf2>
    3262:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    3264:	88 e5       	ldi	r24, 0x58	; 88
    3266:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    326a:	88 23       	and	r24, r24
    326c:	09 f4       	brne	.+2      	; 0x3270 <m_wii_open+0x100>
    326e:	6f c0       	rjmp	.+222    	; 0x334e <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    3270:	8a e1       	ldi	r24, 0x1A	; 26
    3272:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3276:	88 23       	and	r24, r24
    3278:	09 f4       	brne	.+2      	; 0x327c <m_wii_open+0x10c>
    327a:	6b c0       	rjmp	.+214    	; 0x3352 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    327c:	80 e4       	ldi	r24, 0x40	; 64
    327e:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    3282:	88 23       	and	r24, r24
    3284:	09 f4       	brne	.+2      	; 0x3288 <m_wii_open+0x118>
    3286:	67 c0       	rjmp	.+206    	; 0x3356 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    328e:	88 23       	and	r24, r24
    3290:	09 f4       	brne	.+2      	; 0x3294 <m_wii_open+0x124>
    3292:	63 c0       	rjmp	.+198    	; 0x335a <m_wii_open+0x1ea>
	end();
    3294:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
    3298:	83 ec       	ldi	r24, 0xC3	; 195
    329a:	99 e0       	ldi	r25, 0x09	; 9
    329c:	01 97       	sbiw	r24, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <m_wii_open+0x12c>
    32a0:	00 c0       	rjmp	.+0      	; 0x32a2 <m_wii_open+0x132>
    32a2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    32a4:	88 e5       	ldi	r24, 0x58	; 88
    32a6:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    32aa:	88 23       	and	r24, r24
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <m_wii_open+0x140>
    32ae:	57 c0       	rjmp	.+174    	; 0x335e <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    32b0:	83 e3       	ldi	r24, 0x33	; 51
    32b2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    32b6:	88 23       	and	r24, r24
    32b8:	09 f4       	brne	.+2      	; 0x32bc <m_wii_open+0x14c>
    32ba:	53 c0       	rjmp	.+166    	; 0x3362 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    32c2:	88 23       	and	r24, r24
    32c4:	09 f4       	brne	.+2      	; 0x32c8 <m_wii_open+0x158>
    32c6:	4f c0       	rjmp	.+158    	; 0x3366 <m_wii_open+0x1f6>
	end();
    32c8:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
    32cc:	83 ec       	ldi	r24, 0xC3	; 195
    32ce:	99 e0       	ldi	r25, 0x09	; 9
    32d0:	01 97       	sbiw	r24, 0x01	; 1
    32d2:	f1 f7       	brne	.-4      	; 0x32d0 <m_wii_open+0x160>
    32d4:	00 c0       	rjmp	.+0      	; 0x32d6 <m_wii_open+0x166>
    32d6:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    32d8:	88 e5       	ldi	r24, 0x58	; 88
    32da:	0e 94 06 18 	call	0x300c	; 0x300c <start_write>
    32de:	88 23       	and	r24, r24
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <m_wii_open+0x174>
    32e2:	43 c0       	rjmp	.+134    	; 0x336a <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    32e4:	80 e3       	ldi	r24, 0x30	; 48
    32e6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    32ea:	88 23       	and	r24, r24
    32ec:	09 f4       	brne	.+2      	; 0x32f0 <m_wii_open+0x180>
    32ee:	3f c0       	rjmp	.+126    	; 0x336e <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    32f0:	88 e0       	ldi	r24, 0x08	; 8
    32f2:	0e 94 dd 17 	call	0x2fba	; 0x2fba <send_byte>
    32f6:	88 23       	and	r24, r24
    32f8:	e1 f1       	breq	.+120    	; 0x3372 <m_wii_open+0x202>
	end();
    32fa:	0e 94 1f 18 	call	0x303e	; 0x303e <end>
    32fe:	83 ec       	ldi	r24, 0xC3	; 195
    3300:	99 e0       	ldi	r25, 0x09	; 9
    3302:	01 97       	sbiw	r24, 0x01	; 1
    3304:	f1 f7       	brne	.-4      	; 0x3302 <m_wii_open+0x192>
    3306:	00 c0       	rjmp	.+0      	; 0x3308 <m_wii_open+0x198>
    3308:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    331a:	80 e0       	ldi	r24, 0x00	; 0
    331c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3322:	80 e0       	ldi	r24, 0x00	; 0
    3324:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3326:	80 e0       	ldi	r24, 0x00	; 0
    3328:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    332e:	80 e0       	ldi	r24, 0x00	; 0
    3330:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3332:	80 e0       	ldi	r24, 0x00	; 0
    3334:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    333a:	80 e0       	ldi	r24, 0x00	; 0
    333c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    3342:	80 e0       	ldi	r24, 0x00	; 0
    3344:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    3352:	80 e0       	ldi	r24, 0x00	; 0
    3354:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    335e:	80 e0       	ldi	r24, 0x00	; 0
    3360:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    3362:	80 e0       	ldi	r24, 0x00	; 0
    3364:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    336a:	80 e0       	ldi	r24, 0x00	; 0
    336c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    3372:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    3374:	08 95       	ret

00003376 <__subsf3>:
    3376:	50 58       	subi	r21, 0x80	; 128

00003378 <__addsf3>:
    3378:	bb 27       	eor	r27, r27
    337a:	aa 27       	eor	r26, r26
    337c:	0e d0       	rcall	.+28     	; 0x339a <__addsf3x>
    337e:	27 c2       	rjmp	.+1102   	; 0x37ce <__fp_round>
    3380:	f0 d1       	rcall	.+992    	; 0x3762 <__fp_pscA>
    3382:	30 f0       	brcs	.+12     	; 0x3390 <__addsf3+0x18>
    3384:	f5 d1       	rcall	.+1002   	; 0x3770 <__fp_pscB>
    3386:	20 f0       	brcs	.+8      	; 0x3390 <__addsf3+0x18>
    3388:	31 f4       	brne	.+12     	; 0x3396 <__addsf3+0x1e>
    338a:	9f 3f       	cpi	r25, 0xFF	; 255
    338c:	11 f4       	brne	.+4      	; 0x3392 <__addsf3+0x1a>
    338e:	1e f4       	brtc	.+6      	; 0x3396 <__addsf3+0x1e>
    3390:	c0 c1       	rjmp	.+896    	; 0x3712 <__fp_nan>
    3392:	0e f4       	brtc	.+2      	; 0x3396 <__addsf3+0x1e>
    3394:	e0 95       	com	r30
    3396:	e7 fb       	bst	r30, 7
    3398:	b6 c1       	rjmp	.+876    	; 0x3706 <__fp_inf>

0000339a <__addsf3x>:
    339a:	e9 2f       	mov	r30, r25
    339c:	3a d2       	rcall	.+1140   	; 0x3812 <__fp_split3>
    339e:	80 f3       	brcs	.-32     	; 0x3380 <__addsf3+0x8>
    33a0:	ba 17       	cp	r27, r26
    33a2:	62 07       	cpc	r22, r18
    33a4:	73 07       	cpc	r23, r19
    33a6:	84 07       	cpc	r24, r20
    33a8:	95 07       	cpc	r25, r21
    33aa:	18 f0       	brcs	.+6      	; 0x33b2 <__addsf3x+0x18>
    33ac:	71 f4       	brne	.+28     	; 0x33ca <__addsf3x+0x30>
    33ae:	9e f5       	brtc	.+102    	; 0x3416 <__addsf3x+0x7c>
    33b0:	52 c2       	rjmp	.+1188   	; 0x3856 <__fp_zero>
    33b2:	0e f4       	brtc	.+2      	; 0x33b6 <__addsf3x+0x1c>
    33b4:	e0 95       	com	r30
    33b6:	0b 2e       	mov	r0, r27
    33b8:	ba 2f       	mov	r27, r26
    33ba:	a0 2d       	mov	r26, r0
    33bc:	0b 01       	movw	r0, r22
    33be:	b9 01       	movw	r22, r18
    33c0:	90 01       	movw	r18, r0
    33c2:	0c 01       	movw	r0, r24
    33c4:	ca 01       	movw	r24, r20
    33c6:	a0 01       	movw	r20, r0
    33c8:	11 24       	eor	r1, r1
    33ca:	ff 27       	eor	r31, r31
    33cc:	59 1b       	sub	r21, r25
    33ce:	99 f0       	breq	.+38     	; 0x33f6 <__addsf3x+0x5c>
    33d0:	59 3f       	cpi	r21, 0xF9	; 249
    33d2:	50 f4       	brcc	.+20     	; 0x33e8 <__addsf3x+0x4e>
    33d4:	50 3e       	cpi	r21, 0xE0	; 224
    33d6:	68 f1       	brcs	.+90     	; 0x3432 <__addsf3x+0x98>
    33d8:	1a 16       	cp	r1, r26
    33da:	f0 40       	sbci	r31, 0x00	; 0
    33dc:	a2 2f       	mov	r26, r18
    33de:	23 2f       	mov	r18, r19
    33e0:	34 2f       	mov	r19, r20
    33e2:	44 27       	eor	r20, r20
    33e4:	58 5f       	subi	r21, 0xF8	; 248
    33e6:	f3 cf       	rjmp	.-26     	; 0x33ce <__addsf3x+0x34>
    33e8:	46 95       	lsr	r20
    33ea:	37 95       	ror	r19
    33ec:	27 95       	ror	r18
    33ee:	a7 95       	ror	r26
    33f0:	f0 40       	sbci	r31, 0x00	; 0
    33f2:	53 95       	inc	r21
    33f4:	c9 f7       	brne	.-14     	; 0x33e8 <__addsf3x+0x4e>
    33f6:	7e f4       	brtc	.+30     	; 0x3416 <__addsf3x+0x7c>
    33f8:	1f 16       	cp	r1, r31
    33fa:	ba 0b       	sbc	r27, r26
    33fc:	62 0b       	sbc	r22, r18
    33fe:	73 0b       	sbc	r23, r19
    3400:	84 0b       	sbc	r24, r20
    3402:	ba f0       	brmi	.+46     	; 0x3432 <__addsf3x+0x98>
    3404:	91 50       	subi	r25, 0x01	; 1
    3406:	a1 f0       	breq	.+40     	; 0x3430 <__addsf3x+0x96>
    3408:	ff 0f       	add	r31, r31
    340a:	bb 1f       	adc	r27, r27
    340c:	66 1f       	adc	r22, r22
    340e:	77 1f       	adc	r23, r23
    3410:	88 1f       	adc	r24, r24
    3412:	c2 f7       	brpl	.-16     	; 0x3404 <__addsf3x+0x6a>
    3414:	0e c0       	rjmp	.+28     	; 0x3432 <__addsf3x+0x98>
    3416:	ba 0f       	add	r27, r26
    3418:	62 1f       	adc	r22, r18
    341a:	73 1f       	adc	r23, r19
    341c:	84 1f       	adc	r24, r20
    341e:	48 f4       	brcc	.+18     	; 0x3432 <__addsf3x+0x98>
    3420:	87 95       	ror	r24
    3422:	77 95       	ror	r23
    3424:	67 95       	ror	r22
    3426:	b7 95       	ror	r27
    3428:	f7 95       	ror	r31
    342a:	9e 3f       	cpi	r25, 0xFE	; 254
    342c:	08 f0       	brcs	.+2      	; 0x3430 <__addsf3x+0x96>
    342e:	b3 cf       	rjmp	.-154    	; 0x3396 <__addsf3+0x1e>
    3430:	93 95       	inc	r25
    3432:	88 0f       	add	r24, r24
    3434:	08 f0       	brcs	.+2      	; 0x3438 <__addsf3x+0x9e>
    3436:	99 27       	eor	r25, r25
    3438:	ee 0f       	add	r30, r30
    343a:	97 95       	ror	r25
    343c:	87 95       	ror	r24
    343e:	08 95       	ret
    3440:	90 d1       	rcall	.+800    	; 0x3762 <__fp_pscA>
    3442:	58 f0       	brcs	.+22     	; 0x345a <__addsf3x+0xc0>
    3444:	80 e8       	ldi	r24, 0x80	; 128
    3446:	91 e0       	ldi	r25, 0x01	; 1
    3448:	09 f4       	brne	.+2      	; 0x344c <__addsf3x+0xb2>
    344a:	9e ef       	ldi	r25, 0xFE	; 254
    344c:	91 d1       	rcall	.+802    	; 0x3770 <__fp_pscB>
    344e:	28 f0       	brcs	.+10     	; 0x345a <__addsf3x+0xc0>
    3450:	40 e8       	ldi	r20, 0x80	; 128
    3452:	51 e0       	ldi	r21, 0x01	; 1
    3454:	59 f4       	brne	.+22     	; 0x346c <atan2+0xe>
    3456:	5e ef       	ldi	r21, 0xFE	; 254
    3458:	09 c0       	rjmp	.+18     	; 0x346c <atan2+0xe>
    345a:	5b c1       	rjmp	.+694    	; 0x3712 <__fp_nan>
    345c:	fc c1       	rjmp	.+1016   	; 0x3856 <__fp_zero>

0000345e <atan2>:
    345e:	e9 2f       	mov	r30, r25
    3460:	e0 78       	andi	r30, 0x80	; 128
    3462:	d7 d1       	rcall	.+942    	; 0x3812 <__fp_split3>
    3464:	68 f3       	brcs	.-38     	; 0x3440 <__addsf3x+0xa6>
    3466:	09 2e       	mov	r0, r25
    3468:	05 2a       	or	r0, r21
    346a:	c1 f3       	breq	.-16     	; 0x345c <__addsf3x+0xc2>
    346c:	26 17       	cp	r18, r22
    346e:	37 07       	cpc	r19, r23
    3470:	48 07       	cpc	r20, r24
    3472:	59 07       	cpc	r21, r25
    3474:	38 f0       	brcs	.+14     	; 0x3484 <atan2+0x26>
    3476:	0e 2e       	mov	r0, r30
    3478:	07 f8       	bld	r0, 7
    347a:	e0 25       	eor	r30, r0
    347c:	69 f0       	breq	.+26     	; 0x3498 <atan2+0x3a>
    347e:	e0 25       	eor	r30, r0
    3480:	e0 64       	ori	r30, 0x40	; 64
    3482:	0a c0       	rjmp	.+20     	; 0x3498 <atan2+0x3a>
    3484:	ef 63       	ori	r30, 0x3F	; 63
    3486:	07 f8       	bld	r0, 7
    3488:	00 94       	com	r0
    348a:	07 fa       	bst	r0, 7
    348c:	db 01       	movw	r26, r22
    348e:	b9 01       	movw	r22, r18
    3490:	9d 01       	movw	r18, r26
    3492:	dc 01       	movw	r26, r24
    3494:	ca 01       	movw	r24, r20
    3496:	ad 01       	movw	r20, r26
    3498:	ef 93       	push	r30
    349a:	4a d0       	rcall	.+148    	; 0x3530 <__divsf3_pse>
    349c:	98 d1       	rcall	.+816    	; 0x37ce <__fp_round>
    349e:	0a d0       	rcall	.+20     	; 0x34b4 <atan>
    34a0:	5f 91       	pop	r21
    34a2:	55 23       	and	r21, r21
    34a4:	31 f0       	breq	.+12     	; 0x34b2 <atan2+0x54>
    34a6:	2b ed       	ldi	r18, 0xDB	; 219
    34a8:	3f e0       	ldi	r19, 0x0F	; 15
    34aa:	49 e4       	ldi	r20, 0x49	; 73
    34ac:	50 fd       	sbrc	r21, 0
    34ae:	49 ec       	ldi	r20, 0xC9	; 201
    34b0:	63 cf       	rjmp	.-314    	; 0x3378 <__addsf3>
    34b2:	08 95       	ret

000034b4 <atan>:
    34b4:	df 93       	push	r29
    34b6:	dd 27       	eor	r29, r29
    34b8:	b9 2f       	mov	r27, r25
    34ba:	bf 77       	andi	r27, 0x7F	; 127
    34bc:	40 e8       	ldi	r20, 0x80	; 128
    34be:	5f e3       	ldi	r21, 0x3F	; 63
    34c0:	16 16       	cp	r1, r22
    34c2:	17 06       	cpc	r1, r23
    34c4:	48 07       	cpc	r20, r24
    34c6:	5b 07       	cpc	r21, r27
    34c8:	10 f4       	brcc	.+4      	; 0x34ce <atan+0x1a>
    34ca:	d9 2f       	mov	r29, r25
    34cc:	cf d1       	rcall	.+926    	; 0x386c <inverse>
    34ce:	9f 93       	push	r25
    34d0:	8f 93       	push	r24
    34d2:	7f 93       	push	r23
    34d4:	6f 93       	push	r22
    34d6:	7c d2       	rcall	.+1272   	; 0x39d0 <square>
    34d8:	ec ea       	ldi	r30, 0xAC	; 172
    34da:	f0 e0       	ldi	r31, 0x00	; 0
    34dc:	1d d1       	rcall	.+570    	; 0x3718 <__fp_powser>
    34de:	77 d1       	rcall	.+750    	; 0x37ce <__fp_round>
    34e0:	2f 91       	pop	r18
    34e2:	3f 91       	pop	r19
    34e4:	4f 91       	pop	r20
    34e6:	5f 91       	pop	r21
    34e8:	d4 d1       	rcall	.+936    	; 0x3892 <__mulsf3x>
    34ea:	dd 23       	and	r29, r29
    34ec:	49 f0       	breq	.+18     	; 0x3500 <atan+0x4c>
    34ee:	90 58       	subi	r25, 0x80	; 128
    34f0:	a2 ea       	ldi	r26, 0xA2	; 162
    34f2:	2a ed       	ldi	r18, 0xDA	; 218
    34f4:	3f e0       	ldi	r19, 0x0F	; 15
    34f6:	49 ec       	ldi	r20, 0xC9	; 201
    34f8:	5f e3       	ldi	r21, 0x3F	; 63
    34fa:	d0 78       	andi	r29, 0x80	; 128
    34fc:	5d 27       	eor	r21, r29
    34fe:	4d df       	rcall	.-358    	; 0x339a <__addsf3x>
    3500:	df 91       	pop	r29
    3502:	65 c1       	rjmp	.+714    	; 0x37ce <__fp_round>

00003504 <__cmpsf2>:
    3504:	dc d0       	rcall	.+440    	; 0x36be <__fp_cmp>
    3506:	08 f4       	brcc	.+2      	; 0x350a <__cmpsf2+0x6>
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	08 95       	ret

0000350c <cos>:
    350c:	39 d1       	rcall	.+626    	; 0x3780 <__fp_rempio2>
    350e:	e3 95       	inc	r30
    3510:	6f c1       	rjmp	.+734    	; 0x37f0 <__fp_sinus>

00003512 <__divsf3>:
    3512:	0c d0       	rcall	.+24     	; 0x352c <__divsf3x>
    3514:	5c c1       	rjmp	.+696    	; 0x37ce <__fp_round>
    3516:	2c d1       	rcall	.+600    	; 0x3770 <__fp_pscB>
    3518:	40 f0       	brcs	.+16     	; 0x352a <__divsf3+0x18>
    351a:	23 d1       	rcall	.+582    	; 0x3762 <__fp_pscA>
    351c:	30 f0       	brcs	.+12     	; 0x352a <__divsf3+0x18>
    351e:	21 f4       	brne	.+8      	; 0x3528 <__divsf3+0x16>
    3520:	5f 3f       	cpi	r21, 0xFF	; 255
    3522:	19 f0       	breq	.+6      	; 0x352a <__divsf3+0x18>
    3524:	f0 c0       	rjmp	.+480    	; 0x3706 <__fp_inf>
    3526:	51 11       	cpse	r21, r1
    3528:	97 c1       	rjmp	.+814    	; 0x3858 <__fp_szero>
    352a:	f3 c0       	rjmp	.+486    	; 0x3712 <__fp_nan>

0000352c <__divsf3x>:
    352c:	72 d1       	rcall	.+740    	; 0x3812 <__fp_split3>
    352e:	98 f3       	brcs	.-26     	; 0x3516 <__divsf3+0x4>

00003530 <__divsf3_pse>:
    3530:	99 23       	and	r25, r25
    3532:	c9 f3       	breq	.-14     	; 0x3526 <__divsf3+0x14>
    3534:	55 23       	and	r21, r21
    3536:	b1 f3       	breq	.-20     	; 0x3524 <__divsf3+0x12>
    3538:	95 1b       	sub	r25, r21
    353a:	55 0b       	sbc	r21, r21
    353c:	bb 27       	eor	r27, r27
    353e:	aa 27       	eor	r26, r26
    3540:	62 17       	cp	r22, r18
    3542:	73 07       	cpc	r23, r19
    3544:	84 07       	cpc	r24, r20
    3546:	38 f0       	brcs	.+14     	; 0x3556 <__divsf3_pse+0x26>
    3548:	9f 5f       	subi	r25, 0xFF	; 255
    354a:	5f 4f       	sbci	r21, 0xFF	; 255
    354c:	22 0f       	add	r18, r18
    354e:	33 1f       	adc	r19, r19
    3550:	44 1f       	adc	r20, r20
    3552:	aa 1f       	adc	r26, r26
    3554:	a9 f3       	breq	.-22     	; 0x3540 <__divsf3_pse+0x10>
    3556:	33 d0       	rcall	.+102    	; 0x35be <__divsf3_pse+0x8e>
    3558:	0e 2e       	mov	r0, r30
    355a:	3a f0       	brmi	.+14     	; 0x356a <__divsf3_pse+0x3a>
    355c:	e0 e8       	ldi	r30, 0x80	; 128
    355e:	30 d0       	rcall	.+96     	; 0x35c0 <__divsf3_pse+0x90>
    3560:	91 50       	subi	r25, 0x01	; 1
    3562:	50 40       	sbci	r21, 0x00	; 0
    3564:	e6 95       	lsr	r30
    3566:	00 1c       	adc	r0, r0
    3568:	ca f7       	brpl	.-14     	; 0x355c <__divsf3_pse+0x2c>
    356a:	29 d0       	rcall	.+82     	; 0x35be <__divsf3_pse+0x8e>
    356c:	fe 2f       	mov	r31, r30
    356e:	27 d0       	rcall	.+78     	; 0x35be <__divsf3_pse+0x8e>
    3570:	66 0f       	add	r22, r22
    3572:	77 1f       	adc	r23, r23
    3574:	88 1f       	adc	r24, r24
    3576:	bb 1f       	adc	r27, r27
    3578:	26 17       	cp	r18, r22
    357a:	37 07       	cpc	r19, r23
    357c:	48 07       	cpc	r20, r24
    357e:	ab 07       	cpc	r26, r27
    3580:	b0 e8       	ldi	r27, 0x80	; 128
    3582:	09 f0       	breq	.+2      	; 0x3586 <__divsf3_pse+0x56>
    3584:	bb 0b       	sbc	r27, r27
    3586:	80 2d       	mov	r24, r0
    3588:	bf 01       	movw	r22, r30
    358a:	ff 27       	eor	r31, r31
    358c:	93 58       	subi	r25, 0x83	; 131
    358e:	5f 4f       	sbci	r21, 0xFF	; 255
    3590:	2a f0       	brmi	.+10     	; 0x359c <__divsf3_pse+0x6c>
    3592:	9e 3f       	cpi	r25, 0xFE	; 254
    3594:	51 05       	cpc	r21, r1
    3596:	68 f0       	brcs	.+26     	; 0x35b2 <__divsf3_pse+0x82>
    3598:	b6 c0       	rjmp	.+364    	; 0x3706 <__fp_inf>
    359a:	5e c1       	rjmp	.+700    	; 0x3858 <__fp_szero>
    359c:	5f 3f       	cpi	r21, 0xFF	; 255
    359e:	ec f3       	brlt	.-6      	; 0x359a <__divsf3_pse+0x6a>
    35a0:	98 3e       	cpi	r25, 0xE8	; 232
    35a2:	dc f3       	brlt	.-10     	; 0x359a <__divsf3_pse+0x6a>
    35a4:	86 95       	lsr	r24
    35a6:	77 95       	ror	r23
    35a8:	67 95       	ror	r22
    35aa:	b7 95       	ror	r27
    35ac:	f7 95       	ror	r31
    35ae:	9f 5f       	subi	r25, 0xFF	; 255
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <__divsf3_pse+0x74>
    35b2:	88 0f       	add	r24, r24
    35b4:	91 1d       	adc	r25, r1
    35b6:	96 95       	lsr	r25
    35b8:	87 95       	ror	r24
    35ba:	97 f9       	bld	r25, 7
    35bc:	08 95       	ret
    35be:	e1 e0       	ldi	r30, 0x01	; 1
    35c0:	66 0f       	add	r22, r22
    35c2:	77 1f       	adc	r23, r23
    35c4:	88 1f       	adc	r24, r24
    35c6:	bb 1f       	adc	r27, r27
    35c8:	62 17       	cp	r22, r18
    35ca:	73 07       	cpc	r23, r19
    35cc:	84 07       	cpc	r24, r20
    35ce:	ba 07       	cpc	r27, r26
    35d0:	20 f0       	brcs	.+8      	; 0x35da <__divsf3_pse+0xaa>
    35d2:	62 1b       	sub	r22, r18
    35d4:	73 0b       	sbc	r23, r19
    35d6:	84 0b       	sbc	r24, r20
    35d8:	ba 0b       	sbc	r27, r26
    35da:	ee 1f       	adc	r30, r30
    35dc:	88 f7       	brcc	.-30     	; 0x35c0 <__divsf3_pse+0x90>
    35de:	e0 95       	com	r30
    35e0:	08 95       	ret

000035e2 <__fixsfsi>:
    35e2:	04 d0       	rcall	.+8      	; 0x35ec <__fixunssfsi>
    35e4:	68 94       	set
    35e6:	b1 11       	cpse	r27, r1
    35e8:	37 c1       	rjmp	.+622    	; 0x3858 <__fp_szero>
    35ea:	08 95       	ret

000035ec <__fixunssfsi>:
    35ec:	1a d1       	rcall	.+564    	; 0x3822 <__fp_splitA>
    35ee:	88 f0       	brcs	.+34     	; 0x3612 <__fixunssfsi+0x26>
    35f0:	9f 57       	subi	r25, 0x7F	; 127
    35f2:	90 f0       	brcs	.+36     	; 0x3618 <__fixunssfsi+0x2c>
    35f4:	b9 2f       	mov	r27, r25
    35f6:	99 27       	eor	r25, r25
    35f8:	b7 51       	subi	r27, 0x17	; 23
    35fa:	a0 f0       	brcs	.+40     	; 0x3624 <__fixunssfsi+0x38>
    35fc:	d1 f0       	breq	.+52     	; 0x3632 <__fixunssfsi+0x46>
    35fe:	66 0f       	add	r22, r22
    3600:	77 1f       	adc	r23, r23
    3602:	88 1f       	adc	r24, r24
    3604:	99 1f       	adc	r25, r25
    3606:	1a f0       	brmi	.+6      	; 0x360e <__fixunssfsi+0x22>
    3608:	ba 95       	dec	r27
    360a:	c9 f7       	brne	.-14     	; 0x35fe <__fixunssfsi+0x12>
    360c:	12 c0       	rjmp	.+36     	; 0x3632 <__fixunssfsi+0x46>
    360e:	b1 30       	cpi	r27, 0x01	; 1
    3610:	81 f0       	breq	.+32     	; 0x3632 <__fixunssfsi+0x46>
    3612:	21 d1       	rcall	.+578    	; 0x3856 <__fp_zero>
    3614:	b1 e0       	ldi	r27, 0x01	; 1
    3616:	08 95       	ret
    3618:	1e c1       	rjmp	.+572    	; 0x3856 <__fp_zero>
    361a:	67 2f       	mov	r22, r23
    361c:	78 2f       	mov	r23, r24
    361e:	88 27       	eor	r24, r24
    3620:	b8 5f       	subi	r27, 0xF8	; 248
    3622:	39 f0       	breq	.+14     	; 0x3632 <__fixunssfsi+0x46>
    3624:	b9 3f       	cpi	r27, 0xF9	; 249
    3626:	cc f3       	brlt	.-14     	; 0x361a <__fixunssfsi+0x2e>
    3628:	86 95       	lsr	r24
    362a:	77 95       	ror	r23
    362c:	67 95       	ror	r22
    362e:	b3 95       	inc	r27
    3630:	d9 f7       	brne	.-10     	; 0x3628 <__fixunssfsi+0x3c>
    3632:	3e f4       	brtc	.+14     	; 0x3642 <__fixunssfsi+0x56>
    3634:	90 95       	com	r25
    3636:	80 95       	com	r24
    3638:	70 95       	com	r23
    363a:	61 95       	neg	r22
    363c:	7f 4f       	sbci	r23, 0xFF	; 255
    363e:	8f 4f       	sbci	r24, 0xFF	; 255
    3640:	9f 4f       	sbci	r25, 0xFF	; 255
    3642:	08 95       	ret

00003644 <__floatunsisf>:
    3644:	e8 94       	clt
    3646:	09 c0       	rjmp	.+18     	; 0x365a <__floatsisf+0x12>

00003648 <__floatsisf>:
    3648:	97 fb       	bst	r25, 7
    364a:	3e f4       	brtc	.+14     	; 0x365a <__floatsisf+0x12>
    364c:	90 95       	com	r25
    364e:	80 95       	com	r24
    3650:	70 95       	com	r23
    3652:	61 95       	neg	r22
    3654:	7f 4f       	sbci	r23, 0xFF	; 255
    3656:	8f 4f       	sbci	r24, 0xFF	; 255
    3658:	9f 4f       	sbci	r25, 0xFF	; 255
    365a:	99 23       	and	r25, r25
    365c:	a9 f0       	breq	.+42     	; 0x3688 <__floatsisf+0x40>
    365e:	f9 2f       	mov	r31, r25
    3660:	96 e9       	ldi	r25, 0x96	; 150
    3662:	bb 27       	eor	r27, r27
    3664:	93 95       	inc	r25
    3666:	f6 95       	lsr	r31
    3668:	87 95       	ror	r24
    366a:	77 95       	ror	r23
    366c:	67 95       	ror	r22
    366e:	b7 95       	ror	r27
    3670:	f1 11       	cpse	r31, r1
    3672:	f8 cf       	rjmp	.-16     	; 0x3664 <__floatsisf+0x1c>
    3674:	fa f4       	brpl	.+62     	; 0x36b4 <__floatsisf+0x6c>
    3676:	bb 0f       	add	r27, r27
    3678:	11 f4       	brne	.+4      	; 0x367e <__floatsisf+0x36>
    367a:	60 ff       	sbrs	r22, 0
    367c:	1b c0       	rjmp	.+54     	; 0x36b4 <__floatsisf+0x6c>
    367e:	6f 5f       	subi	r22, 0xFF	; 255
    3680:	7f 4f       	sbci	r23, 0xFF	; 255
    3682:	8f 4f       	sbci	r24, 0xFF	; 255
    3684:	9f 4f       	sbci	r25, 0xFF	; 255
    3686:	16 c0       	rjmp	.+44     	; 0x36b4 <__floatsisf+0x6c>
    3688:	88 23       	and	r24, r24
    368a:	11 f0       	breq	.+4      	; 0x3690 <__floatsisf+0x48>
    368c:	96 e9       	ldi	r25, 0x96	; 150
    368e:	11 c0       	rjmp	.+34     	; 0x36b2 <__floatsisf+0x6a>
    3690:	77 23       	and	r23, r23
    3692:	21 f0       	breq	.+8      	; 0x369c <__floatsisf+0x54>
    3694:	9e e8       	ldi	r25, 0x8E	; 142
    3696:	87 2f       	mov	r24, r23
    3698:	76 2f       	mov	r23, r22
    369a:	05 c0       	rjmp	.+10     	; 0x36a6 <__floatsisf+0x5e>
    369c:	66 23       	and	r22, r22
    369e:	71 f0       	breq	.+28     	; 0x36bc <__floatsisf+0x74>
    36a0:	96 e8       	ldi	r25, 0x86	; 134
    36a2:	86 2f       	mov	r24, r22
    36a4:	70 e0       	ldi	r23, 0x00	; 0
    36a6:	60 e0       	ldi	r22, 0x00	; 0
    36a8:	2a f0       	brmi	.+10     	; 0x36b4 <__floatsisf+0x6c>
    36aa:	9a 95       	dec	r25
    36ac:	66 0f       	add	r22, r22
    36ae:	77 1f       	adc	r23, r23
    36b0:	88 1f       	adc	r24, r24
    36b2:	da f7       	brpl	.-10     	; 0x36aa <__floatsisf+0x62>
    36b4:	88 0f       	add	r24, r24
    36b6:	96 95       	lsr	r25
    36b8:	87 95       	ror	r24
    36ba:	97 f9       	bld	r25, 7
    36bc:	08 95       	ret

000036be <__fp_cmp>:
    36be:	99 0f       	add	r25, r25
    36c0:	00 08       	sbc	r0, r0
    36c2:	55 0f       	add	r21, r21
    36c4:	aa 0b       	sbc	r26, r26
    36c6:	e0 e8       	ldi	r30, 0x80	; 128
    36c8:	fe ef       	ldi	r31, 0xFE	; 254
    36ca:	16 16       	cp	r1, r22
    36cc:	17 06       	cpc	r1, r23
    36ce:	e8 07       	cpc	r30, r24
    36d0:	f9 07       	cpc	r31, r25
    36d2:	c0 f0       	brcs	.+48     	; 0x3704 <__fp_cmp+0x46>
    36d4:	12 16       	cp	r1, r18
    36d6:	13 06       	cpc	r1, r19
    36d8:	e4 07       	cpc	r30, r20
    36da:	f5 07       	cpc	r31, r21
    36dc:	98 f0       	brcs	.+38     	; 0x3704 <__fp_cmp+0x46>
    36de:	62 1b       	sub	r22, r18
    36e0:	73 0b       	sbc	r23, r19
    36e2:	84 0b       	sbc	r24, r20
    36e4:	95 0b       	sbc	r25, r21
    36e6:	39 f4       	brne	.+14     	; 0x36f6 <__fp_cmp+0x38>
    36e8:	0a 26       	eor	r0, r26
    36ea:	61 f0       	breq	.+24     	; 0x3704 <__fp_cmp+0x46>
    36ec:	23 2b       	or	r18, r19
    36ee:	24 2b       	or	r18, r20
    36f0:	25 2b       	or	r18, r21
    36f2:	21 f4       	brne	.+8      	; 0x36fc <__fp_cmp+0x3e>
    36f4:	08 95       	ret
    36f6:	0a 26       	eor	r0, r26
    36f8:	09 f4       	brne	.+2      	; 0x36fc <__fp_cmp+0x3e>
    36fa:	a1 40       	sbci	r26, 0x01	; 1
    36fc:	a6 95       	lsr	r26
    36fe:	8f ef       	ldi	r24, 0xFF	; 255
    3700:	81 1d       	adc	r24, r1
    3702:	81 1d       	adc	r24, r1
    3704:	08 95       	ret

00003706 <__fp_inf>:
    3706:	97 f9       	bld	r25, 7
    3708:	9f 67       	ori	r25, 0x7F	; 127
    370a:	80 e8       	ldi	r24, 0x80	; 128
    370c:	70 e0       	ldi	r23, 0x00	; 0
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	08 95       	ret

00003712 <__fp_nan>:
    3712:	9f ef       	ldi	r25, 0xFF	; 255
    3714:	80 ec       	ldi	r24, 0xC0	; 192
    3716:	08 95       	ret

00003718 <__fp_powser>:
    3718:	df 93       	push	r29
    371a:	cf 93       	push	r28
    371c:	1f 93       	push	r17
    371e:	0f 93       	push	r16
    3720:	ff 92       	push	r15
    3722:	ef 92       	push	r14
    3724:	df 92       	push	r13
    3726:	7b 01       	movw	r14, r22
    3728:	8c 01       	movw	r16, r24
    372a:	68 94       	set
    372c:	05 c0       	rjmp	.+10     	; 0x3738 <__fp_powser+0x20>
    372e:	da 2e       	mov	r13, r26
    3730:	ef 01       	movw	r28, r30
    3732:	af d0       	rcall	.+350    	; 0x3892 <__mulsf3x>
    3734:	fe 01       	movw	r30, r28
    3736:	e8 94       	clt
    3738:	a5 91       	lpm	r26, Z+
    373a:	25 91       	lpm	r18, Z+
    373c:	35 91       	lpm	r19, Z+
    373e:	45 91       	lpm	r20, Z+
    3740:	55 91       	lpm	r21, Z+
    3742:	ae f3       	brts	.-22     	; 0x372e <__fp_powser+0x16>
    3744:	ef 01       	movw	r28, r30
    3746:	29 de       	rcall	.-942    	; 0x339a <__addsf3x>
    3748:	fe 01       	movw	r30, r28
    374a:	97 01       	movw	r18, r14
    374c:	a8 01       	movw	r20, r16
    374e:	da 94       	dec	r13
    3750:	79 f7       	brne	.-34     	; 0x3730 <__fp_powser+0x18>
    3752:	df 90       	pop	r13
    3754:	ef 90       	pop	r14
    3756:	ff 90       	pop	r15
    3758:	0f 91       	pop	r16
    375a:	1f 91       	pop	r17
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <__fp_pscA>:
    3762:	00 24       	eor	r0, r0
    3764:	0a 94       	dec	r0
    3766:	16 16       	cp	r1, r22
    3768:	17 06       	cpc	r1, r23
    376a:	18 06       	cpc	r1, r24
    376c:	09 06       	cpc	r0, r25
    376e:	08 95       	ret

00003770 <__fp_pscB>:
    3770:	00 24       	eor	r0, r0
    3772:	0a 94       	dec	r0
    3774:	12 16       	cp	r1, r18
    3776:	13 06       	cpc	r1, r19
    3778:	14 06       	cpc	r1, r20
    377a:	05 06       	cpc	r0, r21
    377c:	08 95       	ret
    377e:	c9 cf       	rjmp	.-110    	; 0x3712 <__fp_nan>

00003780 <__fp_rempio2>:
    3780:	50 d0       	rcall	.+160    	; 0x3822 <__fp_splitA>
    3782:	e8 f3       	brcs	.-6      	; 0x377e <__fp_pscB+0xe>
    3784:	e8 94       	clt
    3786:	e0 e0       	ldi	r30, 0x00	; 0
    3788:	bb 27       	eor	r27, r27
    378a:	9f 57       	subi	r25, 0x7F	; 127
    378c:	f0 f0       	brcs	.+60     	; 0x37ca <__fp_rempio2+0x4a>
    378e:	2a ed       	ldi	r18, 0xDA	; 218
    3790:	3f e0       	ldi	r19, 0x0F	; 15
    3792:	49 ec       	ldi	r20, 0xC9	; 201
    3794:	06 c0       	rjmp	.+12     	; 0x37a2 <__fp_rempio2+0x22>
    3796:	ee 0f       	add	r30, r30
    3798:	bb 0f       	add	r27, r27
    379a:	66 1f       	adc	r22, r22
    379c:	77 1f       	adc	r23, r23
    379e:	88 1f       	adc	r24, r24
    37a0:	28 f0       	brcs	.+10     	; 0x37ac <__fp_rempio2+0x2c>
    37a2:	b2 3a       	cpi	r27, 0xA2	; 162
    37a4:	62 07       	cpc	r22, r18
    37a6:	73 07       	cpc	r23, r19
    37a8:	84 07       	cpc	r24, r20
    37aa:	28 f0       	brcs	.+10     	; 0x37b6 <__fp_rempio2+0x36>
    37ac:	b2 5a       	subi	r27, 0xA2	; 162
    37ae:	62 0b       	sbc	r22, r18
    37b0:	73 0b       	sbc	r23, r19
    37b2:	84 0b       	sbc	r24, r20
    37b4:	e3 95       	inc	r30
    37b6:	9a 95       	dec	r25
    37b8:	72 f7       	brpl	.-36     	; 0x3796 <__fp_rempio2+0x16>
    37ba:	80 38       	cpi	r24, 0x80	; 128
    37bc:	30 f4       	brcc	.+12     	; 0x37ca <__fp_rempio2+0x4a>
    37be:	9a 95       	dec	r25
    37c0:	bb 0f       	add	r27, r27
    37c2:	66 1f       	adc	r22, r22
    37c4:	77 1f       	adc	r23, r23
    37c6:	88 1f       	adc	r24, r24
    37c8:	d2 f7       	brpl	.-12     	; 0x37be <__fp_rempio2+0x3e>
    37ca:	90 48       	sbci	r25, 0x80	; 128
    37cc:	06 c1       	rjmp	.+524    	; 0x39da <__fp_mpack_finite>

000037ce <__fp_round>:
    37ce:	09 2e       	mov	r0, r25
    37d0:	03 94       	inc	r0
    37d2:	00 0c       	add	r0, r0
    37d4:	11 f4       	brne	.+4      	; 0x37da <__fp_round+0xc>
    37d6:	88 23       	and	r24, r24
    37d8:	52 f0       	brmi	.+20     	; 0x37ee <__fp_round+0x20>
    37da:	bb 0f       	add	r27, r27
    37dc:	40 f4       	brcc	.+16     	; 0x37ee <__fp_round+0x20>
    37de:	bf 2b       	or	r27, r31
    37e0:	11 f4       	brne	.+4      	; 0x37e6 <__fp_round+0x18>
    37e2:	60 ff       	sbrs	r22, 0
    37e4:	04 c0       	rjmp	.+8      	; 0x37ee <__fp_round+0x20>
    37e6:	6f 5f       	subi	r22, 0xFF	; 255
    37e8:	7f 4f       	sbci	r23, 0xFF	; 255
    37ea:	8f 4f       	sbci	r24, 0xFF	; 255
    37ec:	9f 4f       	sbci	r25, 0xFF	; 255
    37ee:	08 95       	ret

000037f0 <__fp_sinus>:
    37f0:	ef 93       	push	r30
    37f2:	e0 ff       	sbrs	r30, 0
    37f4:	06 c0       	rjmp	.+12     	; 0x3802 <__fp_sinus+0x12>
    37f6:	a2 ea       	ldi	r26, 0xA2	; 162
    37f8:	2a ed       	ldi	r18, 0xDA	; 218
    37fa:	3f e0       	ldi	r19, 0x0F	; 15
    37fc:	49 ec       	ldi	r20, 0xC9	; 201
    37fe:	5f eb       	ldi	r21, 0xBF	; 191
    3800:	cc dd       	rcall	.-1128   	; 0x339a <__addsf3x>
    3802:	e5 df       	rcall	.-54     	; 0x37ce <__fp_round>
    3804:	0f 90       	pop	r0
    3806:	03 94       	inc	r0
    3808:	01 fc       	sbrc	r0, 1
    380a:	90 58       	subi	r25, 0x80	; 128
    380c:	e9 ed       	ldi	r30, 0xD9	; 217
    380e:	f0 e0       	ldi	r31, 0x00	; 0
    3810:	f7 c0       	rjmp	.+494    	; 0x3a00 <__fp_powsodd>

00003812 <__fp_split3>:
    3812:	57 fd       	sbrc	r21, 7
    3814:	90 58       	subi	r25, 0x80	; 128
    3816:	44 0f       	add	r20, r20
    3818:	55 1f       	adc	r21, r21
    381a:	59 f0       	breq	.+22     	; 0x3832 <__fp_splitA+0x10>
    381c:	5f 3f       	cpi	r21, 0xFF	; 255
    381e:	71 f0       	breq	.+28     	; 0x383c <__fp_splitA+0x1a>
    3820:	47 95       	ror	r20

00003822 <__fp_splitA>:
    3822:	88 0f       	add	r24, r24
    3824:	97 fb       	bst	r25, 7
    3826:	99 1f       	adc	r25, r25
    3828:	61 f0       	breq	.+24     	; 0x3842 <__fp_splitA+0x20>
    382a:	9f 3f       	cpi	r25, 0xFF	; 255
    382c:	79 f0       	breq	.+30     	; 0x384c <__fp_splitA+0x2a>
    382e:	87 95       	ror	r24
    3830:	08 95       	ret
    3832:	12 16       	cp	r1, r18
    3834:	13 06       	cpc	r1, r19
    3836:	14 06       	cpc	r1, r20
    3838:	55 1f       	adc	r21, r21
    383a:	f2 cf       	rjmp	.-28     	; 0x3820 <__fp_split3+0xe>
    383c:	46 95       	lsr	r20
    383e:	f1 df       	rcall	.-30     	; 0x3822 <__fp_splitA>
    3840:	08 c0       	rjmp	.+16     	; 0x3852 <__fp_splitA+0x30>
    3842:	16 16       	cp	r1, r22
    3844:	17 06       	cpc	r1, r23
    3846:	18 06       	cpc	r1, r24
    3848:	99 1f       	adc	r25, r25
    384a:	f1 cf       	rjmp	.-30     	; 0x382e <__fp_splitA+0xc>
    384c:	86 95       	lsr	r24
    384e:	71 05       	cpc	r23, r1
    3850:	61 05       	cpc	r22, r1
    3852:	08 94       	sec
    3854:	08 95       	ret

00003856 <__fp_zero>:
    3856:	e8 94       	clt

00003858 <__fp_szero>:
    3858:	bb 27       	eor	r27, r27
    385a:	66 27       	eor	r22, r22
    385c:	77 27       	eor	r23, r23
    385e:	cb 01       	movw	r24, r22
    3860:	97 f9       	bld	r25, 7
    3862:	08 95       	ret

00003864 <__gesf2>:
    3864:	2c df       	rcall	.-424    	; 0x36be <__fp_cmp>
    3866:	08 f4       	brcc	.+2      	; 0x386a <__gesf2+0x6>
    3868:	8f ef       	ldi	r24, 0xFF	; 255
    386a:	08 95       	ret

0000386c <inverse>:
    386c:	9b 01       	movw	r18, r22
    386e:	ac 01       	movw	r20, r24
    3870:	60 e0       	ldi	r22, 0x00	; 0
    3872:	70 e0       	ldi	r23, 0x00	; 0
    3874:	80 e8       	ldi	r24, 0x80	; 128
    3876:	9f e3       	ldi	r25, 0x3F	; 63
    3878:	4c ce       	rjmp	.-872    	; 0x3512 <__divsf3>

0000387a <__mulsf3>:
    387a:	0b d0       	rcall	.+22     	; 0x3892 <__mulsf3x>
    387c:	a8 cf       	rjmp	.-176    	; 0x37ce <__fp_round>
    387e:	71 df       	rcall	.-286    	; 0x3762 <__fp_pscA>
    3880:	28 f0       	brcs	.+10     	; 0x388c <__mulsf3+0x12>
    3882:	76 df       	rcall	.-276    	; 0x3770 <__fp_pscB>
    3884:	18 f0       	brcs	.+6      	; 0x388c <__mulsf3+0x12>
    3886:	95 23       	and	r25, r21
    3888:	09 f0       	breq	.+2      	; 0x388c <__mulsf3+0x12>
    388a:	3d cf       	rjmp	.-390    	; 0x3706 <__fp_inf>
    388c:	42 cf       	rjmp	.-380    	; 0x3712 <__fp_nan>
    388e:	11 24       	eor	r1, r1
    3890:	e3 cf       	rjmp	.-58     	; 0x3858 <__fp_szero>

00003892 <__mulsf3x>:
    3892:	bf df       	rcall	.-130    	; 0x3812 <__fp_split3>
    3894:	a0 f3       	brcs	.-24     	; 0x387e <__mulsf3+0x4>

00003896 <__mulsf3_pse>:
    3896:	95 9f       	mul	r25, r21
    3898:	d1 f3       	breq	.-12     	; 0x388e <__mulsf3+0x14>
    389a:	95 0f       	add	r25, r21
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	55 1f       	adc	r21, r21
    38a0:	62 9f       	mul	r22, r18
    38a2:	f0 01       	movw	r30, r0
    38a4:	72 9f       	mul	r23, r18
    38a6:	bb 27       	eor	r27, r27
    38a8:	f0 0d       	add	r31, r0
    38aa:	b1 1d       	adc	r27, r1
    38ac:	63 9f       	mul	r22, r19
    38ae:	aa 27       	eor	r26, r26
    38b0:	f0 0d       	add	r31, r0
    38b2:	b1 1d       	adc	r27, r1
    38b4:	aa 1f       	adc	r26, r26
    38b6:	64 9f       	mul	r22, r20
    38b8:	66 27       	eor	r22, r22
    38ba:	b0 0d       	add	r27, r0
    38bc:	a1 1d       	adc	r26, r1
    38be:	66 1f       	adc	r22, r22
    38c0:	82 9f       	mul	r24, r18
    38c2:	22 27       	eor	r18, r18
    38c4:	b0 0d       	add	r27, r0
    38c6:	a1 1d       	adc	r26, r1
    38c8:	62 1f       	adc	r22, r18
    38ca:	73 9f       	mul	r23, r19
    38cc:	b0 0d       	add	r27, r0
    38ce:	a1 1d       	adc	r26, r1
    38d0:	62 1f       	adc	r22, r18
    38d2:	83 9f       	mul	r24, r19
    38d4:	a0 0d       	add	r26, r0
    38d6:	61 1d       	adc	r22, r1
    38d8:	22 1f       	adc	r18, r18
    38da:	74 9f       	mul	r23, r20
    38dc:	33 27       	eor	r19, r19
    38de:	a0 0d       	add	r26, r0
    38e0:	61 1d       	adc	r22, r1
    38e2:	23 1f       	adc	r18, r19
    38e4:	84 9f       	mul	r24, r20
    38e6:	60 0d       	add	r22, r0
    38e8:	21 1d       	adc	r18, r1
    38ea:	82 2f       	mov	r24, r18
    38ec:	76 2f       	mov	r23, r22
    38ee:	6a 2f       	mov	r22, r26
    38f0:	11 24       	eor	r1, r1
    38f2:	9f 57       	subi	r25, 0x7F	; 127
    38f4:	50 40       	sbci	r21, 0x00	; 0
    38f6:	8a f0       	brmi	.+34     	; 0x391a <__mulsf3_pse+0x84>
    38f8:	e1 f0       	breq	.+56     	; 0x3932 <__mulsf3_pse+0x9c>
    38fa:	88 23       	and	r24, r24
    38fc:	4a f0       	brmi	.+18     	; 0x3910 <__mulsf3_pse+0x7a>
    38fe:	ee 0f       	add	r30, r30
    3900:	ff 1f       	adc	r31, r31
    3902:	bb 1f       	adc	r27, r27
    3904:	66 1f       	adc	r22, r22
    3906:	77 1f       	adc	r23, r23
    3908:	88 1f       	adc	r24, r24
    390a:	91 50       	subi	r25, 0x01	; 1
    390c:	50 40       	sbci	r21, 0x00	; 0
    390e:	a9 f7       	brne	.-22     	; 0x38fa <__mulsf3_pse+0x64>
    3910:	9e 3f       	cpi	r25, 0xFE	; 254
    3912:	51 05       	cpc	r21, r1
    3914:	70 f0       	brcs	.+28     	; 0x3932 <__mulsf3_pse+0x9c>
    3916:	f7 ce       	rjmp	.-530    	; 0x3706 <__fp_inf>
    3918:	9f cf       	rjmp	.-194    	; 0x3858 <__fp_szero>
    391a:	5f 3f       	cpi	r21, 0xFF	; 255
    391c:	ec f3       	brlt	.-6      	; 0x3918 <__mulsf3_pse+0x82>
    391e:	98 3e       	cpi	r25, 0xE8	; 232
    3920:	dc f3       	brlt	.-10     	; 0x3918 <__mulsf3_pse+0x82>
    3922:	86 95       	lsr	r24
    3924:	77 95       	ror	r23
    3926:	67 95       	ror	r22
    3928:	b7 95       	ror	r27
    392a:	f7 95       	ror	r31
    392c:	e7 95       	ror	r30
    392e:	9f 5f       	subi	r25, 0xFF	; 255
    3930:	c1 f7       	brne	.-16     	; 0x3922 <__mulsf3_pse+0x8c>
    3932:	fe 2b       	or	r31, r30
    3934:	88 0f       	add	r24, r24
    3936:	91 1d       	adc	r25, r1
    3938:	96 95       	lsr	r25
    393a:	87 95       	ror	r24
    393c:	97 f9       	bld	r25, 7
    393e:	08 95       	ret

00003940 <sin>:
    3940:	9f 93       	push	r25
    3942:	1e df       	rcall	.-452    	; 0x3780 <__fp_rempio2>
    3944:	0f 90       	pop	r0
    3946:	07 fc       	sbrc	r0, 7
    3948:	ee 5f       	subi	r30, 0xFE	; 254
    394a:	52 cf       	rjmp	.-348    	; 0x37f0 <__fp_sinus>
    394c:	11 f4       	brne	.+4      	; 0x3952 <sin+0x12>
    394e:	0e f4       	brtc	.+2      	; 0x3952 <sin+0x12>
    3950:	e0 ce       	rjmp	.-576    	; 0x3712 <__fp_nan>
    3952:	41 c0       	rjmp	.+130    	; 0x39d6 <__fp_mpack>

00003954 <sqrt>:
    3954:	66 df       	rcall	.-308    	; 0x3822 <__fp_splitA>
    3956:	d0 f3       	brcs	.-12     	; 0x394c <sin+0xc>
    3958:	99 23       	and	r25, r25
    395a:	d9 f3       	breq	.-10     	; 0x3952 <sin+0x12>
    395c:	ce f3       	brts	.-14     	; 0x3950 <sin+0x10>
    395e:	9f 57       	subi	r25, 0x7F	; 127
    3960:	55 0b       	sbc	r21, r21
    3962:	87 ff       	sbrs	r24, 7
    3964:	46 d0       	rcall	.+140    	; 0x39f2 <__fp_norm2>
    3966:	00 24       	eor	r0, r0
    3968:	a0 e6       	ldi	r26, 0x60	; 96
    396a:	40 ea       	ldi	r20, 0xA0	; 160
    396c:	90 01       	movw	r18, r0
    396e:	80 58       	subi	r24, 0x80	; 128
    3970:	56 95       	lsr	r21
    3972:	97 95       	ror	r25
    3974:	28 f4       	brcc	.+10     	; 0x3980 <sqrt+0x2c>
    3976:	80 5c       	subi	r24, 0xC0	; 192
    3978:	66 0f       	add	r22, r22
    397a:	77 1f       	adc	r23, r23
    397c:	88 1f       	adc	r24, r24
    397e:	20 f0       	brcs	.+8      	; 0x3988 <sqrt+0x34>
    3980:	26 17       	cp	r18, r22
    3982:	37 07       	cpc	r19, r23
    3984:	48 07       	cpc	r20, r24
    3986:	30 f4       	brcc	.+12     	; 0x3994 <sqrt+0x40>
    3988:	62 1b       	sub	r22, r18
    398a:	73 0b       	sbc	r23, r19
    398c:	84 0b       	sbc	r24, r20
    398e:	20 29       	or	r18, r0
    3990:	31 29       	or	r19, r1
    3992:	4a 2b       	or	r20, r26
    3994:	a6 95       	lsr	r26
    3996:	17 94       	ror	r1
    3998:	07 94       	ror	r0
    399a:	20 25       	eor	r18, r0
    399c:	31 25       	eor	r19, r1
    399e:	4a 27       	eor	r20, r26
    39a0:	58 f7       	brcc	.-42     	; 0x3978 <sqrt+0x24>
    39a2:	66 0f       	add	r22, r22
    39a4:	77 1f       	adc	r23, r23
    39a6:	88 1f       	adc	r24, r24
    39a8:	20 f0       	brcs	.+8      	; 0x39b2 <sqrt+0x5e>
    39aa:	26 17       	cp	r18, r22
    39ac:	37 07       	cpc	r19, r23
    39ae:	48 07       	cpc	r20, r24
    39b0:	30 f4       	brcc	.+12     	; 0x39be <sqrt+0x6a>
    39b2:	62 0b       	sbc	r22, r18
    39b4:	73 0b       	sbc	r23, r19
    39b6:	84 0b       	sbc	r24, r20
    39b8:	20 0d       	add	r18, r0
    39ba:	31 1d       	adc	r19, r1
    39bc:	41 1d       	adc	r20, r1
    39be:	a0 95       	com	r26
    39c0:	81 f7       	brne	.-32     	; 0x39a2 <sqrt+0x4e>
    39c2:	b9 01       	movw	r22, r18
    39c4:	84 2f       	mov	r24, r20
    39c6:	91 58       	subi	r25, 0x81	; 129
    39c8:	88 0f       	add	r24, r24
    39ca:	96 95       	lsr	r25
    39cc:	87 95       	ror	r24
    39ce:	08 95       	ret

000039d0 <square>:
    39d0:	9b 01       	movw	r18, r22
    39d2:	ac 01       	movw	r20, r24
    39d4:	52 cf       	rjmp	.-348    	; 0x387a <__mulsf3>

000039d6 <__fp_mpack>:
    39d6:	9f 3f       	cpi	r25, 0xFF	; 255
    39d8:	31 f0       	breq	.+12     	; 0x39e6 <__fp_mpack_finite+0xc>

000039da <__fp_mpack_finite>:
    39da:	91 50       	subi	r25, 0x01	; 1
    39dc:	20 f4       	brcc	.+8      	; 0x39e6 <__fp_mpack_finite+0xc>
    39de:	87 95       	ror	r24
    39e0:	77 95       	ror	r23
    39e2:	67 95       	ror	r22
    39e4:	b7 95       	ror	r27
    39e6:	88 0f       	add	r24, r24
    39e8:	91 1d       	adc	r25, r1
    39ea:	96 95       	lsr	r25
    39ec:	87 95       	ror	r24
    39ee:	97 f9       	bld	r25, 7
    39f0:	08 95       	ret

000039f2 <__fp_norm2>:
    39f2:	91 50       	subi	r25, 0x01	; 1
    39f4:	50 40       	sbci	r21, 0x00	; 0
    39f6:	66 0f       	add	r22, r22
    39f8:	77 1f       	adc	r23, r23
    39fa:	88 1f       	adc	r24, r24
    39fc:	d2 f7       	brpl	.-12     	; 0x39f2 <__fp_norm2>
    39fe:	08 95       	ret

00003a00 <__fp_powsodd>:
    3a00:	9f 93       	push	r25
    3a02:	8f 93       	push	r24
    3a04:	7f 93       	push	r23
    3a06:	6f 93       	push	r22
    3a08:	ff 93       	push	r31
    3a0a:	ef 93       	push	r30
    3a0c:	9b 01       	movw	r18, r22
    3a0e:	ac 01       	movw	r20, r24
    3a10:	34 df       	rcall	.-408    	; 0x387a <__mulsf3>
    3a12:	ef 91       	pop	r30
    3a14:	ff 91       	pop	r31
    3a16:	80 de       	rcall	.-768    	; 0x3718 <__fp_powser>
    3a18:	2f 91       	pop	r18
    3a1a:	3f 91       	pop	r19
    3a1c:	4f 91       	pop	r20
    3a1e:	5f 91       	pop	r21
    3a20:	2c cf       	rjmp	.-424    	; 0x387a <__mulsf3>

00003a22 <__divmodhi4>:
    3a22:	97 fb       	bst	r25, 7
    3a24:	07 2e       	mov	r0, r23
    3a26:	16 f4       	brtc	.+4      	; 0x3a2c <__divmodhi4+0xa>
    3a28:	00 94       	com	r0
    3a2a:	07 d0       	rcall	.+14     	; 0x3a3a <__divmodhi4_neg1>
    3a2c:	77 fd       	sbrc	r23, 7
    3a2e:	09 d0       	rcall	.+18     	; 0x3a42 <__divmodhi4_neg2>
    3a30:	0e 94 25 1d 	call	0x3a4a	; 0x3a4a <__udivmodhi4>
    3a34:	07 fc       	sbrc	r0, 7
    3a36:	05 d0       	rcall	.+10     	; 0x3a42 <__divmodhi4_neg2>
    3a38:	3e f4       	brtc	.+14     	; 0x3a48 <__divmodhi4_exit>

00003a3a <__divmodhi4_neg1>:
    3a3a:	90 95       	com	r25
    3a3c:	81 95       	neg	r24
    3a3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3a40:	08 95       	ret

00003a42 <__divmodhi4_neg2>:
    3a42:	70 95       	com	r23
    3a44:	61 95       	neg	r22
    3a46:	7f 4f       	sbci	r23, 0xFF	; 255

00003a48 <__divmodhi4_exit>:
    3a48:	08 95       	ret

00003a4a <__udivmodhi4>:
    3a4a:	aa 1b       	sub	r26, r26
    3a4c:	bb 1b       	sub	r27, r27
    3a4e:	51 e1       	ldi	r21, 0x11	; 17
    3a50:	07 c0       	rjmp	.+14     	; 0x3a60 <__udivmodhi4_ep>

00003a52 <__udivmodhi4_loop>:
    3a52:	aa 1f       	adc	r26, r26
    3a54:	bb 1f       	adc	r27, r27
    3a56:	a6 17       	cp	r26, r22
    3a58:	b7 07       	cpc	r27, r23
    3a5a:	10 f0       	brcs	.+4      	; 0x3a60 <__udivmodhi4_ep>
    3a5c:	a6 1b       	sub	r26, r22
    3a5e:	b7 0b       	sbc	r27, r23

00003a60 <__udivmodhi4_ep>:
    3a60:	88 1f       	adc	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	5a 95       	dec	r21
    3a66:	a9 f7       	brne	.-22     	; 0x3a52 <__udivmodhi4_loop>
    3a68:	80 95       	com	r24
    3a6a:	90 95       	com	r25
    3a6c:	bc 01       	movw	r22, r24
    3a6e:	cd 01       	movw	r24, r26
    3a70:	08 95       	ret

00003a72 <_exit>:
    3a72:	f8 94       	cli

00003a74 <__stop_program>:
    3a74:	ff cf       	rjmp	.-2      	; 0x3a74 <__stop_program>
