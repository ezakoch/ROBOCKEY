
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001cc6  00001d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000052  00800104  00800104  00001d5e  2**0
                  ALLOC
  3 .stab         000035ac  00000000  00000000  00001d60  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  0000530c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  0000621c  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000128  00000000  00000000  0000624b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000148e  00000000  00000000  00006373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006dd  00000000  00000000  00007801  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000a1e  00000000  00000000  00007ede  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000002c8  00000000  00000000  000088fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003d3  00000000  00000000  00008bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001075  00000000  00000000  00008f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000d8  00000000  00000000  0000a00c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 cf 0a 	jmp	0x159e	; 0x159e <__vector_32>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	da e0       	ldi	r29, 0x0A	; 10
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	e6 ec       	ldi	r30, 0xC6	; 198
     10c:	fc e1       	ldi	r31, 0x1C	; 28
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a4 30       	cpi	r26, 0x04	; 4
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	a4 e0       	ldi	r26, 0x04	; 4
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a6 35       	cpi	r26, 0x56	; 86
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 24 0a 	call	0x1448	; 0x1448 <main>
     12e:	0c 94 61 0e 	jmp	0x1cc2	; 0x1cc2 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation){
     136:	2f 92       	push	r2
     138:	3f 92       	push	r3
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	8f 92       	push	r8
     144:	9f 92       	push	r9
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	00 d0       	rcall	.+0      	; 0x15c <localize+0x26>
     15c:	00 d0       	rcall	.+0      	; 0x15e <localize+0x28>
     15e:	00 d0       	rcall	.+0      	; 0x160 <localize+0x2a>
     160:	cd b7       	in	r28, 0x3d	; 61
     162:	de b7       	in	r29, 0x3e	; 62
     164:	9c 82       	std	Y+4, r9	; 0x04
     166:	8b 82       	std	Y+3, r8	; 0x03
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     168:	8f 3f       	cpi	r24, 0xFF	; 255
     16a:	e3 e0       	ldi	r30, 0x03	; 3
     16c:	9e 07       	cpc	r25, r30
     16e:	09 f4       	brne	.+2      	; 0x172 <localize+0x3c>
     170:	69 c6       	rjmp	.+3282   	; 0xe44 <__stack+0x345>
     172:	6f 3f       	cpi	r22, 0xFF	; 255
     174:	f3 e0       	ldi	r31, 0x03	; 3
     176:	7f 07       	cpc	r23, r31
     178:	09 f4       	brne	.+2      	; 0x17c <localize+0x46>
     17a:	66 c6       	rjmp	.+3276   	; 0xe48 <__stack+0x349>
     17c:	4f 3f       	cpi	r20, 0xFF	; 255
     17e:	e3 e0       	ldi	r30, 0x03	; 3
     180:	5e 07       	cpc	r21, r30
     182:	09 f4       	brne	.+2      	; 0x186 <localize+0x50>
     184:	63 c6       	rjmp	.+3270   	; 0xe4c <__stack+0x34d>
     186:	2f 3f       	cpi	r18, 0xFF	; 255
     188:	f3 e0       	ldi	r31, 0x03	; 3
     18a:	3f 07       	cpc	r19, r31
     18c:	09 f4       	brne	.+2      	; 0x190 <localize+0x5a>
     18e:	60 c6       	rjmp	.+3264   	; 0xe50 <__stack+0x351>
     190:	0f 3f       	cpi	r16, 0xFF	; 255
     192:	e3 e0       	ldi	r30, 0x03	; 3
     194:	1e 07       	cpc	r17, r30
     196:	09 f4       	brne	.+2      	; 0x19a <localize+0x64>
     198:	5d c6       	rjmp	.+3258   	; 0xe54 <__stack+0x355>
     19a:	ff ef       	ldi	r31, 0xFF	; 255
     19c:	ef 16       	cp	r14, r31
     19e:	f3 e0       	ldi	r31, 0x03	; 3
     1a0:	ff 06       	cpc	r15, r31
     1a2:	09 f4       	brne	.+2      	; 0x1a6 <localize+0x70>
     1a4:	59 c6       	rjmp	.+3250   	; 0xe58 <__stack+0x359>
     1a6:	ef ef       	ldi	r30, 0xFF	; 255
     1a8:	ce 16       	cp	r12, r30
     1aa:	e3 e0       	ldi	r30, 0x03	; 3
     1ac:	de 06       	cpc	r13, r30
     1ae:	09 f4       	brne	.+2      	; 0x1b2 <localize+0x7c>
     1b0:	55 c6       	rjmp	.+3242   	; 0xe5c <__stack+0x35d>
     1b2:	ff ef       	ldi	r31, 0xFF	; 255
     1b4:	af 16       	cp	r10, r31
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	bf 06       	cpc	r11, r31
     1ba:	09 f4       	brne	.+2      	; 0x1be <localize+0x88>
     1bc:	51 c6       	rjmp	.+3234   	; 0xe60 <__stack+0x361>
    
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    QA[0] = x1 - u0; QA[1] = y1 - v0;
     1be:	e0 91 02 01 	lds	r30, 0x0102
     1c2:	f0 91 03 01 	lds	r31, 0x0103
     1c6:	4c 01       	movw	r8, r24
     1c8:	8e 1a       	sub	r8, r30
     1ca:	9f 0a       	sbc	r9, r31
     1cc:	90 92 29 01 	sts	0x0129, r9
     1d0:	80 92 28 01 	sts	0x0128, r8
     1d4:	80 91 00 01 	lds	r24, 0x0100
     1d8:	90 91 01 01 	lds	r25, 0x0101
     1dc:	08 1b       	sub	r16, r24
     1de:	19 0b       	sbc	r17, r25
     1e0:	10 93 2b 01 	sts	0x012B, r17
     1e4:	00 93 2a 01 	sts	0x012A, r16
    QB[0] = x2 - u0; QB[1] = y2 - v0;
     1e8:	3b 01       	movw	r6, r22
     1ea:	6e 1a       	sub	r6, r30
     1ec:	7f 0a       	sbc	r7, r31
     1ee:	70 92 25 01 	sts	0x0125, r7
     1f2:	60 92 24 01 	sts	0x0124, r6
     1f6:	e8 1a       	sub	r14, r24
     1f8:	f9 0a       	sbc	r15, r25
     1fa:	f0 92 27 01 	sts	0x0127, r15
     1fe:	e0 92 26 01 	sts	0x0126, r14
    QC[0] = x3 - u0; QC[1] = y3 - v0;
     202:	2a 01       	movw	r4, r20
     204:	4e 1a       	sub	r4, r30
     206:	5f 0a       	sbc	r5, r31
     208:	50 92 21 01 	sts	0x0121, r5
     20c:	40 92 20 01 	sts	0x0120, r4
     210:	16 01       	movw	r2, r12
     212:	28 1a       	sub	r2, r24
     214:	39 0a       	sbc	r3, r25
     216:	30 92 23 01 	sts	0x0123, r3
     21a:	20 92 22 01 	sts	0x0122, r2
    QD[0] = x4 - u0; QD[1] = y4 - v0;
     21e:	69 01       	movw	r12, r18
     220:	ce 1a       	sub	r12, r30
     222:	df 0a       	sbc	r13, r31
     224:	d0 92 1d 01 	sts	0x011D, r13
     228:	c0 92 1c 01 	sts	0x011C, r12
     22c:	a8 1a       	sub	r10, r24
     22e:	b9 0a       	sbc	r11, r25
     230:	b0 92 1f 01 	sts	0x011F, r11
     234:	a0 92 1e 01 	sts	0x011E, r10
    distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
     238:	93 01       	movw	r18, r6
     23a:	28 19       	sub	r18, r8
     23c:	39 09       	sbc	r19, r9
     23e:	c7 01       	movw	r24, r14
     240:	80 1b       	sub	r24, r16
     242:	91 0b       	sbc	r25, r17
     244:	22 9f       	mul	r18, r18
     246:	b0 01       	movw	r22, r0
     248:	23 9f       	mul	r18, r19
     24a:	70 0d       	add	r23, r0
     24c:	70 0d       	add	r23, r0
     24e:	11 24       	eor	r1, r1
     250:	88 9f       	mul	r24, r24
     252:	90 01       	movw	r18, r0
     254:	89 9f       	mul	r24, r25
     256:	30 0d       	add	r19, r0
     258:	30 0d       	add	r19, r0
     25a:	11 24       	eor	r1, r1
     25c:	62 0f       	add	r22, r18
     25e:	73 1f       	adc	r23, r19
     260:	88 27       	eor	r24, r24
     262:	77 fd       	sbrc	r23, 7
     264:	80 95       	com	r24
     266:	98 2f       	mov	r25, r24
     268:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     26c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     270:	60 93 04 01 	sts	0x0104, r22
     274:	70 93 05 01 	sts	0x0105, r23
     278:	80 93 06 01 	sts	0x0106, r24
     27c:	90 93 07 01 	sts	0x0107, r25
    distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
     280:	92 01       	movw	r18, r4
     282:	28 19       	sub	r18, r8
     284:	39 09       	sbc	r19, r9
     286:	c1 01       	movw	r24, r2
     288:	80 1b       	sub	r24, r16
     28a:	91 0b       	sbc	r25, r17
     28c:	22 9f       	mul	r18, r18
     28e:	b0 01       	movw	r22, r0
     290:	23 9f       	mul	r18, r19
     292:	70 0d       	add	r23, r0
     294:	70 0d       	add	r23, r0
     296:	11 24       	eor	r1, r1
     298:	88 9f       	mul	r24, r24
     29a:	90 01       	movw	r18, r0
     29c:	89 9f       	mul	r24, r25
     29e:	30 0d       	add	r19, r0
     2a0:	30 0d       	add	r19, r0
     2a2:	11 24       	eor	r1, r1
     2a4:	62 0f       	add	r22, r18
     2a6:	73 1f       	adc	r23, r19
     2a8:	88 27       	eor	r24, r24
     2aa:	77 fd       	sbrc	r23, 7
     2ac:	80 95       	com	r24
     2ae:	98 2f       	mov	r25, r24
     2b0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     2b4:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     2b8:	60 93 08 01 	sts	0x0108, r22
     2bc:	70 93 09 01 	sts	0x0109, r23
     2c0:	80 93 0a 01 	sts	0x010A, r24
     2c4:	90 93 0b 01 	sts	0x010B, r25
    distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
     2c8:	96 01       	movw	r18, r12
     2ca:	28 19       	sub	r18, r8
     2cc:	39 09       	sbc	r19, r9
     2ce:	c5 01       	movw	r24, r10
     2d0:	80 1b       	sub	r24, r16
     2d2:	91 0b       	sbc	r25, r17
     2d4:	22 9f       	mul	r18, r18
     2d6:	b0 01       	movw	r22, r0
     2d8:	23 9f       	mul	r18, r19
     2da:	70 0d       	add	r23, r0
     2dc:	70 0d       	add	r23, r0
     2de:	11 24       	eor	r1, r1
     2e0:	88 9f       	mul	r24, r24
     2e2:	90 01       	movw	r18, r0
     2e4:	89 9f       	mul	r24, r25
     2e6:	30 0d       	add	r19, r0
     2e8:	30 0d       	add	r19, r0
     2ea:	11 24       	eor	r1, r1
     2ec:	62 0f       	add	r22, r18
     2ee:	73 1f       	adc	r23, r19
     2f0:	88 27       	eor	r24, r24
     2f2:	77 fd       	sbrc	r23, 7
     2f4:	80 95       	com	r24
     2f6:	98 2f       	mov	r25, r24
     2f8:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     2fc:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     300:	60 93 0c 01 	sts	0x010C, r22
     304:	70 93 0d 01 	sts	0x010D, r23
     308:	80 93 0e 01 	sts	0x010E, r24
     30c:	90 93 0f 01 	sts	0x010F, r25
    distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
     310:	92 01       	movw	r18, r4
     312:	26 19       	sub	r18, r6
     314:	37 09       	sbc	r19, r7
     316:	c1 01       	movw	r24, r2
     318:	8e 19       	sub	r24, r14
     31a:	9f 09       	sbc	r25, r15
     31c:	22 9f       	mul	r18, r18
     31e:	b0 01       	movw	r22, r0
     320:	23 9f       	mul	r18, r19
     322:	70 0d       	add	r23, r0
     324:	70 0d       	add	r23, r0
     326:	11 24       	eor	r1, r1
     328:	88 9f       	mul	r24, r24
     32a:	90 01       	movw	r18, r0
     32c:	89 9f       	mul	r24, r25
     32e:	30 0d       	add	r19, r0
     330:	30 0d       	add	r19, r0
     332:	11 24       	eor	r1, r1
     334:	62 0f       	add	r22, r18
     336:	73 1f       	adc	r23, r19
     338:	88 27       	eor	r24, r24
     33a:	77 fd       	sbrc	r23, 7
     33c:	80 95       	com	r24
     33e:	98 2f       	mov	r25, r24
     340:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     344:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     348:	60 93 10 01 	sts	0x0110, r22
     34c:	70 93 11 01 	sts	0x0111, r23
     350:	80 93 12 01 	sts	0x0112, r24
     354:	90 93 13 01 	sts	0x0113, r25
    distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
     358:	96 01       	movw	r18, r12
     35a:	26 19       	sub	r18, r6
     35c:	37 09       	sbc	r19, r7
     35e:	c5 01       	movw	r24, r10
     360:	8e 19       	sub	r24, r14
     362:	9f 09       	sbc	r25, r15
     364:	22 9f       	mul	r18, r18
     366:	b0 01       	movw	r22, r0
     368:	23 9f       	mul	r18, r19
     36a:	70 0d       	add	r23, r0
     36c:	70 0d       	add	r23, r0
     36e:	11 24       	eor	r1, r1
     370:	88 9f       	mul	r24, r24
     372:	90 01       	movw	r18, r0
     374:	89 9f       	mul	r24, r25
     376:	30 0d       	add	r19, r0
     378:	30 0d       	add	r19, r0
     37a:	11 24       	eor	r1, r1
     37c:	62 0f       	add	r22, r18
     37e:	73 1f       	adc	r23, r19
     380:	88 27       	eor	r24, r24
     382:	77 fd       	sbrc	r23, 7
     384:	80 95       	com	r24
     386:	98 2f       	mov	r25, r24
     388:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     38c:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     390:	60 93 14 01 	sts	0x0114, r22
     394:	70 93 15 01 	sts	0x0115, r23
     398:	80 93 16 01 	sts	0x0116, r24
     39c:	90 93 17 01 	sts	0x0117, r25
    distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
     3a0:	c4 18       	sub	r12, r4
     3a2:	d5 08       	sbc	r13, r5
     3a4:	a2 18       	sub	r10, r2
     3a6:	b3 08       	sbc	r11, r3
     3a8:	cc 9c       	mul	r12, r12
     3aa:	b0 01       	movw	r22, r0
     3ac:	cd 9c       	mul	r12, r13
     3ae:	70 0d       	add	r23, r0
     3b0:	70 0d       	add	r23, r0
     3b2:	11 24       	eor	r1, r1
     3b4:	aa 9c       	mul	r10, r10
     3b6:	c0 01       	movw	r24, r0
     3b8:	ab 9c       	mul	r10, r11
     3ba:	90 0d       	add	r25, r0
     3bc:	90 0d       	add	r25, r0
     3be:	11 24       	eor	r1, r1
     3c0:	68 0f       	add	r22, r24
     3c2:	79 1f       	adc	r23, r25
     3c4:	88 27       	eor	r24, r24
     3c6:	77 fd       	sbrc	r23, 7
     3c8:	80 95       	com	r24
     3ca:	98 2f       	mov	r25, r24
     3cc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     3d0:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     3d4:	60 93 18 01 	sts	0x0118, r22
     3d8:	70 93 19 01 	sts	0x0119, r23
     3dc:	80 93 1a 01 	sts	0x011A, r24
     3e0:	90 93 1b 01 	sts	0x011B, r25
     3e4:	04 e0       	ldi	r16, 0x04	; 4
     3e6:	11 e0       	ldi	r17, 0x01	; 1
    
    int i;
    for (i=0; i<6; i++) {
     3e8:	e1 2c       	mov	r14, r1
     3ea:	f1 2c       	mov	r15, r1
        return 0;
    }
    
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
     3ec:	1e 82       	std	Y+6, r1	; 0x06
     3ee:	1d 82       	std	Y+5, r1	; 0x05
     3f0:	1a 82       	std	Y+2, r1	; 0x02
     3f2:	19 82       	std	Y+1, r1	; 0x01
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
        return 0;
    }
    
    
    float max_distance = 0, min_distance = 10000;
     3f4:	21 2c       	mov	r2, r1
     3f6:	68 94       	set
     3f8:	33 24       	eor	r3, r3
     3fa:	36 f8       	bld	r3, 6
     3fc:	0f 2e       	mov	r0, r31
     3fe:	fc e1       	ldi	r31, 0x1C	; 28
     400:	4f 2e       	mov	r4, r31
     402:	f0 2d       	mov	r31, r0
     404:	0f 2e       	mov	r0, r31
     406:	f6 e4       	ldi	r31, 0x46	; 70
     408:	5f 2e       	mov	r5, r31
     40a:	f0 2d       	mov	r31, r0
     40c:	61 2c       	mov	r6, r1
     40e:	71 2c       	mov	r7, r1
     410:	81 2c       	mov	r8, r1
     412:	91 2c       	mov	r9, r1
    distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    
    int i;
    for (i=0; i<6; i++) {
        if (distances[i] > max_distance) {
     414:	f8 01       	movw	r30, r16
     416:	a0 80       	ld	r10, Z
     418:	b1 80       	ldd	r11, Z+1	; 0x01
     41a:	c2 80       	ldd	r12, Z+2	; 0x02
     41c:	d3 80       	ldd	r13, Z+3	; 0x03
     41e:	0c 5f       	subi	r16, 0xFC	; 252
     420:	1f 4f       	sbci	r17, 0xFF	; 255
     422:	26 2d       	mov	r18, r6
     424:	37 2d       	mov	r19, r7
     426:	48 2d       	mov	r20, r8
     428:	59 2d       	mov	r21, r9
     42a:	6a 2d       	mov	r22, r10
     42c:	7b 2d       	mov	r23, r11
     42e:	8c 2d       	mov	r24, r12
     430:	9d 2d       	mov	r25, r13
     432:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__gesf2>
     436:	18 16       	cp	r1, r24
     438:	34 f4       	brge	.+12     	; 0x446 <localize+0x310>
     43a:	fa 82       	std	Y+2, r15	; 0x02
     43c:	e9 82       	std	Y+1, r14	; 0x01
            max_distance = distances[i];
     43e:	6a 2c       	mov	r6, r10
     440:	7b 2c       	mov	r7, r11
     442:	8c 2c       	mov	r8, r12
     444:	9d 2c       	mov	r9, r13
            max_id = i;
        }
        if (distances[i] < min_distance) {
     446:	22 2d       	mov	r18, r2
     448:	33 2d       	mov	r19, r3
     44a:	44 2d       	mov	r20, r4
     44c:	55 2d       	mov	r21, r5
     44e:	6a 2d       	mov	r22, r10
     450:	7b 2d       	mov	r23, r11
     452:	8c 2d       	mov	r24, r12
     454:	9d 2d       	mov	r25, r13
     456:	0e 94 aa 0b 	call	0x1754	; 0x1754 <__cmpsf2>
     45a:	88 23       	and	r24, r24
     45c:	34 f4       	brge	.+12     	; 0x46a <localize+0x334>
     45e:	fe 82       	std	Y+6, r15	; 0x06
     460:	ed 82       	std	Y+5, r14	; 0x05
            min_distance = distances[i];
     462:	2a 2c       	mov	r2, r10
     464:	3b 2c       	mov	r3, r11
     466:	4c 2c       	mov	r4, r12
     468:	5d 2c       	mov	r5, r13
    distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    
    int i;
    for (i=0; i<6; i++) {
     46a:	ff ef       	ldi	r31, 0xFF	; 255
     46c:	ef 1a       	sub	r14, r31
     46e:	ff 0a       	sbc	r15, r31
     470:	86 e0       	ldi	r24, 0x06	; 6
     472:	e8 16       	cp	r14, r24
     474:	f1 04       	cpc	r15, r1
     476:	71 f6       	brne	.-100    	; 0x414 <localize+0x2de>
    
    
    
    
    
    switch (max_id) {
     478:	e9 81       	ldd	r30, Y+1	; 0x01
     47a:	fa 81       	ldd	r31, Y+2	; 0x02
     47c:	e2 30       	cpi	r30, 0x02	; 2
     47e:	f1 05       	cpc	r31, r1
     480:	09 f4       	brne	.+2      	; 0x484 <localize+0x34e>
     482:	34 c1       	rjmp	.+616    	; 0x6ec <localize+0x5b6>
     484:	34 f4       	brge	.+12     	; 0x492 <localize+0x35c>
     486:	30 97       	sbiw	r30, 0x00	; 0
     488:	81 f0       	breq	.+32     	; 0x4aa <localize+0x374>
     48a:	31 97       	sbiw	r30, 0x01	; 1
     48c:	09 f0       	breq	.+2      	; 0x490 <localize+0x35a>
     48e:	6f c3       	rjmp	.+1758   	; 0xb6e <__stack+0x6f>
     490:	9d c0       	rjmp	.+314    	; 0x5cc <localize+0x496>
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	9a 81       	ldd	r25, Y+2	; 0x02
     496:	84 30       	cpi	r24, 0x04	; 4
     498:	91 05       	cpc	r25, r1
     49a:	09 f4       	brne	.+2      	; 0x49e <localize+0x368>
     49c:	47 c2       	rjmp	.+1166   	; 0x92c <localize+0x7f6>
     49e:	0c f4       	brge	.+2      	; 0x4a2 <localize+0x36c>
     4a0:	b5 c1       	rjmp	.+874    	; 0x80c <localize+0x6d6>
     4a2:	05 97       	sbiw	r24, 0x05	; 5
     4a4:	09 f0       	breq	.+2      	; 0x4a8 <localize+0x372>
     4a6:	63 c3       	rjmp	.+1734   	; 0xb6e <__stack+0x6f>
     4a8:	d1 c2       	rjmp	.+1442   	; 0xa4c <localize+0x916>
        case 0:
            switch (min_id) {
     4aa:	ed 81       	ldd	r30, Y+5	; 0x05
     4ac:	fe 81       	ldd	r31, Y+6	; 0x06
     4ae:	e2 30       	cpi	r30, 0x02	; 2
     4b0:	f1 05       	cpc	r31, r1
     4b2:	39 f1       	breq	.+78     	; 0x502 <localize+0x3cc>
     4b4:	24 f4       	brge	.+8      	; 0x4be <localize+0x388>
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	09 f0       	breq	.+2      	; 0x4bc <localize+0x386>
     4ba:	6e c0       	rjmp	.+220    	; 0x598 <localize+0x462>
     4bc:	09 c0       	rjmp	.+18     	; 0x4d0 <localize+0x39a>
     4be:	8d 81       	ldd	r24, Y+5	; 0x05
     4c0:	9e 81       	ldd	r25, Y+6	; 0x06
     4c2:	83 30       	cpi	r24, 0x03	; 3
     4c4:	91 05       	cpc	r25, r1
     4c6:	b1 f1       	breq	.+108    	; 0x534 <localize+0x3fe>
     4c8:	04 97       	sbiw	r24, 0x04	; 4
     4ca:	09 f0       	breq	.+2      	; 0x4ce <localize+0x398>
     4cc:	65 c0       	rjmp	.+202    	; 0x598 <localize+0x462>
     4ce:	4b c0       	rjmp	.+150    	; 0x566 <localize+0x430>
                case 1:
                    Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     4d0:	88 e2       	ldi	r24, 0x28	; 40
     4d2:	91 e0       	ldi	r25, 0x01	; 1
     4d4:	90 93 49 01 	sts	0x0149, r25
     4d8:	80 93 48 01 	sts	0x0148, r24
     4dc:	80 e2       	ldi	r24, 0x20	; 32
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	90 93 33 01 	sts	0x0133, r25
     4e4:	80 93 32 01 	sts	0x0132, r24
     4e8:	84 e2       	ldi	r24, 0x24	; 36
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 35 01 	sts	0x0135, r25
     4f0:	80 93 34 01 	sts	0x0134, r24
     4f4:	8c e1       	ldi	r24, 0x1C	; 28
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 93 43 01 	sts	0x0143, r25
     4fc:	80 93 42 01 	sts	0x0142, r24
                    break;
     500:	36 c3       	rjmp	.+1644   	; 0xb6e <__stack+0x6f>
                case 2:
                    Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     502:	88 e2       	ldi	r24, 0x28	; 40
     504:	91 e0       	ldi	r25, 0x01	; 1
     506:	90 93 49 01 	sts	0x0149, r25
     50a:	80 93 48 01 	sts	0x0148, r24
     50e:	8c e1       	ldi	r24, 0x1C	; 28
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 33 01 	sts	0x0133, r25
     516:	80 93 32 01 	sts	0x0132, r24
     51a:	84 e2       	ldi	r24, 0x24	; 36
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	90 93 35 01 	sts	0x0135, r25
     522:	80 93 34 01 	sts	0x0134, r24
     526:	80 e2       	ldi	r24, 0x20	; 32
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	90 93 43 01 	sts	0x0143, r25
     52e:	80 93 42 01 	sts	0x0142, r24
                    break;
     532:	1d c3       	rjmp	.+1594   	; 0xb6e <__stack+0x6f>
                case 3:
                    Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     534:	84 e2       	ldi	r24, 0x24	; 36
     536:	91 e0       	ldi	r25, 0x01	; 1
     538:	90 93 49 01 	sts	0x0149, r25
     53c:	80 93 48 01 	sts	0x0148, r24
     540:	80 e2       	ldi	r24, 0x20	; 32
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	90 93 33 01 	sts	0x0133, r25
     548:	80 93 32 01 	sts	0x0132, r24
     54c:	88 e2       	ldi	r24, 0x28	; 40
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 35 01 	sts	0x0135, r25
     554:	80 93 34 01 	sts	0x0134, r24
     558:	8c e1       	ldi	r24, 0x1C	; 28
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	90 93 43 01 	sts	0x0143, r25
     560:	80 93 42 01 	sts	0x0142, r24
                    break;
     564:	04 c3       	rjmp	.+1544   	; 0xb6e <__stack+0x6f>
                case 4:
                    Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     566:	84 e2       	ldi	r24, 0x24	; 36
     568:	91 e0       	ldi	r25, 0x01	; 1
     56a:	90 93 49 01 	sts	0x0149, r25
     56e:	80 93 48 01 	sts	0x0148, r24
     572:	8c e1       	ldi	r24, 0x1C	; 28
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	90 93 33 01 	sts	0x0133, r25
     57a:	80 93 32 01 	sts	0x0132, r24
     57e:	88 e2       	ldi	r24, 0x28	; 40
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	90 93 35 01 	sts	0x0135, r25
     586:	80 93 34 01 	sts	0x0134, r24
     58a:	80 e2       	ldi	r24, 0x20	; 32
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	90 93 43 01 	sts	0x0143, r25
     592:	80 93 42 01 	sts	0x0142, r24
                    break;
     596:	eb c2       	rjmp	.+1494   	; 0xb6e <__stack+0x6f>
                default:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     598:	88 e2       	ldi	r24, 0x28	; 40
     59a:	91 e0       	ldi	r25, 0x01	; 1
     59c:	90 93 49 01 	sts	0x0149, r25
     5a0:	80 93 48 01 	sts	0x0148, r24
     5a4:	84 e2       	ldi	r24, 0x24	; 36
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	90 93 33 01 	sts	0x0133, r25
     5ac:	80 93 32 01 	sts	0x0132, r24
     5b0:	80 e2       	ldi	r24, 0x20	; 32
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	90 93 35 01 	sts	0x0135, r25
     5b8:	80 93 34 01 	sts	0x0134, r24
     5bc:	8c e1       	ldi	r24, 0x1C	; 28
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	90 93 43 01 	sts	0x0143, r25
     5c4:	80 93 42 01 	sts	0x0142, r24
                    return 0;
     5c8:	80 e0       	ldi	r24, 0x00	; 0
     5ca:	4b c4       	rjmp	.+2198   	; 0xe62 <__stack+0x363>
                    break;
            }
            break;
            
        case 1:
            switch (min_id) {
     5cc:	ed 81       	ldd	r30, Y+5	; 0x05
     5ce:	fe 81       	ldd	r31, Y+6	; 0x06
     5d0:	e2 30       	cpi	r30, 0x02	; 2
     5d2:	f1 05       	cpc	r31, r1
     5d4:	31 f1       	breq	.+76     	; 0x622 <localize+0x4ec>
     5d6:	1c f4       	brge	.+6      	; 0x5de <localize+0x4a8>
     5d8:	ef 2b       	or	r30, r31
     5da:	51 f0       	breq	.+20     	; 0x5f0 <localize+0x4ba>
     5dc:	6d c0       	rjmp	.+218    	; 0x6b8 <localize+0x582>
     5de:	8d 81       	ldd	r24, Y+5	; 0x05
     5e0:	9e 81       	ldd	r25, Y+6	; 0x06
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	91 05       	cpc	r25, r1
     5e6:	b1 f1       	breq	.+108    	; 0x654 <localize+0x51e>
     5e8:	05 97       	sbiw	r24, 0x05	; 5
     5ea:	09 f0       	breq	.+2      	; 0x5ee <localize+0x4b8>
     5ec:	65 c0       	rjmp	.+202    	; 0x6b8 <localize+0x582>
     5ee:	4b c0       	rjmp	.+150    	; 0x686 <localize+0x550>
                case 0:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     5f0:	88 e2       	ldi	r24, 0x28	; 40
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	90 93 49 01 	sts	0x0149, r25
     5f8:	80 93 48 01 	sts	0x0148, r24
     5fc:	84 e2       	ldi	r24, 0x24	; 36
     5fe:	91 e0       	ldi	r25, 0x01	; 1
     600:	90 93 33 01 	sts	0x0133, r25
     604:	80 93 32 01 	sts	0x0132, r24
     608:	80 e2       	ldi	r24, 0x20	; 32
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	90 93 35 01 	sts	0x0135, r25
     610:	80 93 34 01 	sts	0x0134, r24
     614:	8c e1       	ldi	r24, 0x1C	; 28
     616:	91 e0       	ldi	r25, 0x01	; 1
     618:	90 93 43 01 	sts	0x0143, r25
     61c:	80 93 42 01 	sts	0x0142, r24
                    break;
     620:	a6 c2       	rjmp	.+1356   	; 0xb6e <__stack+0x6f>
                case 2:
                    Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     622:	88 e2       	ldi	r24, 0x28	; 40
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	90 93 49 01 	sts	0x0149, r25
     62a:	80 93 48 01 	sts	0x0148, r24
     62e:	8c e1       	ldi	r24, 0x1C	; 28
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	90 93 33 01 	sts	0x0133, r25
     636:	80 93 32 01 	sts	0x0132, r24
     63a:	80 e2       	ldi	r24, 0x20	; 32
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	90 93 35 01 	sts	0x0135, r25
     642:	80 93 34 01 	sts	0x0134, r24
     646:	84 e2       	ldi	r24, 0x24	; 36
     648:	91 e0       	ldi	r25, 0x01	; 1
     64a:	90 93 43 01 	sts	0x0143, r25
     64e:	80 93 42 01 	sts	0x0142, r24
                    break;
     652:	8d c2       	rjmp	.+1306   	; 0xb6e <__stack+0x6f>
                case 3:
                    Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     654:	80 e2       	ldi	r24, 0x20	; 32
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	90 93 49 01 	sts	0x0149, r25
     65c:	80 93 48 01 	sts	0x0148, r24
     660:	84 e2       	ldi	r24, 0x24	; 36
     662:	91 e0       	ldi	r25, 0x01	; 1
     664:	90 93 33 01 	sts	0x0133, r25
     668:	80 93 32 01 	sts	0x0132, r24
     66c:	88 e2       	ldi	r24, 0x28	; 40
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	90 93 35 01 	sts	0x0135, r25
     674:	80 93 34 01 	sts	0x0134, r24
     678:	8c e1       	ldi	r24, 0x1C	; 28
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	90 93 43 01 	sts	0x0143, r25
     680:	80 93 42 01 	sts	0x0142, r24
                    break;
     684:	74 c2       	rjmp	.+1256   	; 0xb6e <__stack+0x6f>
                case 5:
                    Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     686:	80 e2       	ldi	r24, 0x20	; 32
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	90 93 49 01 	sts	0x0149, r25
     68e:	80 93 48 01 	sts	0x0148, r24
     692:	8c e1       	ldi	r24, 0x1C	; 28
     694:	91 e0       	ldi	r25, 0x01	; 1
     696:	90 93 33 01 	sts	0x0133, r25
     69a:	80 93 32 01 	sts	0x0132, r24
     69e:	88 e2       	ldi	r24, 0x28	; 40
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	90 93 35 01 	sts	0x0135, r25
     6a6:	80 93 34 01 	sts	0x0134, r24
     6aa:	84 e2       	ldi	r24, 0x24	; 36
     6ac:	91 e0       	ldi	r25, 0x01	; 1
     6ae:	90 93 43 01 	sts	0x0143, r25
     6b2:	80 93 42 01 	sts	0x0142, r24
                    break;
     6b6:	5b c2       	rjmp	.+1206   	; 0xb6e <__stack+0x6f>
                default:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6b8:	88 e2       	ldi	r24, 0x28	; 40
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	90 93 49 01 	sts	0x0149, r25
     6c0:	80 93 48 01 	sts	0x0148, r24
     6c4:	84 e2       	ldi	r24, 0x24	; 36
     6c6:	91 e0       	ldi	r25, 0x01	; 1
     6c8:	90 93 33 01 	sts	0x0133, r25
     6cc:	80 93 32 01 	sts	0x0132, r24
     6d0:	80 e2       	ldi	r24, 0x20	; 32
     6d2:	91 e0       	ldi	r25, 0x01	; 1
     6d4:	90 93 35 01 	sts	0x0135, r25
     6d8:	80 93 34 01 	sts	0x0134, r24
     6dc:	8c e1       	ldi	r24, 0x1C	; 28
     6de:	91 e0       	ldi	r25, 0x01	; 1
     6e0:	90 93 43 01 	sts	0x0143, r25
     6e4:	80 93 42 01 	sts	0x0142, r24
                    return 0;
     6e8:	80 e0       	ldi	r24, 0x00	; 0
     6ea:	bb c3       	rjmp	.+1910   	; 0xe62 <__stack+0x363>
                    break;
            }
            break;
            
        case 2:
            switch (min_id) {
     6ec:	ed 81       	ldd	r30, Y+5	; 0x05
     6ee:	fe 81       	ldd	r31, Y+6	; 0x06
     6f0:	e1 30       	cpi	r30, 0x01	; 1
     6f2:	f1 05       	cpc	r31, r1
     6f4:	31 f1       	breq	.+76     	; 0x742 <localize+0x60c>
     6f6:	1c f4       	brge	.+6      	; 0x6fe <localize+0x5c8>
     6f8:	ef 2b       	or	r30, r31
     6fa:	51 f0       	breq	.+20     	; 0x710 <localize+0x5da>
     6fc:	6d c0       	rjmp	.+218    	; 0x7d8 <localize+0x6a2>
     6fe:	8d 81       	ldd	r24, Y+5	; 0x05
     700:	9e 81       	ldd	r25, Y+6	; 0x06
     702:	84 30       	cpi	r24, 0x04	; 4
     704:	91 05       	cpc	r25, r1
     706:	b1 f1       	breq	.+108    	; 0x774 <localize+0x63e>
     708:	05 97       	sbiw	r24, 0x05	; 5
     70a:	09 f0       	breq	.+2      	; 0x70e <localize+0x5d8>
     70c:	65 c0       	rjmp	.+202    	; 0x7d8 <localize+0x6a2>
     70e:	4b c0       	rjmp	.+150    	; 0x7a6 <localize+0x670>
                case 0:
                    Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     710:	88 e2       	ldi	r24, 0x28	; 40
     712:	91 e0       	ldi	r25, 0x01	; 1
     714:	90 93 49 01 	sts	0x0149, r25
     718:	80 93 48 01 	sts	0x0148, r24
     71c:	84 e2       	ldi	r24, 0x24	; 36
     71e:	91 e0       	ldi	r25, 0x01	; 1
     720:	90 93 33 01 	sts	0x0133, r25
     724:	80 93 32 01 	sts	0x0132, r24
     728:	8c e1       	ldi	r24, 0x1C	; 28
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	90 93 35 01 	sts	0x0135, r25
     730:	80 93 34 01 	sts	0x0134, r24
     734:	80 e2       	ldi	r24, 0x20	; 32
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	90 93 43 01 	sts	0x0143, r25
     73c:	80 93 42 01 	sts	0x0142, r24
                    break;
     740:	16 c2       	rjmp	.+1068   	; 0xb6e <__stack+0x6f>
                case 1:
                    Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     742:	88 e2       	ldi	r24, 0x28	; 40
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	90 93 49 01 	sts	0x0149, r25
     74a:	80 93 48 01 	sts	0x0148, r24
     74e:	80 e2       	ldi	r24, 0x20	; 32
     750:	91 e0       	ldi	r25, 0x01	; 1
     752:	90 93 33 01 	sts	0x0133, r25
     756:	80 93 32 01 	sts	0x0132, r24
     75a:	8c e1       	ldi	r24, 0x1C	; 28
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	90 93 35 01 	sts	0x0135, r25
     762:	80 93 34 01 	sts	0x0134, r24
     766:	84 e2       	ldi	r24, 0x24	; 36
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	90 93 43 01 	sts	0x0143, r25
     76e:	80 93 42 01 	sts	0x0142, r24
                    break;
     772:	fd c1       	rjmp	.+1018   	; 0xb6e <__stack+0x6f>
                case 4:
                    Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     774:	8c e1       	ldi	r24, 0x1C	; 28
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	90 93 49 01 	sts	0x0149, r25
     77c:	80 93 48 01 	sts	0x0148, r24
     780:	84 e2       	ldi	r24, 0x24	; 36
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	90 93 33 01 	sts	0x0133, r25
     788:	80 93 32 01 	sts	0x0132, r24
     78c:	88 e2       	ldi	r24, 0x28	; 40
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	90 93 35 01 	sts	0x0135, r25
     794:	80 93 34 01 	sts	0x0134, r24
     798:	80 e2       	ldi	r24, 0x20	; 32
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	90 93 43 01 	sts	0x0143, r25
     7a0:	80 93 42 01 	sts	0x0142, r24
                    break;
     7a4:	e4 c1       	rjmp	.+968    	; 0xb6e <__stack+0x6f>
                case 5:
                    Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     7a6:	8c e1       	ldi	r24, 0x1C	; 28
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	90 93 49 01 	sts	0x0149, r25
     7ae:	80 93 48 01 	sts	0x0148, r24
     7b2:	80 e2       	ldi	r24, 0x20	; 32
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	90 93 33 01 	sts	0x0133, r25
     7ba:	80 93 32 01 	sts	0x0132, r24
     7be:	88 e2       	ldi	r24, 0x28	; 40
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	90 93 35 01 	sts	0x0135, r25
     7c6:	80 93 34 01 	sts	0x0134, r24
     7ca:	84 e2       	ldi	r24, 0x24	; 36
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	90 93 43 01 	sts	0x0143, r25
     7d2:	80 93 42 01 	sts	0x0142, r24
                    break;
     7d6:	cb c1       	rjmp	.+918    	; 0xb6e <__stack+0x6f>
                default:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7d8:	88 e2       	ldi	r24, 0x28	; 40
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	90 93 49 01 	sts	0x0149, r25
     7e0:	80 93 48 01 	sts	0x0148, r24
     7e4:	84 e2       	ldi	r24, 0x24	; 36
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	90 93 33 01 	sts	0x0133, r25
     7ec:	80 93 32 01 	sts	0x0132, r24
     7f0:	80 e2       	ldi	r24, 0x20	; 32
     7f2:	91 e0       	ldi	r25, 0x01	; 1
     7f4:	90 93 35 01 	sts	0x0135, r25
     7f8:	80 93 34 01 	sts	0x0134, r24
     7fc:	8c e1       	ldi	r24, 0x1C	; 28
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	90 93 43 01 	sts	0x0143, r25
     804:	80 93 42 01 	sts	0x0142, r24
                    return 0;
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	2b c3       	rjmp	.+1622   	; 0xe62 <__stack+0x363>
                    break;
            }
            break;
            
        case 3:
            switch (min_id) {
     80c:	ed 81       	ldd	r30, Y+5	; 0x05
     80e:	fe 81       	ldd	r31, Y+6	; 0x06
     810:	e1 30       	cpi	r30, 0x01	; 1
     812:	f1 05       	cpc	r31, r1
     814:	31 f1       	breq	.+76     	; 0x862 <localize+0x72c>
     816:	1c f4       	brge	.+6      	; 0x81e <localize+0x6e8>
     818:	ef 2b       	or	r30, r31
     81a:	51 f0       	breq	.+20     	; 0x830 <localize+0x6fa>
     81c:	6d c0       	rjmp	.+218    	; 0x8f8 <localize+0x7c2>
     81e:	8d 81       	ldd	r24, Y+5	; 0x05
     820:	9e 81       	ldd	r25, Y+6	; 0x06
     822:	84 30       	cpi	r24, 0x04	; 4
     824:	91 05       	cpc	r25, r1
     826:	b1 f1       	breq	.+108    	; 0x894 <localize+0x75e>
     828:	05 97       	sbiw	r24, 0x05	; 5
     82a:	09 f0       	breq	.+2      	; 0x82e <localize+0x6f8>
     82c:	65 c0       	rjmp	.+202    	; 0x8f8 <localize+0x7c2>
     82e:	4b c0       	rjmp	.+150    	; 0x8c6 <localize+0x790>
                case 0:
                    Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     830:	84 e2       	ldi	r24, 0x24	; 36
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	90 93 49 01 	sts	0x0149, r25
     838:	80 93 48 01 	sts	0x0148, r24
     83c:	88 e2       	ldi	r24, 0x28	; 40
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	90 93 33 01 	sts	0x0133, r25
     844:	80 93 32 01 	sts	0x0132, r24
     848:	80 e2       	ldi	r24, 0x20	; 32
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	90 93 35 01 	sts	0x0135, r25
     850:	80 93 34 01 	sts	0x0134, r24
     854:	8c e1       	ldi	r24, 0x1C	; 28
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	90 93 43 01 	sts	0x0143, r25
     85c:	80 93 42 01 	sts	0x0142, r24
                    break;
     860:	86 c1       	rjmp	.+780    	; 0xb6e <__stack+0x6f>
                case 1:
                    Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     862:	80 e2       	ldi	r24, 0x20	; 32
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	90 93 49 01 	sts	0x0149, r25
     86a:	80 93 48 01 	sts	0x0148, r24
     86e:	88 e2       	ldi	r24, 0x28	; 40
     870:	91 e0       	ldi	r25, 0x01	; 1
     872:	90 93 33 01 	sts	0x0133, r25
     876:	80 93 32 01 	sts	0x0132, r24
     87a:	84 e2       	ldi	r24, 0x24	; 36
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	90 93 35 01 	sts	0x0135, r25
     882:	80 93 34 01 	sts	0x0134, r24
     886:	8c e1       	ldi	r24, 0x1C	; 28
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	90 93 43 01 	sts	0x0143, r25
     88e:	80 93 42 01 	sts	0x0142, r24
                    break;
     892:	6d c1       	rjmp	.+730    	; 0xb6e <__stack+0x6f>
                case 4:
                    Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     894:	84 e2       	ldi	r24, 0x24	; 36
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	90 93 49 01 	sts	0x0149, r25
     89c:	80 93 48 01 	sts	0x0148, r24
     8a0:	8c e1       	ldi	r24, 0x1C	; 28
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	90 93 33 01 	sts	0x0133, r25
     8a8:	80 93 32 01 	sts	0x0132, r24
     8ac:	80 e2       	ldi	r24, 0x20	; 32
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	90 93 35 01 	sts	0x0135, r25
     8b4:	80 93 34 01 	sts	0x0134, r24
     8b8:	88 e2       	ldi	r24, 0x28	; 40
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	90 93 43 01 	sts	0x0143, r25
     8c0:	80 93 42 01 	sts	0x0142, r24
                    break;
     8c4:	54 c1       	rjmp	.+680    	; 0xb6e <__stack+0x6f>
                case 5:
                    Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     8c6:	80 e2       	ldi	r24, 0x20	; 32
     8c8:	91 e0       	ldi	r25, 0x01	; 1
     8ca:	90 93 49 01 	sts	0x0149, r25
     8ce:	80 93 48 01 	sts	0x0148, r24
     8d2:	8c e1       	ldi	r24, 0x1C	; 28
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	90 93 33 01 	sts	0x0133, r25
     8da:	80 93 32 01 	sts	0x0132, r24
     8de:	84 e2       	ldi	r24, 0x24	; 36
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	90 93 35 01 	sts	0x0135, r25
     8e6:	80 93 34 01 	sts	0x0134, r24
     8ea:	88 e2       	ldi	r24, 0x28	; 40
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	90 93 43 01 	sts	0x0143, r25
     8f2:	80 93 42 01 	sts	0x0142, r24
                    break;
     8f6:	3b c1       	rjmp	.+630    	; 0xb6e <__stack+0x6f>
                default:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     8f8:	88 e2       	ldi	r24, 0x28	; 40
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	90 93 49 01 	sts	0x0149, r25
     900:	80 93 48 01 	sts	0x0148, r24
     904:	84 e2       	ldi	r24, 0x24	; 36
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	90 93 33 01 	sts	0x0133, r25
     90c:	80 93 32 01 	sts	0x0132, r24
     910:	80 e2       	ldi	r24, 0x20	; 32
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	90 93 35 01 	sts	0x0135, r25
     918:	80 93 34 01 	sts	0x0134, r24
     91c:	8c e1       	ldi	r24, 0x1C	; 28
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	90 93 43 01 	sts	0x0143, r25
     924:	80 93 42 01 	sts	0x0142, r24
                    return 0;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	9b c2       	rjmp	.+1334   	; 0xe62 <__stack+0x363>
                    break;
            }
            break;
            
        case 4:
            switch (min_id) {
     92c:	ed 81       	ldd	r30, Y+5	; 0x05
     92e:	fe 81       	ldd	r31, Y+6	; 0x06
     930:	e2 30       	cpi	r30, 0x02	; 2
     932:	f1 05       	cpc	r31, r1
     934:	31 f1       	breq	.+76     	; 0x982 <localize+0x84c>
     936:	1c f4       	brge	.+6      	; 0x93e <localize+0x808>
     938:	ef 2b       	or	r30, r31
     93a:	51 f0       	breq	.+20     	; 0x950 <localize+0x81a>
     93c:	6d c0       	rjmp	.+218    	; 0xa18 <localize+0x8e2>
     93e:	8d 81       	ldd	r24, Y+5	; 0x05
     940:	9e 81       	ldd	r25, Y+6	; 0x06
     942:	83 30       	cpi	r24, 0x03	; 3
     944:	91 05       	cpc	r25, r1
     946:	b1 f1       	breq	.+108    	; 0x9b4 <localize+0x87e>
     948:	05 97       	sbiw	r24, 0x05	; 5
     94a:	09 f0       	breq	.+2      	; 0x94e <localize+0x818>
     94c:	65 c0       	rjmp	.+202    	; 0xa18 <localize+0x8e2>
     94e:	4b c0       	rjmp	.+150    	; 0x9e6 <localize+0x8b0>
                case 0:
                    Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     950:	84 e2       	ldi	r24, 0x24	; 36
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	90 93 49 01 	sts	0x0149, r25
     958:	80 93 48 01 	sts	0x0148, r24
     95c:	88 e2       	ldi	r24, 0x28	; 40
     95e:	91 e0       	ldi	r25, 0x01	; 1
     960:	90 93 33 01 	sts	0x0133, r25
     964:	80 93 32 01 	sts	0x0132, r24
     968:	8c e1       	ldi	r24, 0x1C	; 28
     96a:	91 e0       	ldi	r25, 0x01	; 1
     96c:	90 93 35 01 	sts	0x0135, r25
     970:	80 93 34 01 	sts	0x0134, r24
     974:	80 e2       	ldi	r24, 0x20	; 32
     976:	91 e0       	ldi	r25, 0x01	; 1
     978:	90 93 43 01 	sts	0x0143, r25
     97c:	80 93 42 01 	sts	0x0142, r24
                    break;
     980:	f6 c0       	rjmp	.+492    	; 0xb6e <__stack+0x6f>
                case 2:
                    Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     982:	8c e1       	ldi	r24, 0x1C	; 28
     984:	91 e0       	ldi	r25, 0x01	; 1
     986:	90 93 49 01 	sts	0x0149, r25
     98a:	80 93 48 01 	sts	0x0148, r24
     98e:	88 e2       	ldi	r24, 0x28	; 40
     990:	91 e0       	ldi	r25, 0x01	; 1
     992:	90 93 33 01 	sts	0x0133, r25
     996:	80 93 32 01 	sts	0x0132, r24
     99a:	84 e2       	ldi	r24, 0x24	; 36
     99c:	91 e0       	ldi	r25, 0x01	; 1
     99e:	90 93 35 01 	sts	0x0135, r25
     9a2:	80 93 34 01 	sts	0x0134, r24
     9a6:	80 e2       	ldi	r24, 0x20	; 32
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	90 93 43 01 	sts	0x0143, r25
     9ae:	80 93 42 01 	sts	0x0142, r24
                    break;
     9b2:	dd c0       	rjmp	.+442    	; 0xb6e <__stack+0x6f>
                case 3:
                    Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     9b4:	84 e2       	ldi	r24, 0x24	; 36
     9b6:	91 e0       	ldi	r25, 0x01	; 1
     9b8:	90 93 49 01 	sts	0x0149, r25
     9bc:	80 93 48 01 	sts	0x0148, r24
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	91 e0       	ldi	r25, 0x01	; 1
     9c4:	90 93 33 01 	sts	0x0133, r25
     9c8:	80 93 32 01 	sts	0x0132, r24
     9cc:	8c e1       	ldi	r24, 0x1C	; 28
     9ce:	91 e0       	ldi	r25, 0x01	; 1
     9d0:	90 93 35 01 	sts	0x0135, r25
     9d4:	80 93 34 01 	sts	0x0134, r24
     9d8:	88 e2       	ldi	r24, 0x28	; 40
     9da:	91 e0       	ldi	r25, 0x01	; 1
     9dc:	90 93 43 01 	sts	0x0143, r25
     9e0:	80 93 42 01 	sts	0x0142, r24
                    break;
     9e4:	c4 c0       	rjmp	.+392    	; 0xb6e <__stack+0x6f>
                case 5:
                    Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     9e6:	8c e1       	ldi	r24, 0x1C	; 28
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	90 93 49 01 	sts	0x0149, r25
     9ee:	80 93 48 01 	sts	0x0148, r24
     9f2:	80 e2       	ldi	r24, 0x20	; 32
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	90 93 33 01 	sts	0x0133, r25
     9fa:	80 93 32 01 	sts	0x0132, r24
     9fe:	84 e2       	ldi	r24, 0x24	; 36
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	90 93 35 01 	sts	0x0135, r25
     a06:	80 93 34 01 	sts	0x0134, r24
     a0a:	88 e2       	ldi	r24, 0x28	; 40
     a0c:	91 e0       	ldi	r25, 0x01	; 1
     a0e:	90 93 43 01 	sts	0x0143, r25
     a12:	80 93 42 01 	sts	0x0142, r24
                    break;
     a16:	ab c0       	rjmp	.+342    	; 0xb6e <__stack+0x6f>
                default:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     a18:	88 e2       	ldi	r24, 0x28	; 40
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	90 93 49 01 	sts	0x0149, r25
     a20:	80 93 48 01 	sts	0x0148, r24
     a24:	84 e2       	ldi	r24, 0x24	; 36
     a26:	91 e0       	ldi	r25, 0x01	; 1
     a28:	90 93 33 01 	sts	0x0133, r25
     a2c:	80 93 32 01 	sts	0x0132, r24
     a30:	80 e2       	ldi	r24, 0x20	; 32
     a32:	91 e0       	ldi	r25, 0x01	; 1
     a34:	90 93 35 01 	sts	0x0135, r25
     a38:	80 93 34 01 	sts	0x0134, r24
     a3c:	8c e1       	ldi	r24, 0x1C	; 28
     a3e:	91 e0       	ldi	r25, 0x01	; 1
     a40:	90 93 43 01 	sts	0x0143, r25
     a44:	80 93 42 01 	sts	0x0142, r24
                    return 0;
     a48:	80 e0       	ldi	r24, 0x00	; 0
     a4a:	0b c2       	rjmp	.+1046   	; 0xe62 <__stack+0x363>
            }
            break;
            
            
        case 5:
            switch (min_id) {
     a4c:	ed 81       	ldd	r30, Y+5	; 0x05
     a4e:	fe 81       	ldd	r31, Y+6	; 0x06
     a50:	e2 30       	cpi	r30, 0x02	; 2
     a52:	f1 05       	cpc	r31, r1
     a54:	39 f1       	breq	.+78     	; 0xaa4 <localize+0x96e>
     a56:	24 f4       	brge	.+8      	; 0xa60 <localize+0x92a>
     a58:	31 97       	sbiw	r30, 0x01	; 1
     a5a:	09 f0       	breq	.+2      	; 0xa5e <localize+0x928>
     a5c:	6e c0       	rjmp	.+220    	; 0xb3a <__stack+0x3b>
     a5e:	09 c0       	rjmp	.+18     	; 0xa72 <localize+0x93c>
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	9e 81       	ldd	r25, Y+6	; 0x06
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	91 05       	cpc	r25, r1
     a68:	b1 f1       	breq	.+108    	; 0xad6 <localize+0x9a0>
     a6a:	04 97       	sbiw	r24, 0x04	; 4
     a6c:	09 f0       	breq	.+2      	; 0xa70 <localize+0x93a>
     a6e:	65 c0       	rjmp	.+202    	; 0xb3a <__stack+0x3b>
     a70:	4b c0       	rjmp	.+150    	; 0xb08 <__stack+0x9>
                case 1:
                    Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     a72:	80 e2       	ldi	r24, 0x20	; 32
     a74:	91 e0       	ldi	r25, 0x01	; 1
     a76:	90 93 49 01 	sts	0x0149, r25
     a7a:	80 93 48 01 	sts	0x0148, r24
     a7e:	88 e2       	ldi	r24, 0x28	; 40
     a80:	91 e0       	ldi	r25, 0x01	; 1
     a82:	90 93 33 01 	sts	0x0133, r25
     a86:	80 93 32 01 	sts	0x0132, r24
     a8a:	8c e1       	ldi	r24, 0x1C	; 28
     a8c:	91 e0       	ldi	r25, 0x01	; 1
     a8e:	90 93 35 01 	sts	0x0135, r25
     a92:	80 93 34 01 	sts	0x0134, r24
     a96:	84 e2       	ldi	r24, 0x24	; 36
     a98:	91 e0       	ldi	r25, 0x01	; 1
     a9a:	90 93 43 01 	sts	0x0143, r25
     a9e:	80 93 42 01 	sts	0x0142, r24
                    break;
     aa2:	65 c0       	rjmp	.+202    	; 0xb6e <__stack+0x6f>
                case 2:
                    Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     aa4:	8c e1       	ldi	r24, 0x1C	; 28
     aa6:	91 e0       	ldi	r25, 0x01	; 1
     aa8:	90 93 49 01 	sts	0x0149, r25
     aac:	80 93 48 01 	sts	0x0148, r24
     ab0:	88 e2       	ldi	r24, 0x28	; 40
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	90 93 33 01 	sts	0x0133, r25
     ab8:	80 93 32 01 	sts	0x0132, r24
     abc:	80 e2       	ldi	r24, 0x20	; 32
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	90 93 35 01 	sts	0x0135, r25
     ac4:	80 93 34 01 	sts	0x0134, r24
     ac8:	84 e2       	ldi	r24, 0x24	; 36
     aca:	91 e0       	ldi	r25, 0x01	; 1
     acc:	90 93 43 01 	sts	0x0143, r25
     ad0:	80 93 42 01 	sts	0x0142, r24
                    break;
     ad4:	4c c0       	rjmp	.+152    	; 0xb6e <__stack+0x6f>
                case 3:
                    Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     ad6:	80 e2       	ldi	r24, 0x20	; 32
     ad8:	91 e0       	ldi	r25, 0x01	; 1
     ada:	90 93 49 01 	sts	0x0149, r25
     ade:	80 93 48 01 	sts	0x0148, r24
     ae2:	84 e2       	ldi	r24, 0x24	; 36
     ae4:	91 e0       	ldi	r25, 0x01	; 1
     ae6:	90 93 33 01 	sts	0x0133, r25
     aea:	80 93 32 01 	sts	0x0132, r24
     aee:	8c e1       	ldi	r24, 0x1C	; 28
     af0:	91 e0       	ldi	r25, 0x01	; 1
     af2:	90 93 35 01 	sts	0x0135, r25
     af6:	80 93 34 01 	sts	0x0134, r24
     afa:	88 e2       	ldi	r24, 0x28	; 40
     afc:	91 e0       	ldi	r25, 0x01	; 1
     afe:	90 93 43 01 	sts	0x0143, r25
     b02:	80 93 42 01 	sts	0x0142, r24
                    break;
     b06:	33 c0       	rjmp	.+102    	; 0xb6e <__stack+0x6f>
                case 4:
                    Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     b08:	8c e1       	ldi	r24, 0x1C	; 28
     b0a:	91 e0       	ldi	r25, 0x01	; 1
     b0c:	90 93 49 01 	sts	0x0149, r25
     b10:	80 93 48 01 	sts	0x0148, r24
     b14:	84 e2       	ldi	r24, 0x24	; 36
     b16:	91 e0       	ldi	r25, 0x01	; 1
     b18:	90 93 33 01 	sts	0x0133, r25
     b1c:	80 93 32 01 	sts	0x0132, r24
     b20:	80 e2       	ldi	r24, 0x20	; 32
     b22:	91 e0       	ldi	r25, 0x01	; 1
     b24:	90 93 35 01 	sts	0x0135, r25
     b28:	80 93 34 01 	sts	0x0134, r24
     b2c:	88 e2       	ldi	r24, 0x28	; 40
     b2e:	91 e0       	ldi	r25, 0x01	; 1
     b30:	90 93 43 01 	sts	0x0143, r25
     b34:	80 93 42 01 	sts	0x0142, r24
                    break;
     b38:	1a c0       	rjmp	.+52     	; 0xb6e <__stack+0x6f>
                default:
                    Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     b3a:	88 e2       	ldi	r24, 0x28	; 40
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	90 93 49 01 	sts	0x0149, r25
     b42:	80 93 48 01 	sts	0x0148, r24
     b46:	84 e2       	ldi	r24, 0x24	; 36
     b48:	91 e0       	ldi	r25, 0x01	; 1
     b4a:	90 93 33 01 	sts	0x0133, r25
     b4e:	80 93 32 01 	sts	0x0132, r24
     b52:	80 e2       	ldi	r24, 0x20	; 32
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	90 93 35 01 	sts	0x0135, r25
     b5a:	80 93 34 01 	sts	0x0134, r24
     b5e:	8c e1       	ldi	r24, 0x1C	; 28
     b60:	91 e0       	ldi	r25, 0x01	; 1
     b62:	90 93 43 01 	sts	0x0143, r25
     b66:	80 93 42 01 	sts	0x0142, r24
                    return 0;
     b6a:	80 e0       	ldi	r24, 0x00	; 0
     b6c:	7a c1       	rjmp	.+756    	; 0xe62 <__stack+0x363>
            }
            break;
    }

    
    float scale = P_vertical/max_distance;
     b6e:	26 2d       	mov	r18, r6
     b70:	37 2d       	mov	r19, r7
     b72:	48 2d       	mov	r20, r8
     b74:	59 2d       	mov	r21, r9
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	70 e0       	ldi	r23, 0x00	; 0
     b7a:	88 ee       	ldi	r24, 0xE8	; 232
     b7c:	91 e4       	ldi	r25, 0x41	; 65
     b7e:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divsf3>
     b82:	46 2e       	mov	r4, r22
     b84:	57 2e       	mov	r5, r23
     b86:	68 2e       	mov	r6, r24
     b88:	79 2e       	mov	r7, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     b8a:	00 91 48 01 	lds	r16, 0x0148
     b8e:	10 91 49 01 	lds	r17, 0x0149
     b92:	f8 01       	movw	r30, r16
     b94:	60 81       	ld	r22, Z
     b96:	71 81       	ldd	r23, Z+1	; 0x01
     b98:	88 27       	eor	r24, r24
     b9a:	77 fd       	sbrc	r23, 7
     b9c:	80 95       	com	r24
     b9e:	98 2f       	mov	r25, r24
     ba0:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     ba4:	24 2d       	mov	r18, r4
     ba6:	35 2d       	mov	r19, r5
     ba8:	46 2d       	mov	r20, r6
     baa:	57 2d       	mov	r21, r7
     bac:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     bb0:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     bb4:	4b 01       	movw	r8, r22
     bb6:	70 93 3b 01 	sts	0x013B, r23
     bba:	60 93 3a 01 	sts	0x013A, r22
     bbe:	f8 01       	movw	r30, r16
     bc0:	62 81       	ldd	r22, Z+2	; 0x02
     bc2:	73 81       	ldd	r23, Z+3	; 0x03
     bc4:	88 27       	eor	r24, r24
     bc6:	77 fd       	sbrc	r23, 7
     bc8:	80 95       	com	r24
     bca:	98 2f       	mov	r25, r24
     bcc:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     bd0:	24 2d       	mov	r18, r4
     bd2:	35 2d       	mov	r19, r5
     bd4:	46 2d       	mov	r20, r6
     bd6:	57 2d       	mov	r21, r7
     bd8:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     bdc:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     be0:	6b 01       	movw	r12, r22
     be2:	70 93 3d 01 	sts	0x013D, r23
     be6:	60 93 3c 01 	sts	0x013C, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     bea:	e0 90 34 01 	lds	r14, 0x0134
     bee:	f0 90 35 01 	lds	r15, 0x0135
     bf2:	f7 01       	movw	r30, r14
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	88 27       	eor	r24, r24
     bfa:	77 fd       	sbrc	r23, 7
     bfc:	80 95       	com	r24
     bfe:	98 2f       	mov	r25, r24
     c00:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     c04:	24 2d       	mov	r18, r4
     c06:	35 2d       	mov	r19, r5
     c08:	46 2d       	mov	r20, r6
     c0a:	57 2d       	mov	r21, r7
     c0c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     c10:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     c14:	5b 01       	movw	r10, r22
     c16:	70 93 2f 01 	sts	0x012F, r23
     c1a:	60 93 2e 01 	sts	0x012E, r22
     c1e:	f7 01       	movw	r30, r14
     c20:	62 81       	ldd	r22, Z+2	; 0x02
     c22:	73 81       	ldd	r23, Z+3	; 0x03
     c24:	88 27       	eor	r24, r24
     c26:	77 fd       	sbrc	r23, 7
     c28:	80 95       	com	r24
     c2a:	98 2f       	mov	r25, r24
     c2c:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     c30:	24 2d       	mov	r18, r4
     c32:	35 2d       	mov	r19, r5
     c34:	46 2d       	mov	r20, r6
     c36:	57 2d       	mov	r21, r7
     c38:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     c3c:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     c40:	3b 01       	movw	r6, r22
     c42:	70 93 31 01 	sts	0x0131, r23
     c46:	60 93 30 01 	sts	0x0130, r22
    
    S0[0] = 0.5*(S1[0]+S3[0]);
     c4a:	b4 01       	movw	r22, r8
     c4c:	6a 0d       	add	r22, r10
     c4e:	7b 1d       	adc	r23, r11
     c50:	88 27       	eor	r24, r24
     c52:	77 fd       	sbrc	r23, 7
     c54:	80 95       	com	r24
     c56:	98 2f       	mov	r25, r24
     c58:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	5f e3       	ldi	r21, 0x3F	; 63
     c64:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     c68:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     c6c:	5b 01       	movw	r10, r22
     c6e:	70 93 4f 01 	sts	0x014F, r23
     c72:	60 93 4e 01 	sts	0x014E, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     c76:	b6 01       	movw	r22, r12
     c78:	66 0d       	add	r22, r6
     c7a:	77 1d       	adc	r23, r7
     c7c:	88 27       	eor	r24, r24
     c7e:	77 fd       	sbrc	r23, 7
     c80:	80 95       	com	r24
     c82:	98 2f       	mov	r25, r24
     c84:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e0       	ldi	r20, 0x00	; 0
     c8e:	5f e3       	ldi	r21, 0x3F	; 63
     c90:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     c94:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     c98:	6b 01       	movw	r12, r22
     c9a:	70 93 51 01 	sts	0x0151, r23
     c9e:	60 93 50 01 	sts	0x0150, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     ca2:	aa 9c       	mul	r10, r10
     ca4:	b0 01       	movw	r22, r0
     ca6:	ab 9c       	mul	r10, r11
     ca8:	70 0d       	add	r23, r0
     caa:	70 0d       	add	r23, r0
     cac:	11 24       	eor	r1, r1
     cae:	cc 9c       	mul	r12, r12
     cb0:	c0 01       	movw	r24, r0
     cb2:	cd 9c       	mul	r12, r13
     cb4:	90 0d       	add	r25, r0
     cb6:	90 0d       	add	r25, r0
     cb8:	11 24       	eor	r1, r1
     cba:	68 0f       	add	r22, r24
     cbc:	79 1f       	adc	r23, r25
     cbe:	88 27       	eor	r24, r24
     cc0:	77 fd       	sbrc	r23, 7
     cc2:	80 95       	com	r24
     cc4:	98 2f       	mov	r25, r24
     cc6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     cca:	0e 94 d2 0d 	call	0x1ba4	; 0x1ba4 <sqrt>
     cce:	60 93 36 01 	sts	0x0136, r22
     cd2:	70 93 37 01 	sts	0x0137, r23
     cd6:	80 93 38 01 	sts	0x0138, r24
     cda:	90 93 39 01 	sts	0x0139, r25
    
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     cde:	f7 01       	movw	r30, r14
     ce0:	60 81       	ld	r22, Z
     ce2:	71 81       	ldd	r23, Z+1	; 0x01
     ce4:	f8 01       	movw	r30, r16
     ce6:	80 81       	ld	r24, Z
     ce8:	91 81       	ldd	r25, Z+1	; 0x01
     cea:	68 1b       	sub	r22, r24
     cec:	79 0b       	sbc	r23, r25
     cee:	88 27       	eor	r24, r24
     cf0:	77 fd       	sbrc	r23, 7
     cf2:	80 95       	com	r24
     cf4:	98 2f       	mov	r25, r24
     cf6:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     cfa:	2b 01       	movw	r4, r22
     cfc:	3c 01       	movw	r6, r24
     cfe:	f7 01       	movw	r30, r14
     d00:	62 81       	ldd	r22, Z+2	; 0x02
     d02:	73 81       	ldd	r23, Z+3	; 0x03
     d04:	f8 01       	movw	r30, r16
     d06:	82 81       	ldd	r24, Z+2	; 0x02
     d08:	93 81       	ldd	r25, Z+3	; 0x03
     d0a:	68 1b       	sub	r22, r24
     d0c:	79 0b       	sbc	r23, r25
     d0e:	88 27       	eor	r24, r24
     d10:	77 fd       	sbrc	r23, 7
     d12:	80 95       	com	r24
     d14:	98 2f       	mov	r25, r24
     d16:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     d1a:	a3 01       	movw	r20, r6
     d1c:	92 01       	movw	r18, r4
     d1e:	0e 94 57 0b 	call	0x16ae	; 0x16ae <atan2>
     d22:	2b 01       	movw	r4, r22
     d24:	3c 01       	movw	r6, r24
     d26:	60 93 3e 01 	sts	0x013E, r22
     d2a:	70 93 3f 01 	sts	0x013F, r23
     d2e:	80 93 40 01 	sts	0x0140, r24
     d32:	90 93 41 01 	sts	0x0141, r25
    alpha = -atan2(S0[0],S0[1]);
     d36:	b6 01       	movw	r22, r12
     d38:	88 27       	eor	r24, r24
     d3a:	77 fd       	sbrc	r23, 7
     d3c:	80 95       	com	r24
     d3e:	98 2f       	mov	r25, r24
     d40:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     d44:	6b 01       	movw	r12, r22
     d46:	7c 01       	movw	r14, r24
     d48:	b5 01       	movw	r22, r10
     d4a:	88 27       	eor	r24, r24
     d4c:	77 fd       	sbrc	r23, 7
     d4e:	80 95       	com	r24
     d50:	98 2f       	mov	r25, r24
     d52:	0e 94 4c 0c 	call	0x1898	; 0x1898 <__floatsisf>
     d56:	a7 01       	movw	r20, r14
     d58:	96 01       	movw	r18, r12
     d5a:	0e 94 57 0b 	call	0x16ae	; 0x16ae <atan2>
     d5e:	dc 01       	movw	r26, r24
     d60:	cb 01       	movw	r24, r22
     d62:	b0 58       	subi	r27, 0x80	; 128
     d64:	80 93 52 01 	sts	0x0152, r24
     d68:	90 93 53 01 	sts	0x0153, r25
     d6c:	a0 93 54 01 	sts	0x0154, r26
     d70:	b0 93 55 01 	sts	0x0155, r27
    
    *orientation = theta * 180/M_PI;
     d74:	20 e0       	ldi	r18, 0x00	; 0
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	44 e3       	ldi	r20, 0x34	; 52
     d7a:	53 e4       	ldi	r21, 0x43	; 67
     d7c:	c3 01       	movw	r24, r6
     d7e:	b2 01       	movw	r22, r4
     d80:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     d84:	2b ed       	ldi	r18, 0xDB	; 219
     d86:	3f e0       	ldi	r19, 0x0F	; 15
     d88:	49 e4       	ldi	r20, 0x49	; 73
     d8a:	50 e4       	ldi	r21, 0x40	; 64
     d8c:	0e 94 b1 0b 	call	0x1762	; 0x1762 <__divsf3>
     d90:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     d94:	ed 8d       	ldd	r30, Y+29	; 0x1d
     d96:	fe 8d       	ldd	r31, Y+30	; 0x1e
     d98:	71 83       	std	Z+1, r23	; 0x01
     d9a:	60 83       	st	Z, r22
    
    *x_robot = -radius * cos(theta - alpha);
     d9c:	20 91 52 01 	lds	r18, 0x0152
     da0:	30 91 53 01 	lds	r19, 0x0153
     da4:	40 91 54 01 	lds	r20, 0x0154
     da8:	50 91 55 01 	lds	r21, 0x0155
     dac:	60 91 3e 01 	lds	r22, 0x013E
     db0:	70 91 3f 01 	lds	r23, 0x013F
     db4:	80 91 40 01 	lds	r24, 0x0140
     db8:	90 91 41 01 	lds	r25, 0x0141
     dbc:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subsf3>
     dc0:	0e 94 ae 0b 	call	0x175c	; 0x175c <cos>
     dc4:	9b 01       	movw	r18, r22
     dc6:	ac 01       	movw	r20, r24
     dc8:	80 91 36 01 	lds	r24, 0x0136
     dcc:	90 91 37 01 	lds	r25, 0x0137
     dd0:	a0 91 38 01 	lds	r26, 0x0138
     dd4:	b0 91 39 01 	lds	r27, 0x0139
     dd8:	bc 01       	movw	r22, r24
     dda:	cd 01       	movw	r24, r26
     ddc:	90 58       	subi	r25, 0x80	; 128
     dde:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     de2:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     de6:	eb 81       	ldd	r30, Y+3	; 0x03
     de8:	fc 81       	ldd	r31, Y+4	; 0x04
     dea:	71 83       	std	Z+1, r23	; 0x01
     dec:	60 83       	st	Z, r22
    *y_robot = -radius * sin(theta - alpha);
     dee:	20 91 52 01 	lds	r18, 0x0152
     df2:	30 91 53 01 	lds	r19, 0x0153
     df6:	40 91 54 01 	lds	r20, 0x0154
     dfa:	50 91 55 01 	lds	r21, 0x0155
     dfe:	60 91 3e 01 	lds	r22, 0x013E
     e02:	70 91 3f 01 	lds	r23, 0x013F
     e06:	80 91 40 01 	lds	r24, 0x0140
     e0a:	90 91 41 01 	lds	r25, 0x0141
     e0e:	0e 94 e3 0a 	call	0x15c6	; 0x15c6 <__subsf3>
     e12:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <sin>
     e16:	9b 01       	movw	r18, r22
     e18:	ac 01       	movw	r20, r24
     e1a:	80 91 36 01 	lds	r24, 0x0136
     e1e:	90 91 37 01 	lds	r25, 0x0137
     e22:	a0 91 38 01 	lds	r26, 0x0138
     e26:	b0 91 39 01 	lds	r27, 0x0139
     e2a:	bc 01       	movw	r22, r24
     e2c:	cd 01       	movw	r24, r26
     e2e:	90 58       	subi	r25, 0x80	; 128
     e30:	0e 94 65 0d 	call	0x1aca	; 0x1aca <__mulsf3>
     e34:	0e 94 19 0c 	call	0x1832	; 0x1832 <__fixsfsi>
     e38:	eb 8d       	ldd	r30, Y+27	; 0x1b
     e3a:	fc 8d       	ldd	r31, Y+28	; 0x1c
     e3c:	71 83       	std	Z+1, r23	; 0x01
     e3e:	60 83       	st	Z, r22
    
    
    return 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	0f c0       	rjmp	.+30     	; 0xe62 <__stack+0x363>
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation){
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
        return 0;
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	0d c0       	rjmp	.+26     	; 0xe62 <__stack+0x363>
     e48:	80 e0       	ldi	r24, 0x00	; 0
     e4a:	0b c0       	rjmp	.+22     	; 0xe62 <__stack+0x363>
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	09 c0       	rjmp	.+18     	; 0xe62 <__stack+0x363>
     e50:	80 e0       	ldi	r24, 0x00	; 0
     e52:	07 c0       	rjmp	.+14     	; 0xe62 <__stack+0x363>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	05 c0       	rjmp	.+10     	; 0xe62 <__stack+0x363>
     e58:	80 e0       	ldi	r24, 0x00	; 0
     e5a:	03 c0       	rjmp	.+6      	; 0xe62 <__stack+0x363>
     e5c:	80 e0       	ldi	r24, 0x00	; 0
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <__stack+0x363>
     e60:	80 e0       	ldi	r24, 0x00	; 0
    *y_robot = -radius * sin(theta - alpha);
    
    
    return 1;
    
}
     e62:	26 96       	adiw	r28, 0x06	; 6
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	df 90       	pop	r13
     e7c:	cf 90       	pop	r12
     e7e:	bf 90       	pop	r11
     e80:	af 90       	pop	r10
     e82:	9f 90       	pop	r9
     e84:	8f 90       	pop	r8
     e86:	7f 90       	pop	r7
     e88:	6f 90       	pop	r6
     e8a:	5f 90       	pop	r5
     e8c:	4f 90       	pop	r4
     e8e:	3f 90       	pop	r3
     e90:	2f 90       	pop	r2
     e92:	08 95       	ret

00000e94 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
     e94:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
     e96:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
     e98:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
     e9a:	8c e0       	ldi	r24, 0x0C	; 12
     e9c:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
     ea0:	e9 e6       	ldi	r30, 0x69	; 105
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	80 62       	ori	r24, 0x20	; 32
     ea8:	80 83       	st	Z, r24
     eaa:	80 81       	ld	r24, Z
     eac:	8f 7e       	andi	r24, 0xEF	; 239
     eae:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
     eb0:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
     eb2:	78 94       	sei
     eb4:	08 95       	ret

00000eb6 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
     eb6:	1f 93       	push	r17
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	18 2f       	mov	r17, r24
     ebe:	d6 2f       	mov	r29, r22
     ec0:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
     ec2:	0e 94 4a 07 	call	0xe94	; 0xe94 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     ec6:	94 ea       	ldi	r25, 0xA4	; 164
     ec8:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     ecc:	ec eb       	ldi	r30, 0xBC	; 188
     ece:	f0 e0       	ldi	r31, 0x00	; 0
     ed0:	90 81       	ld	r25, Z
     ed2:	99 23       	and	r25, r25
     ed4:	ec f7       	brge	.-6      	; 0xed0 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     ed6:	90 e5       	ldi	r25, 0x50	; 80
     ed8:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     edc:	94 e8       	ldi	r25, 0x84	; 132
     ede:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     ee2:	ec eb       	ldi	r30, 0xBC	; 188
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	90 81       	ld	r25, Z
     ee8:	99 23       	and	r25, r25
     eea:	ec f7       	brge	.-6      	; 0xee6 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     eec:	90 91 b9 00 	lds	r25, 0x00B9
     ef0:	98 7f       	andi	r25, 0xF8	; 248
     ef2:	90 32       	cpi	r25, 0x20	; 32
     ef4:	29 f4       	brne	.+10     	; 0xf00 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     ef6:	84 e9       	ldi	r24, 0x94	; 148
     ef8:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
     efc:	80 e0       	ldi	r24, 0x00	; 0
     efe:	2d c0       	rjmp	.+90     	; 0xf5a <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     f06:	84 e8       	ldi	r24, 0x84	; 132
     f08:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     f0c:	ec eb       	ldi	r30, 0xBC	; 188
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	90 81       	ld	r25, Z
     f12:	99 23       	and	r25, r25
     f14:	ec f7       	brge	.-6      	; 0xf10 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
     f16:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
     f1a:	84 e8       	ldi	r24, 0x84	; 132
     f1c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     f20:	ec eb       	ldi	r30, 0xBC	; 188
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	88 23       	and	r24, r24
     f28:	ec f7       	brge	.-6      	; 0xf24 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
     f2a:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
     f2e:	84 e8       	ldi	r24, 0x84	; 132
     f30:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     f34:	ec eb       	ldi	r30, 0xBC	; 188
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	88 23       	and	r24, r24
     f3c:	ec f7       	brge	.-6      	; 0xf38 <m_rf_open+0x82>
	
	TWDR = packet_length;
     f3e:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
     f42:	84 e8       	ldi	r24, 0x84	; 132
     f44:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     f48:	ec eb       	ldi	r30, 0xBC	; 188
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	ec f7       	brge	.-6      	; 0xf4c <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     f52:	84 e9       	ldi	r24, 0x94	; 148
     f54:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
     f58:	81 e0       	ldi	r24, 0x01	; 1
}
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	08 95       	ret

00000f62 <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
     f62:	cf 93       	push	r28
     f64:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
     f66:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
     f68:	94 ea       	ldi	r25, 0xA4	; 164
     f6a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     f6e:	ec eb       	ldi	r30, 0xBC	; 188
     f70:	f0 e0       	ldi	r31, 0x00	; 0
     f72:	90 81       	ld	r25, Z
     f74:	99 23       	and	r25, r25
     f76:	ec f7       	brge	.-6      	; 0xf72 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
     f78:	90 e5       	ldi	r25, 0x50	; 80
     f7a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     f7e:	94 e8       	ldi	r25, 0x84	; 132
     f80:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     f84:	ec eb       	ldi	r30, 0xBC	; 188
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	90 81       	ld	r25, Z
     f8a:	99 23       	and	r25, r25
     f8c:	ec f7       	brge	.-6      	; 0xf88 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
     f8e:	90 91 b9 00 	lds	r25, 0x00B9
     f92:	98 7f       	andi	r25, 0xF8	; 248
     f94:	90 32       	cpi	r25, 0x20	; 32
     f96:	31 f4       	brne	.+12     	; 0xfa4 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
     f98:	84 e9       	ldi	r24, 0x94	; 148
     f9a:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
     f9e:	78 94       	sei
		return 0;
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	32 c0       	rjmp	.+100    	; 0x1008 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
     fa4:	93 e0       	ldi	r25, 0x03	; 3
     fa6:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
     faa:	94 e8       	ldi	r25, 0x84	; 132
     fac:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
     fb0:	ec eb       	ldi	r30, 0xBC	; 188
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	90 81       	ld	r25, Z
     fb6:	99 23       	and	r25, r25
     fb8:	ec f7       	brge	.-6      	; 0xfb4 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
     fba:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     fbe:	84 e8       	ldi	r24, 0x84	; 132
     fc0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
     fc4:	ec eb       	ldi	r30, 0xBC	; 188
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	88 23       	and	r24, r24
     fcc:	ec f7       	brge	.-6      	; 0xfc8 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
     fce:	24 2f       	mov	r18, r20
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	12 16       	cp	r1, r18
     fd4:	13 06       	cpc	r1, r19
     fd6:	9c f4       	brge	.+38     	; 0xffe <m_rf_send+0x9c>
     fd8:	a6 2f       	mov	r26, r22
     fda:	b7 2f       	mov	r27, r23
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
     fe0:	cb eb       	ldi	r28, 0xBB	; 187
     fe2:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
     fe4:	ec eb       	ldi	r30, 0xBC	; 188
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
     fea:	4d 91       	ld	r20, X+
     fec:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
     fee:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
     ff0:	40 81       	ld	r20, Z
     ff2:	44 23       	and	r20, r20
     ff4:	ec f7       	brge	.-6      	; 0xff0 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	82 17       	cp	r24, r18
     ffa:	93 07       	cpc	r25, r19
     ffc:	b4 f3       	brlt	.-20     	; 0xfea <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
     ffe:	84 e9       	ldi	r24, 0x94	; 148
    1000:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    1004:	78 94       	sei
	
	return 1;
    1006:	81 e0       	ldi	r24, 0x01	; 1
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1012:	ec eb       	ldi	r30, 0xBC	; 188
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	88 23       	and	r24, r24
    101a:	34 f0       	brlt	.+12     	; 0x1028 <twi_wait+0x1a>
    101c:	2f 5f       	subi	r18, 0xFF	; 255
    101e:	3f 4f       	sbci	r19, 0xFF	; 255
    1020:	29 3e       	cpi	r18, 0xE9	; 233
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	38 07       	cpc	r19, r24
    1026:	b9 f7       	brne	.-18     	; 0x1016 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1028:	81 e0       	ldi	r24, 0x01	; 1
    102a:	28 3e       	cpi	r18, 0xE8	; 232
    102c:	33 40       	sbci	r19, 0x03	; 3
    102e:	09 f4       	brne	.+2      	; 0x1032 <twi_wait+0x24>
    1030:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1032:	08 95       	ret

00001034 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1034:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1038:	84 e8       	ldi	r24, 0x84	; 132
    103a:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    103e:	0e 94 07 08 	call	0x100e	; 0x100e <twi_wait>
    1042:	88 23       	and	r24, r24
    1044:	21 f0       	breq	.+8      	; 0x104e <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1046:	80 91 b9 00 	lds	r24, 0x00B9
    104a:	88 7f       	andi	r24, 0xF8	; 248
    104c:	08 95       	ret
	} else {
		return 0;					// comm failure
    104e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1050:	08 95       	ret

00001052 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1052:	cf 93       	push	r28
    1054:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1056:	94 ea       	ldi	r25, 0xA4	; 164
    1058:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    105c:	0e 94 07 08 	call	0x100e	; 0x100e <twi_wait>
    1060:	88 23       	and	r24, r24
    1062:	61 f0       	breq	.+24     	; 0x107c <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1064:	8c 2f       	mov	r24, r28
    1066:	88 0f       	add	r24, r24
    1068:	8f 5f       	subi	r24, 0xFF	; 255
    106a:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    106e:	88 34       	cpi	r24, 0x48	; 72
    1070:	39 f4       	brne	.+14     	; 0x1080 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1072:	84 e9       	ldi	r24, 0x94	; 148
    1074:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	03 c0       	rjmp	.+6      	; 0x1082 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	01 c0       	rjmp	.+2      	; 0x1082 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1080:	81 e0       	ldi	r24, 0x01	; 1
}	
    1082:	cf 91       	pop	r28
    1084:	08 95       	ret

00001086 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1086:	cf 93       	push	r28
    1088:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    108a:	94 ea       	ldi	r25, 0xA4	; 164
    108c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1090:	0e 94 07 08 	call	0x100e	; 0x100e <twi_wait>
    1094:	88 23       	and	r24, r24
    1096:	59 f0       	breq	.+22     	; 0x10ae <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1098:	8c 2f       	mov	r24, r28
    109a:	88 0f       	add	r24, r24
    109c:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    10a0:	80 32       	cpi	r24, 0x20	; 32
    10a2:	39 f4       	brne	.+14     	; 0x10b2 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    10a4:	84 e9       	ldi	r24, 0x94	; 148
    10a6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	01 c0       	rjmp	.+2      	; 0x10b4 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    10b2:	81 e0       	ldi	r24, 0x01	; 1
}	
    10b4:	cf 91       	pop	r28
    10b6:	08 95       	ret

000010b8 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    10b8:	84 e9       	ldi	r24, 0x94	; 148
    10ba:	80 93 bc 00 	sts	0x00BC, r24
    10be:	08 95       	ret

000010c0 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    10c0:	ef 92       	push	r14
    10c2:	ff 92       	push	r15
    10c4:	0f 93       	push	r16
    10c6:	1f 93       	push	r17
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	60 97       	sbiw	r28, 0x10	; 16
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	e8 2e       	mov	r14, r24
    10de:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    10e0:	fe 01       	movw	r30, r28
    10e2:	31 96       	adiw	r30, 0x01	; 1
    10e4:	80 e1       	ldi	r24, 0x10	; 16
    10e6:	df 01       	movw	r26, r30
    10e8:	1d 92       	st	X+, r1
    10ea:	8a 95       	dec	r24
    10ec:	e9 f7       	brne	.-6      	; 0x10e8 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    10ee:	88 e5       	ldi	r24, 0x58	; 88
    10f0:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <m_wii_read+0x3a>
    10f8:	66 c0       	rjmp	.+204    	; 0x11c6 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    10fa:	86 e3       	ldi	r24, 0x36	; 54
    10fc:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1100:	88 23       	and	r24, r24
    1102:	09 f4       	brne	.+2      	; 0x1106 <m_wii_read+0x46>
    1104:	62 c0       	rjmp	.+196    	; 0x11ca <m_wii_read+0x10a>
	end();
    1106:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    110a:	b8 e0       	ldi	r27, 0x08	; 8
    110c:	ba 95       	dec	r27
    110e:	f1 f7       	brne	.-4      	; 0x110c <m_wii_read+0x4c>
    1110:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1112:	88 e5       	ldi	r24, 0x58	; 88
    1114:	0e 94 29 08 	call	0x1052	; 0x1052 <start_read>
    1118:	88 23       	and	r24, r24
    111a:	09 f4       	brne	.+2      	; 0x111e <m_wii_read+0x5e>
    111c:	58 c0       	rjmp	.+176    	; 0x11ce <m_wii_read+0x10e>
    111e:	ae 01       	movw	r20, r28
    1120:	4f 5f       	subi	r20, 0xFF	; 255
    1122:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1124:	8e 01       	movw	r16, r28
    1126:	00 5f       	subi	r16, 0xF0	; 240
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    112a:	ec eb       	ldi	r30, 0xBC	; 188
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1130:	2b eb       	ldi	r18, 0xBB	; 187
    1132:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1134:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1136:	80 81       	ld	r24, Z
    1138:	88 23       	and	r24, r24
    113a:	ec f7       	brge	.-6      	; 0x1136 <m_wii_read+0x76>
		temp[i] = TWDR;
    113c:	d9 01       	movw	r26, r18
    113e:	8c 91       	ld	r24, X
    1140:	da 01       	movw	r26, r20
    1142:	8d 93       	st	X+, r24
    1144:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1146:	a0 17       	cp	r26, r16
    1148:	b1 07       	cpc	r27, r17
    114a:	a1 f7       	brne	.-24     	; 0x1134 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    114c:	84 e8       	ldi	r24, 0x84	; 132
    114e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1152:	ec eb       	ldi	r30, 0xBC	; 188
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	88 23       	and	r24, r24
    115a:	ec f7       	brge	.-6      	; 0x1156 <m_wii_read+0x96>
	temp[15] = TWDR;
    115c:	80 91 bb 00 	lds	r24, 0x00BB
    1160:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1162:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
    1166:	de 01       	movw	r26, r28
    1168:	14 96       	adiw	r26, 0x04	; 4
    116a:	6e 2d       	mov	r22, r14
    116c:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    116e:	4c 91       	ld	r20, X
    1170:	24 2f       	mov	r18, r20
    1172:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1174:	cd 01       	movw	r24, r26
    1176:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1178:	fc 01       	movw	r30, r24
    117a:	80 81       	ld	r24, Z
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	f0 e1       	ldi	r31, 0x10	; 16
    1180:	2f 9f       	mul	r18, r31
    1182:	80 0d       	add	r24, r0
    1184:	91 1d       	adc	r25, r1
    1186:	11 24       	eor	r1, r1
    1188:	fb 01       	movw	r30, r22
    118a:	91 83       	std	Z+1, r25	; 0x01
    118c:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    118e:	84 2f       	mov	r24, r20
    1190:	80 7c       	andi	r24, 0xC0	; 192
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    119c:	9d 01       	movw	r18, r26
    119e:	21 50       	subi	r18, 0x01	; 1
    11a0:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    11a2:	f9 01       	movw	r30, r18
    11a4:	20 81       	ld	r18, Z
    11a6:	82 0f       	add	r24, r18
    11a8:	91 1d       	adc	r25, r1
    11aa:	fb 01       	movw	r30, r22
    11ac:	93 83       	std	Z+3, r25	; 0x03
    11ae:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    11b0:	4f 70       	andi	r20, 0x0F	; 15
    11b2:	44 83       	std	Z+4, r20	; 0x04
    11b4:	15 82       	std	Z+5, r1	; 0x05
    11b6:	13 96       	adiw	r26, 0x03	; 3
    11b8:	6a 5f       	subi	r22, 0xFA	; 250
    11ba:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    11bc:	0a 17       	cp	r16, r26
    11be:	1b 07       	cpc	r17, r27
    11c0:	b1 f6       	brne	.-84     	; 0x116e <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    11c2:	81 e0       	ldi	r24, 0x01	; 1
    11c4:	05 c0       	rjmp	.+10     	; 0x11d0 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	03 c0       	rjmp	.+6      	; 0x11d0 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	01 c0       	rjmp	.+2      	; 0x11d0 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    11ce:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    11d0:	60 96       	adiw	r28, 0x10	; 16
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	df 91       	pop	r29
    11de:	cf 91       	pop	r28
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	08 95       	ret

000011ea <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    11ea:	0e 94 4a 07 	call	0xe94	; 0xe94 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    11ee:	88 e5       	ldi	r24, 0x58	; 88
    11f0:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    11f4:	88 23       	and	r24, r24
    11f6:	09 f4       	brne	.+2      	; 0x11fa <m_wii_open+0x10>
    11f8:	c7 c0       	rjmp	.+398    	; 0x1388 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    11fa:	80 e3       	ldi	r24, 0x30	; 48
    11fc:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1200:	88 23       	and	r24, r24
    1202:	09 f4       	brne	.+2      	; 0x1206 <m_wii_open+0x1c>
    1204:	c3 c0       	rjmp	.+390    	; 0x138c <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1206:	81 e0       	ldi	r24, 0x01	; 1
    1208:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    120c:	88 23       	and	r24, r24
    120e:	09 f4       	brne	.+2      	; 0x1212 <m_wii_open+0x28>
    1210:	bf c0       	rjmp	.+382    	; 0x1390 <m_wii_open+0x1a6>
	end();
    1212:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1216:	83 ec       	ldi	r24, 0xC3	; 195
    1218:	99 e0       	ldi	r25, 0x09	; 9
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	f1 f7       	brne	.-4      	; 0x121a <m_wii_open+0x30>
    121e:	00 c0       	rjmp	.+0      	; 0x1220 <m_wii_open+0x36>
    1220:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1222:	88 e5       	ldi	r24, 0x58	; 88
    1224:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    1228:	88 23       	and	r24, r24
    122a:	09 f4       	brne	.+2      	; 0x122e <m_wii_open+0x44>
    122c:	b3 c0       	rjmp	.+358    	; 0x1394 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    122e:	80 e0       	ldi	r24, 0x00	; 0
    1230:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1234:	88 23       	and	r24, r24
    1236:	09 f4       	brne	.+2      	; 0x123a <m_wii_open+0x50>
    1238:	af c0       	rjmp	.+350    	; 0x1398 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    123a:	80 e0       	ldi	r24, 0x00	; 0
    123c:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1240:	88 23       	and	r24, r24
    1242:	09 f4       	brne	.+2      	; 0x1246 <m_wii_open+0x5c>
    1244:	ab c0       	rjmp	.+342    	; 0x139c <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1246:	80 e0       	ldi	r24, 0x00	; 0
    1248:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    124c:	88 23       	and	r24, r24
    124e:	09 f4       	brne	.+2      	; 0x1252 <m_wii_open+0x68>
    1250:	a7 c0       	rjmp	.+334    	; 0x13a0 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1258:	88 23       	and	r24, r24
    125a:	09 f4       	brne	.+2      	; 0x125e <m_wii_open+0x74>
    125c:	a3 c0       	rjmp	.+326    	; 0x13a4 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1264:	88 23       	and	r24, r24
    1266:	09 f4       	brne	.+2      	; 0x126a <m_wii_open+0x80>
    1268:	9f c0       	rjmp	.+318    	; 0x13a8 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1270:	88 23       	and	r24, r24
    1272:	09 f4       	brne	.+2      	; 0x1276 <m_wii_open+0x8c>
    1274:	9b c0       	rjmp	.+310    	; 0x13ac <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1276:	80 e0       	ldi	r24, 0x00	; 0
    1278:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    127c:	88 23       	and	r24, r24
    127e:	09 f4       	brne	.+2      	; 0x1282 <m_wii_open+0x98>
    1280:	97 c0       	rjmp	.+302    	; 0x13b0 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1282:	80 e9       	ldi	r24, 0x90	; 144
    1284:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1288:	88 23       	and	r24, r24
    128a:	09 f4       	brne	.+2      	; 0x128e <m_wii_open+0xa4>
    128c:	93 c0       	rjmp	.+294    	; 0x13b4 <m_wii_open+0x1ca>
	end();
    128e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
    1292:	83 ec       	ldi	r24, 0xC3	; 195
    1294:	99 e0       	ldi	r25, 0x09	; 9
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <m_wii_open+0xac>
    129a:	00 c0       	rjmp	.+0      	; 0x129c <m_wii_open+0xb2>
    129c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    129e:	88 e5       	ldi	r24, 0x58	; 88
    12a0:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    12a4:	88 23       	and	r24, r24
    12a6:	09 f4       	brne	.+2      	; 0x12aa <m_wii_open+0xc0>
    12a8:	87 c0       	rjmp	.+270    	; 0x13b8 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    12aa:	87 e0       	ldi	r24, 0x07	; 7
    12ac:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    12b0:	88 23       	and	r24, r24
    12b2:	09 f4       	brne	.+2      	; 0x12b6 <m_wii_open+0xcc>
    12b4:	83 c0       	rjmp	.+262    	; 0x13bc <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    12bc:	88 23       	and	r24, r24
    12be:	09 f4       	brne	.+2      	; 0x12c2 <m_wii_open+0xd8>
    12c0:	7f c0       	rjmp	.+254    	; 0x13c0 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    12c2:	81 e4       	ldi	r24, 0x41	; 65
    12c4:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    12c8:	88 23       	and	r24, r24
    12ca:	09 f4       	brne	.+2      	; 0x12ce <m_wii_open+0xe4>
    12cc:	7b c0       	rjmp	.+246    	; 0x13c4 <m_wii_open+0x1da>
	end();
    12ce:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
    12d2:	83 ec       	ldi	r24, 0xC3	; 195
    12d4:	99 e0       	ldi	r25, 0x09	; 9
    12d6:	01 97       	sbiw	r24, 0x01	; 1
    12d8:	f1 f7       	brne	.-4      	; 0x12d6 <m_wii_open+0xec>
    12da:	00 c0       	rjmp	.+0      	; 0x12dc <m_wii_open+0xf2>
    12dc:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    12de:	88 e5       	ldi	r24, 0x58	; 88
    12e0:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    12e4:	88 23       	and	r24, r24
    12e6:	09 f4       	brne	.+2      	; 0x12ea <m_wii_open+0x100>
    12e8:	6f c0       	rjmp	.+222    	; 0x13c8 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    12ea:	8a e1       	ldi	r24, 0x1A	; 26
    12ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    12f0:	88 23       	and	r24, r24
    12f2:	09 f4       	brne	.+2      	; 0x12f6 <m_wii_open+0x10c>
    12f4:	6b c0       	rjmp	.+214    	; 0x13cc <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    12f6:	80 e4       	ldi	r24, 0x40	; 64
    12f8:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    12fc:	88 23       	and	r24, r24
    12fe:	09 f4       	brne	.+2      	; 0x1302 <m_wii_open+0x118>
    1300:	67 c0       	rjmp	.+206    	; 0x13d0 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1308:	88 23       	and	r24, r24
    130a:	09 f4       	brne	.+2      	; 0x130e <m_wii_open+0x124>
    130c:	63 c0       	rjmp	.+198    	; 0x13d4 <m_wii_open+0x1ea>
	end();
    130e:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
    1312:	83 ec       	ldi	r24, 0xC3	; 195
    1314:	99 e0       	ldi	r25, 0x09	; 9
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	f1 f7       	brne	.-4      	; 0x1316 <m_wii_open+0x12c>
    131a:	00 c0       	rjmp	.+0      	; 0x131c <m_wii_open+0x132>
    131c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    131e:	88 e5       	ldi	r24, 0x58	; 88
    1320:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    1324:	88 23       	and	r24, r24
    1326:	09 f4       	brne	.+2      	; 0x132a <m_wii_open+0x140>
    1328:	57 c0       	rjmp	.+174    	; 0x13d8 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    132a:	83 e3       	ldi	r24, 0x33	; 51
    132c:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1330:	88 23       	and	r24, r24
    1332:	09 f4       	brne	.+2      	; 0x1336 <m_wii_open+0x14c>
    1334:	53 c0       	rjmp	.+166    	; 0x13dc <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1336:	83 e0       	ldi	r24, 0x03	; 3
    1338:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    133c:	88 23       	and	r24, r24
    133e:	09 f4       	brne	.+2      	; 0x1342 <m_wii_open+0x158>
    1340:	4f c0       	rjmp	.+158    	; 0x13e0 <m_wii_open+0x1f6>
	end();
    1342:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
    1346:	83 ec       	ldi	r24, 0xC3	; 195
    1348:	99 e0       	ldi	r25, 0x09	; 9
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <m_wii_open+0x160>
    134e:	00 c0       	rjmp	.+0      	; 0x1350 <m_wii_open+0x166>
    1350:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1352:	88 e5       	ldi	r24, 0x58	; 88
    1354:	0e 94 43 08 	call	0x1086	; 0x1086 <start_write>
    1358:	88 23       	and	r24, r24
    135a:	09 f4       	brne	.+2      	; 0x135e <m_wii_open+0x174>
    135c:	43 c0       	rjmp	.+134    	; 0x13e4 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    135e:	80 e3       	ldi	r24, 0x30	; 48
    1360:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1364:	88 23       	and	r24, r24
    1366:	09 f4       	brne	.+2      	; 0x136a <m_wii_open+0x180>
    1368:	3f c0       	rjmp	.+126    	; 0x13e8 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    136a:	88 e0       	ldi	r24, 0x08	; 8
    136c:	0e 94 1a 08 	call	0x1034	; 0x1034 <send_byte>
    1370:	88 23       	and	r24, r24
    1372:	e1 f1       	breq	.+120    	; 0x13ec <m_wii_open+0x202>
	end();
    1374:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <end>
    1378:	83 ec       	ldi	r24, 0xC3	; 195
    137a:	99 e0       	ldi	r25, 0x09	; 9
    137c:	01 97       	sbiw	r24, 0x01	; 1
    137e:	f1 f7       	brne	.-4      	; 0x137c <m_wii_open+0x192>
    1380:	00 c0       	rjmp	.+0      	; 0x1382 <m_wii_open+0x198>
    1382:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1388:	80 e0       	ldi	r24, 0x00	; 0
    138a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    138c:	80 e0       	ldi	r24, 0x00	; 0
    138e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1398:	80 e0       	ldi	r24, 0x00	; 0
    139a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    13a4:	80 e0       	ldi	r24, 0x00	; 0
    13a6:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    13b0:	80 e0       	ldi	r24, 0x00	; 0
    13b2:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    13c0:	80 e0       	ldi	r24, 0x00	; 0
    13c2:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    13c8:	80 e0       	ldi	r24, 0x00	; 0
    13ca:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    13ec:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    13ee:	08 95       	ret

000013f0 <set_timer3>:
}

//Timer 3 Initialization
void set_timer3(void)
{
	OCR3A = 391;
    13f0:	87 e8       	ldi	r24, 0x87	; 135
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	90 93 99 00 	sts	0x0099, r25
    13f8:	80 93 98 00 	sts	0x0098, r24
	
	//Set C6 as output (debugging)
	set(DDRC,6);
    13fc:	3e 9a       	sbi	0x07, 6	; 7

	//Set to UP to OCR1A
	clear(TCCR3B,WGM33);
    13fe:	e1 e9       	ldi	r30, 0x91	; 145
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	80 81       	ld	r24, Z
    1404:	8f 7e       	andi	r24, 0xEF	; 239
    1406:	80 83       	st	Z, r24
	set(TCCR3B,WGM32);
    1408:	80 81       	ld	r24, Z
    140a:	88 60       	ori	r24, 0x08	; 8
    140c:	80 83       	st	Z, r24
	clear(TCCR3A,WGM31);
    140e:	a0 e9       	ldi	r26, 0x90	; 144
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	8c 91       	ld	r24, X
    1414:	8d 7f       	andi	r24, 0xFD	; 253
    1416:	8c 93       	st	X, r24
	clear(TCCR3A,WGM30);
    1418:	8c 91       	ld	r24, X
    141a:	8e 7f       	andi	r24, 0xFE	; 254
    141c:	8c 93       	st	X, r24

	//Set to toggle (debugging)
	clear(TCCR3A,COM3A1);
    141e:	8c 91       	ld	r24, X
    1420:	8f 77       	andi	r24, 0x7F	; 127
    1422:	8c 93       	st	X, r24
	set(TCCR3A,COM3A0);
    1424:	8c 91       	ld	r24, X
    1426:	80 64       	ori	r24, 0x40	; 64
    1428:	8c 93       	st	X, r24
	
	//Demask OCR3A interrupt
	set(TIMSK3,OCIE3A);
    142a:	a1 e7       	ldi	r26, 0x71	; 113
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	8c 91       	ld	r24, X
    1430:	82 60       	ori	r24, 0x02	; 2
    1432:	8c 93       	st	X, r24

	//Set timer prescaler to /1024
	set(TCCR3B,CS32);
    1434:	80 81       	ld	r24, Z
    1436:	84 60       	ori	r24, 0x04	; 4
    1438:	80 83       	st	Z, r24
	clear(TCCR3B,CS31);
    143a:	80 81       	ld	r24, Z
    143c:	8d 7f       	andi	r24, 0xFD	; 253
    143e:	80 83       	st	Z, r24
	set(TCCR3B,CS30);
    1440:	80 81       	ld	r24, Z
    1442:	81 60       	ori	r24, 0x01	; 1
    1444:	80 83       	st	Z, r24
    1446:	08 95       	ret

00001448 <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	cd b7       	in	r28, 0x3d	; 61
    144e:	de b7       	in	r29, 0x3e	; 62
    1450:	af 97       	sbiw	r28, 0x2f	; 47
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
	//Variable declaration
	unsigned char wii_OK = 0;
	unsigned char localize_OK = 0;
	
	unsigned char state [PACKET_LENGTH] = {0}; //State(1): [0] identification, [1] current state
	signed char position [PACKET_LENGTH] = {0}; // Position(2): [0] identification,[1] x int,[2] x decimal,[3] y int,[4] y decimal, 
    145c:	fe 01       	movw	r30, r28
    145e:	31 96       	adiw	r30, 0x01	; 1
    1460:	81 e1       	ldi	r24, 0x11	; 17
    1462:	df 01       	movw	r26, r30
    1464:	1d 92       	st	X+, r1
    1466:	8a 95       	dec	r24
    1468:	e9 f7       	brne	.-6      	; 0x1464 <main+0x1c>
												   //[0+i+4] 2nd y (i=1...4)
	unsigned char counter_solenoid [PACKET_LENGTH] = {0}; //Counts how many times the solenoid has been shooted(5): [0] identification, [1] current count
	unsigned char battery_ind [PACKET_LENGTH] =  {0}; //Battery indicator in % (6): [0] identification, [1] current value
	unsigned char general_vars [PACKET_LENGTH] = {0}; //General vars(7): [0] identification,[1] current value (i=1,2...) 
	unsigned int blobs_wii[SIZE_ARRAY_BLOBS]; //Variable for the wii cam blobs
	int x_robot = 0, y_robot = 0, theta_robot = 0, theta_aux = -400;
    146a:	1b a6       	std	Y+43, r1	; 0x2b
    146c:	1a a6       	std	Y+42, r1	; 0x2a
    146e:	1d a6       	std	Y+45, r1	; 0x2d
    1470:	1c a6       	std	Y+44, r1	; 0x2c
    1472:	1f a6       	std	Y+47, r1	; 0x2f
    1474:	1e a6       	std	Y+46, r1	; 0x2e
		
	//Set the clock system prescaler
	m_clockdivide(N_CLOCK);
    1476:	e1 e6       	ldi	r30, 0x61	; 97
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 e8       	ldi	r24, 0x80	; 128
    147c:	80 83       	st	Z, r24
    147e:	81 e0       	ldi	r24, 0x01	; 1
    1480:	80 83       	st	Z, r24
	
	//Turn off the LEDs
	m_green(OFF);
    1482:	6a 9a       	sbi	0x0d, 2	; 13
    1484:	72 9a       	sbi	0x0e, 2	; 14
	m_red(OFF);
    1486:	6e 9a       	sbi	0x0d, 6	; 13
    1488:	76 9a       	sbi	0x0e, 6	; 14

	//Initialize bus
	m_bus_init();
    148a:	0e 94 4a 07 	call	0xe94	; 0xe94 <m_bus_init>
	
	//Set timer to every 0.05 s (20 Hz)
	set_timer3();
    148e:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <set_timer3>
	
	//Initialize wii camera
	char aux = 0;
	while(!aux)
	{
		aux = m_wii_open();
    1492:	0e 94 f5 08 	call	0x11ea	; 0x11ea <m_wii_open>
	//Set the ADC
	//init_analog();
	
	//Initialize wii camera
	char aux = 0;
	while(!aux)
    1496:	88 23       	and	r24, r24
    1498:	e1 f3       	breq	.-8      	; 0x1492 <main+0x4a>
	{
		aux = m_wii_open();
	}
	
	m_green(ON);
    149a:	6a 9a       	sbi	0x0d, 2	; 13
    149c:	72 98       	cbi	0x0e, 2	; 14
    149e:	bf e3       	ldi	r27, 0x3F	; 63
    14a0:	2d e0       	ldi	r18, 0x0D	; 13
    14a2:	83 e0       	ldi	r24, 0x03	; 3
    14a4:	b1 50       	subi	r27, 0x01	; 1
    14a6:	20 40       	sbci	r18, 0x00	; 0
    14a8:	80 40       	sbci	r24, 0x00	; 0
    14aa:	e1 f7       	brne	.-8      	; 0x14a4 <main+0x5c>
    14ac:	00 c0       	rjmp	.+0      	; 0x14ae <main+0x66>
    14ae:	00 00       	nop
	m_wait(1000);
	m_green(OFF);
    14b0:	6a 9a       	sbi	0x0d, 2	; 13
    14b2:	72 9a       	sbi	0x0e, 2	; 14
		
	//Open the channel
	m_rf_open(CHANNEL,REC_ADDRESS_AUX,PACKET_LENGTH);
    14b4:	41 e1       	ldi	r20, 0x11	; 17
    14b6:	69 e4       	ldi	r22, 0x49	; 73
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <m_rf_open>
	
	//Enable interruptions
	sei();
    14be:	78 94       	sei
	while (1)
	{
		wii_OK = m_wii_read(blobs_wii);
		if (wii_OK)
		{
			localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot);
    14c0:	2e 01       	movw	r4, r28
    14c2:	9e e2       	ldi	r25, 0x2E	; 46
    14c4:	49 0e       	add	r4, r25
    14c6:	51 1c       	adc	r5, r1
    14c8:	3e 01       	movw	r6, r28
    14ca:	ac e2       	ldi	r26, 0x2C	; 44
    14cc:	6a 0e       	add	r6, r26
    14ce:	71 1c       	adc	r7, r1
				x_robot = -110;
				y_robot = 70;
				theta_robot = 765;
				
			}else
				m_green(TOGGLE);
    14d0:	68 94       	set
    14d2:	33 24       	eor	r3, r3
    14d4:	32 f8       	bld	r3, 2
		if (wii_OK)
		{
			localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot);
			if (!localize_OK)
			{
				m_red(TOGGLE);
    14d6:	68 94       	set
    14d8:	22 24       	eor	r2, r2
    14da:	26 f8       	bld	r2, 6
	sei();
	
	//Main loop
	while (1)
	{
		wii_OK = m_wii_read(blobs_wii);
    14dc:	ce 01       	movw	r24, r28
    14de:	42 96       	adiw	r24, 0x12	; 18
    14e0:	0e 94 60 08 	call	0x10c0	; 0x10c0 <m_wii_read>
		if (wii_OK)
    14e4:	88 23       	and	r24, r24
    14e6:	c1 f1       	breq	.+112    	; 0x1558 <main+0x110>
		{
			localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot);
    14e8:	ae a0       	ldd	r10, Y+38	; 0x26
    14ea:	bf a0       	ldd	r11, Y+39	; 0x27
    14ec:	c8 a0       	ldd	r12, Y+32	; 0x20
    14ee:	d9 a0       	ldd	r13, Y+33	; 0x21
    14f0:	ea 8c       	ldd	r14, Y+26	; 0x1a
    14f2:	fb 8c       	ldd	r15, Y+27	; 0x1b
    14f4:	0c 89       	ldd	r16, Y+20	; 0x14
    14f6:	1d 89       	ldd	r17, Y+21	; 0x15
    14f8:	2c a1       	ldd	r18, Y+36	; 0x24
    14fa:	3d a1       	ldd	r19, Y+37	; 0x25
    14fc:	4e 8d       	ldd	r20, Y+30	; 0x1e
    14fe:	5f 8d       	ldd	r21, Y+31	; 0x1f
    1500:	68 8d       	ldd	r22, Y+24	; 0x18
    1502:	79 8d       	ldd	r23, Y+25	; 0x19
    1504:	5f 92       	push	r5
    1506:	4f 92       	push	r4
    1508:	7f 92       	push	r7
    150a:	6f 92       	push	r6
    150c:	0f 2e       	mov	r0, r31
    150e:	fa e2       	ldi	r31, 0x2A	; 42
    1510:	8f 2e       	mov	r8, r31
    1512:	91 2c       	mov	r9, r1
    1514:	f0 2d       	mov	r31, r0
    1516:	8c 0e       	add	r8, r28
    1518:	9d 1e       	adc	r9, r29
    151a:	8a 89       	ldd	r24, Y+18	; 0x12
    151c:	9b 89       	ldd	r25, Y+19	; 0x13
    151e:	0e 94 9b 00 	call	0x136	; 0x136 <localize>
			if (!localize_OK)
    1522:	0f 90       	pop	r0
    1524:	0f 90       	pop	r0
    1526:	0f 90       	pop	r0
    1528:	0f 90       	pop	r0
    152a:	81 11       	cpse	r24, r1
    152c:	11 c0       	rjmp	.+34     	; 0x1550 <main+0x108>
			{
				m_red(TOGGLE);
    152e:	6e 9a       	sbi	0x0d, 6	; 13
    1530:	8e b1       	in	r24, 0x0e	; 14
    1532:	82 25       	eor	r24, r2
    1534:	8e b9       	out	0x0e, r24	; 14
				x_robot = -110;
    1536:	82 e9       	ldi	r24, 0x92	; 146
    1538:	9f ef       	ldi	r25, 0xFF	; 255
    153a:	9b a7       	std	Y+43, r25	; 0x2b
    153c:	8a a7       	std	Y+42, r24	; 0x2a
				y_robot = 70;
    153e:	a6 e4       	ldi	r26, 0x46	; 70
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	bd a7       	std	Y+45, r27	; 0x2d
    1544:	ac a7       	std	Y+44, r26	; 0x2c
				theta_robot = 765;
    1546:	8d ef       	ldi	r24, 0xFD	; 253
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	9f a7       	std	Y+47, r25	; 0x2f
    154c:	8e a7       	std	Y+46, r24	; 0x2e
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <main+0x10a>
				
			}else
				m_green(TOGGLE);
    1550:	6a 9a       	sbi	0x0d, 2	; 13
    1552:	8e b1       	in	r24, 0x0e	; 14
    1554:	83 25       	eor	r24, r3
    1556:	8e b9       	out	0x0e, r24	; 14
		}
		
		//Send commands
		if (flag_timer == 1)
    1558:	80 91 2c 01 	lds	r24, 0x012C
    155c:	90 91 2d 01 	lds	r25, 0x012D
    1560:	01 97       	sbiw	r24, 0x01	; 1
    1562:	09 f0       	breq	.+2      	; 0x1566 <main+0x11e>
    1564:	bb cf       	rjmp	.-138    	; 0x14dc <main+0x94>
		{
			position[0] = 2;
    1566:	92 e0       	ldi	r25, 0x02	; 2
    1568:	99 83       	std	Y+1, r25	; 0x01
			position[1] = (signed char) x_robot;
    156a:	8a a5       	ldd	r24, Y+42	; 0x2a
    156c:	8a 83       	std	Y+2, r24	; 0x02
			position[2] = (signed char) y_robot;
    156e:	8c a5       	ldd	r24, Y+44	; 0x2c
    1570:	8b 83       	std	Y+3, r24	; 0x03
			div_t aux = div(theta_robot,128);
    1572:	60 e8       	ldi	r22, 0x80	; 128
    1574:	70 e0       	ldi	r23, 0x00	; 0
    1576:	8e a5       	ldd	r24, Y+46	; 0x2e
    1578:	9f a5       	ldd	r25, Y+47	; 0x2f
    157a:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <__divmodhi4>
			//div_t aux = div(theta_aux,128);
			//theta_aux += 10;
			position[3] = (signed char)aux.quot;
    157e:	6c 83       	std	Y+4, r22	; 0x04
			position[4] = (signed char)aux.rem;
    1580:	8d 83       	std	Y+5, r24	; 0x05
			
			m_rf_send(SEN_ADDRESS,position,PACKET_LENGTH);
    1582:	41 e1       	ldi	r20, 0x11	; 17
    1584:	be 01       	movw	r22, r28
    1586:	6f 5f       	subi	r22, 0xFF	; 255
    1588:	7f 4f       	sbci	r23, 0xFF	; 255
    158a:	87 e4       	ldi	r24, 0x47	; 71
    158c:	0e 94 b1 07 	call	0xf62	; 0xf62 <m_rf_send>
				
			//Reset flag
			flag_timer = 0;
    1590:	10 92 2d 01 	sts	0x012D, r1
    1594:	10 92 2c 01 	sts	0x012C, r1
			m_red(OFF);
    1598:	6e 9a       	sbi	0x0d, 6	; 13
    159a:	76 9a       	sbi	0x0e, 6	; 14
    159c:	9f cf       	rjmp	.-194    	; 0x14dc <main+0x94>

0000159e <__vector_32>:
	clear(TCCR3B,CS31);
	set(TCCR3B,CS30);
}

ISR(TIMER3_COMPA_vect)
{
    159e:	1f 92       	push	r1
    15a0:	0f 92       	push	r0
    15a2:	0f b6       	in	r0, 0x3f	; 63
    15a4:	0f 92       	push	r0
    15a6:	11 24       	eor	r1, r1
    15a8:	8f 93       	push	r24
    15aa:	9f 93       	push	r25
	//m_red(ON);
	flag_timer = 1;
    15ac:	81 e0       	ldi	r24, 0x01	; 1
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	90 93 2d 01 	sts	0x012D, r25
    15b4:	80 93 2c 01 	sts	0x012C, r24
}
    15b8:	9f 91       	pop	r25
    15ba:	8f 91       	pop	r24
    15bc:	0f 90       	pop	r0
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	0f 90       	pop	r0
    15c2:	1f 90       	pop	r1
    15c4:	18 95       	reti

000015c6 <__subsf3>:
    15c6:	50 58       	subi	r21, 0x80	; 128

000015c8 <__addsf3>:
    15c8:	bb 27       	eor	r27, r27
    15ca:	aa 27       	eor	r26, r26
    15cc:	0e d0       	rcall	.+28     	; 0x15ea <__addsf3x>
    15ce:	27 c2       	rjmp	.+1102   	; 0x1a1e <__fp_round>
    15d0:	f0 d1       	rcall	.+992    	; 0x19b2 <__fp_pscA>
    15d2:	30 f0       	brcs	.+12     	; 0x15e0 <__addsf3+0x18>
    15d4:	f5 d1       	rcall	.+1002   	; 0x19c0 <__fp_pscB>
    15d6:	20 f0       	brcs	.+8      	; 0x15e0 <__addsf3+0x18>
    15d8:	31 f4       	brne	.+12     	; 0x15e6 <__addsf3+0x1e>
    15da:	9f 3f       	cpi	r25, 0xFF	; 255
    15dc:	11 f4       	brne	.+4      	; 0x15e2 <__addsf3+0x1a>
    15de:	1e f4       	brtc	.+6      	; 0x15e6 <__addsf3+0x1e>
    15e0:	c0 c1       	rjmp	.+896    	; 0x1962 <__fp_nan>
    15e2:	0e f4       	brtc	.+2      	; 0x15e6 <__addsf3+0x1e>
    15e4:	e0 95       	com	r30
    15e6:	e7 fb       	bst	r30, 7
    15e8:	b6 c1       	rjmp	.+876    	; 0x1956 <__fp_inf>

000015ea <__addsf3x>:
    15ea:	e9 2f       	mov	r30, r25
    15ec:	3a d2       	rcall	.+1140   	; 0x1a62 <__fp_split3>
    15ee:	80 f3       	brcs	.-32     	; 0x15d0 <__addsf3+0x8>
    15f0:	ba 17       	cp	r27, r26
    15f2:	62 07       	cpc	r22, r18
    15f4:	73 07       	cpc	r23, r19
    15f6:	84 07       	cpc	r24, r20
    15f8:	95 07       	cpc	r25, r21
    15fa:	18 f0       	brcs	.+6      	; 0x1602 <__addsf3x+0x18>
    15fc:	71 f4       	brne	.+28     	; 0x161a <__addsf3x+0x30>
    15fe:	9e f5       	brtc	.+102    	; 0x1666 <__addsf3x+0x7c>
    1600:	52 c2       	rjmp	.+1188   	; 0x1aa6 <__fp_zero>
    1602:	0e f4       	brtc	.+2      	; 0x1606 <__addsf3x+0x1c>
    1604:	e0 95       	com	r30
    1606:	0b 2e       	mov	r0, r27
    1608:	ba 2f       	mov	r27, r26
    160a:	a0 2d       	mov	r26, r0
    160c:	0b 01       	movw	r0, r22
    160e:	b9 01       	movw	r22, r18
    1610:	90 01       	movw	r18, r0
    1612:	0c 01       	movw	r0, r24
    1614:	ca 01       	movw	r24, r20
    1616:	a0 01       	movw	r20, r0
    1618:	11 24       	eor	r1, r1
    161a:	ff 27       	eor	r31, r31
    161c:	59 1b       	sub	r21, r25
    161e:	99 f0       	breq	.+38     	; 0x1646 <__addsf3x+0x5c>
    1620:	59 3f       	cpi	r21, 0xF9	; 249
    1622:	50 f4       	brcc	.+20     	; 0x1638 <__addsf3x+0x4e>
    1624:	50 3e       	cpi	r21, 0xE0	; 224
    1626:	68 f1       	brcs	.+90     	; 0x1682 <__addsf3x+0x98>
    1628:	1a 16       	cp	r1, r26
    162a:	f0 40       	sbci	r31, 0x00	; 0
    162c:	a2 2f       	mov	r26, r18
    162e:	23 2f       	mov	r18, r19
    1630:	34 2f       	mov	r19, r20
    1632:	44 27       	eor	r20, r20
    1634:	58 5f       	subi	r21, 0xF8	; 248
    1636:	f3 cf       	rjmp	.-26     	; 0x161e <__addsf3x+0x34>
    1638:	46 95       	lsr	r20
    163a:	37 95       	ror	r19
    163c:	27 95       	ror	r18
    163e:	a7 95       	ror	r26
    1640:	f0 40       	sbci	r31, 0x00	; 0
    1642:	53 95       	inc	r21
    1644:	c9 f7       	brne	.-14     	; 0x1638 <__addsf3x+0x4e>
    1646:	7e f4       	brtc	.+30     	; 0x1666 <__addsf3x+0x7c>
    1648:	1f 16       	cp	r1, r31
    164a:	ba 0b       	sbc	r27, r26
    164c:	62 0b       	sbc	r22, r18
    164e:	73 0b       	sbc	r23, r19
    1650:	84 0b       	sbc	r24, r20
    1652:	ba f0       	brmi	.+46     	; 0x1682 <__addsf3x+0x98>
    1654:	91 50       	subi	r25, 0x01	; 1
    1656:	a1 f0       	breq	.+40     	; 0x1680 <__addsf3x+0x96>
    1658:	ff 0f       	add	r31, r31
    165a:	bb 1f       	adc	r27, r27
    165c:	66 1f       	adc	r22, r22
    165e:	77 1f       	adc	r23, r23
    1660:	88 1f       	adc	r24, r24
    1662:	c2 f7       	brpl	.-16     	; 0x1654 <__addsf3x+0x6a>
    1664:	0e c0       	rjmp	.+28     	; 0x1682 <__addsf3x+0x98>
    1666:	ba 0f       	add	r27, r26
    1668:	62 1f       	adc	r22, r18
    166a:	73 1f       	adc	r23, r19
    166c:	84 1f       	adc	r24, r20
    166e:	48 f4       	brcc	.+18     	; 0x1682 <__addsf3x+0x98>
    1670:	87 95       	ror	r24
    1672:	77 95       	ror	r23
    1674:	67 95       	ror	r22
    1676:	b7 95       	ror	r27
    1678:	f7 95       	ror	r31
    167a:	9e 3f       	cpi	r25, 0xFE	; 254
    167c:	08 f0       	brcs	.+2      	; 0x1680 <__addsf3x+0x96>
    167e:	b3 cf       	rjmp	.-154    	; 0x15e6 <__addsf3+0x1e>
    1680:	93 95       	inc	r25
    1682:	88 0f       	add	r24, r24
    1684:	08 f0       	brcs	.+2      	; 0x1688 <__addsf3x+0x9e>
    1686:	99 27       	eor	r25, r25
    1688:	ee 0f       	add	r30, r30
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	08 95       	ret
    1690:	90 d1       	rcall	.+800    	; 0x19b2 <__fp_pscA>
    1692:	58 f0       	brcs	.+22     	; 0x16aa <__addsf3x+0xc0>
    1694:	80 e8       	ldi	r24, 0x80	; 128
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	09 f4       	brne	.+2      	; 0x169c <__addsf3x+0xb2>
    169a:	9e ef       	ldi	r25, 0xFE	; 254
    169c:	91 d1       	rcall	.+802    	; 0x19c0 <__fp_pscB>
    169e:	28 f0       	brcs	.+10     	; 0x16aa <__addsf3x+0xc0>
    16a0:	40 e8       	ldi	r20, 0x80	; 128
    16a2:	51 e0       	ldi	r21, 0x01	; 1
    16a4:	59 f4       	brne	.+22     	; 0x16bc <atan2+0xe>
    16a6:	5e ef       	ldi	r21, 0xFE	; 254
    16a8:	09 c0       	rjmp	.+18     	; 0x16bc <atan2+0xe>
    16aa:	5b c1       	rjmp	.+694    	; 0x1962 <__fp_nan>
    16ac:	fc c1       	rjmp	.+1016   	; 0x1aa6 <__fp_zero>

000016ae <atan2>:
    16ae:	e9 2f       	mov	r30, r25
    16b0:	e0 78       	andi	r30, 0x80	; 128
    16b2:	d7 d1       	rcall	.+942    	; 0x1a62 <__fp_split3>
    16b4:	68 f3       	brcs	.-38     	; 0x1690 <__addsf3x+0xa6>
    16b6:	09 2e       	mov	r0, r25
    16b8:	05 2a       	or	r0, r21
    16ba:	c1 f3       	breq	.-16     	; 0x16ac <__addsf3x+0xc2>
    16bc:	26 17       	cp	r18, r22
    16be:	37 07       	cpc	r19, r23
    16c0:	48 07       	cpc	r20, r24
    16c2:	59 07       	cpc	r21, r25
    16c4:	38 f0       	brcs	.+14     	; 0x16d4 <atan2+0x26>
    16c6:	0e 2e       	mov	r0, r30
    16c8:	07 f8       	bld	r0, 7
    16ca:	e0 25       	eor	r30, r0
    16cc:	69 f0       	breq	.+26     	; 0x16e8 <atan2+0x3a>
    16ce:	e0 25       	eor	r30, r0
    16d0:	e0 64       	ori	r30, 0x40	; 64
    16d2:	0a c0       	rjmp	.+20     	; 0x16e8 <atan2+0x3a>
    16d4:	ef 63       	ori	r30, 0x3F	; 63
    16d6:	07 f8       	bld	r0, 7
    16d8:	00 94       	com	r0
    16da:	07 fa       	bst	r0, 7
    16dc:	db 01       	movw	r26, r22
    16de:	b9 01       	movw	r22, r18
    16e0:	9d 01       	movw	r18, r26
    16e2:	dc 01       	movw	r26, r24
    16e4:	ca 01       	movw	r24, r20
    16e6:	ad 01       	movw	r20, r26
    16e8:	ef 93       	push	r30
    16ea:	4a d0       	rcall	.+148    	; 0x1780 <__divsf3_pse>
    16ec:	98 d1       	rcall	.+816    	; 0x1a1e <__fp_round>
    16ee:	0a d0       	rcall	.+20     	; 0x1704 <atan>
    16f0:	5f 91       	pop	r21
    16f2:	55 23       	and	r21, r21
    16f4:	31 f0       	breq	.+12     	; 0x1702 <atan2+0x54>
    16f6:	2b ed       	ldi	r18, 0xDB	; 219
    16f8:	3f e0       	ldi	r19, 0x0F	; 15
    16fa:	49 e4       	ldi	r20, 0x49	; 73
    16fc:	50 fd       	sbrc	r21, 0
    16fe:	49 ec       	ldi	r20, 0xC9	; 201
    1700:	63 cf       	rjmp	.-314    	; 0x15c8 <__addsf3>
    1702:	08 95       	ret

00001704 <atan>:
    1704:	df 93       	push	r29
    1706:	dd 27       	eor	r29, r29
    1708:	b9 2f       	mov	r27, r25
    170a:	bf 77       	andi	r27, 0x7F	; 127
    170c:	40 e8       	ldi	r20, 0x80	; 128
    170e:	5f e3       	ldi	r21, 0x3F	; 63
    1710:	16 16       	cp	r1, r22
    1712:	17 06       	cpc	r1, r23
    1714:	48 07       	cpc	r20, r24
    1716:	5b 07       	cpc	r21, r27
    1718:	10 f4       	brcc	.+4      	; 0x171e <atan+0x1a>
    171a:	d9 2f       	mov	r29, r25
    171c:	cf d1       	rcall	.+926    	; 0x1abc <inverse>
    171e:	9f 93       	push	r25
    1720:	8f 93       	push	r24
    1722:	7f 93       	push	r23
    1724:	6f 93       	push	r22
    1726:	7c d2       	rcall	.+1272   	; 0x1c20 <square>
    1728:	ec ea       	ldi	r30, 0xAC	; 172
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	1d d1       	rcall	.+570    	; 0x1968 <__fp_powser>
    172e:	77 d1       	rcall	.+750    	; 0x1a1e <__fp_round>
    1730:	2f 91       	pop	r18
    1732:	3f 91       	pop	r19
    1734:	4f 91       	pop	r20
    1736:	5f 91       	pop	r21
    1738:	d4 d1       	rcall	.+936    	; 0x1ae2 <__mulsf3x>
    173a:	dd 23       	and	r29, r29
    173c:	49 f0       	breq	.+18     	; 0x1750 <atan+0x4c>
    173e:	90 58       	subi	r25, 0x80	; 128
    1740:	a2 ea       	ldi	r26, 0xA2	; 162
    1742:	2a ed       	ldi	r18, 0xDA	; 218
    1744:	3f e0       	ldi	r19, 0x0F	; 15
    1746:	49 ec       	ldi	r20, 0xC9	; 201
    1748:	5f e3       	ldi	r21, 0x3F	; 63
    174a:	d0 78       	andi	r29, 0x80	; 128
    174c:	5d 27       	eor	r21, r29
    174e:	4d df       	rcall	.-358    	; 0x15ea <__addsf3x>
    1750:	df 91       	pop	r29
    1752:	65 c1       	rjmp	.+714    	; 0x1a1e <__fp_round>

00001754 <__cmpsf2>:
    1754:	dc d0       	rcall	.+440    	; 0x190e <__fp_cmp>
    1756:	08 f4       	brcc	.+2      	; 0x175a <__cmpsf2+0x6>
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	08 95       	ret

0000175c <cos>:
    175c:	39 d1       	rcall	.+626    	; 0x19d0 <__fp_rempio2>
    175e:	e3 95       	inc	r30
    1760:	6f c1       	rjmp	.+734    	; 0x1a40 <__fp_sinus>

00001762 <__divsf3>:
    1762:	0c d0       	rcall	.+24     	; 0x177c <__divsf3x>
    1764:	5c c1       	rjmp	.+696    	; 0x1a1e <__fp_round>
    1766:	2c d1       	rcall	.+600    	; 0x19c0 <__fp_pscB>
    1768:	40 f0       	brcs	.+16     	; 0x177a <__divsf3+0x18>
    176a:	23 d1       	rcall	.+582    	; 0x19b2 <__fp_pscA>
    176c:	30 f0       	brcs	.+12     	; 0x177a <__divsf3+0x18>
    176e:	21 f4       	brne	.+8      	; 0x1778 <__divsf3+0x16>
    1770:	5f 3f       	cpi	r21, 0xFF	; 255
    1772:	19 f0       	breq	.+6      	; 0x177a <__divsf3+0x18>
    1774:	f0 c0       	rjmp	.+480    	; 0x1956 <__fp_inf>
    1776:	51 11       	cpse	r21, r1
    1778:	97 c1       	rjmp	.+814    	; 0x1aa8 <__fp_szero>
    177a:	f3 c0       	rjmp	.+486    	; 0x1962 <__fp_nan>

0000177c <__divsf3x>:
    177c:	72 d1       	rcall	.+740    	; 0x1a62 <__fp_split3>
    177e:	98 f3       	brcs	.-26     	; 0x1766 <__divsf3+0x4>

00001780 <__divsf3_pse>:
    1780:	99 23       	and	r25, r25
    1782:	c9 f3       	breq	.-14     	; 0x1776 <__divsf3+0x14>
    1784:	55 23       	and	r21, r21
    1786:	b1 f3       	breq	.-20     	; 0x1774 <__divsf3+0x12>
    1788:	95 1b       	sub	r25, r21
    178a:	55 0b       	sbc	r21, r21
    178c:	bb 27       	eor	r27, r27
    178e:	aa 27       	eor	r26, r26
    1790:	62 17       	cp	r22, r18
    1792:	73 07       	cpc	r23, r19
    1794:	84 07       	cpc	r24, r20
    1796:	38 f0       	brcs	.+14     	; 0x17a6 <__divsf3_pse+0x26>
    1798:	9f 5f       	subi	r25, 0xFF	; 255
    179a:	5f 4f       	sbci	r21, 0xFF	; 255
    179c:	22 0f       	add	r18, r18
    179e:	33 1f       	adc	r19, r19
    17a0:	44 1f       	adc	r20, r20
    17a2:	aa 1f       	adc	r26, r26
    17a4:	a9 f3       	breq	.-22     	; 0x1790 <__divsf3_pse+0x10>
    17a6:	33 d0       	rcall	.+102    	; 0x180e <__divsf3_pse+0x8e>
    17a8:	0e 2e       	mov	r0, r30
    17aa:	3a f0       	brmi	.+14     	; 0x17ba <__divsf3_pse+0x3a>
    17ac:	e0 e8       	ldi	r30, 0x80	; 128
    17ae:	30 d0       	rcall	.+96     	; 0x1810 <__divsf3_pse+0x90>
    17b0:	91 50       	subi	r25, 0x01	; 1
    17b2:	50 40       	sbci	r21, 0x00	; 0
    17b4:	e6 95       	lsr	r30
    17b6:	00 1c       	adc	r0, r0
    17b8:	ca f7       	brpl	.-14     	; 0x17ac <__divsf3_pse+0x2c>
    17ba:	29 d0       	rcall	.+82     	; 0x180e <__divsf3_pse+0x8e>
    17bc:	fe 2f       	mov	r31, r30
    17be:	27 d0       	rcall	.+78     	; 0x180e <__divsf3_pse+0x8e>
    17c0:	66 0f       	add	r22, r22
    17c2:	77 1f       	adc	r23, r23
    17c4:	88 1f       	adc	r24, r24
    17c6:	bb 1f       	adc	r27, r27
    17c8:	26 17       	cp	r18, r22
    17ca:	37 07       	cpc	r19, r23
    17cc:	48 07       	cpc	r20, r24
    17ce:	ab 07       	cpc	r26, r27
    17d0:	b0 e8       	ldi	r27, 0x80	; 128
    17d2:	09 f0       	breq	.+2      	; 0x17d6 <__divsf3_pse+0x56>
    17d4:	bb 0b       	sbc	r27, r27
    17d6:	80 2d       	mov	r24, r0
    17d8:	bf 01       	movw	r22, r30
    17da:	ff 27       	eor	r31, r31
    17dc:	93 58       	subi	r25, 0x83	; 131
    17de:	5f 4f       	sbci	r21, 0xFF	; 255
    17e0:	2a f0       	brmi	.+10     	; 0x17ec <__divsf3_pse+0x6c>
    17e2:	9e 3f       	cpi	r25, 0xFE	; 254
    17e4:	51 05       	cpc	r21, r1
    17e6:	68 f0       	brcs	.+26     	; 0x1802 <__divsf3_pse+0x82>
    17e8:	b6 c0       	rjmp	.+364    	; 0x1956 <__fp_inf>
    17ea:	5e c1       	rjmp	.+700    	; 0x1aa8 <__fp_szero>
    17ec:	5f 3f       	cpi	r21, 0xFF	; 255
    17ee:	ec f3       	brlt	.-6      	; 0x17ea <__divsf3_pse+0x6a>
    17f0:	98 3e       	cpi	r25, 0xE8	; 232
    17f2:	dc f3       	brlt	.-10     	; 0x17ea <__divsf3_pse+0x6a>
    17f4:	86 95       	lsr	r24
    17f6:	77 95       	ror	r23
    17f8:	67 95       	ror	r22
    17fa:	b7 95       	ror	r27
    17fc:	f7 95       	ror	r31
    17fe:	9f 5f       	subi	r25, 0xFF	; 255
    1800:	c9 f7       	brne	.-14     	; 0x17f4 <__divsf3_pse+0x74>
    1802:	88 0f       	add	r24, r24
    1804:	91 1d       	adc	r25, r1
    1806:	96 95       	lsr	r25
    1808:	87 95       	ror	r24
    180a:	97 f9       	bld	r25, 7
    180c:	08 95       	ret
    180e:	e1 e0       	ldi	r30, 0x01	; 1
    1810:	66 0f       	add	r22, r22
    1812:	77 1f       	adc	r23, r23
    1814:	88 1f       	adc	r24, r24
    1816:	bb 1f       	adc	r27, r27
    1818:	62 17       	cp	r22, r18
    181a:	73 07       	cpc	r23, r19
    181c:	84 07       	cpc	r24, r20
    181e:	ba 07       	cpc	r27, r26
    1820:	20 f0       	brcs	.+8      	; 0x182a <__divsf3_pse+0xaa>
    1822:	62 1b       	sub	r22, r18
    1824:	73 0b       	sbc	r23, r19
    1826:	84 0b       	sbc	r24, r20
    1828:	ba 0b       	sbc	r27, r26
    182a:	ee 1f       	adc	r30, r30
    182c:	88 f7       	brcc	.-30     	; 0x1810 <__divsf3_pse+0x90>
    182e:	e0 95       	com	r30
    1830:	08 95       	ret

00001832 <__fixsfsi>:
    1832:	04 d0       	rcall	.+8      	; 0x183c <__fixunssfsi>
    1834:	68 94       	set
    1836:	b1 11       	cpse	r27, r1
    1838:	37 c1       	rjmp	.+622    	; 0x1aa8 <__fp_szero>
    183a:	08 95       	ret

0000183c <__fixunssfsi>:
    183c:	1a d1       	rcall	.+564    	; 0x1a72 <__fp_splitA>
    183e:	88 f0       	brcs	.+34     	; 0x1862 <__fixunssfsi+0x26>
    1840:	9f 57       	subi	r25, 0x7F	; 127
    1842:	90 f0       	brcs	.+36     	; 0x1868 <__fixunssfsi+0x2c>
    1844:	b9 2f       	mov	r27, r25
    1846:	99 27       	eor	r25, r25
    1848:	b7 51       	subi	r27, 0x17	; 23
    184a:	a0 f0       	brcs	.+40     	; 0x1874 <__fixunssfsi+0x38>
    184c:	d1 f0       	breq	.+52     	; 0x1882 <__fixunssfsi+0x46>
    184e:	66 0f       	add	r22, r22
    1850:	77 1f       	adc	r23, r23
    1852:	88 1f       	adc	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	1a f0       	brmi	.+6      	; 0x185e <__fixunssfsi+0x22>
    1858:	ba 95       	dec	r27
    185a:	c9 f7       	brne	.-14     	; 0x184e <__fixunssfsi+0x12>
    185c:	12 c0       	rjmp	.+36     	; 0x1882 <__fixunssfsi+0x46>
    185e:	b1 30       	cpi	r27, 0x01	; 1
    1860:	81 f0       	breq	.+32     	; 0x1882 <__fixunssfsi+0x46>
    1862:	21 d1       	rcall	.+578    	; 0x1aa6 <__fp_zero>
    1864:	b1 e0       	ldi	r27, 0x01	; 1
    1866:	08 95       	ret
    1868:	1e c1       	rjmp	.+572    	; 0x1aa6 <__fp_zero>
    186a:	67 2f       	mov	r22, r23
    186c:	78 2f       	mov	r23, r24
    186e:	88 27       	eor	r24, r24
    1870:	b8 5f       	subi	r27, 0xF8	; 248
    1872:	39 f0       	breq	.+14     	; 0x1882 <__fixunssfsi+0x46>
    1874:	b9 3f       	cpi	r27, 0xF9	; 249
    1876:	cc f3       	brlt	.-14     	; 0x186a <__fixunssfsi+0x2e>
    1878:	86 95       	lsr	r24
    187a:	77 95       	ror	r23
    187c:	67 95       	ror	r22
    187e:	b3 95       	inc	r27
    1880:	d9 f7       	brne	.-10     	; 0x1878 <__fixunssfsi+0x3c>
    1882:	3e f4       	brtc	.+14     	; 0x1892 <__fixunssfsi+0x56>
    1884:	90 95       	com	r25
    1886:	80 95       	com	r24
    1888:	70 95       	com	r23
    188a:	61 95       	neg	r22
    188c:	7f 4f       	sbci	r23, 0xFF	; 255
    188e:	8f 4f       	sbci	r24, 0xFF	; 255
    1890:	9f 4f       	sbci	r25, 0xFF	; 255
    1892:	08 95       	ret

00001894 <__floatunsisf>:
    1894:	e8 94       	clt
    1896:	09 c0       	rjmp	.+18     	; 0x18aa <__floatsisf+0x12>

00001898 <__floatsisf>:
    1898:	97 fb       	bst	r25, 7
    189a:	3e f4       	brtc	.+14     	; 0x18aa <__floatsisf+0x12>
    189c:	90 95       	com	r25
    189e:	80 95       	com	r24
    18a0:	70 95       	com	r23
    18a2:	61 95       	neg	r22
    18a4:	7f 4f       	sbci	r23, 0xFF	; 255
    18a6:	8f 4f       	sbci	r24, 0xFF	; 255
    18a8:	9f 4f       	sbci	r25, 0xFF	; 255
    18aa:	99 23       	and	r25, r25
    18ac:	a9 f0       	breq	.+42     	; 0x18d8 <__floatsisf+0x40>
    18ae:	f9 2f       	mov	r31, r25
    18b0:	96 e9       	ldi	r25, 0x96	; 150
    18b2:	bb 27       	eor	r27, r27
    18b4:	93 95       	inc	r25
    18b6:	f6 95       	lsr	r31
    18b8:	87 95       	ror	r24
    18ba:	77 95       	ror	r23
    18bc:	67 95       	ror	r22
    18be:	b7 95       	ror	r27
    18c0:	f1 11       	cpse	r31, r1
    18c2:	f8 cf       	rjmp	.-16     	; 0x18b4 <__floatsisf+0x1c>
    18c4:	fa f4       	brpl	.+62     	; 0x1904 <__floatsisf+0x6c>
    18c6:	bb 0f       	add	r27, r27
    18c8:	11 f4       	brne	.+4      	; 0x18ce <__floatsisf+0x36>
    18ca:	60 ff       	sbrs	r22, 0
    18cc:	1b c0       	rjmp	.+54     	; 0x1904 <__floatsisf+0x6c>
    18ce:	6f 5f       	subi	r22, 0xFF	; 255
    18d0:	7f 4f       	sbci	r23, 0xFF	; 255
    18d2:	8f 4f       	sbci	r24, 0xFF	; 255
    18d4:	9f 4f       	sbci	r25, 0xFF	; 255
    18d6:	16 c0       	rjmp	.+44     	; 0x1904 <__floatsisf+0x6c>
    18d8:	88 23       	and	r24, r24
    18da:	11 f0       	breq	.+4      	; 0x18e0 <__floatsisf+0x48>
    18dc:	96 e9       	ldi	r25, 0x96	; 150
    18de:	11 c0       	rjmp	.+34     	; 0x1902 <__floatsisf+0x6a>
    18e0:	77 23       	and	r23, r23
    18e2:	21 f0       	breq	.+8      	; 0x18ec <__floatsisf+0x54>
    18e4:	9e e8       	ldi	r25, 0x8E	; 142
    18e6:	87 2f       	mov	r24, r23
    18e8:	76 2f       	mov	r23, r22
    18ea:	05 c0       	rjmp	.+10     	; 0x18f6 <__floatsisf+0x5e>
    18ec:	66 23       	and	r22, r22
    18ee:	71 f0       	breq	.+28     	; 0x190c <__floatsisf+0x74>
    18f0:	96 e8       	ldi	r25, 0x86	; 134
    18f2:	86 2f       	mov	r24, r22
    18f4:	70 e0       	ldi	r23, 0x00	; 0
    18f6:	60 e0       	ldi	r22, 0x00	; 0
    18f8:	2a f0       	brmi	.+10     	; 0x1904 <__floatsisf+0x6c>
    18fa:	9a 95       	dec	r25
    18fc:	66 0f       	add	r22, r22
    18fe:	77 1f       	adc	r23, r23
    1900:	88 1f       	adc	r24, r24
    1902:	da f7       	brpl	.-10     	; 0x18fa <__floatsisf+0x62>
    1904:	88 0f       	add	r24, r24
    1906:	96 95       	lsr	r25
    1908:	87 95       	ror	r24
    190a:	97 f9       	bld	r25, 7
    190c:	08 95       	ret

0000190e <__fp_cmp>:
    190e:	99 0f       	add	r25, r25
    1910:	00 08       	sbc	r0, r0
    1912:	55 0f       	add	r21, r21
    1914:	aa 0b       	sbc	r26, r26
    1916:	e0 e8       	ldi	r30, 0x80	; 128
    1918:	fe ef       	ldi	r31, 0xFE	; 254
    191a:	16 16       	cp	r1, r22
    191c:	17 06       	cpc	r1, r23
    191e:	e8 07       	cpc	r30, r24
    1920:	f9 07       	cpc	r31, r25
    1922:	c0 f0       	brcs	.+48     	; 0x1954 <__fp_cmp+0x46>
    1924:	12 16       	cp	r1, r18
    1926:	13 06       	cpc	r1, r19
    1928:	e4 07       	cpc	r30, r20
    192a:	f5 07       	cpc	r31, r21
    192c:	98 f0       	brcs	.+38     	; 0x1954 <__fp_cmp+0x46>
    192e:	62 1b       	sub	r22, r18
    1930:	73 0b       	sbc	r23, r19
    1932:	84 0b       	sbc	r24, r20
    1934:	95 0b       	sbc	r25, r21
    1936:	39 f4       	brne	.+14     	; 0x1946 <__fp_cmp+0x38>
    1938:	0a 26       	eor	r0, r26
    193a:	61 f0       	breq	.+24     	; 0x1954 <__fp_cmp+0x46>
    193c:	23 2b       	or	r18, r19
    193e:	24 2b       	or	r18, r20
    1940:	25 2b       	or	r18, r21
    1942:	21 f4       	brne	.+8      	; 0x194c <__fp_cmp+0x3e>
    1944:	08 95       	ret
    1946:	0a 26       	eor	r0, r26
    1948:	09 f4       	brne	.+2      	; 0x194c <__fp_cmp+0x3e>
    194a:	a1 40       	sbci	r26, 0x01	; 1
    194c:	a6 95       	lsr	r26
    194e:	8f ef       	ldi	r24, 0xFF	; 255
    1950:	81 1d       	adc	r24, r1
    1952:	81 1d       	adc	r24, r1
    1954:	08 95       	ret

00001956 <__fp_inf>:
    1956:	97 f9       	bld	r25, 7
    1958:	9f 67       	ori	r25, 0x7F	; 127
    195a:	80 e8       	ldi	r24, 0x80	; 128
    195c:	70 e0       	ldi	r23, 0x00	; 0
    195e:	60 e0       	ldi	r22, 0x00	; 0
    1960:	08 95       	ret

00001962 <__fp_nan>:
    1962:	9f ef       	ldi	r25, 0xFF	; 255
    1964:	80 ec       	ldi	r24, 0xC0	; 192
    1966:	08 95       	ret

00001968 <__fp_powser>:
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	1f 93       	push	r17
    196e:	0f 93       	push	r16
    1970:	ff 92       	push	r15
    1972:	ef 92       	push	r14
    1974:	df 92       	push	r13
    1976:	7b 01       	movw	r14, r22
    1978:	8c 01       	movw	r16, r24
    197a:	68 94       	set
    197c:	05 c0       	rjmp	.+10     	; 0x1988 <__fp_powser+0x20>
    197e:	da 2e       	mov	r13, r26
    1980:	ef 01       	movw	r28, r30
    1982:	af d0       	rcall	.+350    	; 0x1ae2 <__mulsf3x>
    1984:	fe 01       	movw	r30, r28
    1986:	e8 94       	clt
    1988:	a5 91       	lpm	r26, Z+
    198a:	25 91       	lpm	r18, Z+
    198c:	35 91       	lpm	r19, Z+
    198e:	45 91       	lpm	r20, Z+
    1990:	55 91       	lpm	r21, Z+
    1992:	ae f3       	brts	.-22     	; 0x197e <__fp_powser+0x16>
    1994:	ef 01       	movw	r28, r30
    1996:	29 de       	rcall	.-942    	; 0x15ea <__addsf3x>
    1998:	fe 01       	movw	r30, r28
    199a:	97 01       	movw	r18, r14
    199c:	a8 01       	movw	r20, r16
    199e:	da 94       	dec	r13
    19a0:	79 f7       	brne	.-34     	; 0x1980 <__fp_powser+0x18>
    19a2:	df 90       	pop	r13
    19a4:	ef 90       	pop	r14
    19a6:	ff 90       	pop	r15
    19a8:	0f 91       	pop	r16
    19aa:	1f 91       	pop	r17
    19ac:	cf 91       	pop	r28
    19ae:	df 91       	pop	r29
    19b0:	08 95       	ret

000019b2 <__fp_pscA>:
    19b2:	00 24       	eor	r0, r0
    19b4:	0a 94       	dec	r0
    19b6:	16 16       	cp	r1, r22
    19b8:	17 06       	cpc	r1, r23
    19ba:	18 06       	cpc	r1, r24
    19bc:	09 06       	cpc	r0, r25
    19be:	08 95       	ret

000019c0 <__fp_pscB>:
    19c0:	00 24       	eor	r0, r0
    19c2:	0a 94       	dec	r0
    19c4:	12 16       	cp	r1, r18
    19c6:	13 06       	cpc	r1, r19
    19c8:	14 06       	cpc	r1, r20
    19ca:	05 06       	cpc	r0, r21
    19cc:	08 95       	ret
    19ce:	c9 cf       	rjmp	.-110    	; 0x1962 <__fp_nan>

000019d0 <__fp_rempio2>:
    19d0:	50 d0       	rcall	.+160    	; 0x1a72 <__fp_splitA>
    19d2:	e8 f3       	brcs	.-6      	; 0x19ce <__fp_pscB+0xe>
    19d4:	e8 94       	clt
    19d6:	e0 e0       	ldi	r30, 0x00	; 0
    19d8:	bb 27       	eor	r27, r27
    19da:	9f 57       	subi	r25, 0x7F	; 127
    19dc:	f0 f0       	brcs	.+60     	; 0x1a1a <__fp_rempio2+0x4a>
    19de:	2a ed       	ldi	r18, 0xDA	; 218
    19e0:	3f e0       	ldi	r19, 0x0F	; 15
    19e2:	49 ec       	ldi	r20, 0xC9	; 201
    19e4:	06 c0       	rjmp	.+12     	; 0x19f2 <__fp_rempio2+0x22>
    19e6:	ee 0f       	add	r30, r30
    19e8:	bb 0f       	add	r27, r27
    19ea:	66 1f       	adc	r22, r22
    19ec:	77 1f       	adc	r23, r23
    19ee:	88 1f       	adc	r24, r24
    19f0:	28 f0       	brcs	.+10     	; 0x19fc <__fp_rempio2+0x2c>
    19f2:	b2 3a       	cpi	r27, 0xA2	; 162
    19f4:	62 07       	cpc	r22, r18
    19f6:	73 07       	cpc	r23, r19
    19f8:	84 07       	cpc	r24, r20
    19fa:	28 f0       	brcs	.+10     	; 0x1a06 <__fp_rempio2+0x36>
    19fc:	b2 5a       	subi	r27, 0xA2	; 162
    19fe:	62 0b       	sbc	r22, r18
    1a00:	73 0b       	sbc	r23, r19
    1a02:	84 0b       	sbc	r24, r20
    1a04:	e3 95       	inc	r30
    1a06:	9a 95       	dec	r25
    1a08:	72 f7       	brpl	.-36     	; 0x19e6 <__fp_rempio2+0x16>
    1a0a:	80 38       	cpi	r24, 0x80	; 128
    1a0c:	30 f4       	brcc	.+12     	; 0x1a1a <__fp_rempio2+0x4a>
    1a0e:	9a 95       	dec	r25
    1a10:	bb 0f       	add	r27, r27
    1a12:	66 1f       	adc	r22, r22
    1a14:	77 1f       	adc	r23, r23
    1a16:	88 1f       	adc	r24, r24
    1a18:	d2 f7       	brpl	.-12     	; 0x1a0e <__fp_rempio2+0x3e>
    1a1a:	90 48       	sbci	r25, 0x80	; 128
    1a1c:	06 c1       	rjmp	.+524    	; 0x1c2a <__fp_mpack_finite>

00001a1e <__fp_round>:
    1a1e:	09 2e       	mov	r0, r25
    1a20:	03 94       	inc	r0
    1a22:	00 0c       	add	r0, r0
    1a24:	11 f4       	brne	.+4      	; 0x1a2a <__fp_round+0xc>
    1a26:	88 23       	and	r24, r24
    1a28:	52 f0       	brmi	.+20     	; 0x1a3e <__fp_round+0x20>
    1a2a:	bb 0f       	add	r27, r27
    1a2c:	40 f4       	brcc	.+16     	; 0x1a3e <__fp_round+0x20>
    1a2e:	bf 2b       	or	r27, r31
    1a30:	11 f4       	brne	.+4      	; 0x1a36 <__fp_round+0x18>
    1a32:	60 ff       	sbrs	r22, 0
    1a34:	04 c0       	rjmp	.+8      	; 0x1a3e <__fp_round+0x20>
    1a36:	6f 5f       	subi	r22, 0xFF	; 255
    1a38:	7f 4f       	sbci	r23, 0xFF	; 255
    1a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1a3e:	08 95       	ret

00001a40 <__fp_sinus>:
    1a40:	ef 93       	push	r30
    1a42:	e0 ff       	sbrs	r30, 0
    1a44:	06 c0       	rjmp	.+12     	; 0x1a52 <__fp_sinus+0x12>
    1a46:	a2 ea       	ldi	r26, 0xA2	; 162
    1a48:	2a ed       	ldi	r18, 0xDA	; 218
    1a4a:	3f e0       	ldi	r19, 0x0F	; 15
    1a4c:	49 ec       	ldi	r20, 0xC9	; 201
    1a4e:	5f eb       	ldi	r21, 0xBF	; 191
    1a50:	cc dd       	rcall	.-1128   	; 0x15ea <__addsf3x>
    1a52:	e5 df       	rcall	.-54     	; 0x1a1e <__fp_round>
    1a54:	0f 90       	pop	r0
    1a56:	03 94       	inc	r0
    1a58:	01 fc       	sbrc	r0, 1
    1a5a:	90 58       	subi	r25, 0x80	; 128
    1a5c:	e9 ed       	ldi	r30, 0xD9	; 217
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	f7 c0       	rjmp	.+494    	; 0x1c50 <__fp_powsodd>

00001a62 <__fp_split3>:
    1a62:	57 fd       	sbrc	r21, 7
    1a64:	90 58       	subi	r25, 0x80	; 128
    1a66:	44 0f       	add	r20, r20
    1a68:	55 1f       	adc	r21, r21
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <__fp_splitA+0x10>
    1a6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1a6e:	71 f0       	breq	.+28     	; 0x1a8c <__fp_splitA+0x1a>
    1a70:	47 95       	ror	r20

00001a72 <__fp_splitA>:
    1a72:	88 0f       	add	r24, r24
    1a74:	97 fb       	bst	r25, 7
    1a76:	99 1f       	adc	r25, r25
    1a78:	61 f0       	breq	.+24     	; 0x1a92 <__fp_splitA+0x20>
    1a7a:	9f 3f       	cpi	r25, 0xFF	; 255
    1a7c:	79 f0       	breq	.+30     	; 0x1a9c <__fp_splitA+0x2a>
    1a7e:	87 95       	ror	r24
    1a80:	08 95       	ret
    1a82:	12 16       	cp	r1, r18
    1a84:	13 06       	cpc	r1, r19
    1a86:	14 06       	cpc	r1, r20
    1a88:	55 1f       	adc	r21, r21
    1a8a:	f2 cf       	rjmp	.-28     	; 0x1a70 <__fp_split3+0xe>
    1a8c:	46 95       	lsr	r20
    1a8e:	f1 df       	rcall	.-30     	; 0x1a72 <__fp_splitA>
    1a90:	08 c0       	rjmp	.+16     	; 0x1aa2 <__fp_splitA+0x30>
    1a92:	16 16       	cp	r1, r22
    1a94:	17 06       	cpc	r1, r23
    1a96:	18 06       	cpc	r1, r24
    1a98:	99 1f       	adc	r25, r25
    1a9a:	f1 cf       	rjmp	.-30     	; 0x1a7e <__fp_splitA+0xc>
    1a9c:	86 95       	lsr	r24
    1a9e:	71 05       	cpc	r23, r1
    1aa0:	61 05       	cpc	r22, r1
    1aa2:	08 94       	sec
    1aa4:	08 95       	ret

00001aa6 <__fp_zero>:
    1aa6:	e8 94       	clt

00001aa8 <__fp_szero>:
    1aa8:	bb 27       	eor	r27, r27
    1aaa:	66 27       	eor	r22, r22
    1aac:	77 27       	eor	r23, r23
    1aae:	cb 01       	movw	r24, r22
    1ab0:	97 f9       	bld	r25, 7
    1ab2:	08 95       	ret

00001ab4 <__gesf2>:
    1ab4:	2c df       	rcall	.-424    	; 0x190e <__fp_cmp>
    1ab6:	08 f4       	brcc	.+2      	; 0x1aba <__gesf2+0x6>
    1ab8:	8f ef       	ldi	r24, 0xFF	; 255
    1aba:	08 95       	ret

00001abc <inverse>:
    1abc:	9b 01       	movw	r18, r22
    1abe:	ac 01       	movw	r20, r24
    1ac0:	60 e0       	ldi	r22, 0x00	; 0
    1ac2:	70 e0       	ldi	r23, 0x00	; 0
    1ac4:	80 e8       	ldi	r24, 0x80	; 128
    1ac6:	9f e3       	ldi	r25, 0x3F	; 63
    1ac8:	4c ce       	rjmp	.-872    	; 0x1762 <__divsf3>

00001aca <__mulsf3>:
    1aca:	0b d0       	rcall	.+22     	; 0x1ae2 <__mulsf3x>
    1acc:	a8 cf       	rjmp	.-176    	; 0x1a1e <__fp_round>
    1ace:	71 df       	rcall	.-286    	; 0x19b2 <__fp_pscA>
    1ad0:	28 f0       	brcs	.+10     	; 0x1adc <__mulsf3+0x12>
    1ad2:	76 df       	rcall	.-276    	; 0x19c0 <__fp_pscB>
    1ad4:	18 f0       	brcs	.+6      	; 0x1adc <__mulsf3+0x12>
    1ad6:	95 23       	and	r25, r21
    1ad8:	09 f0       	breq	.+2      	; 0x1adc <__mulsf3+0x12>
    1ada:	3d cf       	rjmp	.-390    	; 0x1956 <__fp_inf>
    1adc:	42 cf       	rjmp	.-380    	; 0x1962 <__fp_nan>
    1ade:	11 24       	eor	r1, r1
    1ae0:	e3 cf       	rjmp	.-58     	; 0x1aa8 <__fp_szero>

00001ae2 <__mulsf3x>:
    1ae2:	bf df       	rcall	.-130    	; 0x1a62 <__fp_split3>
    1ae4:	a0 f3       	brcs	.-24     	; 0x1ace <__mulsf3+0x4>

00001ae6 <__mulsf3_pse>:
    1ae6:	95 9f       	mul	r25, r21
    1ae8:	d1 f3       	breq	.-12     	; 0x1ade <__mulsf3+0x14>
    1aea:	95 0f       	add	r25, r21
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	55 1f       	adc	r21, r21
    1af0:	62 9f       	mul	r22, r18
    1af2:	f0 01       	movw	r30, r0
    1af4:	72 9f       	mul	r23, r18
    1af6:	bb 27       	eor	r27, r27
    1af8:	f0 0d       	add	r31, r0
    1afa:	b1 1d       	adc	r27, r1
    1afc:	63 9f       	mul	r22, r19
    1afe:	aa 27       	eor	r26, r26
    1b00:	f0 0d       	add	r31, r0
    1b02:	b1 1d       	adc	r27, r1
    1b04:	aa 1f       	adc	r26, r26
    1b06:	64 9f       	mul	r22, r20
    1b08:	66 27       	eor	r22, r22
    1b0a:	b0 0d       	add	r27, r0
    1b0c:	a1 1d       	adc	r26, r1
    1b0e:	66 1f       	adc	r22, r22
    1b10:	82 9f       	mul	r24, r18
    1b12:	22 27       	eor	r18, r18
    1b14:	b0 0d       	add	r27, r0
    1b16:	a1 1d       	adc	r26, r1
    1b18:	62 1f       	adc	r22, r18
    1b1a:	73 9f       	mul	r23, r19
    1b1c:	b0 0d       	add	r27, r0
    1b1e:	a1 1d       	adc	r26, r1
    1b20:	62 1f       	adc	r22, r18
    1b22:	83 9f       	mul	r24, r19
    1b24:	a0 0d       	add	r26, r0
    1b26:	61 1d       	adc	r22, r1
    1b28:	22 1f       	adc	r18, r18
    1b2a:	74 9f       	mul	r23, r20
    1b2c:	33 27       	eor	r19, r19
    1b2e:	a0 0d       	add	r26, r0
    1b30:	61 1d       	adc	r22, r1
    1b32:	23 1f       	adc	r18, r19
    1b34:	84 9f       	mul	r24, r20
    1b36:	60 0d       	add	r22, r0
    1b38:	21 1d       	adc	r18, r1
    1b3a:	82 2f       	mov	r24, r18
    1b3c:	76 2f       	mov	r23, r22
    1b3e:	6a 2f       	mov	r22, r26
    1b40:	11 24       	eor	r1, r1
    1b42:	9f 57       	subi	r25, 0x7F	; 127
    1b44:	50 40       	sbci	r21, 0x00	; 0
    1b46:	8a f0       	brmi	.+34     	; 0x1b6a <__mulsf3_pse+0x84>
    1b48:	e1 f0       	breq	.+56     	; 0x1b82 <__mulsf3_pse+0x9c>
    1b4a:	88 23       	and	r24, r24
    1b4c:	4a f0       	brmi	.+18     	; 0x1b60 <__mulsf3_pse+0x7a>
    1b4e:	ee 0f       	add	r30, r30
    1b50:	ff 1f       	adc	r31, r31
    1b52:	bb 1f       	adc	r27, r27
    1b54:	66 1f       	adc	r22, r22
    1b56:	77 1f       	adc	r23, r23
    1b58:	88 1f       	adc	r24, r24
    1b5a:	91 50       	subi	r25, 0x01	; 1
    1b5c:	50 40       	sbci	r21, 0x00	; 0
    1b5e:	a9 f7       	brne	.-22     	; 0x1b4a <__mulsf3_pse+0x64>
    1b60:	9e 3f       	cpi	r25, 0xFE	; 254
    1b62:	51 05       	cpc	r21, r1
    1b64:	70 f0       	brcs	.+28     	; 0x1b82 <__mulsf3_pse+0x9c>
    1b66:	f7 ce       	rjmp	.-530    	; 0x1956 <__fp_inf>
    1b68:	9f cf       	rjmp	.-194    	; 0x1aa8 <__fp_szero>
    1b6a:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6c:	ec f3       	brlt	.-6      	; 0x1b68 <__mulsf3_pse+0x82>
    1b6e:	98 3e       	cpi	r25, 0xE8	; 232
    1b70:	dc f3       	brlt	.-10     	; 0x1b68 <__mulsf3_pse+0x82>
    1b72:	86 95       	lsr	r24
    1b74:	77 95       	ror	r23
    1b76:	67 95       	ror	r22
    1b78:	b7 95       	ror	r27
    1b7a:	f7 95       	ror	r31
    1b7c:	e7 95       	ror	r30
    1b7e:	9f 5f       	subi	r25, 0xFF	; 255
    1b80:	c1 f7       	brne	.-16     	; 0x1b72 <__mulsf3_pse+0x8c>
    1b82:	fe 2b       	or	r31, r30
    1b84:	88 0f       	add	r24, r24
    1b86:	91 1d       	adc	r25, r1
    1b88:	96 95       	lsr	r25
    1b8a:	87 95       	ror	r24
    1b8c:	97 f9       	bld	r25, 7
    1b8e:	08 95       	ret

00001b90 <sin>:
    1b90:	9f 93       	push	r25
    1b92:	1e df       	rcall	.-452    	; 0x19d0 <__fp_rempio2>
    1b94:	0f 90       	pop	r0
    1b96:	07 fc       	sbrc	r0, 7
    1b98:	ee 5f       	subi	r30, 0xFE	; 254
    1b9a:	52 cf       	rjmp	.-348    	; 0x1a40 <__fp_sinus>
    1b9c:	11 f4       	brne	.+4      	; 0x1ba2 <sin+0x12>
    1b9e:	0e f4       	brtc	.+2      	; 0x1ba2 <sin+0x12>
    1ba0:	e0 ce       	rjmp	.-576    	; 0x1962 <__fp_nan>
    1ba2:	41 c0       	rjmp	.+130    	; 0x1c26 <__fp_mpack>

00001ba4 <sqrt>:
    1ba4:	66 df       	rcall	.-308    	; 0x1a72 <__fp_splitA>
    1ba6:	d0 f3       	brcs	.-12     	; 0x1b9c <sin+0xc>
    1ba8:	99 23       	and	r25, r25
    1baa:	d9 f3       	breq	.-10     	; 0x1ba2 <sin+0x12>
    1bac:	ce f3       	brts	.-14     	; 0x1ba0 <sin+0x10>
    1bae:	9f 57       	subi	r25, 0x7F	; 127
    1bb0:	55 0b       	sbc	r21, r21
    1bb2:	87 ff       	sbrs	r24, 7
    1bb4:	46 d0       	rcall	.+140    	; 0x1c42 <__fp_norm2>
    1bb6:	00 24       	eor	r0, r0
    1bb8:	a0 e6       	ldi	r26, 0x60	; 96
    1bba:	40 ea       	ldi	r20, 0xA0	; 160
    1bbc:	90 01       	movw	r18, r0
    1bbe:	80 58       	subi	r24, 0x80	; 128
    1bc0:	56 95       	lsr	r21
    1bc2:	97 95       	ror	r25
    1bc4:	28 f4       	brcc	.+10     	; 0x1bd0 <sqrt+0x2c>
    1bc6:	80 5c       	subi	r24, 0xC0	; 192
    1bc8:	66 0f       	add	r22, r22
    1bca:	77 1f       	adc	r23, r23
    1bcc:	88 1f       	adc	r24, r24
    1bce:	20 f0       	brcs	.+8      	; 0x1bd8 <sqrt+0x34>
    1bd0:	26 17       	cp	r18, r22
    1bd2:	37 07       	cpc	r19, r23
    1bd4:	48 07       	cpc	r20, r24
    1bd6:	30 f4       	brcc	.+12     	; 0x1be4 <sqrt+0x40>
    1bd8:	62 1b       	sub	r22, r18
    1bda:	73 0b       	sbc	r23, r19
    1bdc:	84 0b       	sbc	r24, r20
    1bde:	20 29       	or	r18, r0
    1be0:	31 29       	or	r19, r1
    1be2:	4a 2b       	or	r20, r26
    1be4:	a6 95       	lsr	r26
    1be6:	17 94       	ror	r1
    1be8:	07 94       	ror	r0
    1bea:	20 25       	eor	r18, r0
    1bec:	31 25       	eor	r19, r1
    1bee:	4a 27       	eor	r20, r26
    1bf0:	58 f7       	brcc	.-42     	; 0x1bc8 <sqrt+0x24>
    1bf2:	66 0f       	add	r22, r22
    1bf4:	77 1f       	adc	r23, r23
    1bf6:	88 1f       	adc	r24, r24
    1bf8:	20 f0       	brcs	.+8      	; 0x1c02 <sqrt+0x5e>
    1bfa:	26 17       	cp	r18, r22
    1bfc:	37 07       	cpc	r19, r23
    1bfe:	48 07       	cpc	r20, r24
    1c00:	30 f4       	brcc	.+12     	; 0x1c0e <sqrt+0x6a>
    1c02:	62 0b       	sbc	r22, r18
    1c04:	73 0b       	sbc	r23, r19
    1c06:	84 0b       	sbc	r24, r20
    1c08:	20 0d       	add	r18, r0
    1c0a:	31 1d       	adc	r19, r1
    1c0c:	41 1d       	adc	r20, r1
    1c0e:	a0 95       	com	r26
    1c10:	81 f7       	brne	.-32     	; 0x1bf2 <sqrt+0x4e>
    1c12:	b9 01       	movw	r22, r18
    1c14:	84 2f       	mov	r24, r20
    1c16:	91 58       	subi	r25, 0x81	; 129
    1c18:	88 0f       	add	r24, r24
    1c1a:	96 95       	lsr	r25
    1c1c:	87 95       	ror	r24
    1c1e:	08 95       	ret

00001c20 <square>:
    1c20:	9b 01       	movw	r18, r22
    1c22:	ac 01       	movw	r20, r24
    1c24:	52 cf       	rjmp	.-348    	; 0x1aca <__mulsf3>

00001c26 <__fp_mpack>:
    1c26:	9f 3f       	cpi	r25, 0xFF	; 255
    1c28:	31 f0       	breq	.+12     	; 0x1c36 <__fp_mpack_finite+0xc>

00001c2a <__fp_mpack_finite>:
    1c2a:	91 50       	subi	r25, 0x01	; 1
    1c2c:	20 f4       	brcc	.+8      	; 0x1c36 <__fp_mpack_finite+0xc>
    1c2e:	87 95       	ror	r24
    1c30:	77 95       	ror	r23
    1c32:	67 95       	ror	r22
    1c34:	b7 95       	ror	r27
    1c36:	88 0f       	add	r24, r24
    1c38:	91 1d       	adc	r25, r1
    1c3a:	96 95       	lsr	r25
    1c3c:	87 95       	ror	r24
    1c3e:	97 f9       	bld	r25, 7
    1c40:	08 95       	ret

00001c42 <__fp_norm2>:
    1c42:	91 50       	subi	r25, 0x01	; 1
    1c44:	50 40       	sbci	r21, 0x00	; 0
    1c46:	66 0f       	add	r22, r22
    1c48:	77 1f       	adc	r23, r23
    1c4a:	88 1f       	adc	r24, r24
    1c4c:	d2 f7       	brpl	.-12     	; 0x1c42 <__fp_norm2>
    1c4e:	08 95       	ret

00001c50 <__fp_powsodd>:
    1c50:	9f 93       	push	r25
    1c52:	8f 93       	push	r24
    1c54:	7f 93       	push	r23
    1c56:	6f 93       	push	r22
    1c58:	ff 93       	push	r31
    1c5a:	ef 93       	push	r30
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	34 df       	rcall	.-408    	; 0x1aca <__mulsf3>
    1c62:	ef 91       	pop	r30
    1c64:	ff 91       	pop	r31
    1c66:	80 de       	rcall	.-768    	; 0x1968 <__fp_powser>
    1c68:	2f 91       	pop	r18
    1c6a:	3f 91       	pop	r19
    1c6c:	4f 91       	pop	r20
    1c6e:	5f 91       	pop	r21
    1c70:	2c cf       	rjmp	.-424    	; 0x1aca <__mulsf3>

00001c72 <__divmodhi4>:
    1c72:	97 fb       	bst	r25, 7
    1c74:	07 2e       	mov	r0, r23
    1c76:	16 f4       	brtc	.+4      	; 0x1c7c <__divmodhi4+0xa>
    1c78:	00 94       	com	r0
    1c7a:	07 d0       	rcall	.+14     	; 0x1c8a <__divmodhi4_neg1>
    1c7c:	77 fd       	sbrc	r23, 7
    1c7e:	09 d0       	rcall	.+18     	; 0x1c92 <__divmodhi4_neg2>
    1c80:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <__udivmodhi4>
    1c84:	07 fc       	sbrc	r0, 7
    1c86:	05 d0       	rcall	.+10     	; 0x1c92 <__divmodhi4_neg2>
    1c88:	3e f4       	brtc	.+14     	; 0x1c98 <__divmodhi4_exit>

00001c8a <__divmodhi4_neg1>:
    1c8a:	90 95       	com	r25
    1c8c:	81 95       	neg	r24
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	08 95       	ret

00001c92 <__divmodhi4_neg2>:
    1c92:	70 95       	com	r23
    1c94:	61 95       	neg	r22
    1c96:	7f 4f       	sbci	r23, 0xFF	; 255

00001c98 <__divmodhi4_exit>:
    1c98:	08 95       	ret

00001c9a <__udivmodhi4>:
    1c9a:	aa 1b       	sub	r26, r26
    1c9c:	bb 1b       	sub	r27, r27
    1c9e:	51 e1       	ldi	r21, 0x11	; 17
    1ca0:	07 c0       	rjmp	.+14     	; 0x1cb0 <__udivmodhi4_ep>

00001ca2 <__udivmodhi4_loop>:
    1ca2:	aa 1f       	adc	r26, r26
    1ca4:	bb 1f       	adc	r27, r27
    1ca6:	a6 17       	cp	r26, r22
    1ca8:	b7 07       	cpc	r27, r23
    1caa:	10 f0       	brcs	.+4      	; 0x1cb0 <__udivmodhi4_ep>
    1cac:	a6 1b       	sub	r26, r22
    1cae:	b7 0b       	sbc	r27, r23

00001cb0 <__udivmodhi4_ep>:
    1cb0:	88 1f       	adc	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	5a 95       	dec	r21
    1cb6:	a9 f7       	brne	.-22     	; 0x1ca2 <__udivmodhi4_loop>
    1cb8:	80 95       	com	r24
    1cba:	90 95       	com	r25
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	08 95       	ret

00001cc2 <_exit>:
    1cc2:	f8 94       	cli

00001cc4 <__stop_program>:
    1cc4:	ff cf       	rjmp	.-2      	; 0x1cc4 <__stop_program>
