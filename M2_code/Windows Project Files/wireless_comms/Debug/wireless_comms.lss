
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00002fbc  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002fbc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800108  00800108  00003058  2**0
                  ALLOC
  3 .stab         000035ac  00000000  00000000  00003058  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  00006604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007514  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  00007543  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b27  00000000  00000000  000076d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000077a  00000000  00000000  000091fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cb3  00000000  00000000  00009974  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  0000a628  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005d0  00000000  00000000  0000aa08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001d2b  00000000  00000000  0000afd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000198  00000000  00000000  0000cd03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 18 11 	jmp	0x2230	; 0x2230 <__vector_3>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 04 11 	jmp	0x2208	; 0x2208 <__vector_41>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	da e0       	ldi	r29, 0x0A	; 10
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	ec eb       	ldi	r30, 0xBC	; 188
     10c:	ff e2       	ldi	r31, 0x2F	; 47
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a8 30       	cpi	r26, 0x08	; 8
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	a8 e0       	ldi	r26, 0x08	; 8
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	aa 37       	cpi	r26, 0x7A	; 122
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 86 09 	call	0x130c	; 0x130c <main>
     12e:	0c 94 dc 17 	jmp	0x2fb8	; 0x2fb8 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     136:	2f 92       	push	r2
     138:	3f 92       	push	r3
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	8f 92       	push	r8
     144:	9f 92       	push	r9
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	28 97       	sbiw	r28, 0x08	; 8
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	98 86       	std	Y+8, r9	; 0x08
     16c:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     16e:	10 92 09 01 	sts	0x0109, r1
     172:	10 92 08 01 	sts	0x0108, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     176:	8f 3f       	cpi	r24, 0xFF	; 255
     178:	e3 e0       	ldi	r30, 0x03	; 3
     17a:	9e 07       	cpc	r25, r30
     17c:	01 f1       	breq	.+64     	; 0x1be <localize+0x88>
     17e:	6f 3f       	cpi	r22, 0xFF	; 255
     180:	f3 e0       	ldi	r31, 0x03	; 3
     182:	7f 07       	cpc	r23, r31
     184:	e1 f0       	breq	.+56     	; 0x1be <localize+0x88>
     186:	4f 3f       	cpi	r20, 0xFF	; 255
     188:	e3 e0       	ldi	r30, 0x03	; 3
     18a:	5e 07       	cpc	r21, r30
     18c:	c1 f0       	breq	.+48     	; 0x1be <localize+0x88>
     18e:	2f 3f       	cpi	r18, 0xFF	; 255
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	3f 07       	cpc	r19, r31
     194:	a1 f0       	breq	.+40     	; 0x1be <localize+0x88>
     196:	0f 3f       	cpi	r16, 0xFF	; 255
     198:	e3 e0       	ldi	r30, 0x03	; 3
     19a:	1e 07       	cpc	r17, r30
     19c:	81 f0       	breq	.+32     	; 0x1be <localize+0x88>
     19e:	ff ef       	ldi	r31, 0xFF	; 255
     1a0:	ef 16       	cp	r14, r31
     1a2:	f3 e0       	ldi	r31, 0x03	; 3
     1a4:	ff 06       	cpc	r15, r31
     1a6:	59 f0       	breq	.+22     	; 0x1be <localize+0x88>
     1a8:	ef ef       	ldi	r30, 0xFF	; 255
     1aa:	ce 16       	cp	r12, r30
     1ac:	e3 e0       	ldi	r30, 0x03	; 3
     1ae:	de 06       	cpc	r13, r30
     1b0:	31 f0       	breq	.+12     	; 0x1be <localize+0x88>
     1b2:	ff ef       	ldi	r31, 0xFF	; 255
     1b4:	af 16       	cp	r10, r31
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	bf 06       	cpc	r11, r31
     1ba:	09 f0       	breq	.+2      	; 0x1be <localize+0x88>
     1bc:	a4 c6       	rjmp	.+3400   	; 0xf06 <__stack+0x407>
        flag_no_good_stars = 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 09 01 	sts	0x0109, r25
     1c6:	80 93 08 01 	sts	0x0108, r24
     1ca:	d1 c3       	rjmp	.+1954   	; 0x96e <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     1cc:	f8 01       	movw	r30, r16
     1ce:	a0 80       	ld	r10, Z
     1d0:	b1 80       	ldd	r11, Z+1	; 0x01
     1d2:	c2 80       	ldd	r12, Z+2	; 0x02
     1d4:	d3 80       	ldd	r13, Z+3	; 0x03
     1d6:	0c 5f       	subi	r16, 0xFC	; 252
     1d8:	1f 4f       	sbci	r17, 0xFF	; 255
     1da:	26 2d       	mov	r18, r6
     1dc:	37 2d       	mov	r19, r7
     1de:	48 2d       	mov	r20, r8
     1e0:	59 2d       	mov	r21, r9
     1e2:	6a 2d       	mov	r22, r10
     1e4:	7b 2d       	mov	r23, r11
     1e6:	8c 2d       	mov	r24, r12
     1e8:	9d 2d       	mov	r25, r13
     1ea:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
     1ee:	18 16       	cp	r1, r24
     1f0:	34 f4       	brge	.+12     	; 0x1fe <localize+0xc8>
     1f2:	fa 82       	std	Y+2, r15	; 0x02
     1f4:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     1f6:	6a 2c       	mov	r6, r10
     1f8:	7b 2c       	mov	r7, r11
     1fa:	8c 2c       	mov	r8, r12
     1fc:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     1fe:	22 2d       	mov	r18, r2
     200:	33 2d       	mov	r19, r3
     202:	44 2d       	mov	r20, r4
     204:	55 2d       	mov	r21, r5
     206:	6a 2d       	mov	r22, r10
     208:	7b 2d       	mov	r23, r11
     20a:	8c 2d       	mov	r24, r12
     20c:	9d 2d       	mov	r25, r13
     20e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
     212:	88 23       	and	r24, r24
     214:	34 f4       	brge	.+12     	; 0x222 <localize+0xec>
     216:	fe 82       	std	Y+6, r15	; 0x06
     218:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     21a:	2a 2c       	mov	r2, r10
     21c:	3b 2c       	mov	r3, r11
     21e:	4c 2c       	mov	r4, r12
     220:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     222:	ff ef       	ldi	r31, 0xFF	; 255
     224:	ef 1a       	sub	r14, r31
     226:	ff 0a       	sbc	r15, r31
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	e8 16       	cp	r14, r24
     22c:	f1 04       	cpc	r15, r1
     22e:	71 f6       	brne	.-100    	; 0x1cc <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     230:	e9 81       	ldd	r30, Y+1	; 0x01
     232:	fa 81       	ldd	r31, Y+2	; 0x02
     234:	e2 30       	cpi	r30, 0x02	; 2
     236:	f1 05       	cpc	r31, r1
     238:	09 f4       	brne	.+2      	; 0x23c <localize+0x106>
     23a:	3e c1       	rjmp	.+636    	; 0x4b8 <localize+0x382>
     23c:	34 f4       	brge	.+12     	; 0x24a <localize+0x114>
     23e:	30 97       	sbiw	r30, 0x00	; 0
     240:	81 f0       	breq	.+32     	; 0x262 <localize+0x12c>
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	09 f0       	breq	.+2      	; 0x248 <localize+0x112>
     246:	8d c3       	rjmp	.+1818   	; 0x962 <localize+0x82c>
     248:	a2 c0       	rjmp	.+324    	; 0x38e <localize+0x258>
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	91 05       	cpc	r25, r1
     252:	09 f4       	brne	.+2      	; 0x256 <localize+0x120>
     254:	5b c2       	rjmp	.+1206   	; 0x70c <localize+0x5d6>
     256:	0c f4       	brge	.+2      	; 0x25a <localize+0x124>
     258:	c4 c1       	rjmp	.+904    	; 0x5e2 <localize+0x4ac>
     25a:	05 97       	sbiw	r24, 0x05	; 5
     25c:	09 f0       	breq	.+2      	; 0x260 <localize+0x12a>
     25e:	81 c3       	rjmp	.+1794   	; 0x962 <localize+0x82c>
     260:	ea c2       	rjmp	.+1492   	; 0x836 <localize+0x700>
            case 0:
                switch (min_id) {
     262:	ed 81       	ldd	r30, Y+5	; 0x05
     264:	fe 81       	ldd	r31, Y+6	; 0x06
     266:	e2 30       	cpi	r30, 0x02	; 2
     268:	f1 05       	cpc	r31, r1
     26a:	39 f1       	breq	.+78     	; 0x2ba <localize+0x184>
     26c:	24 f4       	brge	.+8      	; 0x276 <localize+0x140>
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	09 f0       	breq	.+2      	; 0x274 <localize+0x13e>
     272:	6e c0       	rjmp	.+220    	; 0x350 <localize+0x21a>
     274:	09 c0       	rjmp	.+18     	; 0x288 <localize+0x152>
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	91 05       	cpc	r25, r1
     27e:	b1 f1       	breq	.+108    	; 0x2ec <localize+0x1b6>
     280:	04 97       	sbiw	r24, 0x04	; 4
     282:	09 f0       	breq	.+2      	; 0x286 <localize+0x150>
     284:	65 c0       	rjmp	.+202    	; 0x350 <localize+0x21a>
     286:	4b c0       	rjmp	.+150    	; 0x31e <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     288:	8a e3       	ldi	r24, 0x3A	; 58
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 6d 01 	sts	0x016D, r25
     290:	80 93 6c 01 	sts	0x016C, r24
     294:	82 e3       	ldi	r24, 0x32	; 50
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	90 93 53 01 	sts	0x0153, r25
     29c:	80 93 52 01 	sts	0x0152, r24
     2a0:	86 e3       	ldi	r24, 0x36	; 54
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	90 93 55 01 	sts	0x0155, r25
     2a8:	80 93 54 01 	sts	0x0154, r24
     2ac:	8e e2       	ldi	r24, 0x2E	; 46
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 67 01 	sts	0x0167, r25
     2b4:	80 93 66 01 	sts	0x0166, r24
                        break;
     2b8:	54 c3       	rjmp	.+1704   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     2ba:	8a e3       	ldi	r24, 0x3A	; 58
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	90 93 6d 01 	sts	0x016D, r25
     2c2:	80 93 6c 01 	sts	0x016C, r24
     2c6:	8e e2       	ldi	r24, 0x2E	; 46
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	90 93 53 01 	sts	0x0153, r25
     2ce:	80 93 52 01 	sts	0x0152, r24
     2d2:	86 e3       	ldi	r24, 0x36	; 54
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	90 93 55 01 	sts	0x0155, r25
     2da:	80 93 54 01 	sts	0x0154, r24
     2de:	82 e3       	ldi	r24, 0x32	; 50
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 93 67 01 	sts	0x0167, r25
     2e6:	80 93 66 01 	sts	0x0166, r24
                        break;
     2ea:	3b c3       	rjmp	.+1654   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     2ec:	86 e3       	ldi	r24, 0x36	; 54
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 93 6d 01 	sts	0x016D, r25
     2f4:	80 93 6c 01 	sts	0x016C, r24
     2f8:	82 e3       	ldi	r24, 0x32	; 50
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 53 01 	sts	0x0153, r25
     300:	80 93 52 01 	sts	0x0152, r24
     304:	8a e3       	ldi	r24, 0x3A	; 58
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	90 93 55 01 	sts	0x0155, r25
     30c:	80 93 54 01 	sts	0x0154, r24
     310:	8e e2       	ldi	r24, 0x2E	; 46
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	90 93 67 01 	sts	0x0167, r25
     318:	80 93 66 01 	sts	0x0166, r24
                        break;
     31c:	22 c3       	rjmp	.+1604   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     31e:	86 e3       	ldi	r24, 0x36	; 54
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	90 93 6d 01 	sts	0x016D, r25
     326:	80 93 6c 01 	sts	0x016C, r24
     32a:	8e e2       	ldi	r24, 0x2E	; 46
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	90 93 53 01 	sts	0x0153, r25
     332:	80 93 52 01 	sts	0x0152, r24
     336:	8a e3       	ldi	r24, 0x3A	; 58
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	90 93 55 01 	sts	0x0155, r25
     33e:	80 93 54 01 	sts	0x0154, r24
     342:	82 e3       	ldi	r24, 0x32	; 50
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	90 93 67 01 	sts	0x0167, r25
     34a:	80 93 66 01 	sts	0x0166, r24
                        break;
     34e:	09 c3       	rjmp	.+1554   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     350:	8a e3       	ldi	r24, 0x3A	; 58
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	90 93 6d 01 	sts	0x016D, r25
     358:	80 93 6c 01 	sts	0x016C, r24
     35c:	86 e3       	ldi	r24, 0x36	; 54
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	90 93 53 01 	sts	0x0153, r25
     364:	80 93 52 01 	sts	0x0152, r24
     368:	82 e3       	ldi	r24, 0x32	; 50
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 55 01 	sts	0x0155, r25
     370:	80 93 54 01 	sts	0x0154, r24
     374:	8e e2       	ldi	r24, 0x2E	; 46
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	90 93 67 01 	sts	0x0167, r25
     37c:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 09 01 	sts	0x0109, r25
     388:	80 93 08 01 	sts	0x0108, r24
                        break;
     38c:	f0 c2       	rjmp	.+1504   	; 0x96e <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
     38e:	ed 81       	ldd	r30, Y+5	; 0x05
     390:	fe 81       	ldd	r31, Y+6	; 0x06
     392:	e2 30       	cpi	r30, 0x02	; 2
     394:	f1 05       	cpc	r31, r1
     396:	31 f1       	breq	.+76     	; 0x3e4 <localize+0x2ae>
     398:	1c f4       	brge	.+6      	; 0x3a0 <localize+0x26a>
     39a:	ef 2b       	or	r30, r31
     39c:	51 f0       	breq	.+20     	; 0x3b2 <localize+0x27c>
     39e:	6d c0       	rjmp	.+218    	; 0x47a <localize+0x344>
     3a0:	8d 81       	ldd	r24, Y+5	; 0x05
     3a2:	9e 81       	ldd	r25, Y+6	; 0x06
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	91 05       	cpc	r25, r1
     3a8:	b1 f1       	breq	.+108    	; 0x416 <localize+0x2e0>
     3aa:	05 97       	sbiw	r24, 0x05	; 5
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <localize+0x27a>
     3ae:	65 c0       	rjmp	.+202    	; 0x47a <localize+0x344>
     3b0:	4b c0       	rjmp	.+150    	; 0x448 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     3b2:	8a e3       	ldi	r24, 0x3A	; 58
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 6d 01 	sts	0x016D, r25
     3ba:	80 93 6c 01 	sts	0x016C, r24
     3be:	86 e3       	ldi	r24, 0x36	; 54
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	90 93 53 01 	sts	0x0153, r25
     3c6:	80 93 52 01 	sts	0x0152, r24
     3ca:	82 e3       	ldi	r24, 0x32	; 50
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	90 93 55 01 	sts	0x0155, r25
     3d2:	80 93 54 01 	sts	0x0154, r24
     3d6:	8e e2       	ldi	r24, 0x2E	; 46
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 67 01 	sts	0x0167, r25
     3de:	80 93 66 01 	sts	0x0166, r24
                        break;
     3e2:	bf c2       	rjmp	.+1406   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     3e4:	8a e3       	ldi	r24, 0x3A	; 58
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	90 93 6d 01 	sts	0x016D, r25
     3ec:	80 93 6c 01 	sts	0x016C, r24
     3f0:	8e e2       	ldi	r24, 0x2E	; 46
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	90 93 53 01 	sts	0x0153, r25
     3f8:	80 93 52 01 	sts	0x0152, r24
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	90 93 55 01 	sts	0x0155, r25
     404:	80 93 54 01 	sts	0x0154, r24
     408:	86 e3       	ldi	r24, 0x36	; 54
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 67 01 	sts	0x0167, r25
     410:	80 93 66 01 	sts	0x0166, r24
                        break;
     414:	a6 c2       	rjmp	.+1356   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     416:	82 e3       	ldi	r24, 0x32	; 50
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	90 93 6d 01 	sts	0x016D, r25
     41e:	80 93 6c 01 	sts	0x016C, r24
     422:	86 e3       	ldi	r24, 0x36	; 54
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	90 93 53 01 	sts	0x0153, r25
     42a:	80 93 52 01 	sts	0x0152, r24
     42e:	8a e3       	ldi	r24, 0x3A	; 58
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 93 55 01 	sts	0x0155, r25
     436:	80 93 54 01 	sts	0x0154, r24
     43a:	8e e2       	ldi	r24, 0x2E	; 46
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	90 93 67 01 	sts	0x0167, r25
     442:	80 93 66 01 	sts	0x0166, r24
                        break;
     446:	8d c2       	rjmp	.+1306   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     448:	82 e3       	ldi	r24, 0x32	; 50
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	90 93 6d 01 	sts	0x016D, r25
     450:	80 93 6c 01 	sts	0x016C, r24
     454:	8e e2       	ldi	r24, 0x2E	; 46
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	90 93 53 01 	sts	0x0153, r25
     45c:	80 93 52 01 	sts	0x0152, r24
     460:	8a e3       	ldi	r24, 0x3A	; 58
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	90 93 55 01 	sts	0x0155, r25
     468:	80 93 54 01 	sts	0x0154, r24
     46c:	86 e3       	ldi	r24, 0x36	; 54
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	90 93 67 01 	sts	0x0167, r25
     474:	80 93 66 01 	sts	0x0166, r24
                        break;
     478:	74 c2       	rjmp	.+1256   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     47a:	8a e3       	ldi	r24, 0x3A	; 58
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	90 93 6d 01 	sts	0x016D, r25
     482:	80 93 6c 01 	sts	0x016C, r24
     486:	86 e3       	ldi	r24, 0x36	; 54
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	90 93 53 01 	sts	0x0153, r25
     48e:	80 93 52 01 	sts	0x0152, r24
     492:	82 e3       	ldi	r24, 0x32	; 50
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	90 93 55 01 	sts	0x0155, r25
     49a:	80 93 54 01 	sts	0x0154, r24
     49e:	8e e2       	ldi	r24, 0x2E	; 46
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	90 93 67 01 	sts	0x0167, r25
     4a6:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 09 01 	sts	0x0109, r25
     4b2:	80 93 08 01 	sts	0x0108, r24
                        break;
     4b6:	5b c2       	rjmp	.+1206   	; 0x96e <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
     4b8:	ed 81       	ldd	r30, Y+5	; 0x05
     4ba:	fe 81       	ldd	r31, Y+6	; 0x06
     4bc:	e1 30       	cpi	r30, 0x01	; 1
     4be:	f1 05       	cpc	r31, r1
     4c0:	31 f1       	breq	.+76     	; 0x50e <localize+0x3d8>
     4c2:	1c f4       	brge	.+6      	; 0x4ca <localize+0x394>
     4c4:	ef 2b       	or	r30, r31
     4c6:	51 f0       	breq	.+20     	; 0x4dc <localize+0x3a6>
     4c8:	6d c0       	rjmp	.+218    	; 0x5a4 <localize+0x46e>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	84 30       	cpi	r24, 0x04	; 4
     4d0:	91 05       	cpc	r25, r1
     4d2:	b1 f1       	breq	.+108    	; 0x540 <localize+0x40a>
     4d4:	05 97       	sbiw	r24, 0x05	; 5
     4d6:	09 f0       	breq	.+2      	; 0x4da <localize+0x3a4>
     4d8:	65 c0       	rjmp	.+202    	; 0x5a4 <localize+0x46e>
     4da:	4b c0       	rjmp	.+150    	; 0x572 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     4dc:	8a e3       	ldi	r24, 0x3A	; 58
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	90 93 6d 01 	sts	0x016D, r25
     4e4:	80 93 6c 01 	sts	0x016C, r24
     4e8:	86 e3       	ldi	r24, 0x36	; 54
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 53 01 	sts	0x0153, r25
     4f0:	80 93 52 01 	sts	0x0152, r24
     4f4:	8e e2       	ldi	r24, 0x2E	; 46
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 93 55 01 	sts	0x0155, r25
     4fc:	80 93 54 01 	sts	0x0154, r24
     500:	82 e3       	ldi	r24, 0x32	; 50
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	90 93 67 01 	sts	0x0167, r25
     508:	80 93 66 01 	sts	0x0166, r24
                        break;
     50c:	2a c2       	rjmp	.+1108   	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     50e:	8a e3       	ldi	r24, 0x3A	; 58
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 6d 01 	sts	0x016D, r25
     516:	80 93 6c 01 	sts	0x016C, r24
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	90 93 53 01 	sts	0x0153, r25
     522:	80 93 52 01 	sts	0x0152, r24
     526:	8e e2       	ldi	r24, 0x2E	; 46
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	90 93 55 01 	sts	0x0155, r25
     52e:	80 93 54 01 	sts	0x0154, r24
     532:	86 e3       	ldi	r24, 0x36	; 54
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	90 93 67 01 	sts	0x0167, r25
     53a:	80 93 66 01 	sts	0x0166, r24
                        break;
     53e:	11 c2       	rjmp	.+1058   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     540:	8e e2       	ldi	r24, 0x2E	; 46
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	90 93 6d 01 	sts	0x016D, r25
     548:	80 93 6c 01 	sts	0x016C, r24
     54c:	86 e3       	ldi	r24, 0x36	; 54
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 53 01 	sts	0x0153, r25
     554:	80 93 52 01 	sts	0x0152, r24
     558:	8a e3       	ldi	r24, 0x3A	; 58
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	90 93 55 01 	sts	0x0155, r25
     560:	80 93 54 01 	sts	0x0154, r24
     564:	82 e3       	ldi	r24, 0x32	; 50
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 93 67 01 	sts	0x0167, r25
     56c:	80 93 66 01 	sts	0x0166, r24
                        break;
     570:	f8 c1       	rjmp	.+1008   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     572:	8e e2       	ldi	r24, 0x2E	; 46
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	90 93 6d 01 	sts	0x016D, r25
     57a:	80 93 6c 01 	sts	0x016C, r24
     57e:	82 e3       	ldi	r24, 0x32	; 50
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	90 93 53 01 	sts	0x0153, r25
     586:	80 93 52 01 	sts	0x0152, r24
     58a:	8a e3       	ldi	r24, 0x3A	; 58
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	90 93 55 01 	sts	0x0155, r25
     592:	80 93 54 01 	sts	0x0154, r24
     596:	86 e3       	ldi	r24, 0x36	; 54
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	90 93 67 01 	sts	0x0167, r25
     59e:	80 93 66 01 	sts	0x0166, r24
                        break;
     5a2:	df c1       	rjmp	.+958    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     5a4:	8a e3       	ldi	r24, 0x3A	; 58
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	90 93 6d 01 	sts	0x016D, r25
     5ac:	80 93 6c 01 	sts	0x016C, r24
     5b0:	86 e3       	ldi	r24, 0x36	; 54
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	90 93 53 01 	sts	0x0153, r25
     5b8:	80 93 52 01 	sts	0x0152, r24
     5bc:	82 e3       	ldi	r24, 0x32	; 50
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	90 93 55 01 	sts	0x0155, r25
     5c4:	80 93 54 01 	sts	0x0154, r24
     5c8:	8e e2       	ldi	r24, 0x2E	; 46
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 67 01 	sts	0x0167, r25
     5d0:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 09 01 	sts	0x0109, r25
     5dc:	80 93 08 01 	sts	0x0108, r24
                        break;
     5e0:	c6 c1       	rjmp	.+908    	; 0x96e <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
     5e2:	ed 81       	ldd	r30, Y+5	; 0x05
     5e4:	fe 81       	ldd	r31, Y+6	; 0x06
     5e6:	e1 30       	cpi	r30, 0x01	; 1
     5e8:	f1 05       	cpc	r31, r1
     5ea:	31 f1       	breq	.+76     	; 0x638 <localize+0x502>
     5ec:	1c f4       	brge	.+6      	; 0x5f4 <localize+0x4be>
     5ee:	ef 2b       	or	r30, r31
     5f0:	51 f0       	breq	.+20     	; 0x606 <localize+0x4d0>
     5f2:	6d c0       	rjmp	.+218    	; 0x6ce <localize+0x598>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	91 05       	cpc	r25, r1
     5fc:	b1 f1       	breq	.+108    	; 0x66a <localize+0x534>
     5fe:	05 97       	sbiw	r24, 0x05	; 5
     600:	09 f0       	breq	.+2      	; 0x604 <localize+0x4ce>
     602:	65 c0       	rjmp	.+202    	; 0x6ce <localize+0x598>
     604:	4b c0       	rjmp	.+150    	; 0x69c <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     606:	86 e3       	ldi	r24, 0x36	; 54
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 6d 01 	sts	0x016D, r25
     60e:	80 93 6c 01 	sts	0x016C, r24
     612:	8a e3       	ldi	r24, 0x3A	; 58
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 53 01 	sts	0x0153, r25
     61a:	80 93 52 01 	sts	0x0152, r24
     61e:	82 e3       	ldi	r24, 0x32	; 50
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 55 01 	sts	0x0155, r25
     626:	80 93 54 01 	sts	0x0154, r24
     62a:	8e e2       	ldi	r24, 0x2E	; 46
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	90 93 67 01 	sts	0x0167, r25
     632:	80 93 66 01 	sts	0x0166, r24
                        break;
     636:	95 c1       	rjmp	.+810    	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 6d 01 	sts	0x016D, r25
     640:	80 93 6c 01 	sts	0x016C, r24
     644:	8a e3       	ldi	r24, 0x3A	; 58
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 53 01 	sts	0x0153, r25
     64c:	80 93 52 01 	sts	0x0152, r24
     650:	86 e3       	ldi	r24, 0x36	; 54
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 55 01 	sts	0x0155, r25
     658:	80 93 54 01 	sts	0x0154, r24
     65c:	8e e2       	ldi	r24, 0x2E	; 46
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	90 93 67 01 	sts	0x0167, r25
     664:	80 93 66 01 	sts	0x0166, r24
                        break;
     668:	7c c1       	rjmp	.+760    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     66a:	86 e3       	ldi	r24, 0x36	; 54
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 6d 01 	sts	0x016D, r25
     672:	80 93 6c 01 	sts	0x016C, r24
     676:	8e e2       	ldi	r24, 0x2E	; 46
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 53 01 	sts	0x0153, r25
     67e:	80 93 52 01 	sts	0x0152, r24
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 55 01 	sts	0x0155, r25
     68a:	80 93 54 01 	sts	0x0154, r24
     68e:	8a e3       	ldi	r24, 0x3A	; 58
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	90 93 67 01 	sts	0x0167, r25
     696:	80 93 66 01 	sts	0x0166, r24
                        break;
     69a:	63 c1       	rjmp	.+710    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     69c:	82 e3       	ldi	r24, 0x32	; 50
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 6d 01 	sts	0x016D, r25
     6a4:	80 93 6c 01 	sts	0x016C, r24
     6a8:	8e e2       	ldi	r24, 0x2E	; 46
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 53 01 	sts	0x0153, r25
     6b0:	80 93 52 01 	sts	0x0152, r24
     6b4:	86 e3       	ldi	r24, 0x36	; 54
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 55 01 	sts	0x0155, r25
     6bc:	80 93 54 01 	sts	0x0154, r24
     6c0:	8a e3       	ldi	r24, 0x3A	; 58
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 67 01 	sts	0x0167, r25
     6c8:	80 93 66 01 	sts	0x0166, r24
                        break;
     6cc:	4a c1       	rjmp	.+660    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6ce:	8a e3       	ldi	r24, 0x3A	; 58
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	90 93 6d 01 	sts	0x016D, r25
     6d6:	80 93 6c 01 	sts	0x016C, r24
     6da:	86 e3       	ldi	r24, 0x36	; 54
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	90 93 53 01 	sts	0x0153, r25
     6e2:	80 93 52 01 	sts	0x0152, r24
     6e6:	82 e3       	ldi	r24, 0x32	; 50
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	90 93 55 01 	sts	0x0155, r25
     6ee:	80 93 54 01 	sts	0x0154, r24
     6f2:	8e e2       	ldi	r24, 0x2E	; 46
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	90 93 67 01 	sts	0x0167, r25
     6fa:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	90 93 09 01 	sts	0x0109, r25
     706:	80 93 08 01 	sts	0x0108, r24
                        break;
     70a:	31 c1       	rjmp	.+610    	; 0x96e <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
     70c:	ed 81       	ldd	r30, Y+5	; 0x05
     70e:	fe 81       	ldd	r31, Y+6	; 0x06
     710:	e2 30       	cpi	r30, 0x02	; 2
     712:	f1 05       	cpc	r31, r1
     714:	31 f1       	breq	.+76     	; 0x762 <localize+0x62c>
     716:	1c f4       	brge	.+6      	; 0x71e <localize+0x5e8>
     718:	ef 2b       	or	r30, r31
     71a:	51 f0       	breq	.+20     	; 0x730 <localize+0x5fa>
     71c:	6d c0       	rjmp	.+218    	; 0x7f8 <localize+0x6c2>
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	91 05       	cpc	r25, r1
     726:	b1 f1       	breq	.+108    	; 0x794 <localize+0x65e>
     728:	05 97       	sbiw	r24, 0x05	; 5
     72a:	09 f0       	breq	.+2      	; 0x72e <localize+0x5f8>
     72c:	65 c0       	rjmp	.+202    	; 0x7f8 <localize+0x6c2>
     72e:	4b c0       	rjmp	.+150    	; 0x7c6 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     730:	86 e3       	ldi	r24, 0x36	; 54
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	90 93 6d 01 	sts	0x016D, r25
     738:	80 93 6c 01 	sts	0x016C, r24
     73c:	8a e3       	ldi	r24, 0x3A	; 58
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 53 01 	sts	0x0153, r25
     744:	80 93 52 01 	sts	0x0152, r24
     748:	8e e2       	ldi	r24, 0x2E	; 46
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	90 93 55 01 	sts	0x0155, r25
     750:	80 93 54 01 	sts	0x0154, r24
     754:	82 e3       	ldi	r24, 0x32	; 50
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	90 93 67 01 	sts	0x0167, r25
     75c:	80 93 66 01 	sts	0x0166, r24
                        break;
     760:	00 c1       	rjmp	.+512    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     762:	8e e2       	ldi	r24, 0x2E	; 46
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	90 93 6d 01 	sts	0x016D, r25
     76a:	80 93 6c 01 	sts	0x016C, r24
     76e:	8a e3       	ldi	r24, 0x3A	; 58
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 53 01 	sts	0x0153, r25
     776:	80 93 52 01 	sts	0x0152, r24
     77a:	86 e3       	ldi	r24, 0x36	; 54
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	90 93 55 01 	sts	0x0155, r25
     782:	80 93 54 01 	sts	0x0154, r24
     786:	82 e3       	ldi	r24, 0x32	; 50
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	90 93 67 01 	sts	0x0167, r25
     78e:	80 93 66 01 	sts	0x0166, r24
                        break;
     792:	e7 c0       	rjmp	.+462    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     794:	86 e3       	ldi	r24, 0x36	; 54
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 6d 01 	sts	0x016D, r25
     79c:	80 93 6c 01 	sts	0x016C, r24
     7a0:	82 e3       	ldi	r24, 0x32	; 50
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 53 01 	sts	0x0153, r25
     7a8:	80 93 52 01 	sts	0x0152, r24
     7ac:	8e e2       	ldi	r24, 0x2E	; 46
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 55 01 	sts	0x0155, r25
     7b4:	80 93 54 01 	sts	0x0154, r24
     7b8:	8a e3       	ldi	r24, 0x3A	; 58
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	90 93 67 01 	sts	0x0167, r25
     7c0:	80 93 66 01 	sts	0x0166, r24
                        break;
     7c4:	ce c0       	rjmp	.+412    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     7c6:	8e e2       	ldi	r24, 0x2E	; 46
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 6d 01 	sts	0x016D, r25
     7ce:	80 93 6c 01 	sts	0x016C, r24
     7d2:	82 e3       	ldi	r24, 0x32	; 50
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	90 93 53 01 	sts	0x0153, r25
     7da:	80 93 52 01 	sts	0x0152, r24
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 55 01 	sts	0x0155, r25
     7e6:	80 93 54 01 	sts	0x0154, r24
     7ea:	8a e3       	ldi	r24, 0x3A	; 58
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	90 93 67 01 	sts	0x0167, r25
     7f2:	80 93 66 01 	sts	0x0166, r24
                        break;
     7f6:	b5 c0       	rjmp	.+362    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7f8:	8a e3       	ldi	r24, 0x3A	; 58
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	90 93 6d 01 	sts	0x016D, r25
     800:	80 93 6c 01 	sts	0x016C, r24
     804:	86 e3       	ldi	r24, 0x36	; 54
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	90 93 53 01 	sts	0x0153, r25
     80c:	80 93 52 01 	sts	0x0152, r24
     810:	82 e3       	ldi	r24, 0x32	; 50
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	90 93 55 01 	sts	0x0155, r25
     818:	80 93 54 01 	sts	0x0154, r24
     81c:	8e e2       	ldi	r24, 0x2E	; 46
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 67 01 	sts	0x0167, r25
     824:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 09 01 	sts	0x0109, r25
     830:	80 93 08 01 	sts	0x0108, r24
                        break;
     834:	9c c0       	rjmp	.+312    	; 0x96e <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     836:	ed 81       	ldd	r30, Y+5	; 0x05
     838:	fe 81       	ldd	r31, Y+6	; 0x06
     83a:	e2 30       	cpi	r30, 0x02	; 2
     83c:	f1 05       	cpc	r31, r1
     83e:	39 f1       	breq	.+78     	; 0x88e <localize+0x758>
     840:	24 f4       	brge	.+8      	; 0x84a <localize+0x714>
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	09 f0       	breq	.+2      	; 0x848 <localize+0x712>
     846:	6e c0       	rjmp	.+220    	; 0x924 <localize+0x7ee>
     848:	09 c0       	rjmp	.+18     	; 0x85c <localize+0x726>
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	9e 81       	ldd	r25, Y+6	; 0x06
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	91 05       	cpc	r25, r1
     852:	b1 f1       	breq	.+108    	; 0x8c0 <localize+0x78a>
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	09 f0       	breq	.+2      	; 0x85a <localize+0x724>
     858:	65 c0       	rjmp	.+202    	; 0x924 <localize+0x7ee>
     85a:	4b c0       	rjmp	.+150    	; 0x8f2 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     85c:	82 e3       	ldi	r24, 0x32	; 50
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	90 93 6d 01 	sts	0x016D, r25
     864:	80 93 6c 01 	sts	0x016C, r24
     868:	8a e3       	ldi	r24, 0x3A	; 58
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	90 93 53 01 	sts	0x0153, r25
     870:	80 93 52 01 	sts	0x0152, r24
     874:	8e e2       	ldi	r24, 0x2E	; 46
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	90 93 55 01 	sts	0x0155, r25
     87c:	80 93 54 01 	sts	0x0154, r24
     880:	86 e3       	ldi	r24, 0x36	; 54
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 67 01 	sts	0x0167, r25
     888:	80 93 66 01 	sts	0x0166, r24
                        break;
     88c:	6a c0       	rjmp	.+212    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     88e:	8e e2       	ldi	r24, 0x2E	; 46
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	90 93 6d 01 	sts	0x016D, r25
     896:	80 93 6c 01 	sts	0x016C, r24
     89a:	8a e3       	ldi	r24, 0x3A	; 58
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	90 93 53 01 	sts	0x0153, r25
     8a2:	80 93 52 01 	sts	0x0152, r24
     8a6:	82 e3       	ldi	r24, 0x32	; 50
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 55 01 	sts	0x0155, r25
     8ae:	80 93 54 01 	sts	0x0154, r24
     8b2:	86 e3       	ldi	r24, 0x36	; 54
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 67 01 	sts	0x0167, r25
     8ba:	80 93 66 01 	sts	0x0166, r24
                        break;
     8be:	51 c0       	rjmp	.+162    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     8c0:	82 e3       	ldi	r24, 0x32	; 50
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 6d 01 	sts	0x016D, r25
     8c8:	80 93 6c 01 	sts	0x016C, r24
     8cc:	86 e3       	ldi	r24, 0x36	; 54
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	90 93 53 01 	sts	0x0153, r25
     8d4:	80 93 52 01 	sts	0x0152, r24
     8d8:	8e e2       	ldi	r24, 0x2E	; 46
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	90 93 55 01 	sts	0x0155, r25
     8e0:	80 93 54 01 	sts	0x0154, r24
     8e4:	8a e3       	ldi	r24, 0x3A	; 58
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	90 93 67 01 	sts	0x0167, r25
     8ec:	80 93 66 01 	sts	0x0166, r24
                        break;
     8f0:	38 c0       	rjmp	.+112    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     8f2:	8e e2       	ldi	r24, 0x2E	; 46
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	90 93 6d 01 	sts	0x016D, r25
     8fa:	80 93 6c 01 	sts	0x016C, r24
     8fe:	86 e3       	ldi	r24, 0x36	; 54
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	90 93 53 01 	sts	0x0153, r25
     906:	80 93 52 01 	sts	0x0152, r24
     90a:	82 e3       	ldi	r24, 0x32	; 50
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	90 93 55 01 	sts	0x0155, r25
     912:	80 93 54 01 	sts	0x0154, r24
     916:	8a e3       	ldi	r24, 0x3A	; 58
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	90 93 67 01 	sts	0x0167, r25
     91e:	80 93 66 01 	sts	0x0166, r24
                        break;
     922:	1f c0       	rjmp	.+62     	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     924:	8a e3       	ldi	r24, 0x3A	; 58
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	90 93 6d 01 	sts	0x016D, r25
     92c:	80 93 6c 01 	sts	0x016C, r24
     930:	86 e3       	ldi	r24, 0x36	; 54
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 53 01 	sts	0x0153, r25
     938:	80 93 52 01 	sts	0x0152, r24
     93c:	82 e3       	ldi	r24, 0x32	; 50
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	90 93 55 01 	sts	0x0155, r25
     944:	80 93 54 01 	sts	0x0154, r24
     948:	8e e2       	ldi	r24, 0x2E	; 46
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 67 01 	sts	0x0167, r25
     950:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 09 01 	sts	0x0109, r25
     95c:	80 93 08 01 	sts	0x0108, r24
                        break;
     960:	06 c0       	rjmp	.+12     	; 0x96e <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     962:	80 91 08 01 	lds	r24, 0x0108
     966:	90 91 09 01 	lds	r25, 0x0109
     96a:	89 2b       	or	r24, r25
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <localize+0x86c>
        *orientation = orientation_prev;
     96e:	80 91 14 01 	lds	r24, 0x0114
     972:	90 91 15 01 	lds	r25, 0x0115
     976:	ef 8d       	ldd	r30, Y+31	; 0x1f
     978:	f8 a1       	ldd	r31, Y+32	; 0x20
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     97e:	80 91 12 01 	lds	r24, 0x0112
     982:	90 91 13 01 	lds	r25, 0x0113
     986:	ef 81       	ldd	r30, Y+7	; 0x07
     988:	f8 85       	ldd	r31, Y+8	; 0x08
     98a:	91 83       	std	Z+1, r25	; 0x01
     98c:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     98e:	80 91 10 01 	lds	r24, 0x0110
     992:	90 91 11 01 	lds	r25, 0x0111
     996:	ed 8d       	ldd	r30, Y+29	; 0x1d
     998:	fe 8d       	ldd	r31, Y+30	; 0x1e
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
        return 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	de c3       	rjmp	.+1980   	; 0x115e <__stack+0x65f>
    }
    
    
    float scale = P_vertical/max_distance;
     9a2:	26 2d       	mov	r18, r6
     9a4:	37 2d       	mov	r19, r7
     9a6:	48 2d       	mov	r20, r8
     9a8:	59 2d       	mov	r21, r9
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	91 e4       	ldi	r25, 0x41	; 65
     9b2:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <__divsf3>
     9b6:	26 2e       	mov	r2, r22
     9b8:	37 2e       	mov	r3, r23
     9ba:	48 2e       	mov	r4, r24
     9bc:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     9be:	e0 90 6c 01 	lds	r14, 0x016C
     9c2:	f0 90 6d 01 	lds	r15, 0x016D
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fe e5       	ldi	r31, 0x5E	; 94
     9ca:	8f 2e       	mov	r8, r31
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	9f 2e       	mov	r9, r31
     9d0:	f0 2d       	mov	r31, r0
     9d2:	f7 01       	movw	r30, r14
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     9e4:	22 2d       	mov	r18, r2
     9e6:	33 2d       	mov	r19, r3
     9e8:	44 2d       	mov	r20, r4
     9ea:	55 2d       	mov	r21, r5
     9ec:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     9f0:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     9f4:	f4 01       	movw	r30, r8
     9f6:	71 83       	std	Z+1, r23	; 0x01
     9f8:	60 83       	st	Z, r22
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f0 e6       	ldi	r31, 0x60	; 96
     9fe:	6f 2e       	mov	r6, r31
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	7f 2e       	mov	r7, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	f7 01       	movw	r30, r14
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	73 81       	ldd	r23, Z+3	; 0x03
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     a18:	22 2d       	mov	r18, r2
     a1a:	33 2d       	mov	r19, r3
     a1c:	44 2d       	mov	r20, r4
     a1e:	55 2d       	mov	r21, r5
     a20:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     a24:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     a28:	f3 01       	movw	r30, r6
     a2a:	71 83       	std	Z+1, r23	; 0x01
     a2c:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     a2e:	00 91 54 01 	lds	r16, 0x0154
     a32:	10 91 55 01 	lds	r17, 0x0155
     a36:	0f 2e       	mov	r0, r31
     a38:	fe e4       	ldi	r31, 0x4E	; 78
     a3a:	af 2e       	mov	r10, r31
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	bf 2e       	mov	r11, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	f8 01       	movw	r30, r16
     a44:	60 81       	ld	r22, Z
     a46:	71 81       	ldd	r23, Z+1	; 0x01
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     a54:	22 2d       	mov	r18, r2
     a56:	33 2d       	mov	r19, r3
     a58:	44 2d       	mov	r20, r4
     a5a:	55 2d       	mov	r21, r5
     a5c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     a60:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     a64:	f5 01       	movw	r30, r10
     a66:	71 83       	std	Z+1, r23	; 0x01
     a68:	60 83       	st	Z, r22
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f0 e5       	ldi	r31, 0x50	; 80
     a6e:	cf 2e       	mov	r12, r31
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	df 2e       	mov	r13, r31
     a74:	f0 2d       	mov	r31, r0
     a76:	f8 01       	movw	r30, r16
     a78:	62 81       	ldd	r22, Z+2	; 0x02
     a7a:	73 81       	ldd	r23, Z+3	; 0x03
     a7c:	88 27       	eor	r24, r24
     a7e:	77 fd       	sbrc	r23, 7
     a80:	80 95       	com	r24
     a82:	98 2f       	mov	r25, r24
     a84:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     a88:	22 2d       	mov	r18, r2
     a8a:	33 2d       	mov	r19, r3
     a8c:	44 2d       	mov	r20, r4
     a8e:	55 2d       	mov	r21, r5
     a90:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     a94:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     a98:	f6 01       	movw	r30, r12
     a9a:	71 83       	std	Z+1, r23	; 0x01
     a9c:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     a9e:	f7 01       	movw	r30, r14
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	f8 01       	movw	r30, r16
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	68 0f       	add	r22, r24
     aac:	79 1f       	adc	r23, r25
     aae:	88 27       	eor	r24, r24
     ab0:	77 fd       	sbrc	r23, 7
     ab2:	80 95       	com	r24
     ab4:	98 2f       	mov	r25, r24
     ab6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     ac6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     aca:	e9 a1       	ldd	r30, Y+33	; 0x21
     acc:	fa a1       	ldd	r31, Y+34	; 0x22
     ace:	71 83       	std	Z+1, r23	; 0x01
     ad0:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     ad2:	a0 91 6c 01 	lds	r26, 0x016C
     ad6:	b0 91 6d 01 	lds	r27, 0x016D
     ada:	e0 91 54 01 	lds	r30, 0x0154
     ade:	f0 91 55 01 	lds	r31, 0x0155
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	6d 91       	ld	r22, X+
     ae6:	7c 91       	ld	r23, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	68 0f       	add	r22, r24
     af0:	79 1f       	adc	r23, r25
     af2:	88 27       	eor	r24, r24
     af4:	77 fd       	sbrc	r23, 7
     af6:	80 95       	com	r24
     af8:	98 2f       	mov	r25, r24
     afa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     b0a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     b0e:	eb a1       	ldd	r30, Y+35	; 0x23
     b10:	fc a1       	ldd	r31, Y+36	; 0x24
     b12:	71 83       	std	Z+1, r23	; 0x01
     b14:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     b16:	f4 01       	movw	r30, r8
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	f5 01       	movw	r30, r10
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	68 0f       	add	r22, r24
     b24:	79 1f       	adc	r23, r25
     b26:	88 27       	eor	r24, r24
     b28:	77 fd       	sbrc	r23, 7
     b2a:	80 95       	com	r24
     b2c:	98 2f       	mov	r25, r24
     b2e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     b3e:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     b42:	1b 01       	movw	r2, r22
     b44:	70 93 73 01 	sts	0x0173, r23
     b48:	60 93 72 01 	sts	0x0172, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     b4c:	f3 01       	movw	r30, r6
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	f6 01       	movw	r30, r12
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	68 0f       	add	r22, r24
     b5a:	79 1f       	adc	r23, r25
     b5c:	88 27       	eor	r24, r24
     b5e:	77 fd       	sbrc	r23, 7
     b60:	80 95       	com	r24
     b62:	98 2f       	mov	r25, r24
     b64:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     b74:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     b78:	8b 01       	movw	r16, r22
     b7a:	70 93 75 01 	sts	0x0175, r23
     b7e:	60 93 74 01 	sts	0x0174, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     b82:	22 9c       	mul	r2, r2
     b84:	b0 01       	movw	r22, r0
     b86:	23 9c       	mul	r2, r3
     b88:	70 0d       	add	r23, r0
     b8a:	70 0d       	add	r23, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	00 9f       	mul	r16, r16
     b90:	c0 01       	movw	r24, r0
     b92:	01 9f       	mul	r16, r17
     b94:	90 0d       	add	r25, r0
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	68 0f       	add	r22, r24
     b9c:	79 1f       	adc	r23, r25
     b9e:	88 27       	eor	r24, r24
     ba0:	77 fd       	sbrc	r23, 7
     ba2:	80 95       	com	r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     baa:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	60 93 56 01 	sts	0x0156, r22
     bb6:	70 93 57 01 	sts	0x0157, r23
     bba:	80 93 58 01 	sts	0x0158, r24
     bbe:	90 93 59 01 	sts	0x0159, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     bc2:	80 91 54 01 	lds	r24, 0x0154
     bc6:	90 91 55 01 	lds	r25, 0x0155
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	e0 91 6c 01 	lds	r30, 0x016C
     bd2:	f0 91 6d 01 	lds	r31, 0x016D
     bd6:	fe 83       	std	Y+6, r31	; 0x06
     bd8:	ed 83       	std	Y+5, r30	; 0x05
     bda:	fc 01       	movw	r30, r24
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	ed 81       	ldd	r30, Y+5	; 0x05
     be2:	fe 81       	ldd	r31, Y+6	; 0x06
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	68 1b       	sub	r22, r24
     bea:	79 0b       	sbc	r23, r25
     bec:	88 27       	eor	r24, r24
     bee:	77 fd       	sbrc	r23, 7
     bf0:	80 95       	com	r24
     bf2:	98 2f       	mov	r25, r24
     bf4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	62 81       	ldd	r22, Z+2	; 0x02
     c02:	73 81       	ldd	r23, Z+3	; 0x03
     c04:	ed 81       	ldd	r30, Y+5	; 0x05
     c06:	fe 81       	ldd	r31, Y+6	; 0x06
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	68 1b       	sub	r22, r24
     c0e:	79 0b       	sbc	r23, r25
     c10:	88 27       	eor	r24, r24
     c12:	77 fd       	sbrc	r23, 7
     c14:	80 95       	com	r24
     c16:	98 2f       	mov	r25, r24
     c18:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <atan2>
     c24:	4b 01       	movw	r8, r22
     c26:	5c 01       	movw	r10, r24
     c28:	60 93 62 01 	sts	0x0162, r22
     c2c:	70 93 63 01 	sts	0x0163, r23
     c30:	80 93 64 01 	sts	0x0164, r24
     c34:	90 93 65 01 	sts	0x0165, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     c38:	ed 81       	ldd	r30, Y+5	; 0x05
     c3a:	fe 81       	ldd	r31, Y+6	; 0x06
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	68 1b       	sub	r22, r24
     c4a:	79 0b       	sbc	r23, r25
     c4c:	88 27       	eor	r24, r24
     c4e:	77 fd       	sbrc	r23, 7
     c50:	80 95       	com	r24
     c52:	98 2f       	mov	r25, r24
     c54:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
     c5c:	ed 81       	ldd	r30, Y+5	; 0x05
     c5e:	fe 81       	ldd	r31, Y+6	; 0x06
     c60:	62 81       	ldd	r22, Z+2	; 0x02
     c62:	73 81       	ldd	r23, Z+3	; 0x03
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	68 1b       	sub	r22, r24
     c6e:	79 0b       	sbc	r23, r25
     c70:	88 27       	eor	r24, r24
     c72:	77 fd       	sbrc	r23, 7
     c74:	80 95       	com	r24
     c76:	98 2f       	mov	r25, r24
     c78:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     c7c:	a7 01       	movw	r20, r14
     c7e:	96 01       	movw	r18, r12
     c80:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <atan2>
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	60 93 5a 01 	sts	0x015A, r22
     c8c:	70 93 5b 01 	sts	0x015B, r23
     c90:	80 93 5c 01 	sts	0x015C, r24
     c94:	90 93 5d 01 	sts	0x015D, r25
    alpha = -atan2(S0[0],S0[1]);
     c98:	b8 01       	movw	r22, r16
     c9a:	88 27       	eor	r24, r24
     c9c:	77 fd       	sbrc	r23, 7
     c9e:	80 95       	com	r24
     ca0:	98 2f       	mov	r25, r24
     ca2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     ca6:	69 83       	std	Y+1, r22	; 0x01
     ca8:	7a 83       	std	Y+2, r23	; 0x02
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	b1 01       	movw	r22, r2
     cb0:	88 27       	eor	r24, r24
     cb2:	77 fd       	sbrc	r23, 7
     cb4:	80 95       	com	r24
     cb6:	98 2f       	mov	r25, r24
     cb8:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	3a 81       	ldd	r19, Y+2	; 0x02
     cc0:	4b 81       	ldd	r20, Y+3	; 0x03
     cc2:	5c 81       	ldd	r21, Y+4	; 0x04
     cc4:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <atan2>
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	b0 58       	subi	r27, 0x80	; 128
     cd2:	80 93 76 01 	sts	0x0176, r24
     cd6:	90 93 77 01 	sts	0x0177, r25
     cda:	a0 93 78 01 	sts	0x0178, r26
     cde:	b0 93 79 01 	sts	0x0179, r27
    
    x_robot_current     = -radius * cos(theta - alpha);
     ce2:	77 fa       	bst	r7, 7
     ce4:	70 94       	com	r7
     ce6:	77 f8       	bld	r7, 7
     ce8:	70 94       	com	r7
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
     cf2:	86 2e       	mov	r8, r22
     cf4:	97 2e       	mov	r9, r23
     cf6:	a8 2e       	mov	r10, r24
     cf8:	b9 2e       	mov	r11, r25
     cfa:	0e 94 29 15 	call	0x2a52	; 0x2a52 <cos>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c3 01       	movw	r24, r6
     d04:	b2 01       	movw	r22, r4
     d06:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     d0a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     d0e:	8b 01       	movw	r16, r22
     d10:	70 93 0d 01 	sts	0x010D, r23
     d14:	60 93 0c 01 	sts	0x010C, r22
    y_robot_current     = -radius * sin(theta - alpha);
     d18:	68 2d       	mov	r22, r8
     d1a:	79 2d       	mov	r23, r9
     d1c:	8a 2d       	mov	r24, r10
     d1e:	9b 2d       	mov	r25, r11
     d20:	0e 94 43 17 	call	0x2e86	; 0x2e86 <sin>
     d24:	9b 01       	movw	r18, r22
     d26:	ac 01       	movw	r20, r24
     d28:	c3 01       	movw	r24, r6
     d2a:	b2 01       	movw	r22, r4
     d2c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     d30:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     d34:	70 93 0b 01 	sts	0x010B, r23
     d38:	60 93 0a 01 	sts	0x010A, r22
    orientation_current = (theta2) * 180/M_PI;
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	44 e3       	ldi	r20, 0x34	; 52
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     d4c:	2b ed       	ldi	r18, 0xDB	; 219
     d4e:	3f e0       	ldi	r19, 0x0F	; 15
     d50:	49 e4       	ldi	r20, 0x49	; 73
     d52:	50 e4       	ldi	r21, 0x40	; 64
     d54:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <__divsf3>
     d58:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     d5c:	70 93 0f 01 	sts	0x010F, r23
     d60:	60 93 0e 01 	sts	0x010E, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
     d64:	c0 90 00 01 	lds	r12, 0x0100
     d68:	d0 90 01 01 	lds	r13, 0x0101
     d6c:	e0 90 02 01 	lds	r14, 0x0102
     d70:	f0 90 03 01 	lds	r15, 0x0103
     d74:	60 91 12 01 	lds	r22, 0x0112
     d78:	70 91 13 01 	lds	r23, 0x0113
     d7c:	88 27       	eor	r24, r24
     d7e:	77 fd       	sbrc	r23, 7
     d80:	80 95       	com	r24
     d82:	98 2f       	mov	r25, r24
     d84:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     d88:	a7 01       	movw	r20, r14
     d8a:	96 01       	movw	r18, r12
     d8c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     d90:	4b 01       	movw	r8, r22
     d92:	5c 01       	movw	r10, r24
     d94:	a7 01       	movw	r20, r14
     d96:	96 01       	movw	r18, r12
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e8       	ldi	r24, 0x80	; 128
     d9e:	9f e3       	ldi	r25, 0x3F	; 63
     da0:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
     da4:	6b 01       	movw	r12, r22
     da6:	7c 01       	movw	r14, r24
     da8:	b8 01       	movw	r22, r16
     daa:	88 27       	eor	r24, r24
     dac:	77 fd       	sbrc	r23, 7
     dae:	80 95       	com	r24
     db0:	98 2f       	mov	r25, r24
     db2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	c5 01       	movw	r24, r10
     dc8:	b4 01       	movw	r22, r8
     dca:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
     dce:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     dd2:	ef 81       	ldd	r30, Y+7	; 0x07
     dd4:	f8 85       	ldd	r31, Y+8	; 0x08
     dd6:	71 83       	std	Z+1, r23	; 0x01
     dd8:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
     dda:	c0 90 00 01 	lds	r12, 0x0100
     dde:	d0 90 01 01 	lds	r13, 0x0101
     de2:	e0 90 02 01 	lds	r14, 0x0102
     de6:	f0 90 03 01 	lds	r15, 0x0103
     dea:	60 91 10 01 	lds	r22, 0x0110
     dee:	70 91 11 01 	lds	r23, 0x0111
     df2:	88 27       	eor	r24, r24
     df4:	77 fd       	sbrc	r23, 7
     df6:	80 95       	com	r24
     df8:	98 2f       	mov	r25, r24
     dfa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     dfe:	a7 01       	movw	r20, r14
     e00:	96 01       	movw	r18, r12
     e02:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     e06:	4b 01       	movw	r8, r22
     e08:	5c 01       	movw	r10, r24
     e0a:	a7 01       	movw	r20, r14
     e0c:	96 01       	movw	r18, r12
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e8       	ldi	r24, 0x80	; 128
     e14:	9f e3       	ldi	r25, 0x3F	; 63
     e16:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
     e1a:	6b 01       	movw	r12, r22
     e1c:	7c 01       	movw	r14, r24
     e1e:	60 91 0a 01 	lds	r22, 0x010A
     e22:	70 91 0b 01 	lds	r23, 0x010B
     e26:	88 27       	eor	r24, r24
     e28:	77 fd       	sbrc	r23, 7
     e2a:	80 95       	com	r24
     e2c:	98 2f       	mov	r25, r24
     e2e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     e32:	9b 01       	movw	r18, r22
     e34:	ac 01       	movw	r20, r24
     e36:	c7 01       	movw	r24, r14
     e38:	b6 01       	movw	r22, r12
     e3a:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
     e4a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     e4e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     e50:	fe 8d       	ldd	r31, Y+30	; 0x1e
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
     e56:	c0 90 00 01 	lds	r12, 0x0100
     e5a:	d0 90 01 01 	lds	r13, 0x0101
     e5e:	e0 90 02 01 	lds	r14, 0x0102
     e62:	f0 90 03 01 	lds	r15, 0x0103
     e66:	60 91 14 01 	lds	r22, 0x0114
     e6a:	70 91 15 01 	lds	r23, 0x0115
     e6e:	88 27       	eor	r24, r24
     e70:	77 fd       	sbrc	r23, 7
     e72:	80 95       	com	r24
     e74:	98 2f       	mov	r25, r24
     e76:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     e7a:	a7 01       	movw	r20, r14
     e7c:	96 01       	movw	r18, r12
     e7e:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     e82:	4b 01       	movw	r8, r22
     e84:	5c 01       	movw	r10, r24
     e86:	a7 01       	movw	r20, r14
     e88:	96 01       	movw	r18, r12
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e8       	ldi	r24, 0x80	; 128
     e90:	9f e3       	ldi	r25, 0x3F	; 63
     e92:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
     e96:	6b 01       	movw	r12, r22
     e98:	7c 01       	movw	r14, r24
     e9a:	60 91 0e 01 	lds	r22, 0x010E
     e9e:	70 91 0f 01 	lds	r23, 0x010F
     ea2:	88 27       	eor	r24, r24
     ea4:	77 fd       	sbrc	r23, 7
     ea6:	80 95       	com	r24
     ea8:	98 2f       	mov	r25, r24
     eaa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	c7 01       	movw	r24, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
     eba:	9b 01       	movw	r18, r22
     ebc:	ac 01       	movw	r20, r24
     ebe:	c5 01       	movw	r24, r10
     ec0:	b4 01       	movw	r22, r8
     ec2:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
     ec6:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
     eca:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ecc:	f8 a1       	ldd	r31, Y+32	; 0x20
     ece:	71 83       	std	Z+1, r23	; 0x01
     ed0:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
     ed2:	ef 81       	ldd	r30, Y+7	; 0x07
     ed4:	f8 85       	ldd	r31, Y+8	; 0x08
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	90 93 13 01 	sts	0x0113, r25
     ede:	80 93 12 01 	sts	0x0112, r24
    y_robot_prev     = *y_robot;
     ee2:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ee4:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	90 93 11 01 	sts	0x0111, r25
     eee:	80 93 10 01 	sts	0x0110, r24
    orientation_prev = *orientation;
     ef2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ef4:	f8 a1       	ldd	r31, Y+32	; 0x20
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	90 93 15 01 	sts	0x0115, r25
     efe:	80 93 14 01 	sts	0x0114, r24
    
    return 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	2c c1       	rjmp	.+600    	; 0x115e <__stack+0x65f>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
     f06:	e0 91 06 01 	lds	r30, 0x0106
     f0a:	f0 91 07 01 	lds	r31, 0x0107
     f0e:	4c 01       	movw	r8, r24
     f10:	8e 1a       	sub	r8, r30
     f12:	9f 0a       	sbc	r9, r31
     f14:	90 92 3b 01 	sts	0x013B, r9
     f18:	80 92 3a 01 	sts	0x013A, r8
     f1c:	80 91 04 01 	lds	r24, 0x0104
     f20:	90 91 05 01 	lds	r25, 0x0105
     f24:	08 1b       	sub	r16, r24
     f26:	19 0b       	sbc	r17, r25
     f28:	10 93 3d 01 	sts	0x013D, r17
     f2c:	00 93 3c 01 	sts	0x013C, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
     f30:	3b 01       	movw	r6, r22
     f32:	6e 1a       	sub	r6, r30
     f34:	7f 0a       	sbc	r7, r31
     f36:	70 92 37 01 	sts	0x0137, r7
     f3a:	60 92 36 01 	sts	0x0136, r6
     f3e:	e8 1a       	sub	r14, r24
     f40:	f9 0a       	sbc	r15, r25
     f42:	f0 92 39 01 	sts	0x0139, r15
     f46:	e0 92 38 01 	sts	0x0138, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
     f4a:	2a 01       	movw	r4, r20
     f4c:	4e 1a       	sub	r4, r30
     f4e:	5f 0a       	sbc	r5, r31
     f50:	50 92 33 01 	sts	0x0133, r5
     f54:	40 92 32 01 	sts	0x0132, r4
     f58:	16 01       	movw	r2, r12
     f5a:	28 1a       	sub	r2, r24
     f5c:	39 0a       	sbc	r3, r25
     f5e:	30 92 35 01 	sts	0x0135, r3
     f62:	20 92 34 01 	sts	0x0134, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
     f66:	69 01       	movw	r12, r18
     f68:	ce 1a       	sub	r12, r30
     f6a:	df 0a       	sbc	r13, r31
     f6c:	d0 92 2f 01 	sts	0x012F, r13
     f70:	c0 92 2e 01 	sts	0x012E, r12
     f74:	a8 1a       	sub	r10, r24
     f76:	b9 0a       	sbc	r11, r25
     f78:	b0 92 31 01 	sts	0x0131, r11
     f7c:	a0 92 30 01 	sts	0x0130, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
     f80:	93 01       	movw	r18, r6
     f82:	28 19       	sub	r18, r8
     f84:	39 09       	sbc	r19, r9
     f86:	c7 01       	movw	r24, r14
     f88:	80 1b       	sub	r24, r16
     f8a:	91 0b       	sbc	r25, r17
     f8c:	22 9f       	mul	r18, r18
     f8e:	b0 01       	movw	r22, r0
     f90:	23 9f       	mul	r18, r19
     f92:	70 0d       	add	r23, r0
     f94:	70 0d       	add	r23, r0
     f96:	11 24       	eor	r1, r1
     f98:	88 9f       	mul	r24, r24
     f9a:	90 01       	movw	r18, r0
     f9c:	89 9f       	mul	r24, r25
     f9e:	30 0d       	add	r19, r0
     fa0:	30 0d       	add	r19, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	62 0f       	add	r22, r18
     fa6:	73 1f       	adc	r23, r19
     fa8:	88 27       	eor	r24, r24
     faa:	77 fd       	sbrc	r23, 7
     fac:	80 95       	com	r24
     fae:	98 2f       	mov	r25, r24
     fb0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     fb4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
     fb8:	60 93 16 01 	sts	0x0116, r22
     fbc:	70 93 17 01 	sts	0x0117, r23
     fc0:	80 93 18 01 	sts	0x0118, r24
     fc4:	90 93 19 01 	sts	0x0119, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
     fc8:	92 01       	movw	r18, r4
     fca:	28 19       	sub	r18, r8
     fcc:	39 09       	sbc	r19, r9
     fce:	c1 01       	movw	r24, r2
     fd0:	80 1b       	sub	r24, r16
     fd2:	91 0b       	sbc	r25, r17
     fd4:	22 9f       	mul	r18, r18
     fd6:	b0 01       	movw	r22, r0
     fd8:	23 9f       	mul	r18, r19
     fda:	70 0d       	add	r23, r0
     fdc:	70 0d       	add	r23, r0
     fde:	11 24       	eor	r1, r1
     fe0:	88 9f       	mul	r24, r24
     fe2:	90 01       	movw	r18, r0
     fe4:	89 9f       	mul	r24, r25
     fe6:	30 0d       	add	r19, r0
     fe8:	30 0d       	add	r19, r0
     fea:	11 24       	eor	r1, r1
     fec:	62 0f       	add	r22, r18
     fee:	73 1f       	adc	r23, r19
     ff0:	88 27       	eor	r24, r24
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	80 95       	com	r24
     ff6:	98 2f       	mov	r25, r24
     ff8:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
     ffc:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    1000:	60 93 1a 01 	sts	0x011A, r22
    1004:	70 93 1b 01 	sts	0x011B, r23
    1008:	80 93 1c 01 	sts	0x011C, r24
    100c:	90 93 1d 01 	sts	0x011D, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    1010:	96 01       	movw	r18, r12
    1012:	28 19       	sub	r18, r8
    1014:	39 09       	sbc	r19, r9
    1016:	c5 01       	movw	r24, r10
    1018:	80 1b       	sub	r24, r16
    101a:	91 0b       	sbc	r25, r17
    101c:	22 9f       	mul	r18, r18
    101e:	b0 01       	movw	r22, r0
    1020:	23 9f       	mul	r18, r19
    1022:	70 0d       	add	r23, r0
    1024:	70 0d       	add	r23, r0
    1026:	11 24       	eor	r1, r1
    1028:	88 9f       	mul	r24, r24
    102a:	90 01       	movw	r18, r0
    102c:	89 9f       	mul	r24, r25
    102e:	30 0d       	add	r19, r0
    1030:	30 0d       	add	r19, r0
    1032:	11 24       	eor	r1, r1
    1034:	62 0f       	add	r22, r18
    1036:	73 1f       	adc	r23, r19
    1038:	88 27       	eor	r24, r24
    103a:	77 fd       	sbrc	r23, 7
    103c:	80 95       	com	r24
    103e:	98 2f       	mov	r25, r24
    1040:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1044:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    1048:	60 93 1e 01 	sts	0x011E, r22
    104c:	70 93 1f 01 	sts	0x011F, r23
    1050:	80 93 20 01 	sts	0x0120, r24
    1054:	90 93 21 01 	sts	0x0121, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    1058:	92 01       	movw	r18, r4
    105a:	26 19       	sub	r18, r6
    105c:	37 09       	sbc	r19, r7
    105e:	c1 01       	movw	r24, r2
    1060:	8e 19       	sub	r24, r14
    1062:	9f 09       	sbc	r25, r15
    1064:	22 9f       	mul	r18, r18
    1066:	b0 01       	movw	r22, r0
    1068:	23 9f       	mul	r18, r19
    106a:	70 0d       	add	r23, r0
    106c:	70 0d       	add	r23, r0
    106e:	11 24       	eor	r1, r1
    1070:	88 9f       	mul	r24, r24
    1072:	90 01       	movw	r18, r0
    1074:	89 9f       	mul	r24, r25
    1076:	30 0d       	add	r19, r0
    1078:	30 0d       	add	r19, r0
    107a:	11 24       	eor	r1, r1
    107c:	62 0f       	add	r22, r18
    107e:	73 1f       	adc	r23, r19
    1080:	88 27       	eor	r24, r24
    1082:	77 fd       	sbrc	r23, 7
    1084:	80 95       	com	r24
    1086:	98 2f       	mov	r25, r24
    1088:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    108c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    1090:	60 93 22 01 	sts	0x0122, r22
    1094:	70 93 23 01 	sts	0x0123, r23
    1098:	80 93 24 01 	sts	0x0124, r24
    109c:	90 93 25 01 	sts	0x0125, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    10a0:	96 01       	movw	r18, r12
    10a2:	26 19       	sub	r18, r6
    10a4:	37 09       	sbc	r19, r7
    10a6:	c5 01       	movw	r24, r10
    10a8:	8e 19       	sub	r24, r14
    10aa:	9f 09       	sbc	r25, r15
    10ac:	22 9f       	mul	r18, r18
    10ae:	b0 01       	movw	r22, r0
    10b0:	23 9f       	mul	r18, r19
    10b2:	70 0d       	add	r23, r0
    10b4:	70 0d       	add	r23, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	88 9f       	mul	r24, r24
    10ba:	90 01       	movw	r18, r0
    10bc:	89 9f       	mul	r24, r25
    10be:	30 0d       	add	r19, r0
    10c0:	30 0d       	add	r19, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	62 0f       	add	r22, r18
    10c6:	73 1f       	adc	r23, r19
    10c8:	88 27       	eor	r24, r24
    10ca:	77 fd       	sbrc	r23, 7
    10cc:	80 95       	com	r24
    10ce:	98 2f       	mov	r25, r24
    10d0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    10d4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    10d8:	60 93 26 01 	sts	0x0126, r22
    10dc:	70 93 27 01 	sts	0x0127, r23
    10e0:	80 93 28 01 	sts	0x0128, r24
    10e4:	90 93 29 01 	sts	0x0129, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    10e8:	c4 18       	sub	r12, r4
    10ea:	d5 08       	sbc	r13, r5
    10ec:	a2 18       	sub	r10, r2
    10ee:	b3 08       	sbc	r11, r3
    10f0:	cc 9c       	mul	r12, r12
    10f2:	b0 01       	movw	r22, r0
    10f4:	cd 9c       	mul	r12, r13
    10f6:	70 0d       	add	r23, r0
    10f8:	70 0d       	add	r23, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	aa 9c       	mul	r10, r10
    10fe:	c0 01       	movw	r24, r0
    1100:	ab 9c       	mul	r10, r11
    1102:	90 0d       	add	r25, r0
    1104:	90 0d       	add	r25, r0
    1106:	11 24       	eor	r1, r1
    1108:	68 0f       	add	r22, r24
    110a:	79 1f       	adc	r23, r25
    110c:	88 27       	eor	r24, r24
    110e:	77 fd       	sbrc	r23, 7
    1110:	80 95       	com	r24
    1112:	98 2f       	mov	r25, r24
    1114:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1118:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    111c:	60 93 2a 01 	sts	0x012A, r22
    1120:	70 93 2b 01 	sts	0x012B, r23
    1124:	80 93 2c 01 	sts	0x012C, r24
    1128:	90 93 2d 01 	sts	0x012D, r25
    112c:	06 e1       	ldi	r16, 0x16	; 22
    112e:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    1130:	e1 2c       	mov	r14, r1
    1132:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    1134:	1e 82       	std	Y+6, r1	; 0x06
    1136:	1d 82       	std	Y+5, r1	; 0x05
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    113c:	21 2c       	mov	r2, r1
    113e:	68 94       	set
    1140:	33 24       	eor	r3, r3
    1142:	36 f8       	bld	r3, 6
    1144:	0f 2e       	mov	r0, r31
    1146:	fc e1       	ldi	r31, 0x1C	; 28
    1148:	4f 2e       	mov	r4, r31
    114a:	f0 2d       	mov	r31, r0
    114c:	0f 2e       	mov	r0, r31
    114e:	f6 e4       	ldi	r31, 0x46	; 70
    1150:	5f 2e       	mov	r5, r31
    1152:	f0 2d       	mov	r31, r0
    1154:	61 2c       	mov	r6, r1
    1156:	71 2c       	mov	r7, r1
    1158:	81 2c       	mov	r8, r1
    115a:	91 2c       	mov	r9, r1
    115c:	37 c8       	rjmp	.-3986   	; 0x1cc <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    115e:	28 96       	adiw	r28, 0x08	; 8
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	2f 90       	pop	r2
    118e:	08 95       	ret

00001190 <set_timer1>:
}

void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    1190:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    1192:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    1194:	84 ef       	ldi	r24, 0xF4	; 244
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	90 93 89 00 	sts	0x0089, r25
    119c:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
    11a0:	10 92 8b 00 	sts	0x008B, r1
    11a4:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    11a8:	10 92 8d 00 	sts	0x008D, r1
    11ac:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    11b0:	a1 e8       	ldi	r26, 0x81	; 129
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	8c 91       	ld	r24, X
    11b6:	80 61       	ori	r24, 0x10	; 16
    11b8:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    11ba:	8c 91       	ld	r24, X
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    11c0:	e0 e8       	ldi	r30, 0x80	; 128
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	82 60       	ori	r24, 0x02	; 2
    11c8:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    11ca:	80 81       	ld	r24, Z
    11cc:	81 60       	ori	r24, 0x01	; 1
    11ce:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    11dc:	80 81       	ld	r24, Z
    11de:	88 60       	ori	r24, 0x08	; 8
    11e0:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    11e2:	80 81       	ld	r24, Z
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    11e8:	8c 91       	ld	r24, X
    11ea:	8b 7f       	andi	r24, 0xFB	; 251
    11ec:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    11ee:	8c 91       	ld	r24, X
    11f0:	8d 7f       	andi	r24, 0xFD	; 253
    11f2:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    11f4:	8c 91       	ld	r24, X
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	8c 93       	st	X, r24
    11fa:	08 95       	ret

000011fc <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
    11fc:	83 ec       	ldi	r24, 0xC3	; 195
    11fe:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    1202:	e3 ec       	ldi	r30, 0xC3	; 195
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    1212:	e2 e7       	ldi	r30, 0x72	; 114
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
    121c:	e1 ec       	ldi	r30, 0xC1	; 193
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	88 60       	ori	r24, 0x08	; 8
    1224:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
    1226:	80 81       	ld	r24, Z
    1228:	84 60       	ori	r24, 0x04	; 4
    122a:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    122c:	80 81       	ld	r24, Z
    122e:	8d 7f       	andi	r24, 0xFD	; 253
    1230:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    1232:	80 81       	ld	r24, Z
    1234:	81 60       	ori	r24, 0x01	; 1
    1236:	80 83       	st	Z, r24
    1238:	08 95       	ret

0000123a <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    123a:	ec e7       	ldi	r30, 0x7C	; 124
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    124a:	aa e7       	ldi	r26, 0x7A	; 122
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	8c 91       	ld	r24, X
    1250:	84 60       	ori	r24, 0x04	; 4
    1252:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    1254:	8c 91       	ld	r24, X
    1256:	82 60       	ori	r24, 0x02	; 2
    1258:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    125a:	8c 91       	ld	r24, X
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    1260:	ee e7       	ldi	r30, 0x7E	; 126
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    126a:	80 81       	ld	r24, Z
    126c:	82 60       	ori	r24, 0x02	; 2
    126e:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    1270:	80 81       	ld	r24, Z
    1272:	80 61       	ori	r24, 0x10	; 16
    1274:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    1276:	80 81       	ld	r24, Z
    1278:	80 62       	ori	r24, 0x20	; 32
    127a:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    127c:	80 81       	ld	r24, Z
    127e:	80 64       	ori	r24, 0x40	; 64
    1280:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    1288:	ed e7       	ldi	r30, 0x7D	; 125
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    1292:	80 81       	ld	r24, Z
    1294:	82 60       	ori	r24, 0x02	; 2
    1296:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    1298:	8c 91       	ld	r24, X
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8c 93       	st	X, r24
    129e:	08 95       	ret

000012a0 <init_ports>:
}

void init_ports(void)
{
    //B0 and B1 as outputs
    set(DDRB,0);
    12a0:	20 9a       	sbi	0x04, 0	; 4
    set(DDRB,1);
    12a2:	21 9a       	sbi	0x04, 1	; 4
    set(PORTB,0);
    12a4:	28 9a       	sbi	0x05, 0	; 5
    clear(PORTB,1);
    12a6:	29 98       	cbi	0x05, 1	; 5
    
    //Set B2 as input
    clear(DDRB,2);
    12a8:	22 98       	cbi	0x04, 2	; 4
    12aa:	08 95       	ret

000012ac <stop_motor>:
}


void stop_motor(void)
{
    OCR1B = 0;
    12ac:	10 92 8b 00 	sts	0x008B, r1
    12b0:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    12b4:	10 92 8d 00 	sts	0x008D, r1
    12b8:	10 92 8c 00 	sts	0x008C, r1
    12bc:	08 95       	ret

000012be <turn_left>:
}

void turn_left(void)
{
    set(PORTB,0);
    12be:	28 9a       	sbi	0x05, 0	; 5
    set(PORTB,1);
    12c0:	29 9a       	sbi	0x05, 1	; 5
	OCR1B = PWM_SPEED_TURN_RGHT;
    12c2:	8c e7       	ldi	r24, 0x7C	; 124
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	90 93 8b 00 	sts	0x008B, r25
    12ca:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    12ce:	90 93 8d 00 	sts	0x008D, r25
    12d2:	80 93 8c 00 	sts	0x008C, r24
    12d6:	08 95       	ret

000012d8 <turn_right>:
	//m_green(OFF);
}

void turn_right(void)
{
    clear(PORTB,0);
    12d8:	28 98       	cbi	0x05, 0	; 5
    clear(PORTB,1);
    12da:	29 98       	cbi	0x05, 1	; 5
    OCR1B = PWM_SPEED_TURN_RGHT;
    12dc:	8c e7       	ldi	r24, 0x7C	; 124
    12de:	91 e0       	ldi	r25, 0x01	; 1
    12e0:	90 93 8b 00 	sts	0x008B, r25
    12e4:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    12e8:	90 93 8d 00 	sts	0x008D, r25
    12ec:	80 93 8c 00 	sts	0x008C, r24
    12f0:	08 95       	ret

000012f2 <go_fwd>:
    OCR1C = PWM_SPEED_FWD_LFT;
}

void go_fwd(void)
{
	clear(PORTB,0);
    12f2:	28 98       	cbi	0x05, 0	; 5
	set(PORTB,1);
    12f4:	29 9a       	sbi	0x05, 1	; 5
	OCR1B = PWM_SPEED_FWD_RGHT;
    12f6:	8c e7       	ldi	r24, 0x7C	; 124
    12f8:	91 e0       	ldi	r25, 0x01	; 1
    12fa:	90 93 8b 00 	sts	0x008B, r25
    12fe:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_FWD_LFT;
    1302:	90 93 8d 00 	sts	0x008D, r25
    1306:	80 93 8c 00 	sts	0x008C, r24
    130a:	08 95       	ret

0000130c <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
    1314:	cc 56       	subi	r28, 0x6C	; 108
    1316:	d1 09       	sbc	r29, r1
    1318:	0f b6       	in	r0, 0x3f	; 63
    131a:	f8 94       	cli
    131c:	de bf       	out	0x3e, r29	; 62
    131e:	0f be       	out	0x3f, r0	; 63
    1320:	cd bf       	out	0x3d, r28	; 61
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1322:	1a 82       	std	Y+2, r1	; 0x02
    1324:	19 82       	std	Y+1, r1	; 0x01
    1326:	1c 82       	std	Y+4, r1	; 0x04
    1328:	1b 82       	std	Y+3, r1	; 0x03
	int timer_switch = 0;
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
    132a:	fe 01       	movw	r30, r28
    132c:	35 96       	adiw	r30, 0x05	; 5
    132e:	8a e0       	ldi	r24, 0x0A	; 10
    1330:	df 01       	movw	r26, r30
    1332:	1d 92       	st	X+, r1
    1334:	8a 95       	dec	r24
    1336:	e9 f7       	brne	.-6      	; 0x1332 <main+0x26>
		
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
    1338:	fe 01       	movw	r30, r28
    133a:	3f 96       	adiw	r30, 0x0f	; 15
    133c:	8a e1       	ldi	r24, 0x1A	; 26
    133e:	df 01       	movw	r26, r30
    1340:	1d 92       	st	X+, r1
    1342:	8a 95       	dec	r24
    1344:	e9 f7       	brne	.-6      	; 0x1340 <main+0x34>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0, theta_robot = 0;
    1346:	23 96       	adiw	r28, 0x03	; 3
    1348:	1f ae       	std	Y+63, r1	; 0x3f
    134a:	1e ae       	std	Y+62, r1	; 0x3e
    134c:	23 97       	sbiw	r28, 0x03	; 3
    134e:	25 96       	adiw	r28, 0x05	; 5
    1350:	1f ae       	std	Y+63, r1	; 0x3f
    1352:	1e ae       	std	Y+62, r1	; 0x3e
    1354:	25 97       	sbiw	r28, 0x05	; 5
    1356:	27 96       	adiw	r28, 0x07	; 7
    1358:	1f ae       	std	Y+63, r1	; 0x3f
    135a:	1e ae       	std	Y+62, r1	; 0x3e
    135c:	27 97       	sbiw	r28, 0x07	; 7
    div_t aux_conversion;
    
    //Set the clock system prescaler
    m_clockdivide(N_CLOCK);
    135e:	e1 e6       	ldi	r30, 0x61	; 97
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 e8       	ldi	r24, 0x80	; 128
    1364:	80 83       	st	Z, r24
    1366:	10 82       	st	Z, r1
    
    //Turn off the LEDs
    m_green(OFF);
    1368:	6a 9a       	sbi	0x0d, 2	; 13
    136a:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);
    136c:	6e 9a       	sbi	0x0d, 6	; 13
    136e:	76 9a       	sbi	0x0e, 6	; 14
    
    m_red(ON);
    1370:	6e 9a       	sbi	0x0d, 6	; 13
    1372:	76 98       	cbi	0x0e, 6	; 14
    //Initialize bus
    m_bus_init();
    1374:	0e 94 4f 11 	call	0x229e	; 0x229e <m_bus_init>
    
    //Initialize ports
    init_ports();
    1378:	0e 94 50 09 	call	0x12a0	; 0x12a0 <init_ports>
    
    //Set timer 1 for motor
    set_timer1();
    137c:	0e 94 c8 08 	call	0x1190	; 0x1190 <set_timer1>
    
    //Set timer 3 for solenoid
    //set_timer3();
    
    //Set timer to every 0.1 s (10 Hz)
    set_timer4();
    1380:	0e 94 fe 08 	call	0x11fc	; 0x11fc <set_timer4>
    
    //Set the ADC
    init_analog();
    1384:	0e 94 1d 09 	call	0x123a	; 0x123a <init_analog>
    
    //Initialize wii camera
    char aux = 0;
    while(!aux)
    {
        aux = m_wii_open();
    1388:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <m_wii_open>
    //Set the ADC
    init_analog();
    
    //Initialize wii camera
    char aux = 0;
    while(!aux)
    138c:	88 23       	and	r24, r24
    138e:	e1 f3       	breq	.-8      	; 0x1388 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1390:	bf e3       	ldi	r27, 0x3F	; 63
    1392:	ed e0       	ldi	r30, 0x0D	; 13
    1394:	f3 e0       	ldi	r31, 0x03	; 3
    1396:	b1 50       	subi	r27, 0x01	; 1
    1398:	e0 40       	sbci	r30, 0x00	; 0
    139a:	f0 40       	sbci	r31, 0x00	; 0
    139c:	e1 f7       	brne	.-8      	; 0x1396 <main+0x8a>
    139e:	00 c0       	rjmp	.+0      	; 0x13a0 <main+0x94>
    13a0:	00 00       	nop
    {
        aux = m_wii_open();
    }
    
    m_wait(1000);
    m_red(OFF);
    13a2:	6e 9a       	sbi	0x0d, 6	; 13
    13a4:	76 9a       	sbi	0x0e, 6	; 14
    
    //Open the channel
    m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
    13a6:	4a e0       	ldi	r20, 0x0A	; 10
    13a8:	62 e4       	ldi	r22, 0x42	; 66
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	0e 94 60 11 	call	0x22c0	; 0x22c0 <m_rf_open>
		
    //Enable interruptions
    sei();
    13b0:	78 94       	sei
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
	int timer_switch = 0;
    13b2:	61 96       	adiw	r28, 0x11	; 17
    13b4:	1f ae       	std	Y+63, r1	; 0x3f
    13b6:	1e ae       	std	Y+62, r1	; 0x3e
    13b8:	61 97       	sbiw	r28, 0x11	; 17
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    13ba:	63 96       	adiw	r28, 0x13	; 19
    13bc:	1f ae       	std	Y+63, r1	; 0x3f
    13be:	1e ae       	std	Y+62, r1	; 0x3e
    13c0:	63 97       	sbiw	r28, 0x13	; 19
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
    13c2:	67 96       	adiw	r28, 0x17	; 23
    13c4:	1f ae       	std	Y+63, r1	; 0x3f
    13c6:	1e ae       	std	Y+62, r1	; 0x3e
    13c8:	67 97       	sbiw	r28, 0x17	; 23
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    13ca:	a4 96       	adiw	r28, 0x24	; 36
    13cc:	1f ae       	std	Y+63, r1	; 0x3f
    13ce:	a4 97       	sbiw	r28, 0x24	; 36
    13d0:	a6 96       	adiw	r28, 0x26	; 38
    13d2:	1f ae       	std	Y+63, r1	; 0x3f
    13d4:	a6 97       	sbiw	r28, 0x26	; 38
    13d6:	a7 96       	adiw	r28, 0x27	; 39
    13d8:	1f ae       	std	Y+63, r1	; 0x3f
    13da:	a7 97       	sbiw	r28, 0x27	; 39
    13dc:	a8 96       	adiw	r28, 0x28	; 40
    13de:	1f ae       	std	Y+63, r1	; 0x3f
    13e0:	a8 97       	sbiw	r28, 0x28	; 40
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    13e2:	6b 96       	adiw	r28, 0x1b	; 27
    13e4:	1c ae       	std	Y+60, r1	; 0x3c
    13e6:	1d ae       	std	Y+61, r1	; 0x3d
    13e8:	1e ae       	std	Y+62, r1	; 0x3e
    13ea:	1f ae       	std	Y+63, r1	; 0x3f
    13ec:	6b 97       	sbiw	r28, 0x1b	; 27
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    13ee:	6c 96       	adiw	r28, 0x1c	; 28
    13f0:	1f ae       	std	Y+63, r1	; 0x3f
    13f2:	6c 97       	sbiw	r28, 0x1c	; 28
    13f4:	6d 96       	adiw	r28, 0x1d	; 29
    13f6:	1f ae       	std	Y+63, r1	; 0x3f
    13f8:	6d 97       	sbiw	r28, 0x1d	; 29
    13fa:	6e 96       	adiw	r28, 0x1e	; 30
    13fc:	1f ae       	std	Y+63, r1	; 0x3f
    13fe:	6e 97       	sbiw	r28, 0x1e	; 30
    1400:	6f 96       	adiw	r28, 0x1f	; 31
    1402:	1f ae       	std	Y+63, r1	; 0x3f
    1404:	6f 97       	sbiw	r28, 0x1f	; 31
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    1406:	a0 96       	adiw	r28, 0x20	; 32
    1408:	1f ae       	std	Y+63, r1	; 0x3f
    140a:	a0 97       	sbiw	r28, 0x20	; 32
    140c:	a1 96       	adiw	r28, 0x21	; 33
    140e:	1f ae       	std	Y+63, r1	; 0x3f
    1410:	a1 97       	sbiw	r28, 0x21	; 33
    1412:	a2 96       	adiw	r28, 0x22	; 34
    1414:	1f ae       	std	Y+63, r1	; 0x3f
    1416:	a2 97       	sbiw	r28, 0x22	; 34
    1418:	a3 96       	adiw	r28, 0x23	; 35
    141a:	1f ae       	std	Y+63, r1	; 0x3f
    141c:	a3 97       	sbiw	r28, 0x23	; 35
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    141e:	41 2c       	mov	r4, r1
    1420:	51 2c       	mov	r5, r1
    1422:	32 01       	movw	r6, r4
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
    1424:	ab 96       	adiw	r28, 0x2b	; 43
    1426:	1f ae       	std	Y+63, r1	; 0x3f
    1428:	1e ae       	std	Y+62, r1	; 0x3e
    142a:	ab 97       	sbiw	r28, 0x2b	; 43
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    142c:	65 96       	adiw	r28, 0x15	; 21
    142e:	1f ae       	std	Y+63, r1	; 0x3f
    1430:	1e ae       	std	Y+62, r1	; 0x3e
    1432:	65 97       	sbiw	r28, 0x15	; 21
int main(void)
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    1434:	21 2c       	mov	r2, r1
    1436:	31 2c       	mov	r3, r1
        
        //If data received correctly
        if (wii_OK)
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1438:	9e 01       	movw	r18, r28
    143a:	2d 5f       	subi	r18, 0xFD	; 253
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	29 96       	adiw	r28, 0x09	; 9
    1440:	3f af       	std	Y+63, r19	; 0x3f
    1442:	2e af       	std	Y+62, r18	; 0x3e
    1444:	29 97       	sbiw	r28, 0x09	; 9
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	2b 96       	adiw	r28, 0x0b	; 11
    144c:	9f af       	std	Y+63, r25	; 0x3f
    144e:	8e af       	std	Y+62, r24	; 0x3e
    1450:	2b 97       	sbiw	r28, 0x0b	; 11
    1452:	de 01       	movw	r26, r28
    1454:	ab 5b       	subi	r26, 0xBB	; 187
    1456:	bf 4f       	sbci	r27, 0xFF	; 255
    1458:	2d 96       	adiw	r28, 0x0d	; 13
    145a:	bf af       	std	Y+63, r27	; 0x3f
    145c:	ae af       	std	Y+62, r26	; 0x3e
    145e:	2d 97       	sbiw	r28, 0x0d	; 13
    1460:	fe 01       	movw	r30, r28
    1462:	ed 5b       	subi	r30, 0xBD	; 189
    1464:	ff 4f       	sbci	r31, 0xFF	; 255
    1466:	2f 96       	adiw	r28, 0x0f	; 15
    1468:	ff af       	std	Y+63, r31	; 0x3f
    146a:	ee af       	std	Y+62, r30	; 0x3e
    146c:	2f 97       	sbiw	r28, 0x0f	; 15
    146e:	62 c0       	rjmp	.+196    	; 0x1534 <main+0x228>
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
                        status_go_to_goal = 2;
    1470:	68 94       	set
    1472:	22 24       	eor	r2, r2
    1474:	21 f8       	bld	r2, 1
    1476:	31 2c       	mov	r3, r1
    1478:	5d c0       	rjmp	.+186    	; 0x1534 <main+0x228>
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
						{
                            turn_right();
							commands_var = 4;
						}else
							commands_var = 0;
    147a:	63 96       	adiw	r28, 0x13	; 19
    147c:	1f ae       	std	Y+63, r1	; 0x3f
    147e:	1e ae       	std	Y+62, r1	; 0x3e
    1480:	63 97       	sbiw	r28, 0x13	; 19
    1482:	58 c0       	rjmp	.+176    	; 0x1534 <main+0x228>
    1484:	63 96       	adiw	r28, 0x13	; 19
    1486:	1f ae       	std	Y+63, r1	; 0x3f
    1488:	1e ae       	std	Y+62, r1	; 0x3e
    148a:	63 97       	sbiw	r28, 0x13	; 19
    148c:	53 c0       	rjmp	.+166    	; 0x1534 <main+0x228>
    148e:	63 96       	adiw	r28, 0x13	; 19
    1490:	1f ae       	std	Y+63, r1	; 0x3f
    1492:	1e ae       	std	Y+62, r1	; 0x3e
    1494:	63 97       	sbiw	r28, 0x13	; 19
    1496:	4e c0       	rjmp	.+156    	; 0x1534 <main+0x228>
                    }
                }else if (status_go_to_goal == 2)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 3;
    1498:	0f 2e       	mov	r0, r31
    149a:	f3 e0       	ldi	r31, 0x03	; 3
    149c:	2f 2e       	mov	r2, r31
    149e:	31 2c       	mov	r3, r1
    14a0:	f0 2d       	mov	r31, r0
    14a2:	48 c0       	rjmp	.+144    	; 0x1534 <main+0x228>
                    else
                    {
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
                            status_go_to_goal = 0;
    14a4:	21 2c       	mov	r2, r1
    14a6:	31 2c       	mov	r3, r1
    14a8:	45 c0       	rjmp	.+138    	; 0x1534 <main+0x228>
    14aa:	21 2c       	mov	r2, r1
    14ac:	31 2c       	mov	r3, r1
    14ae:	42 c0       	rjmp	.+132    	; 0x1534 <main+0x228>
                
                if (status_go_to_goal == 0)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 1;
    14b0:	22 24       	eor	r2, r2
    14b2:	23 94       	inc	r2
    14b4:	31 2c       	mov	r3, r1
    14b6:	3e c0       	rjmp	.+124    	; 0x1534 <main+0x228>
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
                            commands_var = 0;
    14b8:	63 96       	adiw	r28, 0x13	; 19
    14ba:	1f ae       	std	Y+63, r1	; 0x3f
    14bc:	1e ae       	std	Y+62, r1	; 0x3e
    14be:	63 97       	sbiw	r28, 0x13	; 19
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    14c0:	67 96       	adiw	r28, 0x17	; 23
    14c2:	1f ae       	std	Y+63, r1	; 0x3f
    14c4:	1e ae       	std	Y+62, r1	; 0x3e
    14c6:	67 97       	sbiw	r28, 0x17	; 23
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
    14c8:	a4 96       	adiw	r28, 0x24	; 36
    14ca:	1f ae       	std	Y+63, r1	; 0x3f
    14cc:	a4 97       	sbiw	r28, 0x24	; 36
    14ce:	a6 96       	adiw	r28, 0x26	; 38
    14d0:	1f ae       	std	Y+63, r1	; 0x3f
    14d2:	a6 97       	sbiw	r28, 0x26	; 38
    14d4:	a7 96       	adiw	r28, 0x27	; 39
    14d6:	1f ae       	std	Y+63, r1	; 0x3f
    14d8:	a7 97       	sbiw	r28, 0x27	; 39
    14da:	a8 96       	adiw	r28, 0x28	; 40
    14dc:	1f ae       	std	Y+63, r1	; 0x3f
    14de:	a8 97       	sbiw	r28, 0x28	; 40
    14e0:	29 c0       	rjmp	.+82     	; 0x1534 <main+0x228>
                            bank = 0;
                            commands_var = 0;
    14e2:	63 96       	adiw	r28, 0x13	; 19
    14e4:	1f ae       	std	Y+63, r1	; 0x3f
    14e6:	1e ae       	std	Y+62, r1	; 0x3e
    14e8:	63 97       	sbiw	r28, 0x13	; 19
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    14ea:	67 96       	adiw	r28, 0x17	; 23
    14ec:	1f ae       	std	Y+63, r1	; 0x3f
    14ee:	1e ae       	std	Y+62, r1	; 0x3e
    14f0:	67 97       	sbiw	r28, 0x17	; 23
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
    14f2:	a4 96       	adiw	r28, 0x24	; 36
    14f4:	1f ae       	std	Y+63, r1	; 0x3f
    14f6:	a4 97       	sbiw	r28, 0x24	; 36
    14f8:	a6 96       	adiw	r28, 0x26	; 38
    14fa:	1f ae       	std	Y+63, r1	; 0x3f
    14fc:	a6 97       	sbiw	r28, 0x26	; 38
    14fe:	a7 96       	adiw	r28, 0x27	; 39
    1500:	1f ae       	std	Y+63, r1	; 0x3f
    1502:	a7 97       	sbiw	r28, 0x27	; 39
    1504:	a8 96       	adiw	r28, 0x28	; 40
    1506:	1f ae       	std	Y+63, r1	; 0x3f
    1508:	a8 97       	sbiw	r28, 0x28	; 40
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <main+0x228>
                            bank = 0;
                            commands_var = 0;
    150c:	63 96       	adiw	r28, 0x13	; 19
    150e:	1f ae       	std	Y+63, r1	; 0x3f
    1510:	1e ae       	std	Y+62, r1	; 0x3e
    1512:	63 97       	sbiw	r28, 0x13	; 19
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    1514:	67 96       	adiw	r28, 0x17	; 23
    1516:	1f ae       	std	Y+63, r1	; 0x3f
    1518:	1e ae       	std	Y+62, r1	; 0x3e
    151a:	67 97       	sbiw	r28, 0x17	; 23
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
    151c:	a4 96       	adiw	r28, 0x24	; 36
    151e:	1f ae       	std	Y+63, r1	; 0x3f
    1520:	a4 97       	sbiw	r28, 0x24	; 36
    1522:	a6 96       	adiw	r28, 0x26	; 38
    1524:	1f ae       	std	Y+63, r1	; 0x3f
    1526:	a6 97       	sbiw	r28, 0x26	; 38
    1528:	a7 96       	adiw	r28, 0x27	; 39
    152a:	1f ae       	std	Y+63, r1	; 0x3f
    152c:	a7 97       	sbiw	r28, 0x27	; 39
    152e:	a8 96       	adiw	r28, 0x28	; 40
    1530:	1f ae       	std	Y+63, r1	; 0x3f
    1532:	a8 97       	sbiw	r28, 0x28	; 40
        }*/
		
		
        //LOCALIZATION CODE
        //Get the blobs
        cli();
    1534:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);
    1536:	ce 01       	movw	r24, r28
    1538:	89 96       	adiw	r24, 0x29	; 41
    153a:	0e 94 c6 12 	call	0x258c	; 0x258c <m_wii_read>
        sei();
    153e:	78 94       	sei
        
        //If data received correctly
        if (wii_OK)
    1540:	88 23       	and	r24, r24
    1542:	f1 f1       	breq	.+124    	; 0x15c0 <main+0x2b4>
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1544:	ad ac       	ldd	r10, Y+61	; 0x3d
    1546:	be ac       	ldd	r11, Y+62	; 0x3e
    1548:	cf a8       	ldd	r12, Y+55	; 0x37
    154a:	d8 ac       	ldd	r13, Y+56	; 0x38
    154c:	e9 a8       	ldd	r14, Y+49	; 0x31
    154e:	fa a8       	ldd	r15, Y+50	; 0x32
    1550:	0b a5       	ldd	r16, Y+43	; 0x2b
    1552:	1c a5       	ldd	r17, Y+44	; 0x2c
    1554:	2b ad       	ldd	r18, Y+59	; 0x3b
    1556:	3c ad       	ldd	r19, Y+60	; 0x3c
    1558:	4d a9       	ldd	r20, Y+53	; 0x35
    155a:	5e a9       	ldd	r21, Y+54	; 0x36
    155c:	6f a5       	ldd	r22, Y+47	; 0x2f
    155e:	78 a9       	ldd	r23, Y+48	; 0x30
    1560:	29 96       	adiw	r28, 0x09	; 9
    1562:	ff ad       	ldd	r31, Y+63	; 0x3f
    1564:	29 97       	sbiw	r28, 0x09	; 9
    1566:	ff 93       	push	r31
    1568:	28 96       	adiw	r28, 0x08	; 8
    156a:	8f ad       	ldd	r24, Y+63	; 0x3f
    156c:	28 97       	sbiw	r28, 0x08	; 8
    156e:	8f 93       	push	r24
    1570:	2b 96       	adiw	r28, 0x0b	; 11
    1572:	9f ad       	ldd	r25, Y+63	; 0x3f
    1574:	2b 97       	sbiw	r28, 0x0b	; 11
    1576:	9f 93       	push	r25
    1578:	2a 96       	adiw	r28, 0x0a	; 10
    157a:	af ad       	ldd	r26, Y+63	; 0x3f
    157c:	2a 97       	sbiw	r28, 0x0a	; 10
    157e:	af 93       	push	r26
    1580:	2d 96       	adiw	r28, 0x0d	; 13
    1582:	bf ad       	ldd	r27, Y+63	; 0x3f
    1584:	2d 97       	sbiw	r28, 0x0d	; 13
    1586:	bf 93       	push	r27
    1588:	2c 96       	adiw	r28, 0x0c	; 12
    158a:	ef ad       	ldd	r30, Y+63	; 0x3f
    158c:	2c 97       	sbiw	r28, 0x0c	; 12
    158e:	ef 93       	push	r30
    1590:	2f 96       	adiw	r28, 0x0f	; 15
    1592:	ff ad       	ldd	r31, Y+63	; 0x3f
    1594:	2f 97       	sbiw	r28, 0x0f	; 15
    1596:	ff 93       	push	r31
    1598:	2e 96       	adiw	r28, 0x0e	; 14
    159a:	8f ad       	ldd	r24, Y+63	; 0x3f
    159c:	2e 97       	sbiw	r28, 0x0e	; 14
    159e:	8f 93       	push	r24
    15a0:	0f 2e       	mov	r0, r31
    15a2:	f1 e4       	ldi	r31, 0x41	; 65
    15a4:	8f 2e       	mov	r8, r31
    15a6:	91 2c       	mov	r9, r1
    15a8:	f0 2d       	mov	r31, r0
    15aa:	8c 0e       	add	r8, r28
    15ac:	9d 1e       	adc	r9, r29
    15ae:	89 a5       	ldd	r24, Y+41	; 0x29
    15b0:	9a a5       	ldd	r25, Y+42	; 0x2a
    15b2:	0e 94 9b 00 	call	0x136	; 0x136 <localize>
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
         }
         */
        
        
        //SEND COMMANDS
        if (flag_timer == 1)
    15c0:	80 91 4c 01 	lds	r24, 0x014C
    15c4:	90 91 4d 01 	lds	r25, 0x014D
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	09 f0       	breq	.+2      	; 0x15ce <main+0x2c2>
    15cc:	e4 c0       	rjmp	.+456    	; 0x1796 <main+0x48a>
        {
			if (timer_switch == 0)
    15ce:	61 96       	adiw	r28, 0x11	; 17
    15d0:	ee ad       	ldd	r30, Y+62	; 0x3e
    15d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    15d4:	61 97       	sbiw	r28, 0x11	; 17
    15d6:	ef 2b       	or	r30, r31
    15d8:	c1 f4       	brne	.+48     	; 0x160a <main+0x2fe>
			{
				//Create the packet to send to system
				send_buffer[0] = ALEX_ADDRESS_SYSTEM;
    15da:	82 e4       	ldi	r24, 0x42	; 66
    15dc:	8d 83       	std	Y+5, r24	; 0x05
				send_buffer[1] = x_robot;
    15de:	22 96       	adiw	r28, 0x02	; 2
    15e0:	8f ad       	ldd	r24, Y+63	; 0x3f
    15e2:	22 97       	sbiw	r28, 0x02	; 2
    15e4:	8e 83       	std	Y+6, r24	; 0x06
				send_buffer[2] = y_robot;
    15e6:	24 96       	adiw	r28, 0x04	; 4
    15e8:	8f ad       	ldd	r24, Y+63	; 0x3f
    15ea:	24 97       	sbiw	r28, 0x04	; 4
    15ec:	8f 83       	std	Y+7, r24	; 0x07
				
				m_rf_send(SEN_ADDRESS_SYSTEM,send_buffer,PACKET_LENGTH_SYSTEM);
    15ee:	4a e0       	ldi	r20, 0x0A	; 10
    15f0:	be 01       	movw	r22, r28
    15f2:	6b 5f       	subi	r22, 0xFB	; 251
    15f4:	7f 4f       	sbci	r23, 0xFF	; 255
    15f6:	8a ed       	ldi	r24, 0xDA	; 218
    15f8:	0e 94 17 12 	call	0x242e	; 0x242e <m_rf_send>
				timer_switch = 1;
    15fc:	21 e0       	ldi	r18, 0x01	; 1
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	61 96       	adiw	r28, 0x11	; 17
    1602:	3f af       	std	Y+63, r19	; 0x3f
    1604:	2e af       	std	Y+62, r18	; 0x3e
    1606:	61 97       	sbiw	r28, 0x11	; 17
    1608:	c2 c0       	rjmp	.+388    	; 0x178e <main+0x482>
			}else
			{			
            		
				//DEBUG COMMANDS SENDING
				//Open the channel
				m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    160a:	4a e1       	ldi	r20, 0x1A	; 26
    160c:	69 e4       	ldi	r22, 0x49	; 73
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	0e 94 60 11 	call	0x22c0	; 0x22c0 <m_rf_open>
		
				output_buffer[0]= state;
    1614:	aa e4       	ldi	r26, 0x4A	; 74
    1616:	b1 e0       	ldi	r27, 0x01	; 1
    1618:	8c 91       	ld	r24, X
    161a:	8f 87       	std	Y+15, r24	; 0x0f
				output_buffer[1]= x_robot;
    161c:	22 96       	adiw	r28, 0x02	; 2
    161e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1620:	22 97       	sbiw	r28, 0x02	; 2
    1622:	88 8b       	std	Y+16, r24	; 0x10
				output_buffer[2]= y_robot;
    1624:	24 96       	adiw	r28, 0x04	; 4
    1626:	8f ad       	ldd	r24, Y+63	; 0x3f
    1628:	24 97       	sbiw	r28, 0x04	; 4
    162a:	89 8b       	std	Y+17, r24	; 0x11
				aux_conversion = div(theta_robot,128);
    162c:	60 e8       	ldi	r22, 0x80	; 128
    162e:	70 e0       	ldi	r23, 0x00	; 0
    1630:	27 96       	adiw	r28, 0x07	; 7
    1632:	8e ad       	ldd	r24, Y+62	; 0x3e
    1634:	9f ad       	ldd	r25, Y+63	; 0x3f
    1636:	27 97       	sbiw	r28, 0x07	; 7
    1638:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
			
				//Put packets together for sending
				output_buffer[3] = (signed char)aux_conversion.quot;
    163c:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[4] = (signed char)aux_conversion.rem;
    163e:	8b 8b       	std	Y+19, r24	; 0x13
			
				//Debugging
				output_buffer[5] = (signed char)status_go_to_goal;
    1640:	2c 8a       	std	Y+20, r2	; 0x14
			
				aux_conversion = div((int)dir_x,128);
    1642:	c3 01       	movw	r24, r6
    1644:	b2 01       	movw	r22, r4
    1646:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
    164a:	dc 01       	movw	r26, r24
    164c:	cb 01       	movw	r24, r22
    164e:	60 e8       	ldi	r22, 0x80	; 128
    1650:	70 e0       	ldi	r23, 0x00	; 0
    1652:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[6] = (signed char)aux_conversion.quot;
    1656:	6d 8b       	std	Y+21, r22	; 0x15
				output_buffer[7] = (signed char)aux_conversion.rem;
    1658:	8e 8b       	std	Y+22, r24	; 0x16
			
				aux_conversion = div((int)dir_y,128);
    165a:	a0 96       	adiw	r28, 0x20	; 32
    165c:	5f ad       	ldd	r21, Y+63	; 0x3f
    165e:	a0 97       	sbiw	r28, 0x20	; 32
    1660:	a1 96       	adiw	r28, 0x21	; 33
    1662:	4f ad       	ldd	r20, Y+63	; 0x3f
    1664:	a1 97       	sbiw	r28, 0x21	; 33
    1666:	a2 96       	adiw	r28, 0x22	; 34
    1668:	3f ad       	ldd	r19, Y+63	; 0x3f
    166a:	a2 97       	sbiw	r28, 0x22	; 34
    166c:	a3 96       	adiw	r28, 0x23	; 35
    166e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1670:	a3 97       	sbiw	r28, 0x23	; 35
    1672:	65 2f       	mov	r22, r21
    1674:	74 2f       	mov	r23, r20
    1676:	83 2f       	mov	r24, r19
    1678:	92 2f       	mov	r25, r18
    167a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
    167e:	dc 01       	movw	r26, r24
    1680:	cb 01       	movw	r24, r22
    1682:	60 e8       	ldi	r22, 0x80	; 128
    1684:	70 e0       	ldi	r23, 0x00	; 0
    1686:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[8] = (signed char)aux_conversion.quot;
    168a:	6f 8b       	std	Y+23, r22	; 0x17
				output_buffer[9] = (signed char)aux_conversion.rem;
    168c:	88 8f       	std	Y+24, r24	; 0x18
			
				aux_conversion = div((int)dir_angle,128);
    168e:	6c 96       	adiw	r28, 0x1c	; 28
    1690:	5f ad       	ldd	r21, Y+63	; 0x3f
    1692:	6c 97       	sbiw	r28, 0x1c	; 28
    1694:	6d 96       	adiw	r28, 0x1d	; 29
    1696:	4f ad       	ldd	r20, Y+63	; 0x3f
    1698:	6d 97       	sbiw	r28, 0x1d	; 29
    169a:	6e 96       	adiw	r28, 0x1e	; 30
    169c:	3f ad       	ldd	r19, Y+63	; 0x3f
    169e:	6e 97       	sbiw	r28, 0x1e	; 30
    16a0:	6f 96       	adiw	r28, 0x1f	; 31
    16a2:	2f ad       	ldd	r18, Y+63	; 0x3f
    16a4:	6f 97       	sbiw	r28, 0x1f	; 31
    16a6:	65 2f       	mov	r22, r21
    16a8:	74 2f       	mov	r23, r20
    16aa:	83 2f       	mov	r24, r19
    16ac:	92 2f       	mov	r25, r18
    16ae:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	60 e8       	ldi	r22, 0x80	; 128
    16b8:	70 e0       	ldi	r23, 0x00	; 0
    16ba:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[10] = (signed char)aux_conversion.quot;
    16be:	69 8f       	std	Y+25, r22	; 0x19
				output_buffer[11] = (signed char)aux_conversion.rem;
    16c0:	8a 8f       	std	Y+26, r24	; 0x1a
			
				aux_conversion = div((int)dist_goal,128);
    16c2:	6b 96       	adiw	r28, 0x1b	; 27
    16c4:	6c ad       	ldd	r22, Y+60	; 0x3c
    16c6:	7d ad       	ldd	r23, Y+61	; 0x3d
    16c8:	8e ad       	ldd	r24, Y+62	; 0x3e
    16ca:	9f ad       	ldd	r25, Y+63	; 0x3f
    16cc:	6b 97       	sbiw	r28, 0x1b	; 27
    16ce:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	60 e8       	ldi	r22, 0x80	; 128
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[12] = (signed char)aux_conversion.quot;
    16de:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[13] = (signed char)aux_conversion.rem;
    16e0:	8c 8f       	std	Y+28, r24	; 0x1c
			
				aux_conversion = div(cam_X,128);
    16e2:	60 e8       	ldi	r22, 0x80	; 128
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	89 81       	ldd	r24, Y+1	; 0x01
    16e8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ea:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[14] = (signed char)aux_conversion.quot;
    16ee:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[15] = (signed char)aux_conversion.rem;
    16f0:	8e 8f       	std	Y+30, r24	; 0x1e
			
				aux_conversion = div(cam_Y,128);
    16f2:	60 e8       	ldi	r22, 0x80	; 128
    16f4:	70 e0       	ldi	r23, 0x00	; 0
    16f6:	8b 81       	ldd	r24, Y+3	; 0x03
    16f8:	9c 81       	ldd	r25, Y+4	; 0x04
    16fa:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[16] = (signed char)aux_conversion.quot;
    16fe:	6f 8f       	std	Y+31, r22	; 0x1f
				output_buffer[17] = (signed char)aux_conversion.rem;
    1700:	88 a3       	std	Y+32, r24	; 0x20
			
				output_buffer[18] = (signed char)commands_var;
    1702:	62 96       	adiw	r28, 0x12	; 18
    1704:	bf ad       	ldd	r27, Y+63	; 0x3f
    1706:	62 97       	sbiw	r28, 0x12	; 18
    1708:	b9 a3       	std	Y+33, r27	; 0x21
			
				aux_conversion = div((int)diff_theta,128);
    170a:	a4 96       	adiw	r28, 0x24	; 36
    170c:	5f ad       	ldd	r21, Y+63	; 0x3f
    170e:	a4 97       	sbiw	r28, 0x24	; 36
    1710:	a6 96       	adiw	r28, 0x26	; 38
    1712:	4f ad       	ldd	r20, Y+63	; 0x3f
    1714:	a6 97       	sbiw	r28, 0x26	; 38
    1716:	a7 96       	adiw	r28, 0x27	; 39
    1718:	3f ad       	ldd	r19, Y+63	; 0x3f
    171a:	a7 97       	sbiw	r28, 0x27	; 39
    171c:	a8 96       	adiw	r28, 0x28	; 40
    171e:	2f ad       	ldd	r18, Y+63	; 0x3f
    1720:	a8 97       	sbiw	r28, 0x28	; 40
    1722:	65 2f       	mov	r22, r21
    1724:	74 2f       	mov	r23, r20
    1726:	83 2f       	mov	r24, r19
    1728:	92 2f       	mov	r25, r18
    172a:	0e 94 94 15 	call	0x2b28	; 0x2b28 <__fixsfsi>
    172e:	dc 01       	movw	r26, r24
    1730:	cb 01       	movw	r24, r22
    1732:	60 e8       	ldi	r22, 0x80	; 128
    1734:	70 e0       	ldi	r23, 0x00	; 0
    1736:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[19] = (signed char)aux_conversion.quot;
    173a:	6a a3       	std	Y+34, r22	; 0x22
				output_buffer[20] = (signed char)aux_conversion.rem;
    173c:	8b a3       	std	Y+35, r24	; 0x23
			
				aux_conversion = div((int)OCR1B,128);
    173e:	ea e8       	ldi	r30, 0x8A	; 138
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	91 81       	ldd	r25, Z+1	; 0x01
    1746:	60 e8       	ldi	r22, 0x80	; 128
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[21] = (signed char)aux_conversion.quot;
    174e:	6c a3       	std	Y+36, r22	; 0x24
				output_buffer[22] = (signed char)aux_conversion.rem;
    1750:	8d a3       	std	Y+37, r24	; 0x25
			
				aux_conversion = div((int)OCR1C,128);
    1752:	ac e8       	ldi	r26, 0x8C	; 140
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	8d 91       	ld	r24, X+
    1758:	9c 91       	ld	r25, X
    175a:	60 e8       	ldi	r22, 0x80	; 128
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <__divmodhi4>
				output_buffer[23] = (signed char)aux_conversion.quot;
    1762:	6e a3       	std	Y+38, r22	; 0x26
				output_buffer[24] = (signed char)aux_conversion.rem;
    1764:	8f a3       	std	Y+39, r24	; 0x27
			
				output_buffer[25] = (signed char)bank;
    1766:	66 96       	adiw	r28, 0x16	; 22
    1768:	bf ad       	ldd	r27, Y+63	; 0x3f
    176a:	66 97       	sbiw	r28, 0x16	; 22
    176c:	b8 a7       	std	Y+40, r27	; 0x28
			
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
    176e:	4a e1       	ldi	r20, 0x1A	; 26
    1770:	be 01       	movw	r22, r28
    1772:	61 5f       	subi	r22, 0xF1	; 241
    1774:	7f 4f       	sbci	r23, 0xFF	; 255
    1776:	80 e6       	ldi	r24, 0x60	; 96
    1778:	0e 94 17 12 	call	0x242e	; 0x242e <m_rf_send>
			
				//Open again the system channel			
				m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
    177c:	4a e0       	ldi	r20, 0x0A	; 10
    177e:	62 e4       	ldi	r22, 0x42	; 66
    1780:	81 e0       	ldi	r24, 0x01	; 1
    1782:	0e 94 60 11 	call	0x22c0	; 0x22c0 <m_rf_open>
				timer_switch = 0;
    1786:	61 96       	adiw	r28, 0x11	; 17
    1788:	1f ae       	std	Y+63, r1	; 0x3f
    178a:	1e ae       	std	Y+62, r1	; 0x3e
    178c:	61 97       	sbiw	r28, 0x11	; 17
			}
			
			//Reset flag
			flag_timer = 0;
    178e:	10 92 4d 01 	sts	0x014D, r1
    1792:	10 92 4c 01 	sts	0x014C, r1
				
			
        }
		
        //STATE COMMANDS
        switch (state)
    1796:	80 91 4a 01 	lds	r24, 0x014A
    179a:	90 91 4b 01 	lds	r25, 0x014B
    179e:	82 30       	cpi	r24, 0x02	; 2
    17a0:	91 05       	cpc	r25, r1
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <main+0x49a>
    17a4:	68 c2       	rjmp	.+1232   	; 0x1c76 <main+0x96a>
    17a6:	34 f4       	brge	.+12     	; 0x17b4 <main+0x4a8>
    17a8:	00 97       	sbiw	r24, 0x00	; 0
    17aa:	81 f0       	breq	.+32     	; 0x17cc <main+0x4c0>
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	09 f0       	breq	.+2      	; 0x17b2 <main+0x4a6>
    17b0:	f3 c4       	rjmp	.+2534   	; 0x2198 <main+0xe8c>
    17b2:	24 c0       	rjmp	.+72     	; 0x17fc <main+0x4f0>
    17b4:	86 31       	cpi	r24, 0x16	; 22
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <main+0x4b0>
    17ba:	e2 c4       	rjmp	.+2500   	; 0x2180 <main+0xe74>
    17bc:	83 36       	cpi	r24, 0x63	; 99
    17be:	91 05       	cpc	r25, r1
    17c0:	09 f4       	brne	.+2      	; 0x17c4 <main+0x4b8>
    17c2:	75 c4       	rjmp	.+2282   	; 0x20ae <main+0xda2>
    17c4:	45 97       	sbiw	r24, 0x15	; 21
    17c6:	09 f0       	breq	.+2      	; 0x17ca <main+0x4be>
    17c8:	e7 c4       	rjmp	.+2510   	; 0x2198 <main+0xe8c>
    17ca:	e3 c4       	rjmp	.+2502   	; 0x2192 <main+0xe86>
        {
            case INITIAL_STATE:
				//m_green(ON);
                if (check(PINB,2))
    17cc:	1a 9b       	sbis	0x03, 2	; 3
    17ce:	07 c0       	rjmp	.+14     	; 0x17de <main+0x4d2>
                {
                    goal_pos_x = GOAL_A_POS_X;
    17d0:	ed e8       	ldi	r30, 0x8D	; 141
    17d2:	ff ef       	ldi	r31, 0xFF	; 255
    17d4:	65 96       	adiw	r28, 0x15	; 21
    17d6:	ff af       	std	Y+63, r31	; 0x3f
    17d8:	ee af       	std	Y+62, r30	; 0x3e
    17da:	65 97       	sbiw	r28, 0x15	; 21
    17dc:	06 c0       	rjmp	.+12     	; 0x17ea <main+0x4de>
                    goal_pos_y = GOAL_A_POS_Y;
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
    17de:	23 e7       	ldi	r18, 0x73	; 115
    17e0:	30 e0       	ldi	r19, 0x00	; 0
    17e2:	65 96       	adiw	r28, 0x15	; 21
    17e4:	3f af       	std	Y+63, r19	; 0x3f
    17e6:	2e af       	std	Y+62, r18	; 0x3e
    17e8:	65 97       	sbiw	r28, 0x15	; 21
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                state = GO_TO_GOAL;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	90 93 4b 01 	sts	0x014B, r25
    17f2:	80 93 4a 01 	sts	0x014A, r24
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    17f6:	21 2c       	mov	r2, r1
    17f8:	31 2c       	mov	r3, r1
                state = GO_TO_GOAL;
                break;
    17fa:	9c ce       	rjmp	.-712    	; 0x1534 <main+0x228>
                
            case GO_TO_GOAL:
                if (status_go_to_goal == 0)
    17fc:	21 14       	cp	r2, r1
    17fe:	31 04       	cpc	r3, r1
    1800:	09 f0       	breq	.+2      	; 0x1804 <main+0x4f8>
    1802:	52 c0       	rjmp	.+164    	; 0x18a8 <main+0x59c>
                {
                    dir_x = goal_pos_x-x_robot;
    1804:	23 96       	adiw	r28, 0x03	; 3
    1806:	8e ad       	ldd	r24, Y+62	; 0x3e
    1808:	9f ad       	ldd	r25, Y+63	; 0x3f
    180a:	23 97       	sbiw	r28, 0x03	; 3
    180c:	65 96       	adiw	r28, 0x15	; 21
    180e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1810:	7f ad       	ldd	r23, Y+63	; 0x3f
    1812:	65 97       	sbiw	r28, 0x15	; 21
    1814:	68 1b       	sub	r22, r24
    1816:	79 0b       	sbc	r23, r25
    1818:	88 27       	eor	r24, r24
    181a:	77 fd       	sbrc	r23, 7
    181c:	80 95       	com	r24
    181e:	98 2f       	mov	r25, r24
    1820:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1824:	46 2e       	mov	r4, r22
    1826:	57 2e       	mov	r5, r23
    1828:	68 2e       	mov	r6, r24
    182a:	79 2e       	mov	r7, r25
                    dir_y = goal_pos_y-y_robot;
    182c:	25 96       	adiw	r28, 0x05	; 5
    182e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1830:	7f ad       	ldd	r23, Y+63	; 0x3f
    1832:	25 97       	sbiw	r28, 0x05	; 5
    1834:	71 95       	neg	r23
    1836:	61 95       	neg	r22
    1838:	71 09       	sbc	r23, r1
    183a:	88 27       	eor	r24, r24
    183c:	77 fd       	sbrc	r23, 7
    183e:	80 95       	com	r24
    1840:	98 2f       	mov	r25, r24
    1842:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1846:	26 2f       	mov	r18, r22
    1848:	37 2f       	mov	r19, r23
    184a:	48 2f       	mov	r20, r24
    184c:	59 2f       	mov	r21, r25
    184e:	a0 96       	adiw	r28, 0x20	; 32
    1850:	6f af       	std	Y+63, r22	; 0x3f
    1852:	a0 97       	sbiw	r28, 0x20	; 32
    1854:	a1 96       	adiw	r28, 0x21	; 33
    1856:	7f af       	std	Y+63, r23	; 0x3f
    1858:	a1 97       	sbiw	r28, 0x21	; 33
    185a:	a2 96       	adiw	r28, 0x22	; 34
    185c:	8f af       	std	Y+63, r24	; 0x3f
    185e:	a2 97       	sbiw	r28, 0x22	; 34
    1860:	a3 96       	adiw	r28, 0x23	; 35
    1862:	9f af       	std	Y+63, r25	; 0x3f
    1864:	a3 97       	sbiw	r28, 0x23	; 35
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1866:	c3 01       	movw	r24, r6
    1868:	b2 01       	movw	r22, r4
    186a:	90 58       	subi	r25, 0x80	; 128
    186c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <atan2>
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	30 e0       	ldi	r19, 0x00	; 0
    1874:	44 e3       	ldi	r20, 0x34	; 52
    1876:	53 e4       	ldi	r21, 0x43	; 67
    1878:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
    187c:	2b ed       	ldi	r18, 0xDB	; 219
    187e:	3f e0       	ldi	r19, 0x0F	; 15
    1880:	49 e4       	ldi	r20, 0x49	; 73
    1882:	50 e4       	ldi	r21, 0x40	; 64
    1884:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <__divsf3>
    1888:	6c 96       	adiw	r28, 0x1c	; 28
    188a:	6f af       	std	Y+63, r22	; 0x3f
    188c:	6c 97       	sbiw	r28, 0x1c	; 28
    188e:	6d 96       	adiw	r28, 0x1d	; 29
    1890:	7f af       	std	Y+63, r23	; 0x3f
    1892:	6d 97       	sbiw	r28, 0x1d	; 29
    1894:	6e 96       	adiw	r28, 0x1e	; 30
    1896:	8f af       	std	Y+63, r24	; 0x3f
    1898:	6e 97       	sbiw	r28, 0x1e	; 30
    189a:	6f 96       	adiw	r28, 0x1f	; 31
    189c:	9f af       	std	Y+63, r25	; 0x3f
    189e:	6f 97       	sbiw	r28, 0x1f	; 31
                    
                    status_go_to_goal = 1;
    18a0:	22 24       	eor	r2, r2
    18a2:	23 94       	inc	r2
    18a4:	31 2c       	mov	r3, r1
    18a6:	46 ce       	rjmp	.-884    	; 0x1534 <main+0x228>
                }else if (status_go_to_goal == 1)
    18a8:	91 e0       	ldi	r25, 0x01	; 1
    18aa:	29 16       	cp	r2, r25
    18ac:	31 04       	cpc	r3, r1
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <main+0x5a6>
    18b0:	49 c1       	rjmp	.+658    	; 0x1b44 <main+0x838>
                {
					dir_x = goal_pos_x-x_robot;
    18b2:	23 96       	adiw	r28, 0x03	; 3
    18b4:	8e ad       	ldd	r24, Y+62	; 0x3e
    18b6:	9f ad       	ldd	r25, Y+63	; 0x3f
    18b8:	23 97       	sbiw	r28, 0x03	; 3
    18ba:	65 96       	adiw	r28, 0x15	; 21
    18bc:	6e ad       	ldd	r22, Y+62	; 0x3e
    18be:	7f ad       	ldd	r23, Y+63	; 0x3f
    18c0:	65 97       	sbiw	r28, 0x15	; 21
    18c2:	68 1b       	sub	r22, r24
    18c4:	79 0b       	sbc	r23, r25
    18c6:	88 27       	eor	r24, r24
    18c8:	77 fd       	sbrc	r23, 7
    18ca:	80 95       	com	r24
    18cc:	98 2f       	mov	r25, r24
    18ce:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    18d2:	46 2e       	mov	r4, r22
    18d4:	57 2e       	mov	r5, r23
    18d6:	68 2e       	mov	r6, r24
    18d8:	79 2e       	mov	r7, r25
					dir_y = goal_pos_y-y_robot;
    18da:	25 96       	adiw	r28, 0x05	; 5
    18dc:	6e ad       	ldd	r22, Y+62	; 0x3e
    18de:	7f ad       	ldd	r23, Y+63	; 0x3f
    18e0:	25 97       	sbiw	r28, 0x05	; 5
    18e2:	71 95       	neg	r23
    18e4:	61 95       	neg	r22
    18e6:	71 09       	sbc	r23, r1
    18e8:	88 27       	eor	r24, r24
    18ea:	77 fd       	sbrc	r23, 7
    18ec:	80 95       	com	r24
    18ee:	98 2f       	mov	r25, r24
    18f0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    18f4:	26 2f       	mov	r18, r22
    18f6:	37 2f       	mov	r19, r23
    18f8:	48 2f       	mov	r20, r24
    18fa:	59 2f       	mov	r21, r25
    18fc:	a0 96       	adiw	r28, 0x20	; 32
    18fe:	6f af       	std	Y+63, r22	; 0x3f
    1900:	a0 97       	sbiw	r28, 0x20	; 32
    1902:	a1 96       	adiw	r28, 0x21	; 33
    1904:	7f af       	std	Y+63, r23	; 0x3f
    1906:	a1 97       	sbiw	r28, 0x21	; 33
    1908:	a2 96       	adiw	r28, 0x22	; 34
    190a:	8f af       	std	Y+63, r24	; 0x3f
    190c:	a2 97       	sbiw	r28, 0x22	; 34
    190e:	a3 96       	adiw	r28, 0x23	; 35
    1910:	9f af       	std	Y+63, r25	; 0x3f
    1912:	a3 97       	sbiw	r28, 0x23	; 35
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1914:	c3 01       	movw	r24, r6
    1916:	b2 01       	movw	r22, r4
    1918:	90 58       	subi	r25, 0x80	; 128
    191a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <atan2>
    191e:	20 e0       	ldi	r18, 0x00	; 0
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	44 e3       	ldi	r20, 0x34	; 52
    1924:	53 e4       	ldi	r21, 0x43	; 67
    1926:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
    192a:	2b ed       	ldi	r18, 0xDB	; 219
    192c:	3f e0       	ldi	r19, 0x0F	; 15
    192e:	49 e4       	ldi	r20, 0x49	; 73
    1930:	50 e4       	ldi	r21, 0x40	; 64
    1932:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <__divsf3>
    1936:	b6 2e       	mov	r11, r22
    1938:	a7 2e       	mov	r10, r23
    193a:	18 2f       	mov	r17, r24
    193c:	09 2f       	mov	r16, r25
    193e:	6c 96       	adiw	r28, 0x1c	; 28
    1940:	6f af       	std	Y+63, r22	; 0x3f
    1942:	6c 97       	sbiw	r28, 0x1c	; 28
    1944:	6d 96       	adiw	r28, 0x1d	; 29
    1946:	7f af       	std	Y+63, r23	; 0x3f
    1948:	6d 97       	sbiw	r28, 0x1d	; 29
    194a:	6e 96       	adiw	r28, 0x1e	; 30
    194c:	8f af       	std	Y+63, r24	; 0x3f
    194e:	6e 97       	sbiw	r28, 0x1e	; 30
    1950:	6f 96       	adiw	r28, 0x1f	; 31
    1952:	9f af       	std	Y+63, r25	; 0x3f
    1954:	6f 97       	sbiw	r28, 0x1f	; 31
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
    1956:	27 96       	adiw	r28, 0x07	; 7
    1958:	ae ad       	ldd	r26, Y+62	; 0x3e
    195a:	bf ad       	ldd	r27, Y+63	; 0x3f
    195c:	27 97       	sbiw	r28, 0x07	; 7
    195e:	ad 96       	adiw	r28, 0x2d	; 45
    1960:	bf af       	std	Y+63, r27	; 0x3f
    1962:	ae af       	std	Y+62, r26	; 0x3e
    1964:	ad 97       	sbiw	r28, 0x2d	; 45
    1966:	bd 01       	movw	r22, r26
    1968:	88 27       	eor	r24, r24
    196a:	77 fd       	sbrc	r23, 7
    196c:	80 95       	com	r24
    196e:	98 2f       	mov	r25, r24
    1970:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1974:	6b 01       	movw	r12, r22
    1976:	7c 01       	movw	r14, r24
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	40 ee       	ldi	r20, 0xE0	; 224
    197e:	50 e4       	ldi	r21, 0x40	; 64
    1980:	6b 2d       	mov	r22, r11
    1982:	7a 2d       	mov	r23, r10
    1984:	81 2f       	mov	r24, r17
    1986:	90 2f       	mov	r25, r16
    1988:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    198c:	9b 01       	movw	r18, r22
    198e:	ac 01       	movw	r20, r24
    1990:	c7 01       	movw	r24, r14
    1992:	b6 01       	movw	r22, r12
    1994:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1998:	88 23       	and	r24, r24
    199a:	9c f0       	brlt	.+38     	; 0x19c2 <main+0x6b6>
    199c:	20 e0       	ldi	r18, 0x00	; 0
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	40 ee       	ldi	r20, 0xE0	; 224
    19a2:	50 e4       	ldi	r21, 0x40	; 64
    19a4:	6b 2d       	mov	r22, r11
    19a6:	7a 2d       	mov	r23, r10
    19a8:	81 2f       	mov	r24, r17
    19aa:	90 2f       	mov	r25, r16
    19ac:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
    19b0:	9b 01       	movw	r18, r22
    19b2:	ac 01       	movw	r20, r24
    19b4:	c7 01       	movw	r24, r14
    19b6:	b6 01       	movw	r22, r12
    19b8:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	0c f0       	brlt	.+2      	; 0x19c2 <main+0x6b6>
    19c0:	57 cd       	rjmp	.-1362   	; 0x1470 <main+0x164>
                        status_go_to_goal = 2;
                    else
                    {
                        float angle_dir_aux = dir_angle-180;
    19c2:	20 e0       	ldi	r18, 0x00	; 0
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	44 e3       	ldi	r20, 0x34	; 52
    19c8:	53 e4       	ldi	r21, 0x43	; 67
    19ca:	6b 2d       	mov	r22, r11
    19cc:	7a 2d       	mov	r23, r10
    19ce:	81 2f       	mov	r24, r17
    19d0:	90 2f       	mov	r25, r16
    19d2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    19d6:	62 96       	adiw	r28, 0x12	; 18
    19d8:	6f af       	std	Y+63, r22	; 0x3f
    19da:	62 97       	sbiw	r28, 0x12	; 18
    19dc:	a9 96       	adiw	r28, 0x29	; 41
    19de:	7f af       	std	Y+63, r23	; 0x3f
    19e0:	a9 97       	sbiw	r28, 0x29	; 41
    19e2:	98 2e       	mov	r9, r24
    19e4:	89 2e       	mov	r8, r25
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	44 e3       	ldi	r20, 0x34	; 52
    19ec:	53 ec       	ldi	r21, 0xC3	; 195
    19ee:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    19f2:	88 23       	and	r24, r24
    19f4:	0c f0       	brlt	.+2      	; 0x19f8 <main+0x6ec>
    19f6:	d3 c3       	rjmp	.+1958   	; 0x219e <main+0xe92>
                        {
                            angle_dir_aux += 360;
    19f8:	20 e0       	ldi	r18, 0x00	; 0
    19fa:	30 e0       	ldi	r19, 0x00	; 0
    19fc:	44 eb       	ldi	r20, 0xB4	; 180
    19fe:	53 e4       	ldi	r21, 0x43	; 67
    1a00:	62 96       	adiw	r28, 0x12	; 18
    1a02:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a04:	62 97       	sbiw	r28, 0x12	; 18
    1a06:	a9 96       	adiw	r28, 0x29	; 41
    1a08:	af ad       	ldd	r26, Y+63	; 0x3f
    1a0a:	a9 97       	sbiw	r28, 0x29	; 41
    1a0c:	6b 2f       	mov	r22, r27
    1a0e:	7a 2f       	mov	r23, r26
    1a10:	89 2d       	mov	r24, r9
    1a12:	98 2d       	mov	r25, r8
    1a14:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
    1a18:	62 96       	adiw	r28, 0x12	; 18
    1a1a:	6f af       	std	Y+63, r22	; 0x3f
    1a1c:	62 97       	sbiw	r28, 0x12	; 18
    1a1e:	a9 96       	adiw	r28, 0x29	; 41
    1a20:	7f af       	std	Y+63, r23	; 0x3f
    1a22:	a9 97       	sbiw	r28, 0x29	; 41
    1a24:	98 2e       	mov	r9, r24
    1a26:	89 2e       	mov	r8, r25
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
						{
                            turn_right();
							commands_var = 2;
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1a28:	a7 01       	movw	r20, r14
    1a2a:	96 01       	movw	r18, r12
    1a2c:	6b 2d       	mov	r22, r11
    1a2e:	7a 2d       	mov	r23, r10
    1a30:	81 2f       	mov	r24, r17
    1a32:	90 2f       	mov	r25, r16
    1a34:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1a38:	88 23       	and	r24, r24
    1a3a:	c4 f5       	brge	.+112    	; 0x1aac <main+0x7a0>
    1a3c:	3e c0       	rjmp	.+124    	; 0x1aba <main+0x7ae>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1a3e:	a7 01       	movw	r20, r14
    1a40:	96 01       	movw	r18, r12
    1a42:	6b 2d       	mov	r22, r11
    1a44:	7a 2d       	mov	r23, r10
    1a46:	81 2f       	mov	r24, r17
    1a48:	90 2f       	mov	r25, r16
    1a4a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1a4e:	88 23       	and	r24, r24
    1a50:	4c f0       	brlt	.+18     	; 0x1a64 <main+0x758>
						{
                            turn_left();
    1a52:	0e 94 5f 09 	call	0x12be	; 0x12be <turn_left>
							commands_var = 1;
    1a56:	e1 e0       	ldi	r30, 0x01	; 1
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	63 96       	adiw	r28, 0x13	; 19
    1a5c:	ff af       	std	Y+63, r31	; 0x3f
    1a5e:	ee af       	std	Y+62, r30	; 0x3e
    1a60:	63 97       	sbiw	r28, 0x13	; 19
    1a62:	68 cd       	rjmp	.-1328   	; 0x1534 <main+0x228>
                        }
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    1a64:	62 96       	adiw	r28, 0x12	; 18
    1a66:	7f ad       	ldd	r23, Y+63	; 0x3f
    1a68:	62 97       	sbiw	r28, 0x12	; 18
    1a6a:	a9 96       	adiw	r28, 0x29	; 41
    1a6c:	6f ad       	ldd	r22, Y+63	; 0x3f
    1a6e:	a9 97       	sbiw	r28, 0x29	; 41
    1a70:	27 2f       	mov	r18, r23
    1a72:	36 2f       	mov	r19, r22
    1a74:	49 2d       	mov	r20, r9
    1a76:	58 2d       	mov	r21, r8
    1a78:	c7 01       	movw	r24, r14
    1a7a:	b6 01       	movw	r22, r12
    1a7c:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1a80:	88 23       	and	r24, r24
    1a82:	5c f0       	brlt	.+22     	; 0x1a9a <main+0x78e>
    1a84:	a7 01       	movw	r20, r14
    1a86:	96 01       	movw	r18, r12
    1a88:	6b 2d       	mov	r22, r11
    1a8a:	7a 2d       	mov	r23, r10
    1a8c:	81 2f       	mov	r24, r17
    1a8e:	90 2f       	mov	r25, r16
    1a90:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	0c f0       	brlt	.+2      	; 0x1a9a <main+0x78e>
    1a98:	f0 cc       	rjmp	.-1568   	; 0x147a <main+0x16e>
						{
                            turn_right();
    1a9a:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <turn_right>
							commands_var = 2;
    1a9e:	22 e0       	ldi	r18, 0x02	; 2
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	63 96       	adiw	r28, 0x13	; 19
    1aa4:	3f af       	std	Y+63, r19	; 0x3f
    1aa6:	2e af       	std	Y+62, r18	; 0x3e
    1aa8:	63 97       	sbiw	r28, 0x13	; 19
    1aaa:	44 cd       	rjmp	.-1400   	; 0x1534 <main+0x228>
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1aac:	ad 96       	adiw	r28, 0x2d	; 45
    1aae:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ab0:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ab2:	ad 97       	sbiw	r28, 0x2d	; 45
    1ab4:	8c 34       	cpi	r24, 0x4C	; 76
    1ab6:	9f 4f       	sbci	r25, 0xFF	; 255
    1ab8:	bc f4       	brge	.+46     	; 0x1ae8 <main+0x7dc>
    1aba:	62 96       	adiw	r28, 0x12	; 18
    1abc:	7f ad       	ldd	r23, Y+63	; 0x3f
    1abe:	62 97       	sbiw	r28, 0x12	; 18
    1ac0:	a9 96       	adiw	r28, 0x29	; 41
    1ac2:	6f ad       	ldd	r22, Y+63	; 0x3f
    1ac4:	a9 97       	sbiw	r28, 0x29	; 41
    1ac6:	27 2f       	mov	r18, r23
    1ac8:	36 2f       	mov	r19, r22
    1aca:	49 2d       	mov	r20, r9
    1acc:	58 2d       	mov	r21, r8
    1ace:	c7 01       	movw	r24, r14
    1ad0:	b6 01       	movw	r22, r12
    1ad2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	84 f0       	brlt	.+32     	; 0x1afa <main+0x7ee>
    1ada:	ad 96       	adiw	r28, 0x2d	; 45
    1adc:	ee ad       	ldd	r30, Y+62	; 0x3e
    1ade:	ff ad       	ldd	r31, Y+63	; 0x3f
    1ae0:	ad 97       	sbiw	r28, 0x2d	; 45
    1ae2:	e5 3b       	cpi	r30, 0xB5	; 181
    1ae4:	f1 05       	cpc	r31, r1
    1ae6:	4c f4       	brge	.+18     	; 0x1afa <main+0x7ee>
						{
                            turn_left();
    1ae8:	0e 94 5f 09 	call	0x12be	; 0x12be <turn_left>
							commands_var = 3;
    1aec:	23 e0       	ldi	r18, 0x03	; 3
    1aee:	30 e0       	ldi	r19, 0x00	; 0
    1af0:	63 96       	adiw	r28, 0x13	; 19
    1af2:	3f af       	std	Y+63, r19	; 0x3f
    1af4:	2e af       	std	Y+62, r18	; 0x3e
    1af6:	63 97       	sbiw	r28, 0x13	; 19
    1af8:	1d cd       	rjmp	.-1478   	; 0x1534 <main+0x228>
						}
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    1afa:	a7 01       	movw	r20, r14
    1afc:	96 01       	movw	r18, r12
    1afe:	6b 2d       	mov	r22, r11
    1b00:	7a 2d       	mov	r23, r10
    1b02:	81 2f       	mov	r24, r17
    1b04:	90 2f       	mov	r25, r16
    1b06:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1b0a:	88 23       	and	r24, r24
    1b0c:	0c f0       	brlt	.+2      	; 0x1b10 <main+0x804>
    1b0e:	ba cc       	rjmp	.-1676   	; 0x1484 <main+0x178>
    1b10:	62 96       	adiw	r28, 0x12	; 18
    1b12:	7f ad       	ldd	r23, Y+63	; 0x3f
    1b14:	62 97       	sbiw	r28, 0x12	; 18
    1b16:	a9 96       	adiw	r28, 0x29	; 41
    1b18:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b1a:	a9 97       	sbiw	r28, 0x29	; 41
    1b1c:	27 2f       	mov	r18, r23
    1b1e:	36 2f       	mov	r19, r22
    1b20:	49 2d       	mov	r20, r9
    1b22:	58 2d       	mov	r21, r8
    1b24:	c7 01       	movw	r24, r14
    1b26:	b6 01       	movw	r22, r12
    1b28:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1b2c:	88 23       	and	r24, r24
    1b2e:	0c f0       	brlt	.+2      	; 0x1b32 <main+0x826>
    1b30:	ae cc       	rjmp	.-1700   	; 0x148e <main+0x182>
						{
                            turn_right();
    1b32:	0e 94 6c 09 	call	0x12d8	; 0x12d8 <turn_right>
							commands_var = 4;
    1b36:	84 e0       	ldi	r24, 0x04	; 4
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	63 96       	adiw	r28, 0x13	; 19
    1b3c:	9f af       	std	Y+63, r25	; 0x3f
    1b3e:	8e af       	std	Y+62, r24	; 0x3e
    1b40:	63 97       	sbiw	r28, 0x13	; 19
    1b42:	f8 cc       	rjmp	.-1552   	; 0x1534 <main+0x228>
						}else
							commands_var = 0;
                        
                    }
                }else if (status_go_to_goal == 2)
    1b44:	92 e0       	ldi	r25, 0x02	; 2
    1b46:	29 16       	cp	r2, r25
    1b48:	31 04       	cpc	r3, r1
    1b4a:	09 f0       	breq	.+2      	; 0x1b4e <main+0x842>
    1b4c:	86 c0       	rjmp	.+268    	; 0x1c5a <main+0x94e>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1b4e:	23 96       	adiw	r28, 0x03	; 3
    1b50:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b52:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b54:	23 97       	sbiw	r28, 0x03	; 3
    1b56:	65 96       	adiw	r28, 0x15	; 21
    1b58:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b5a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b5c:	65 97       	sbiw	r28, 0x15	; 21
    1b5e:	2a 1b       	sub	r18, r26
    1b60:	3b 0b       	sbc	r19, r27
    1b62:	25 96       	adiw	r28, 0x05	; 5
    1b64:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b66:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b68:	25 97       	sbiw	r28, 0x05	; 5
    1b6a:	22 9f       	mul	r18, r18
    1b6c:	b0 01       	movw	r22, r0
    1b6e:	23 9f       	mul	r18, r19
    1b70:	70 0d       	add	r23, r0
    1b72:	70 0d       	add	r23, r0
    1b74:	11 24       	eor	r1, r1
    1b76:	88 9f       	mul	r24, r24
    1b78:	90 01       	movw	r18, r0
    1b7a:	89 9f       	mul	r24, r25
    1b7c:	30 0d       	add	r19, r0
    1b7e:	30 0d       	add	r19, r0
    1b80:	11 24       	eor	r1, r1
    1b82:	62 0f       	add	r22, r18
    1b84:	73 1f       	adc	r23, r19
    1b86:	88 27       	eor	r24, r24
    1b88:	77 fd       	sbrc	r23, 7
    1b8a:	80 95       	com	r24
    1b8c:	98 2f       	mov	r25, r24
    1b8e:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1b92:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    1b96:	6b 96       	adiw	r28, 0x1b	; 27
    1b98:	6c af       	std	Y+60, r22	; 0x3c
    1b9a:	7d af       	std	Y+61, r23	; 0x3d
    1b9c:	8e af       	std	Y+62, r24	; 0x3e
    1b9e:	9f af       	std	Y+63, r25	; 0x3f
    1ba0:	6b 97       	sbiw	r28, 0x1b	; 27
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	48 e8       	ldi	r20, 0x88	; 136
    1ba8:	51 e4       	ldi	r21, 0x41	; 65
    1baa:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1bae:	88 23       	and	r24, r24
    1bb0:	0c f4       	brge	.+2      	; 0x1bb4 <main+0x8a8>
    1bb2:	72 cc       	rjmp	.-1820   	; 0x1498 <main+0x18c>
                        status_go_to_goal = 3;
                    else
                    {
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
    1bb4:	27 96       	adiw	r28, 0x07	; 7
    1bb6:	6e ad       	ldd	r22, Y+62	; 0x3e
    1bb8:	7f ad       	ldd	r23, Y+63	; 0x3f
    1bba:	27 97       	sbiw	r28, 0x07	; 7
    1bbc:	88 27       	eor	r24, r24
    1bbe:	77 fd       	sbrc	r23, 7
    1bc0:	80 95       	com	r24
    1bc2:	98 2f       	mov	r25, r24
    1bc4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1bc8:	6b 01       	movw	r12, r22
    1bca:	7c 01       	movw	r14, r24
    1bcc:	20 e0       	ldi	r18, 0x00	; 0
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	40 ee       	ldi	r20, 0xE0	; 224
    1bd2:	50 e4       	ldi	r21, 0x40	; 64
    1bd4:	6c 96       	adiw	r28, 0x1c	; 28
    1bd6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1bd8:	6c 97       	sbiw	r28, 0x1c	; 28
    1bda:	6d 96       	adiw	r28, 0x1d	; 29
    1bdc:	ef ad       	ldd	r30, Y+63	; 0x3f
    1bde:	6d 97       	sbiw	r28, 0x1d	; 29
    1be0:	6e 96       	adiw	r28, 0x1e	; 30
    1be2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1be4:	6e 97       	sbiw	r28, 0x1e	; 30
    1be6:	6f 96       	adiw	r28, 0x1f	; 31
    1be8:	af ad       	ldd	r26, Y+63	; 0x3f
    1bea:	6f 97       	sbiw	r28, 0x1f	; 31
    1bec:	6f 2f       	mov	r22, r31
    1bee:	7e 2f       	mov	r23, r30
    1bf0:	8b 2f       	mov	r24, r27
    1bf2:	9a 2f       	mov	r25, r26
    1bf4:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1bf8:	9b 01       	movw	r18, r22
    1bfa:	ac 01       	movw	r20, r24
    1bfc:	c7 01       	movw	r24, r14
    1bfe:	b6 01       	movw	r22, r12
    1c00:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1c04:	88 23       	and	r24, r24
    1c06:	0c f4       	brge	.+2      	; 0x1c0a <main+0x8fe>
    1c08:	4d cc       	rjmp	.-1894   	; 0x14a4 <main+0x198>
    1c0a:	20 e0       	ldi	r18, 0x00	; 0
    1c0c:	30 e0       	ldi	r19, 0x00	; 0
    1c0e:	40 ee       	ldi	r20, 0xE0	; 224
    1c10:	50 e4       	ldi	r21, 0x40	; 64
    1c12:	6c 96       	adiw	r28, 0x1c	; 28
    1c14:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c16:	6c 97       	sbiw	r28, 0x1c	; 28
    1c18:	6d 96       	adiw	r28, 0x1d	; 29
    1c1a:	af ad       	ldd	r26, Y+63	; 0x3f
    1c1c:	6d 97       	sbiw	r28, 0x1d	; 29
    1c1e:	6e 96       	adiw	r28, 0x1e	; 30
    1c20:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c22:	6e 97       	sbiw	r28, 0x1e	; 30
    1c24:	6f 96       	adiw	r28, 0x1f	; 31
    1c26:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c28:	6f 97       	sbiw	r28, 0x1f	; 31
    1c2a:	6b 2f       	mov	r22, r27
    1c2c:	7a 2f       	mov	r23, r26
    1c2e:	8f 2f       	mov	r24, r31
    1c30:	9e 2f       	mov	r25, r30
    1c32:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
    1c36:	9b 01       	movw	r18, r22
    1c38:	ac 01       	movw	r20, r24
    1c3a:	c7 01       	movw	r24, r14
    1c3c:	b6 01       	movw	r22, r12
    1c3e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1c42:	18 16       	cp	r1, r24
    1c44:	0c f4       	brge	.+2      	; 0x1c48 <main+0x93c>
    1c46:	31 cc       	rjmp	.-1950   	; 0x14aa <main+0x19e>
                            status_go_to_goal = 0;
                        else
						{
							commands_var = 5;
                            go_fwd();
    1c48:	0e 94 79 09 	call	0x12f2	; 0x12f2 <go_fwd>
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
                            status_go_to_goal = 0;
                        else
						{
							commands_var = 5;
    1c4c:	e5 e0       	ldi	r30, 0x05	; 5
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	63 96       	adiw	r28, 0x13	; 19
    1c52:	ff af       	std	Y+63, r31	; 0x3f
    1c54:	ee af       	std	Y+62, r30	; 0x3e
    1c56:	63 97       	sbiw	r28, 0x13	; 19
    1c58:	6d cc       	rjmp	.-1830   	; 0x1534 <main+0x228>
						}
						
                        
                    }
                }
                else if (status_go_to_goal == 3)
    1c5a:	f3 e0       	ldi	r31, 0x03	; 3
    1c5c:	2f 16       	cp	r2, r31
    1c5e:	31 04       	cpc	r3, r1
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <main+0x958>
    1c62:	68 cc       	rjmp	.-1840   	; 0x1534 <main+0x228>
                {
                    //stop_motor();
                    status_go_to_goal = 0;
                    state = STOP_STATE;
    1c64:	85 e1       	ldi	r24, 0x15	; 21
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	90 93 4b 01 	sts	0x014B, r25
    1c6c:	80 93 4a 01 	sts	0x014A, r24
                    }
                }
                else if (status_go_to_goal == 3)
                {
                    //stop_motor();
                    status_go_to_goal = 0;
    1c70:	21 2c       	mov	r2, r1
    1c72:	31 2c       	mov	r3, r1
    1c74:	5f cc       	rjmp	.-1858   	; 0x1534 <main+0x228>
                break;
                
                
            case GO_TO_GOAL_CURVED:
                
                if (status_go_to_goal == 0)
    1c76:	21 14       	cp	r2, r1
    1c78:	31 04       	cpc	r3, r1
    1c7a:	09 f0       	breq	.+2      	; 0x1c7e <main+0x972>
    1c7c:	08 c2       	rjmp	.+1040   	; 0x208e <main+0xd82>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1c7e:	23 96       	adiw	r28, 0x03	; 3
    1c80:	ee ac       	ldd	r14, Y+62	; 0x3e
    1c82:	ff ac       	ldd	r15, Y+63	; 0x3f
    1c84:	23 97       	sbiw	r28, 0x03	; 3
    1c86:	c7 01       	movw	r24, r14
    1c88:	65 96       	adiw	r28, 0x15	; 21
    1c8a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1c8c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1c8e:	65 97       	sbiw	r28, 0x15	; 21
    1c90:	82 1b       	sub	r24, r18
    1c92:	93 0b       	sbc	r25, r19
    1c94:	25 96       	adiw	r28, 0x05	; 5
    1c96:	0e ad       	ldd	r16, Y+62	; 0x3e
    1c98:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c9a:	25 97       	sbiw	r28, 0x05	; 5
    1c9c:	88 9f       	mul	r24, r24
    1c9e:	b0 01       	movw	r22, r0
    1ca0:	89 9f       	mul	r24, r25
    1ca2:	70 0d       	add	r23, r0
    1ca4:	70 0d       	add	r23, r0
    1ca6:	11 24       	eor	r1, r1
    1ca8:	00 9f       	mul	r16, r16
    1caa:	c0 01       	movw	r24, r0
    1cac:	01 9f       	mul	r16, r17
    1cae:	90 0d       	add	r25, r0
    1cb0:	90 0d       	add	r25, r0
    1cb2:	11 24       	eor	r1, r1
    1cb4:	68 0f       	add	r22, r24
    1cb6:	79 1f       	adc	r23, r25
    1cb8:	88 27       	eor	r24, r24
    1cba:	77 fd       	sbrc	r23, 7
    1cbc:	80 95       	com	r24
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1cc4:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <sqrt>
    1cc8:	6b 96       	adiw	r28, 0x1b	; 27
    1cca:	6c af       	std	Y+60, r22	; 0x3c
    1ccc:	7d af       	std	Y+61, r23	; 0x3d
    1cce:	8e af       	std	Y+62, r24	; 0x3e
    1cd0:	9f af       	std	Y+63, r25	; 0x3f
    1cd2:	6b 97       	sbiw	r28, 0x1b	; 27
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    1cd4:	20 e0       	ldi	r18, 0x00	; 0
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	48 e8       	ldi	r20, 0x88	; 136
    1cda:	51 e4       	ldi	r21, 0x41	; 65
    1cdc:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1ce0:	88 23       	and	r24, r24
    1ce2:	0c f4       	brge	.+2      	; 0x1ce6 <main+0x9da>
    1ce4:	e5 cb       	rjmp	.-2102   	; 0x14b0 <main+0x1a4>
                        status_go_to_goal = 1;
                    else
                    {
                        
                        dir_x = goal_pos_x-x_robot;
    1ce6:	65 96       	adiw	r28, 0x15	; 21
    1ce8:	6e ad       	ldd	r22, Y+62	; 0x3e
    1cea:	7f ad       	ldd	r23, Y+63	; 0x3f
    1cec:	65 97       	sbiw	r28, 0x15	; 21
    1cee:	6e 19       	sub	r22, r14
    1cf0:	7f 09       	sbc	r23, r15
    1cf2:	88 27       	eor	r24, r24
    1cf4:	77 fd       	sbrc	r23, 7
    1cf6:	80 95       	com	r24
    1cf8:	98 2f       	mov	r25, r24
    1cfa:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1cfe:	46 2e       	mov	r4, r22
    1d00:	57 2e       	mov	r5, r23
    1d02:	68 2e       	mov	r6, r24
    1d04:	79 2e       	mov	r7, r25
                        dir_y = goal_pos_y-y_robot;
    1d06:	66 27       	eor	r22, r22
    1d08:	77 27       	eor	r23, r23
    1d0a:	60 1b       	sub	r22, r16
    1d0c:	71 0b       	sbc	r23, r17
    1d0e:	88 27       	eor	r24, r24
    1d10:	77 fd       	sbrc	r23, 7
    1d12:	80 95       	com	r24
    1d14:	98 2f       	mov	r25, r24
    1d16:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1d1a:	26 2f       	mov	r18, r22
    1d1c:	37 2f       	mov	r19, r23
    1d1e:	48 2f       	mov	r20, r24
    1d20:	59 2f       	mov	r21, r25
    1d22:	a0 96       	adiw	r28, 0x20	; 32
    1d24:	6f af       	std	Y+63, r22	; 0x3f
    1d26:	a0 97       	sbiw	r28, 0x20	; 32
    1d28:	a1 96       	adiw	r28, 0x21	; 33
    1d2a:	7f af       	std	Y+63, r23	; 0x3f
    1d2c:	a1 97       	sbiw	r28, 0x21	; 33
    1d2e:	a2 96       	adiw	r28, 0x22	; 34
    1d30:	8f af       	std	Y+63, r24	; 0x3f
    1d32:	a2 97       	sbiw	r28, 0x22	; 34
    1d34:	a3 96       	adiw	r28, 0x23	; 35
    1d36:	9f af       	std	Y+63, r25	; 0x3f
    1d38:	a3 97       	sbiw	r28, 0x23	; 35
                        dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1d3a:	c3 01       	movw	r24, r6
    1d3c:	b2 01       	movw	r22, r4
    1d3e:	90 58       	subi	r25, 0x80	; 128
    1d40:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <atan2>
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	44 e3       	ldi	r20, 0x34	; 52
    1d4a:	53 e4       	ldi	r21, 0x43	; 67
    1d4c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <__mulsf3>
    1d50:	2b ed       	ldi	r18, 0xDB	; 219
    1d52:	3f e0       	ldi	r19, 0x0F	; 15
    1d54:	49 e4       	ldi	r20, 0x49	; 73
    1d56:	50 e4       	ldi	r21, 0x40	; 64
    1d58:	0e 94 2c 15 	call	0x2a58	; 0x2a58 <__divsf3>
    1d5c:	96 2e       	mov	r9, r22
    1d5e:	87 2e       	mov	r8, r23
    1d60:	18 2f       	mov	r17, r24
    1d62:	09 2f       	mov	r16, r25
    1d64:	6c 96       	adiw	r28, 0x1c	; 28
    1d66:	6f af       	std	Y+63, r22	; 0x3f
    1d68:	6c 97       	sbiw	r28, 0x1c	; 28
    1d6a:	6d 96       	adiw	r28, 0x1d	; 29
    1d6c:	7f af       	std	Y+63, r23	; 0x3f
    1d6e:	6d 97       	sbiw	r28, 0x1d	; 29
    1d70:	6e 96       	adiw	r28, 0x1e	; 30
    1d72:	8f af       	std	Y+63, r24	; 0x3f
    1d74:	6e 97       	sbiw	r28, 0x1e	; 30
    1d76:	6f 96       	adiw	r28, 0x1f	; 31
    1d78:	9f af       	std	Y+63, r25	; 0x3f
    1d7a:	6f 97       	sbiw	r28, 0x1f	; 31
                        
                        
                        float angle_dir_aux = dir_angle-180;
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	44 e3       	ldi	r20, 0x34	; 52
    1d82:	53 e4       	ldi	r21, 0x43	; 67
    1d84:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1d88:	b6 2e       	mov	r11, r22
    1d8a:	a7 2e       	mov	r10, r23
    1d8c:	62 96       	adiw	r28, 0x12	; 18
    1d8e:	8f af       	std	Y+63, r24	; 0x3f
    1d90:	62 97       	sbiw	r28, 0x12	; 18
    1d92:	66 96       	adiw	r28, 0x16	; 22
    1d94:	9f af       	std	Y+63, r25	; 0x3f
    1d96:	66 97       	sbiw	r28, 0x16	; 22
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	30 e0       	ldi	r19, 0x00	; 0
    1d9c:	44 e3       	ldi	r20, 0x34	; 52
    1d9e:	53 ec       	ldi	r21, 0xC3	; 195
    1da0:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1da4:	88 23       	and	r24, r24
    1da6:	0c f0       	brlt	.+2      	; 0x1daa <main+0xa9e>
    1da8:	0c c2       	rjmp	.+1048   	; 0x21c2 <main+0xeb6>
                        {
                            angle_dir_aux += 360;
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	44 eb       	ldi	r20, 0xB4	; 180
    1db0:	53 e4       	ldi	r21, 0x43	; 67
    1db2:	62 96       	adiw	r28, 0x12	; 18
    1db4:	ff ad       	ldd	r31, Y+63	; 0x3f
    1db6:	62 97       	sbiw	r28, 0x12	; 18
    1db8:	66 96       	adiw	r28, 0x16	; 22
    1dba:	ef ad       	ldd	r30, Y+63	; 0x3f
    1dbc:	66 97       	sbiw	r28, 0x16	; 22
    1dbe:	6b 2d       	mov	r22, r11
    1dc0:	7a 2d       	mov	r23, r10
    1dc2:	8f 2f       	mov	r24, r31
    1dc4:	9e 2f       	mov	r25, r30
    1dc6:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
    1dca:	62 96       	adiw	r28, 0x12	; 18
    1dcc:	6f af       	std	Y+63, r22	; 0x3f
    1dce:	62 97       	sbiw	r28, 0x12	; 18
    1dd0:	66 96       	adiw	r28, 0x16	; 22
    1dd2:	7f af       	std	Y+63, r23	; 0x3f
    1dd4:	66 97       	sbiw	r28, 0x16	; 22
    1dd6:	a4 96       	adiw	r28, 0x24	; 36
    1dd8:	8f af       	std	Y+63, r24	; 0x3f
    1dda:	a4 97       	sbiw	r28, 0x24	; 36
    1ddc:	a6 96       	adiw	r28, 0x26	; 38
    1dde:	9f af       	std	Y+63, r25	; 0x3f
    1de0:	a6 97       	sbiw	r28, 0x26	; 38
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
                            commands_var = 2;
                        }
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1de2:	27 96       	adiw	r28, 0x07	; 7
    1de4:	ae ac       	ldd	r10, Y+62	; 0x3e
    1de6:	bf ac       	ldd	r11, Y+63	; 0x3f
    1de8:	27 97       	sbiw	r28, 0x07	; 7
    1dea:	b5 01       	movw	r22, r10
    1dec:	88 27       	eor	r24, r24
    1dee:	77 fd       	sbrc	r23, 7
    1df0:	80 95       	com	r24
    1df2:	98 2f       	mov	r25, r24
    1df4:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1df8:	6b 01       	movw	r12, r22
    1dfa:	7c 01       	movw	r14, r24
    1dfc:	9b 01       	movw	r18, r22
    1dfe:	ac 01       	movw	r20, r24
    1e00:	69 2d       	mov	r22, r9
    1e02:	78 2d       	mov	r23, r8
    1e04:	81 2f       	mov	r24, r17
    1e06:	90 2f       	mov	r25, r16
    1e08:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1e0c:	88 23       	and	r24, r24
    1e0e:	0c f0       	brlt	.+2      	; 0x1e12 <main+0xb06>
    1e10:	94 c0       	rjmp	.+296    	; 0x1f3a <main+0xc2e>
    1e12:	98 c0       	rjmp	.+304    	; 0x1f44 <main+0xc38>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1e14:	a7 01       	movw	r20, r14
    1e16:	96 01       	movw	r18, r12
    1e18:	69 2d       	mov	r22, r9
    1e1a:	78 2d       	mov	r23, r8
    1e1c:	81 2f       	mov	r24, r17
    1e1e:	90 2f       	mov	r25, r16
    1e20:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1e24:	88 23       	and	r24, r24
    1e26:	fc f0       	brlt	.+62     	; 0x1e66 <main+0xb5a>
                        {
                            diff_theta = dir_angle - theta_robot;
    1e28:	a7 01       	movw	r20, r14
    1e2a:	96 01       	movw	r18, r12
    1e2c:	69 2d       	mov	r22, r9
    1e2e:	78 2d       	mov	r23, r8
    1e30:	81 2f       	mov	r24, r17
    1e32:	90 2f       	mov	r25, r16
    1e34:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1e38:	a4 96       	adiw	r28, 0x24	; 36
    1e3a:	6f af       	std	Y+63, r22	; 0x3f
    1e3c:	a4 97       	sbiw	r28, 0x24	; 36
    1e3e:	a6 96       	adiw	r28, 0x26	; 38
    1e40:	7f af       	std	Y+63, r23	; 0x3f
    1e42:	a6 97       	sbiw	r28, 0x26	; 38
    1e44:	a7 96       	adiw	r28, 0x27	; 39
    1e46:	8f af       	std	Y+63, r24	; 0x3f
    1e48:	a7 97       	sbiw	r28, 0x27	; 39
    1e4a:	a8 96       	adiw	r28, 0x28	; 40
    1e4c:	9f af       	std	Y+63, r25	; 0x3f
    1e4e:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 0;
                            commands_var = 1;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	63 96       	adiw	r28, 0x13	; 19
    1e56:	9f af       	std	Y+63, r25	; 0x3f
    1e58:	8e af       	std	Y+62, r24	; 0x3e
    1e5a:	63 97       	sbiw	r28, 0x13	; 19
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
                        {
                            diff_theta = dir_angle - theta_robot;
                            bank = 0;
    1e5c:	67 96       	adiw	r28, 0x17	; 23
    1e5e:	1f ae       	std	Y+63, r1	; 0x3f
    1e60:	1e ae       	std	Y+62, r1	; 0x3e
    1e62:	67 97       	sbiw	r28, 0x17	; 23
                            commands_var = 1;
    1e64:	67 cb       	rjmp	.-2354   	; 0x1534 <main+0x228>
                        }
                        else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    1e66:	a7 01       	movw	r20, r14
    1e68:	96 01       	movw	r18, r12
    1e6a:	62 96       	adiw	r28, 0x12	; 18
    1e6c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e6e:	62 97       	sbiw	r28, 0x12	; 18
    1e70:	66 96       	adiw	r28, 0x16	; 22
    1e72:	ef ad       	ldd	r30, Y+63	; 0x3f
    1e74:	66 97       	sbiw	r28, 0x16	; 22
    1e76:	6b 2d       	mov	r22, r11
    1e78:	7a 2d       	mov	r23, r10
    1e7a:	8f 2f       	mov	r24, r31
    1e7c:	9e 2f       	mov	r25, r30
    1e7e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    1e82:	18 16       	cp	r1, r24
    1e84:	5c f0       	brlt	.+22     	; 0x1e9c <main+0xb90>
    1e86:	a7 01       	movw	r20, r14
    1e88:	96 01       	movw	r18, r12
    1e8a:	69 2d       	mov	r22, r9
    1e8c:	78 2d       	mov	r23, r8
    1e8e:	81 2f       	mov	r24, r17
    1e90:	90 2f       	mov	r25, r16
    1e92:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1e96:	88 23       	and	r24, r24
    1e98:	0c f0       	brlt	.+2      	; 0x1e9c <main+0xb90>
    1e9a:	0e cb       	rjmp	.-2532   	; 0x14b8 <main+0x1ac>
                        {
                            if (theta_robot < 0)
    1e9c:	a5 96       	adiw	r28, 0x25	; 37
    1e9e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ea0:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ea2:	a5 97       	sbiw	r28, 0x25	; 37
    1ea4:	bb 23       	and	r27, r27
    1ea6:	44 f5       	brge	.+80     	; 0x1ef8 <main+0xbec>
                                diff_theta = (theta_robot+360) - dir_angle;
    1ea8:	bd 01       	movw	r22, r26
    1eaa:	68 59       	subi	r22, 0x98	; 152
    1eac:	7e 4f       	sbci	r23, 0xFE	; 254
    1eae:	88 27       	eor	r24, r24
    1eb0:	77 fd       	sbrc	r23, 7
    1eb2:	80 95       	com	r24
    1eb4:	98 2f       	mov	r25, r24
    1eb6:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    1eba:	29 2d       	mov	r18, r9
    1ebc:	38 2d       	mov	r19, r8
    1ebe:	41 2f       	mov	r20, r17
    1ec0:	50 2f       	mov	r21, r16
    1ec2:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1ec6:	a4 96       	adiw	r28, 0x24	; 36
    1ec8:	6f af       	std	Y+63, r22	; 0x3f
    1eca:	a4 97       	sbiw	r28, 0x24	; 36
    1ecc:	a6 96       	adiw	r28, 0x26	; 38
    1ece:	7f af       	std	Y+63, r23	; 0x3f
    1ed0:	a6 97       	sbiw	r28, 0x26	; 38
    1ed2:	a7 96       	adiw	r28, 0x27	; 39
    1ed4:	8f af       	std	Y+63, r24	; 0x3f
    1ed6:	a7 97       	sbiw	r28, 0x27	; 39
    1ed8:	a8 96       	adiw	r28, 0x28	; 40
    1eda:	9f af       	std	Y+63, r25	; 0x3f
    1edc:	a8 97       	sbiw	r28, 0x28	; 40
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
                            commands_var = 2;
    1ede:	e2 e0       	ldi	r30, 0x02	; 2
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	63 96       	adiw	r28, 0x13	; 19
    1ee4:	ff af       	std	Y+63, r31	; 0x3f
    1ee6:	ee af       	std	Y+62, r30	; 0x3e
    1ee8:	63 97       	sbiw	r28, 0x13	; 19
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
    1eea:	21 e0       	ldi	r18, 0x01	; 1
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	67 96       	adiw	r28, 0x17	; 23
    1ef0:	3f af       	std	Y+63, r19	; 0x3f
    1ef2:	2e af       	std	Y+62, r18	; 0x3e
    1ef4:	67 97       	sbiw	r28, 0x17	; 23
    1ef6:	1e cb       	rjmp	.-2500   	; 0x1534 <main+0x228>
                        else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
    1ef8:	29 2d       	mov	r18, r9
    1efa:	38 2d       	mov	r19, r8
    1efc:	41 2f       	mov	r20, r17
    1efe:	50 2f       	mov	r21, r16
    1f00:	c7 01       	movw	r24, r14
    1f02:	b6 01       	movw	r22, r12
    1f04:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1f08:	a4 96       	adiw	r28, 0x24	; 36
    1f0a:	6f af       	std	Y+63, r22	; 0x3f
    1f0c:	a4 97       	sbiw	r28, 0x24	; 36
    1f0e:	a6 96       	adiw	r28, 0x26	; 38
    1f10:	7f af       	std	Y+63, r23	; 0x3f
    1f12:	a6 97       	sbiw	r28, 0x26	; 38
    1f14:	a7 96       	adiw	r28, 0x27	; 39
    1f16:	8f af       	std	Y+63, r24	; 0x3f
    1f18:	a7 97       	sbiw	r28, 0x27	; 39
    1f1a:	a8 96       	adiw	r28, 0x28	; 40
    1f1c:	9f af       	std	Y+63, r25	; 0x3f
    1f1e:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 1;
                            commands_var = 2;
    1f20:	82 e0       	ldi	r24, 0x02	; 2
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	63 96       	adiw	r28, 0x13	; 19
    1f26:	9f af       	std	Y+63, r25	; 0x3f
    1f28:	8e af       	std	Y+62, r24	; 0x3e
    1f2a:	63 97       	sbiw	r28, 0x13	; 19
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
    1f2c:	a1 e0       	ldi	r26, 0x01	; 1
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	67 96       	adiw	r28, 0x17	; 23
    1f32:	bf af       	std	Y+63, r27	; 0x3f
    1f34:	ae af       	std	Y+62, r26	; 0x3e
    1f36:	67 97       	sbiw	r28, 0x17	; 23
    1f38:	fd ca       	rjmp	.-2566   	; 0x1534 <main+0x228>
                            commands_var = 2;
                        }
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1f3a:	bc e4       	ldi	r27, 0x4C	; 76
    1f3c:	ab 16       	cp	r10, r27
    1f3e:	bf ef       	ldi	r27, 0xFF	; 255
    1f40:	bb 06       	cpc	r11, r27
    1f42:	e4 f4       	brge	.+56     	; 0x1f7c <main+0xc70>
    1f44:	a7 01       	movw	r20, r14
    1f46:	96 01       	movw	r18, r12
    1f48:	62 96       	adiw	r28, 0x12	; 18
    1f4a:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f4c:	62 97       	sbiw	r28, 0x12	; 18
    1f4e:	66 96       	adiw	r28, 0x16	; 22
    1f50:	af ad       	ldd	r26, Y+63	; 0x3f
    1f52:	66 97       	sbiw	r28, 0x16	; 22
    1f54:	a4 96       	adiw	r28, 0x24	; 36
    1f56:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f58:	a4 97       	sbiw	r28, 0x24	; 36
    1f5a:	a6 96       	adiw	r28, 0x26	; 38
    1f5c:	ef ad       	ldd	r30, Y+63	; 0x3f
    1f5e:	a6 97       	sbiw	r28, 0x26	; 38
    1f60:	6b 2f       	mov	r22, r27
    1f62:	7a 2f       	mov	r23, r26
    1f64:	8f 2f       	mov	r24, r31
    1f66:	9e 2f       	mov	r25, r30
    1f68:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    1f6c:	18 16       	cp	r1, r24
    1f6e:	0c f4       	brge	.+2      	; 0x1f72 <main+0xc66>
    1f70:	4b c0       	rjmp	.+150    	; 0x2008 <main+0xcfc>
    1f72:	e5 eb       	ldi	r30, 0xB5	; 181
    1f74:	ae 16       	cp	r10, r30
    1f76:	b1 04       	cpc	r11, r1
    1f78:	0c f0       	brlt	.+2      	; 0x1f7c <main+0xc70>
    1f7a:	46 c0       	rjmp	.+140    	; 0x2008 <main+0xcfc>
                        {
                            if (theta_robot < 0)
    1f7c:	bb 20       	and	r11, r11
    1f7e:	fc f4       	brge	.+62     	; 0x1fbe <main+0xcb2>
                                diff_theta = dir_angle - theta_robot;
    1f80:	a7 01       	movw	r20, r14
    1f82:	96 01       	movw	r18, r12
    1f84:	69 2d       	mov	r22, r9
    1f86:	78 2d       	mov	r23, r8
    1f88:	81 2f       	mov	r24, r17
    1f8a:	90 2f       	mov	r25, r16
    1f8c:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1f90:	a4 96       	adiw	r28, 0x24	; 36
    1f92:	6f af       	std	Y+63, r22	; 0x3f
    1f94:	a4 97       	sbiw	r28, 0x24	; 36
    1f96:	a6 96       	adiw	r28, 0x26	; 38
    1f98:	7f af       	std	Y+63, r23	; 0x3f
    1f9a:	a6 97       	sbiw	r28, 0x26	; 38
    1f9c:	a7 96       	adiw	r28, 0x27	; 39
    1f9e:	8f af       	std	Y+63, r24	; 0x3f
    1fa0:	a7 97       	sbiw	r28, 0x27	; 39
    1fa2:	a8 96       	adiw	r28, 0x28	; 40
    1fa4:	9f af       	std	Y+63, r25	; 0x3f
    1fa6:	a8 97       	sbiw	r28, 0x28	; 40
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
                            commands_var = 3;
    1fa8:	23 e0       	ldi	r18, 0x03	; 3
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	63 96       	adiw	r28, 0x13	; 19
    1fae:	3f af       	std	Y+63, r19	; 0x3f
    1fb0:	2e af       	std	Y+62, r18	; 0x3e
    1fb2:	63 97       	sbiw	r28, 0x13	; 19
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
    1fb4:	67 96       	adiw	r28, 0x17	; 23
    1fb6:	1f ae       	std	Y+63, r1	; 0x3f
    1fb8:	1e ae       	std	Y+62, r1	; 0x3e
    1fba:	67 97       	sbiw	r28, 0x17	; 23
    1fbc:	bb ca       	rjmp	.-2698   	; 0x1534 <main+0x228>
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	44 eb       	ldi	r20, 0xB4	; 180
    1fc4:	53 e4       	ldi	r21, 0x43	; 67
    1fc6:	69 2d       	mov	r22, r9
    1fc8:	78 2d       	mov	r23, r8
    1fca:	81 2f       	mov	r24, r17
    1fcc:	90 2f       	mov	r25, r16
    1fce:	0e 94 5f 14 	call	0x28be	; 0x28be <__addsf3>
    1fd2:	a7 01       	movw	r20, r14
    1fd4:	96 01       	movw	r18, r12
    1fd6:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    1fda:	a4 96       	adiw	r28, 0x24	; 36
    1fdc:	6f af       	std	Y+63, r22	; 0x3f
    1fde:	a4 97       	sbiw	r28, 0x24	; 36
    1fe0:	a6 96       	adiw	r28, 0x26	; 38
    1fe2:	7f af       	std	Y+63, r23	; 0x3f
    1fe4:	a6 97       	sbiw	r28, 0x26	; 38
    1fe6:	a7 96       	adiw	r28, 0x27	; 39
    1fe8:	8f af       	std	Y+63, r24	; 0x3f
    1fea:	a7 97       	sbiw	r28, 0x27	; 39
    1fec:	a8 96       	adiw	r28, 0x28	; 40
    1fee:	9f af       	std	Y+63, r25	; 0x3f
    1ff0:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 0;
                            commands_var = 3;
    1ff2:	83 e0       	ldi	r24, 0x03	; 3
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	63 96       	adiw	r28, 0x13	; 19
    1ff8:	9f af       	std	Y+63, r25	; 0x3f
    1ffa:	8e af       	std	Y+62, r24	; 0x3e
    1ffc:	63 97       	sbiw	r28, 0x13	; 19
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
    1ffe:	67 96       	adiw	r28, 0x17	; 23
    2000:	1f ae       	std	Y+63, r1	; 0x3f
    2002:	1e ae       	std	Y+62, r1	; 0x3e
    2004:	67 97       	sbiw	r28, 0x17	; 23
    2006:	96 ca       	rjmp	.-2772   	; 0x1534 <main+0x228>
                            commands_var = 3;
                        }
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    2008:	a7 01       	movw	r20, r14
    200a:	96 01       	movw	r18, r12
    200c:	69 2d       	mov	r22, r9
    200e:	78 2d       	mov	r23, r8
    2010:	81 2f       	mov	r24, r17
    2012:	90 2f       	mov	r25, r16
    2014:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    2018:	88 23       	and	r24, r24
    201a:	0c f0       	brlt	.+2      	; 0x201e <main+0xd12>
    201c:	62 ca       	rjmp	.-2876   	; 0x14e2 <main+0x1d6>
    201e:	a7 01       	movw	r20, r14
    2020:	96 01       	movw	r18, r12
    2022:	62 96       	adiw	r28, 0x12	; 18
    2024:	bf ad       	ldd	r27, Y+63	; 0x3f
    2026:	62 97       	sbiw	r28, 0x12	; 18
    2028:	66 96       	adiw	r28, 0x16	; 22
    202a:	af ad       	ldd	r26, Y+63	; 0x3f
    202c:	66 97       	sbiw	r28, 0x16	; 22
    202e:	a4 96       	adiw	r28, 0x24	; 36
    2030:	ff ad       	ldd	r31, Y+63	; 0x3f
    2032:	a4 97       	sbiw	r28, 0x24	; 36
    2034:	a6 96       	adiw	r28, 0x26	; 38
    2036:	ef ad       	ldd	r30, Y+63	; 0x3f
    2038:	a6 97       	sbiw	r28, 0x26	; 38
    203a:	6b 2f       	mov	r22, r27
    203c:	7a 2f       	mov	r23, r26
    203e:	8f 2f       	mov	r24, r31
    2040:	9e 2f       	mov	r25, r30
    2042:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    2046:	18 16       	cp	r1, r24
    2048:	0c f0       	brlt	.+2      	; 0x204c <main+0xd40>
    204a:	60 ca       	rjmp	.-2880   	; 0x150c <main+0x200>
                        {
                            diff_theta = theta_robot - dir_angle;
    204c:	29 2d       	mov	r18, r9
    204e:	38 2d       	mov	r19, r8
    2050:	41 2f       	mov	r20, r17
    2052:	50 2f       	mov	r21, r16
    2054:	c7 01       	movw	r24, r14
    2056:	b6 01       	movw	r22, r12
    2058:	0e 94 5e 14 	call	0x28bc	; 0x28bc <__subsf3>
    205c:	a4 96       	adiw	r28, 0x24	; 36
    205e:	6f af       	std	Y+63, r22	; 0x3f
    2060:	a4 97       	sbiw	r28, 0x24	; 36
    2062:	a6 96       	adiw	r28, 0x26	; 38
    2064:	7f af       	std	Y+63, r23	; 0x3f
    2066:	a6 97       	sbiw	r28, 0x26	; 38
    2068:	a7 96       	adiw	r28, 0x27	; 39
    206a:	8f af       	std	Y+63, r24	; 0x3f
    206c:	a7 97       	sbiw	r28, 0x27	; 39
    206e:	a8 96       	adiw	r28, 0x28	; 40
    2070:	9f af       	std	Y+63, r25	; 0x3f
    2072:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 1;
                            commands_var = 4;
    2074:	a4 e0       	ldi	r26, 0x04	; 4
    2076:	b0 e0       	ldi	r27, 0x00	; 0
    2078:	63 96       	adiw	r28, 0x13	; 19
    207a:	bf af       	std	Y+63, r27	; 0x3f
    207c:	ae af       	std	Y+62, r26	; 0x3e
    207e:	63 97       	sbiw	r28, 0x13	; 19
                            commands_var = 3;
                        }
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
    2080:	e1 e0       	ldi	r30, 0x01	; 1
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	67 96       	adiw	r28, 0x17	; 23
    2086:	ff af       	std	Y+63, r31	; 0x3f
    2088:	ee af       	std	Y+62, r30	; 0x3e
    208a:	67 97       	sbiw	r28, 0x17	; 23
                            commands_var = 4;
    208c:	53 ca       	rjmp	.-2906   	; 0x1534 <main+0x228>
                            commands_var = 0;
                        }
                        
                    }
                }
                else if (status_go_to_goal == 1)
    208e:	f1 e0       	ldi	r31, 0x01	; 1
    2090:	2f 16       	cp	r2, r31
    2092:	31 04       	cpc	r3, r1
    2094:	09 f0       	breq	.+2      	; 0x2098 <main+0xd8c>
    2096:	4e ca       	rjmp	.-2916   	; 0x1534 <main+0x228>
                {
                    //stop_motor();
                    status_go_to_goal = 2;
                    state = 3;
    2098:	23 e0       	ldi	r18, 0x03	; 3
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	30 93 4b 01 	sts	0x014B, r19
    20a0:	20 93 4a 01 	sts	0x014A, r18
                    }
                }
                else if (status_go_to_goal == 1)
                {
                    //stop_motor();
                    status_go_to_goal = 2;
    20a4:	68 94       	set
    20a6:	22 24       	eor	r2, r2
    20a8:	21 f8       	bld	r2, 1
    20aa:	31 2c       	mov	r3, r1
    20ac:	43 ca       	rjmp	.-2938   	; 0x1534 <main+0x228>
                    state = 3;
                }
                break;
             
			case SYSTEM_STATE:
				switch (buffer_rec[0])
    20ae:	80 91 3e 01 	lds	r24, 0x013E
    20b2:	83 3a       	cpi	r24, 0xA3	; 163
    20b4:	e9 f1       	breq	.+122    	; 0x2130 <main+0xe24>
    20b6:	38 f4       	brcc	.+14     	; 0x20c6 <main+0xdba>
    20b8:	81 3a       	cpi	r24, 0xA1	; 161
    20ba:	b1 f0       	breq	.+44     	; 0x20e8 <main+0xddc>
    20bc:	78 f5       	brcc	.+94     	; 0x211c <main+0xe10>
    20be:	80 3a       	cpi	r24, 0xA0	; 160
    20c0:	09 f0       	breq	.+2      	; 0x20c4 <main+0xdb8>
    20c2:	38 ca       	rjmp	.-2960   	; 0x1534 <main+0x228>
    20c4:	0a c0       	rjmp	.+20     	; 0x20da <main+0xdce>
    20c6:	86 3a       	cpi	r24, 0xA6	; 166
    20c8:	09 f4       	brne	.+2      	; 0x20cc <main+0xdc0>
    20ca:	49 c0       	rjmp	.+146    	; 0x215e <main+0xe52>
    20cc:	87 3a       	cpi	r24, 0xA7	; 167
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <main+0xdc6>
    20d0:	4d c0       	rjmp	.+154    	; 0x216c <main+0xe60>
    20d2:	84 3a       	cpi	r24, 0xA4	; 164
    20d4:	09 f0       	breq	.+2      	; 0x20d8 <main+0xdcc>
    20d6:	2e ca       	rjmp	.-2980   	; 0x1534 <main+0x228>
    20d8:	35 c0       	rjmp	.+106    	; 0x2144 <main+0xe38>
				{
					//Comm test
					case 0xA0:
						state = BLUE_LED_STATE;
    20da:	86 e1       	ldi	r24, 0x16	; 22
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	90 93 4b 01 	sts	0x014B, r25
    20e2:	80 93 4a 01 	sts	0x014A, r24
						break;
    20e6:	26 ca       	rjmp	.-2996   	; 0x1534 <main+0x228>
						
					//Play
					case 0xA1:
						if (pause_bool)
    20e8:	ab 96       	adiw	r28, 0x2b	; 43
    20ea:	8e ad       	ldd	r24, Y+62	; 0x3e
    20ec:	9f ad       	ldd	r25, Y+63	; 0x3f
    20ee:	ab 97       	sbiw	r28, 0x2b	; 43
    20f0:	89 2b       	or	r24, r25
    20f2:	49 f0       	breq	.+18     	; 0x2106 <main+0xdfa>
						{
							state = past_state;
    20f4:	80 91 48 01 	lds	r24, 0x0148
    20f8:	90 91 49 01 	lds	r25, 0x0149
    20fc:	90 93 4b 01 	sts	0x014B, r25
    2100:	80 93 4a 01 	sts	0x014A, r24
    2104:	04 c0       	rjmp	.+8      	; 0x210e <main+0xe02>
							pause_bool = 0;
						}else
						{
							state = INITIAL_STATE;
    2106:	10 92 4b 01 	sts	0x014B, r1
    210a:	10 92 4a 01 	sts	0x014A, r1
						}
						m_red(ON);
    210e:	6e 9a       	sbi	0x0d, 6	; 13
    2110:	76 98       	cbi	0x0e, 6	; 14
    2112:	ab 96       	adiw	r28, 0x2b	; 43
    2114:	1f ae       	std	Y+63, r1	; 0x3f
    2116:	1e ae       	std	Y+62, r1	; 0x3e
    2118:	ab 97       	sbiw	r28, 0x2b	; 43
    211a:	0c ca       	rjmp	.-3048   	; 0x1534 <main+0x228>
						break;
					
					//Goal A
					case 0xA2:
						if (check(PINB,2))
    211c:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();					
    211e:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    2122:	85 e1       	ldi	r24, 0x15	; 21
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	90 93 4b 01 	sts	0x014B, r25
    212a:	80 93 4a 01 	sts	0x014A, r24
						break;
    212e:	02 ca       	rjmp	.-3068   	; 0x1534 <main+0x228>
						
					//Goal B
					case 0xA3:
						if (!check(PINB,2))
    2130:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();
    2132:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    2136:	85 e1       	ldi	r24, 0x15	; 21
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	90 93 4b 01 	sts	0x014B, r25
    213e:	80 93 4a 01 	sts	0x014A, r24
						break;
    2142:	f8 c9       	rjmp	.-3088   	; 0x1534 <main+0x228>
						
					//Pause
					case 0xA4:
						pause_bool = 1;
						state = STOP_STATE;
    2144:	85 e1       	ldi	r24, 0x15	; 21
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	90 93 4b 01 	sts	0x014B, r25
    214c:	80 93 4a 01 	sts	0x014A, r24
						state = STOP_STATE;
						break;
						
					//Pause
					case 0xA4:
						pause_bool = 1;
    2150:	a1 e0       	ldi	r26, 0x01	; 1
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	ab 96       	adiw	r28, 0x2b	; 43
    2156:	bf af       	std	Y+63, r27	; 0x3f
    2158:	ae af       	std	Y+62, r26	; 0x3e
    215a:	ab 97       	sbiw	r28, 0x2b	; 43
						state = STOP_STATE;
						break;
    215c:	eb c9       	rjmp	.-3114   	; 0x1534 <main+0x228>
						
					//Halftime
					case 0xA6:
						state = STOP_STATE;
    215e:	85 e1       	ldi	r24, 0x15	; 21
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	90 93 4b 01 	sts	0x014B, r25
    2166:	80 93 4a 01 	sts	0x014A, r24
						break;
    216a:	e4 c9       	rjmp	.-3128   	; 0x1534 <main+0x228>
						
					//Game over
					case 0xA7:
						if (check(PINB,2))
    216c:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
							celebrate();
						}
						stop_motor();
    216e:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
						state = STOP_STATE;													
    2172:	85 e1       	ldi	r24, 0x15	; 21
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	90 93 4b 01 	sts	0x014B, r25
    217a:	80 93 4a 01 	sts	0x014A, r24
						break;
    217e:	da c9       	rjmp	.-3148   	; 0x1534 <main+0x228>
						break;						
				}
				break;
				
			case BLUE_LED_STATE:
				stop_motor();
    2180:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
				turnOnBlueLED();
				state = STOP_STATE;
    2184:	85 e1       	ldi	r24, 0x15	; 21
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	90 93 4b 01 	sts	0x014B, r25
    218c:	80 93 4a 01 	sts	0x014A, r24
				break;
    2190:	d1 c9       	rjmp	.-3166   	; 0x1534 <main+0x228>
				
			case STOP_STATE:
				stop_motor();
    2192:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
				break;			  
    2196:	ce c9       	rjmp	.-3172   	; 0x1534 <main+0x228>
                
            default:
			    stop_motor();
    2198:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
    219c:	cb c9       	rjmp	.-3178   	; 0x1534 <main+0x228>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    219e:	62 96       	adiw	r28, 0x12	; 18
    21a0:	7f ad       	ldd	r23, Y+63	; 0x3f
    21a2:	62 97       	sbiw	r28, 0x12	; 18
    21a4:	a9 96       	adiw	r28, 0x29	; 41
    21a6:	6f ad       	ldd	r22, Y+63	; 0x3f
    21a8:	a9 97       	sbiw	r28, 0x29	; 41
    21aa:	27 2f       	mov	r18, r23
    21ac:	36 2f       	mov	r19, r22
    21ae:	49 2d       	mov	r20, r9
    21b0:	58 2d       	mov	r21, r8
    21b2:	c7 01       	movw	r24, r14
    21b4:	b6 01       	movw	r22, r12
    21b6:	0e 94 d5 16 	call	0x2daa	; 0x2daa <__gesf2>
    21ba:	88 23       	and	r24, r24
    21bc:	0c f0       	brlt	.+2      	; 0x21c0 <main+0xeb4>
    21be:	3f cc       	rjmp	.-1922   	; 0x1a3e <main+0x732>
    21c0:	51 cc       	rjmp	.-1886   	; 0x1a64 <main+0x758>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    21c2:	27 96       	adiw	r28, 0x07	; 7
    21c4:	ee ad       	ldd	r30, Y+62	; 0x3e
    21c6:	ff ad       	ldd	r31, Y+63	; 0x3f
    21c8:	27 97       	sbiw	r28, 0x07	; 7
    21ca:	a5 96       	adiw	r28, 0x25	; 37
    21cc:	ff af       	std	Y+63, r31	; 0x3f
    21ce:	ee af       	std	Y+62, r30	; 0x3e
    21d0:	a5 97       	sbiw	r28, 0x25	; 37
    21d2:	bf 01       	movw	r22, r30
    21d4:	88 27       	eor	r24, r24
    21d6:	77 fd       	sbrc	r23, 7
    21d8:	80 95       	com	r24
    21da:	98 2f       	mov	r25, r24
    21dc:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <__floatsisf>
    21e0:	6b 01       	movw	r12, r22
    21e2:	7c 01       	movw	r14, r24
    21e4:	9b 01       	movw	r18, r22
    21e6:	ac 01       	movw	r20, r24
    21e8:	62 96       	adiw	r28, 0x12	; 18
    21ea:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ec:	62 97       	sbiw	r28, 0x12	; 18
    21ee:	66 96       	adiw	r28, 0x16	; 22
    21f0:	ef ad       	ldd	r30, Y+63	; 0x3f
    21f2:	66 97       	sbiw	r28, 0x16	; 22
    21f4:	6b 2d       	mov	r22, r11
    21f6:	7a 2d       	mov	r23, r10
    21f8:	8f 2f       	mov	r24, r31
    21fa:	9e 2f       	mov	r25, r30
    21fc:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <__cmpsf2>
    2200:	18 16       	cp	r1, r24
    2202:	0c f0       	brlt	.+2      	; 0x2206 <main+0xefa>
    2204:	07 ce       	rjmp	.-1010   	; 0x1e14 <main+0xb08>
    2206:	2f ce       	rjmp	.-930    	; 0x1e66 <main+0xb5a>

00002208 <__vector_41>:
 m_red(ON);
 flag_timer = 1;
 }*/

ISR(TIMER4_OVF_vect)
{
    2208:	1f 92       	push	r1
    220a:	0f 92       	push	r0
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	0f 92       	push	r0
    2210:	11 24       	eor	r1, r1
    2212:	8f 93       	push	r24
    2214:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	90 93 4d 01 	sts	0x014D, r25
    221e:	80 93 4c 01 	sts	0x014C, r24
}
    2222:	9f 91       	pop	r25
    2224:	8f 91       	pop	r24
    2226:	0f 90       	pop	r0
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	0f 90       	pop	r0
    222c:	1f 90       	pop	r1
    222e:	18 95       	reti

00002230 <__vector_3>:

ISR(INT2_vect)
{
    2230:	1f 92       	push	r1
    2232:	0f 92       	push	r0
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	0f 92       	push	r0
    2238:	11 24       	eor	r1, r1
    223a:	2f 93       	push	r18
    223c:	3f 93       	push	r19
    223e:	4f 93       	push	r20
    2240:	5f 93       	push	r21
    2242:	6f 93       	push	r22
    2244:	7f 93       	push	r23
    2246:	8f 93       	push	r24
    2248:	9f 93       	push	r25
    224a:	af 93       	push	r26
    224c:	bf 93       	push	r27
    224e:	ef 93       	push	r30
    2250:	ff 93       	push	r31
	//Read
	m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    2252:	6a e0       	ldi	r22, 0x0A	; 10
    2254:	8e e3       	ldi	r24, 0x3E	; 62
    2256:	91 e0       	ldi	r25, 0x01	; 1
    2258:	0e 94 b6 11 	call	0x236c	; 0x236c <m_rf_read>
	past_state = state;
    225c:	80 91 4a 01 	lds	r24, 0x014A
    2260:	90 91 4b 01 	lds	r25, 0x014B
    2264:	90 93 49 01 	sts	0x0149, r25
    2268:	80 93 48 01 	sts	0x0148, r24
	state = SYSTEM_STATE;
    226c:	83 e6       	ldi	r24, 0x63	; 99
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	90 93 4b 01 	sts	0x014B, r25
    2274:	80 93 4a 01 	sts	0x014A, r24
	m_green(ON); // Indicator receiving from RF
    2278:	6a 9a       	sbi	0x0d, 2	; 13
    227a:	72 98       	cbi	0x0e, 2	; 14
}
    227c:	ff 91       	pop	r31
    227e:	ef 91       	pop	r30
    2280:	bf 91       	pop	r27
    2282:	af 91       	pop	r26
    2284:	9f 91       	pop	r25
    2286:	8f 91       	pop	r24
    2288:	7f 91       	pop	r23
    228a:	6f 91       	pop	r22
    228c:	5f 91       	pop	r21
    228e:	4f 91       	pop	r20
    2290:	3f 91       	pop	r19
    2292:	2f 91       	pop	r18
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	0f 90       	pop	r0
    229a:	1f 90       	pop	r1
    229c:	18 95       	reti

0000229e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    229e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    22a0:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    22a2:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    22a4:	8c e0       	ldi	r24, 0x0C	; 12
    22a6:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    22aa:	e9 e6       	ldi	r30, 0x69	; 105
    22ac:	f0 e0       	ldi	r31, 0x00	; 0
    22ae:	80 81       	ld	r24, Z
    22b0:	80 62       	ori	r24, 0x20	; 32
    22b2:	80 83       	st	Z, r24
    22b4:	80 81       	ld	r24, Z
    22b6:	8f 7e       	andi	r24, 0xEF	; 239
    22b8:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    22ba:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    22bc:	78 94       	sei
    22be:	08 95       	ret

000022c0 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	18 2f       	mov	r17, r24
    22c8:	d6 2f       	mov	r29, r22
    22ca:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    22cc:	0e 94 4f 11 	call	0x229e	; 0x229e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    22d0:	94 ea       	ldi	r25, 0xA4	; 164
    22d2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    22d6:	ec eb       	ldi	r30, 0xBC	; 188
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	90 81       	ld	r25, Z
    22dc:	99 23       	and	r25, r25
    22de:	ec f7       	brge	.-6      	; 0x22da <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    22e0:	90 e5       	ldi	r25, 0x50	; 80
    22e2:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    22e6:	94 e8       	ldi	r25, 0x84	; 132
    22e8:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    22ec:	ec eb       	ldi	r30, 0xBC	; 188
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	90 81       	ld	r25, Z
    22f2:	99 23       	and	r25, r25
    22f4:	ec f7       	brge	.-6      	; 0x22f0 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    22f6:	90 91 b9 00 	lds	r25, 0x00B9
    22fa:	98 7f       	andi	r25, 0xF8	; 248
    22fc:	90 32       	cpi	r25, 0x20	; 32
    22fe:	29 f4       	brne	.+10     	; 0x230a <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2300:	84 e9       	ldi	r24, 0x94	; 148
    2302:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2306:	80 e0       	ldi	r24, 0x00	; 0
    2308:	2d c0       	rjmp	.+90     	; 0x2364 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    230a:	81 e0       	ldi	r24, 0x01	; 1
    230c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2310:	84 e8       	ldi	r24, 0x84	; 132
    2312:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2316:	ec eb       	ldi	r30, 0xBC	; 188
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	90 81       	ld	r25, Z
    231c:	99 23       	and	r25, r25
    231e:	ec f7       	brge	.-6      	; 0x231a <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    2320:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    2324:	84 e8       	ldi	r24, 0x84	; 132
    2326:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    232a:	ec eb       	ldi	r30, 0xBC	; 188
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	88 23       	and	r24, r24
    2332:	ec f7       	brge	.-6      	; 0x232e <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    2334:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2338:	84 e8       	ldi	r24, 0x84	; 132
    233a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    233e:	ec eb       	ldi	r30, 0xBC	; 188
    2340:	f0 e0       	ldi	r31, 0x00	; 0
    2342:	80 81       	ld	r24, Z
    2344:	88 23       	and	r24, r24
    2346:	ec f7       	brge	.-6      	; 0x2342 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2348:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    234c:	84 e8       	ldi	r24, 0x84	; 132
    234e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2352:	ec eb       	ldi	r30, 0xBC	; 188
    2354:	f0 e0       	ldi	r31, 0x00	; 0
    2356:	80 81       	ld	r24, Z
    2358:	88 23       	and	r24, r24
    235a:	ec f7       	brge	.-6      	; 0x2356 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    235c:	84 e9       	ldi	r24, 0x94	; 148
    235e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2362:	81 e0       	ldi	r24, 0x01	; 1
}
    2364:	df 91       	pop	r29
    2366:	cf 91       	pop	r28
    2368:	1f 91       	pop	r17
    236a:	08 95       	ret

0000236c <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    236c:	cf 93       	push	r28
    236e:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2370:	24 ea       	ldi	r18, 0xA4	; 164
    2372:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2376:	ec eb       	ldi	r30, 0xBC	; 188
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	20 81       	ld	r18, Z
    237c:	22 23       	and	r18, r18
    237e:	ec f7       	brge	.-6      	; 0x237a <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2380:	21 e5       	ldi	r18, 0x51	; 81
    2382:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2386:	24 e8       	ldi	r18, 0x84	; 132
    2388:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    238c:	ec eb       	ldi	r30, 0xBC	; 188
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	20 81       	ld	r18, Z
    2392:	22 23       	and	r18, r18
    2394:	ec f7       	brge	.-6      	; 0x2390 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2396:	20 91 b9 00 	lds	r18, 0x00B9
    239a:	28 7f       	andi	r18, 0xF8	; 248
    239c:	28 34       	cpi	r18, 0x48	; 72
    239e:	29 f4       	brne	.+10     	; 0x23aa <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23a0:	84 e9       	ldi	r24, 0x94	; 148
    23a2:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    23a6:	80 e0       	ldi	r24, 0x00	; 0
    23a8:	3f c0       	rjmp	.+126    	; 0x2428 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23aa:	24 ec       	ldi	r18, 0xC4	; 196
    23ac:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23b0:	ec eb       	ldi	r30, 0xBC	; 188
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	20 81       	ld	r18, Z
    23b6:	22 23       	and	r18, r18
    23b8:	ec f7       	brge	.-6      	; 0x23b4 <m_rf_read+0x48>
	bytes = TWDR;
    23ba:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    23be:	46 13       	cpse	r20, r22
    23c0:	09 c0       	rjmp	.+18     	; 0x23d4 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    23c2:	50 e0       	ldi	r21, 0x00	; 0
    23c4:	41 50       	subi	r20, 0x01	; 1
    23c6:	51 09       	sbc	r21, r1
    23c8:	14 16       	cp	r1, r20
    23ca:	15 06       	cpc	r1, r21
    23cc:	44 f0       	brlt	.+16     	; 0x23de <m_rf_read+0x72>
    23ce:	40 e0       	ldi	r20, 0x00	; 0
    23d0:	50 e0       	ldi	r21, 0x00	; 0
    23d2:	18 c0       	rjmp	.+48     	; 0x2404 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23d4:	84 e9       	ldi	r24, 0x94	; 148
    23d6:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    23da:	80 e0       	ldi	r24, 0x00	; 0
    23dc:	25 c0       	rjmp	.+74     	; 0x2428 <m_rf_read+0xbc>
    23de:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23e4:	ec eb       	ldi	r30, 0xBC	; 188
    23e6:	f0 e0       	ldi	r31, 0x00	; 0
    23e8:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    23ea:	cb eb       	ldi	r28, 0xBB	; 187
    23ec:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23ee:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23f0:	60 81       	ld	r22, Z
    23f2:	66 23       	and	r22, r22
    23f4:	ec f7       	brge	.-6      	; 0x23f0 <m_rf_read+0x84>
		buffer[i] = TWDR;
    23f6:	68 81       	ld	r22, Y
    23f8:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    23fa:	2f 5f       	subi	r18, 0xFF	; 255
    23fc:	3f 4f       	sbci	r19, 0xFF	; 255
    23fe:	24 17       	cp	r18, r20
    2400:	35 07       	cpc	r19, r21
    2402:	ac f3       	brlt	.-22     	; 0x23ee <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2404:	24 e8       	ldi	r18, 0x84	; 132
    2406:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    240a:	ec eb       	ldi	r30, 0xBC	; 188
    240c:	f0 e0       	ldi	r31, 0x00	; 0
    240e:	20 81       	ld	r18, Z
    2410:	22 23       	and	r18, r18
    2412:	ec f7       	brge	.-6      	; 0x240e <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    2414:	20 91 bb 00 	lds	r18, 0x00BB
    2418:	fc 01       	movw	r30, r24
    241a:	e4 0f       	add	r30, r20
    241c:	f5 1f       	adc	r31, r21
    241e:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2420:	84 e9       	ldi	r24, 0x94	; 148
    2422:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
}
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    2432:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2434:	94 ea       	ldi	r25, 0xA4	; 164
    2436:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    243a:	ec eb       	ldi	r30, 0xBC	; 188
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	90 81       	ld	r25, Z
    2440:	99 23       	and	r25, r25
    2442:	ec f7       	brge	.-6      	; 0x243e <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2444:	90 e5       	ldi	r25, 0x50	; 80
    2446:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    244a:	94 e8       	ldi	r25, 0x84	; 132
    244c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2450:	ec eb       	ldi	r30, 0xBC	; 188
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	90 81       	ld	r25, Z
    2456:	99 23       	and	r25, r25
    2458:	ec f7       	brge	.-6      	; 0x2454 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    245a:	90 91 b9 00 	lds	r25, 0x00B9
    245e:	98 7f       	andi	r25, 0xF8	; 248
    2460:	90 32       	cpi	r25, 0x20	; 32
    2462:	31 f4       	brne	.+12     	; 0x2470 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2464:	84 e9       	ldi	r24, 0x94	; 148
    2466:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    246a:	78 94       	sei
		return 0;
    246c:	80 e0       	ldi	r24, 0x00	; 0
    246e:	32 c0       	rjmp	.+100    	; 0x24d4 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    2470:	93 e0       	ldi	r25, 0x03	; 3
    2472:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2476:	94 e8       	ldi	r25, 0x84	; 132
    2478:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    247c:	ec eb       	ldi	r30, 0xBC	; 188
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	90 81       	ld	r25, Z
    2482:	99 23       	and	r25, r25
    2484:	ec f7       	brge	.-6      	; 0x2480 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    2486:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    248a:	84 e8       	ldi	r24, 0x84	; 132
    248c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2490:	ec eb       	ldi	r30, 0xBC	; 188
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	88 23       	and	r24, r24
    2498:	ec f7       	brge	.-6      	; 0x2494 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    249a:	24 2f       	mov	r18, r20
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	12 16       	cp	r1, r18
    24a0:	13 06       	cpc	r1, r19
    24a2:	9c f4       	brge	.+38     	; 0x24ca <m_rf_send+0x9c>
    24a4:	a6 2f       	mov	r26, r22
    24a6:	b7 2f       	mov	r27, r23
    24a8:	80 e0       	ldi	r24, 0x00	; 0
    24aa:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    24ac:	cb eb       	ldi	r28, 0xBB	; 187
    24ae:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    24b0:	ec eb       	ldi	r30, 0xBC	; 188
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    24b6:	4d 91       	ld	r20, X+
    24b8:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    24ba:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    24bc:	40 81       	ld	r20, Z
    24be:	44 23       	and	r20, r20
    24c0:	ec f7       	brge	.-6      	; 0x24bc <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    24c2:	01 96       	adiw	r24, 0x01	; 1
    24c4:	82 17       	cp	r24, r18
    24c6:	93 07       	cpc	r25, r19
    24c8:	b4 f3       	brlt	.-20     	; 0x24b6 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24ca:	84 e9       	ldi	r24, 0x94	; 148
    24cc:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    24d0:	78 94       	sei
	
	return 1;
    24d2:	81 e0       	ldi	r24, 0x01	; 1
}
    24d4:	df 91       	pop	r29
    24d6:	cf 91       	pop	r28
    24d8:	08 95       	ret

000024da <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    24da:	20 e0       	ldi	r18, 0x00	; 0
    24dc:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    24de:	ec eb       	ldi	r30, 0xBC	; 188
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	88 23       	and	r24, r24
    24e6:	34 f0       	brlt	.+12     	; 0x24f4 <twi_wait+0x1a>
    24e8:	2f 5f       	subi	r18, 0xFF	; 255
    24ea:	3f 4f       	sbci	r19, 0xFF	; 255
    24ec:	29 3e       	cpi	r18, 0xE9	; 233
    24ee:	83 e0       	ldi	r24, 0x03	; 3
    24f0:	38 07       	cpc	r19, r24
    24f2:	b9 f7       	brne	.-18     	; 0x24e2 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	28 3e       	cpi	r18, 0xE8	; 232
    24f8:	33 40       	sbci	r19, 0x03	; 3
    24fa:	09 f4       	brne	.+2      	; 0x24fe <twi_wait+0x24>
    24fc:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    24fe:	08 95       	ret

00002500 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2500:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2504:	84 e8       	ldi	r24, 0x84	; 132
    2506:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    250a:	0e 94 6d 12 	call	0x24da	; 0x24da <twi_wait>
    250e:	88 23       	and	r24, r24
    2510:	21 f0       	breq	.+8      	; 0x251a <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2512:	80 91 b9 00 	lds	r24, 0x00B9
    2516:	88 7f       	andi	r24, 0xF8	; 248
    2518:	08 95       	ret
	} else {
		return 0;					// comm failure
    251a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    251c:	08 95       	ret

0000251e <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    251e:	cf 93       	push	r28
    2520:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2522:	94 ea       	ldi	r25, 0xA4	; 164
    2524:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2528:	0e 94 6d 12 	call	0x24da	; 0x24da <twi_wait>
    252c:	88 23       	and	r24, r24
    252e:	61 f0       	breq	.+24     	; 0x2548 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2530:	8c 2f       	mov	r24, r28
    2532:	88 0f       	add	r24, r24
    2534:	8f 5f       	subi	r24, 0xFF	; 255
    2536:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    253a:	88 34       	cpi	r24, 0x48	; 72
    253c:	39 f4       	brne	.+14     	; 0x254c <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    253e:	84 e9       	ldi	r24, 0x94	; 148
    2540:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	03 c0       	rjmp	.+6      	; 0x254e <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	01 c0       	rjmp	.+2      	; 0x254e <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    254c:	81 e0       	ldi	r24, 0x01	; 1
}	
    254e:	cf 91       	pop	r28
    2550:	08 95       	ret

00002552 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2552:	cf 93       	push	r28
    2554:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2556:	94 ea       	ldi	r25, 0xA4	; 164
    2558:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    255c:	0e 94 6d 12 	call	0x24da	; 0x24da <twi_wait>
    2560:	88 23       	and	r24, r24
    2562:	59 f0       	breq	.+22     	; 0x257a <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2564:	8c 2f       	mov	r24, r28
    2566:	88 0f       	add	r24, r24
    2568:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    256c:	80 32       	cpi	r24, 0x20	; 32
    256e:	39 f4       	brne	.+14     	; 0x257e <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2570:	84 e9       	ldi	r24, 0x94	; 148
    2572:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	03 c0       	rjmp	.+6      	; 0x2580 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	01 c0       	rjmp	.+2      	; 0x2580 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    257e:	81 e0       	ldi	r24, 0x01	; 1
}	
    2580:	cf 91       	pop	r28
    2582:	08 95       	ret

00002584 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2584:	84 e9       	ldi	r24, 0x94	; 148
    2586:	80 93 bc 00 	sts	0x00BC, r24
    258a:	08 95       	ret

0000258c <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    258c:	ef 92       	push	r14
    258e:	ff 92       	push	r15
    2590:	0f 93       	push	r16
    2592:	1f 93       	push	r17
    2594:	cf 93       	push	r28
    2596:	df 93       	push	r29
    2598:	cd b7       	in	r28, 0x3d	; 61
    259a:	de b7       	in	r29, 0x3e	; 62
    259c:	60 97       	sbiw	r28, 0x10	; 16
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	e8 2e       	mov	r14, r24
    25aa:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    25ac:	fe 01       	movw	r30, r28
    25ae:	31 96       	adiw	r30, 0x01	; 1
    25b0:	80 e1       	ldi	r24, 0x10	; 16
    25b2:	df 01       	movw	r26, r30
    25b4:	1d 92       	st	X+, r1
    25b6:	8a 95       	dec	r24
    25b8:	e9 f7       	brne	.-6      	; 0x25b4 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    25ba:	88 e5       	ldi	r24, 0x58	; 88
    25bc:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    25c0:	88 23       	and	r24, r24
    25c2:	09 f4       	brne	.+2      	; 0x25c6 <m_wii_read+0x3a>
    25c4:	66 c0       	rjmp	.+204    	; 0x2692 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    25c6:	86 e3       	ldi	r24, 0x36	; 54
    25c8:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    25cc:	88 23       	and	r24, r24
    25ce:	09 f4       	brne	.+2      	; 0x25d2 <m_wii_read+0x46>
    25d0:	62 c0       	rjmp	.+196    	; 0x2696 <m_wii_read+0x10a>
	end();
    25d2:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    25d6:	b8 e0       	ldi	r27, 0x08	; 8
    25d8:	ba 95       	dec	r27
    25da:	f1 f7       	brne	.-4      	; 0x25d8 <m_wii_read+0x4c>
    25dc:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    25de:	88 e5       	ldi	r24, 0x58	; 88
    25e0:	0e 94 8f 12 	call	0x251e	; 0x251e <start_read>
    25e4:	88 23       	and	r24, r24
    25e6:	09 f4       	brne	.+2      	; 0x25ea <m_wii_read+0x5e>
    25e8:	58 c0       	rjmp	.+176    	; 0x269a <m_wii_read+0x10e>
    25ea:	ae 01       	movw	r20, r28
    25ec:	4f 5f       	subi	r20, 0xFF	; 255
    25ee:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    25f0:	8e 01       	movw	r16, r28
    25f2:	00 5f       	subi	r16, 0xF0	; 240
    25f4:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    25f6:	ec eb       	ldi	r30, 0xBC	; 188
    25f8:	f0 e0       	ldi	r31, 0x00	; 0
    25fa:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    25fc:	2b eb       	ldi	r18, 0xBB	; 187
    25fe:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2600:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2602:	80 81       	ld	r24, Z
    2604:	88 23       	and	r24, r24
    2606:	ec f7       	brge	.-6      	; 0x2602 <m_wii_read+0x76>
		temp[i] = TWDR;
    2608:	d9 01       	movw	r26, r18
    260a:	8c 91       	ld	r24, X
    260c:	da 01       	movw	r26, r20
    260e:	8d 93       	st	X+, r24
    2610:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2612:	a0 17       	cp	r26, r16
    2614:	b1 07       	cpc	r27, r17
    2616:	a1 f7       	brne	.-24     	; 0x2600 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2618:	84 e8       	ldi	r24, 0x84	; 132
    261a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    261e:	ec eb       	ldi	r30, 0xBC	; 188
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 23       	and	r24, r24
    2626:	ec f7       	brge	.-6      	; 0x2622 <m_wii_read+0x96>
	temp[15] = TWDR;
    2628:	80 91 bb 00 	lds	r24, 0x00BB
    262c:	88 8b       	std	Y+16, r24	; 0x10
	end();
    262e:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
    2632:	de 01       	movw	r26, r28
    2634:	14 96       	adiw	r26, 0x04	; 4
    2636:	6e 2d       	mov	r22, r14
    2638:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    263a:	4c 91       	ld	r20, X
    263c:	24 2f       	mov	r18, r20
    263e:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2640:	cd 01       	movw	r24, r26
    2642:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2644:	fc 01       	movw	r30, r24
    2646:	80 81       	ld	r24, Z
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	f0 e1       	ldi	r31, 0x10	; 16
    264c:	2f 9f       	mul	r18, r31
    264e:	80 0d       	add	r24, r0
    2650:	91 1d       	adc	r25, r1
    2652:	11 24       	eor	r1, r1
    2654:	fb 01       	movw	r30, r22
    2656:	91 83       	std	Z+1, r25	; 0x01
    2658:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    265a:	84 2f       	mov	r24, r20
    265c:	80 7c       	andi	r24, 0xC0	; 192
    265e:	90 e0       	ldi	r25, 0x00	; 0
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	88 0f       	add	r24, r24
    2666:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2668:	9d 01       	movw	r18, r26
    266a:	21 50       	subi	r18, 0x01	; 1
    266c:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    266e:	f9 01       	movw	r30, r18
    2670:	20 81       	ld	r18, Z
    2672:	82 0f       	add	r24, r18
    2674:	91 1d       	adc	r25, r1
    2676:	fb 01       	movw	r30, r22
    2678:	93 83       	std	Z+3, r25	; 0x03
    267a:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    267c:	4f 70       	andi	r20, 0x0F	; 15
    267e:	44 83       	std	Z+4, r20	; 0x04
    2680:	15 82       	std	Z+5, r1	; 0x05
    2682:	13 96       	adiw	r26, 0x03	; 3
    2684:	6a 5f       	subi	r22, 0xFA	; 250
    2686:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2688:	0a 17       	cp	r16, r26
    268a:	1b 07       	cpc	r17, r27
    268c:	b1 f6       	brne	.-84     	; 0x263a <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	05 c0       	rjmp	.+10     	; 0x269c <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	03 c0       	rjmp	.+6      	; 0x269c <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	01 c0       	rjmp	.+2      	; 0x269c <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    269a:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    269c:	60 96       	adiw	r28, 0x10	; 16
    269e:	0f b6       	in	r0, 0x3f	; 63
    26a0:	f8 94       	cli
    26a2:	de bf       	out	0x3e, r29	; 62
    26a4:	0f be       	out	0x3f, r0	; 63
    26a6:	cd bf       	out	0x3d, r28	; 61
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	ff 90       	pop	r15
    26b2:	ef 90       	pop	r14
    26b4:	08 95       	ret

000026b6 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    26b6:	0e 94 4f 11 	call	0x229e	; 0x229e <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    26ba:	88 e5       	ldi	r24, 0x58	; 88
    26bc:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    26c0:	88 23       	and	r24, r24
    26c2:	09 f4       	brne	.+2      	; 0x26c6 <m_wii_open+0x10>
    26c4:	c7 c0       	rjmp	.+398    	; 0x2854 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    26c6:	80 e3       	ldi	r24, 0x30	; 48
    26c8:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    26cc:	88 23       	and	r24, r24
    26ce:	09 f4       	brne	.+2      	; 0x26d2 <m_wii_open+0x1c>
    26d0:	c3 c0       	rjmp	.+390    	; 0x2858 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    26d2:	81 e0       	ldi	r24, 0x01	; 1
    26d4:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    26d8:	88 23       	and	r24, r24
    26da:	09 f4       	brne	.+2      	; 0x26de <m_wii_open+0x28>
    26dc:	bf c0       	rjmp	.+382    	; 0x285c <m_wii_open+0x1a6>
	end();
    26de:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    26e2:	83 ec       	ldi	r24, 0xC3	; 195
    26e4:	99 e0       	ldi	r25, 0x09	; 9
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <m_wii_open+0x30>
    26ea:	00 c0       	rjmp	.+0      	; 0x26ec <m_wii_open+0x36>
    26ec:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    26ee:	88 e5       	ldi	r24, 0x58	; 88
    26f0:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    26f4:	88 23       	and	r24, r24
    26f6:	09 f4       	brne	.+2      	; 0x26fa <m_wii_open+0x44>
    26f8:	b3 c0       	rjmp	.+358    	; 0x2860 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2700:	88 23       	and	r24, r24
    2702:	09 f4       	brne	.+2      	; 0x2706 <m_wii_open+0x50>
    2704:	af c0       	rjmp	.+350    	; 0x2864 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    2706:	80 e0       	ldi	r24, 0x00	; 0
    2708:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    270c:	88 23       	and	r24, r24
    270e:	09 f4       	brne	.+2      	; 0x2712 <m_wii_open+0x5c>
    2710:	ab c0       	rjmp	.+342    	; 0x2868 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2712:	80 e0       	ldi	r24, 0x00	; 0
    2714:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2718:	88 23       	and	r24, r24
    271a:	09 f4       	brne	.+2      	; 0x271e <m_wii_open+0x68>
    271c:	a7 c0       	rjmp	.+334    	; 0x286c <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2724:	88 23       	and	r24, r24
    2726:	09 f4       	brne	.+2      	; 0x272a <m_wii_open+0x74>
    2728:	a3 c0       	rjmp	.+326    	; 0x2870 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    272a:	80 e0       	ldi	r24, 0x00	; 0
    272c:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2730:	88 23       	and	r24, r24
    2732:	09 f4       	brne	.+2      	; 0x2736 <m_wii_open+0x80>
    2734:	9f c0       	rjmp	.+318    	; 0x2874 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2736:	80 e0       	ldi	r24, 0x00	; 0
    2738:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    273c:	88 23       	and	r24, r24
    273e:	09 f4       	brne	.+2      	; 0x2742 <m_wii_open+0x8c>
    2740:	9b c0       	rjmp	.+310    	; 0x2878 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2742:	80 e0       	ldi	r24, 0x00	; 0
    2744:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2748:	88 23       	and	r24, r24
    274a:	09 f4       	brne	.+2      	; 0x274e <m_wii_open+0x98>
    274c:	97 c0       	rjmp	.+302    	; 0x287c <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    274e:	80 e9       	ldi	r24, 0x90	; 144
    2750:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2754:	88 23       	and	r24, r24
    2756:	09 f4       	brne	.+2      	; 0x275a <m_wii_open+0xa4>
    2758:	93 c0       	rjmp	.+294    	; 0x2880 <m_wii_open+0x1ca>
	end();
    275a:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
    275e:	83 ec       	ldi	r24, 0xC3	; 195
    2760:	99 e0       	ldi	r25, 0x09	; 9
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	f1 f7       	brne	.-4      	; 0x2762 <m_wii_open+0xac>
    2766:	00 c0       	rjmp	.+0      	; 0x2768 <m_wii_open+0xb2>
    2768:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    276a:	88 e5       	ldi	r24, 0x58	; 88
    276c:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    2770:	88 23       	and	r24, r24
    2772:	09 f4       	brne	.+2      	; 0x2776 <m_wii_open+0xc0>
    2774:	87 c0       	rjmp	.+270    	; 0x2884 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2776:	87 e0       	ldi	r24, 0x07	; 7
    2778:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    277c:	88 23       	and	r24, r24
    277e:	09 f4       	brne	.+2      	; 0x2782 <m_wii_open+0xcc>
    2780:	83 c0       	rjmp	.+262    	; 0x2888 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2788:	88 23       	and	r24, r24
    278a:	09 f4       	brne	.+2      	; 0x278e <m_wii_open+0xd8>
    278c:	7f c0       	rjmp	.+254    	; 0x288c <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    278e:	81 e4       	ldi	r24, 0x41	; 65
    2790:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2794:	88 23       	and	r24, r24
    2796:	09 f4       	brne	.+2      	; 0x279a <m_wii_open+0xe4>
    2798:	7b c0       	rjmp	.+246    	; 0x2890 <m_wii_open+0x1da>
	end();
    279a:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
    279e:	83 ec       	ldi	r24, 0xC3	; 195
    27a0:	99 e0       	ldi	r25, 0x09	; 9
    27a2:	01 97       	sbiw	r24, 0x01	; 1
    27a4:	f1 f7       	brne	.-4      	; 0x27a2 <m_wii_open+0xec>
    27a6:	00 c0       	rjmp	.+0      	; 0x27a8 <m_wii_open+0xf2>
    27a8:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    27aa:	88 e5       	ldi	r24, 0x58	; 88
    27ac:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    27b0:	88 23       	and	r24, r24
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <m_wii_open+0x100>
    27b4:	6f c0       	rjmp	.+222    	; 0x2894 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    27b6:	8a e1       	ldi	r24, 0x1A	; 26
    27b8:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    27bc:	88 23       	and	r24, r24
    27be:	09 f4       	brne	.+2      	; 0x27c2 <m_wii_open+0x10c>
    27c0:	6b c0       	rjmp	.+214    	; 0x2898 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    27c2:	80 e4       	ldi	r24, 0x40	; 64
    27c4:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    27c8:	88 23       	and	r24, r24
    27ca:	09 f4       	brne	.+2      	; 0x27ce <m_wii_open+0x118>
    27cc:	67 c0       	rjmp	.+206    	; 0x289c <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    27d4:	88 23       	and	r24, r24
    27d6:	09 f4       	brne	.+2      	; 0x27da <m_wii_open+0x124>
    27d8:	63 c0       	rjmp	.+198    	; 0x28a0 <m_wii_open+0x1ea>
	end();
    27da:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
    27de:	83 ec       	ldi	r24, 0xC3	; 195
    27e0:	99 e0       	ldi	r25, 0x09	; 9
    27e2:	01 97       	sbiw	r24, 0x01	; 1
    27e4:	f1 f7       	brne	.-4      	; 0x27e2 <m_wii_open+0x12c>
    27e6:	00 c0       	rjmp	.+0      	; 0x27e8 <m_wii_open+0x132>
    27e8:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    27ea:	88 e5       	ldi	r24, 0x58	; 88
    27ec:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    27f0:	88 23       	and	r24, r24
    27f2:	09 f4       	brne	.+2      	; 0x27f6 <m_wii_open+0x140>
    27f4:	57 c0       	rjmp	.+174    	; 0x28a4 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    27f6:	83 e3       	ldi	r24, 0x33	; 51
    27f8:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    27fc:	88 23       	and	r24, r24
    27fe:	09 f4       	brne	.+2      	; 0x2802 <m_wii_open+0x14c>
    2800:	53 c0       	rjmp	.+166    	; 0x28a8 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2808:	88 23       	and	r24, r24
    280a:	09 f4       	brne	.+2      	; 0x280e <m_wii_open+0x158>
    280c:	4f c0       	rjmp	.+158    	; 0x28ac <m_wii_open+0x1f6>
	end();
    280e:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
    2812:	83 ec       	ldi	r24, 0xC3	; 195
    2814:	99 e0       	ldi	r25, 0x09	; 9
    2816:	01 97       	sbiw	r24, 0x01	; 1
    2818:	f1 f7       	brne	.-4      	; 0x2816 <m_wii_open+0x160>
    281a:	00 c0       	rjmp	.+0      	; 0x281c <m_wii_open+0x166>
    281c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    281e:	88 e5       	ldi	r24, 0x58	; 88
    2820:	0e 94 a9 12 	call	0x2552	; 0x2552 <start_write>
    2824:	88 23       	and	r24, r24
    2826:	09 f4       	brne	.+2      	; 0x282a <m_wii_open+0x174>
    2828:	43 c0       	rjmp	.+134    	; 0x28b0 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    282a:	80 e3       	ldi	r24, 0x30	; 48
    282c:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    2830:	88 23       	and	r24, r24
    2832:	09 f4       	brne	.+2      	; 0x2836 <m_wii_open+0x180>
    2834:	3f c0       	rjmp	.+126    	; 0x28b4 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2836:	88 e0       	ldi	r24, 0x08	; 8
    2838:	0e 94 80 12 	call	0x2500	; 0x2500 <send_byte>
    283c:	88 23       	and	r24, r24
    283e:	e1 f1       	breq	.+120    	; 0x28b8 <m_wii_open+0x202>
	end();
    2840:	0e 94 c2 12 	call	0x2584	; 0x2584 <end>
    2844:	83 ec       	ldi	r24, 0xC3	; 195
    2846:	99 e0       	ldi	r25, 0x09	; 9
    2848:	01 97       	sbiw	r24, 0x01	; 1
    284a:	f1 f7       	brne	.-4      	; 0x2848 <m_wii_open+0x192>
    284c:	00 c0       	rjmp	.+0      	; 0x284e <m_wii_open+0x198>
    284e:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2854:	80 e0       	ldi	r24, 0x00	; 0
    2856:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2858:	80 e0       	ldi	r24, 0x00	; 0
    285a:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2870:	80 e0       	ldi	r24, 0x00	; 0
    2872:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    287c:	80 e0       	ldi	r24, 0x00	; 0
    287e:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2880:	80 e0       	ldi	r24, 0x00	; 0
    2882:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2884:	80 e0       	ldi	r24, 0x00	; 0
    2886:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2888:	80 e0       	ldi	r24, 0x00	; 0
    288a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2890:	80 e0       	ldi	r24, 0x00	; 0
    2892:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2898:	80 e0       	ldi	r24, 0x00	; 0
    289a:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    289c:	80 e0       	ldi	r24, 0x00	; 0
    289e:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    28a0:	80 e0       	ldi	r24, 0x00	; 0
    28a2:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28b0:	80 e0       	ldi	r24, 0x00	; 0
    28b2:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    28b8:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    28ba:	08 95       	ret

000028bc <__subsf3>:
    28bc:	50 58       	subi	r21, 0x80	; 128

000028be <__addsf3>:
    28be:	bb 27       	eor	r27, r27
    28c0:	aa 27       	eor	r26, r26
    28c2:	0e d0       	rcall	.+28     	; 0x28e0 <__addsf3x>
    28c4:	27 c2       	rjmp	.+1102   	; 0x2d14 <__fp_round>
    28c6:	f0 d1       	rcall	.+992    	; 0x2ca8 <__fp_pscA>
    28c8:	30 f0       	brcs	.+12     	; 0x28d6 <__addsf3+0x18>
    28ca:	f5 d1       	rcall	.+1002   	; 0x2cb6 <__fp_pscB>
    28cc:	20 f0       	brcs	.+8      	; 0x28d6 <__addsf3+0x18>
    28ce:	31 f4       	brne	.+12     	; 0x28dc <__addsf3+0x1e>
    28d0:	9f 3f       	cpi	r25, 0xFF	; 255
    28d2:	11 f4       	brne	.+4      	; 0x28d8 <__addsf3+0x1a>
    28d4:	1e f4       	brtc	.+6      	; 0x28dc <__addsf3+0x1e>
    28d6:	c0 c1       	rjmp	.+896    	; 0x2c58 <__fp_nan>
    28d8:	0e f4       	brtc	.+2      	; 0x28dc <__addsf3+0x1e>
    28da:	e0 95       	com	r30
    28dc:	e7 fb       	bst	r30, 7
    28de:	b6 c1       	rjmp	.+876    	; 0x2c4c <__fp_inf>

000028e0 <__addsf3x>:
    28e0:	e9 2f       	mov	r30, r25
    28e2:	3a d2       	rcall	.+1140   	; 0x2d58 <__fp_split3>
    28e4:	80 f3       	brcs	.-32     	; 0x28c6 <__addsf3+0x8>
    28e6:	ba 17       	cp	r27, r26
    28e8:	62 07       	cpc	r22, r18
    28ea:	73 07       	cpc	r23, r19
    28ec:	84 07       	cpc	r24, r20
    28ee:	95 07       	cpc	r25, r21
    28f0:	18 f0       	brcs	.+6      	; 0x28f8 <__addsf3x+0x18>
    28f2:	71 f4       	brne	.+28     	; 0x2910 <__addsf3x+0x30>
    28f4:	9e f5       	brtc	.+102    	; 0x295c <__addsf3x+0x7c>
    28f6:	52 c2       	rjmp	.+1188   	; 0x2d9c <__fp_zero>
    28f8:	0e f4       	brtc	.+2      	; 0x28fc <__addsf3x+0x1c>
    28fa:	e0 95       	com	r30
    28fc:	0b 2e       	mov	r0, r27
    28fe:	ba 2f       	mov	r27, r26
    2900:	a0 2d       	mov	r26, r0
    2902:	0b 01       	movw	r0, r22
    2904:	b9 01       	movw	r22, r18
    2906:	90 01       	movw	r18, r0
    2908:	0c 01       	movw	r0, r24
    290a:	ca 01       	movw	r24, r20
    290c:	a0 01       	movw	r20, r0
    290e:	11 24       	eor	r1, r1
    2910:	ff 27       	eor	r31, r31
    2912:	59 1b       	sub	r21, r25
    2914:	99 f0       	breq	.+38     	; 0x293c <__addsf3x+0x5c>
    2916:	59 3f       	cpi	r21, 0xF9	; 249
    2918:	50 f4       	brcc	.+20     	; 0x292e <__addsf3x+0x4e>
    291a:	50 3e       	cpi	r21, 0xE0	; 224
    291c:	68 f1       	brcs	.+90     	; 0x2978 <__addsf3x+0x98>
    291e:	1a 16       	cp	r1, r26
    2920:	f0 40       	sbci	r31, 0x00	; 0
    2922:	a2 2f       	mov	r26, r18
    2924:	23 2f       	mov	r18, r19
    2926:	34 2f       	mov	r19, r20
    2928:	44 27       	eor	r20, r20
    292a:	58 5f       	subi	r21, 0xF8	; 248
    292c:	f3 cf       	rjmp	.-26     	; 0x2914 <__addsf3x+0x34>
    292e:	46 95       	lsr	r20
    2930:	37 95       	ror	r19
    2932:	27 95       	ror	r18
    2934:	a7 95       	ror	r26
    2936:	f0 40       	sbci	r31, 0x00	; 0
    2938:	53 95       	inc	r21
    293a:	c9 f7       	brne	.-14     	; 0x292e <__addsf3x+0x4e>
    293c:	7e f4       	brtc	.+30     	; 0x295c <__addsf3x+0x7c>
    293e:	1f 16       	cp	r1, r31
    2940:	ba 0b       	sbc	r27, r26
    2942:	62 0b       	sbc	r22, r18
    2944:	73 0b       	sbc	r23, r19
    2946:	84 0b       	sbc	r24, r20
    2948:	ba f0       	brmi	.+46     	; 0x2978 <__addsf3x+0x98>
    294a:	91 50       	subi	r25, 0x01	; 1
    294c:	a1 f0       	breq	.+40     	; 0x2976 <__addsf3x+0x96>
    294e:	ff 0f       	add	r31, r31
    2950:	bb 1f       	adc	r27, r27
    2952:	66 1f       	adc	r22, r22
    2954:	77 1f       	adc	r23, r23
    2956:	88 1f       	adc	r24, r24
    2958:	c2 f7       	brpl	.-16     	; 0x294a <__addsf3x+0x6a>
    295a:	0e c0       	rjmp	.+28     	; 0x2978 <__addsf3x+0x98>
    295c:	ba 0f       	add	r27, r26
    295e:	62 1f       	adc	r22, r18
    2960:	73 1f       	adc	r23, r19
    2962:	84 1f       	adc	r24, r20
    2964:	48 f4       	brcc	.+18     	; 0x2978 <__addsf3x+0x98>
    2966:	87 95       	ror	r24
    2968:	77 95       	ror	r23
    296a:	67 95       	ror	r22
    296c:	b7 95       	ror	r27
    296e:	f7 95       	ror	r31
    2970:	9e 3f       	cpi	r25, 0xFE	; 254
    2972:	08 f0       	brcs	.+2      	; 0x2976 <__addsf3x+0x96>
    2974:	b3 cf       	rjmp	.-154    	; 0x28dc <__addsf3+0x1e>
    2976:	93 95       	inc	r25
    2978:	88 0f       	add	r24, r24
    297a:	08 f0       	brcs	.+2      	; 0x297e <__addsf3x+0x9e>
    297c:	99 27       	eor	r25, r25
    297e:	ee 0f       	add	r30, r30
    2980:	97 95       	ror	r25
    2982:	87 95       	ror	r24
    2984:	08 95       	ret
    2986:	90 d1       	rcall	.+800    	; 0x2ca8 <__fp_pscA>
    2988:	58 f0       	brcs	.+22     	; 0x29a0 <__addsf3x+0xc0>
    298a:	80 e8       	ldi	r24, 0x80	; 128
    298c:	91 e0       	ldi	r25, 0x01	; 1
    298e:	09 f4       	brne	.+2      	; 0x2992 <__addsf3x+0xb2>
    2990:	9e ef       	ldi	r25, 0xFE	; 254
    2992:	91 d1       	rcall	.+802    	; 0x2cb6 <__fp_pscB>
    2994:	28 f0       	brcs	.+10     	; 0x29a0 <__addsf3x+0xc0>
    2996:	40 e8       	ldi	r20, 0x80	; 128
    2998:	51 e0       	ldi	r21, 0x01	; 1
    299a:	59 f4       	brne	.+22     	; 0x29b2 <atan2+0xe>
    299c:	5e ef       	ldi	r21, 0xFE	; 254
    299e:	09 c0       	rjmp	.+18     	; 0x29b2 <atan2+0xe>
    29a0:	5b c1       	rjmp	.+694    	; 0x2c58 <__fp_nan>
    29a2:	fc c1       	rjmp	.+1016   	; 0x2d9c <__fp_zero>

000029a4 <atan2>:
    29a4:	e9 2f       	mov	r30, r25
    29a6:	e0 78       	andi	r30, 0x80	; 128
    29a8:	d7 d1       	rcall	.+942    	; 0x2d58 <__fp_split3>
    29aa:	68 f3       	brcs	.-38     	; 0x2986 <__addsf3x+0xa6>
    29ac:	09 2e       	mov	r0, r25
    29ae:	05 2a       	or	r0, r21
    29b0:	c1 f3       	breq	.-16     	; 0x29a2 <__addsf3x+0xc2>
    29b2:	26 17       	cp	r18, r22
    29b4:	37 07       	cpc	r19, r23
    29b6:	48 07       	cpc	r20, r24
    29b8:	59 07       	cpc	r21, r25
    29ba:	38 f0       	brcs	.+14     	; 0x29ca <atan2+0x26>
    29bc:	0e 2e       	mov	r0, r30
    29be:	07 f8       	bld	r0, 7
    29c0:	e0 25       	eor	r30, r0
    29c2:	69 f0       	breq	.+26     	; 0x29de <atan2+0x3a>
    29c4:	e0 25       	eor	r30, r0
    29c6:	e0 64       	ori	r30, 0x40	; 64
    29c8:	0a c0       	rjmp	.+20     	; 0x29de <atan2+0x3a>
    29ca:	ef 63       	ori	r30, 0x3F	; 63
    29cc:	07 f8       	bld	r0, 7
    29ce:	00 94       	com	r0
    29d0:	07 fa       	bst	r0, 7
    29d2:	db 01       	movw	r26, r22
    29d4:	b9 01       	movw	r22, r18
    29d6:	9d 01       	movw	r18, r26
    29d8:	dc 01       	movw	r26, r24
    29da:	ca 01       	movw	r24, r20
    29dc:	ad 01       	movw	r20, r26
    29de:	ef 93       	push	r30
    29e0:	4a d0       	rcall	.+148    	; 0x2a76 <__divsf3_pse>
    29e2:	98 d1       	rcall	.+816    	; 0x2d14 <__fp_round>
    29e4:	0a d0       	rcall	.+20     	; 0x29fa <atan>
    29e6:	5f 91       	pop	r21
    29e8:	55 23       	and	r21, r21
    29ea:	31 f0       	breq	.+12     	; 0x29f8 <atan2+0x54>
    29ec:	2b ed       	ldi	r18, 0xDB	; 219
    29ee:	3f e0       	ldi	r19, 0x0F	; 15
    29f0:	49 e4       	ldi	r20, 0x49	; 73
    29f2:	50 fd       	sbrc	r21, 0
    29f4:	49 ec       	ldi	r20, 0xC9	; 201
    29f6:	63 cf       	rjmp	.-314    	; 0x28be <__addsf3>
    29f8:	08 95       	ret

000029fa <atan>:
    29fa:	df 93       	push	r29
    29fc:	dd 27       	eor	r29, r29
    29fe:	b9 2f       	mov	r27, r25
    2a00:	bf 77       	andi	r27, 0x7F	; 127
    2a02:	40 e8       	ldi	r20, 0x80	; 128
    2a04:	5f e3       	ldi	r21, 0x3F	; 63
    2a06:	16 16       	cp	r1, r22
    2a08:	17 06       	cpc	r1, r23
    2a0a:	48 07       	cpc	r20, r24
    2a0c:	5b 07       	cpc	r21, r27
    2a0e:	10 f4       	brcc	.+4      	; 0x2a14 <atan+0x1a>
    2a10:	d9 2f       	mov	r29, r25
    2a12:	cf d1       	rcall	.+926    	; 0x2db2 <inverse>
    2a14:	9f 93       	push	r25
    2a16:	8f 93       	push	r24
    2a18:	7f 93       	push	r23
    2a1a:	6f 93       	push	r22
    2a1c:	7c d2       	rcall	.+1272   	; 0x2f16 <square>
    2a1e:	ec ea       	ldi	r30, 0xAC	; 172
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	1d d1       	rcall	.+570    	; 0x2c5e <__fp_powser>
    2a24:	77 d1       	rcall	.+750    	; 0x2d14 <__fp_round>
    2a26:	2f 91       	pop	r18
    2a28:	3f 91       	pop	r19
    2a2a:	4f 91       	pop	r20
    2a2c:	5f 91       	pop	r21
    2a2e:	d4 d1       	rcall	.+936    	; 0x2dd8 <__mulsf3x>
    2a30:	dd 23       	and	r29, r29
    2a32:	49 f0       	breq	.+18     	; 0x2a46 <atan+0x4c>
    2a34:	90 58       	subi	r25, 0x80	; 128
    2a36:	a2 ea       	ldi	r26, 0xA2	; 162
    2a38:	2a ed       	ldi	r18, 0xDA	; 218
    2a3a:	3f e0       	ldi	r19, 0x0F	; 15
    2a3c:	49 ec       	ldi	r20, 0xC9	; 201
    2a3e:	5f e3       	ldi	r21, 0x3F	; 63
    2a40:	d0 78       	andi	r29, 0x80	; 128
    2a42:	5d 27       	eor	r21, r29
    2a44:	4d df       	rcall	.-358    	; 0x28e0 <__addsf3x>
    2a46:	df 91       	pop	r29
    2a48:	65 c1       	rjmp	.+714    	; 0x2d14 <__fp_round>

00002a4a <__cmpsf2>:
    2a4a:	dc d0       	rcall	.+440    	; 0x2c04 <__fp_cmp>
    2a4c:	08 f4       	brcc	.+2      	; 0x2a50 <__cmpsf2+0x6>
    2a4e:	81 e0       	ldi	r24, 0x01	; 1
    2a50:	08 95       	ret

00002a52 <cos>:
    2a52:	39 d1       	rcall	.+626    	; 0x2cc6 <__fp_rempio2>
    2a54:	e3 95       	inc	r30
    2a56:	6f c1       	rjmp	.+734    	; 0x2d36 <__fp_sinus>

00002a58 <__divsf3>:
    2a58:	0c d0       	rcall	.+24     	; 0x2a72 <__divsf3x>
    2a5a:	5c c1       	rjmp	.+696    	; 0x2d14 <__fp_round>
    2a5c:	2c d1       	rcall	.+600    	; 0x2cb6 <__fp_pscB>
    2a5e:	40 f0       	brcs	.+16     	; 0x2a70 <__divsf3+0x18>
    2a60:	23 d1       	rcall	.+582    	; 0x2ca8 <__fp_pscA>
    2a62:	30 f0       	brcs	.+12     	; 0x2a70 <__divsf3+0x18>
    2a64:	21 f4       	brne	.+8      	; 0x2a6e <__divsf3+0x16>
    2a66:	5f 3f       	cpi	r21, 0xFF	; 255
    2a68:	19 f0       	breq	.+6      	; 0x2a70 <__divsf3+0x18>
    2a6a:	f0 c0       	rjmp	.+480    	; 0x2c4c <__fp_inf>
    2a6c:	51 11       	cpse	r21, r1
    2a6e:	97 c1       	rjmp	.+814    	; 0x2d9e <__fp_szero>
    2a70:	f3 c0       	rjmp	.+486    	; 0x2c58 <__fp_nan>

00002a72 <__divsf3x>:
    2a72:	72 d1       	rcall	.+740    	; 0x2d58 <__fp_split3>
    2a74:	98 f3       	brcs	.-26     	; 0x2a5c <__divsf3+0x4>

00002a76 <__divsf3_pse>:
    2a76:	99 23       	and	r25, r25
    2a78:	c9 f3       	breq	.-14     	; 0x2a6c <__divsf3+0x14>
    2a7a:	55 23       	and	r21, r21
    2a7c:	b1 f3       	breq	.-20     	; 0x2a6a <__divsf3+0x12>
    2a7e:	95 1b       	sub	r25, r21
    2a80:	55 0b       	sbc	r21, r21
    2a82:	bb 27       	eor	r27, r27
    2a84:	aa 27       	eor	r26, r26
    2a86:	62 17       	cp	r22, r18
    2a88:	73 07       	cpc	r23, r19
    2a8a:	84 07       	cpc	r24, r20
    2a8c:	38 f0       	brcs	.+14     	; 0x2a9c <__divsf3_pse+0x26>
    2a8e:	9f 5f       	subi	r25, 0xFF	; 255
    2a90:	5f 4f       	sbci	r21, 0xFF	; 255
    2a92:	22 0f       	add	r18, r18
    2a94:	33 1f       	adc	r19, r19
    2a96:	44 1f       	adc	r20, r20
    2a98:	aa 1f       	adc	r26, r26
    2a9a:	a9 f3       	breq	.-22     	; 0x2a86 <__divsf3_pse+0x10>
    2a9c:	33 d0       	rcall	.+102    	; 0x2b04 <__divsf3_pse+0x8e>
    2a9e:	0e 2e       	mov	r0, r30
    2aa0:	3a f0       	brmi	.+14     	; 0x2ab0 <__divsf3_pse+0x3a>
    2aa2:	e0 e8       	ldi	r30, 0x80	; 128
    2aa4:	30 d0       	rcall	.+96     	; 0x2b06 <__divsf3_pse+0x90>
    2aa6:	91 50       	subi	r25, 0x01	; 1
    2aa8:	50 40       	sbci	r21, 0x00	; 0
    2aaa:	e6 95       	lsr	r30
    2aac:	00 1c       	adc	r0, r0
    2aae:	ca f7       	brpl	.-14     	; 0x2aa2 <__divsf3_pse+0x2c>
    2ab0:	29 d0       	rcall	.+82     	; 0x2b04 <__divsf3_pse+0x8e>
    2ab2:	fe 2f       	mov	r31, r30
    2ab4:	27 d0       	rcall	.+78     	; 0x2b04 <__divsf3_pse+0x8e>
    2ab6:	66 0f       	add	r22, r22
    2ab8:	77 1f       	adc	r23, r23
    2aba:	88 1f       	adc	r24, r24
    2abc:	bb 1f       	adc	r27, r27
    2abe:	26 17       	cp	r18, r22
    2ac0:	37 07       	cpc	r19, r23
    2ac2:	48 07       	cpc	r20, r24
    2ac4:	ab 07       	cpc	r26, r27
    2ac6:	b0 e8       	ldi	r27, 0x80	; 128
    2ac8:	09 f0       	breq	.+2      	; 0x2acc <__divsf3_pse+0x56>
    2aca:	bb 0b       	sbc	r27, r27
    2acc:	80 2d       	mov	r24, r0
    2ace:	bf 01       	movw	r22, r30
    2ad0:	ff 27       	eor	r31, r31
    2ad2:	93 58       	subi	r25, 0x83	; 131
    2ad4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ad6:	2a f0       	brmi	.+10     	; 0x2ae2 <__divsf3_pse+0x6c>
    2ad8:	9e 3f       	cpi	r25, 0xFE	; 254
    2ada:	51 05       	cpc	r21, r1
    2adc:	68 f0       	brcs	.+26     	; 0x2af8 <__divsf3_pse+0x82>
    2ade:	b6 c0       	rjmp	.+364    	; 0x2c4c <__fp_inf>
    2ae0:	5e c1       	rjmp	.+700    	; 0x2d9e <__fp_szero>
    2ae2:	5f 3f       	cpi	r21, 0xFF	; 255
    2ae4:	ec f3       	brlt	.-6      	; 0x2ae0 <__divsf3_pse+0x6a>
    2ae6:	98 3e       	cpi	r25, 0xE8	; 232
    2ae8:	dc f3       	brlt	.-10     	; 0x2ae0 <__divsf3_pse+0x6a>
    2aea:	86 95       	lsr	r24
    2aec:	77 95       	ror	r23
    2aee:	67 95       	ror	r22
    2af0:	b7 95       	ror	r27
    2af2:	f7 95       	ror	r31
    2af4:	9f 5f       	subi	r25, 0xFF	; 255
    2af6:	c9 f7       	brne	.-14     	; 0x2aea <__divsf3_pse+0x74>
    2af8:	88 0f       	add	r24, r24
    2afa:	91 1d       	adc	r25, r1
    2afc:	96 95       	lsr	r25
    2afe:	87 95       	ror	r24
    2b00:	97 f9       	bld	r25, 7
    2b02:	08 95       	ret
    2b04:	e1 e0       	ldi	r30, 0x01	; 1
    2b06:	66 0f       	add	r22, r22
    2b08:	77 1f       	adc	r23, r23
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	62 17       	cp	r22, r18
    2b10:	73 07       	cpc	r23, r19
    2b12:	84 07       	cpc	r24, r20
    2b14:	ba 07       	cpc	r27, r26
    2b16:	20 f0       	brcs	.+8      	; 0x2b20 <__divsf3_pse+0xaa>
    2b18:	62 1b       	sub	r22, r18
    2b1a:	73 0b       	sbc	r23, r19
    2b1c:	84 0b       	sbc	r24, r20
    2b1e:	ba 0b       	sbc	r27, r26
    2b20:	ee 1f       	adc	r30, r30
    2b22:	88 f7       	brcc	.-30     	; 0x2b06 <__divsf3_pse+0x90>
    2b24:	e0 95       	com	r30
    2b26:	08 95       	ret

00002b28 <__fixsfsi>:
    2b28:	04 d0       	rcall	.+8      	; 0x2b32 <__fixunssfsi>
    2b2a:	68 94       	set
    2b2c:	b1 11       	cpse	r27, r1
    2b2e:	37 c1       	rjmp	.+622    	; 0x2d9e <__fp_szero>
    2b30:	08 95       	ret

00002b32 <__fixunssfsi>:
    2b32:	1a d1       	rcall	.+564    	; 0x2d68 <__fp_splitA>
    2b34:	88 f0       	brcs	.+34     	; 0x2b58 <__fixunssfsi+0x26>
    2b36:	9f 57       	subi	r25, 0x7F	; 127
    2b38:	90 f0       	brcs	.+36     	; 0x2b5e <__fixunssfsi+0x2c>
    2b3a:	b9 2f       	mov	r27, r25
    2b3c:	99 27       	eor	r25, r25
    2b3e:	b7 51       	subi	r27, 0x17	; 23
    2b40:	a0 f0       	brcs	.+40     	; 0x2b6a <__fixunssfsi+0x38>
    2b42:	d1 f0       	breq	.+52     	; 0x2b78 <__fixunssfsi+0x46>
    2b44:	66 0f       	add	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	88 1f       	adc	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	1a f0       	brmi	.+6      	; 0x2b54 <__fixunssfsi+0x22>
    2b4e:	ba 95       	dec	r27
    2b50:	c9 f7       	brne	.-14     	; 0x2b44 <__fixunssfsi+0x12>
    2b52:	12 c0       	rjmp	.+36     	; 0x2b78 <__fixunssfsi+0x46>
    2b54:	b1 30       	cpi	r27, 0x01	; 1
    2b56:	81 f0       	breq	.+32     	; 0x2b78 <__fixunssfsi+0x46>
    2b58:	21 d1       	rcall	.+578    	; 0x2d9c <__fp_zero>
    2b5a:	b1 e0       	ldi	r27, 0x01	; 1
    2b5c:	08 95       	ret
    2b5e:	1e c1       	rjmp	.+572    	; 0x2d9c <__fp_zero>
    2b60:	67 2f       	mov	r22, r23
    2b62:	78 2f       	mov	r23, r24
    2b64:	88 27       	eor	r24, r24
    2b66:	b8 5f       	subi	r27, 0xF8	; 248
    2b68:	39 f0       	breq	.+14     	; 0x2b78 <__fixunssfsi+0x46>
    2b6a:	b9 3f       	cpi	r27, 0xF9	; 249
    2b6c:	cc f3       	brlt	.-14     	; 0x2b60 <__fixunssfsi+0x2e>
    2b6e:	86 95       	lsr	r24
    2b70:	77 95       	ror	r23
    2b72:	67 95       	ror	r22
    2b74:	b3 95       	inc	r27
    2b76:	d9 f7       	brne	.-10     	; 0x2b6e <__fixunssfsi+0x3c>
    2b78:	3e f4       	brtc	.+14     	; 0x2b88 <__fixunssfsi+0x56>
    2b7a:	90 95       	com	r25
    2b7c:	80 95       	com	r24
    2b7e:	70 95       	com	r23
    2b80:	61 95       	neg	r22
    2b82:	7f 4f       	sbci	r23, 0xFF	; 255
    2b84:	8f 4f       	sbci	r24, 0xFF	; 255
    2b86:	9f 4f       	sbci	r25, 0xFF	; 255
    2b88:	08 95       	ret

00002b8a <__floatunsisf>:
    2b8a:	e8 94       	clt
    2b8c:	09 c0       	rjmp	.+18     	; 0x2ba0 <__floatsisf+0x12>

00002b8e <__floatsisf>:
    2b8e:	97 fb       	bst	r25, 7
    2b90:	3e f4       	brtc	.+14     	; 0x2ba0 <__floatsisf+0x12>
    2b92:	90 95       	com	r25
    2b94:	80 95       	com	r24
    2b96:	70 95       	com	r23
    2b98:	61 95       	neg	r22
    2b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    2b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba0:	99 23       	and	r25, r25
    2ba2:	a9 f0       	breq	.+42     	; 0x2bce <__floatsisf+0x40>
    2ba4:	f9 2f       	mov	r31, r25
    2ba6:	96 e9       	ldi	r25, 0x96	; 150
    2ba8:	bb 27       	eor	r27, r27
    2baa:	93 95       	inc	r25
    2bac:	f6 95       	lsr	r31
    2bae:	87 95       	ror	r24
    2bb0:	77 95       	ror	r23
    2bb2:	67 95       	ror	r22
    2bb4:	b7 95       	ror	r27
    2bb6:	f1 11       	cpse	r31, r1
    2bb8:	f8 cf       	rjmp	.-16     	; 0x2baa <__floatsisf+0x1c>
    2bba:	fa f4       	brpl	.+62     	; 0x2bfa <__floatsisf+0x6c>
    2bbc:	bb 0f       	add	r27, r27
    2bbe:	11 f4       	brne	.+4      	; 0x2bc4 <__floatsisf+0x36>
    2bc0:	60 ff       	sbrs	r22, 0
    2bc2:	1b c0       	rjmp	.+54     	; 0x2bfa <__floatsisf+0x6c>
    2bc4:	6f 5f       	subi	r22, 0xFF	; 255
    2bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bca:	9f 4f       	sbci	r25, 0xFF	; 255
    2bcc:	16 c0       	rjmp	.+44     	; 0x2bfa <__floatsisf+0x6c>
    2bce:	88 23       	and	r24, r24
    2bd0:	11 f0       	breq	.+4      	; 0x2bd6 <__floatsisf+0x48>
    2bd2:	96 e9       	ldi	r25, 0x96	; 150
    2bd4:	11 c0       	rjmp	.+34     	; 0x2bf8 <__floatsisf+0x6a>
    2bd6:	77 23       	and	r23, r23
    2bd8:	21 f0       	breq	.+8      	; 0x2be2 <__floatsisf+0x54>
    2bda:	9e e8       	ldi	r25, 0x8E	; 142
    2bdc:	87 2f       	mov	r24, r23
    2bde:	76 2f       	mov	r23, r22
    2be0:	05 c0       	rjmp	.+10     	; 0x2bec <__floatsisf+0x5e>
    2be2:	66 23       	and	r22, r22
    2be4:	71 f0       	breq	.+28     	; 0x2c02 <__floatsisf+0x74>
    2be6:	96 e8       	ldi	r25, 0x86	; 134
    2be8:	86 2f       	mov	r24, r22
    2bea:	70 e0       	ldi	r23, 0x00	; 0
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	2a f0       	brmi	.+10     	; 0x2bfa <__floatsisf+0x6c>
    2bf0:	9a 95       	dec	r25
    2bf2:	66 0f       	add	r22, r22
    2bf4:	77 1f       	adc	r23, r23
    2bf6:	88 1f       	adc	r24, r24
    2bf8:	da f7       	brpl	.-10     	; 0x2bf0 <__floatsisf+0x62>
    2bfa:	88 0f       	add	r24, r24
    2bfc:	96 95       	lsr	r25
    2bfe:	87 95       	ror	r24
    2c00:	97 f9       	bld	r25, 7
    2c02:	08 95       	ret

00002c04 <__fp_cmp>:
    2c04:	99 0f       	add	r25, r25
    2c06:	00 08       	sbc	r0, r0
    2c08:	55 0f       	add	r21, r21
    2c0a:	aa 0b       	sbc	r26, r26
    2c0c:	e0 e8       	ldi	r30, 0x80	; 128
    2c0e:	fe ef       	ldi	r31, 0xFE	; 254
    2c10:	16 16       	cp	r1, r22
    2c12:	17 06       	cpc	r1, r23
    2c14:	e8 07       	cpc	r30, r24
    2c16:	f9 07       	cpc	r31, r25
    2c18:	c0 f0       	brcs	.+48     	; 0x2c4a <__fp_cmp+0x46>
    2c1a:	12 16       	cp	r1, r18
    2c1c:	13 06       	cpc	r1, r19
    2c1e:	e4 07       	cpc	r30, r20
    2c20:	f5 07       	cpc	r31, r21
    2c22:	98 f0       	brcs	.+38     	; 0x2c4a <__fp_cmp+0x46>
    2c24:	62 1b       	sub	r22, r18
    2c26:	73 0b       	sbc	r23, r19
    2c28:	84 0b       	sbc	r24, r20
    2c2a:	95 0b       	sbc	r25, r21
    2c2c:	39 f4       	brne	.+14     	; 0x2c3c <__fp_cmp+0x38>
    2c2e:	0a 26       	eor	r0, r26
    2c30:	61 f0       	breq	.+24     	; 0x2c4a <__fp_cmp+0x46>
    2c32:	23 2b       	or	r18, r19
    2c34:	24 2b       	or	r18, r20
    2c36:	25 2b       	or	r18, r21
    2c38:	21 f4       	brne	.+8      	; 0x2c42 <__fp_cmp+0x3e>
    2c3a:	08 95       	ret
    2c3c:	0a 26       	eor	r0, r26
    2c3e:	09 f4       	brne	.+2      	; 0x2c42 <__fp_cmp+0x3e>
    2c40:	a1 40       	sbci	r26, 0x01	; 1
    2c42:	a6 95       	lsr	r26
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	81 1d       	adc	r24, r1
    2c48:	81 1d       	adc	r24, r1
    2c4a:	08 95       	ret

00002c4c <__fp_inf>:
    2c4c:	97 f9       	bld	r25, 7
    2c4e:	9f 67       	ori	r25, 0x7F	; 127
    2c50:	80 e8       	ldi	r24, 0x80	; 128
    2c52:	70 e0       	ldi	r23, 0x00	; 0
    2c54:	60 e0       	ldi	r22, 0x00	; 0
    2c56:	08 95       	ret

00002c58 <__fp_nan>:
    2c58:	9f ef       	ldi	r25, 0xFF	; 255
    2c5a:	80 ec       	ldi	r24, 0xC0	; 192
    2c5c:	08 95       	ret

00002c5e <__fp_powser>:
    2c5e:	df 93       	push	r29
    2c60:	cf 93       	push	r28
    2c62:	1f 93       	push	r17
    2c64:	0f 93       	push	r16
    2c66:	ff 92       	push	r15
    2c68:	ef 92       	push	r14
    2c6a:	df 92       	push	r13
    2c6c:	7b 01       	movw	r14, r22
    2c6e:	8c 01       	movw	r16, r24
    2c70:	68 94       	set
    2c72:	05 c0       	rjmp	.+10     	; 0x2c7e <__fp_powser+0x20>
    2c74:	da 2e       	mov	r13, r26
    2c76:	ef 01       	movw	r28, r30
    2c78:	af d0       	rcall	.+350    	; 0x2dd8 <__mulsf3x>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	e8 94       	clt
    2c7e:	a5 91       	lpm	r26, Z+
    2c80:	25 91       	lpm	r18, Z+
    2c82:	35 91       	lpm	r19, Z+
    2c84:	45 91       	lpm	r20, Z+
    2c86:	55 91       	lpm	r21, Z+
    2c88:	ae f3       	brts	.-22     	; 0x2c74 <__fp_powser+0x16>
    2c8a:	ef 01       	movw	r28, r30
    2c8c:	29 de       	rcall	.-942    	; 0x28e0 <__addsf3x>
    2c8e:	fe 01       	movw	r30, r28
    2c90:	97 01       	movw	r18, r14
    2c92:	a8 01       	movw	r20, r16
    2c94:	da 94       	dec	r13
    2c96:	79 f7       	brne	.-34     	; 0x2c76 <__fp_powser+0x18>
    2c98:	df 90       	pop	r13
    2c9a:	ef 90       	pop	r14
    2c9c:	ff 90       	pop	r15
    2c9e:	0f 91       	pop	r16
    2ca0:	1f 91       	pop	r17
    2ca2:	cf 91       	pop	r28
    2ca4:	df 91       	pop	r29
    2ca6:	08 95       	ret

00002ca8 <__fp_pscA>:
    2ca8:	00 24       	eor	r0, r0
    2caa:	0a 94       	dec	r0
    2cac:	16 16       	cp	r1, r22
    2cae:	17 06       	cpc	r1, r23
    2cb0:	18 06       	cpc	r1, r24
    2cb2:	09 06       	cpc	r0, r25
    2cb4:	08 95       	ret

00002cb6 <__fp_pscB>:
    2cb6:	00 24       	eor	r0, r0
    2cb8:	0a 94       	dec	r0
    2cba:	12 16       	cp	r1, r18
    2cbc:	13 06       	cpc	r1, r19
    2cbe:	14 06       	cpc	r1, r20
    2cc0:	05 06       	cpc	r0, r21
    2cc2:	08 95       	ret
    2cc4:	c9 cf       	rjmp	.-110    	; 0x2c58 <__fp_nan>

00002cc6 <__fp_rempio2>:
    2cc6:	50 d0       	rcall	.+160    	; 0x2d68 <__fp_splitA>
    2cc8:	e8 f3       	brcs	.-6      	; 0x2cc4 <__fp_pscB+0xe>
    2cca:	e8 94       	clt
    2ccc:	e0 e0       	ldi	r30, 0x00	; 0
    2cce:	bb 27       	eor	r27, r27
    2cd0:	9f 57       	subi	r25, 0x7F	; 127
    2cd2:	f0 f0       	brcs	.+60     	; 0x2d10 <__fp_rempio2+0x4a>
    2cd4:	2a ed       	ldi	r18, 0xDA	; 218
    2cd6:	3f e0       	ldi	r19, 0x0F	; 15
    2cd8:	49 ec       	ldi	r20, 0xC9	; 201
    2cda:	06 c0       	rjmp	.+12     	; 0x2ce8 <__fp_rempio2+0x22>
    2cdc:	ee 0f       	add	r30, r30
    2cde:	bb 0f       	add	r27, r27
    2ce0:	66 1f       	adc	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	88 1f       	adc	r24, r24
    2ce6:	28 f0       	brcs	.+10     	; 0x2cf2 <__fp_rempio2+0x2c>
    2ce8:	b2 3a       	cpi	r27, 0xA2	; 162
    2cea:	62 07       	cpc	r22, r18
    2cec:	73 07       	cpc	r23, r19
    2cee:	84 07       	cpc	r24, r20
    2cf0:	28 f0       	brcs	.+10     	; 0x2cfc <__fp_rempio2+0x36>
    2cf2:	b2 5a       	subi	r27, 0xA2	; 162
    2cf4:	62 0b       	sbc	r22, r18
    2cf6:	73 0b       	sbc	r23, r19
    2cf8:	84 0b       	sbc	r24, r20
    2cfa:	e3 95       	inc	r30
    2cfc:	9a 95       	dec	r25
    2cfe:	72 f7       	brpl	.-36     	; 0x2cdc <__fp_rempio2+0x16>
    2d00:	80 38       	cpi	r24, 0x80	; 128
    2d02:	30 f4       	brcc	.+12     	; 0x2d10 <__fp_rempio2+0x4a>
    2d04:	9a 95       	dec	r25
    2d06:	bb 0f       	add	r27, r27
    2d08:	66 1f       	adc	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	d2 f7       	brpl	.-12     	; 0x2d04 <__fp_rempio2+0x3e>
    2d10:	90 48       	sbci	r25, 0x80	; 128
    2d12:	06 c1       	rjmp	.+524    	; 0x2f20 <__fp_mpack_finite>

00002d14 <__fp_round>:
    2d14:	09 2e       	mov	r0, r25
    2d16:	03 94       	inc	r0
    2d18:	00 0c       	add	r0, r0
    2d1a:	11 f4       	brne	.+4      	; 0x2d20 <__fp_round+0xc>
    2d1c:	88 23       	and	r24, r24
    2d1e:	52 f0       	brmi	.+20     	; 0x2d34 <__fp_round+0x20>
    2d20:	bb 0f       	add	r27, r27
    2d22:	40 f4       	brcc	.+16     	; 0x2d34 <__fp_round+0x20>
    2d24:	bf 2b       	or	r27, r31
    2d26:	11 f4       	brne	.+4      	; 0x2d2c <__fp_round+0x18>
    2d28:	60 ff       	sbrs	r22, 0
    2d2a:	04 c0       	rjmp	.+8      	; 0x2d34 <__fp_round+0x20>
    2d2c:	6f 5f       	subi	r22, 0xFF	; 255
    2d2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2d30:	8f 4f       	sbci	r24, 0xFF	; 255
    2d32:	9f 4f       	sbci	r25, 0xFF	; 255
    2d34:	08 95       	ret

00002d36 <__fp_sinus>:
    2d36:	ef 93       	push	r30
    2d38:	e0 ff       	sbrs	r30, 0
    2d3a:	06 c0       	rjmp	.+12     	; 0x2d48 <__fp_sinus+0x12>
    2d3c:	a2 ea       	ldi	r26, 0xA2	; 162
    2d3e:	2a ed       	ldi	r18, 0xDA	; 218
    2d40:	3f e0       	ldi	r19, 0x0F	; 15
    2d42:	49 ec       	ldi	r20, 0xC9	; 201
    2d44:	5f eb       	ldi	r21, 0xBF	; 191
    2d46:	cc dd       	rcall	.-1128   	; 0x28e0 <__addsf3x>
    2d48:	e5 df       	rcall	.-54     	; 0x2d14 <__fp_round>
    2d4a:	0f 90       	pop	r0
    2d4c:	03 94       	inc	r0
    2d4e:	01 fc       	sbrc	r0, 1
    2d50:	90 58       	subi	r25, 0x80	; 128
    2d52:	e9 ed       	ldi	r30, 0xD9	; 217
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	f7 c0       	rjmp	.+494    	; 0x2f46 <__fp_powsodd>

00002d58 <__fp_split3>:
    2d58:	57 fd       	sbrc	r21, 7
    2d5a:	90 58       	subi	r25, 0x80	; 128
    2d5c:	44 0f       	add	r20, r20
    2d5e:	55 1f       	adc	r21, r21
    2d60:	59 f0       	breq	.+22     	; 0x2d78 <__fp_splitA+0x10>
    2d62:	5f 3f       	cpi	r21, 0xFF	; 255
    2d64:	71 f0       	breq	.+28     	; 0x2d82 <__fp_splitA+0x1a>
    2d66:	47 95       	ror	r20

00002d68 <__fp_splitA>:
    2d68:	88 0f       	add	r24, r24
    2d6a:	97 fb       	bst	r25, 7
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	61 f0       	breq	.+24     	; 0x2d88 <__fp_splitA+0x20>
    2d70:	9f 3f       	cpi	r25, 0xFF	; 255
    2d72:	79 f0       	breq	.+30     	; 0x2d92 <__fp_splitA+0x2a>
    2d74:	87 95       	ror	r24
    2d76:	08 95       	ret
    2d78:	12 16       	cp	r1, r18
    2d7a:	13 06       	cpc	r1, r19
    2d7c:	14 06       	cpc	r1, r20
    2d7e:	55 1f       	adc	r21, r21
    2d80:	f2 cf       	rjmp	.-28     	; 0x2d66 <__fp_split3+0xe>
    2d82:	46 95       	lsr	r20
    2d84:	f1 df       	rcall	.-30     	; 0x2d68 <__fp_splitA>
    2d86:	08 c0       	rjmp	.+16     	; 0x2d98 <__fp_splitA+0x30>
    2d88:	16 16       	cp	r1, r22
    2d8a:	17 06       	cpc	r1, r23
    2d8c:	18 06       	cpc	r1, r24
    2d8e:	99 1f       	adc	r25, r25
    2d90:	f1 cf       	rjmp	.-30     	; 0x2d74 <__fp_splitA+0xc>
    2d92:	86 95       	lsr	r24
    2d94:	71 05       	cpc	r23, r1
    2d96:	61 05       	cpc	r22, r1
    2d98:	08 94       	sec
    2d9a:	08 95       	ret

00002d9c <__fp_zero>:
    2d9c:	e8 94       	clt

00002d9e <__fp_szero>:
    2d9e:	bb 27       	eor	r27, r27
    2da0:	66 27       	eor	r22, r22
    2da2:	77 27       	eor	r23, r23
    2da4:	cb 01       	movw	r24, r22
    2da6:	97 f9       	bld	r25, 7
    2da8:	08 95       	ret

00002daa <__gesf2>:
    2daa:	2c df       	rcall	.-424    	; 0x2c04 <__fp_cmp>
    2dac:	08 f4       	brcc	.+2      	; 0x2db0 <__gesf2+0x6>
    2dae:	8f ef       	ldi	r24, 0xFF	; 255
    2db0:	08 95       	ret

00002db2 <inverse>:
    2db2:	9b 01       	movw	r18, r22
    2db4:	ac 01       	movw	r20, r24
    2db6:	60 e0       	ldi	r22, 0x00	; 0
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	80 e8       	ldi	r24, 0x80	; 128
    2dbc:	9f e3       	ldi	r25, 0x3F	; 63
    2dbe:	4c ce       	rjmp	.-872    	; 0x2a58 <__divsf3>

00002dc0 <__mulsf3>:
    2dc0:	0b d0       	rcall	.+22     	; 0x2dd8 <__mulsf3x>
    2dc2:	a8 cf       	rjmp	.-176    	; 0x2d14 <__fp_round>
    2dc4:	71 df       	rcall	.-286    	; 0x2ca8 <__fp_pscA>
    2dc6:	28 f0       	brcs	.+10     	; 0x2dd2 <__mulsf3+0x12>
    2dc8:	76 df       	rcall	.-276    	; 0x2cb6 <__fp_pscB>
    2dca:	18 f0       	brcs	.+6      	; 0x2dd2 <__mulsf3+0x12>
    2dcc:	95 23       	and	r25, r21
    2dce:	09 f0       	breq	.+2      	; 0x2dd2 <__mulsf3+0x12>
    2dd0:	3d cf       	rjmp	.-390    	; 0x2c4c <__fp_inf>
    2dd2:	42 cf       	rjmp	.-380    	; 0x2c58 <__fp_nan>
    2dd4:	11 24       	eor	r1, r1
    2dd6:	e3 cf       	rjmp	.-58     	; 0x2d9e <__fp_szero>

00002dd8 <__mulsf3x>:
    2dd8:	bf df       	rcall	.-130    	; 0x2d58 <__fp_split3>
    2dda:	a0 f3       	brcs	.-24     	; 0x2dc4 <__mulsf3+0x4>

00002ddc <__mulsf3_pse>:
    2ddc:	95 9f       	mul	r25, r21
    2dde:	d1 f3       	breq	.-12     	; 0x2dd4 <__mulsf3+0x14>
    2de0:	95 0f       	add	r25, r21
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	55 1f       	adc	r21, r21
    2de6:	62 9f       	mul	r22, r18
    2de8:	f0 01       	movw	r30, r0
    2dea:	72 9f       	mul	r23, r18
    2dec:	bb 27       	eor	r27, r27
    2dee:	f0 0d       	add	r31, r0
    2df0:	b1 1d       	adc	r27, r1
    2df2:	63 9f       	mul	r22, r19
    2df4:	aa 27       	eor	r26, r26
    2df6:	f0 0d       	add	r31, r0
    2df8:	b1 1d       	adc	r27, r1
    2dfa:	aa 1f       	adc	r26, r26
    2dfc:	64 9f       	mul	r22, r20
    2dfe:	66 27       	eor	r22, r22
    2e00:	b0 0d       	add	r27, r0
    2e02:	a1 1d       	adc	r26, r1
    2e04:	66 1f       	adc	r22, r22
    2e06:	82 9f       	mul	r24, r18
    2e08:	22 27       	eor	r18, r18
    2e0a:	b0 0d       	add	r27, r0
    2e0c:	a1 1d       	adc	r26, r1
    2e0e:	62 1f       	adc	r22, r18
    2e10:	73 9f       	mul	r23, r19
    2e12:	b0 0d       	add	r27, r0
    2e14:	a1 1d       	adc	r26, r1
    2e16:	62 1f       	adc	r22, r18
    2e18:	83 9f       	mul	r24, r19
    2e1a:	a0 0d       	add	r26, r0
    2e1c:	61 1d       	adc	r22, r1
    2e1e:	22 1f       	adc	r18, r18
    2e20:	74 9f       	mul	r23, r20
    2e22:	33 27       	eor	r19, r19
    2e24:	a0 0d       	add	r26, r0
    2e26:	61 1d       	adc	r22, r1
    2e28:	23 1f       	adc	r18, r19
    2e2a:	84 9f       	mul	r24, r20
    2e2c:	60 0d       	add	r22, r0
    2e2e:	21 1d       	adc	r18, r1
    2e30:	82 2f       	mov	r24, r18
    2e32:	76 2f       	mov	r23, r22
    2e34:	6a 2f       	mov	r22, r26
    2e36:	11 24       	eor	r1, r1
    2e38:	9f 57       	subi	r25, 0x7F	; 127
    2e3a:	50 40       	sbci	r21, 0x00	; 0
    2e3c:	8a f0       	brmi	.+34     	; 0x2e60 <__mulsf3_pse+0x84>
    2e3e:	e1 f0       	breq	.+56     	; 0x2e78 <__mulsf3_pse+0x9c>
    2e40:	88 23       	and	r24, r24
    2e42:	4a f0       	brmi	.+18     	; 0x2e56 <__mulsf3_pse+0x7a>
    2e44:	ee 0f       	add	r30, r30
    2e46:	ff 1f       	adc	r31, r31
    2e48:	bb 1f       	adc	r27, r27
    2e4a:	66 1f       	adc	r22, r22
    2e4c:	77 1f       	adc	r23, r23
    2e4e:	88 1f       	adc	r24, r24
    2e50:	91 50       	subi	r25, 0x01	; 1
    2e52:	50 40       	sbci	r21, 0x00	; 0
    2e54:	a9 f7       	brne	.-22     	; 0x2e40 <__mulsf3_pse+0x64>
    2e56:	9e 3f       	cpi	r25, 0xFE	; 254
    2e58:	51 05       	cpc	r21, r1
    2e5a:	70 f0       	brcs	.+28     	; 0x2e78 <__mulsf3_pse+0x9c>
    2e5c:	f7 ce       	rjmp	.-530    	; 0x2c4c <__fp_inf>
    2e5e:	9f cf       	rjmp	.-194    	; 0x2d9e <__fp_szero>
    2e60:	5f 3f       	cpi	r21, 0xFF	; 255
    2e62:	ec f3       	brlt	.-6      	; 0x2e5e <__mulsf3_pse+0x82>
    2e64:	98 3e       	cpi	r25, 0xE8	; 232
    2e66:	dc f3       	brlt	.-10     	; 0x2e5e <__mulsf3_pse+0x82>
    2e68:	86 95       	lsr	r24
    2e6a:	77 95       	ror	r23
    2e6c:	67 95       	ror	r22
    2e6e:	b7 95       	ror	r27
    2e70:	f7 95       	ror	r31
    2e72:	e7 95       	ror	r30
    2e74:	9f 5f       	subi	r25, 0xFF	; 255
    2e76:	c1 f7       	brne	.-16     	; 0x2e68 <__mulsf3_pse+0x8c>
    2e78:	fe 2b       	or	r31, r30
    2e7a:	88 0f       	add	r24, r24
    2e7c:	91 1d       	adc	r25, r1
    2e7e:	96 95       	lsr	r25
    2e80:	87 95       	ror	r24
    2e82:	97 f9       	bld	r25, 7
    2e84:	08 95       	ret

00002e86 <sin>:
    2e86:	9f 93       	push	r25
    2e88:	1e df       	rcall	.-452    	; 0x2cc6 <__fp_rempio2>
    2e8a:	0f 90       	pop	r0
    2e8c:	07 fc       	sbrc	r0, 7
    2e8e:	ee 5f       	subi	r30, 0xFE	; 254
    2e90:	52 cf       	rjmp	.-348    	; 0x2d36 <__fp_sinus>
    2e92:	11 f4       	brne	.+4      	; 0x2e98 <sin+0x12>
    2e94:	0e f4       	brtc	.+2      	; 0x2e98 <sin+0x12>
    2e96:	e0 ce       	rjmp	.-576    	; 0x2c58 <__fp_nan>
    2e98:	41 c0       	rjmp	.+130    	; 0x2f1c <__fp_mpack>

00002e9a <sqrt>:
    2e9a:	66 df       	rcall	.-308    	; 0x2d68 <__fp_splitA>
    2e9c:	d0 f3       	brcs	.-12     	; 0x2e92 <sin+0xc>
    2e9e:	99 23       	and	r25, r25
    2ea0:	d9 f3       	breq	.-10     	; 0x2e98 <sin+0x12>
    2ea2:	ce f3       	brts	.-14     	; 0x2e96 <sin+0x10>
    2ea4:	9f 57       	subi	r25, 0x7F	; 127
    2ea6:	55 0b       	sbc	r21, r21
    2ea8:	87 ff       	sbrs	r24, 7
    2eaa:	46 d0       	rcall	.+140    	; 0x2f38 <__fp_norm2>
    2eac:	00 24       	eor	r0, r0
    2eae:	a0 e6       	ldi	r26, 0x60	; 96
    2eb0:	40 ea       	ldi	r20, 0xA0	; 160
    2eb2:	90 01       	movw	r18, r0
    2eb4:	80 58       	subi	r24, 0x80	; 128
    2eb6:	56 95       	lsr	r21
    2eb8:	97 95       	ror	r25
    2eba:	28 f4       	brcc	.+10     	; 0x2ec6 <sqrt+0x2c>
    2ebc:	80 5c       	subi	r24, 0xC0	; 192
    2ebe:	66 0f       	add	r22, r22
    2ec0:	77 1f       	adc	r23, r23
    2ec2:	88 1f       	adc	r24, r24
    2ec4:	20 f0       	brcs	.+8      	; 0x2ece <sqrt+0x34>
    2ec6:	26 17       	cp	r18, r22
    2ec8:	37 07       	cpc	r19, r23
    2eca:	48 07       	cpc	r20, r24
    2ecc:	30 f4       	brcc	.+12     	; 0x2eda <sqrt+0x40>
    2ece:	62 1b       	sub	r22, r18
    2ed0:	73 0b       	sbc	r23, r19
    2ed2:	84 0b       	sbc	r24, r20
    2ed4:	20 29       	or	r18, r0
    2ed6:	31 29       	or	r19, r1
    2ed8:	4a 2b       	or	r20, r26
    2eda:	a6 95       	lsr	r26
    2edc:	17 94       	ror	r1
    2ede:	07 94       	ror	r0
    2ee0:	20 25       	eor	r18, r0
    2ee2:	31 25       	eor	r19, r1
    2ee4:	4a 27       	eor	r20, r26
    2ee6:	58 f7       	brcc	.-42     	; 0x2ebe <sqrt+0x24>
    2ee8:	66 0f       	add	r22, r22
    2eea:	77 1f       	adc	r23, r23
    2eec:	88 1f       	adc	r24, r24
    2eee:	20 f0       	brcs	.+8      	; 0x2ef8 <sqrt+0x5e>
    2ef0:	26 17       	cp	r18, r22
    2ef2:	37 07       	cpc	r19, r23
    2ef4:	48 07       	cpc	r20, r24
    2ef6:	30 f4       	brcc	.+12     	; 0x2f04 <sqrt+0x6a>
    2ef8:	62 0b       	sbc	r22, r18
    2efa:	73 0b       	sbc	r23, r19
    2efc:	84 0b       	sbc	r24, r20
    2efe:	20 0d       	add	r18, r0
    2f00:	31 1d       	adc	r19, r1
    2f02:	41 1d       	adc	r20, r1
    2f04:	a0 95       	com	r26
    2f06:	81 f7       	brne	.-32     	; 0x2ee8 <sqrt+0x4e>
    2f08:	b9 01       	movw	r22, r18
    2f0a:	84 2f       	mov	r24, r20
    2f0c:	91 58       	subi	r25, 0x81	; 129
    2f0e:	88 0f       	add	r24, r24
    2f10:	96 95       	lsr	r25
    2f12:	87 95       	ror	r24
    2f14:	08 95       	ret

00002f16 <square>:
    2f16:	9b 01       	movw	r18, r22
    2f18:	ac 01       	movw	r20, r24
    2f1a:	52 cf       	rjmp	.-348    	; 0x2dc0 <__mulsf3>

00002f1c <__fp_mpack>:
    2f1c:	9f 3f       	cpi	r25, 0xFF	; 255
    2f1e:	31 f0       	breq	.+12     	; 0x2f2c <__fp_mpack_finite+0xc>

00002f20 <__fp_mpack_finite>:
    2f20:	91 50       	subi	r25, 0x01	; 1
    2f22:	20 f4       	brcc	.+8      	; 0x2f2c <__fp_mpack_finite+0xc>
    2f24:	87 95       	ror	r24
    2f26:	77 95       	ror	r23
    2f28:	67 95       	ror	r22
    2f2a:	b7 95       	ror	r27
    2f2c:	88 0f       	add	r24, r24
    2f2e:	91 1d       	adc	r25, r1
    2f30:	96 95       	lsr	r25
    2f32:	87 95       	ror	r24
    2f34:	97 f9       	bld	r25, 7
    2f36:	08 95       	ret

00002f38 <__fp_norm2>:
    2f38:	91 50       	subi	r25, 0x01	; 1
    2f3a:	50 40       	sbci	r21, 0x00	; 0
    2f3c:	66 0f       	add	r22, r22
    2f3e:	77 1f       	adc	r23, r23
    2f40:	88 1f       	adc	r24, r24
    2f42:	d2 f7       	brpl	.-12     	; 0x2f38 <__fp_norm2>
    2f44:	08 95       	ret

00002f46 <__fp_powsodd>:
    2f46:	9f 93       	push	r25
    2f48:	8f 93       	push	r24
    2f4a:	7f 93       	push	r23
    2f4c:	6f 93       	push	r22
    2f4e:	ff 93       	push	r31
    2f50:	ef 93       	push	r30
    2f52:	9b 01       	movw	r18, r22
    2f54:	ac 01       	movw	r20, r24
    2f56:	34 df       	rcall	.-408    	; 0x2dc0 <__mulsf3>
    2f58:	ef 91       	pop	r30
    2f5a:	ff 91       	pop	r31
    2f5c:	80 de       	rcall	.-768    	; 0x2c5e <__fp_powser>
    2f5e:	2f 91       	pop	r18
    2f60:	3f 91       	pop	r19
    2f62:	4f 91       	pop	r20
    2f64:	5f 91       	pop	r21
    2f66:	2c cf       	rjmp	.-424    	; 0x2dc0 <__mulsf3>

00002f68 <__divmodhi4>:
    2f68:	97 fb       	bst	r25, 7
    2f6a:	07 2e       	mov	r0, r23
    2f6c:	16 f4       	brtc	.+4      	; 0x2f72 <__divmodhi4+0xa>
    2f6e:	00 94       	com	r0
    2f70:	07 d0       	rcall	.+14     	; 0x2f80 <__divmodhi4_neg1>
    2f72:	77 fd       	sbrc	r23, 7
    2f74:	09 d0       	rcall	.+18     	; 0x2f88 <__divmodhi4_neg2>
    2f76:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <__udivmodhi4>
    2f7a:	07 fc       	sbrc	r0, 7
    2f7c:	05 d0       	rcall	.+10     	; 0x2f88 <__divmodhi4_neg2>
    2f7e:	3e f4       	brtc	.+14     	; 0x2f8e <__divmodhi4_exit>

00002f80 <__divmodhi4_neg1>:
    2f80:	90 95       	com	r25
    2f82:	81 95       	neg	r24
    2f84:	9f 4f       	sbci	r25, 0xFF	; 255
    2f86:	08 95       	ret

00002f88 <__divmodhi4_neg2>:
    2f88:	70 95       	com	r23
    2f8a:	61 95       	neg	r22
    2f8c:	7f 4f       	sbci	r23, 0xFF	; 255

00002f8e <__divmodhi4_exit>:
    2f8e:	08 95       	ret

00002f90 <__udivmodhi4>:
    2f90:	aa 1b       	sub	r26, r26
    2f92:	bb 1b       	sub	r27, r27
    2f94:	51 e1       	ldi	r21, 0x11	; 17
    2f96:	07 c0       	rjmp	.+14     	; 0x2fa6 <__udivmodhi4_ep>

00002f98 <__udivmodhi4_loop>:
    2f98:	aa 1f       	adc	r26, r26
    2f9a:	bb 1f       	adc	r27, r27
    2f9c:	a6 17       	cp	r26, r22
    2f9e:	b7 07       	cpc	r27, r23
    2fa0:	10 f0       	brcs	.+4      	; 0x2fa6 <__udivmodhi4_ep>
    2fa2:	a6 1b       	sub	r26, r22
    2fa4:	b7 0b       	sbc	r27, r23

00002fa6 <__udivmodhi4_ep>:
    2fa6:	88 1f       	adc	r24, r24
    2fa8:	99 1f       	adc	r25, r25
    2faa:	5a 95       	dec	r21
    2fac:	a9 f7       	brne	.-22     	; 0x2f98 <__udivmodhi4_loop>
    2fae:	80 95       	com	r24
    2fb0:	90 95       	com	r25
    2fb2:	bc 01       	movw	r22, r24
    2fb4:	cd 01       	movw	r24, r26
    2fb6:	08 95       	ret

00002fb8 <_exit>:
    2fb8:	f8 94       	cli

00002fba <__stop_program>:
    2fba:	ff cf       	rjmp	.-2      	; 0x2fba <__stop_program>
