
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000036f2  00003786  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000085  0080010c  0080010c  00003792  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00003794  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007fde  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  0000800d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000032ba  00000000  00000000  00008315  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bcf  00000000  00000000  0000b5cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001631  00000000  00000000  0000c19e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  0000d7d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000be2  00000000  00000000  0000e0b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003c96  00000000  00000000  0000ec92  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000320  00000000  00000000  00012928  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 f0 09 	jmp	0x13e0	; 0x13e0 <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e2 ef       	ldi	r30, 0xF2	; 242
     1be:	f6 e3       	ldi	r31, 0x36	; 54
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ac 30       	cpi	r26, 0x0C	; 12
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ac e0       	ldi	r26, 0x0C	; 12
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a1 39       	cpi	r26, 0x91	; 145
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 11 03 	call	0x622	; 0x622 <main>
     1e0:	0c 94 77 1b 	jmp	0x36ee	; 0x36ee <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <calculate_diff_theta>:


// --------------------------------------------------------------
// CALCULATE ERROR IN ORIENTATION and OPTIMAL TURNING
// --------------------------------------------------------------
void calculate_diff_theta(float theta_des, float* err_theta, int* dir_to_turn){
     1e8:	2f 92       	push	r2
     1ea:	3f 92       	push	r3
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	6b 01       	movw	r12, r22
     20e:	7c 01       	movw	r14, r24
     210:	ea 01       	movw	r28, r20
     212:	89 01       	movw	r16, r18
    
    float angle_dir_aux = theta_des-180;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	44 e3       	ldi	r20, 0x34	; 52
     21a:	53 e4       	ldi	r21, 0x43	; 67
     21c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     220:	96 2e       	mov	r9, r22
     222:	87 2e       	mov	r8, r23
     224:	38 2e       	mov	r3, r24
     226:	29 2e       	mov	r2, r25
    float add_360 = 0;
    if (angle_dir_aux < -180)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	44 e3       	ldi	r20, 0x34	; 52
     22e:	53 ec       	ldi	r21, 0xC3	; 195
     230:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	0c f0       	brlt	.+2      	; 0x23a <calculate_diff_theta+0x52>
     238:	c8 c0       	rjmp	.+400    	; 0x3ca <calculate_diff_theta+0x1e2>
    {
        angle_dir_aux += 360;
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	44 eb       	ldi	r20, 0xB4	; 180
     240:	53 e4       	ldi	r21, 0x43	; 67
     242:	69 2d       	mov	r22, r9
     244:	78 2d       	mov	r23, r8
     246:	83 2d       	mov	r24, r3
     248:	92 2d       	mov	r25, r2
     24a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     24e:	26 2e       	mov	r2, r22
     250:	37 2e       	mov	r3, r23
     252:	88 2e       	mov	r8, r24
     254:	99 2e       	mov	r9, r25
            *err_theta = (theta_robot+360) - theta_des;
        else
            *err_theta = (theta_robot) - theta_des;
        *dir_to_turn = 1;
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
     256:	a0 90 10 01 	lds	r10, 0x0110
     25a:	b0 90 11 01 	lds	r11, 0x0111
     25e:	b5 01       	movw	r22, r10
     260:	88 27       	eor	r24, r24
     262:	77 fd       	sbrc	r23, 7
     264:	80 95       	com	r24
     266:	98 2f       	mov	r25, r24
     268:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     26c:	2b 01       	movw	r4, r22
     26e:	3c 01       	movw	r6, r24
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c7 01       	movw	r24, r14
     276:	b6 01       	movw	r22, r12
     278:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
     27c:	88 23       	and	r24, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <calculate_diff_theta+0x9a>
     280:	4e c0       	rjmp	.+156    	; 0x31e <calculate_diff_theta+0x136>
     282:	52 c0       	rjmp	.+164    	; 0x328 <calculate_diff_theta+0x140>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
     284:	a3 01       	movw	r20, r6
     286:	92 01       	movw	r18, r4
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
     290:	88 23       	and	r24, r24
     292:	74 f0       	brlt	.+28     	; 0x2b0 <calculate_diff_theta+0xc8>
    {
        *err_theta = theta_des - theta_robot;
     294:	a3 01       	movw	r20, r6
     296:	92 01       	movw	r18, r4
     298:	c7 01       	movw	r24, r14
     29a:	b6 01       	movw	r22, r12
     29c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     2a0:	68 83       	st	Y, r22
     2a2:	79 83       	std	Y+1, r23	; 0x01
     2a4:	8a 83       	std	Y+2, r24	; 0x02
     2a6:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
     2a8:	f8 01       	movw	r30, r16
     2aa:	11 82       	std	Z+1, r1	; 0x01
     2ac:	10 82       	st	Z, r1
     2ae:	a6 c0       	rjmp	.+332    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > theta_des))
     2b0:	a3 01       	movw	r20, r6
     2b2:	92 01       	movw	r18, r4
     2b4:	69 2d       	mov	r22, r9
     2b6:	78 2d       	mov	r23, r8
     2b8:	83 2d       	mov	r24, r3
     2ba:	92 2d       	mov	r25, r2
     2bc:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
     2c0:	18 16       	cp	r1, r24
     2c2:	4c f0       	brlt	.+18     	; 0x2d6 <calculate_diff_theta+0xee>
     2c4:	a3 01       	movw	r20, r6
     2c6:	92 01       	movw	r18, r4
     2c8:	c7 01       	movw	r24, r14
     2ca:	b6 01       	movw	r22, r12
     2cc:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     2d0:	88 23       	and	r24, r24
     2d2:	0c f0       	brlt	.+2      	; 0x2d6 <calculate_diff_theta+0xee>
     2d4:	93 c0       	rjmp	.+294    	; 0x3fc <calculate_diff_theta+0x214>
    {
        if (theta_robot < 0)
     2d6:	bb 20       	and	r11, r11
     2d8:	94 f4       	brge	.+36     	; 0x2fe <calculate_diff_theta+0x116>
            *err_theta = (theta_robot+360) - theta_des;
     2da:	b5 01       	movw	r22, r10
     2dc:	68 59       	subi	r22, 0x98	; 152
     2de:	7e 4f       	sbci	r23, 0xFE	; 254
     2e0:	88 27       	eor	r24, r24
     2e2:	77 fd       	sbrc	r23, 7
     2e4:	80 95       	com	r24
     2e6:	98 2f       	mov	r25, r24
     2e8:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     2f4:	68 83       	st	Y, r22
     2f6:	79 83       	std	Y+1, r23	; 0x01
     2f8:	8a 83       	std	Y+2, r24	; 0x02
     2fa:	9b 83       	std	Y+3, r25	; 0x03
     2fc:	0a c0       	rjmp	.+20     	; 0x312 <calculate_diff_theta+0x12a>
        else
            *err_theta = (theta_robot) - theta_des;
     2fe:	a7 01       	movw	r20, r14
     300:	96 01       	movw	r18, r12
     302:	c3 01       	movw	r24, r6
     304:	b2 01       	movw	r22, r4
     306:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     30a:	68 83       	st	Y, r22
     30c:	79 83       	std	Y+1, r23	; 0x01
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	f8 01       	movw	r30, r16
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	6f c0       	rjmp	.+222    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
     31e:	fc e4       	ldi	r31, 0x4C	; 76
     320:	af 16       	cp	r10, r31
     322:	ff ef       	ldi	r31, 0xFF	; 255
     324:	bf 06       	cpc	r11, r31
     326:	74 f4       	brge	.+28     	; 0x344 <calculate_diff_theta+0x15c>
     328:	a3 01       	movw	r20, r6
     32a:	92 01       	movw	r18, r4
     32c:	62 2d       	mov	r22, r2
     32e:	73 2d       	mov	r23, r3
     330:	88 2d       	mov	r24, r8
     332:	99 2d       	mov	r25, r9
     334:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     338:	18 16       	cp	r1, r24
     33a:	2c f1       	brlt	.+74     	; 0x386 <calculate_diff_theta+0x19e>
     33c:	85 eb       	ldi	r24, 0xB5	; 181
     33e:	a8 16       	cp	r10, r24
     340:	b1 04       	cpc	r11, r1
     342:	0c f5       	brge	.+66     	; 0x386 <calculate_diff_theta+0x19e>
    {
        if (theta_robot < 0)
     344:	bb 20       	and	r11, r11
     346:	5c f4       	brge	.+22     	; 0x35e <calculate_diff_theta+0x176>
            *err_theta = theta_des - theta_robot;
     348:	a3 01       	movw	r20, r6
     34a:	92 01       	movw	r18, r4
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     354:	68 83       	st	Y, r22
     356:	79 83       	std	Y+1, r23	; 0x01
     358:	8a 83       	std	Y+2, r24	; 0x02
     35a:	9b 83       	std	Y+3, r25	; 0x03
     35c:	10 c0       	rjmp	.+32     	; 0x37e <calculate_diff_theta+0x196>
        else
            *err_theta = (theta_des + 360) - theta_robot;
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	44 eb       	ldi	r20, 0xB4	; 180
     364:	53 e4       	ldi	r21, 0x43	; 67
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     36e:	a3 01       	movw	r20, r6
     370:	92 01       	movw	r18, r4
     372:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     376:	68 83       	st	Y, r22
     378:	79 83       	std	Y+1, r23	; 0x01
     37a:	8a 83       	std	Y+2, r24	; 0x02
     37c:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
     37e:	f8 01       	movw	r30, r16
     380:	11 82       	std	Z+1, r1	; 0x01
     382:	10 82       	st	Z, r1
     384:	3b c0       	rjmp	.+118    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && (theta_robot > theta_des && theta_robot < angle_dir_aux))
     386:	a3 01       	movw	r20, r6
     388:	92 01       	movw	r18, r4
     38a:	c7 01       	movw	r24, r14
     38c:	b6 01       	movw	r22, r12
     38e:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     392:	88 23       	and	r24, r24
     394:	9c f5       	brge	.+102    	; 0x3fc <calculate_diff_theta+0x214>
     396:	a3 01       	movw	r20, r6
     398:	92 01       	movw	r18, r4
     39a:	62 2d       	mov	r22, r2
     39c:	73 2d       	mov	r23, r3
     39e:	88 2d       	mov	r24, r8
     3a0:	99 2d       	mov	r25, r9
     3a2:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	4c f5       	brge	.+82     	; 0x3fc <calculate_diff_theta+0x214>
    {
        *err_theta = theta_robot - theta_des;
     3aa:	a7 01       	movw	r20, r14
     3ac:	96 01       	movw	r18, r12
     3ae:	c3 01       	movw	r24, r6
     3b0:	b2 01       	movw	r22, r4
     3b2:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     3b6:	68 83       	st	Y, r22
     3b8:	79 83       	std	Y+1, r23	; 0x01
     3ba:	8a 83       	std	Y+2, r24	; 0x02
     3bc:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	f8 01       	movw	r30, r16
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	80 83       	st	Z, r24
     3c8:	19 c0       	rjmp	.+50     	; 0x3fc <calculate_diff_theta+0x214>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
     3ca:	a0 90 10 01 	lds	r10, 0x0110
     3ce:	b0 90 11 01 	lds	r11, 0x0111
     3d2:	b5 01       	movw	r22, r10
     3d4:	88 27       	eor	r24, r24
     3d6:	77 fd       	sbrc	r23, 7
     3d8:	80 95       	com	r24
     3da:	98 2f       	mov	r25, r24
     3dc:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     3e0:	2b 01       	movw	r4, r22
     3e2:	3c 01       	movw	r6, r24
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	69 2d       	mov	r22, r9
     3ea:	78 2d       	mov	r23, r8
     3ec:	83 2d       	mov	r24, r3
     3ee:	92 2d       	mov	r25, r2
     3f0:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	0c f0       	brlt	.+2      	; 0x3fa <calculate_diff_theta+0x212>
     3f8:	45 cf       	rjmp	.-374    	; 0x284 <calculate_diff_theta+0x9c>
     3fa:	5a cf       	rjmp	.-332    	; 0x2b0 <calculate_diff_theta+0xc8>
        *dir_to_turn = 1;
    }else {
        err_theta = 0;
        dir_to_turn = 0;
    }
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	af 90       	pop	r10
     410:	9f 90       	pop	r9
     412:	8f 90       	pop	r8
     414:	7f 90       	pop	r7
     416:	6f 90       	pop	r6
     418:	5f 90       	pop	r5
     41a:	4f 90       	pop	r4
     41c:	3f 90       	pop	r3
     41e:	2f 90       	pop	r2
     420:	08 95       	ret

00000422 <turn_robot>:

// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO TURN ROBOT
// --------------------------------------------------------------
void turn_robot(float theta, int dir, float diff){
	if (dir == 1) {             // Move with a right curve
     422:	41 30       	cpi	r20, 0x01	; 1
     424:	51 05       	cpc	r21, r1
     426:	c9 f4       	brne	.+50     	; 0x45a <turn_robot+0x38>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
     428:	20 e0       	ldi	r18, 0x00	; 0
     42a:	30 e0       	ldi	r19, 0x00	; 0
     42c:	40 e0       	ldi	r20, 0x00	; 0
     42e:	51 e4       	ldi	r21, 0x41	; 65
     430:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     434:	20 e0       	ldi	r18, 0x00	; 0
     436:	30 e8       	ldi	r19, 0x80	; 128
     438:	49 e0       	ldi	r20, 0x09	; 9
     43a:	55 e4       	ldi	r21, 0x45	; 69
     43c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     440:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     444:	70 93 8b 00 	sts	0x008B, r23
     448:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
     44c:	70 93 8d 00 	sts	0x008D, r23
     450:	60 93 8c 00 	sts	0x008C, r22
		
		set(PORTB,3);
     454:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTD,3);
     456:	5b 98       	cbi	0x0b, 3	; 11
     458:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1C = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);;
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	30 e0       	ldi	r19, 0x00	; 0
     45e:	40 e0       	ldi	r20, 0x00	; 0
     460:	51 e4       	ldi	r21, 0x41	; 65
     462:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     466:	20 e0       	ldi	r18, 0x00	; 0
     468:	30 e8       	ldi	r19, 0x80	; 128
     46a:	49 e0       	ldi	r20, 0x09	; 9
     46c:	55 e4       	ldi	r21, 0x45	; 69
     46e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     472:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     476:	70 93 8d 00 	sts	0x008D, r23
     47a:	60 93 8c 00 	sts	0x008C, r22
		OCR1B = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);
     47e:	70 93 8b 00 	sts	0x008B, r23
     482:	60 93 8a 00 	sts	0x008A, r22
		
		clear(PORTB,3);
     486:	2b 98       	cbi	0x05, 3	; 5
		set(PORTD,3);
     488:	5b 9a       	sbi	0x0b, 3	; 11
     48a:	08 95       	ret

0000048c <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f9 f4       	brne	.+62     	; 0x4ce <move_robot_to_puck+0x42>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
     490:	88 e2       	ldi	r24, 0x28	; 40
     492:	9a e0       	ldi	r25, 0x0A	; 10
     494:	90 93 8b 00 	sts	0x008B, r25
     498:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
     49c:	88 27       	eor	r24, r24
     49e:	77 fd       	sbrc	r23, 7
     4a0:	80 95       	com	r24
     4a2:	98 2f       	mov	r25, r24
     4a4:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     4a8:	2a e0       	ldi	r18, 0x0A	; 10
     4aa:	37 ed       	ldi	r19, 0xD7	; 215
     4ac:	43 e2       	ldi	r20, 0x23	; 35
     4ae:	5c e3       	ldi	r21, 0x3C	; 60
     4b0:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	30 e0       	ldi	r19, 0x00	; 0
     4b8:	4f e2       	ldi	r20, 0x2F	; 47
     4ba:	55 e4       	ldi	r21, 0x45	; 69
     4bc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     4c0:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     4c4:	70 93 8d 00 	sts	0x008D, r23
     4c8:	60 93 8c 00 	sts	0x008C, r22
     4cc:	1e c0       	rjmp	.+60     	; 0x50a <move_robot_to_puck+0x7e>
		
	}
	else
	{                      // Move with a right curve
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
     4ce:	88 27       	eor	r24, r24
     4d0:	77 fd       	sbrc	r23, 7
     4d2:	80 95       	com	r24
     4d4:	98 2f       	mov	r25, r24
     4d6:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     4da:	2a e0       	ldi	r18, 0x0A	; 10
     4dc:	37 ed       	ldi	r19, 0xD7	; 215
     4de:	43 e2       	ldi	r20, 0x23	; 35
     4e0:	5c e3       	ldi	r21, 0x3C	; 60
     4e2:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     4e6:	20 e0       	ldi	r18, 0x00	; 0
     4e8:	30 e8       	ldi	r19, 0x80	; 128
     4ea:	42 e2       	ldi	r20, 0x22	; 34
     4ec:	55 e4       	ldi	r21, 0x45	; 69
     4ee:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     4f2:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     4f6:	70 93 8b 00 	sts	0x008B, r23
     4fa:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
     4fe:	80 ef       	ldi	r24, 0xF0	; 240
     500:	9a e0       	ldi	r25, 0x0A	; 10
     502:	90 93 8d 00 	sts	0x008D, r25
     506:	80 93 8c 00 	sts	0x008C, r24
	}
	
	clear(PORTB,3);
     50a:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     50c:	5b 98       	cbi	0x0b, 3	; 11
     50e:	08 95       	ret

00000510 <move_robot_after_get_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_after_get_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
     510:	01 97       	sbiw	r24, 0x01	; 1
     512:	09 f5       	brne	.+66     	; 0x556 <move_robot_after_get_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT);
     514:	88 eb       	ldi	r24, 0xB8	; 184
     516:	9b e0       	ldi	r25, 0x0B	; 11
     518:	90 93 8b 00 	sts	0x008B, r25
     51c:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT+diff*Kp_move_with_puck);
     520:	88 27       	eor	r24, r24
     522:	77 fd       	sbrc	r23, 7
     524:	80 95       	com	r24
     526:	98 2f       	mov	r25, r24
     528:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     52c:	2a e0       	ldi	r18, 0x0A	; 10
     52e:	37 ed       	ldi	r19, 0xD7	; 215
     530:	43 e2       	ldi	r20, 0x23	; 35
     532:	5c e3       	ldi	r21, 0x3C	; 60
     534:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     538:	20 e0       	ldi	r18, 0x00	; 0
     53a:	30 e4       	ldi	r19, 0x40	; 64
     53c:	4e e4       	ldi	r20, 0x4E	; 78
     53e:	55 e4       	ldi	r21, 0x45	; 69
     540:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     544:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     548:	70 93 8d 00 	sts	0x008D, r23
     54c:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
     550:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
     552:	5b 98       	cbi	0x0b, 3	; 11
     554:	08 95       	ret
	}
	else
	{                      // Move with a right curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT+diff*Kp_move_with_puck);
     556:	88 27       	eor	r24, r24
     558:	77 fd       	sbrc	r23, 7
     55a:	80 95       	com	r24
     55c:	98 2f       	mov	r25, r24
     55e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     562:	2a e0       	ldi	r18, 0x0A	; 10
     564:	37 ed       	ldi	r19, 0xD7	; 215
     566:	43 e2       	ldi	r20, 0x23	; 35
     568:	5c e3       	ldi	r21, 0x3C	; 60
     56a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	30 e8       	ldi	r19, 0x80	; 128
     572:	4b e3       	ldi	r20, 0x3B	; 59
     574:	55 e4       	ldi	r21, 0x45	; 69
     576:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     57a:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     57e:	70 93 8b 00 	sts	0x008B, r23
     582:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT);
     586:	84 ee       	ldi	r24, 0xE4	; 228
     588:	9c e0       	ldi	r25, 0x0C	; 12
     58a:	90 93 8d 00 	sts	0x008D, r25
     58e:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
     592:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
     594:	5b 98       	cbi	0x0b, 3	; 11
     596:	08 95       	ret

00000598 <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
     598:	10 92 8b 00 	sts	0x008B, r1
     59c:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
     5a0:	10 92 8d 00 	sts	0x008D, r1
     5a4:	10 92 8c 00 	sts	0x008C, r1
     5a8:	08 95       	ret

000005aa <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
     5aa:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
     5ac:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
     5ae:	88 e9       	ldi	r24, 0x98	; 152
     5b0:	98 e0       	ldi	r25, 0x08	; 8
     5b2:	90 93 8d 00 	sts	0x008D, r25
     5b6:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
     5ba:	8c ef       	ldi	r24, 0xFC	; 252
     5bc:	98 e0       	ldi	r25, 0x08	; 8
     5be:	90 93 8b 00 	sts	0x008B, r25
     5c2:	80 93 8a 00 	sts	0x008A, r24
     5c6:	08 95       	ret

000005c8 <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
     5c8:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
     5ca:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
     5cc:	88 e9       	ldi	r24, 0x98	; 152
     5ce:	98 e0       	ldi	r25, 0x08	; 8
     5d0:	90 93 8d 00 	sts	0x008D, r25
     5d4:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
     5d8:	8c ef       	ldi	r24, 0xFC	; 252
     5da:	98 e0       	ldi	r25, 0x08	; 8
     5dc:	90 93 8b 00 	sts	0x008B, r25
     5e0:	80 93 8a 00 	sts	0x008A, r24
     5e4:	08 95       	ret

000005e6 <circle_left>:
// --------------------------------------------------------------
// CIRCLE_LEFT
// --------------------------------------------------------------
void circle_left()
{
	clear(PORTB,3);
     5e6:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     5e8:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
     5ea:	88 e9       	ldi	r24, 0x98	; 152
     5ec:	98 e0       	ldi	r25, 0x08	; 8
     5ee:	90 93 8b 00 	sts	0x008B, r25
     5f2:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
     5f6:	82 e2       	ldi	r24, 0x22	; 34
     5f8:	97 e0       	ldi	r25, 0x07	; 7
     5fa:	90 93 8d 00 	sts	0x008D, r25
     5fe:	80 93 8c 00 	sts	0x008C, r24
     602:	08 95       	ret

00000604 <circle_right>:
// --------------------------------------------------------------
// CIRCLE_RIGHT
// --------------------------------------------------------------
void circle_right()
{
	clear(PORTB,3);
     604:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     606:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
     608:	88 ec       	ldi	r24, 0xC8	; 200
     60a:	97 e0       	ldi	r25, 0x07	; 7
     60c:	90 93 8b 00 	sts	0x008B, r25
     610:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
     614:	80 e6       	ldi	r24, 0x60	; 96
     616:	99 e0       	ldi	r25, 0x09	; 9
     618:	90 93 8d 00 	sts	0x008D, r25
     61c:	80 93 8c 00 	sts	0x008C, r24
     620:	08 95       	ret

00000622 <main>:
int state = INITIAL_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
{
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	cc 56       	subi	r28, 0x6C	; 108
     62c:	d1 09       	sbc	r29, r1
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
     638:	20 e8       	ldi	r18, 0x80	; 128
     63a:	25 bf       	out	0x35, r18	; 53
     63c:	25 bf       	out	0x35, r18	; 53
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
     63e:	19 82       	std	Y+1, r1	; 0x01
     640:	1a 82       	std	Y+2, r1	; 0x02
     642:	1b 82       	std	Y+3, r1	; 0x03
     644:	1c 82       	std	Y+4, r1	; 0x04
    int bank = 22;
     646:	86 e1       	ldi	r24, 0x16	; 22
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	9e 83       	std	Y+6, r25	; 0x06
     64c:	8d 83       	std	Y+5, r24	; 0x05
	int cam_X = 0, cam_Y = 0, commands_var = 0;
     64e:	18 86       	std	Y+8, r1	; 0x08
     650:	1f 82       	std	Y+7, r1	; 0x07
     652:	1a 86       	std	Y+10, r1	; 0x0a
     654:	19 86       	std	Y+9, r1	; 0x09
	
	int circle_started_before = 0;
    
	
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
     656:	fe 01       	movw	r30, r28
     658:	3b 96       	adiw	r30, 0x0b	; 11
     65a:	80 e2       	ldi	r24, 0x20	; 32
     65c:	df 01       	movw	r26, r30
     65e:	1d 92       	st	X+, r1
     660:	8a 95       	dec	r24
     662:	e9 f7       	brne	.-6      	; 0x65e <main+0x3c>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
     664:	25 96       	adiw	r28, 0x05	; 5
     666:	1f ae       	std	Y+63, r1	; 0x3f
     668:	1e ae       	std	Y+62, r1	; 0x3e
     66a:	25 97       	sbiw	r28, 0x05	; 5
     66c:	27 96       	adiw	r28, 0x07	; 7
     66e:	1f ae       	std	Y+63, r1	; 0x3f
     670:	1e ae       	std	Y+62, r1	; 0x3e
     672:	27 97       	sbiw	r28, 0x07	; 7
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
     674:	e1 e6       	ldi	r30, 0x61	; 97
     676:	f0 e0       	ldi	r31, 0x00	; 0
     678:	20 83       	st	Z, r18
     67a:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
     67c:	6a 9a       	sbi	0x0d, 2	; 13
     67e:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
     680:	6e 9a       	sbi	0x0d, 6	; 13
     682:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
     684:	6e 9a       	sbi	0x0d, 6	; 13
     686:	76 98       	cbi	0x0e, 6	; 14
    
    m_bus_init();                       // Initialize bus
     688:	0e 94 4d 0b 	call	0x169a	; 0x169a <m_bus_init>
    init_ports();                       // Initialize ports
     68c:	0e 94 08 0a 	call	0x1410	; 0x1410 <init_ports>
    set_timer1();                       // Set timer 1 for motor
     690:	0e 94 15 0b 	call	0x162a	; 0x162a <set_timer1>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
     694:	0e 94 c3 0a 	call	0x1586	; 0x1586 <set_timer4>
    init_analog();                      // Set the ADC System
     698:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
     69c:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
     6a0:	88 23       	and	r24, r24
     6a2:	e1 f3       	breq	.-8      	; 0x69c <main+0x7a>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
	m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
     6a4:	40 e2       	ldi	r20, 0x20	; 32
     6a6:	65 ef       	ldi	r22, 0xF5	; 245
     6a8:	81 e0       	ldi	r24, 0x01	; 1
     6aa:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <m_rf_open>
    
    sei();                              // Enable interruptions
     6ae:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
     6b0:	6e 9a       	sbi	0x0d, 6	; 13
     6b2:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
     6b4:	10 92 1a 01 	sts	0x011A, r1
     6b8:	10 92 1b 01 	sts	0x011B, r1
     6bc:	10 92 1c 01 	sts	0x011C, r1
     6c0:	10 92 1d 01 	sts	0x011D, r1
    TARGETS_Y[0] = 0;
     6c4:	10 92 12 01 	sts	0x0112, r1
     6c8:	10 92 13 01 	sts	0x0113, r1
     6cc:	10 92 14 01 	sts	0x0114, r1
     6d0:	10 92 15 01 	sts	0x0115, r1
    TARGETS_X[1] = 0;
     6d4:	10 92 1e 01 	sts	0x011E, r1
     6d8:	10 92 1f 01 	sts	0x011F, r1
     6dc:	10 92 20 01 	sts	0x0120, r1
     6e0:	10 92 21 01 	sts	0x0121, r1
    TARGETS_Y[1] = 0;
     6e4:	10 92 16 01 	sts	0x0116, r1
     6e8:	10 92 17 01 	sts	0x0117, r1
     6ec:	10 92 18 01 	sts	0x0118, r1
     6f0:	10 92 19 01 	sts	0x0119, r1
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
     6f4:	a1 96       	adiw	r28, 0x21	; 33
     6f6:	1c ae       	std	Y+60, r1	; 0x3c
     6f8:	1d ae       	std	Y+61, r1	; 0x3d
     6fa:	1e ae       	std	Y+62, r1	; 0x3e
     6fc:	1f ae       	std	Y+63, r1	; 0x3f
     6fe:	a1 97       	sbiw	r28, 0x21	; 33
	int have_puck = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
     700:	a6 96       	adiw	r28, 0x26	; 38
     702:	1f ae       	std	Y+63, r1	; 0x3f
     704:	a6 97       	sbiw	r28, 0x26	; 38
     706:	a7 96       	adiw	r28, 0x27	; 39
     708:	1f ae       	std	Y+63, r1	; 0x3f
     70a:	a7 97       	sbiw	r28, 0x27	; 39
     70c:	a8 96       	adiw	r28, 0x28	; 40
     70e:	1f ae       	std	Y+63, r1	; 0x3f
     710:	a8 97       	sbiw	r28, 0x28	; 40
     712:	a9 96       	adiw	r28, 0x29	; 41
     714:	1f ae       	std	Y+63, r1	; 0x3f
     716:	a9 97       	sbiw	r28, 0x29	; 41
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
     718:	6d 96       	adiw	r28, 0x1d	; 29
     71a:	1f ae       	std	Y+63, r1	; 0x3f
     71c:	1e ae       	std	Y+62, r1	; 0x3e
     71e:	6d 97       	sbiw	r28, 0x1d	; 29
     720:	2f 96       	adiw	r28, 0x0f	; 15
     722:	1f ae       	std	Y+63, r1	; 0x3f
     724:	1e ae       	std	Y+62, r1	; 0x3e
     726:	2f 97       	sbiw	r28, 0x0f	; 15
     728:	61 96       	adiw	r28, 0x11	; 17
     72a:	1f ae       	std	Y+63, r1	; 0x3f
     72c:	1e ae       	std	Y+62, r1	; 0x3e
     72e:	61 97       	sbiw	r28, 0x11	; 17
     730:	63 96       	adiw	r28, 0x13	; 19
     732:	1f ae       	std	Y+63, r1	; 0x3f
     734:	1e ae       	std	Y+62, r1	; 0x3e
     736:	63 97       	sbiw	r28, 0x13	; 19
     738:	65 96       	adiw	r28, 0x15	; 21
     73a:	1f ae       	std	Y+63, r1	; 0x3f
     73c:	1e ae       	std	Y+62, r1	; 0x3e
     73e:	65 97       	sbiw	r28, 0x15	; 21
     740:	67 96       	adiw	r28, 0x17	; 23
     742:	1f ae       	std	Y+63, r1	; 0x3f
     744:	1e ae       	std	Y+62, r1	; 0x3e
     746:	67 97       	sbiw	r28, 0x17	; 23
     748:	41 2c       	mov	r4, r1
     74a:	51 2c       	mov	r5, r1
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
     74c:	a5 96       	adiw	r28, 0x25	; 37
     74e:	1f ae       	std	Y+63, r1	; 0x3f
     750:	1e ae       	std	Y+62, r1	; 0x3e
     752:	a5 97       	sbiw	r28, 0x25	; 37
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
     754:	6b 96       	adiw	r28, 0x1b	; 27
     756:	1f ae       	std	Y+63, r1	; 0x3f
     758:	1e ae       	std	Y+62, r1	; 0x3e
     75a:	6b 97       	sbiw	r28, 0x1b	; 27
		{
			turnOnBlueLED();
             	output_buffer[0] = 1;
				output_buffer[1] = state;
				output_buffer[2] = x_robot;
				output_buffer[3] = y_robot;
     75c:	fe 01       	movw	r30, r28
     75e:	eb 5b       	subi	r30, 0xBB	; 187
     760:	ff 4f       	sbci	r31, 0xFF	; 255
     762:	29 96       	adiw	r28, 0x09	; 9
     764:	ff af       	std	Y+63, r31	; 0x3f
     766:	ee af       	std	Y+62, r30	; 0x3e
     768:	29 97       	sbiw	r28, 0x09	; 9
            
        // If data received correctly
        if (wii_OK)
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
     76a:	9e 01       	movw	r18, r28
     76c:	27 5f       	subi	r18, 0xF7	; 247
     76e:	3f 4f       	sbci	r19, 0xFF	; 255
     770:	2b 96       	adiw	r28, 0x0b	; 11
     772:	3f af       	std	Y+63, r19	; 0x3f
     774:	2e af       	std	Y+62, r18	; 0x3e
     776:	2b 97       	sbiw	r28, 0x0b	; 11
     778:	ae 01       	movw	r20, r28
     77a:	49 5f       	subi	r20, 0xF9	; 249
     77c:	5f 4f       	sbci	r21, 0xFF	; 255
     77e:	2d 96       	adiw	r28, 0x0d	; 13
     780:	5f af       	std	Y+63, r21	; 0x3f
     782:	4e af       	std	Y+62, r20	; 0x3e
     784:	2d 97       	sbiw	r28, 0x0d	; 13
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
     786:	0f 2e       	mov	r0, r31
     788:	fa e7       	ldi	r31, 0x7A	; 122
     78a:	6f 2e       	mov	r6, r31
     78c:	71 2c       	mov	r7, r1
     78e:	f0 2d       	mov	r31, r0
                    break;
                case(2):
                    PT3_right_inside = ADC;
                    break;
                case(3):
					PT4_right_outside = ADC;
     790:	0f 2e       	mov	r0, r31
     792:	f8 e7       	ldi	r31, 0x78	; 120
     794:	2f 2e       	mov	r2, r31
     796:	31 2c       	mov	r3, r1
     798:	f0 2d       	mov	r31, r0
     79a:	27 c0       	rjmp	.+78     	; 0x7ea <main+0x1c8>
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
     79c:	82 e0       	ldi	r24, 0x02	; 2
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	6b 96       	adiw	r28, 0x1b	; 27
     7a2:	9f af       	std	Y+63, r25	; 0x3f
     7a4:	8e af       	std	Y+62, r24	; 0x3e
     7a6:	6b 97       	sbiw	r28, 0x1b	; 27
     7a8:	20 c0       	rjmp	.+64     	; 0x7ea <main+0x1c8>
					}
					
					
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
						status_go_to_goal = 1;
     7aa:	a1 e0       	ldi	r26, 0x01	; 1
     7ac:	b0 e0       	ldi	r27, 0x00	; 0
     7ae:	6b 96       	adiw	r28, 0x1b	; 27
     7b0:	bf af       	std	Y+63, r27	; 0x3f
     7b2:	ae af       	std	Y+62, r26	; 0x3e
     7b4:	6b 97       	sbiw	r28, 0x1b	; 27
     7b6:	19 c0       	rjmp	.+50     	; 0x7ea <main+0x1c8>
				else if (status_go_to_goal == 1)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
     7b8:	e2 e0       	ldi	r30, 0x02	; 2
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	6b 96       	adiw	r28, 0x1b	; 27
     7be:	ff af       	std	Y+63, r31	; 0x3f
     7c0:	ee af       	std	Y+62, r30	; 0x3e
     7c2:	6b 97       	sbiw	r28, 0x1b	; 27
     7c4:	12 c0       	rjmp	.+36     	; 0x7ea <main+0x1c8>
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 0;
     7c6:	6b 96       	adiw	r28, 0x1b	; 27
     7c8:	1f ae       	std	Y+63, r1	; 0x3f
     7ca:	1e ae       	std	Y+62, r1	; 0x3e
     7cc:	6b 97       	sbiw	r28, 0x1b	; 27
     7ce:	0d c0       	rjmp	.+26     	; 0x7ea <main+0x1c8>
					calculate_diff_theta(0,&diff_theta, &bank);
				
				
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 3;
     7d0:	23 e0       	ldi	r18, 0x03	; 3
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	6b 96       	adiw	r28, 0x1b	; 27
     7d6:	3f af       	std	Y+63, r19	; 0x3f
     7d8:	2e af       	std	Y+62, r18	; 0x3e
     7da:	6b 97       	sbiw	r28, 0x1b	; 27
     7dc:	06 c0       	rjmp	.+12     	; 0x7ea <main+0x1c8>
		                 
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
						
						if (diff_theta <20)
						{
							status_go_to_goal = 1;
     7de:	41 e0       	ldi	r20, 0x01	; 1
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	6b 96       	adiw	r28, 0x1b	; 27
     7e4:	5f af       	std	Y+63, r21	; 0x3f
     7e6:	4e af       	std	Y+62, r20	; 0x3e
     7e8:	6b 97       	sbiw	r28, 0x1b	; 27
    {
	
		 //--------------------------------------------------------------
         //SEND COMMANDS
         //--------------------------------------------------------------
        if (flag_timer == 1)
     7ea:	80 91 0e 01 	lds	r24, 0x010E
     7ee:	90 91 0f 01 	lds	r25, 0x010F
     7f2:	01 97       	sbiw	r24, 0x01	; 1
     7f4:	09 f0       	breq	.+2      	; 0x7f8 <main+0x1d6>
     7f6:	ba c0       	rjmp	.+372    	; 0x96c <main+0x34a>
		{
			turnOnBlueLED();
     7f8:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOnBlueLED>
             	output_buffer[0] = 1;
     7fc:	81 e0       	ldi	r24, 0x01	; 1
     7fe:	8b 87       	std	Y+11, r24	; 0x0b
				output_buffer[1] = state;
     800:	80 91 0c 01 	lds	r24, 0x010C
     804:	8c 87       	std	Y+12, r24	; 0x0c
				output_buffer[2] = x_robot;
     806:	24 96       	adiw	r28, 0x04	; 4
     808:	8f ad       	ldd	r24, Y+63	; 0x3f
     80a:	24 97       	sbiw	r28, 0x04	; 4
     80c:	8d 87       	std	Y+13, r24	; 0x0d
				output_buffer[3] = y_robot;
     80e:	26 96       	adiw	r28, 0x06	; 6
     810:	8f ad       	ldd	r24, Y+63	; 0x3f
     812:	26 97       	sbiw	r28, 0x06	; 6
     814:	8e 87       	std	Y+14, r24	; 0x0e
                
				aux_conversion = div(theta_robot,128);
     816:	60 e8       	ldi	r22, 0x80	; 128
     818:	70 e0       	ldi	r23, 0x00	; 0
     81a:	80 91 10 01 	lds	r24, 0x0110
     81e:	90 91 11 01 	lds	r25, 0x0111
     822:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[4] = (signed char)aux_conversion.quot;
     826:	6f 87       	std	Y+15, r22	; 0x0f
				output_buffer[5] = (signed char)aux_conversion.rem;
     828:	88 8b       	std	Y+16, r24	; 0x10
                
				output_buffer[6] = (signed char)status_go_to_goal;
     82a:	6a 96       	adiw	r28, 0x1a	; 26
     82c:	5f ad       	ldd	r21, Y+63	; 0x3f
     82e:	6a 97       	sbiw	r28, 0x1a	; 26
     830:	59 8b       	std	Y+17, r21	; 0x11
                
				aux_conversion = div((int)dir_angle,128);
     832:	a6 96       	adiw	r28, 0x26	; 38
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	a6 97       	sbiw	r28, 0x26	; 38
     838:	a7 96       	adiw	r28, 0x27	; 39
     83a:	4f ad       	ldd	r20, Y+63	; 0x3f
     83c:	a7 97       	sbiw	r28, 0x27	; 39
     83e:	a8 96       	adiw	r28, 0x28	; 40
     840:	3f ad       	ldd	r19, Y+63	; 0x3f
     842:	a8 97       	sbiw	r28, 0x28	; 40
     844:	a9 96       	adiw	r28, 0x29	; 41
     846:	2f ad       	ldd	r18, Y+63	; 0x3f
     848:	a9 97       	sbiw	r28, 0x29	; 41
     84a:	65 2f       	mov	r22, r21
     84c:	74 2f       	mov	r23, r20
     84e:	83 2f       	mov	r24, r19
     850:	92 2f       	mov	r25, r18
     852:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	60 e8       	ldi	r22, 0x80	; 128
     85c:	70 e0       	ldi	r23, 0x00	; 0
     85e:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[7] = (signed char)aux_conversion.quot;
     862:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[8] = (signed char)aux_conversion.rem;
     864:	8b 8b       	std	Y+19, r24	; 0x13
                
				aux_conversion = div((int)dist_goal,128);
     866:	a1 96       	adiw	r28, 0x21	; 33
     868:	6c ad       	ldd	r22, Y+60	; 0x3c
     86a:	7d ad       	ldd	r23, Y+61	; 0x3d
     86c:	8e ad       	ldd	r24, Y+62	; 0x3e
     86e:	9f ad       	ldd	r25, Y+63	; 0x3f
     870:	a1 97       	sbiw	r28, 0x21	; 33
     872:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     876:	dc 01       	movw	r26, r24
     878:	cb 01       	movw	r24, r22
     87a:	60 e8       	ldi	r22, 0x80	; 128
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[9] = (signed char)aux_conversion.quot;
     882:	6c 8b       	std	Y+20, r22	; 0x14
				output_buffer[10] = (signed char)aux_conversion.rem;
     884:	8d 8b       	std	Y+21, r24	; 0x15
                
				aux_conversion = div(cam_X,128);
     886:	60 e8       	ldi	r22, 0x80	; 128
     888:	70 e0       	ldi	r23, 0x00	; 0
     88a:	8f 81       	ldd	r24, Y+7	; 0x07
     88c:	98 85       	ldd	r25, Y+8	; 0x08
     88e:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[11] = (signed char)aux_conversion.quot;
     892:	6e 8b       	std	Y+22, r22	; 0x16
				output_buffer[12] = (signed char)aux_conversion.rem;
     894:	8f 8b       	std	Y+23, r24	; 0x17
                
				aux_conversion = div(cam_Y,128);
     896:	60 e8       	ldi	r22, 0x80	; 128
     898:	70 e0       	ldi	r23, 0x00	; 0
     89a:	89 85       	ldd	r24, Y+9	; 0x09
     89c:	9a 85       	ldd	r25, Y+10	; 0x0a
     89e:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[13] = (signed char)aux_conversion.quot;
     8a2:	68 8f       	std	Y+24, r22	; 0x18
				output_buffer[14] = (signed char)aux_conversion.rem;
     8a4:	89 8f       	std	Y+25, r24	; 0x19
                
				//output_buffer[15] = (signed char)commands_var;
				output_buffer[15] = (signed char)bank;
     8a6:	8d 81       	ldd	r24, Y+5	; 0x05
     8a8:	8a 8f       	std	Y+26, r24	; 0x1a
                
				aux_conversion = div((int)diff_theta,128);
     8aa:	69 81       	ldd	r22, Y+1	; 0x01
     8ac:	7a 81       	ldd	r23, Y+2	; 0x02
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     8b6:	dc 01       	movw	r26, r24
     8b8:	cb 01       	movw	r24, r22
     8ba:	60 e8       	ldi	r22, 0x80	; 128
     8bc:	70 e0       	ldi	r23, 0x00	; 0
     8be:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[16] = (signed char)aux_conversion.quot;
     8c2:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[17] = (signed char)aux_conversion.rem;
     8c4:	8c 8f       	std	Y+28, r24	; 0x1c
                
				aux_conversion = div(PT1_left_outside,128);
     8c6:	60 e8       	ldi	r22, 0x80	; 128
     8c8:	70 e0       	ldi	r23, 0x00	; 0
     8ca:	c2 01       	movw	r24, r4
     8cc:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[18] = (signed char)aux_conversion.quot;
     8d0:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[19] = (signed char)aux_conversion.rem;
     8d2:	8e 8f       	std	Y+30, r24	; 0x1e
                
				aux_conversion = div(PT2_left_inside,128);
     8d4:	60 e8       	ldi	r22, 0x80	; 128
     8d6:	70 e0       	ldi	r23, 0x00	; 0
     8d8:	67 96       	adiw	r28, 0x17	; 23
     8da:	8e ad       	ldd	r24, Y+62	; 0x3e
     8dc:	9f ad       	ldd	r25, Y+63	; 0x3f
     8de:	67 97       	sbiw	r28, 0x17	; 23
     8e0:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[20] = (signed char)aux_conversion.quot;
     8e4:	6f 8f       	std	Y+31, r22	; 0x1f
				output_buffer[21] = (signed char)aux_conversion.rem;
     8e6:	88 a3       	std	Y+32, r24	; 0x20
                
				aux_conversion = div(PT3_right_inside,128);
     8e8:	60 e8       	ldi	r22, 0x80	; 128
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	65 96       	adiw	r28, 0x15	; 21
     8ee:	8e ad       	ldd	r24, Y+62	; 0x3e
     8f0:	9f ad       	ldd	r25, Y+63	; 0x3f
     8f2:	65 97       	sbiw	r28, 0x15	; 21
     8f4:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[22] = (signed char)aux_conversion.quot;
     8f8:	69 a3       	std	Y+33, r22	; 0x21
				output_buffer[23] = (signed char)aux_conversion.rem;
     8fa:	8a a3       	std	Y+34, r24	; 0x22
                
				aux_conversion = div(PT4_right_outside,128);
     8fc:	60 e8       	ldi	r22, 0x80	; 128
     8fe:	70 e0       	ldi	r23, 0x00	; 0
     900:	63 96       	adiw	r28, 0x13	; 19
     902:	8e ad       	ldd	r24, Y+62	; 0x3e
     904:	9f ad       	ldd	r25, Y+63	; 0x3f
     906:	63 97       	sbiw	r28, 0x13	; 19
     908:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[24] = (signed char)aux_conversion.quot;
     90c:	6b a3       	std	Y+35, r22	; 0x23
				output_buffer[25] = (signed char)aux_conversion.rem;
     90e:	8c a3       	std	Y+36, r24	; 0x24
                
				aux_conversion = div(PT5_back_right,128);
     910:	60 e8       	ldi	r22, 0x80	; 128
     912:	70 e0       	ldi	r23, 0x00	; 0
     914:	61 96       	adiw	r28, 0x11	; 17
     916:	8e ad       	ldd	r24, Y+62	; 0x3e
     918:	9f ad       	ldd	r25, Y+63	; 0x3f
     91a:	61 97       	sbiw	r28, 0x11	; 17
     91c:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[26] = (signed char)aux_conversion.quot;
     920:	6d a3       	std	Y+37, r22	; 0x25
				output_buffer[27] = (signed char)aux_conversion.rem;
     922:	8e a3       	std	Y+38, r24	; 0x26
                
				aux_conversion = div(PT6_back_left,128);
     924:	60 e8       	ldi	r22, 0x80	; 128
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	2f 96       	adiw	r28, 0x0f	; 15
     92a:	8e ad       	ldd	r24, Y+62	; 0x3e
     92c:	9f ad       	ldd	r25, Y+63	; 0x3f
     92e:	2f 97       	sbiw	r28, 0x0f	; 15
     930:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[28] = (signed char)aux_conversion.quot;
     934:	6f a3       	std	Y+39, r22	; 0x27
				output_buffer[29] = (signed char)aux_conversion.rem;
     936:	88 a7       	std	Y+40, r24	; 0x28
                
				aux_conversion = div(PT7_have_puck,128);
     938:	60 e8       	ldi	r22, 0x80	; 128
     93a:	70 e0       	ldi	r23, 0x00	; 0
     93c:	6d 96       	adiw	r28, 0x1d	; 29
     93e:	8e ad       	ldd	r24, Y+62	; 0x3e
     940:	9f ad       	ldd	r25, Y+63	; 0x3f
     942:	6d 97       	sbiw	r28, 0x1d	; 29
     944:	0e 94 4f 1b 	call	0x369e	; 0x369e <__divmodhi4>
				output_buffer[30] = (signed char)aux_conversion.quot;
     948:	69 a7       	std	Y+41, r22	; 0x29
				output_buffer[31] = (signed char)aux_conversion.rem;
     94a:	8a a7       	std	Y+42, r24	; 0x2a
                
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
     94c:	40 e2       	ldi	r20, 0x20	; 32
     94e:	be 01       	movw	r22, r28
     950:	65 5f       	subi	r22, 0xF5	; 245
     952:	7f 4f       	sbci	r23, 0xFF	; 255
     954:	80 e6       	ldi	r24, 0x60	; 96
     956:	0e 94 b4 0b 	call	0x1768	; 0x1768 <m_rf_send>
				m_red(TOGGLE);
     95a:	6e 9a       	sbi	0x0d, 6	; 13
     95c:	9e b1       	in	r25, 0x0e	; 14
     95e:	80 e4       	ldi	r24, 0x40	; 64
     960:	89 27       	eor	r24, r25
     962:	8e b9       	out	0x0e, r24	; 14
               
			flag_timer = 0;        
     964:	10 92 0f 01 	sts	0x010F, r1
     968:	10 92 0e 01 	sts	0x010E, r1
        
           
        // --------------------------------------------------------------
        // LOCALIZATION CODE
        // --------------------------------------------------------------
        cli();                                          // Clear Interupts to not interfere with the mWii
     96c:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
     96e:	ce 01       	movw	r24, r28
     970:	8b 96       	adiw	r24, 0x2b	; 43
     972:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <m_wii_read>
        sei();                                          // Enable back the interupts
     976:	78 94       	sei
            
        // If data received correctly
        if (wii_OK)
     978:	88 23       	and	r24, r24
     97a:	09 f4       	brne	.+2      	; 0x97e <main+0x35c>
     97c:	28 c5       	rjmp	.+2640   	; 0x13ce <__stack+0x8cf>
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
     97e:	21 96       	adiw	r28, 0x01	; 1
     980:	ae ac       	ldd	r10, Y+62	; 0x3e
     982:	bf ac       	ldd	r11, Y+63	; 0x3f
     984:	21 97       	sbiw	r28, 0x01	; 1
     986:	c9 ac       	ldd	r12, Y+57	; 0x39
     988:	da ac       	ldd	r13, Y+58	; 0x3a
     98a:	eb a8       	ldd	r14, Y+51	; 0x33
     98c:	fc a8       	ldd	r15, Y+52	; 0x34
     98e:	0d a5       	ldd	r16, Y+45	; 0x2d
     990:	1e a5       	ldd	r17, Y+46	; 0x2e
     992:	2d ad       	ldd	r18, Y+61	; 0x3d
     994:	3e ad       	ldd	r19, Y+62	; 0x3e
     996:	4f a9       	ldd	r20, Y+55	; 0x37
     998:	58 ad       	ldd	r21, Y+56	; 0x38
     99a:	69 a9       	ldd	r22, Y+49	; 0x31
     99c:	7a a9       	ldd	r23, Y+50	; 0x32
     99e:	2b 96       	adiw	r28, 0x0b	; 11
     9a0:	8f ad       	ldd	r24, Y+63	; 0x3f
     9a2:	2b 97       	sbiw	r28, 0x0b	; 11
     9a4:	8f 93       	push	r24
     9a6:	2a 96       	adiw	r28, 0x0a	; 10
     9a8:	9f ad       	ldd	r25, Y+63	; 0x3f
     9aa:	2a 97       	sbiw	r28, 0x0a	; 10
     9ac:	9f 93       	push	r25
     9ae:	2d 96       	adiw	r28, 0x0d	; 13
     9b0:	af ad       	ldd	r26, Y+63	; 0x3f
     9b2:	2d 97       	sbiw	r28, 0x0d	; 13
     9b4:	af 93       	push	r26
     9b6:	2c 96       	adiw	r28, 0x0c	; 12
     9b8:	bf ad       	ldd	r27, Y+63	; 0x3f
     9ba:	2c 97       	sbiw	r28, 0x0c	; 12
     9bc:	bf 93       	push	r27
     9be:	80 e1       	ldi	r24, 0x10	; 16
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	9f 93       	push	r25
     9c4:	8f 93       	push	r24
     9c6:	29 96       	adiw	r28, 0x09	; 9
     9c8:	ef ad       	ldd	r30, Y+63	; 0x3f
     9ca:	29 97       	sbiw	r28, 0x09	; 9
     9cc:	ef 93       	push	r30
     9ce:	28 96       	adiw	r28, 0x08	; 8
     9d0:	ff ad       	ldd	r31, Y+63	; 0x3f
     9d2:	28 97       	sbiw	r28, 0x08	; 8
     9d4:	ff 93       	push	r31
     9d6:	0f 2e       	mov	r0, r31
     9d8:	f3 e4       	ldi	r31, 0x43	; 67
     9da:	8f 2e       	mov	r8, r31
     9dc:	91 2c       	mov	r9, r1
     9de:	f0 2d       	mov	r31, r0
     9e0:	8c 0e       	add	r8, r28
     9e2:	9d 1e       	adc	r9, r29
     9e4:	8b a5       	ldd	r24, Y+43	; 0x2b
     9e6:	9c a5       	ldd	r25, Y+44	; 0x2c
     9e8:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <localize>
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	de bf       	out	0x3e, r29	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	cd bf       	out	0x3d, r28	; 61
     9f6:	eb c4       	rjmp	.+2518   	; 0x13ce <__stack+0x8cf>
     9f8:	3f ef       	ldi	r19, 0xFF	; 255
     9fa:	e3 1a       	sub	r14, r19
     9fc:	f3 0a       	sbc	r15, r19
//Variable for states
int state = INITIAL_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
     9fe:	87 01       	movw	r16, r14
     a00:	01 50       	subi	r16, 0x01	; 1
     a02:	11 09       	sbc	r17, r1
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
     a04:	c8 01       	movw	r24, r16
     a06:	0e 94 11 0a 	call	0x1422	; 0x1422 <get_analog_val>
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
     a0a:	d3 01       	movw	r26, r6
     a0c:	8c 91       	ld	r24, X
     a0e:	84 ff       	sbrs	r24, 4
     a10:	fc cf       	rjmp	.-8      	; 0xa0a <main+0x3e8>
            switch(i)
     a12:	03 30       	cpi	r16, 0x03	; 3
     a14:	11 05       	cpc	r17, r1
     a16:	39 f1       	breq	.+78     	; 0xa66 <main+0x444>
     a18:	3c f4       	brge	.+14     	; 0xa28 <main+0x406>
     a1a:	01 30       	cpi	r16, 0x01	; 1
     a1c:	11 05       	cpc	r17, r1
     a1e:	89 f0       	breq	.+34     	; 0xa42 <main+0x420>
     a20:	cc f4       	brge	.+50     	; 0xa54 <main+0x432>
     a22:	01 2b       	or	r16, r17
     a24:	51 f0       	breq	.+20     	; 0xa3a <main+0x418>
     a26:	60 c0       	rjmp	.+192    	; 0xae8 <main+0x4c6>
     a28:	05 30       	cpi	r16, 0x05	; 5
     a2a:	11 05       	cpc	r17, r1
     a2c:	71 f1       	breq	.+92     	; 0xa8a <main+0x468>
     a2e:	24 f1       	brlt	.+72     	; 0xa78 <main+0x456>
     a30:	06 30       	cpi	r16, 0x06	; 6
     a32:	11 05       	cpc	r17, r1
     a34:	09 f0       	breq	.+2      	; 0xa38 <main+0x416>
     a36:	58 c0       	rjmp	.+176    	; 0xae8 <main+0x4c6>
     a38:	31 c0       	rjmp	.+98     	; 0xa9c <main+0x47a>
            {
                case(0):
                    PT1_left_outside = ADC;
     a3a:	f1 01       	movw	r30, r2
     a3c:	40 80       	ld	r4, Z
     a3e:	51 80       	ldd	r5, Z+1	; 0x01
                    break;
     a40:	ca c4       	rjmp	.+2452   	; 0x13d6 <__stack+0x8d7>
                case(1):
                    PT2_left_inside = ADC;
     a42:	d1 01       	movw	r26, r2
     a44:	0d 90       	ld	r0, X+
     a46:	bc 91       	ld	r27, X
     a48:	a0 2d       	mov	r26, r0
     a4a:	67 96       	adiw	r28, 0x17	; 23
     a4c:	bf af       	std	Y+63, r27	; 0x3f
     a4e:	ae af       	std	Y+62, r26	; 0x3e
     a50:	67 97       	sbiw	r28, 0x17	; 23
                    break;
     a52:	c1 c4       	rjmp	.+2434   	; 0x13d6 <__stack+0x8d7>
                case(2):
                    PT3_right_inside = ADC;
     a54:	f1 01       	movw	r30, r2
     a56:	01 90       	ld	r0, Z+
     a58:	f0 81       	ld	r31, Z
     a5a:	e0 2d       	mov	r30, r0
     a5c:	65 96       	adiw	r28, 0x15	; 21
     a5e:	ff af       	std	Y+63, r31	; 0x3f
     a60:	ee af       	std	Y+62, r30	; 0x3e
     a62:	65 97       	sbiw	r28, 0x15	; 21
                    break;
     a64:	b8 c4       	rjmp	.+2416   	; 0x13d6 <__stack+0x8d7>
                case(3):
					PT4_right_outside = ADC;
     a66:	d1 01       	movw	r26, r2
     a68:	0d 90       	ld	r0, X+
     a6a:	bc 91       	ld	r27, X
     a6c:	a0 2d       	mov	r26, r0
     a6e:	63 96       	adiw	r28, 0x13	; 19
     a70:	bf af       	std	Y+63, r27	; 0x3f
     a72:	ae af       	std	Y+62, r26	; 0x3e
     a74:	63 97       	sbiw	r28, 0x13	; 19
                    break;
     a76:	af c4       	rjmp	.+2398   	; 0x13d6 <__stack+0x8d7>
                case(4):
                    PT5_back_right = ADC;
     a78:	f1 01       	movw	r30, r2
     a7a:	01 90       	ld	r0, Z+
     a7c:	f0 81       	ld	r31, Z
     a7e:	e0 2d       	mov	r30, r0
     a80:	61 96       	adiw	r28, 0x11	; 17
     a82:	ff af       	std	Y+63, r31	; 0x3f
     a84:	ee af       	std	Y+62, r30	; 0x3e
     a86:	61 97       	sbiw	r28, 0x11	; 17
                    break;
     a88:	a6 c4       	rjmp	.+2380   	; 0x13d6 <__stack+0x8d7>
                case(5):
                    PT6_back_left = ADC;
     a8a:	d1 01       	movw	r26, r2
     a8c:	0d 90       	ld	r0, X+
     a8e:	bc 91       	ld	r27, X
     a90:	a0 2d       	mov	r26, r0
     a92:	2f 96       	adiw	r28, 0x0f	; 15
     a94:	bf af       	std	Y+63, r27	; 0x3f
     a96:	ae af       	std	Y+62, r26	; 0x3e
     a98:	2f 97       	sbiw	r28, 0x0f	; 15
                    break;
     a9a:	9d c4       	rjmp	.+2362   	; 0x13d6 <__stack+0x8d7>
                case(6):
                    PT7_have_puck = ADC;
     a9c:	f1 01       	movw	r30, r2
     a9e:	01 90       	ld	r0, Z+
     aa0:	f0 81       	ld	r31, Z
     aa2:	e0 2d       	mov	r30, r0
     aa4:	6d 96       	adiw	r28, 0x1d	; 29
     aa6:	ff af       	std	Y+63, r31	; 0x3f
     aa8:	ee af       	std	Y+62, r30	; 0x3e
     aaa:	6d 97       	sbiw	r28, 0x1d	; 29
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
     aac:	d3 01       	movw	r26, r6
     aae:	8c 91       	ld	r24, X
     ab0:	80 61       	ori	r24, 0x10	; 16
     ab2:	8c 93       	st	X, r24
     ab4:	2f 96       	adiw	r28, 0x0f	; 15
     ab6:	8e ac       	ldd	r8, Y+62	; 0x3e
     ab8:	9f ac       	ldd	r9, Y+63	; 0x3f
     aba:	2f 97       	sbiw	r28, 0x0f	; 15
     abc:	61 96       	adiw	r28, 0x11	; 17
     abe:	ee ad       	ldd	r30, Y+62	; 0x3e
     ac0:	ff ad       	ldd	r31, Y+63	; 0x3f
     ac2:	61 97       	sbiw	r28, 0x11	; 17
     ac4:	69 96       	adiw	r28, 0x19	; 25
     ac6:	ff af       	std	Y+63, r31	; 0x3f
     ac8:	ee af       	std	Y+62, r30	; 0x3e
     aca:	69 97       	sbiw	r28, 0x19	; 25
     acc:	63 96       	adiw	r28, 0x13	; 19
     ace:	ce ac       	ldd	r12, Y+62	; 0x3e
     ad0:	df ac       	ldd	r13, Y+63	; 0x3f
     ad2:	63 97       	sbiw	r28, 0x13	; 19
     ad4:	65 96       	adiw	r28, 0x15	; 21
     ad6:	ae ac       	ldd	r10, Y+62	; 0x3e
     ad8:	bf ac       	ldd	r11, Y+63	; 0x3f
     ada:	65 97       	sbiw	r28, 0x15	; 21
     adc:	67 96       	adiw	r28, 0x17	; 23
     ade:	0e ad       	ldd	r16, Y+62	; 0x3e
     ae0:	1f ad       	ldd	r17, Y+63	; 0x3f
     ae2:	67 97       	sbiw	r28, 0x17	; 23
     ae4:	72 01       	movw	r14, r4
     ae6:	22 c0       	rjmp	.+68     	; 0xb2c <__stack+0x2d>
     ae8:	d3 01       	movw	r26, r6
     aea:	8c 91       	ld	r24, X
     aec:	80 61       	ori	r24, 0x10	; 16
     aee:	8c 93       	st	X, r24
            
        // --------------------------------------------------------------
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
     af0:	b7 e0       	ldi	r27, 0x07	; 7
     af2:	eb 16       	cp	r14, r27
     af4:	f1 04       	cpc	r15, r1
     af6:	0c f4       	brge	.+2      	; 0xafa <main+0x4d8>
     af8:	7f cf       	rjmp	.-258    	; 0x9f8 <main+0x3d6>
     afa:	2f 96       	adiw	r28, 0x0f	; 15
     afc:	8e ac       	ldd	r8, Y+62	; 0x3e
     afe:	9f ac       	ldd	r9, Y+63	; 0x3f
     b00:	2f 97       	sbiw	r28, 0x0f	; 15
     b02:	61 96       	adiw	r28, 0x11	; 17
     b04:	ee ad       	ldd	r30, Y+62	; 0x3e
     b06:	ff ad       	ldd	r31, Y+63	; 0x3f
     b08:	61 97       	sbiw	r28, 0x11	; 17
     b0a:	69 96       	adiw	r28, 0x19	; 25
     b0c:	ff af       	std	Y+63, r31	; 0x3f
     b0e:	ee af       	std	Y+62, r30	; 0x3e
     b10:	69 97       	sbiw	r28, 0x19	; 25
     b12:	63 96       	adiw	r28, 0x13	; 19
     b14:	ce ac       	ldd	r12, Y+62	; 0x3e
     b16:	df ac       	ldd	r13, Y+63	; 0x3f
     b18:	63 97       	sbiw	r28, 0x13	; 19
     b1a:	65 96       	adiw	r28, 0x15	; 21
     b1c:	ae ac       	ldd	r10, Y+62	; 0x3e
     b1e:	bf ac       	ldd	r11, Y+63	; 0x3f
     b20:	65 97       	sbiw	r28, 0x15	; 21
     b22:	67 96       	adiw	r28, 0x17	; 23
     b24:	0e ad       	ldd	r16, Y+62	; 0x3e
     b26:	1f ad       	ldd	r17, Y+63	; 0x3f
     b28:	67 97       	sbiw	r28, 0x17	; 23
     b2a:	72 01       	movw	r14, r4
            
            
        // --------------------------------------------------------------
        // STATE COMMANDS
        // --------------------------------------------------------------
        switch (state)
     b2c:	80 91 0c 01 	lds	r24, 0x010C
     b30:	90 91 0d 01 	lds	r25, 0x010D
     b34:	85 30       	cpi	r24, 0x05	; 5
     b36:	91 05       	cpc	r25, r1
     b38:	09 f4       	brne	.+2      	; 0xb3c <__stack+0x3d>
     b3a:	2e c3       	rjmp	.+1628   	; 0x1198 <__stack+0x699>
     b3c:	3c f4       	brge	.+14     	; 0xb4c <__stack+0x4d>
     b3e:	00 97       	sbiw	r24, 0x00	; 0
     b40:	09 f4       	brne	.+2      	; 0xb44 <__stack+0x45>
     b42:	10 c3       	rjmp	.+1568   	; 0x1164 <__stack+0x665>
     b44:	03 97       	sbiw	r24, 0x03	; 3
     b46:	09 f0       	breq	.+2      	; 0xb4a <__stack+0x4b>
     b48:	3f c4       	rjmp	.+2174   	; 0x13c8 <__stack+0x8c9>
     b4a:	fe c1       	rjmp	.+1020   	; 0xf48 <__stack+0x449>
     b4c:	86 31       	cpi	r24, 0x16	; 22
     b4e:	91 05       	cpc	r25, r1
     b50:	09 f4       	brne	.+2      	; 0xb54 <__stack+0x55>
     b52:	1f c4       	rjmp	.+2110   	; 0x1392 <__stack+0x893>
     b54:	80 35       	cpi	r24, 0x50	; 80
     b56:	91 05       	cpc	r25, r1
     b58:	21 f0       	breq	.+8      	; 0xb62 <__stack+0x63>
     b5a:	45 97       	sbiw	r24, 0x15	; 21
     b5c:	09 f0       	breq	.+2      	; 0xb60 <__stack+0x61>
     b5e:	34 c4       	rjmp	.+2152   	; 0x13c8 <__stack+0x8c9>
     b60:	2e c4       	rjmp	.+2140   	; 0x13be <__stack+0x8bf>
			case GO_TO_WPT:
			
				//m_green(ON);
			
			
				if (PT1_left_outside > NOT_SEE_PUCK || PT2_left_inside > NOT_SEE_PUCK || PT3_right_inside > NOT_SEE_PUCK || PT4_right_outside > NOT_SEE_PUCK || PT5_back_right > NOT_SEE_PUCK || PT6_back_left > NOT_SEE_PUCK) 
     b62:	fd e2       	ldi	r31, 0x2D	; 45
     b64:	ef 16       	cp	r14, r31
     b66:	f1 e0       	ldi	r31, 0x01	; 1
     b68:	ff 06       	cpc	r15, r31
     b6a:	cc f4       	brge	.+50     	; 0xb9e <__stack+0x9f>
     b6c:	0d 32       	cpi	r16, 0x2D	; 45
     b6e:	11 40       	sbci	r17, 0x01	; 1
     b70:	b4 f4       	brge	.+44     	; 0xb9e <__stack+0x9f>
     b72:	3d e2       	ldi	r19, 0x2D	; 45
     b74:	a3 16       	cp	r10, r19
     b76:	31 e0       	ldi	r19, 0x01	; 1
     b78:	b3 06       	cpc	r11, r19
     b7a:	8c f4       	brge	.+34     	; 0xb9e <__stack+0x9f>
     b7c:	4d e2       	ldi	r20, 0x2D	; 45
     b7e:	c4 16       	cp	r12, r20
     b80:	41 e0       	ldi	r20, 0x01	; 1
     b82:	d4 06       	cpc	r13, r20
     b84:	64 f4       	brge	.+24     	; 0xb9e <__stack+0x9f>
     b86:	69 96       	adiw	r28, 0x19	; 25
     b88:	8e ad       	ldd	r24, Y+62	; 0x3e
     b8a:	9f ad       	ldd	r25, Y+63	; 0x3f
     b8c:	69 97       	sbiw	r28, 0x19	; 25
     b8e:	8d 32       	cpi	r24, 0x2D	; 45
     b90:	91 40       	sbci	r25, 0x01	; 1
     b92:	2c f4       	brge	.+10     	; 0xb9e <__stack+0x9f>
     b94:	bd e2       	ldi	r27, 0x2D	; 45
     b96:	8b 16       	cp	r8, r27
     b98:	b1 e0       	ldi	r27, 0x01	; 1
     b9a:	9b 06       	cpc	r9, r27
     b9c:	3c f0       	brlt	.+14     	; 0xbac <__stack+0xad>
				{
					state = FIND_PUCK;
     b9e:	83 e0       	ldi	r24, 0x03	; 3
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	90 93 0d 01 	sts	0x010D, r25
     ba6:	80 93 0c 01 	sts	0x010C, r24
					break;
     baa:	1f ce       	rjmp	.-962    	; 0x7ea <main+0x1c8>
				}
			
				dir_x = TARGETS_X[0]-x_robot;
				dir_y = TARGETS_Y[0]-y_robot;
     bac:	27 96       	adiw	r28, 0x07	; 7
     bae:	6e ad       	ldd	r22, Y+62	; 0x3e
     bb0:	7f ad       	ldd	r23, Y+63	; 0x3f
     bb2:	27 97       	sbiw	r28, 0x07	; 7
     bb4:	88 27       	eor	r24, r24
     bb6:	77 fd       	sbrc	r23, 7
     bb8:	80 95       	com	r24
     bba:	98 2f       	mov	r25, r24
     bbc:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     bc0:	9b 01       	movw	r18, r22
     bc2:	ac 01       	movw	r20, r24
     bc4:	60 91 12 01 	lds	r22, 0x0112
     bc8:	70 91 13 01 	lds	r23, 0x0113
     bcc:	80 91 14 01 	lds	r24, 0x0114
     bd0:	90 91 15 01 	lds	r25, 0x0115
     bd4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     bd8:	6b 01       	movw	r12, r22
     bda:	7c 01       	movw	r14, r24
				{
					state = FIND_PUCK;
					break;
				}
			
				dir_x = TARGETS_X[0]-x_robot;
     bdc:	25 96       	adiw	r28, 0x05	; 5
     bde:	6e ad       	ldd	r22, Y+62	; 0x3e
     be0:	7f ad       	ldd	r23, Y+63	; 0x3f
     be2:	25 97       	sbiw	r28, 0x05	; 5
     be4:	88 27       	eor	r24, r24
     be6:	77 fd       	sbrc	r23, 7
     be8:	80 95       	com	r24
     bea:	98 2f       	mov	r25, r24
     bec:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     bf0:	9b 01       	movw	r18, r22
     bf2:	ac 01       	movw	r20, r24
     bf4:	60 91 1a 01 	lds	r22, 0x011A
     bf8:	70 91 1b 01 	lds	r23, 0x011B
     bfc:	80 91 1c 01 	lds	r24, 0x011C
     c00:	90 91 1d 01 	lds	r25, 0x011D
     c04:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
				dir_y = TARGETS_Y[0]-y_robot;
				dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
     c08:	90 58       	subi	r25, 0x80	; 128
     c0a:	a7 01       	movw	r20, r14
     c0c:	96 01       	movw	r18, r12
     c0e:	0e 94 6d 18 	call	0x30da	; 0x30da <atan2>
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	44 e3       	ldi	r20, 0x34	; 52
     c18:	53 e4       	ldi	r21, 0x43	; 67
     c1a:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     c1e:	2b ed       	ldi	r18, 0xDB	; 219
     c20:	3f e0       	ldi	r19, 0x0F	; 15
     c22:	49 e4       	ldi	r20, 0x49	; 73
     c24:	50 e4       	ldi	r21, 0x40	; 64
     c26:	0e 94 c7 18 	call	0x318e	; 0x318e <__divsf3>
     c2a:	a6 96       	adiw	r28, 0x26	; 38
     c2c:	6f af       	std	Y+63, r22	; 0x3f
     c2e:	a6 97       	sbiw	r28, 0x26	; 38
     c30:	a7 96       	adiw	r28, 0x27	; 39
     c32:	7f af       	std	Y+63, r23	; 0x3f
     c34:	a7 97       	sbiw	r28, 0x27	; 39
     c36:	a8 96       	adiw	r28, 0x28	; 40
     c38:	8f af       	std	Y+63, r24	; 0x3f
     c3a:	a8 97       	sbiw	r28, 0x28	; 40
     c3c:	a9 96       	adiw	r28, 0x29	; 41
     c3e:	9f af       	std	Y+63, r25	; 0x3f
     c40:	a9 97       	sbiw	r28, 0x29	; 41
			
				calculate_diff_theta(dir_angle,&diff_theta, &bank);
     c42:	9e 01       	movw	r18, r28
     c44:	2b 5f       	subi	r18, 0xFB	; 251
     c46:	3f 4f       	sbci	r19, 0xFF	; 255
     c48:	ae 01       	movw	r20, r28
     c4a:	4f 5f       	subi	r20, 0xFF	; 255
     c4c:	5f 4f       	sbci	r21, 0xFF	; 255
     c4e:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
			
			
				cur_error = diff_theta;
     c52:	89 80       	ldd	r8, Y+1	; 0x01
     c54:	9a 80       	ldd	r9, Y+2	; 0x02
     c56:	ab 80       	ldd	r10, Y+3	; 0x03
     c58:	bc 80       	ldd	r11, Y+4	; 0x04
     c5a:	c5 01       	movw	r24, r10
     c5c:	b4 01       	movw	r22, r8
     c5e:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     c62:	8b 01       	movw	r16, r22
     c64:	70 93 25 01 	sts	0x0125, r23
     c68:	60 93 24 01 	sts	0x0124, r22
				diff_error = cur_error - prev_error;
     c6c:	20 91 22 01 	lds	r18, 0x0122
     c70:	30 91 23 01 	lds	r19, 0x0123
     c74:	fb 01       	movw	r30, r22
     c76:	e2 1b       	sub	r30, r18
     c78:	f3 0b       	sbc	r31, r19
     c7a:	69 96       	adiw	r28, 0x19	; 25
     c7c:	ff af       	std	Y+63, r31	; 0x3f
     c7e:	ee af       	std	Y+62, r30	; 0x3e
     c80:	69 97       	sbiw	r28, 0x19	; 25
     c82:	f0 93 27 01 	sts	0x0127, r31
     c86:	e0 93 26 01 	sts	0x0126, r30
				prev_error = cur_error;
     c8a:	70 93 23 01 	sts	0x0123, r23
     c8e:	60 93 22 01 	sts	0x0122, r22
			
				if (status_go_to_goal == 0)
     c92:	6b 96       	adiw	r28, 0x1b	; 27
     c94:	2e ad       	ldd	r18, Y+62	; 0x3e
     c96:	3f ad       	ldd	r19, Y+63	; 0x3f
     c98:	6b 97       	sbiw	r28, 0x1b	; 27
     c9a:	23 2b       	or	r18, r19
     c9c:	09 f0       	breq	.+2      	; 0xca0 <__stack+0x1a1>
     c9e:	85 c0       	rjmp	.+266    	; 0xdaa <__stack+0x2ab>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
     ca0:	25 96       	adiw	r28, 0x05	; 5
     ca2:	6e ad       	ldd	r22, Y+62	; 0x3e
     ca4:	7f ad       	ldd	r23, Y+63	; 0x3f
     ca6:	25 97       	sbiw	r28, 0x05	; 5
     ca8:	88 27       	eor	r24, r24
     caa:	77 fd       	sbrc	r23, 7
     cac:	80 95       	com	r24
     cae:	98 2f       	mov	r25, r24
     cb0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     cb4:	20 91 1a 01 	lds	r18, 0x011A
     cb8:	30 91 1b 01 	lds	r19, 0x011B
     cbc:	40 91 1c 01 	lds	r20, 0x011C
     cc0:	50 91 1d 01 	lds	r21, 0x011D
     cc4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     cc8:	e6 2e       	mov	r14, r22
     cca:	f7 2e       	mov	r15, r23
     ccc:	c8 2e       	mov	r12, r24
     cce:	d9 2e       	mov	r13, r25
     cd0:	27 96       	adiw	r28, 0x07	; 7
     cd2:	6e ad       	ldd	r22, Y+62	; 0x3e
     cd4:	7f ad       	ldd	r23, Y+63	; 0x3f
     cd6:	27 97       	sbiw	r28, 0x07	; 7
     cd8:	88 27       	eor	r24, r24
     cda:	77 fd       	sbrc	r23, 7
     cdc:	80 95       	com	r24
     cde:	98 2f       	mov	r25, r24
     ce0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     ce4:	20 91 12 01 	lds	r18, 0x0112
     ce8:	30 91 13 01 	lds	r19, 0x0113
     cec:	40 91 14 01 	lds	r20, 0x0114
     cf0:	50 91 15 01 	lds	r21, 0x0115
     cf4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     cf8:	06 2f       	mov	r16, r22
     cfa:	17 2f       	mov	r17, r23
     cfc:	6e 96       	adiw	r28, 0x1e	; 30
     cfe:	8f af       	std	Y+63, r24	; 0x3f
     d00:	6e 97       	sbiw	r28, 0x1e	; 30
     d02:	a2 96       	adiw	r28, 0x22	; 34
     d04:	9f af       	std	Y+63, r25	; 0x3f
     d06:	a2 97       	sbiw	r28, 0x22	; 34
     d08:	2e 2d       	mov	r18, r14
     d0a:	3f 2d       	mov	r19, r15
     d0c:	4c 2d       	mov	r20, r12
     d0e:	5d 2d       	mov	r21, r13
     d10:	6e 2d       	mov	r22, r14
     d12:	7f 2d       	mov	r23, r15
     d14:	8c 2d       	mov	r24, r12
     d16:	9d 2d       	mov	r25, r13
     d18:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     d1c:	6b 01       	movw	r12, r22
     d1e:	7c 01       	movw	r14, r24
     d20:	6e 96       	adiw	r28, 0x1e	; 30
     d22:	9f ad       	ldd	r25, Y+63	; 0x3f
     d24:	6e 97       	sbiw	r28, 0x1e	; 30
     d26:	a2 96       	adiw	r28, 0x22	; 34
     d28:	8f ad       	ldd	r24, Y+63	; 0x3f
     d2a:	a2 97       	sbiw	r28, 0x22	; 34
     d2c:	20 2f       	mov	r18, r16
     d2e:	31 2f       	mov	r19, r17
     d30:	49 2f       	mov	r20, r25
     d32:	58 2f       	mov	r21, r24
     d34:	60 2f       	mov	r22, r16
     d36:	71 2f       	mov	r23, r17
     d38:	89 2f       	mov	r24, r25
     d3a:	95 2f       	mov	r25, r21
     d3c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     d40:	9b 01       	movw	r18, r22
     d42:	ac 01       	movw	r20, r24
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     d4c:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
     d50:	a1 96       	adiw	r28, 0x21	; 33
     d52:	6c af       	std	Y+60, r22	; 0x3c
     d54:	7d af       	std	Y+61, r23	; 0x3d
     d56:	8e af       	std	Y+62, r24	; 0x3e
     d58:	9f af       	std	Y+63, r25	; 0x3f
     d5a:	a1 97       	sbiw	r28, 0x21	; 33
					if (dist_goal < THRESHOLD_DIST_GOAL)
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	a9 01       	movw	r20, r18
     d62:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     d66:	88 23       	and	r24, r24
     d68:	0c f4       	brge	.+2      	; 0xd6c <__stack+0x26d>
     d6a:	18 cd       	rjmp	.-1488   	; 0x79c <main+0x17a>
						status_go_to_goal = 2;
					}
					
					
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	40 e7       	ldi	r20, 0x70	; 112
     d72:	51 e4       	ldi	r21, 0x41	; 65
     d74:	c5 01       	movw	r24, r10
     d76:	b4 01       	movw	r22, r8
     d78:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     d7c:	88 23       	and	r24, r24
     d7e:	0c f4       	brge	.+2      	; 0xd82 <__stack+0x283>
     d80:	14 cd       	rjmp	.-1496   	; 0x7aa <main+0x188>
						status_go_to_goal = 1;
					}
					else
					turn_robot(diff_theta,bank,diff_error);
     d82:	69 96       	adiw	r28, 0x19	; 25
     d84:	4e ad       	ldd	r20, Y+62	; 0x3e
     d86:	5f ad       	ldd	r21, Y+63	; 0x3f
     d88:	69 97       	sbiw	r28, 0x19	; 25
     d8a:	ba 01       	movw	r22, r20
     d8c:	88 27       	eor	r24, r24
     d8e:	77 fd       	sbrc	r23, 7
     d90:	80 95       	com	r24
     d92:	98 2f       	mov	r25, r24
     d94:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     d98:	8b 01       	movw	r16, r22
     d9a:	9c 01       	movw	r18, r24
     d9c:	4d 81       	ldd	r20, Y+5	; 0x05
     d9e:	5e 81       	ldd	r21, Y+6	; 0x06
     da0:	c5 01       	movw	r24, r10
     da2:	b4 01       	movw	r22, r8
     da4:	0e 94 11 02 	call	0x422	; 0x422 <turn_robot>
     da8:	20 cd       	rjmp	.-1472   	; 0x7ea <main+0x1c8>
					
				}
			
				else if (status_go_to_goal == 1)
     daa:	6b 96       	adiw	r28, 0x1b	; 27
     dac:	8e ad       	ldd	r24, Y+62	; 0x3e
     dae:	9f ad       	ldd	r25, Y+63	; 0x3f
     db0:	6b 97       	sbiw	r28, 0x1b	; 27
     db2:	01 97       	sbiw	r24, 0x01	; 1
     db4:	09 f0       	breq	.+2      	; 0xdb8 <__stack+0x2b9>
     db6:	81 c0       	rjmp	.+258    	; 0xeba <__stack+0x3bb>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[0])*(x_robot-TARGETS_X[0])+(y_robot-TARGETS_Y[0])*(y_robot-TARGETS_Y[0]));
     db8:	25 96       	adiw	r28, 0x05	; 5
     dba:	6e ad       	ldd	r22, Y+62	; 0x3e
     dbc:	7f ad       	ldd	r23, Y+63	; 0x3f
     dbe:	25 97       	sbiw	r28, 0x05	; 5
     dc0:	88 27       	eor	r24, r24
     dc2:	77 fd       	sbrc	r23, 7
     dc4:	80 95       	com	r24
     dc6:	98 2f       	mov	r25, r24
     dc8:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     dcc:	20 91 1a 01 	lds	r18, 0x011A
     dd0:	30 91 1b 01 	lds	r19, 0x011B
     dd4:	40 91 1c 01 	lds	r20, 0x011C
     dd8:	50 91 1d 01 	lds	r21, 0x011D
     ddc:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     de0:	c6 2e       	mov	r12, r22
     de2:	d7 2e       	mov	r13, r23
     de4:	e8 2e       	mov	r14, r24
     de6:	f9 2e       	mov	r15, r25
     de8:	27 96       	adiw	r28, 0x07	; 7
     dea:	6e ad       	ldd	r22, Y+62	; 0x3e
     dec:	7f ad       	ldd	r23, Y+63	; 0x3f
     dee:	27 97       	sbiw	r28, 0x07	; 7
     df0:	88 27       	eor	r24, r24
     df2:	77 fd       	sbrc	r23, 7
     df4:	80 95       	com	r24
     df6:	98 2f       	mov	r25, r24
     df8:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     dfc:	20 91 12 01 	lds	r18, 0x0112
     e00:	30 91 13 01 	lds	r19, 0x0113
     e04:	40 91 14 01 	lds	r20, 0x0114
     e08:	50 91 15 01 	lds	r21, 0x0115
     e0c:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
     e10:	68 96       	adiw	r28, 0x18	; 24
     e12:	6f af       	std	Y+63, r22	; 0x3f
     e14:	68 97       	sbiw	r28, 0x18	; 24
     e16:	6e 96       	adiw	r28, 0x1e	; 30
     e18:	7f af       	std	Y+63, r23	; 0x3f
     e1a:	6e 97       	sbiw	r28, 0x1e	; 30
     e1c:	a2 96       	adiw	r28, 0x22	; 34
     e1e:	8f af       	std	Y+63, r24	; 0x3f
     e20:	a2 97       	sbiw	r28, 0x22	; 34
     e22:	a3 96       	adiw	r28, 0x23	; 35
     e24:	9f af       	std	Y+63, r25	; 0x3f
     e26:	a3 97       	sbiw	r28, 0x23	; 35
     e28:	2c 2d       	mov	r18, r12
     e2a:	3d 2d       	mov	r19, r13
     e2c:	4e 2d       	mov	r20, r14
     e2e:	5f 2d       	mov	r21, r15
     e30:	6c 2d       	mov	r22, r12
     e32:	7d 2d       	mov	r23, r13
     e34:	8e 2d       	mov	r24, r14
     e36:	9f 2d       	mov	r25, r15
     e38:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     e3c:	6b 01       	movw	r12, r22
     e3e:	7c 01       	movw	r14, r24
     e40:	68 96       	adiw	r28, 0x18	; 24
     e42:	7f ad       	ldd	r23, Y+63	; 0x3f
     e44:	68 97       	sbiw	r28, 0x18	; 24
     e46:	6e 96       	adiw	r28, 0x1e	; 30
     e48:	6f ad       	ldd	r22, Y+63	; 0x3f
     e4a:	6e 97       	sbiw	r28, 0x1e	; 30
     e4c:	a2 96       	adiw	r28, 0x22	; 34
     e4e:	9f ad       	ldd	r25, Y+63	; 0x3f
     e50:	a2 97       	sbiw	r28, 0x22	; 34
     e52:	a3 96       	adiw	r28, 0x23	; 35
     e54:	8f ad       	ldd	r24, Y+63	; 0x3f
     e56:	a3 97       	sbiw	r28, 0x23	; 35
     e58:	27 2f       	mov	r18, r23
     e5a:	36 2f       	mov	r19, r22
     e5c:	49 2f       	mov	r20, r25
     e5e:	58 2f       	mov	r21, r24
     e60:	67 2f       	mov	r22, r23
     e62:	73 2f       	mov	r23, r19
     e64:	89 2f       	mov	r24, r25
     e66:	95 2f       	mov	r25, r21
     e68:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
     e6c:	9b 01       	movw	r18, r22
     e6e:	ac 01       	movw	r20, r24
     e70:	c7 01       	movw	r24, r14
     e72:	b6 01       	movw	r22, r12
     e74:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
     e78:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
     e7c:	a1 96       	adiw	r28, 0x21	; 33
     e7e:	6c af       	std	Y+60, r22	; 0x3c
     e80:	7d af       	std	Y+61, r23	; 0x3d
     e82:	8e af       	std	Y+62, r24	; 0x3e
     e84:	9f af       	std	Y+63, r25	; 0x3f
     e86:	a1 97       	sbiw	r28, 0x21	; 33
					if (dist_goal < THRESHOLD_DIST_GOAL)
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	a9 01       	movw	r20, r18
     e8e:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     e92:	88 23       	and	r24, r24
     e94:	0c f4       	brge	.+2      	; 0xe98 <__stack+0x399>
     e96:	90 cc       	rjmp	.-1760   	; 0x7b8 <main+0x196>
						//                                stop_counter++;
						//                            }
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	30 e0       	ldi	r19, 0x00	; 0
     e9c:	40 ef       	ldi	r20, 0xF0	; 240
     e9e:	51 e4       	ldi	r21, 0x41	; 65
     ea0:	c5 01       	movw	r24, r10
     ea2:	b4 01       	movw	r22, r8
     ea4:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
     ea8:	18 16       	cp	r1, r24
     eaa:	0c f4       	brge	.+2      	; 0xeae <__stack+0x3af>
     eac:	8c cc       	rjmp	.-1768   	; 0x7c6 <main+0x1a4>
						//set(PORTD,5);
					}
					else 
					{
						//clear(PORTD,5);
						move_robot_to_puck(diff_theta,bank);
     eae:	6d 81       	ldd	r22, Y+5	; 0x05
     eb0:	7e 81       	ldd	r23, Y+6	; 0x06
     eb2:	c8 01       	movw	r24, r16
     eb4:	0e 94 46 02 	call	0x48c	; 0x48c <move_robot_to_puck>
     eb8:	98 cc       	rjmp	.-1744   	; 0x7ea <main+0x1c8>
					}
				
				}
				else if (status_go_to_goal == 2){
     eba:	6b 96       	adiw	r28, 0x1b	; 27
     ebc:	ae ad       	ldd	r26, Y+62	; 0x3e
     ebe:	bf ad       	ldd	r27, Y+63	; 0x3f
     ec0:	6b 97       	sbiw	r28, 0x1b	; 27
     ec2:	12 97       	sbiw	r26, 0x02	; 2
     ec4:	69 f5       	brne	.+90     	; 0xf20 <__stack+0x421>
				
					calculate_diff_theta(0,&diff_theta, &bank);
     ec6:	9e 01       	movw	r18, r28
     ec8:	2b 5f       	subi	r18, 0xFB	; 251
     eca:	3f 4f       	sbci	r19, 0xFF	; 255
     ecc:	ae 01       	movw	r20, r28
     ece:	4f 5f       	subi	r20, 0xFF	; 255
     ed0:	5f 4f       	sbci	r21, 0xFF	; 255
     ed2:	60 e0       	ldi	r22, 0x00	; 0
     ed4:	70 e0       	ldi	r23, 0x00	; 0
     ed6:	cb 01       	movw	r24, r22
     ed8:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
				
				
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
     edc:	c9 80       	ldd	r12, Y+1	; 0x01
     ede:	da 80       	ldd	r13, Y+2	; 0x02
     ee0:	eb 80       	ldd	r14, Y+3	; 0x03
     ee2:	fc 80       	ldd	r15, Y+4	; 0x04
     ee4:	20 e0       	ldi	r18, 0x00	; 0
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	40 e7       	ldi	r20, 0x70	; 112
     eea:	51 e4       	ldi	r21, 0x41	; 65
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
     ef4:	88 23       	and	r24, r24
     ef6:	0c f4       	brge	.+2      	; 0xefa <__stack+0x3fb>
     ef8:	6b cc       	rjmp	.-1834   	; 0x7d0 <main+0x1ae>
						//m_wait(1000);
						//set(PORTD,5);
					}
					else 
					{
						turn_robot(diff_theta,bank,diff_error);
     efa:	60 91 26 01 	lds	r22, 0x0126
     efe:	70 91 27 01 	lds	r23, 0x0127
     f02:	88 27       	eor	r24, r24
     f04:	77 fd       	sbrc	r23, 7
     f06:	80 95       	com	r24
     f08:	98 2f       	mov	r25, r24
     f0a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
     f0e:	8b 01       	movw	r16, r22
     f10:	9c 01       	movw	r18, r24
     f12:	4d 81       	ldd	r20, Y+5	; 0x05
     f14:	5e 81       	ldd	r21, Y+6	; 0x06
     f16:	c7 01       	movw	r24, r14
     f18:	b6 01       	movw	r22, r12
     f1a:	0e 94 11 02 	call	0x422	; 0x422 <turn_robot>
     f1e:	65 cc       	rjmp	.-1846   	; 0x7ea <main+0x1c8>
					}
				
				}
				else if (status_go_to_goal == 3)
     f20:	6b 96       	adiw	r28, 0x1b	; 27
     f22:	ee ad       	ldd	r30, Y+62	; 0x3e
     f24:	ff ad       	ldd	r31, Y+63	; 0x3f
     f26:	6b 97       	sbiw	r28, 0x1b	; 27
     f28:	33 97       	sbiw	r30, 0x03	; 3
     f2a:	09 f0       	breq	.+2      	; 0xf2e <__stack+0x42f>
     f2c:	5e cc       	rjmp	.-1860   	; 0x7ea <main+0x1c8>
				{
				
					stop_motor();
     f2e:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					//                        //                            clear(PORTD,5);
					//                    }
					//                    goal_pos_x = TARGETS_X[TARGET_NUM];
					//                    goal_pos_y = TARGETS_Y[TARGET_NUM];
					status_go_to_goal = 0;
					state = FIND_PUCK;
     f32:	83 e0       	ldi	r24, 0x03	; 3
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	90 93 0d 01 	sts	0x010D, r25
     f3a:	80 93 0c 01 	sts	0x010C, r24
					//                        TARGET_NUM = 0;
					//                        //                            clear(PORTD,5);
					//                    }
					//                    goal_pos_x = TARGETS_X[TARGET_NUM];
					//                    goal_pos_y = TARGETS_Y[TARGET_NUM];
					status_go_to_goal = 0;
     f3e:	6b 96       	adiw	r28, 0x1b	; 27
     f40:	1f ae       	std	Y+63, r1	; 0x3f
     f42:	1e ae       	std	Y+62, r1	; 0x3e
     f44:	6b 97       	sbiw	r28, 0x1b	; 27
     f46:	51 cc       	rjmp	.-1886   	; 0x7ea <main+0x1c8>
				//}
				//
            
            
				//Check if we have the puck
				if (PT2_left_inside > 1010 &&  PT3_right_inside > 1010)
     f48:	03 3f       	cpi	r16, 0xF3	; 243
     f4a:	f3 e0       	ldi	r31, 0x03	; 3
     f4c:	1f 07       	cpc	r17, r31
     f4e:	84 f0       	brlt	.+32     	; 0xf70 <__stack+0x471>
     f50:	23 ef       	ldi	r18, 0xF3	; 243
     f52:	a2 16       	cp	r10, r18
     f54:	23 e0       	ldi	r18, 0x03	; 3
     f56:	b2 06       	cpc	r11, r18
     f58:	5c f0       	brlt	.+22     	; 0xf70 <__stack+0x471>
				{
					state = GO_TO_GOAL_WITH_PUCK;
     f5a:	85 e0       	ldi	r24, 0x05	; 5
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	90 93 0d 01 	sts	0x010D, r25
     f62:	80 93 0c 01 	sts	0x010C, r24
					//turnOnBlueLED();
	            
					status_go_to_goal = 0;
     f66:	6b 96       	adiw	r28, 0x1b	; 27
     f68:	1f ae       	std	Y+63, r1	; 0x3f
     f6a:	1e ae       	std	Y+62, r1	; 0x3e
     f6c:	6b 97       	sbiw	r28, 0x1b	; 27
					break;
     f6e:	3d cc       	rjmp	.-1926   	; 0x7ea <main+0x1c8>
				max_lr = 0;
				else
				max_lr = 1;
            
				//Check if the puck is up or down
				if (max_lr == 0)
     f70:	ce 14       	cp	r12, r14
     f72:	df 04       	cpc	r13, r15
     f74:	64 f4       	brge	.+24     	; 0xf8e <__stack+0x48f>
				{
					if (PT1_left_outside >= PT6_back_left)
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	e8 14       	cp	r14, r8
     f7c:	f9 04       	cpc	r15, r9
     f7e:	14 f0       	brlt	.+4      	; 0xf84 <__stack+0x485>
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
					half_range = 0;
					else
					half_range = 1;
     f84:	ad 96       	adiw	r28, 0x2d	; 45
     f86:	9f af       	std	Y+63, r25	; 0x3f
     f88:	8e af       	std	Y+62, r24	; 0x3e
     f8a:	ad 97       	sbiw	r28, 0x2d	; 45
     f8c:	0f c0       	rjmp	.+30     	; 0xfac <__stack+0x4ad>
				}
				else
				{
					if (PT4_right_outside >= PT5_back_right)
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	69 96       	adiw	r28, 0x19	; 25
     f94:	4e ad       	ldd	r20, Y+62	; 0x3e
     f96:	5f ad       	ldd	r21, Y+63	; 0x3f
     f98:	69 97       	sbiw	r28, 0x19	; 25
     f9a:	c4 16       	cp	r12, r20
     f9c:	d5 06       	cpc	r13, r21
     f9e:	14 f0       	brlt	.+4      	; 0xfa4 <__stack+0x4a5>
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
				if (max_lr == 0)
				{
					if (PT1_left_outside >= PT6_back_left)
					half_range = 0;
					else
					half_range = 1;
     fa4:	ad 96       	adiw	r28, 0x2d	; 45
     fa6:	9f af       	std	Y+63, r25	; 0x3f
     fa8:	8e af       	std	Y+62, r24	; 0x3e
     faa:	ad 97       	sbiw	r28, 0x2d	; 45
				max_pt_backs = PT6_back_left;
            
            
            
				//                // If Insides see the puck
				if (PT1_left_outside < NOT_SEE_PUCK && PT2_left_inside < NOT_SEE_PUCK && PT3_right_inside < NOT_SEE_PUCK && PT4_right_outside < NOT_SEE_PUCK && PT5_back_right < NOT_SEE_PUCK && PT6_back_left < NOT_SEE_PUCK) 
     fac:	5c e2       	ldi	r21, 0x2C	; 44
     fae:	e5 16       	cp	r14, r21
     fb0:	51 e0       	ldi	r21, 0x01	; 1
     fb2:	f5 06       	cpc	r15, r21
     fb4:	1c f5       	brge	.+70     	; 0xffc <__stack+0x4fd>
     fb6:	0c 32       	cpi	r16, 0x2C	; 44
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	18 07       	cpc	r17, r24
     fbc:	fc f4       	brge	.+62     	; 0xffc <__stack+0x4fd>
     fbe:	9c e2       	ldi	r25, 0x2C	; 44
     fc0:	a9 16       	cp	r10, r25
     fc2:	91 e0       	ldi	r25, 0x01	; 1
     fc4:	b9 06       	cpc	r11, r25
     fc6:	d4 f4       	brge	.+52     	; 0xffc <__stack+0x4fd>
     fc8:	ac e2       	ldi	r26, 0x2C	; 44
     fca:	ca 16       	cp	r12, r26
     fcc:	a1 e0       	ldi	r26, 0x01	; 1
     fce:	da 06       	cpc	r13, r26
     fd0:	ac f4       	brge	.+42     	; 0xffc <__stack+0x4fd>
     fd2:	69 96       	adiw	r28, 0x19	; 25
     fd4:	ee ad       	ldd	r30, Y+62	; 0x3e
     fd6:	ff ad       	ldd	r31, Y+63	; 0x3f
     fd8:	69 97       	sbiw	r28, 0x19	; 25
     fda:	ec 32       	cpi	r30, 0x2C	; 44
     fdc:	f1 40       	sbci	r31, 0x01	; 1
     fde:	74 f4       	brge	.+28     	; 0xffc <__stack+0x4fd>
     fe0:	3c e2       	ldi	r19, 0x2C	; 44
     fe2:	83 16       	cp	r8, r19
     fe4:	31 e0       	ldi	r19, 0x01	; 1
     fe6:	93 06       	cpc	r9, r19
     fe8:	4c f4       	brge	.+18     	; 0xffc <__stack+0x4fd>
				{
					turnOffBlueLED();
     fea:	0e 94 06 0a 	call	0x140c	; 0x140c <turnOffBlueLED>
					state = GO_TO_WPT;
     fee:	80 e5       	ldi	r24, 0x50	; 80
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	90 93 0d 01 	sts	0x010D, r25
     ff6:	80 93 0c 01 	sts	0x010C, r24
					break;
     ffa:	f7 cb       	rjmp	.-2066   	; 0x7ea <main+0x1c8>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
     ffc:	b8 01       	movw	r22, r16
     ffe:	6a 0d       	add	r22, r10
    1000:	7b 1d       	adc	r23, r11
    1002:	88 27       	eor	r24, r24
    1004:	77 fd       	sbrc	r23, 7
    1006:	80 95       	com	r24
    1008:	98 2f       	mov	r25, r24
    100a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    101a:	a2 96       	adiw	r28, 0x22	; 34
    101c:	6f af       	std	Y+63, r22	; 0x3f
    101e:	a2 97       	sbiw	r28, 0x22	; 34
    1020:	a3 96       	adiw	r28, 0x23	; 35
    1022:	7f af       	std	Y+63, r23	; 0x3f
    1024:	a3 97       	sbiw	r28, 0x23	; 35
    1026:	aa 96       	adiw	r28, 0x2a	; 42
    1028:	8f af       	std	Y+63, r24	; 0x3f
    102a:	aa 97       	sbiw	r28, 0x2a	; 42
    102c:	ab 96       	adiw	r28, 0x2b	; 43
    102e:	9f af       	std	Y+63, r25	; 0x3f
    1030:	ab 97       	sbiw	r28, 0x2b	; 43
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	48 e4       	ldi	r20, 0x48	; 72
    1038:	53 e4       	ldi	r21, 0x43	; 67
    103a:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
    103e:	88 23       	and	r24, r24
    1040:	74 f1       	brlt	.+92     	; 0x109e <__stack+0x59f>
    1042:	4d eb       	ldi	r20, 0xBD	; 189
    1044:	e4 16       	cp	r14, r20
    1046:	42 e0       	ldi	r20, 0x02	; 2
    1048:	f4 06       	cpc	r15, r20
    104a:	4c f5       	brge	.+82     	; 0x109e <__stack+0x59f>
    104c:	5d eb       	ldi	r21, 0xBD	; 189
    104e:	c5 16       	cp	r12, r21
    1050:	52 e0       	ldi	r21, 0x02	; 2
    1052:	d5 06       	cpc	r13, r21
    1054:	24 f5       	brge	.+72     	; 0x109e <__stack+0x59f>
				{
					turnOnBlueLED();
    1056:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOnBlueLED>
					status_go_to_goal = 1;
					int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
    105a:	c8 01       	movw	r24, r16
    105c:	8a 19       	sub	r24, r10
    105e:	9b 09       	sbc	r25, r11
    1060:	1a f4       	brpl	.+6      	; 0x1068 <__stack+0x569>
    1062:	91 95       	neg	r25
    1064:	81 95       	neg	r24
    1066:	91 09       	sbc	r25, r1
    1068:	68 2f       	mov	r22, r24
    106a:	79 2f       	mov	r23, r25
					if (PT2_left_inside >= PT3_right_inside) 
    106c:	0a 15       	cp	r16, r10
    106e:	1b 05       	cpc	r17, r11
    1070:	5c f0       	brlt	.+22     	; 0x1088 <__stack+0x589>
					{
						move_robot_to_puck(1,diff_PT_inside);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	0e 94 46 02 	call	0x48c	; 0x48c <move_robot_to_puck>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
				{
					turnOnBlueLED();
					status_go_to_goal = 1;
    107a:	81 e0       	ldi	r24, 0x01	; 1
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	6b 96       	adiw	r28, 0x1b	; 27
    1080:	9f af       	std	Y+63, r25	; 0x3f
    1082:	8e af       	std	Y+62, r24	; 0x3e
    1084:	6b 97       	sbiw	r28, 0x1b	; 27
    1086:	b1 cb       	rjmp	.-2206   	; 0x7ea <main+0x1c8>
						move_robot_to_puck(1,diff_PT_inside);
		            
					}
					else
					{
						move_robot_to_puck(0,diff_PT_inside);
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	0e 94 46 02 	call	0x48c	; 0x48c <move_robot_to_puck>
				}
            
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) 
				{
					turnOnBlueLED();
					status_go_to_goal = 1;
    1090:	a1 e0       	ldi	r26, 0x01	; 1
    1092:	b0 e0       	ldi	r27, 0x00	; 0
    1094:	6b 96       	adiw	r28, 0x1b	; 27
    1096:	bf af       	std	Y+63, r27	; 0x3f
    1098:	ae af       	std	Y+62, r26	; 0x3e
    109a:	6b 97       	sbiw	r28, 0x1b	; 27
    109c:	a6 cb       	rjmp	.-2228   	; 0x7ea <main+0x1c8>
					{
						move_robot_to_puck(0,diff_PT_inside);
					}
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	48 e4       	ldi	r20, 0x48	; 72
    10a4:	53 e4       	ldi	r21, 0x43	; 67
    10a6:	a2 96       	adiw	r28, 0x22	; 34
    10a8:	ef ad       	ldd	r30, Y+63	; 0x3f
    10aa:	a2 97       	sbiw	r28, 0x22	; 34
    10ac:	a3 96       	adiw	r28, 0x23	; 35
    10ae:	bf ad       	ldd	r27, Y+63	; 0x3f
    10b0:	a3 97       	sbiw	r28, 0x23	; 35
    10b2:	aa 96       	adiw	r28, 0x2a	; 42
    10b4:	af ad       	ldd	r26, Y+63	; 0x3f
    10b6:	aa 97       	sbiw	r28, 0x2a	; 42
    10b8:	ab 96       	adiw	r28, 0x2b	; 43
    10ba:	ff ad       	ldd	r31, Y+63	; 0x3f
    10bc:	ab 97       	sbiw	r28, 0x2b	; 43
    10be:	6e 2f       	mov	r22, r30
    10c0:	7b 2f       	mov	r23, r27
    10c2:	8a 2f       	mov	r24, r26
    10c4:	9f 2f       	mov	r25, r31
    10c6:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
    10ca:	88 23       	and	r24, r24
    10cc:	0c f0       	brlt	.+2      	; 0x10d0 <__stack+0x5d1>
    10ce:	41 c0       	rjmp	.+130    	; 0x1152 <__stack+0x653>
    10d0:	b5 e6       	ldi	r27, 0x65	; 101
    10d2:	eb 16       	cp	r14, r27
    10d4:	f1 04       	cpc	r15, r1
    10d6:	7c f4       	brge	.+30     	; 0x10f6 <__stack+0x5f7>
    10d8:	e5 e6       	ldi	r30, 0x65	; 101
    10da:	ce 16       	cp	r12, r30
    10dc:	d1 04       	cpc	r13, r1
    10de:	5c f4       	brge	.+22     	; 0x10f6 <__stack+0x5f7>
    10e0:	f5 e6       	ldi	r31, 0x65	; 101
    10e2:	8f 16       	cp	r8, r31
    10e4:	91 04       	cpc	r9, r1
    10e6:	3c f4       	brge	.+14     	; 0x10f6 <__stack+0x5f7>
    10e8:	69 96       	adiw	r28, 0x19	; 25
    10ea:	2e ad       	ldd	r18, Y+62	; 0x3e
    10ec:	3f ad       	ldd	r19, Y+63	; 0x3f
    10ee:	69 97       	sbiw	r28, 0x19	; 25
    10f0:	25 36       	cpi	r18, 0x65	; 101
    10f2:	31 05       	cpc	r19, r1
    10f4:	74 f1       	brlt	.+92     	; 0x1152 <__stack+0x653>
				{
					turnOffBlueLED();
    10f6:	0e 94 06 0a 	call	0x140c	; 0x140c <turnOffBlueLED>
					status_go_to_goal = 0;
					//Case where the puck is in front
					if (half_range == 0)
    10fa:	ad 96       	adiw	r28, 0x2d	; 45
    10fc:	4e ad       	ldd	r20, Y+62	; 0x3e
    10fe:	5f ad       	ldd	r21, Y+63	; 0x3f
    1100:	ad 97       	sbiw	r28, 0x2d	; 45
    1102:	45 2b       	or	r20, r21
    1104:	89 f4       	brne	.+34     	; 0x1128 <__stack+0x629>
					{
						if (PT1_left_outside >= PT4_right_outside) 
    1106:	ec 14       	cp	r14, r12
    1108:	fd 04       	cpc	r15, r13
    110a:	3c f0       	brlt	.+14     	; 0x111a <__stack+0x61b>
						{
							turn_left();
    110c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    1110:	6b 96       	adiw	r28, 0x1b	; 27
    1112:	1f ae       	std	Y+63, r1	; 0x3f
    1114:	1e ae       	std	Y+62, r1	; 0x3e
    1116:	6b 97       	sbiw	r28, 0x1b	; 27
    1118:	68 cb       	rjmp	.-2352   	; 0x7ea <main+0x1c8>
						if (PT1_left_outside >= PT4_right_outside) 
						{
							turn_left();
						}
						else
						turn_right();
    111a:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    111e:	6b 96       	adiw	r28, 0x1b	; 27
    1120:	1f ae       	std	Y+63, r1	; 0x3f
    1122:	1e ae       	std	Y+62, r1	; 0x3e
    1124:	6b 97       	sbiw	r28, 0x1b	; 27
    1126:	61 cb       	rjmp	.-2366   	; 0x7ea <main+0x1c8>
						else
						turn_right();
					}
					else
					{
						if (PT6_back_left >= PT5_back_right) 
    1128:	69 96       	adiw	r28, 0x19	; 25
    112a:	8e ad       	ldd	r24, Y+62	; 0x3e
    112c:	9f ad       	ldd	r25, Y+63	; 0x3f
    112e:	69 97       	sbiw	r28, 0x19	; 25
    1130:	88 16       	cp	r8, r24
    1132:	99 06       	cpc	r9, r25
    1134:	3c f0       	brlt	.+14     	; 0x1144 <__stack+0x645>
						{
							turn_left();
    1136:	0e 94 d5 02 	call	0x5aa	; 0x5aa <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    113a:	6b 96       	adiw	r28, 0x1b	; 27
    113c:	1f ae       	std	Y+63, r1	; 0x3f
    113e:	1e ae       	std	Y+62, r1	; 0x3e
    1140:	6b 97       	sbiw	r28, 0x1b	; 27
    1142:	53 cb       	rjmp	.-2394   	; 0x7ea <main+0x1c8>
						if (PT6_back_left >= PT5_back_right) 
						{
							turn_left();
						}
						else
						turn_right();
    1144:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    1148:	6b 96       	adiw	r28, 0x1b	; 27
    114a:	1f ae       	std	Y+63, r1	; 0x3f
    114c:	1e ae       	std	Y+62, r1	; 0x3e
    114e:	6b 97       	sbiw	r28, 0x1b	; 27
    1150:	4c cb       	rjmp	.-2408   	; 0x7ea <main+0x1c8>
						turn_right();
		            
					}
				}
				else{
					state = GO_TO_WPT;
    1152:	80 e5       	ldi	r24, 0x50	; 80
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	90 93 0d 01 	sts	0x010D, r25
    115a:	80 93 0c 01 	sts	0x010C, r24
					turnOffBlueLED();
    115e:	0e 94 06 0a 	call	0x140c	; 0x140c <turnOffBlueLED>
    1162:	43 cb       	rjmp	.-2426   	; 0x7ea <main+0x1c8>
                    
                // --------------------------------------------------------------
                // INITIAL STATE
                // --------------------------------------------------------------
            case INITIAL_STATE:
                if (check(PINB,2))
    1164:	1a 9b       	sbis	0x03, 2	; 3
    1166:	07 c0       	rjmp	.+14     	; 0x1176 <__stack+0x677>
                {
                    goal_pos_x = GOAL_A_POS_X;
    1168:	ac e9       	ldi	r26, 0x9C	; 156
    116a:	bf ef       	ldi	r27, 0xFF	; 255
    116c:	a5 96       	adiw	r28, 0x25	; 37
    116e:	bf af       	std	Y+63, r27	; 0x3f
    1170:	ae af       	std	Y+62, r26	; 0x3e
    1172:	a5 97       	sbiw	r28, 0x25	; 37
    1174:	06 c0       	rjmp	.+12     	; 0x1182 <__stack+0x683>
                    //                        goal_pos_y = TARGETS_Y[TARGET_NUM];
                    //
                }
				else
                {
                    goal_pos_x = GOAL_B_POS_X;
    1176:	e3 e7       	ldi	r30, 0x73	; 115
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	a5 96       	adiw	r28, 0x25	; 37
    117c:	ff af       	std	Y+63, r31	; 0x3f
    117e:	ee af       	std	Y+62, r30	; 0x3e
    1180:	a5 97       	sbiw	r28, 0x25	; 37
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
    1182:	83 e0       	ldi	r24, 0x03	; 3
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	90 93 0d 01 	sts	0x010D, r25
    118a:	80 93 0c 01 	sts	0x010C, r24
				else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    118e:	6b 96       	adiw	r28, 0x1b	; 27
    1190:	1f ae       	std	Y+63, r1	; 0x3f
    1192:	1e ae       	std	Y+62, r1	; 0x3e
    1194:	6b 97       	sbiw	r28, 0x1b	; 27
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
                break;
    1196:	29 cb       	rjmp	.-2478   	; 0x7ea <main+0x1c8>
				// GO TO GOAL WITH PUCK
				// --------------------------------------------------------------
                    
                case GO_TO_GOAL_WITH_PUCK:
				 
					if ( PT2_left_inside < 900 || PT3_right_inside < 900 )
    1198:	04 38       	cpi	r16, 0x84	; 132
    119a:	13 40       	sbci	r17, 0x03	; 3
    119c:	2c f0       	brlt	.+10     	; 0x11a8 <__stack+0x6a9>
    119e:	24 e8       	ldi	r18, 0x84	; 132
    11a0:	a2 16       	cp	r10, r18
    11a2:	23 e0       	ldi	r18, 0x03	; 3
    11a4:	b2 06       	cpc	r11, r18
    11a6:	5c f4       	brge	.+22     	; 0x11be <__stack+0x6bf>
					{
						state = FIND_PUCK;
    11a8:	83 e0       	ldi	r24, 0x03	; 3
    11aa:	90 e0       	ldi	r25, 0x00	; 0
    11ac:	90 93 0d 01 	sts	0x010D, r25
    11b0:	80 93 0c 01 	sts	0x010C, r24
						status_go_to_goal = 0;
    11b4:	6b 96       	adiw	r28, 0x1b	; 27
    11b6:	1f ae       	std	Y+63, r1	; 0x3f
    11b8:	1e ae       	std	Y+62, r1	; 0x3e
    11ba:	6b 97       	sbiw	r28, 0x1b	; 27
						break;
    11bc:	16 cb       	rjmp	.-2516   	; 0x7ea <main+0x1c8>
					}
				
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    11be:	25 96       	adiw	r28, 0x05	; 5
    11c0:	0e ad       	ldd	r16, Y+62	; 0x3e
    11c2:	1f ad       	ldd	r17, Y+63	; 0x3f
    11c4:	25 97       	sbiw	r28, 0x05	; 5
    11c6:	c8 01       	movw	r24, r16
    11c8:	a5 96       	adiw	r28, 0x25	; 37
    11ca:	4e ad       	ldd	r20, Y+62	; 0x3e
    11cc:	5f ad       	ldd	r21, Y+63	; 0x3f
    11ce:	a5 97       	sbiw	r28, 0x25	; 37
    11d0:	84 1b       	sub	r24, r20
    11d2:	95 0b       	sbc	r25, r21
    11d4:	27 96       	adiw	r28, 0x07	; 7
    11d6:	ee ac       	ldd	r14, Y+62	; 0x3e
    11d8:	ff ac       	ldd	r15, Y+63	; 0x3f
    11da:	27 97       	sbiw	r28, 0x07	; 7
    11dc:	88 9f       	mul	r24, r24
    11de:	b0 01       	movw	r22, r0
    11e0:	89 9f       	mul	r24, r25
    11e2:	70 0d       	add	r23, r0
    11e4:	70 0d       	add	r23, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	ee 9c       	mul	r14, r14
    11ea:	c0 01       	movw	r24, r0
    11ec:	ef 9c       	mul	r14, r15
    11ee:	90 0d       	add	r25, r0
    11f0:	90 0d       	add	r25, r0
    11f2:	11 24       	eor	r1, r1
    11f4:	68 0f       	add	r22, r24
    11f6:	79 1f       	adc	r23, r25
    11f8:	88 27       	eor	r24, r24
    11fa:	77 fd       	sbrc	r23, 7
    11fc:	80 95       	com	r24
    11fe:	98 2f       	mov	r25, r24
    1200:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    1204:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    1208:	a1 96       	adiw	r28, 0x21	; 33
    120a:	6c af       	std	Y+60, r22	; 0x3c
    120c:	7d af       	std	Y+61, r23	; 0x3d
    120e:	8e af       	std	Y+62, r24	; 0x3e
    1210:	9f af       	std	Y+63, r25	; 0x3f
    1212:	a1 97       	sbiw	r28, 0x21	; 33
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	a9 01       	movw	r20, r18
    121a:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
    121e:	88 23       	and	r24, r24
    1220:	5c f4       	brge	.+22     	; 0x1238 <__stack+0x739>
					{
						status_go_to_goal = 0;
						state  = FIND_PUCK;
    1222:	83 e0       	ldi	r24, 0x03	; 3
    1224:	90 e0       	ldi	r25, 0x00	; 0
    1226:	90 93 0d 01 	sts	0x010D, r25
    122a:	80 93 0c 01 	sts	0x010C, r24
					}
				
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 0;
    122e:	6b 96       	adiw	r28, 0x1b	; 27
    1230:	1f ae       	std	Y+63, r1	; 0x3f
    1232:	1e ae       	std	Y+62, r1	; 0x3e
    1234:	6b 97       	sbiw	r28, 0x1b	; 27
						state  = FIND_PUCK;
						break;
    1236:	d9 ca       	rjmp	.-2638   	; 0x7ea <main+0x1c8>
					}
					
					if (status_go_to_goal == 0)
    1238:	6b 96       	adiw	r28, 0x1b	; 27
    123a:	8e ad       	ldd	r24, Y+62	; 0x3e
    123c:	9f ad       	ldd	r25, Y+63	; 0x3f
    123e:	6b 97       	sbiw	r28, 0x1b	; 27
    1240:	89 2b       	or	r24, r25
    1242:	09 f0       	breq	.+2      	; 0x1246 <__stack+0x747>
    1244:	57 c0       	rjmp	.+174    	; 0x12f4 <__stack+0x7f5>
					{
					
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    1246:	66 27       	eor	r22, r22
    1248:	77 27       	eor	r23, r23
    124a:	6e 19       	sub	r22, r14
    124c:	7f 09       	sbc	r23, r15
    124e:	88 27       	eor	r24, r24
    1250:	77 fd       	sbrc	r23, 7
    1252:	80 95       	com	r24
    1254:	98 2f       	mov	r25, r24
    1256:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    125a:	6b 01       	movw	r12, r22
    125c:	7c 01       	movw	r14, r24
					}
					
					if (status_go_to_goal == 0)
					{
					
						dir_x = goal_pos_x-x_robot;
    125e:	a5 96       	adiw	r28, 0x25	; 37
    1260:	6e ad       	ldd	r22, Y+62	; 0x3e
    1262:	7f ad       	ldd	r23, Y+63	; 0x3f
    1264:	a5 97       	sbiw	r28, 0x25	; 37
    1266:	60 1b       	sub	r22, r16
    1268:	71 0b       	sbc	r23, r17
    126a:	88 27       	eor	r24, r24
    126c:	77 fd       	sbrc	r23, 7
    126e:	80 95       	com	r24
    1270:	98 2f       	mov	r25, r24
    1272:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1276:	90 58       	subi	r25, 0x80	; 128
    1278:	a7 01       	movw	r20, r14
    127a:	96 01       	movw	r18, r12
    127c:	0e 94 6d 18 	call	0x30da	; 0x30da <atan2>
    1280:	20 e0       	ldi	r18, 0x00	; 0
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	44 e3       	ldi	r20, 0x34	; 52
    1286:	53 e4       	ldi	r21, 0x43	; 67
    1288:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    128c:	2b ed       	ldi	r18, 0xDB	; 219
    128e:	3f e0       	ldi	r19, 0x0F	; 15
    1290:	49 e4       	ldi	r20, 0x49	; 73
    1292:	50 e4       	ldi	r21, 0x40	; 64
    1294:	0e 94 c7 18 	call	0x318e	; 0x318e <__divsf3>
    1298:	a6 96       	adiw	r28, 0x26	; 38
    129a:	6f af       	std	Y+63, r22	; 0x3f
    129c:	a6 97       	sbiw	r28, 0x26	; 38
    129e:	a7 96       	adiw	r28, 0x27	; 39
    12a0:	7f af       	std	Y+63, r23	; 0x3f
    12a2:	a7 97       	sbiw	r28, 0x27	; 39
    12a4:	a8 96       	adiw	r28, 0x28	; 40
    12a6:	8f af       	std	Y+63, r24	; 0x3f
    12a8:	a8 97       	sbiw	r28, 0x28	; 40
    12aa:	a9 96       	adiw	r28, 0x29	; 41
    12ac:	9f af       	std	Y+63, r25	; 0x3f
    12ae:	a9 97       	sbiw	r28, 0x29	; 41
		                 
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    12b0:	9e 01       	movw	r18, r28
    12b2:	2b 5f       	subi	r18, 0xFB	; 251
    12b4:	3f 4f       	sbci	r19, 0xFF	; 255
    12b6:	ae 01       	movw	r20, r28
    12b8:	4f 5f       	subi	r20, 0xFF	; 255
    12ba:	5f 4f       	sbci	r21, 0xFF	; 255
    12bc:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
						
						if (diff_theta <20)
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 ea       	ldi	r20, 0xA0	; 160
    12c6:	51 e4       	ldi	r21, 0x41	; 65
    12c8:	69 81       	ldd	r22, Y+1	; 0x01
    12ca:	7a 81       	ldd	r23, Y+2	; 0x02
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
    12d4:	88 23       	and	r24, r24
    12d6:	0c f4       	brge	.+2      	; 0x12da <__stack+0x7db>
    12d8:	82 ca       	rjmp	.-2812   	; 0x7de <main+0x1bc>
							break;
						}
						else
						{
							
							if (bank == 0)
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	9e 81       	ldd	r25, Y+6	; 0x06
    12de:	00 97       	sbiw	r24, 0x00	; 0
    12e0:	19 f4       	brne	.+6      	; 0x12e8 <__stack+0x7e9>
							{
								//turnOnBlueLED();
								circle_left();
    12e2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <circle_left>
    12e6:	81 ca       	rjmp	.-2814   	; 0x7ea <main+0x1c8>
								circle_started_before = 1;
							}
							else if (bank == 1)
    12e8:	01 97       	sbiw	r24, 0x01	; 1
    12ea:	09 f0       	breq	.+2      	; 0x12ee <__stack+0x7ef>
    12ec:	7e ca       	rjmp	.-2820   	; 0x7ea <main+0x1c8>
							{
								//turnOffBlueLED();
								circle_right();
    12ee:	0e 94 02 03 	call	0x604	; 0x604 <circle_right>
    12f2:	7b ca       	rjmp	.-2826   	; 0x7ea <main+0x1c8>
								circle_started_before = 1;
							}								
						
						}		                 
					}
					else if (status_go_to_goal == 1)
    12f4:	6b 96       	adiw	r28, 0x1b	; 27
    12f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    12f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    12fa:	6b 97       	sbiw	r28, 0x1b	; 27
    12fc:	11 97       	sbiw	r26, 0x01	; 1
    12fe:	09 f0       	breq	.+2      	; 0x1302 <__stack+0x803>
    1300:	74 ca       	rjmp	.-2840   	; 0x7ea <main+0x1c8>
					{
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    1302:	66 27       	eor	r22, r22
    1304:	77 27       	eor	r23, r23
    1306:	6e 19       	sub	r22, r14
    1308:	7f 09       	sbc	r23, r15
    130a:	88 27       	eor	r24, r24
    130c:	77 fd       	sbrc	r23, 7
    130e:	80 95       	com	r24
    1310:	98 2f       	mov	r25, r24
    1312:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    1316:	6b 01       	movw	r12, r22
    1318:	7c 01       	movw	r14, r24
						
						}		                 
					}
					else if (status_go_to_goal == 1)
					{
						dir_x = goal_pos_x-x_robot;
    131a:	a5 96       	adiw	r28, 0x25	; 37
    131c:	6e ad       	ldd	r22, Y+62	; 0x3e
    131e:	7f ad       	ldd	r23, Y+63	; 0x3f
    1320:	a5 97       	sbiw	r28, 0x25	; 37
    1322:	60 1b       	sub	r22, r16
    1324:	71 0b       	sbc	r23, r17
    1326:	88 27       	eor	r24, r24
    1328:	77 fd       	sbrc	r23, 7
    132a:	80 95       	com	r24
    132c:	98 2f       	mov	r25, r24
    132e:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1332:	90 58       	subi	r25, 0x80	; 128
    1334:	a7 01       	movw	r20, r14
    1336:	96 01       	movw	r18, r12
    1338:	0e 94 6d 18 	call	0x30da	; 0x30da <atan2>
    133c:	20 e0       	ldi	r18, 0x00	; 0
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	44 e3       	ldi	r20, 0x34	; 52
    1342:	53 e4       	ldi	r21, 0x43	; 67
    1344:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    1348:	2b ed       	ldi	r18, 0xDB	; 219
    134a:	3f e0       	ldi	r19, 0x0F	; 15
    134c:	49 e4       	ldi	r20, 0x49	; 73
    134e:	50 e4       	ldi	r21, 0x40	; 64
    1350:	0e 94 c7 18 	call	0x318e	; 0x318e <__divsf3>
    1354:	a6 96       	adiw	r28, 0x26	; 38
    1356:	6f af       	std	Y+63, r22	; 0x3f
    1358:	a6 97       	sbiw	r28, 0x26	; 38
    135a:	a7 96       	adiw	r28, 0x27	; 39
    135c:	7f af       	std	Y+63, r23	; 0x3f
    135e:	a7 97       	sbiw	r28, 0x27	; 39
    1360:	a8 96       	adiw	r28, 0x28	; 40
    1362:	8f af       	std	Y+63, r24	; 0x3f
    1364:	a8 97       	sbiw	r28, 0x28	; 40
    1366:	a9 96       	adiw	r28, 0x29	; 41
    1368:	9f af       	std	Y+63, r25	; 0x3f
    136a:	a9 97       	sbiw	r28, 0x29	; 41
					
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    136c:	9e 01       	movw	r18, r28
    136e:	2b 5f       	subi	r18, 0xFB	; 251
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	ae 01       	movw	r20, r28
    1374:	4f 5f       	subi	r20, 0xFF	; 255
    1376:	5f 4f       	sbci	r21, 0xFF	; 255
    1378:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
					
						move_robot_after_get_puck(bank,diff_theta);
    137c:	69 81       	ldd	r22, Y+1	; 0x01
    137e:	7a 81       	ldd	r23, Y+2	; 0x02
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	9e 81       	ldd	r25, Y+6	; 0x06
    138c:	0e 94 88 02 	call	0x510	; 0x510 <move_robot_after_get_puck>
    1390:	2c ca       	rjmp	.-2984   	; 0x7ea <main+0x1c8>
                    
                    // --------------------------------------------------------------
					// BLUE LED STATE
					// --------------------------------------------------------------
				case BLUE_LED_STATE:
					stop_motor();
    1392:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					turnOnBlueLED();
    1396:	0e 94 04 0a 	call	0x1408	; 0x1408 <turnOnBlueLED>
    139a:	bf eb       	ldi	r27, 0xBF	; 191
    139c:	e7 e2       	ldi	r30, 0x27	; 39
    139e:	f9 e0       	ldi	r31, 0x09	; 9
    13a0:	b1 50       	subi	r27, 0x01	; 1
    13a2:	e0 40       	sbci	r30, 0x00	; 0
    13a4:	f0 40       	sbci	r31, 0x00	; 0
    13a6:	e1 f7       	brne	.-8      	; 0x13a0 <__stack+0x8a1>
    13a8:	00 c0       	rjmp	.+0      	; 0x13aa <__stack+0x8ab>
    13aa:	00 00       	nop
					m_wait(3000);
					turnOffBlueLED();
    13ac:	0e 94 06 0a 	call	0x140c	; 0x140c <turnOffBlueLED>
					state = STOP_STATE;
    13b0:	85 e1       	ldi	r24, 0x15	; 21
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	90 93 0d 01 	sts	0x010D, r25
    13b8:	80 93 0c 01 	sts	0x010C, r24
					break;
    13bc:	16 ca       	rjmp	.-3028   	; 0x7ea <main+0x1c8>
					// --------------------------------------------------------------
					// STOP STATE
					// --------------------------------------------------------------
				case STOP_STATE:
					//m_green(ON);
					turnOffBlueLED();
    13be:	0e 94 06 0a 	call	0x140c	; 0x140c <turnOffBlueLED>
					stop_motor();
    13c2:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					break;
    13c6:	11 ca       	rjmp	.-3038   	; 0x7ea <main+0x1c8>
                    
					// --------------------------------------------------------------
					// DEFAULT STATE
					// --------------------------------------------------------------
				default:
					stop_motor();
    13c8:	0e 94 cc 02 	call	0x598	; 0x598 <stop_motor>
					break;
    13cc:	0e ca       	rjmp	.-3044   	; 0x7ea <main+0x1c8>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    13ce:	ee 24       	eor	r14, r14
    13d0:	e3 94       	inc	r14
    13d2:	f1 2c       	mov	r15, r1
    13d4:	14 cb       	rjmp	.-2520   	; 0x9fe <main+0x3dc>
                case(6):
                    PT7_have_puck = ADC;
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
    13d6:	d3 01       	movw	r26, r6
    13d8:	8c 91       	ld	r24, X
    13da:	80 61       	ori	r24, 0x10	; 16
    13dc:	8c 93       	st	X, r24
    13de:	0c cb       	rjmp	.-2536   	; 0x9f8 <main+0x3d6>

000013e0 <__vector_41>:

// --------------------------------------------------------------
// INTERRUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    13e0:	1f 92       	push	r1
    13e2:	0f 92       	push	r0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	0f 92       	push	r0
    13e8:	11 24       	eor	r1, r1
    13ea:	8f 93       	push	r24
    13ec:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	90 93 0f 01 	sts	0x010F, r25
    13f6:	80 93 0e 01 	sts	0x010E, r24
}
    13fa:	9f 91       	pop	r25
    13fc:	8f 91       	pop	r24
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0
    1404:	1f 90       	pop	r1
    1406:	18 95       	reti

00001408 <turnOnBlueLED>:
#include "Init_functions.h"
#include "m_general.h"

void turnOnBlueLED(void)
{
	set(PORTD,5);
    1408:	5d 9a       	sbi	0x0b, 5	; 11
    140a:	08 95       	ret

0000140c <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
    140c:	5d 98       	cbi	0x0b, 5	; 11
    140e:	08 95       	ret

00001410 <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
    1410:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
    1412:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
    1414:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
    1416:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
    1418:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
    141a:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
    141c:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
    141e:	5d 98       	cbi	0x0b, 5	; 11
    1420:	08 95       	ret

00001422 <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
    1422:	ea e7       	ldi	r30, 0x7A	; 122
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	20 81       	ld	r18, Z
    1428:	2f 77       	andi	r18, 0x7F	; 127
    142a:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
    142c:	83 30       	cpi	r24, 0x03	; 3
    142e:	91 05       	cpc	r25, r1
    1430:	09 f4       	brne	.+2      	; 0x1434 <get_analog_val+0x12>
    1432:	49 c0       	rjmp	.+146    	; 0x14c6 <get_analog_val+0xa4>
    1434:	3c f4       	brge	.+14     	; 0x1444 <get_analog_val+0x22>
    1436:	81 30       	cpi	r24, 0x01	; 1
    1438:	91 05       	cpc	r25, r1
    143a:	19 f1       	breq	.+70     	; 0x1482 <get_analog_val+0x60>
    143c:	9c f5       	brge	.+102    	; 0x14a4 <get_analog_val+0x82>
    143e:	89 2b       	or	r24, r25
    1440:	79 f0       	breq	.+30     	; 0x1460 <get_analog_val+0x3e>
    1442:	95 c0       	rjmp	.+298    	; 0x156e <get_analog_val+0x14c>
    1444:	85 30       	cpi	r24, 0x05	; 5
    1446:	91 05       	cpc	r25, r1
    1448:	09 f4       	brne	.+2      	; 0x144c <get_analog_val+0x2a>
    144a:	5f c0       	rjmp	.+190    	; 0x150a <get_analog_val+0xe8>
    144c:	0c f4       	brge	.+2      	; 0x1450 <get_analog_val+0x2e>
    144e:	4c c0       	rjmp	.+152    	; 0x14e8 <get_analog_val+0xc6>
    1450:	86 30       	cpi	r24, 0x06	; 6
    1452:	91 05       	cpc	r25, r1
    1454:	09 f4       	brne	.+2      	; 0x1458 <get_analog_val+0x36>
    1456:	6a c0       	rjmp	.+212    	; 0x152c <get_analog_val+0x10a>
    1458:	07 97       	sbiw	r24, 0x07	; 7
    145a:	09 f0       	breq	.+2      	; 0x145e <get_analog_val+0x3c>
    145c:	88 c0       	rjmp	.+272    	; 0x156e <get_analog_val+0x14c>
    145e:	77 c0       	rjmp	.+238    	; 0x154e <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
    1460:	eb e7       	ldi	r30, 0x7B	; 123
    1462:	f0 e0       	ldi	r31, 0x00	; 0
    1464:	80 81       	ld	r24, Z
    1466:	8f 7d       	andi	r24, 0xDF	; 223
    1468:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    146a:	ec e7       	ldi	r30, 0x7C	; 124
    146c:	f0 e0       	ldi	r31, 0x00	; 0
    146e:	80 81       	ld	r24, Z
    1470:	8b 7f       	andi	r24, 0xFB	; 251
    1472:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1474:	80 81       	ld	r24, Z
    1476:	8d 7f       	andi	r24, 0xFD	; 253
    1478:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    147a:	80 81       	ld	r24, Z
    147c:	8e 7f       	andi	r24, 0xFE	; 254
    147e:	80 83       	st	Z, r24
            break;
    1480:	76 c0       	rjmp	.+236    	; 0x156e <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
    1482:	eb e7       	ldi	r30, 0x7B	; 123
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8f 7d       	andi	r24, 0xDF	; 223
    148a:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    148c:	ec e7       	ldi	r30, 0x7C	; 124
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	8b 7f       	andi	r24, 0xFB	; 251
    1494:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1496:	80 81       	ld	r24, Z
    1498:	8d 7f       	andi	r24, 0xFD	; 253
    149a:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    149c:	80 81       	ld	r24, Z
    149e:	81 60       	ori	r24, 0x01	; 1
    14a0:	80 83       	st	Z, r24
            break;
    14a2:	65 c0       	rjmp	.+202    	; 0x156e <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
    14a4:	eb e7       	ldi	r30, 0x7B	; 123
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	8f 7d       	andi	r24, 0xDF	; 223
    14ac:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    14ae:	ec e7       	ldi	r30, 0x7C	; 124
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	84 60       	ori	r24, 0x04	; 4
    14b6:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    14b8:	80 81       	ld	r24, Z
    14ba:	8d 7f       	andi	r24, 0xFD	; 253
    14bc:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    14be:	80 81       	ld	r24, Z
    14c0:	8e 7f       	andi	r24, 0xFE	; 254
    14c2:	80 83       	st	Z, r24
            break;
    14c4:	54 c0       	rjmp	.+168    	; 0x156e <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
    14c6:	eb e7       	ldi	r30, 0x7B	; 123
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	8f 7d       	andi	r24, 0xDF	; 223
    14ce:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    14d0:	ec e7       	ldi	r30, 0x7C	; 124
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	84 60       	ori	r24, 0x04	; 4
    14d8:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    14da:	80 81       	ld	r24, Z
    14dc:	8d 7f       	andi	r24, 0xFD	; 253
    14de:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    14e0:	80 81       	ld	r24, Z
    14e2:	81 60       	ori	r24, 0x01	; 1
    14e4:	80 83       	st	Z, r24
            break;
    14e6:	43 c0       	rjmp	.+134    	; 0x156e <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
    14e8:	eb e7       	ldi	r30, 0x7B	; 123
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	8f 7d       	andi	r24, 0xDF	; 223
    14f0:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    14f2:	ec e7       	ldi	r30, 0x7C	; 124
    14f4:	f0 e0       	ldi	r31, 0x00	; 0
    14f6:	80 81       	ld	r24, Z
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    14fc:	80 81       	ld	r24, Z
    14fe:	82 60       	ori	r24, 0x02	; 2
    1500:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1502:	80 81       	ld	r24, Z
    1504:	8e 7f       	andi	r24, 0xFE	; 254
    1506:	80 83       	st	Z, r24
            break;
    1508:	32 c0       	rjmp	.+100    	; 0x156e <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
    150a:	eb e7       	ldi	r30, 0x7B	; 123
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	8f 7d       	andi	r24, 0xDF	; 223
    1512:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    1514:	ec e7       	ldi	r30, 0x7C	; 124
    1516:	f0 e0       	ldi	r31, 0x00	; 0
    1518:	80 81       	ld	r24, Z
    151a:	84 60       	ori	r24, 0x04	; 4
    151c:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    151e:	80 81       	ld	r24, Z
    1520:	82 60       	ori	r24, 0x02	; 2
    1522:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1524:	80 81       	ld	r24, Z
    1526:	81 60       	ori	r24, 0x01	; 1
    1528:	80 83       	st	Z, r24
            break;
    152a:	21 c0       	rjmp	.+66     	; 0x156e <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
    152c:	eb e7       	ldi	r30, 0x7B	; 123
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	80 62       	ori	r24, 0x20	; 32
    1534:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1536:	ec e7       	ldi	r30, 0x7C	; 124
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8b 7f       	andi	r24, 0xFB	; 251
    153e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1540:	80 81       	ld	r24, Z
    1542:	8d 7f       	andi	r24, 0xFD	; 253
    1544:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1546:	80 81       	ld	r24, Z
    1548:	8e 7f       	andi	r24, 0xFE	; 254
    154a:	80 83       	st	Z, r24
            break;
    154c:	10 c0       	rjmp	.+32     	; 0x156e <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
    154e:	eb e7       	ldi	r30, 0x7B	; 123
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	80 62       	ori	r24, 0x20	; 32
    1556:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1558:	ec e7       	ldi	r30, 0x7C	; 124
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	8b 7f       	andi	r24, 0xFB	; 251
    1560:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1562:	80 81       	ld	r24, Z
    1564:	8d 7f       	andi	r24, 0xFD	; 253
    1566:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1568:	80 81       	ld	r24, Z
    156a:	81 60       	ori	r24, 0x01	; 1
    156c:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
    156e:	ea e7       	ldi	r30, 0x7A	; 122
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	80 68       	ori	r24, 0x80	; 128
    1576:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
    1578:	80 81       	ld	r24, Z
    157a:	80 64       	ori	r24, 0x40	; 64
    157c:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
    157e:	80 81       	ld	r24, Z
    1580:	80 61       	ori	r24, 0x10	; 16
    1582:	80 83       	st	Z, r24
    1584:	08 95       	ret

00001586 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 125;
    1586:	8d e7       	ldi	r24, 0x7D	; 125
    1588:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    158c:	e3 ec       	ldi	r30, 0xC3	; 195
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	8d 7f       	andi	r24, 0xFD	; 253
    1594:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    1596:	80 81       	ld	r24, Z
    1598:	8e 7f       	andi	r24, 0xFE	; 254
    159a:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    159c:	e2 e7       	ldi	r30, 0x72	; 114
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	80 81       	ld	r24, Z
    15a2:	84 60       	ori	r24, 0x04	; 4
    15a4:	80 83       	st	Z, r24
    
    //Set prescaler to /256
    set(TCCR4B,CS43);
    15a6:	e1 ec       	ldi	r30, 0xC1	; 193
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	88 60       	ori	r24, 0x08	; 8
    15ae:	80 83       	st	Z, r24
    clear(TCCR4B,CS42);
    15b0:	80 81       	ld	r24, Z
    15b2:	8b 7f       	andi	r24, 0xFB	; 251
    15b4:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    15b6:	80 81       	ld	r24, Z
    15b8:	8d 7f       	andi	r24, 0xFD	; 253
    15ba:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    15bc:	80 81       	ld	r24, Z
    15be:	81 60       	ori	r24, 0x01	; 1
    15c0:	80 83       	st	Z, r24
    15c2:	08 95       	ret

000015c4 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    15c4:	ec e7       	ldi	r30, 0x7C	; 124
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	8f 77       	andi	r24, 0x7F	; 127
    15cc:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    15ce:	80 81       	ld	r24, Z
    15d0:	80 64       	ori	r24, 0x40	; 64
    15d2:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    15d4:	aa e7       	ldi	r26, 0x7A	; 122
    15d6:	b0 e0       	ldi	r27, 0x00	; 0
    15d8:	8c 91       	ld	r24, X
    15da:	84 60       	ori	r24, 0x04	; 4
    15dc:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    15de:	8c 91       	ld	r24, X
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    15e4:	8c 91       	ld	r24, X
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    15ea:	ee e7       	ldi	r30, 0x7E	; 126
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	81 60       	ori	r24, 0x01	; 1
    15f2:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    15f4:	80 81       	ld	r24, Z
    15f6:	82 60       	ori	r24, 0x02	; 2
    15f8:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    15fa:	80 81       	ld	r24, Z
    15fc:	80 61       	ori	r24, 0x10	; 16
    15fe:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    1600:	80 81       	ld	r24, Z
    1602:	80 62       	ori	r24, 0x20	; 32
    1604:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    1606:	80 81       	ld	r24, Z
    1608:	80 64       	ori	r24, 0x40	; 64
    160a:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    160c:	80 81       	ld	r24, Z
    160e:	80 68       	ori	r24, 0x80	; 128
    1610:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    1612:	ed e7       	ldi	r30, 0x7D	; 125
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	81 60       	ori	r24, 0x01	; 1
    161a:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    161c:	80 81       	ld	r24, Z
    161e:	82 60       	ori	r24, 0x02	; 2
    1620:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    1622:	8c 91       	ld	r24, X
    1624:	80 62       	ori	r24, 0x20	; 32
    1626:	8c 93       	st	X, r24
    1628:	08 95       	ret

0000162a <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    162a:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    162c:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    162e:	88 e8       	ldi	r24, 0x88	; 136
    1630:	93 e1       	ldi	r25, 0x13	; 19
    1632:	90 93 89 00 	sts	0x0089, r25
    1636:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 4000;
    163a:	80 ea       	ldi	r24, 0xA0	; 160
    163c:	9f e0       	ldi	r25, 0x0F	; 15
    163e:	90 93 8b 00 	sts	0x008B, r25
    1642:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = 4000;
    1646:	90 93 8d 00 	sts	0x008D, r25
    164a:	80 93 8c 00 	sts	0x008C, r24
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    164e:	a1 e8       	ldi	r26, 0x81	; 129
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	8c 91       	ld	r24, X
    1654:	80 61       	ori	r24, 0x10	; 16
    1656:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    1658:	8c 91       	ld	r24, X
    165a:	88 60       	ori	r24, 0x08	; 8
    165c:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    165e:	e0 e8       	ldi	r30, 0x80	; 128
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	80 81       	ld	r24, Z
    1664:	82 60       	ori	r24, 0x02	; 2
    1666:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    1668:	80 81       	ld	r24, Z
    166a:	81 60       	ori	r24, 0x01	; 1
    166c:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    166e:	80 81       	ld	r24, Z
    1670:	80 62       	ori	r24, 0x20	; 32
    1672:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    1674:	80 81       	ld	r24, Z
    1676:	8f 7e       	andi	r24, 0xEF	; 239
    1678:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    167a:	80 81       	ld	r24, Z
    167c:	88 60       	ori	r24, 0x08	; 8
    167e:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    1680:	80 81       	ld	r24, Z
    1682:	8b 7f       	andi	r24, 0xFB	; 251
    1684:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    1686:	8c 91       	ld	r24, X
    1688:	8b 7f       	andi	r24, 0xFB	; 251
    168a:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    168c:	8c 91       	ld	r24, X
    168e:	8d 7f       	andi	r24, 0xFD	; 253
    1690:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    1692:	8c 91       	ld	r24, X
    1694:	81 60       	ori	r24, 0x01	; 1
    1696:	8c 93       	st	X, r24
    1698:	08 95       	ret

0000169a <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    169a:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    169c:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    169e:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    16a0:	8c e0       	ldi	r24, 0x0C	; 12
    16a2:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    16a6:	e9 e6       	ldi	r30, 0x69	; 105
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 62       	ori	r24, 0x20	; 32
    16ae:	80 83       	st	Z, r24
    16b0:	80 81       	ld	r24, Z
    16b2:	8f 7e       	andi	r24, 0xEF	; 239
    16b4:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    16b6:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    16b8:	78 94       	sei
    16ba:	08 95       	ret

000016bc <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    16bc:	1f 93       	push	r17
    16be:	cf 93       	push	r28
    16c0:	df 93       	push	r29
    16c2:	18 2f       	mov	r17, r24
    16c4:	d6 2f       	mov	r29, r22
    16c6:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    16c8:	0e 94 4d 0b 	call	0x169a	; 0x169a <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    16cc:	94 ea       	ldi	r25, 0xA4	; 164
    16ce:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    16d2:	ec eb       	ldi	r30, 0xBC	; 188
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	90 81       	ld	r25, Z
    16d8:	99 23       	and	r25, r25
    16da:	ec f7       	brge	.-6      	; 0x16d6 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    16dc:	90 e5       	ldi	r25, 0x50	; 80
    16de:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    16e2:	94 e8       	ldi	r25, 0x84	; 132
    16e4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    16e8:	ec eb       	ldi	r30, 0xBC	; 188
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	90 81       	ld	r25, Z
    16ee:	99 23       	and	r25, r25
    16f0:	ec f7       	brge	.-6      	; 0x16ec <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    16f2:	90 91 b9 00 	lds	r25, 0x00B9
    16f6:	98 7f       	andi	r25, 0xF8	; 248
    16f8:	90 32       	cpi	r25, 0x20	; 32
    16fa:	29 f4       	brne	.+10     	; 0x1706 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    16fc:	84 e9       	ldi	r24, 0x94	; 148
    16fe:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	2d c0       	rjmp	.+90     	; 0x1760 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    170c:	84 e8       	ldi	r24, 0x84	; 132
    170e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1712:	ec eb       	ldi	r30, 0xBC	; 188
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	90 81       	ld	r25, Z
    1718:	99 23       	and	r25, r25
    171a:	ec f7       	brge	.-6      	; 0x1716 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    171c:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1720:	84 e8       	ldi	r24, 0x84	; 132
    1722:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1726:	ec eb       	ldi	r30, 0xBC	; 188
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	88 23       	and	r24, r24
    172e:	ec f7       	brge	.-6      	; 0x172a <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1730:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1734:	84 e8       	ldi	r24, 0x84	; 132
    1736:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    173a:	ec eb       	ldi	r30, 0xBC	; 188
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	88 23       	and	r24, r24
    1742:	ec f7       	brge	.-6      	; 0x173e <m_rf_open+0x82>
	
	TWDR = packet_length;
    1744:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1748:	84 e8       	ldi	r24, 0x84	; 132
    174a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    174e:	ec eb       	ldi	r30, 0xBC	; 188
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	88 23       	and	r24, r24
    1756:	ec f7       	brge	.-6      	; 0x1752 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1758:	84 e9       	ldi	r24, 0x94	; 148
    175a:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    175e:	81 e0       	ldi	r24, 0x01	; 1
}
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	08 95       	ret

00001768 <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    1768:	cf 93       	push	r28
    176a:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    176c:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    176e:	94 ea       	ldi	r25, 0xA4	; 164
    1770:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1774:	ec eb       	ldi	r30, 0xBC	; 188
    1776:	f0 e0       	ldi	r31, 0x00	; 0
    1778:	90 81       	ld	r25, Z
    177a:	99 23       	and	r25, r25
    177c:	ec f7       	brge	.-6      	; 0x1778 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    177e:	90 e5       	ldi	r25, 0x50	; 80
    1780:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1784:	94 e8       	ldi	r25, 0x84	; 132
    1786:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    178a:	ec eb       	ldi	r30, 0xBC	; 188
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	90 81       	ld	r25, Z
    1790:	99 23       	and	r25, r25
    1792:	ec f7       	brge	.-6      	; 0x178e <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1794:	90 91 b9 00 	lds	r25, 0x00B9
    1798:	98 7f       	andi	r25, 0xF8	; 248
    179a:	90 32       	cpi	r25, 0x20	; 32
    179c:	31 f4       	brne	.+12     	; 0x17aa <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    179e:	84 e9       	ldi	r24, 0x94	; 148
    17a0:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    17a4:	78 94       	sei
		return 0;
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	32 c0       	rjmp	.+100    	; 0x180e <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    17aa:	93 e0       	ldi	r25, 0x03	; 3
    17ac:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    17b0:	94 e8       	ldi	r25, 0x84	; 132
    17b2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    17b6:	ec eb       	ldi	r30, 0xBC	; 188
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	90 81       	ld	r25, Z
    17bc:	99 23       	and	r25, r25
    17be:	ec f7       	brge	.-6      	; 0x17ba <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    17c0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    17c4:	84 e8       	ldi	r24, 0x84	; 132
    17c6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    17ca:	ec eb       	ldi	r30, 0xBC	; 188
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	88 23       	and	r24, r24
    17d2:	ec f7       	brge	.-6      	; 0x17ce <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    17d4:	24 2f       	mov	r18, r20
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	12 16       	cp	r1, r18
    17da:	13 06       	cpc	r1, r19
    17dc:	9c f4       	brge	.+38     	; 0x1804 <m_rf_send+0x9c>
    17de:	a6 2f       	mov	r26, r22
    17e0:	b7 2f       	mov	r27, r23
    17e2:	80 e0       	ldi	r24, 0x00	; 0
    17e4:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    17e6:	cb eb       	ldi	r28, 0xBB	; 187
    17e8:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    17ea:	ec eb       	ldi	r30, 0xBC	; 188
    17ec:	f0 e0       	ldi	r31, 0x00	; 0
    17ee:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    17f0:	4d 91       	ld	r20, X+
    17f2:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    17f4:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    17f6:	40 81       	ld	r20, Z
    17f8:	44 23       	and	r20, r20
    17fa:	ec f7       	brge	.-6      	; 0x17f6 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	82 17       	cp	r24, r18
    1800:	93 07       	cpc	r25, r19
    1802:	b4 f3       	brlt	.-20     	; 0x17f0 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1804:	84 e9       	ldi	r24, 0x94	; 148
    1806:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    180a:	78 94       	sei
	
	return 1;
    180c:	81 e0       	ldi	r24, 0x01	; 1
}
    180e:	df 91       	pop	r29
    1810:	cf 91       	pop	r28
    1812:	08 95       	ret

00001814 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1814:	1f 92       	push	r1
    1816:	0f 92       	push	r0
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	0f 92       	push	r0
    181c:	11 24       	eor	r1, r1
    181e:	8f 93       	push	r24
    1820:	9f 93       	push	r25
    1822:	ef 93       	push	r30
    1824:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    1826:	e1 ee       	ldi	r30, 0xE1	; 225
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
        UDINT = 0;
    182c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    182e:	83 ff       	sbrs	r24, 3
    1830:	11 c0       	rjmp	.+34     	; 0x1854 <__vector_10+0x40>
		UENUM = 0;
    1832:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    183c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1840:	92 e1       	ldi	r25, 0x12	; 18
    1842:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    1846:	98 e0       	ldi	r25, 0x08	; 8
    1848:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    184c:	10 92 29 01 	sts	0x0129, r1
		cdc_line_rtsdtr = 0;
    1850:	10 92 2a 01 	sts	0x012A, r1
        }
	if (intbits & (1<<SOFI)) {
    1854:	82 ff       	sbrs	r24, 2
    1856:	13 c0       	rjmp	.+38     	; 0x187e <__vector_10+0x6a>
		if (usb_configuration) {
    1858:	80 91 29 01 	lds	r24, 0x0129
    185c:	88 23       	and	r24, r24
    185e:	79 f0       	breq	.+30     	; 0x187e <__vector_10+0x6a>
			t = transmit_flush_timer;
    1860:	80 91 28 01 	lds	r24, 0x0128
			if (t) {
    1864:	88 23       	and	r24, r24
    1866:	59 f0       	breq	.+22     	; 0x187e <__vector_10+0x6a>
				transmit_flush_timer = --t;
    1868:	81 50       	subi	r24, 0x01	; 1
    186a:	80 93 28 01 	sts	0x0128, r24
				if (!t) {
    186e:	81 11       	cpse	r24, r1
    1870:	06 c0       	rjmp	.+12     	; 0x187e <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    1872:	84 e0       	ldi	r24, 0x04	; 4
    1874:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    1878:	8a e3       	ldi	r24, 0x3A	; 58
    187a:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	9f 91       	pop	r25
    1884:	8f 91       	pop	r24
    1886:	0f 90       	pop	r0
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	0f 90       	pop	r0
    188c:	1f 90       	pop	r1
    188e:	18 95       	reti

00001890 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    1890:	1f 92       	push	r1
    1892:	0f 92       	push	r0
    1894:	0f b6       	in	r0, 0x3f	; 63
    1896:	0f 92       	push	r0
    1898:	11 24       	eor	r1, r1
    189a:	0f 93       	push	r16
    189c:	1f 93       	push	r17
    189e:	2f 93       	push	r18
    18a0:	3f 93       	push	r19
    18a2:	4f 93       	push	r20
    18a4:	5f 93       	push	r21
    18a6:	6f 93       	push	r22
    18a8:	7f 93       	push	r23
    18aa:	8f 93       	push	r24
    18ac:	9f 93       	push	r25
    18ae:	af 93       	push	r26
    18b0:	bf 93       	push	r27
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	ef 93       	push	r30
    18b8:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    18ba:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    18be:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    18c2:	83 ff       	sbrs	r24, 3
    18c4:	51 c1       	rjmp	.+674    	; 0x1b68 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    18c6:	e1 ef       	ldi	r30, 0xF1	; 241
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    18cc:	40 81       	ld	r20, Z
                wValue = UEDATX;
    18ce:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    18d0:	30 81       	ld	r19, Z
    18d2:	93 2f       	mov	r25, r19
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	dc 01       	movw	r26, r24
    18d8:	a2 2b       	or	r26, r18
    18da:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    18dc:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    18de:	60 81       	ld	r22, Z
    18e0:	96 2f       	mov	r25, r22
    18e2:	80 e0       	ldi	r24, 0x00	; 0
    18e4:	85 2b       	or	r24, r21
                wLength = UEDATX;
    18e6:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    18e8:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    18ea:	52 ef       	ldi	r21, 0xF2	; 242
    18ec:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    18f0:	46 30       	cpi	r20, 0x06	; 6
    18f2:	09 f0       	breq	.+2      	; 0x18f6 <__vector_11+0x66>
    18f4:	5c c0       	rjmp	.+184    	; 0x19ae <__vector_11+0x11e>
    18f6:	04 c0       	rjmp	.+8      	; 0x1900 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    18f8:	81 e2       	ldi	r24, 0x21	; 33
    18fa:	80 93 eb 00 	sts	0x00EB, r24
					return;
    18fe:	3b c1       	rjmp	.+630    	; 0x1b76 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1900:	c6 e0       	ldi	r28, 0x06	; 6
    1902:	47 ef       	ldi	r20, 0xF7	; 247
    1904:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    1906:	fa 01       	movw	r30, r20
    1908:	65 91       	lpm	r22, Z+
    190a:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    190c:	26 17       	cp	r18, r22
    190e:	37 07       	cpc	r19, r23
    1910:	19 f0       	breq	.+6      	; 0x1918 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1912:	49 5f       	subi	r20, 0xF9	; 249
    1914:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    1916:	20 c0       	rjmp	.+64     	; 0x1958 <__vector_11+0xc8>
				}
				list += 2;
    1918:	fa 01       	movw	r30, r20
    191a:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    191c:	65 91       	lpm	r22, Z+
    191e:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1920:	86 17       	cp	r24, r22
    1922:	97 07       	cpc	r25, r23
    1924:	19 f0       	breq	.+6      	; 0x192c <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    1926:	49 5f       	subi	r20, 0xF9	; 249
    1928:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    192a:	16 c0       	rjmp	.+44     	; 0x1958 <__vector_11+0xc8>
				}
				list += 2;
    192c:	fa 01       	movw	r30, r20
    192e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1930:	85 91       	lpm	r24, Z+
    1932:	94 91       	lpm	r25, Z
    1934:	28 2f       	mov	r18, r24
    1936:	39 2f       	mov	r19, r25
				list += 2;
    1938:	fa 01       	movw	r30, r20
    193a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    193c:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    193e:	9b 2f       	mov	r25, r27
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1944:	8f 3f       	cpi	r24, 0xFF	; 255
    1946:	91 05       	cpc	r25, r1
    1948:	19 f0       	breq	.+6      	; 0x1950 <__vector_11+0xc0>
    194a:	10 f0       	brcs	.+4      	; 0x1950 <__vector_11+0xc0>
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	90 e0       	ldi	r25, 0x00	; 0
    1950:	84 17       	cp	r24, r20
    1952:	28 f4       	brcc	.+10     	; 0x195e <__vector_11+0xce>
    1954:	48 2f       	mov	r20, r24
    1956:	03 c0       	rjmp	.+6      	; 0x195e <__vector_11+0xce>
    1958:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    195a:	a9 f6       	brne	.-86     	; 0x1906 <__vector_11+0x76>
    195c:	cd cf       	rjmp	.-102    	; 0x18f8 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    195e:	c8 ee       	ldi	r28, 0xE8	; 232
    1960:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1962:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    1964:	a1 ef       	ldi	r26, 0xF1	; 241
    1966:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1968:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    196a:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    196c:	98 2f       	mov	r25, r24
    196e:	95 70       	andi	r25, 0x05	; 5
    1970:	e1 f3       	breq	.-8      	; 0x196a <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    1972:	82 fd       	sbrc	r24, 2
    1974:	00 c1       	rjmp	.+512    	; 0x1b76 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    1976:	64 2f       	mov	r22, r20
    1978:	41 31       	cpi	r20, 0x11	; 17
    197a:	08 f0       	brcs	.+2      	; 0x197e <__vector_11+0xee>
    197c:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    197e:	66 23       	and	r22, r22
    1980:	09 f4       	brne	.+2      	; 0x1984 <__vector_11+0xf4>
    1982:	f6 c0       	rjmp	.+492    	; 0x1b70 <__vector_11+0x2e0>
    1984:	c9 01       	movw	r24, r18
    1986:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    1988:	fc 01       	movw	r30, r24
    198a:	01 96       	adiw	r24, 0x01	; 1
    198c:	e4 91       	lpm	r30, Z
    198e:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    1990:	51 50       	subi	r21, 0x01	; 1
    1992:	d1 f7       	brne	.-12     	; 0x1988 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    1994:	86 2f       	mov	r24, r22
    1996:	81 50       	subi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	28 0f       	add	r18, r24
    199e:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    19a0:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19a2:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    19a4:	41 11       	cpse	r20, r1
    19a6:	e1 cf       	rjmp	.-62     	; 0x196a <__vector_11+0xda>
    19a8:	60 31       	cpi	r22, 0x10	; 16
    19aa:	f9 f2       	breq	.-66     	; 0x196a <__vector_11+0xda>
    19ac:	e4 c0       	rjmp	.+456    	; 0x1b76 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    19ae:	45 30       	cpi	r20, 0x05	; 5
    19b0:	61 f4       	brne	.+24     	; 0x19ca <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19b2:	8e ef       	ldi	r24, 0xFE	; 254
    19b4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    19b8:	e8 ee       	ldi	r30, 0xE8	; 232
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	80 81       	ld	r24, Z
    19be:	80 ff       	sbrs	r24, 0
    19c0:	fd cf       	rjmp	.-6      	; 0x19bc <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    19c2:	20 68       	ori	r18, 0x80	; 128
    19c4:	20 93 e3 00 	sts	0x00E3, r18
			return;
    19c8:	d6 c0       	rjmp	.+428    	; 0x1b76 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    19ca:	49 30       	cpi	r20, 0x09	; 9
    19cc:	a1 f5       	brne	.+104    	; 0x1a36 <__vector_11+0x1a6>
    19ce:	71 11       	cpse	r23, r1
    19d0:	5b c0       	rjmp	.+182    	; 0x1a88 <__vector_11+0x1f8>
			usb_configuration = wValue;
    19d2:	20 93 29 01 	sts	0x0129, r18
			cdc_line_rtsdtr = 0;
    19d6:	10 92 2a 01 	sts	0x012A, r1
			transmit_flush_timer = 0;
    19da:	10 92 28 01 	sts	0x0128, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19de:	8e ef       	ldi	r24, 0xFE	; 254
    19e0:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    19e4:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    19e6:	81 e2       	ldi	r24, 0x21	; 33
    19e8:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    19ea:	c9 ee       	ldi	r28, 0xE9	; 233
    19ec:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    19ee:	ab ee       	ldi	r26, 0xEB	; 235
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    19f2:	6c ee       	ldi	r22, 0xEC	; 236
    19f4:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    19f6:	4d ee       	ldi	r20, 0xED	; 237
    19f8:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    19fa:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    19fc:	9c 01       	movw	r18, r24
    19fe:	2f 5f       	subi	r18, 0xFF	; 255
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	fc 01       	movw	r30, r24
    1a04:	04 91       	lpm	r16, Z
				UECONX = en;
    1a06:	0c 93       	st	X, r16
				if (en) {
    1a08:	00 23       	and	r16, r16
    1a0a:	59 f0       	breq	.+22     	; 0x1a22 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1a0c:	f9 01       	movw	r30, r18
    1a0e:	24 91       	lpm	r18, Z
    1a10:	fb 01       	movw	r30, r22
    1a12:	20 83       	st	Z, r18
    1a14:	fc 01       	movw	r30, r24
    1a16:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    1a18:	03 96       	adiw	r24, 0x03	; 3
    1a1a:	24 91       	lpm	r18, Z
    1a1c:	fa 01       	movw	r30, r20
    1a1e:	20 83       	st	Z, r18
    1a20:	01 c0       	rjmp	.+2      	; 0x1a24 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1a22:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1a24:	1f 5f       	subi	r17, 0xFF	; 255
    1a26:	15 30       	cpi	r17, 0x05	; 5
    1a28:	41 f7       	brne	.-48     	; 0x19fa <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    1a2a:	ea ee       	ldi	r30, 0xEA	; 234
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8e e1       	ldi	r24, 0x1E	; 30
    1a30:	80 83       	st	Z, r24
        		UERST = 0;
    1a32:	10 82       	st	Z, r1
			return;
    1a34:	a0 c0       	rjmp	.+320    	; 0x1b76 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    1a36:	48 30       	cpi	r20, 0x08	; 8
    1a38:	81 f4       	brne	.+32     	; 0x1a5a <__vector_11+0x1ca>
    1a3a:	70 38       	cpi	r23, 0x80	; 128
    1a3c:	09 f0       	breq	.+2      	; 0x1a40 <__vector_11+0x1b0>
    1a3e:	3f c0       	rjmp	.+126    	; 0x1abe <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a40:	e8 ee       	ldi	r30, 0xE8	; 232
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	80 ff       	sbrs	r24, 0
    1a48:	fd cf       	rjmp	.-6      	; 0x1a44 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    1a4a:	80 91 29 01 	lds	r24, 0x0129
    1a4e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a52:	8e ef       	ldi	r24, 0xFE	; 254
    1a54:	80 93 e8 00 	sts	0x00E8, r24
    1a58:	8e c0       	rjmp	.+284    	; 0x1b76 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    1a5a:	41 32       	cpi	r20, 0x21	; 33
    1a5c:	a9 f4       	brne	.+42     	; 0x1a88 <__vector_11+0x1f8>
    1a5e:	71 3a       	cpi	r23, 0xA1	; 161
    1a60:	f1 f5       	brne	.+124    	; 0x1ade <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1a62:	e8 ee       	ldi	r30, 0xE8	; 232
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	80 81       	ld	r24, Z
    1a68:	80 ff       	sbrs	r24, 0
    1a6a:	fd cf       	rjmp	.-6      	; 0x1a66 <__vector_11+0x1d6>
    1a6c:	e0 e0       	ldi	r30, 0x00	; 0
    1a6e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    1a70:	a1 ef       	ldi	r26, 0xF1	; 241
    1a72:	b0 e0       	ldi	r27, 0x00	; 0
    1a74:	81 91       	ld	r24, Z+
    1a76:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	e7 30       	cpi	r30, 0x07	; 7
    1a7c:	f4 07       	cpc	r31, r20
    1a7e:	d1 f7       	brne	.-12     	; 0x1a74 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1a80:	8e ef       	ldi	r24, 0xFE	; 254
    1a82:	80 93 e8 00 	sts	0x00E8, r24
    1a86:	77 c0       	rjmp	.+238    	; 0x1b76 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    1a88:	40 32       	cpi	r20, 0x20	; 32
    1a8a:	c9 f4       	brne	.+50     	; 0x1abe <__vector_11+0x22e>
    1a8c:	71 32       	cpi	r23, 0x21	; 33
    1a8e:	09 f0       	breq	.+2      	; 0x1a92 <__vector_11+0x202>
    1a90:	6b c0       	rjmp	.+214    	; 0x1b68 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    1a92:	e8 ee       	ldi	r30, 0xE8	; 232
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	82 ff       	sbrs	r24, 2
    1a9a:	fd cf       	rjmp	.-6      	; 0x1a96 <__vector_11+0x206>
    1a9c:	e0 e0       	ldi	r30, 0x00	; 0
    1a9e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    1aa0:	a1 ef       	ldi	r26, 0xF1	; 241
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	8c 91       	ld	r24, X
    1aa6:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    1aa8:	51 e0       	ldi	r21, 0x01	; 1
    1aaa:	e7 30       	cpi	r30, 0x07	; 7
    1aac:	f5 07       	cpc	r31, r21
    1aae:	d1 f7       	brne	.-12     	; 0x1aa4 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    1ab0:	e8 ee       	ldi	r30, 0xE8	; 232
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8b ef       	ldi	r24, 0xFB	; 251
    1ab6:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ab8:	8e ef       	ldi	r24, 0xFE	; 254
    1aba:	80 83       	st	Z, r24
    1abc:	5c c0       	rjmp	.+184    	; 0x1b76 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1abe:	42 32       	cpi	r20, 0x22	; 34
    1ac0:	71 f4       	brne	.+28     	; 0x1ade <__vector_11+0x24e>
    1ac2:	71 32       	cpi	r23, 0x21	; 33
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <__vector_11+0x238>
    1ac6:	50 c0       	rjmp	.+160    	; 0x1b68 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    1ac8:	20 93 2a 01 	sts	0x012A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1acc:	e8 ee       	ldi	r30, 0xE8	; 232
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	80 ff       	sbrs	r24, 0
    1ad4:	fd cf       	rjmp	.-6      	; 0x1ad0 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1ad6:	8e ef       	ldi	r24, 0xFE	; 254
    1ad8:	80 93 e8 00 	sts	0x00E8, r24
    1adc:	4c c0       	rjmp	.+152    	; 0x1b76 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1ade:	41 11       	cpse	r20, r1
    1ae0:	1a c0       	rjmp	.+52     	; 0x1b16 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1ae2:	e8 ee       	ldi	r30, 0xE8	; 232
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	20 81       	ld	r18, Z
    1ae8:	20 ff       	sbrs	r18, 0
    1aea:	fd cf       	rjmp	.-6      	; 0x1ae6 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1aec:	72 38       	cpi	r23, 0x82	; 130
    1aee:	51 f4       	brne	.+20     	; 0x1b04 <__vector_11+0x274>
				UENUM = wIndex;
    1af0:	e9 ee       	ldi	r30, 0xE9	; 233
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    1af6:	80 91 eb 00 	lds	r24, 0x00EB
    1afa:	85 fb       	bst	r24, 5
    1afc:	88 27       	eor	r24, r24
    1afe:	80 f9       	bld	r24, 0
				UENUM = 0;
    1b00:	10 82       	st	Z, r1
    1b02:	01 c0       	rjmp	.+2      	; 0x1b06 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1b04:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    1b06:	e1 ef       	ldi	r30, 0xF1	; 241
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 83       	st	Z, r24
			UEDATX = 0;
    1b0c:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b0e:	8e ef       	ldi	r24, 0xFE	; 254
    1b10:	80 93 e8 00 	sts	0x00E8, r24
    1b14:	30 c0       	rjmp	.+96     	; 0x1b76 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    1b16:	41 30       	cpi	r20, 0x01	; 1
    1b18:	11 f0       	breq	.+4      	; 0x1b1e <__vector_11+0x28e>
    1b1a:	43 30       	cpi	r20, 0x03	; 3
    1b1c:	29 f5       	brne	.+74     	; 0x1b68 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1b1e:	72 30       	cpi	r23, 0x02	; 2
    1b20:	19 f5       	brne	.+70     	; 0x1b68 <__vector_11+0x2d8>
    1b22:	23 2b       	or	r18, r19
    1b24:	09 f5       	brne	.+66     	; 0x1b68 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    1b26:	8f 77       	andi	r24, 0x7F	; 127
    1b28:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    1b2a:	38 2f       	mov	r19, r24
    1b2c:	31 50       	subi	r19, 0x01	; 1
    1b2e:	34 30       	cpi	r19, 0x04	; 4
    1b30:	d8 f4       	brcc	.+54     	; 0x1b68 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b32:	3e ef       	ldi	r19, 0xFE	; 254
    1b34:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    1b38:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1b3c:	43 30       	cpi	r20, 0x03	; 3
    1b3e:	21 f4       	brne	.+8      	; 0x1b48 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1b40:	81 e2       	ldi	r24, 0x21	; 33
    1b42:	80 93 eb 00 	sts	0x00EB, r24
    1b46:	17 c0       	rjmp	.+46     	; 0x1b76 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    1b48:	99 e1       	ldi	r25, 0x19	; 25
    1b4a:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1b4e:	21 e0       	ldi	r18, 0x01	; 1
    1b50:	30 e0       	ldi	r19, 0x00	; 0
    1b52:	d9 01       	movw	r26, r18
    1b54:	02 c0       	rjmp	.+4      	; 0x1b5a <__vector_11+0x2ca>
    1b56:	aa 0f       	add	r26, r26
    1b58:	bb 1f       	adc	r27, r27
    1b5a:	8a 95       	dec	r24
    1b5c:	e2 f7       	brpl	.-8      	; 0x1b56 <__vector_11+0x2c6>
    1b5e:	ea ee       	ldi	r30, 0xEA	; 234
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	a0 83       	st	Z, r26
					UERST = 0;
    1b64:	10 82       	st	Z, r1
    1b66:	07 c0       	rjmp	.+14     	; 0x1b76 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    1b68:	81 e2       	ldi	r24, 0x21	; 33
    1b6a:	80 93 eb 00 	sts	0x00EB, r24
    1b6e:	03 c0       	rjmp	.+6      	; 0x1b76 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1b70:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    1b72:	41 11       	cpse	r20, r1
    1b74:	fa ce       	rjmp	.-524    	; 0x196a <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    1b76:	ff 91       	pop	r31
    1b78:	ef 91       	pop	r30
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	bf 91       	pop	r27
    1b80:	af 91       	pop	r26
    1b82:	9f 91       	pop	r25
    1b84:	8f 91       	pop	r24
    1b86:	7f 91       	pop	r23
    1b88:	6f 91       	pop	r22
    1b8a:	5f 91       	pop	r21
    1b8c:	4f 91       	pop	r20
    1b8e:	3f 91       	pop	r19
    1b90:	2f 91       	pop	r18
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	0f 90       	pop	r0
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	0f 90       	pop	r0
    1b9c:	1f 90       	pop	r1
    1b9e:	18 95       	reti

00001ba0 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1ba0:	20 e0       	ldi	r18, 0x00	; 0
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1ba4:	ec eb       	ldi	r30, 0xBC	; 188
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	88 23       	and	r24, r24
    1bac:	34 f0       	brlt	.+12     	; 0x1bba <twi_wait+0x1a>
    1bae:	2f 5f       	subi	r18, 0xFF	; 255
    1bb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1bb2:	29 3e       	cpi	r18, 0xE9	; 233
    1bb4:	83 e0       	ldi	r24, 0x03	; 3
    1bb6:	38 07       	cpc	r19, r24
    1bb8:	b9 f7       	brne	.-18     	; 0x1ba8 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1bba:	81 e0       	ldi	r24, 0x01	; 1
    1bbc:	28 3e       	cpi	r18, 0xE8	; 232
    1bbe:	33 40       	sbci	r19, 0x03	; 3
    1bc0:	09 f4       	brne	.+2      	; 0x1bc4 <twi_wait+0x24>
    1bc2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1bc4:	08 95       	ret

00001bc6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1bc6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1bca:	84 e8       	ldi	r24, 0x84	; 132
    1bcc:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1bd0:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <twi_wait>
    1bd4:	88 23       	and	r24, r24
    1bd6:	21 f0       	breq	.+8      	; 0x1be0 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1bd8:	80 91 b9 00 	lds	r24, 0x00B9
    1bdc:	88 7f       	andi	r24, 0xF8	; 248
    1bde:	08 95       	ret
	} else {
		return 0;					// comm failure
    1be0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1be2:	08 95       	ret

00001be4 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1be4:	cf 93       	push	r28
    1be6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1be8:	94 ea       	ldi	r25, 0xA4	; 164
    1bea:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1bee:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <twi_wait>
    1bf2:	88 23       	and	r24, r24
    1bf4:	61 f0       	breq	.+24     	; 0x1c0e <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1bf6:	8c 2f       	mov	r24, r28
    1bf8:	88 0f       	add	r24, r24
    1bfa:	8f 5f       	subi	r24, 0xFF	; 255
    1bfc:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1c00:	88 34       	cpi	r24, 0x48	; 72
    1c02:	39 f4       	brne	.+14     	; 0x1c12 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1c04:	84 e9       	ldi	r24, 0x94	; 148
    1c06:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	03 c0       	rjmp	.+6      	; 0x1c14 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	01 c0       	rjmp	.+2      	; 0x1c14 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1c12:	81 e0       	ldi	r24, 0x01	; 1
}	
    1c14:	cf 91       	pop	r28
    1c16:	08 95       	ret

00001c18 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1c18:	cf 93       	push	r28
    1c1a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1c1c:	94 ea       	ldi	r25, 0xA4	; 164
    1c1e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1c22:	0e 94 d0 0d 	call	0x1ba0	; 0x1ba0 <twi_wait>
    1c26:	88 23       	and	r24, r24
    1c28:	59 f0       	breq	.+22     	; 0x1c40 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1c2a:	8c 2f       	mov	r24, r28
    1c2c:	88 0f       	add	r24, r24
    1c2e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1c32:	80 32       	cpi	r24, 0x20	; 32
    1c34:	39 f4       	brne	.+14     	; 0x1c44 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1c36:	84 e9       	ldi	r24, 0x94	; 148
    1c38:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	03 c0       	rjmp	.+6      	; 0x1c46 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	01 c0       	rjmp	.+2      	; 0x1c46 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1c44:	81 e0       	ldi	r24, 0x01	; 1
}	
    1c46:	cf 91       	pop	r28
    1c48:	08 95       	ret

00001c4a <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c4a:	84 e9       	ldi	r24, 0x94	; 148
    1c4c:	80 93 bc 00 	sts	0x00BC, r24
    1c50:	08 95       	ret

00001c52 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	60 97       	sbiw	r28, 0x10	; 16
    1c64:	0f b6       	in	r0, 0x3f	; 63
    1c66:	f8 94       	cli
    1c68:	de bf       	out	0x3e, r29	; 62
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	cd bf       	out	0x3d, r28	; 61
    1c6e:	e8 2e       	mov	r14, r24
    1c70:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1c72:	fe 01       	movw	r30, r28
    1c74:	31 96       	adiw	r30, 0x01	; 1
    1c76:	80 e1       	ldi	r24, 0x10	; 16
    1c78:	df 01       	movw	r26, r30
    1c7a:	1d 92       	st	X+, r1
    1c7c:	8a 95       	dec	r24
    1c7e:	e9 f7       	brne	.-6      	; 0x1c7a <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1c80:	88 e5       	ldi	r24, 0x58	; 88
    1c82:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1c86:	88 23       	and	r24, r24
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <m_wii_read+0x3a>
    1c8a:	66 c0       	rjmp	.+204    	; 0x1d58 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1c8c:	86 e3       	ldi	r24, 0x36	; 54
    1c8e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1c92:	88 23       	and	r24, r24
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <m_wii_read+0x46>
    1c96:	62 c0       	rjmp	.+196    	; 0x1d5c <m_wii_read+0x10a>
	end();
    1c98:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1c9c:	b8 e0       	ldi	r27, 0x08	; 8
    1c9e:	ba 95       	dec	r27
    1ca0:	f1 f7       	brne	.-4      	; 0x1c9e <m_wii_read+0x4c>
    1ca2:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1ca4:	88 e5       	ldi	r24, 0x58	; 88
    1ca6:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <start_read>
    1caa:	88 23       	and	r24, r24
    1cac:	09 f4       	brne	.+2      	; 0x1cb0 <m_wii_read+0x5e>
    1cae:	58 c0       	rjmp	.+176    	; 0x1d60 <m_wii_read+0x10e>
    1cb0:	ae 01       	movw	r20, r28
    1cb2:	4f 5f       	subi	r20, 0xFF	; 255
    1cb4:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1cb6:	8e 01       	movw	r16, r28
    1cb8:	00 5f       	subi	r16, 0xF0	; 240
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1cbc:	ec eb       	ldi	r30, 0xBC	; 188
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1cc2:	2b eb       	ldi	r18, 0xBB	; 187
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1cc6:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 23       	and	r24, r24
    1ccc:	ec f7       	brge	.-6      	; 0x1cc8 <m_wii_read+0x76>
		temp[i] = TWDR;
    1cce:	d9 01       	movw	r26, r18
    1cd0:	8c 91       	ld	r24, X
    1cd2:	da 01       	movw	r26, r20
    1cd4:	8d 93       	st	X+, r24
    1cd6:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1cd8:	a0 17       	cp	r26, r16
    1cda:	b1 07       	cpc	r27, r17
    1cdc:	a1 f7       	brne	.-24     	; 0x1cc6 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1cde:	84 e8       	ldi	r24, 0x84	; 132
    1ce0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1ce4:	ec eb       	ldi	r30, 0xBC	; 188
    1ce6:	f0 e0       	ldi	r31, 0x00	; 0
    1ce8:	80 81       	ld	r24, Z
    1cea:	88 23       	and	r24, r24
    1cec:	ec f7       	brge	.-6      	; 0x1ce8 <m_wii_read+0x96>
	temp[15] = TWDR;
    1cee:	80 91 bb 00 	lds	r24, 0x00BB
    1cf2:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1cf4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
    1cf8:	de 01       	movw	r26, r28
    1cfa:	14 96       	adiw	r26, 0x04	; 4
    1cfc:	6e 2d       	mov	r22, r14
    1cfe:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1d00:	4c 91       	ld	r20, X
    1d02:	24 2f       	mov	r18, r20
    1d04:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1d06:	cd 01       	movw	r24, r26
    1d08:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	80 81       	ld	r24, Z
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	f0 e1       	ldi	r31, 0x10	; 16
    1d12:	2f 9f       	mul	r18, r31
    1d14:	80 0d       	add	r24, r0
    1d16:	91 1d       	adc	r25, r1
    1d18:	11 24       	eor	r1, r1
    1d1a:	fb 01       	movw	r30, r22
    1d1c:	91 83       	std	Z+1, r25	; 0x01
    1d1e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1d20:	84 2f       	mov	r24, r20
    1d22:	80 7c       	andi	r24, 0xC0	; 192
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	88 0f       	add	r24, r24
    1d28:	99 1f       	adc	r25, r25
    1d2a:	88 0f       	add	r24, r24
    1d2c:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1d2e:	9d 01       	movw	r18, r26
    1d30:	21 50       	subi	r18, 0x01	; 1
    1d32:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1d34:	f9 01       	movw	r30, r18
    1d36:	20 81       	ld	r18, Z
    1d38:	82 0f       	add	r24, r18
    1d3a:	91 1d       	adc	r25, r1
    1d3c:	fb 01       	movw	r30, r22
    1d3e:	93 83       	std	Z+3, r25	; 0x03
    1d40:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1d42:	4f 70       	andi	r20, 0x0F	; 15
    1d44:	44 83       	std	Z+4, r20	; 0x04
    1d46:	15 82       	std	Z+5, r1	; 0x05
    1d48:	13 96       	adiw	r26, 0x03	; 3
    1d4a:	6a 5f       	subi	r22, 0xFA	; 250
    1d4c:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1d4e:	0a 17       	cp	r16, r26
    1d50:	1b 07       	cpc	r17, r27
    1d52:	b1 f6       	brne	.-84     	; 0x1d00 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1d54:	81 e0       	ldi	r24, 0x01	; 1
    1d56:	05 c0       	rjmp	.+10     	; 0x1d62 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1d58:	80 e0       	ldi	r24, 0x00	; 0
    1d5a:	03 c0       	rjmp	.+6      	; 0x1d62 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	01 c0       	rjmp	.+2      	; 0x1d62 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1d60:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1d62:	60 96       	adiw	r28, 0x10	; 16
    1d64:	0f b6       	in	r0, 0x3f	; 63
    1d66:	f8 94       	cli
    1d68:	de bf       	out	0x3e, r29	; 62
    1d6a:	0f be       	out	0x3f, r0	; 63
    1d6c:	cd bf       	out	0x3d, r28	; 61
    1d6e:	df 91       	pop	r29
    1d70:	cf 91       	pop	r28
    1d72:	1f 91       	pop	r17
    1d74:	0f 91       	pop	r16
    1d76:	ff 90       	pop	r15
    1d78:	ef 90       	pop	r14
    1d7a:	08 95       	ret

00001d7c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1d7c:	0e 94 4d 0b 	call	0x169a	; 0x169a <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1d80:	88 e5       	ldi	r24, 0x58	; 88
    1d82:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1d86:	88 23       	and	r24, r24
    1d88:	09 f4       	brne	.+2      	; 0x1d8c <m_wii_open+0x10>
    1d8a:	c7 c0       	rjmp	.+398    	; 0x1f1a <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1d8c:	80 e3       	ldi	r24, 0x30	; 48
    1d8e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1d92:	88 23       	and	r24, r24
    1d94:	09 f4       	brne	.+2      	; 0x1d98 <m_wii_open+0x1c>
    1d96:	c3 c0       	rjmp	.+390    	; 0x1f1e <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1d9e:	88 23       	and	r24, r24
    1da0:	09 f4       	brne	.+2      	; 0x1da4 <m_wii_open+0x28>
    1da2:	bf c0       	rjmp	.+382    	; 0x1f22 <m_wii_open+0x1a6>
	end();
    1da4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1da8:	83 ec       	ldi	r24, 0xC3	; 195
    1daa:	99 e0       	ldi	r25, 0x09	; 9
    1dac:	01 97       	sbiw	r24, 0x01	; 1
    1dae:	f1 f7       	brne	.-4      	; 0x1dac <m_wii_open+0x30>
    1db0:	00 c0       	rjmp	.+0      	; 0x1db2 <m_wii_open+0x36>
    1db2:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1db4:	88 e5       	ldi	r24, 0x58	; 88
    1db6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1dba:	88 23       	and	r24, r24
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <m_wii_open+0x44>
    1dbe:	b3 c0       	rjmp	.+358    	; 0x1f26 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1dc6:	88 23       	and	r24, r24
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <m_wii_open+0x50>
    1dca:	af c0       	rjmp	.+350    	; 0x1f2a <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1dcc:	80 e0       	ldi	r24, 0x00	; 0
    1dce:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1dd2:	88 23       	and	r24, r24
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <m_wii_open+0x5c>
    1dd6:	ab c0       	rjmp	.+342    	; 0x1f2e <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1dd8:	80 e0       	ldi	r24, 0x00	; 0
    1dda:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1dde:	88 23       	and	r24, r24
    1de0:	09 f4       	brne	.+2      	; 0x1de4 <m_wii_open+0x68>
    1de2:	a7 c0       	rjmp	.+334    	; 0x1f32 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1dea:	88 23       	and	r24, r24
    1dec:	09 f4       	brne	.+2      	; 0x1df0 <m_wii_open+0x74>
    1dee:	a3 c0       	rjmp	.+326    	; 0x1f36 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1df0:	80 e0       	ldi	r24, 0x00	; 0
    1df2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1df6:	88 23       	and	r24, r24
    1df8:	09 f4       	brne	.+2      	; 0x1dfc <m_wii_open+0x80>
    1dfa:	9f c0       	rjmp	.+318    	; 0x1f3a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e02:	88 23       	and	r24, r24
    1e04:	09 f4       	brne	.+2      	; 0x1e08 <m_wii_open+0x8c>
    1e06:	9b c0       	rjmp	.+310    	; 0x1f3e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e0e:	88 23       	and	r24, r24
    1e10:	09 f4       	brne	.+2      	; 0x1e14 <m_wii_open+0x98>
    1e12:	97 c0       	rjmp	.+302    	; 0x1f42 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1e14:	80 e9       	ldi	r24, 0x90	; 144
    1e16:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e1a:	88 23       	and	r24, r24
    1e1c:	09 f4       	brne	.+2      	; 0x1e20 <m_wii_open+0xa4>
    1e1e:	93 c0       	rjmp	.+294    	; 0x1f46 <m_wii_open+0x1ca>
	end();
    1e20:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
    1e24:	83 ec       	ldi	r24, 0xC3	; 195
    1e26:	99 e0       	ldi	r25, 0x09	; 9
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <m_wii_open+0xac>
    1e2c:	00 c0       	rjmp	.+0      	; 0x1e2e <m_wii_open+0xb2>
    1e2e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1e30:	88 e5       	ldi	r24, 0x58	; 88
    1e32:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1e36:	88 23       	and	r24, r24
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <m_wii_open+0xc0>
    1e3a:	87 c0       	rjmp	.+270    	; 0x1f4a <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1e3c:	87 e0       	ldi	r24, 0x07	; 7
    1e3e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e42:	88 23       	and	r24, r24
    1e44:	09 f4       	brne	.+2      	; 0x1e48 <m_wii_open+0xcc>
    1e46:	83 c0       	rjmp	.+262    	; 0x1f4e <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e4e:	88 23       	and	r24, r24
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <m_wii_open+0xd8>
    1e52:	7f c0       	rjmp	.+254    	; 0x1f52 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1e54:	81 e4       	ldi	r24, 0x41	; 65
    1e56:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e5a:	88 23       	and	r24, r24
    1e5c:	09 f4       	brne	.+2      	; 0x1e60 <m_wii_open+0xe4>
    1e5e:	7b c0       	rjmp	.+246    	; 0x1f56 <m_wii_open+0x1da>
	end();
    1e60:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
    1e64:	83 ec       	ldi	r24, 0xC3	; 195
    1e66:	99 e0       	ldi	r25, 0x09	; 9
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	f1 f7       	brne	.-4      	; 0x1e68 <m_wii_open+0xec>
    1e6c:	00 c0       	rjmp	.+0      	; 0x1e6e <m_wii_open+0xf2>
    1e6e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1e70:	88 e5       	ldi	r24, 0x58	; 88
    1e72:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1e76:	88 23       	and	r24, r24
    1e78:	09 f4       	brne	.+2      	; 0x1e7c <m_wii_open+0x100>
    1e7a:	6f c0       	rjmp	.+222    	; 0x1f5a <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1e7c:	8a e1       	ldi	r24, 0x1A	; 26
    1e7e:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e82:	88 23       	and	r24, r24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <m_wii_open+0x10c>
    1e86:	6b c0       	rjmp	.+214    	; 0x1f5e <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1e88:	80 e4       	ldi	r24, 0x40	; 64
    1e8a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e8e:	88 23       	and	r24, r24
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <m_wii_open+0x118>
    1e92:	67 c0       	rjmp	.+206    	; 0x1f62 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1e9a:	88 23       	and	r24, r24
    1e9c:	09 f4       	brne	.+2      	; 0x1ea0 <m_wii_open+0x124>
    1e9e:	63 c0       	rjmp	.+198    	; 0x1f66 <m_wii_open+0x1ea>
	end();
    1ea0:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
    1ea4:	83 ec       	ldi	r24, 0xC3	; 195
    1ea6:	99 e0       	ldi	r25, 0x09	; 9
    1ea8:	01 97       	sbiw	r24, 0x01	; 1
    1eaa:	f1 f7       	brne	.-4      	; 0x1ea8 <m_wii_open+0x12c>
    1eac:	00 c0       	rjmp	.+0      	; 0x1eae <m_wii_open+0x132>
    1eae:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1eb0:	88 e5       	ldi	r24, 0x58	; 88
    1eb2:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1eb6:	88 23       	and	r24, r24
    1eb8:	09 f4       	brne	.+2      	; 0x1ebc <m_wii_open+0x140>
    1eba:	57 c0       	rjmp	.+174    	; 0x1f6a <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1ebc:	83 e3       	ldi	r24, 0x33	; 51
    1ebe:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <m_wii_open+0x14c>
    1ec6:	53 c0       	rjmp	.+166    	; 0x1f6e <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1ec8:	83 e0       	ldi	r24, 0x03	; 3
    1eca:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1ece:	88 23       	and	r24, r24
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <m_wii_open+0x158>
    1ed2:	4f c0       	rjmp	.+158    	; 0x1f72 <m_wii_open+0x1f6>
	end();
    1ed4:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
    1ed8:	83 ec       	ldi	r24, 0xC3	; 195
    1eda:	99 e0       	ldi	r25, 0x09	; 9
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <m_wii_open+0x160>
    1ee0:	00 c0       	rjmp	.+0      	; 0x1ee2 <m_wii_open+0x166>
    1ee2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1ee4:	88 e5       	ldi	r24, 0x58	; 88
    1ee6:	0e 94 0c 0e 	call	0x1c18	; 0x1c18 <start_write>
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <m_wii_open+0x174>
    1eee:	43 c0       	rjmp	.+134    	; 0x1f76 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1ef0:	80 e3       	ldi	r24, 0x30	; 48
    1ef2:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <m_wii_open+0x180>
    1efa:	3f c0       	rjmp	.+126    	; 0x1f7a <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1efc:	88 e0       	ldi	r24, 0x08	; 8
    1efe:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <send_byte>
    1f02:	88 23       	and	r24, r24
    1f04:	e1 f1       	breq	.+120    	; 0x1f7e <m_wii_open+0x202>
	end();
    1f06:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <end>
    1f0a:	83 ec       	ldi	r24, 0xC3	; 195
    1f0c:	99 e0       	ldi	r25, 0x09	; 9
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <m_wii_open+0x192>
    1f12:	00 c0       	rjmp	.+0      	; 0x1f14 <m_wii_open+0x198>
    1f14:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1f1a:	80 e0       	ldi	r24, 0x00	; 0
    1f1c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1f1e:	80 e0       	ldi	r24, 0x00	; 0
    1f20:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1f22:	80 e0       	ldi	r24, 0x00	; 0
    1f24:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1f26:	80 e0       	ldi	r24, 0x00	; 0
    1f28:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f2a:	80 e0       	ldi	r24, 0x00	; 0
    1f2c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f3e:	80 e0       	ldi	r24, 0x00	; 0
    1f40:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1f4e:	80 e0       	ldi	r24, 0x00	; 0
    1f50:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1f56:	80 e0       	ldi	r24, 0x00	; 0
    1f58:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1f5a:	80 e0       	ldi	r24, 0x00	; 0
    1f5c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f6a:	80 e0       	ldi	r24, 0x00	; 0
    1f6c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1f7a:	80 e0       	ldi	r24, 0x00	; 0
    1f7c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1f7e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1f80:	08 95       	ret

00001f82 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    1f82:	2f 92       	push	r2
    1f84:	3f 92       	push	r3
    1f86:	4f 92       	push	r4
    1f88:	5f 92       	push	r5
    1f8a:	6f 92       	push	r6
    1f8c:	7f 92       	push	r7
    1f8e:	8f 92       	push	r8
    1f90:	9f 92       	push	r9
    1f92:	af 92       	push	r10
    1f94:	bf 92       	push	r11
    1f96:	cf 92       	push	r12
    1f98:	df 92       	push	r13
    1f9a:	ef 92       	push	r14
    1f9c:	ff 92       	push	r15
    1f9e:	0f 93       	push	r16
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	cd b7       	in	r28, 0x3d	; 61
    1fa8:	de b7       	in	r29, 0x3e	; 62
    1faa:	28 97       	sbiw	r28, 0x08	; 8
    1fac:	0f b6       	in	r0, 0x3f	; 63
    1fae:	f8 94       	cli
    1fb0:	de bf       	out	0x3e, r29	; 62
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	cd bf       	out	0x3d, r28	; 61
    1fb6:	98 86       	std	Y+8, r9	; 0x08
    1fb8:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
    1fba:	10 92 2c 01 	sts	0x012C, r1
    1fbe:	10 92 2b 01 	sts	0x012B, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
    1fc2:	8f 3f       	cpi	r24, 0xFF	; 255
    1fc4:	e3 e0       	ldi	r30, 0x03	; 3
    1fc6:	9e 07       	cpc	r25, r30
    1fc8:	01 f1       	breq	.+64     	; 0x200a <localize+0x88>
    1fca:	6f 3f       	cpi	r22, 0xFF	; 255
    1fcc:	f3 e0       	ldi	r31, 0x03	; 3
    1fce:	7f 07       	cpc	r23, r31
    1fd0:	e1 f0       	breq	.+56     	; 0x200a <localize+0x88>
    1fd2:	4f 3f       	cpi	r20, 0xFF	; 255
    1fd4:	e3 e0       	ldi	r30, 0x03	; 3
    1fd6:	5e 07       	cpc	r21, r30
    1fd8:	c1 f0       	breq	.+48     	; 0x200a <localize+0x88>
    1fda:	2f 3f       	cpi	r18, 0xFF	; 255
    1fdc:	f3 e0       	ldi	r31, 0x03	; 3
    1fde:	3f 07       	cpc	r19, r31
    1fe0:	a1 f0       	breq	.+40     	; 0x200a <localize+0x88>
    1fe2:	0f 3f       	cpi	r16, 0xFF	; 255
    1fe4:	e3 e0       	ldi	r30, 0x03	; 3
    1fe6:	1e 07       	cpc	r17, r30
    1fe8:	81 f0       	breq	.+32     	; 0x200a <localize+0x88>
    1fea:	ff ef       	ldi	r31, 0xFF	; 255
    1fec:	ef 16       	cp	r14, r31
    1fee:	f3 e0       	ldi	r31, 0x03	; 3
    1ff0:	ff 06       	cpc	r15, r31
    1ff2:	59 f0       	breq	.+22     	; 0x200a <localize+0x88>
    1ff4:	ef ef       	ldi	r30, 0xFF	; 255
    1ff6:	ce 16       	cp	r12, r30
    1ff8:	e3 e0       	ldi	r30, 0x03	; 3
    1ffa:	de 06       	cpc	r13, r30
    1ffc:	31 f0       	breq	.+12     	; 0x200a <localize+0x88>
    1ffe:	ff ef       	ldi	r31, 0xFF	; 255
    2000:	af 16       	cp	r10, r31
    2002:	f3 e0       	ldi	r31, 0x03	; 3
    2004:	bf 06       	cpc	r11, r31
    2006:	09 f0       	breq	.+2      	; 0x200a <localize+0x88>
    2008:	af c6       	rjmp	.+3422   	; 0x2d68 <localize+0xde6>
        flag_no_good_stars = 1;
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	90 93 2c 01 	sts	0x012C, r25
    2012:	80 93 2b 01 	sts	0x012B, r24
    2016:	d1 c3       	rjmp	.+1954   	; 0x27ba <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
    2018:	f8 01       	movw	r30, r16
    201a:	a0 80       	ld	r10, Z
    201c:	b1 80       	ldd	r11, Z+1	; 0x01
    201e:	c2 80       	ldd	r12, Z+2	; 0x02
    2020:	d3 80       	ldd	r13, Z+3	; 0x03
    2022:	0c 5f       	subi	r16, 0xFC	; 252
    2024:	1f 4f       	sbci	r17, 0xFF	; 255
    2026:	26 2d       	mov	r18, r6
    2028:	37 2d       	mov	r19, r7
    202a:	48 2d       	mov	r20, r8
    202c:	59 2d       	mov	r21, r9
    202e:	6a 2d       	mov	r22, r10
    2030:	7b 2d       	mov	r23, r11
    2032:	8c 2d       	mov	r24, r12
    2034:	9d 2d       	mov	r25, r13
    2036:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <__gesf2>
    203a:	18 16       	cp	r1, r24
    203c:	34 f4       	brge	.+12     	; 0x204a <localize+0xc8>
    203e:	fa 82       	std	Y+2, r15	; 0x02
    2040:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
    2042:	6a 2c       	mov	r6, r10
    2044:	7b 2c       	mov	r7, r11
    2046:	8c 2c       	mov	r8, r12
    2048:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
    204a:	22 2d       	mov	r18, r2
    204c:	33 2d       	mov	r19, r3
    204e:	44 2d       	mov	r20, r4
    2050:	55 2d       	mov	r21, r5
    2052:	6a 2d       	mov	r22, r10
    2054:	7b 2d       	mov	r23, r11
    2056:	8c 2d       	mov	r24, r12
    2058:	9d 2d       	mov	r25, r13
    205a:	0e 94 c0 18 	call	0x3180	; 0x3180 <__cmpsf2>
    205e:	88 23       	and	r24, r24
    2060:	34 f4       	brge	.+12     	; 0x206e <localize+0xec>
    2062:	fe 82       	std	Y+6, r15	; 0x06
    2064:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
    2066:	2a 2c       	mov	r2, r10
    2068:	3b 2c       	mov	r3, r11
    206a:	4c 2c       	mov	r4, r12
    206c:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
    206e:	ff ef       	ldi	r31, 0xFF	; 255
    2070:	ef 1a       	sub	r14, r31
    2072:	ff 0a       	sbc	r15, r31
    2074:	86 e0       	ldi	r24, 0x06	; 6
    2076:	e8 16       	cp	r14, r24
    2078:	f1 04       	cpc	r15, r1
    207a:	71 f6       	brne	.-100    	; 0x2018 <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
    207c:	e9 81       	ldd	r30, Y+1	; 0x01
    207e:	fa 81       	ldd	r31, Y+2	; 0x02
    2080:	e2 30       	cpi	r30, 0x02	; 2
    2082:	f1 05       	cpc	r31, r1
    2084:	09 f4       	brne	.+2      	; 0x2088 <localize+0x106>
    2086:	3e c1       	rjmp	.+636    	; 0x2304 <localize+0x382>
    2088:	34 f4       	brge	.+12     	; 0x2096 <localize+0x114>
    208a:	30 97       	sbiw	r30, 0x00	; 0
    208c:	81 f0       	breq	.+32     	; 0x20ae <localize+0x12c>
    208e:	31 97       	sbiw	r30, 0x01	; 1
    2090:	09 f0       	breq	.+2      	; 0x2094 <localize+0x112>
    2092:	8d c3       	rjmp	.+1818   	; 0x27ae <localize+0x82c>
    2094:	a2 c0       	rjmp	.+324    	; 0x21da <localize+0x258>
    2096:	89 81       	ldd	r24, Y+1	; 0x01
    2098:	9a 81       	ldd	r25, Y+2	; 0x02
    209a:	84 30       	cpi	r24, 0x04	; 4
    209c:	91 05       	cpc	r25, r1
    209e:	09 f4       	brne	.+2      	; 0x20a2 <localize+0x120>
    20a0:	5b c2       	rjmp	.+1206   	; 0x2558 <localize+0x5d6>
    20a2:	0c f4       	brge	.+2      	; 0x20a6 <localize+0x124>
    20a4:	c4 c1       	rjmp	.+904    	; 0x242e <localize+0x4ac>
    20a6:	05 97       	sbiw	r24, 0x05	; 5
    20a8:	09 f0       	breq	.+2      	; 0x20ac <localize+0x12a>
    20aa:	81 c3       	rjmp	.+1794   	; 0x27ae <localize+0x82c>
    20ac:	ea c2       	rjmp	.+1492   	; 0x2682 <localize+0x700>
            case 0:
                switch (min_id) {
    20ae:	ed 81       	ldd	r30, Y+5	; 0x05
    20b0:	fe 81       	ldd	r31, Y+6	; 0x06
    20b2:	e2 30       	cpi	r30, 0x02	; 2
    20b4:	f1 05       	cpc	r31, r1
    20b6:	39 f1       	breq	.+78     	; 0x2106 <localize+0x184>
    20b8:	24 f4       	brge	.+8      	; 0x20c2 <localize+0x140>
    20ba:	31 97       	sbiw	r30, 0x01	; 1
    20bc:	09 f0       	breq	.+2      	; 0x20c0 <localize+0x13e>
    20be:	6e c0       	rjmp	.+220    	; 0x219c <localize+0x21a>
    20c0:	09 c0       	rjmp	.+18     	; 0x20d4 <localize+0x152>
    20c2:	8d 81       	ldd	r24, Y+5	; 0x05
    20c4:	9e 81       	ldd	r25, Y+6	; 0x06
    20c6:	83 30       	cpi	r24, 0x03	; 3
    20c8:	91 05       	cpc	r25, r1
    20ca:	b1 f1       	breq	.+108    	; 0x2138 <localize+0x1b6>
    20cc:	04 97       	sbiw	r24, 0x04	; 4
    20ce:	09 f0       	breq	.+2      	; 0x20d2 <localize+0x150>
    20d0:	65 c0       	rjmp	.+202    	; 0x219c <localize+0x21a>
    20d2:	4b c0       	rjmp	.+150    	; 0x216a <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
    20d4:	81 e6       	ldi	r24, 0x61	; 97
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	90 93 84 01 	sts	0x0184, r25
    20dc:	80 93 83 01 	sts	0x0183, r24
    20e0:	89 e5       	ldi	r24, 0x59	; 89
    20e2:	91 e0       	ldi	r25, 0x01	; 1
    20e4:	90 93 6a 01 	sts	0x016A, r25
    20e8:	80 93 69 01 	sts	0x0169, r24
    20ec:	8d e5       	ldi	r24, 0x5D	; 93
    20ee:	91 e0       	ldi	r25, 0x01	; 1
    20f0:	90 93 6c 01 	sts	0x016C, r25
    20f4:	80 93 6b 01 	sts	0x016B, r24
    20f8:	85 e5       	ldi	r24, 0x55	; 85
    20fa:	91 e0       	ldi	r25, 0x01	; 1
    20fc:	90 93 7e 01 	sts	0x017E, r25
    2100:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2104:	54 c3       	rjmp	.+1704   	; 0x27ae <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
    2106:	81 e6       	ldi	r24, 0x61	; 97
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	90 93 84 01 	sts	0x0184, r25
    210e:	80 93 83 01 	sts	0x0183, r24
    2112:	85 e5       	ldi	r24, 0x55	; 85
    2114:	91 e0       	ldi	r25, 0x01	; 1
    2116:	90 93 6a 01 	sts	0x016A, r25
    211a:	80 93 69 01 	sts	0x0169, r24
    211e:	8d e5       	ldi	r24, 0x5D	; 93
    2120:	91 e0       	ldi	r25, 0x01	; 1
    2122:	90 93 6c 01 	sts	0x016C, r25
    2126:	80 93 6b 01 	sts	0x016B, r24
    212a:	89 e5       	ldi	r24, 0x59	; 89
    212c:	91 e0       	ldi	r25, 0x01	; 1
    212e:	90 93 7e 01 	sts	0x017E, r25
    2132:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2136:	3b c3       	rjmp	.+1654   	; 0x27ae <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
    2138:	8d e5       	ldi	r24, 0x5D	; 93
    213a:	91 e0       	ldi	r25, 0x01	; 1
    213c:	90 93 84 01 	sts	0x0184, r25
    2140:	80 93 83 01 	sts	0x0183, r24
    2144:	89 e5       	ldi	r24, 0x59	; 89
    2146:	91 e0       	ldi	r25, 0x01	; 1
    2148:	90 93 6a 01 	sts	0x016A, r25
    214c:	80 93 69 01 	sts	0x0169, r24
    2150:	81 e6       	ldi	r24, 0x61	; 97
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	90 93 6c 01 	sts	0x016C, r25
    2158:	80 93 6b 01 	sts	0x016B, r24
    215c:	85 e5       	ldi	r24, 0x55	; 85
    215e:	91 e0       	ldi	r25, 0x01	; 1
    2160:	90 93 7e 01 	sts	0x017E, r25
    2164:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2168:	22 c3       	rjmp	.+1604   	; 0x27ae <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
    216a:	8d e5       	ldi	r24, 0x5D	; 93
    216c:	91 e0       	ldi	r25, 0x01	; 1
    216e:	90 93 84 01 	sts	0x0184, r25
    2172:	80 93 83 01 	sts	0x0183, r24
    2176:	85 e5       	ldi	r24, 0x55	; 85
    2178:	91 e0       	ldi	r25, 0x01	; 1
    217a:	90 93 6a 01 	sts	0x016A, r25
    217e:	80 93 69 01 	sts	0x0169, r24
    2182:	81 e6       	ldi	r24, 0x61	; 97
    2184:	91 e0       	ldi	r25, 0x01	; 1
    2186:	90 93 6c 01 	sts	0x016C, r25
    218a:	80 93 6b 01 	sts	0x016B, r24
    218e:	89 e5       	ldi	r24, 0x59	; 89
    2190:	91 e0       	ldi	r25, 0x01	; 1
    2192:	90 93 7e 01 	sts	0x017E, r25
    2196:	80 93 7d 01 	sts	0x017D, r24
                        break;
    219a:	09 c3       	rjmp	.+1554   	; 0x27ae <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    219c:	81 e6       	ldi	r24, 0x61	; 97
    219e:	91 e0       	ldi	r25, 0x01	; 1
    21a0:	90 93 84 01 	sts	0x0184, r25
    21a4:	80 93 83 01 	sts	0x0183, r24
    21a8:	8d e5       	ldi	r24, 0x5D	; 93
    21aa:	91 e0       	ldi	r25, 0x01	; 1
    21ac:	90 93 6a 01 	sts	0x016A, r25
    21b0:	80 93 69 01 	sts	0x0169, r24
    21b4:	89 e5       	ldi	r24, 0x59	; 89
    21b6:	91 e0       	ldi	r25, 0x01	; 1
    21b8:	90 93 6c 01 	sts	0x016C, r25
    21bc:	80 93 6b 01 	sts	0x016B, r24
    21c0:	85 e5       	ldi	r24, 0x55	; 85
    21c2:	91 e0       	ldi	r25, 0x01	; 1
    21c4:	90 93 7e 01 	sts	0x017E, r25
    21c8:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	90 e0       	ldi	r25, 0x00	; 0
    21d0:	90 93 2c 01 	sts	0x012C, r25
    21d4:	80 93 2b 01 	sts	0x012B, r24
                        break;
    21d8:	f0 c2       	rjmp	.+1504   	; 0x27ba <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
    21da:	ed 81       	ldd	r30, Y+5	; 0x05
    21dc:	fe 81       	ldd	r31, Y+6	; 0x06
    21de:	e2 30       	cpi	r30, 0x02	; 2
    21e0:	f1 05       	cpc	r31, r1
    21e2:	31 f1       	breq	.+76     	; 0x2230 <localize+0x2ae>
    21e4:	1c f4       	brge	.+6      	; 0x21ec <localize+0x26a>
    21e6:	ef 2b       	or	r30, r31
    21e8:	51 f0       	breq	.+20     	; 0x21fe <localize+0x27c>
    21ea:	6d c0       	rjmp	.+218    	; 0x22c6 <localize+0x344>
    21ec:	8d 81       	ldd	r24, Y+5	; 0x05
    21ee:	9e 81       	ldd	r25, Y+6	; 0x06
    21f0:	83 30       	cpi	r24, 0x03	; 3
    21f2:	91 05       	cpc	r25, r1
    21f4:	b1 f1       	breq	.+108    	; 0x2262 <localize+0x2e0>
    21f6:	05 97       	sbiw	r24, 0x05	; 5
    21f8:	09 f0       	breq	.+2      	; 0x21fc <localize+0x27a>
    21fa:	65 c0       	rjmp	.+202    	; 0x22c6 <localize+0x344>
    21fc:	4b c0       	rjmp	.+150    	; 0x2294 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    21fe:	81 e6       	ldi	r24, 0x61	; 97
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	90 93 84 01 	sts	0x0184, r25
    2206:	80 93 83 01 	sts	0x0183, r24
    220a:	8d e5       	ldi	r24, 0x5D	; 93
    220c:	91 e0       	ldi	r25, 0x01	; 1
    220e:	90 93 6a 01 	sts	0x016A, r25
    2212:	80 93 69 01 	sts	0x0169, r24
    2216:	89 e5       	ldi	r24, 0x59	; 89
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	90 93 6c 01 	sts	0x016C, r25
    221e:	80 93 6b 01 	sts	0x016B, r24
    2222:	85 e5       	ldi	r24, 0x55	; 85
    2224:	91 e0       	ldi	r25, 0x01	; 1
    2226:	90 93 7e 01 	sts	0x017E, r25
    222a:	80 93 7d 01 	sts	0x017D, r24
                        break;
    222e:	bf c2       	rjmp	.+1406   	; 0x27ae <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
    2230:	81 e6       	ldi	r24, 0x61	; 97
    2232:	91 e0       	ldi	r25, 0x01	; 1
    2234:	90 93 84 01 	sts	0x0184, r25
    2238:	80 93 83 01 	sts	0x0183, r24
    223c:	85 e5       	ldi	r24, 0x55	; 85
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	90 93 6a 01 	sts	0x016A, r25
    2244:	80 93 69 01 	sts	0x0169, r24
    2248:	89 e5       	ldi	r24, 0x59	; 89
    224a:	91 e0       	ldi	r25, 0x01	; 1
    224c:	90 93 6c 01 	sts	0x016C, r25
    2250:	80 93 6b 01 	sts	0x016B, r24
    2254:	8d e5       	ldi	r24, 0x5D	; 93
    2256:	91 e0       	ldi	r25, 0x01	; 1
    2258:	90 93 7e 01 	sts	0x017E, r25
    225c:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2260:	a6 c2       	rjmp	.+1356   	; 0x27ae <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
    2262:	89 e5       	ldi	r24, 0x59	; 89
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	90 93 84 01 	sts	0x0184, r25
    226a:	80 93 83 01 	sts	0x0183, r24
    226e:	8d e5       	ldi	r24, 0x5D	; 93
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	90 93 6a 01 	sts	0x016A, r25
    2276:	80 93 69 01 	sts	0x0169, r24
    227a:	81 e6       	ldi	r24, 0x61	; 97
    227c:	91 e0       	ldi	r25, 0x01	; 1
    227e:	90 93 6c 01 	sts	0x016C, r25
    2282:	80 93 6b 01 	sts	0x016B, r24
    2286:	85 e5       	ldi	r24, 0x55	; 85
    2288:	91 e0       	ldi	r25, 0x01	; 1
    228a:	90 93 7e 01 	sts	0x017E, r25
    228e:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2292:	8d c2       	rjmp	.+1306   	; 0x27ae <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
    2294:	89 e5       	ldi	r24, 0x59	; 89
    2296:	91 e0       	ldi	r25, 0x01	; 1
    2298:	90 93 84 01 	sts	0x0184, r25
    229c:	80 93 83 01 	sts	0x0183, r24
    22a0:	85 e5       	ldi	r24, 0x55	; 85
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	90 93 6a 01 	sts	0x016A, r25
    22a8:	80 93 69 01 	sts	0x0169, r24
    22ac:	81 e6       	ldi	r24, 0x61	; 97
    22ae:	91 e0       	ldi	r25, 0x01	; 1
    22b0:	90 93 6c 01 	sts	0x016C, r25
    22b4:	80 93 6b 01 	sts	0x016B, r24
    22b8:	8d e5       	ldi	r24, 0x5D	; 93
    22ba:	91 e0       	ldi	r25, 0x01	; 1
    22bc:	90 93 7e 01 	sts	0x017E, r25
    22c0:	80 93 7d 01 	sts	0x017D, r24
                        break;
    22c4:	74 c2       	rjmp	.+1256   	; 0x27ae <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    22c6:	81 e6       	ldi	r24, 0x61	; 97
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	90 93 84 01 	sts	0x0184, r25
    22ce:	80 93 83 01 	sts	0x0183, r24
    22d2:	8d e5       	ldi	r24, 0x5D	; 93
    22d4:	91 e0       	ldi	r25, 0x01	; 1
    22d6:	90 93 6a 01 	sts	0x016A, r25
    22da:	80 93 69 01 	sts	0x0169, r24
    22de:	89 e5       	ldi	r24, 0x59	; 89
    22e0:	91 e0       	ldi	r25, 0x01	; 1
    22e2:	90 93 6c 01 	sts	0x016C, r25
    22e6:	80 93 6b 01 	sts	0x016B, r24
    22ea:	85 e5       	ldi	r24, 0x55	; 85
    22ec:	91 e0       	ldi	r25, 0x01	; 1
    22ee:	90 93 7e 01 	sts	0x017E, r25
    22f2:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	90 93 2c 01 	sts	0x012C, r25
    22fe:	80 93 2b 01 	sts	0x012B, r24
                        break;
    2302:	5b c2       	rjmp	.+1206   	; 0x27ba <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
    2304:	ed 81       	ldd	r30, Y+5	; 0x05
    2306:	fe 81       	ldd	r31, Y+6	; 0x06
    2308:	e1 30       	cpi	r30, 0x01	; 1
    230a:	f1 05       	cpc	r31, r1
    230c:	31 f1       	breq	.+76     	; 0x235a <localize+0x3d8>
    230e:	1c f4       	brge	.+6      	; 0x2316 <localize+0x394>
    2310:	ef 2b       	or	r30, r31
    2312:	51 f0       	breq	.+20     	; 0x2328 <localize+0x3a6>
    2314:	6d c0       	rjmp	.+218    	; 0x23f0 <localize+0x46e>
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	84 30       	cpi	r24, 0x04	; 4
    231c:	91 05       	cpc	r25, r1
    231e:	b1 f1       	breq	.+108    	; 0x238c <localize+0x40a>
    2320:	05 97       	sbiw	r24, 0x05	; 5
    2322:	09 f0       	breq	.+2      	; 0x2326 <localize+0x3a4>
    2324:	65 c0       	rjmp	.+202    	; 0x23f0 <localize+0x46e>
    2326:	4b c0       	rjmp	.+150    	; 0x23be <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
    2328:	81 e6       	ldi	r24, 0x61	; 97
    232a:	91 e0       	ldi	r25, 0x01	; 1
    232c:	90 93 84 01 	sts	0x0184, r25
    2330:	80 93 83 01 	sts	0x0183, r24
    2334:	8d e5       	ldi	r24, 0x5D	; 93
    2336:	91 e0       	ldi	r25, 0x01	; 1
    2338:	90 93 6a 01 	sts	0x016A, r25
    233c:	80 93 69 01 	sts	0x0169, r24
    2340:	85 e5       	ldi	r24, 0x55	; 85
    2342:	91 e0       	ldi	r25, 0x01	; 1
    2344:	90 93 6c 01 	sts	0x016C, r25
    2348:	80 93 6b 01 	sts	0x016B, r24
    234c:	89 e5       	ldi	r24, 0x59	; 89
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	90 93 7e 01 	sts	0x017E, r25
    2354:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2358:	2a c2       	rjmp	.+1108   	; 0x27ae <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
    235a:	81 e6       	ldi	r24, 0x61	; 97
    235c:	91 e0       	ldi	r25, 0x01	; 1
    235e:	90 93 84 01 	sts	0x0184, r25
    2362:	80 93 83 01 	sts	0x0183, r24
    2366:	89 e5       	ldi	r24, 0x59	; 89
    2368:	91 e0       	ldi	r25, 0x01	; 1
    236a:	90 93 6a 01 	sts	0x016A, r25
    236e:	80 93 69 01 	sts	0x0169, r24
    2372:	85 e5       	ldi	r24, 0x55	; 85
    2374:	91 e0       	ldi	r25, 0x01	; 1
    2376:	90 93 6c 01 	sts	0x016C, r25
    237a:	80 93 6b 01 	sts	0x016B, r24
    237e:	8d e5       	ldi	r24, 0x5D	; 93
    2380:	91 e0       	ldi	r25, 0x01	; 1
    2382:	90 93 7e 01 	sts	0x017E, r25
    2386:	80 93 7d 01 	sts	0x017D, r24
                        break;
    238a:	11 c2       	rjmp	.+1058   	; 0x27ae <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
    238c:	85 e5       	ldi	r24, 0x55	; 85
    238e:	91 e0       	ldi	r25, 0x01	; 1
    2390:	90 93 84 01 	sts	0x0184, r25
    2394:	80 93 83 01 	sts	0x0183, r24
    2398:	8d e5       	ldi	r24, 0x5D	; 93
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	90 93 6a 01 	sts	0x016A, r25
    23a0:	80 93 69 01 	sts	0x0169, r24
    23a4:	81 e6       	ldi	r24, 0x61	; 97
    23a6:	91 e0       	ldi	r25, 0x01	; 1
    23a8:	90 93 6c 01 	sts	0x016C, r25
    23ac:	80 93 6b 01 	sts	0x016B, r24
    23b0:	89 e5       	ldi	r24, 0x59	; 89
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	90 93 7e 01 	sts	0x017E, r25
    23b8:	80 93 7d 01 	sts	0x017D, r24
                        break;
    23bc:	f8 c1       	rjmp	.+1008   	; 0x27ae <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
    23be:	85 e5       	ldi	r24, 0x55	; 85
    23c0:	91 e0       	ldi	r25, 0x01	; 1
    23c2:	90 93 84 01 	sts	0x0184, r25
    23c6:	80 93 83 01 	sts	0x0183, r24
    23ca:	89 e5       	ldi	r24, 0x59	; 89
    23cc:	91 e0       	ldi	r25, 0x01	; 1
    23ce:	90 93 6a 01 	sts	0x016A, r25
    23d2:	80 93 69 01 	sts	0x0169, r24
    23d6:	81 e6       	ldi	r24, 0x61	; 97
    23d8:	91 e0       	ldi	r25, 0x01	; 1
    23da:	90 93 6c 01 	sts	0x016C, r25
    23de:	80 93 6b 01 	sts	0x016B, r24
    23e2:	8d e5       	ldi	r24, 0x5D	; 93
    23e4:	91 e0       	ldi	r25, 0x01	; 1
    23e6:	90 93 7e 01 	sts	0x017E, r25
    23ea:	80 93 7d 01 	sts	0x017D, r24
                        break;
    23ee:	df c1       	rjmp	.+958    	; 0x27ae <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    23f0:	81 e6       	ldi	r24, 0x61	; 97
    23f2:	91 e0       	ldi	r25, 0x01	; 1
    23f4:	90 93 84 01 	sts	0x0184, r25
    23f8:	80 93 83 01 	sts	0x0183, r24
    23fc:	8d e5       	ldi	r24, 0x5D	; 93
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	90 93 6a 01 	sts	0x016A, r25
    2404:	80 93 69 01 	sts	0x0169, r24
    2408:	89 e5       	ldi	r24, 0x59	; 89
    240a:	91 e0       	ldi	r25, 0x01	; 1
    240c:	90 93 6c 01 	sts	0x016C, r25
    2410:	80 93 6b 01 	sts	0x016B, r24
    2414:	85 e5       	ldi	r24, 0x55	; 85
    2416:	91 e0       	ldi	r25, 0x01	; 1
    2418:	90 93 7e 01 	sts	0x017E, r25
    241c:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    2420:	81 e0       	ldi	r24, 0x01	; 1
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	90 93 2c 01 	sts	0x012C, r25
    2428:	80 93 2b 01 	sts	0x012B, r24
                        break;
    242c:	c6 c1       	rjmp	.+908    	; 0x27ba <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
    242e:	ed 81       	ldd	r30, Y+5	; 0x05
    2430:	fe 81       	ldd	r31, Y+6	; 0x06
    2432:	e1 30       	cpi	r30, 0x01	; 1
    2434:	f1 05       	cpc	r31, r1
    2436:	31 f1       	breq	.+76     	; 0x2484 <localize+0x502>
    2438:	1c f4       	brge	.+6      	; 0x2440 <localize+0x4be>
    243a:	ef 2b       	or	r30, r31
    243c:	51 f0       	breq	.+20     	; 0x2452 <localize+0x4d0>
    243e:	6d c0       	rjmp	.+218    	; 0x251a <localize+0x598>
    2440:	8d 81       	ldd	r24, Y+5	; 0x05
    2442:	9e 81       	ldd	r25, Y+6	; 0x06
    2444:	84 30       	cpi	r24, 0x04	; 4
    2446:	91 05       	cpc	r25, r1
    2448:	b1 f1       	breq	.+108    	; 0x24b6 <localize+0x534>
    244a:	05 97       	sbiw	r24, 0x05	; 5
    244c:	09 f0       	breq	.+2      	; 0x2450 <localize+0x4ce>
    244e:	65 c0       	rjmp	.+202    	; 0x251a <localize+0x598>
    2450:	4b c0       	rjmp	.+150    	; 0x24e8 <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
    2452:	8d e5       	ldi	r24, 0x5D	; 93
    2454:	91 e0       	ldi	r25, 0x01	; 1
    2456:	90 93 84 01 	sts	0x0184, r25
    245a:	80 93 83 01 	sts	0x0183, r24
    245e:	81 e6       	ldi	r24, 0x61	; 97
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	90 93 6a 01 	sts	0x016A, r25
    2466:	80 93 69 01 	sts	0x0169, r24
    246a:	89 e5       	ldi	r24, 0x59	; 89
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	90 93 6c 01 	sts	0x016C, r25
    2472:	80 93 6b 01 	sts	0x016B, r24
    2476:	85 e5       	ldi	r24, 0x55	; 85
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	90 93 7e 01 	sts	0x017E, r25
    247e:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2482:	95 c1       	rjmp	.+810    	; 0x27ae <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
    2484:	89 e5       	ldi	r24, 0x59	; 89
    2486:	91 e0       	ldi	r25, 0x01	; 1
    2488:	90 93 84 01 	sts	0x0184, r25
    248c:	80 93 83 01 	sts	0x0183, r24
    2490:	81 e6       	ldi	r24, 0x61	; 97
    2492:	91 e0       	ldi	r25, 0x01	; 1
    2494:	90 93 6a 01 	sts	0x016A, r25
    2498:	80 93 69 01 	sts	0x0169, r24
    249c:	8d e5       	ldi	r24, 0x5D	; 93
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	90 93 6c 01 	sts	0x016C, r25
    24a4:	80 93 6b 01 	sts	0x016B, r24
    24a8:	85 e5       	ldi	r24, 0x55	; 85
    24aa:	91 e0       	ldi	r25, 0x01	; 1
    24ac:	90 93 7e 01 	sts	0x017E, r25
    24b0:	80 93 7d 01 	sts	0x017D, r24
                        break;
    24b4:	7c c1       	rjmp	.+760    	; 0x27ae <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
    24b6:	8d e5       	ldi	r24, 0x5D	; 93
    24b8:	91 e0       	ldi	r25, 0x01	; 1
    24ba:	90 93 84 01 	sts	0x0184, r25
    24be:	80 93 83 01 	sts	0x0183, r24
    24c2:	85 e5       	ldi	r24, 0x55	; 85
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	90 93 6a 01 	sts	0x016A, r25
    24ca:	80 93 69 01 	sts	0x0169, r24
    24ce:	89 e5       	ldi	r24, 0x59	; 89
    24d0:	91 e0       	ldi	r25, 0x01	; 1
    24d2:	90 93 6c 01 	sts	0x016C, r25
    24d6:	80 93 6b 01 	sts	0x016B, r24
    24da:	81 e6       	ldi	r24, 0x61	; 97
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	90 93 7e 01 	sts	0x017E, r25
    24e2:	80 93 7d 01 	sts	0x017D, r24
                        break;
    24e6:	63 c1       	rjmp	.+710    	; 0x27ae <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
    24e8:	89 e5       	ldi	r24, 0x59	; 89
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	90 93 84 01 	sts	0x0184, r25
    24f0:	80 93 83 01 	sts	0x0183, r24
    24f4:	85 e5       	ldi	r24, 0x55	; 85
    24f6:	91 e0       	ldi	r25, 0x01	; 1
    24f8:	90 93 6a 01 	sts	0x016A, r25
    24fc:	80 93 69 01 	sts	0x0169, r24
    2500:	8d e5       	ldi	r24, 0x5D	; 93
    2502:	91 e0       	ldi	r25, 0x01	; 1
    2504:	90 93 6c 01 	sts	0x016C, r25
    2508:	80 93 6b 01 	sts	0x016B, r24
    250c:	81 e6       	ldi	r24, 0x61	; 97
    250e:	91 e0       	ldi	r25, 0x01	; 1
    2510:	90 93 7e 01 	sts	0x017E, r25
    2514:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2518:	4a c1       	rjmp	.+660    	; 0x27ae <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    251a:	81 e6       	ldi	r24, 0x61	; 97
    251c:	91 e0       	ldi	r25, 0x01	; 1
    251e:	90 93 84 01 	sts	0x0184, r25
    2522:	80 93 83 01 	sts	0x0183, r24
    2526:	8d e5       	ldi	r24, 0x5D	; 93
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	90 93 6a 01 	sts	0x016A, r25
    252e:	80 93 69 01 	sts	0x0169, r24
    2532:	89 e5       	ldi	r24, 0x59	; 89
    2534:	91 e0       	ldi	r25, 0x01	; 1
    2536:	90 93 6c 01 	sts	0x016C, r25
    253a:	80 93 6b 01 	sts	0x016B, r24
    253e:	85 e5       	ldi	r24, 0x55	; 85
    2540:	91 e0       	ldi	r25, 0x01	; 1
    2542:	90 93 7e 01 	sts	0x017E, r25
    2546:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	90 93 2c 01 	sts	0x012C, r25
    2552:	80 93 2b 01 	sts	0x012B, r24
                        break;
    2556:	31 c1       	rjmp	.+610    	; 0x27ba <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
    2558:	ed 81       	ldd	r30, Y+5	; 0x05
    255a:	fe 81       	ldd	r31, Y+6	; 0x06
    255c:	e2 30       	cpi	r30, 0x02	; 2
    255e:	f1 05       	cpc	r31, r1
    2560:	31 f1       	breq	.+76     	; 0x25ae <localize+0x62c>
    2562:	1c f4       	brge	.+6      	; 0x256a <localize+0x5e8>
    2564:	ef 2b       	or	r30, r31
    2566:	51 f0       	breq	.+20     	; 0x257c <localize+0x5fa>
    2568:	6d c0       	rjmp	.+218    	; 0x2644 <localize+0x6c2>
    256a:	8d 81       	ldd	r24, Y+5	; 0x05
    256c:	9e 81       	ldd	r25, Y+6	; 0x06
    256e:	83 30       	cpi	r24, 0x03	; 3
    2570:	91 05       	cpc	r25, r1
    2572:	b1 f1       	breq	.+108    	; 0x25e0 <localize+0x65e>
    2574:	05 97       	sbiw	r24, 0x05	; 5
    2576:	09 f0       	breq	.+2      	; 0x257a <localize+0x5f8>
    2578:	65 c0       	rjmp	.+202    	; 0x2644 <localize+0x6c2>
    257a:	4b c0       	rjmp	.+150    	; 0x2612 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
    257c:	8d e5       	ldi	r24, 0x5D	; 93
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	90 93 84 01 	sts	0x0184, r25
    2584:	80 93 83 01 	sts	0x0183, r24
    2588:	81 e6       	ldi	r24, 0x61	; 97
    258a:	91 e0       	ldi	r25, 0x01	; 1
    258c:	90 93 6a 01 	sts	0x016A, r25
    2590:	80 93 69 01 	sts	0x0169, r24
    2594:	85 e5       	ldi	r24, 0x55	; 85
    2596:	91 e0       	ldi	r25, 0x01	; 1
    2598:	90 93 6c 01 	sts	0x016C, r25
    259c:	80 93 6b 01 	sts	0x016B, r24
    25a0:	89 e5       	ldi	r24, 0x59	; 89
    25a2:	91 e0       	ldi	r25, 0x01	; 1
    25a4:	90 93 7e 01 	sts	0x017E, r25
    25a8:	80 93 7d 01 	sts	0x017D, r24
                        break;
    25ac:	00 c1       	rjmp	.+512    	; 0x27ae <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
    25ae:	85 e5       	ldi	r24, 0x55	; 85
    25b0:	91 e0       	ldi	r25, 0x01	; 1
    25b2:	90 93 84 01 	sts	0x0184, r25
    25b6:	80 93 83 01 	sts	0x0183, r24
    25ba:	81 e6       	ldi	r24, 0x61	; 97
    25bc:	91 e0       	ldi	r25, 0x01	; 1
    25be:	90 93 6a 01 	sts	0x016A, r25
    25c2:	80 93 69 01 	sts	0x0169, r24
    25c6:	8d e5       	ldi	r24, 0x5D	; 93
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	90 93 6c 01 	sts	0x016C, r25
    25ce:	80 93 6b 01 	sts	0x016B, r24
    25d2:	89 e5       	ldi	r24, 0x59	; 89
    25d4:	91 e0       	ldi	r25, 0x01	; 1
    25d6:	90 93 7e 01 	sts	0x017E, r25
    25da:	80 93 7d 01 	sts	0x017D, r24
                        break;
    25de:	e7 c0       	rjmp	.+462    	; 0x27ae <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
    25e0:	8d e5       	ldi	r24, 0x5D	; 93
    25e2:	91 e0       	ldi	r25, 0x01	; 1
    25e4:	90 93 84 01 	sts	0x0184, r25
    25e8:	80 93 83 01 	sts	0x0183, r24
    25ec:	89 e5       	ldi	r24, 0x59	; 89
    25ee:	91 e0       	ldi	r25, 0x01	; 1
    25f0:	90 93 6a 01 	sts	0x016A, r25
    25f4:	80 93 69 01 	sts	0x0169, r24
    25f8:	85 e5       	ldi	r24, 0x55	; 85
    25fa:	91 e0       	ldi	r25, 0x01	; 1
    25fc:	90 93 6c 01 	sts	0x016C, r25
    2600:	80 93 6b 01 	sts	0x016B, r24
    2604:	81 e6       	ldi	r24, 0x61	; 97
    2606:	91 e0       	ldi	r25, 0x01	; 1
    2608:	90 93 7e 01 	sts	0x017E, r25
    260c:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2610:	ce c0       	rjmp	.+412    	; 0x27ae <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
    2612:	85 e5       	ldi	r24, 0x55	; 85
    2614:	91 e0       	ldi	r25, 0x01	; 1
    2616:	90 93 84 01 	sts	0x0184, r25
    261a:	80 93 83 01 	sts	0x0183, r24
    261e:	89 e5       	ldi	r24, 0x59	; 89
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	90 93 6a 01 	sts	0x016A, r25
    2626:	80 93 69 01 	sts	0x0169, r24
    262a:	8d e5       	ldi	r24, 0x5D	; 93
    262c:	91 e0       	ldi	r25, 0x01	; 1
    262e:	90 93 6c 01 	sts	0x016C, r25
    2632:	80 93 6b 01 	sts	0x016B, r24
    2636:	81 e6       	ldi	r24, 0x61	; 97
    2638:	91 e0       	ldi	r25, 0x01	; 1
    263a:	90 93 7e 01 	sts	0x017E, r25
    263e:	80 93 7d 01 	sts	0x017D, r24
                        break;
    2642:	b5 c0       	rjmp	.+362    	; 0x27ae <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2644:	81 e6       	ldi	r24, 0x61	; 97
    2646:	91 e0       	ldi	r25, 0x01	; 1
    2648:	90 93 84 01 	sts	0x0184, r25
    264c:	80 93 83 01 	sts	0x0183, r24
    2650:	8d e5       	ldi	r24, 0x5D	; 93
    2652:	91 e0       	ldi	r25, 0x01	; 1
    2654:	90 93 6a 01 	sts	0x016A, r25
    2658:	80 93 69 01 	sts	0x0169, r24
    265c:	89 e5       	ldi	r24, 0x59	; 89
    265e:	91 e0       	ldi	r25, 0x01	; 1
    2660:	90 93 6c 01 	sts	0x016C, r25
    2664:	80 93 6b 01 	sts	0x016B, r24
    2668:	85 e5       	ldi	r24, 0x55	; 85
    266a:	91 e0       	ldi	r25, 0x01	; 1
    266c:	90 93 7e 01 	sts	0x017E, r25
    2670:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	90 93 2c 01 	sts	0x012C, r25
    267c:	80 93 2b 01 	sts	0x012B, r24
                        break;
    2680:	9c c0       	rjmp	.+312    	; 0x27ba <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
    2682:	ed 81       	ldd	r30, Y+5	; 0x05
    2684:	fe 81       	ldd	r31, Y+6	; 0x06
    2686:	e2 30       	cpi	r30, 0x02	; 2
    2688:	f1 05       	cpc	r31, r1
    268a:	39 f1       	breq	.+78     	; 0x26da <localize+0x758>
    268c:	24 f4       	brge	.+8      	; 0x2696 <localize+0x714>
    268e:	31 97       	sbiw	r30, 0x01	; 1
    2690:	09 f0       	breq	.+2      	; 0x2694 <localize+0x712>
    2692:	6e c0       	rjmp	.+220    	; 0x2770 <localize+0x7ee>
    2694:	09 c0       	rjmp	.+18     	; 0x26a8 <localize+0x726>
    2696:	8d 81       	ldd	r24, Y+5	; 0x05
    2698:	9e 81       	ldd	r25, Y+6	; 0x06
    269a:	83 30       	cpi	r24, 0x03	; 3
    269c:	91 05       	cpc	r25, r1
    269e:	b1 f1       	breq	.+108    	; 0x270c <localize+0x78a>
    26a0:	04 97       	sbiw	r24, 0x04	; 4
    26a2:	09 f0       	breq	.+2      	; 0x26a6 <localize+0x724>
    26a4:	65 c0       	rjmp	.+202    	; 0x2770 <localize+0x7ee>
    26a6:	4b c0       	rjmp	.+150    	; 0x273e <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
    26a8:	89 e5       	ldi	r24, 0x59	; 89
    26aa:	91 e0       	ldi	r25, 0x01	; 1
    26ac:	90 93 84 01 	sts	0x0184, r25
    26b0:	80 93 83 01 	sts	0x0183, r24
    26b4:	81 e6       	ldi	r24, 0x61	; 97
    26b6:	91 e0       	ldi	r25, 0x01	; 1
    26b8:	90 93 6a 01 	sts	0x016A, r25
    26bc:	80 93 69 01 	sts	0x0169, r24
    26c0:	85 e5       	ldi	r24, 0x55	; 85
    26c2:	91 e0       	ldi	r25, 0x01	; 1
    26c4:	90 93 6c 01 	sts	0x016C, r25
    26c8:	80 93 6b 01 	sts	0x016B, r24
    26cc:	8d e5       	ldi	r24, 0x5D	; 93
    26ce:	91 e0       	ldi	r25, 0x01	; 1
    26d0:	90 93 7e 01 	sts	0x017E, r25
    26d4:	80 93 7d 01 	sts	0x017D, r24
                        break;
    26d8:	6a c0       	rjmp	.+212    	; 0x27ae <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
    26da:	85 e5       	ldi	r24, 0x55	; 85
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	90 93 84 01 	sts	0x0184, r25
    26e2:	80 93 83 01 	sts	0x0183, r24
    26e6:	81 e6       	ldi	r24, 0x61	; 97
    26e8:	91 e0       	ldi	r25, 0x01	; 1
    26ea:	90 93 6a 01 	sts	0x016A, r25
    26ee:	80 93 69 01 	sts	0x0169, r24
    26f2:	89 e5       	ldi	r24, 0x59	; 89
    26f4:	91 e0       	ldi	r25, 0x01	; 1
    26f6:	90 93 6c 01 	sts	0x016C, r25
    26fa:	80 93 6b 01 	sts	0x016B, r24
    26fe:	8d e5       	ldi	r24, 0x5D	; 93
    2700:	91 e0       	ldi	r25, 0x01	; 1
    2702:	90 93 7e 01 	sts	0x017E, r25
    2706:	80 93 7d 01 	sts	0x017D, r24
                        break;
    270a:	51 c0       	rjmp	.+162    	; 0x27ae <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
    270c:	89 e5       	ldi	r24, 0x59	; 89
    270e:	91 e0       	ldi	r25, 0x01	; 1
    2710:	90 93 84 01 	sts	0x0184, r25
    2714:	80 93 83 01 	sts	0x0183, r24
    2718:	8d e5       	ldi	r24, 0x5D	; 93
    271a:	91 e0       	ldi	r25, 0x01	; 1
    271c:	90 93 6a 01 	sts	0x016A, r25
    2720:	80 93 69 01 	sts	0x0169, r24
    2724:	85 e5       	ldi	r24, 0x55	; 85
    2726:	91 e0       	ldi	r25, 0x01	; 1
    2728:	90 93 6c 01 	sts	0x016C, r25
    272c:	80 93 6b 01 	sts	0x016B, r24
    2730:	81 e6       	ldi	r24, 0x61	; 97
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	90 93 7e 01 	sts	0x017E, r25
    2738:	80 93 7d 01 	sts	0x017D, r24
                        break;
    273c:	38 c0       	rjmp	.+112    	; 0x27ae <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
    273e:	85 e5       	ldi	r24, 0x55	; 85
    2740:	91 e0       	ldi	r25, 0x01	; 1
    2742:	90 93 84 01 	sts	0x0184, r25
    2746:	80 93 83 01 	sts	0x0183, r24
    274a:	8d e5       	ldi	r24, 0x5D	; 93
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	90 93 6a 01 	sts	0x016A, r25
    2752:	80 93 69 01 	sts	0x0169, r24
    2756:	89 e5       	ldi	r24, 0x59	; 89
    2758:	91 e0       	ldi	r25, 0x01	; 1
    275a:	90 93 6c 01 	sts	0x016C, r25
    275e:	80 93 6b 01 	sts	0x016B, r24
    2762:	81 e6       	ldi	r24, 0x61	; 97
    2764:	91 e0       	ldi	r25, 0x01	; 1
    2766:	90 93 7e 01 	sts	0x017E, r25
    276a:	80 93 7d 01 	sts	0x017D, r24
                        break;
    276e:	1f c0       	rjmp	.+62     	; 0x27ae <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2770:	81 e6       	ldi	r24, 0x61	; 97
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	90 93 84 01 	sts	0x0184, r25
    2778:	80 93 83 01 	sts	0x0183, r24
    277c:	8d e5       	ldi	r24, 0x5D	; 93
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	90 93 6a 01 	sts	0x016A, r25
    2784:	80 93 69 01 	sts	0x0169, r24
    2788:	89 e5       	ldi	r24, 0x59	; 89
    278a:	91 e0       	ldi	r25, 0x01	; 1
    278c:	90 93 6c 01 	sts	0x016C, r25
    2790:	80 93 6b 01 	sts	0x016B, r24
    2794:	85 e5       	ldi	r24, 0x55	; 85
    2796:	91 e0       	ldi	r25, 0x01	; 1
    2798:	90 93 7e 01 	sts	0x017E, r25
    279c:	80 93 7d 01 	sts	0x017D, r24
                        flag_no_good_stars = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	90 93 2c 01 	sts	0x012C, r25
    27a8:	80 93 2b 01 	sts	0x012B, r24
                        break;
    27ac:	06 c0       	rjmp	.+12     	; 0x27ba <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
    27ae:	80 91 2b 01 	lds	r24, 0x012B
    27b2:	90 91 2c 01 	lds	r25, 0x012C
    27b6:	89 2b       	or	r24, r25
    27b8:	d1 f0       	breq	.+52     	; 0x27ee <localize+0x86c>
        *orientation = orientation_prev;
    27ba:	80 91 3b 01 	lds	r24, 0x013B
    27be:	90 91 3c 01 	lds	r25, 0x013C
    27c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    27c4:	f8 a1       	ldd	r31, Y+32	; 0x20
    27c6:	91 83       	std	Z+1, r25	; 0x01
    27c8:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
    27ca:	80 91 39 01 	lds	r24, 0x0139
    27ce:	90 91 3a 01 	lds	r25, 0x013A
    27d2:	ef 81       	ldd	r30, Y+7	; 0x07
    27d4:	f8 85       	ldd	r31, Y+8	; 0x08
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
    27da:	80 91 37 01 	lds	r24, 0x0137
    27de:	90 91 38 01 	lds	r25, 0x0138
    27e2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    27e4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    27e6:	91 83       	std	Z+1, r25	; 0x01
    27e8:	80 83       	st	Z, r24
        return 0;
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	e9 c3       	rjmp	.+2002   	; 0x2fc0 <localize+0x103e>
    }
    
    
    float scale = P_vertical/max_distance;
    27ee:	26 2d       	mov	r18, r6
    27f0:	37 2d       	mov	r19, r7
    27f2:	48 2d       	mov	r20, r8
    27f4:	59 2d       	mov	r21, r9
    27f6:	60 e0       	ldi	r22, 0x00	; 0
    27f8:	70 e0       	ldi	r23, 0x00	; 0
    27fa:	88 ee       	ldi	r24, 0xE8	; 232
    27fc:	91 e4       	ldi	r25, 0x41	; 65
    27fe:	0e 94 c7 18 	call	0x318e	; 0x318e <__divsf3>
    2802:	26 2e       	mov	r2, r22
    2804:	37 2e       	mov	r3, r23
    2806:	48 2e       	mov	r4, r24
    2808:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
    280a:	e0 90 83 01 	lds	r14, 0x0183
    280e:	f0 90 84 01 	lds	r15, 0x0184
    2812:	0f 2e       	mov	r0, r31
    2814:	f5 e7       	ldi	r31, 0x75	; 117
    2816:	8f 2e       	mov	r8, r31
    2818:	f1 e0       	ldi	r31, 0x01	; 1
    281a:	9f 2e       	mov	r9, r31
    281c:	f0 2d       	mov	r31, r0
    281e:	f7 01       	movw	r30, r14
    2820:	60 81       	ld	r22, Z
    2822:	71 81       	ldd	r23, Z+1	; 0x01
    2824:	88 27       	eor	r24, r24
    2826:	77 fd       	sbrc	r23, 7
    2828:	80 95       	com	r24
    282a:	98 2f       	mov	r25, r24
    282c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2830:	22 2d       	mov	r18, r2
    2832:	33 2d       	mov	r19, r3
    2834:	44 2d       	mov	r20, r4
    2836:	55 2d       	mov	r21, r5
    2838:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    283c:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2840:	f4 01       	movw	r30, r8
    2842:	71 83       	std	Z+1, r23	; 0x01
    2844:	60 83       	st	Z, r22
    2846:	0f 2e       	mov	r0, r31
    2848:	f7 e7       	ldi	r31, 0x77	; 119
    284a:	6f 2e       	mov	r6, r31
    284c:	f1 e0       	ldi	r31, 0x01	; 1
    284e:	7f 2e       	mov	r7, r31
    2850:	f0 2d       	mov	r31, r0
    2852:	f7 01       	movw	r30, r14
    2854:	62 81       	ldd	r22, Z+2	; 0x02
    2856:	73 81       	ldd	r23, Z+3	; 0x03
    2858:	88 27       	eor	r24, r24
    285a:	77 fd       	sbrc	r23, 7
    285c:	80 95       	com	r24
    285e:	98 2f       	mov	r25, r24
    2860:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2864:	22 2d       	mov	r18, r2
    2866:	33 2d       	mov	r19, r3
    2868:	44 2d       	mov	r20, r4
    286a:	55 2d       	mov	r21, r5
    286c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2870:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2874:	f3 01       	movw	r30, r6
    2876:	71 83       	std	Z+1, r23	; 0x01
    2878:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
    287a:	00 91 6b 01 	lds	r16, 0x016B
    287e:	10 91 6c 01 	lds	r17, 0x016C
    2882:	0f 2e       	mov	r0, r31
    2884:	f5 e6       	ldi	r31, 0x65	; 101
    2886:	af 2e       	mov	r10, r31
    2888:	f1 e0       	ldi	r31, 0x01	; 1
    288a:	bf 2e       	mov	r11, r31
    288c:	f0 2d       	mov	r31, r0
    288e:	f8 01       	movw	r30, r16
    2890:	60 81       	ld	r22, Z
    2892:	71 81       	ldd	r23, Z+1	; 0x01
    2894:	88 27       	eor	r24, r24
    2896:	77 fd       	sbrc	r23, 7
    2898:	80 95       	com	r24
    289a:	98 2f       	mov	r25, r24
    289c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    28a0:	22 2d       	mov	r18, r2
    28a2:	33 2d       	mov	r19, r3
    28a4:	44 2d       	mov	r20, r4
    28a6:	55 2d       	mov	r21, r5
    28a8:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    28ac:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    28b0:	f5 01       	movw	r30, r10
    28b2:	71 83       	std	Z+1, r23	; 0x01
    28b4:	60 83       	st	Z, r22
    28b6:	0f 2e       	mov	r0, r31
    28b8:	f7 e6       	ldi	r31, 0x67	; 103
    28ba:	cf 2e       	mov	r12, r31
    28bc:	f1 e0       	ldi	r31, 0x01	; 1
    28be:	df 2e       	mov	r13, r31
    28c0:	f0 2d       	mov	r31, r0
    28c2:	f8 01       	movw	r30, r16
    28c4:	62 81       	ldd	r22, Z+2	; 0x02
    28c6:	73 81       	ldd	r23, Z+3	; 0x03
    28c8:	88 27       	eor	r24, r24
    28ca:	77 fd       	sbrc	r23, 7
    28cc:	80 95       	com	r24
    28ce:	98 2f       	mov	r25, r24
    28d0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    28d4:	22 2d       	mov	r18, r2
    28d6:	33 2d       	mov	r19, r3
    28d8:	44 2d       	mov	r20, r4
    28da:	55 2d       	mov	r21, r5
    28dc:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    28e0:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    28e4:	f6 01       	movw	r30, r12
    28e6:	71 83       	std	Z+1, r23	; 0x01
    28e8:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
    28ea:	f7 01       	movw	r30, r14
    28ec:	60 81       	ld	r22, Z
    28ee:	71 81       	ldd	r23, Z+1	; 0x01
    28f0:	f8 01       	movw	r30, r16
    28f2:	80 81       	ld	r24, Z
    28f4:	91 81       	ldd	r25, Z+1	; 0x01
    28f6:	68 0f       	add	r22, r24
    28f8:	79 1f       	adc	r23, r25
    28fa:	88 27       	eor	r24, r24
    28fc:	77 fd       	sbrc	r23, 7
    28fe:	80 95       	com	r24
    2900:	98 2f       	mov	r25, r24
    2902:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e0       	ldi	r20, 0x00	; 0
    290c:	5f e3       	ldi	r21, 0x3F	; 63
    290e:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2912:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2916:	e9 a1       	ldd	r30, Y+33	; 0x21
    2918:	fa a1       	ldd	r31, Y+34	; 0x22
    291a:	71 83       	std	Z+1, r23	; 0x01
    291c:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
    291e:	a0 91 83 01 	lds	r26, 0x0183
    2922:	b0 91 84 01 	lds	r27, 0x0184
    2926:	e0 91 6b 01 	lds	r30, 0x016B
    292a:	f0 91 6c 01 	lds	r31, 0x016C
    292e:	12 96       	adiw	r26, 0x02	; 2
    2930:	6d 91       	ld	r22, X+
    2932:	7c 91       	ld	r23, X
    2934:	13 97       	sbiw	r26, 0x03	; 3
    2936:	82 81       	ldd	r24, Z+2	; 0x02
    2938:	93 81       	ldd	r25, Z+3	; 0x03
    293a:	68 0f       	add	r22, r24
    293c:	79 1f       	adc	r23, r25
    293e:	88 27       	eor	r24, r24
    2940:	77 fd       	sbrc	r23, 7
    2942:	80 95       	com	r24
    2944:	98 2f       	mov	r25, r24
    2946:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	5f e3       	ldi	r21, 0x3F	; 63
    2952:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2956:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    295a:	eb a1       	ldd	r30, Y+35	; 0x23
    295c:	fc a1       	ldd	r31, Y+36	; 0x24
    295e:	71 83       	std	Z+1, r23	; 0x01
    2960:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
    2962:	f4 01       	movw	r30, r8
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	f5 01       	movw	r30, r10
    296a:	80 81       	ld	r24, Z
    296c:	91 81       	ldd	r25, Z+1	; 0x01
    296e:	68 0f       	add	r22, r24
    2970:	79 1f       	adc	r23, r25
    2972:	88 27       	eor	r24, r24
    2974:	77 fd       	sbrc	r23, 7
    2976:	80 95       	com	r24
    2978:	98 2f       	mov	r25, r24
    297a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    297e:	20 e0       	ldi	r18, 0x00	; 0
    2980:	30 e0       	ldi	r19, 0x00	; 0
    2982:	40 e0       	ldi	r20, 0x00	; 0
    2984:	5f e3       	ldi	r21, 0x3F	; 63
    2986:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    298a:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    298e:	1b 01       	movw	r2, r22
    2990:	70 93 8a 01 	sts	0x018A, r23
    2994:	60 93 89 01 	sts	0x0189, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
    2998:	f3 01       	movw	r30, r6
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	f6 01       	movw	r30, r12
    29a0:	80 81       	ld	r24, Z
    29a2:	91 81       	ldd	r25, Z+1	; 0x01
    29a4:	68 0f       	add	r22, r24
    29a6:	79 1f       	adc	r23, r25
    29a8:	88 27       	eor	r24, r24
    29aa:	77 fd       	sbrc	r23, 7
    29ac:	80 95       	com	r24
    29ae:	98 2f       	mov	r25, r24
    29b0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    29b4:	20 e0       	ldi	r18, 0x00	; 0
    29b6:	30 e0       	ldi	r19, 0x00	; 0
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	5f e3       	ldi	r21, 0x3F	; 63
    29bc:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    29c0:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    29c4:	8b 01       	movw	r16, r22
    29c6:	70 93 8c 01 	sts	0x018C, r23
    29ca:	60 93 8b 01 	sts	0x018B, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
    29ce:	22 9c       	mul	r2, r2
    29d0:	b0 01       	movw	r22, r0
    29d2:	23 9c       	mul	r2, r3
    29d4:	70 0d       	add	r23, r0
    29d6:	70 0d       	add	r23, r0
    29d8:	11 24       	eor	r1, r1
    29da:	00 9f       	mul	r16, r16
    29dc:	c0 01       	movw	r24, r0
    29de:	01 9f       	mul	r16, r17
    29e0:	90 0d       	add	r25, r0
    29e2:	90 0d       	add	r25, r0
    29e4:	11 24       	eor	r1, r1
    29e6:	68 0f       	add	r22, r24
    29e8:	79 1f       	adc	r23, r25
    29ea:	88 27       	eor	r24, r24
    29ec:	77 fd       	sbrc	r23, 7
    29ee:	80 95       	com	r24
    29f0:	98 2f       	mov	r25, r24
    29f2:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    29f6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    29fa:	2b 01       	movw	r4, r22
    29fc:	3c 01       	movw	r6, r24
    29fe:	60 93 6d 01 	sts	0x016D, r22
    2a02:	70 93 6e 01 	sts	0x016E, r23
    2a06:	80 93 6f 01 	sts	0x016F, r24
    2a0a:	90 93 70 01 	sts	0x0170, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
    2a0e:	80 91 6b 01 	lds	r24, 0x016B
    2a12:	90 91 6c 01 	lds	r25, 0x016C
    2a16:	9a 83       	std	Y+2, r25	; 0x02
    2a18:	89 83       	std	Y+1, r24	; 0x01
    2a1a:	e0 91 83 01 	lds	r30, 0x0183
    2a1e:	f0 91 84 01 	lds	r31, 0x0184
    2a22:	fe 83       	std	Y+6, r31	; 0x06
    2a24:	ed 83       	std	Y+5, r30	; 0x05
    2a26:	fc 01       	movw	r30, r24
    2a28:	60 81       	ld	r22, Z
    2a2a:	71 81       	ldd	r23, Z+1	; 0x01
    2a2c:	ed 81       	ldd	r30, Y+5	; 0x05
    2a2e:	fe 81       	ldd	r31, Y+6	; 0x06
    2a30:	80 81       	ld	r24, Z
    2a32:	91 81       	ldd	r25, Z+1	; 0x01
    2a34:	68 1b       	sub	r22, r24
    2a36:	79 0b       	sbc	r23, r25
    2a38:	88 27       	eor	r24, r24
    2a3a:	77 fd       	sbrc	r23, 7
    2a3c:	80 95       	com	r24
    2a3e:	98 2f       	mov	r25, r24
    2a40:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2a44:	6b 01       	movw	r12, r22
    2a46:	7c 01       	movw	r14, r24
    2a48:	e9 81       	ldd	r30, Y+1	; 0x01
    2a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a4c:	62 81       	ldd	r22, Z+2	; 0x02
    2a4e:	73 81       	ldd	r23, Z+3	; 0x03
    2a50:	ed 81       	ldd	r30, Y+5	; 0x05
    2a52:	fe 81       	ldd	r31, Y+6	; 0x06
    2a54:	82 81       	ldd	r24, Z+2	; 0x02
    2a56:	93 81       	ldd	r25, Z+3	; 0x03
    2a58:	68 1b       	sub	r22, r24
    2a5a:	79 0b       	sbc	r23, r25
    2a5c:	88 27       	eor	r24, r24
    2a5e:	77 fd       	sbrc	r23, 7
    2a60:	80 95       	com	r24
    2a62:	98 2f       	mov	r25, r24
    2a64:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2a68:	a7 01       	movw	r20, r14
    2a6a:	96 01       	movw	r18, r12
    2a6c:	0e 94 6d 18 	call	0x30da	; 0x30da <atan2>
    2a70:	4b 01       	movw	r8, r22
    2a72:	5c 01       	movw	r10, r24
    2a74:	60 93 79 01 	sts	0x0179, r22
    2a78:	70 93 7a 01 	sts	0x017A, r23
    2a7c:	80 93 7b 01 	sts	0x017B, r24
    2a80:	90 93 7c 01 	sts	0x017C, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
    2a84:	ed 81       	ldd	r30, Y+5	; 0x05
    2a86:	fe 81       	ldd	r31, Y+6	; 0x06
    2a88:	60 81       	ld	r22, Z
    2a8a:	71 81       	ldd	r23, Z+1	; 0x01
    2a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    2a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    2a90:	80 81       	ld	r24, Z
    2a92:	91 81       	ldd	r25, Z+1	; 0x01
    2a94:	68 1b       	sub	r22, r24
    2a96:	79 0b       	sbc	r23, r25
    2a98:	88 27       	eor	r24, r24
    2a9a:	77 fd       	sbrc	r23, 7
    2a9c:	80 95       	com	r24
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2aa4:	6b 01       	movw	r12, r22
    2aa6:	7c 01       	movw	r14, r24
    2aa8:	ed 81       	ldd	r30, Y+5	; 0x05
    2aaa:	fe 81       	ldd	r31, Y+6	; 0x06
    2aac:	62 81       	ldd	r22, Z+2	; 0x02
    2aae:	73 81       	ldd	r23, Z+3	; 0x03
    2ab0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ab2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ab4:	82 81       	ldd	r24, Z+2	; 0x02
    2ab6:	93 81       	ldd	r25, Z+3	; 0x03
    2ab8:	68 1b       	sub	r22, r24
    2aba:	79 0b       	sbc	r23, r25
    2abc:	88 27       	eor	r24, r24
    2abe:	77 fd       	sbrc	r23, 7
    2ac0:	80 95       	com	r24
    2ac2:	98 2f       	mov	r25, r24
    2ac4:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2ac8:	a7 01       	movw	r20, r14
    2aca:	96 01       	movw	r18, r12
    2acc:	0e 94 6d 18 	call	0x30da	; 0x30da <atan2>
    2ad0:	6b 01       	movw	r12, r22
    2ad2:	7c 01       	movw	r14, r24
    2ad4:	60 93 71 01 	sts	0x0171, r22
    2ad8:	70 93 72 01 	sts	0x0172, r23
    2adc:	80 93 73 01 	sts	0x0173, r24
    2ae0:	90 93 74 01 	sts	0x0174, r25
    alpha = -atan2(S0[0],S0[1]);
    2ae4:	b8 01       	movw	r22, r16
    2ae6:	88 27       	eor	r24, r24
    2ae8:	77 fd       	sbrc	r23, 7
    2aea:	80 95       	com	r24
    2aec:	98 2f       	mov	r25, r24
    2aee:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2af2:	69 83       	std	Y+1, r22	; 0x01
    2af4:	7a 83       	std	Y+2, r23	; 0x02
    2af6:	8b 83       	std	Y+3, r24	; 0x03
    2af8:	9c 83       	std	Y+4, r25	; 0x04
    2afa:	b1 01       	movw	r22, r2
    2afc:	88 27       	eor	r24, r24
    2afe:	77 fd       	sbrc	r23, 7
    2b00:	80 95       	com	r24
    2b02:	98 2f       	mov	r25, r24
    2b04:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2b08:	29 81       	ldd	r18, Y+1	; 0x01
    2b0a:	3a 81       	ldd	r19, Y+2	; 0x02
    2b0c:	4b 81       	ldd	r20, Y+3	; 0x03
    2b0e:	5c 81       	ldd	r21, Y+4	; 0x04
    2b10:	0e 94 6d 18 	call	0x30da	; 0x30da <atan2>
    2b14:	9b 01       	movw	r18, r22
    2b16:	ac 01       	movw	r20, r24
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	b0 58       	subi	r27, 0x80	; 128
    2b1e:	80 93 8d 01 	sts	0x018D, r24
    2b22:	90 93 8e 01 	sts	0x018E, r25
    2b26:	a0 93 8f 01 	sts	0x018F, r26
    2b2a:	b0 93 90 01 	sts	0x0190, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    2b2e:	77 fa       	bst	r7, 7
    2b30:	70 94       	com	r7
    2b32:	77 f8       	bld	r7, 7
    2b34:	70 94       	com	r7
    2b36:	c5 01       	movw	r24, r10
    2b38:	b4 01       	movw	r22, r8
    2b3a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
    2b3e:	86 2e       	mov	r8, r22
    2b40:	97 2e       	mov	r9, r23
    2b42:	a8 2e       	mov	r10, r24
    2b44:	b9 2e       	mov	r11, r25
    2b46:	0e 94 c4 18 	call	0x3188	; 0x3188 <cos>
    2b4a:	9b 01       	movw	r18, r22
    2b4c:	ac 01       	movw	r20, r24
    2b4e:	c3 01       	movw	r24, r6
    2b50:	b2 01       	movw	r22, r4
    2b52:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2b56:	20 e0       	ldi	r18, 0x00	; 0
    2b58:	30 e0       	ldi	r19, 0x00	; 0
    2b5a:	a9 01       	movw	r20, r18
    2b5c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
    2b60:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2b64:	8b 01       	movw	r16, r22
    2b66:	70 93 34 01 	sts	0x0134, r23
    2b6a:	60 93 33 01 	sts	0x0133, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    2b6e:	68 2d       	mov	r22, r8
    2b70:	79 2d       	mov	r23, r9
    2b72:	8a 2d       	mov	r24, r10
    2b74:	9b 2d       	mov	r25, r11
    2b76:	0e 94 de 1a 	call	0x35bc	; 0x35bc <sin>
    2b7a:	9b 01       	movw	r18, r22
    2b7c:	ac 01       	movw	r20, r24
    2b7e:	c3 01       	movw	r24, r6
    2b80:	b2 01       	movw	r22, r4
    2b82:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2b86:	20 e0       	ldi	r18, 0x00	; 0
    2b88:	30 e0       	ldi	r19, 0x00	; 0
    2b8a:	40 e1       	ldi	r20, 0x10	; 16
    2b8c:	51 e4       	ldi	r21, 0x41	; 65
    2b8e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
    2b92:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2b96:	70 93 32 01 	sts	0x0132, r23
    2b9a:	60 93 31 01 	sts	0x0131, r22
    orientation_current = (theta2) * 180/M_PI;
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	44 e3       	ldi	r20, 0x34	; 52
    2ba4:	53 e4       	ldi	r21, 0x43	; 67
    2ba6:	c7 01       	movw	r24, r14
    2ba8:	b6 01       	movw	r22, r12
    2baa:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2bae:	2b ed       	ldi	r18, 0xDB	; 219
    2bb0:	3f e0       	ldi	r19, 0x0F	; 15
    2bb2:	49 e4       	ldi	r20, 0x49	; 73
    2bb4:	50 e4       	ldi	r21, 0x40	; 64
    2bb6:	0e 94 c7 18 	call	0x318e	; 0x318e <__divsf3>
    2bba:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2bbe:	70 93 36 01 	sts	0x0136, r23
    2bc2:	60 93 35 01 	sts	0x0135, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    2bc6:	c0 90 2d 01 	lds	r12, 0x012D
    2bca:	d0 90 2e 01 	lds	r13, 0x012E
    2bce:	e0 90 2f 01 	lds	r14, 0x012F
    2bd2:	f0 90 30 01 	lds	r15, 0x0130
    2bd6:	60 91 39 01 	lds	r22, 0x0139
    2bda:	70 91 3a 01 	lds	r23, 0x013A
    2bde:	88 27       	eor	r24, r24
    2be0:	77 fd       	sbrc	r23, 7
    2be2:	80 95       	com	r24
    2be4:	98 2f       	mov	r25, r24
    2be6:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2bea:	a7 01       	movw	r20, r14
    2bec:	96 01       	movw	r18, r12
    2bee:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2bf2:	4b 01       	movw	r8, r22
    2bf4:	5c 01       	movw	r10, r24
    2bf6:	a7 01       	movw	r20, r14
    2bf8:	96 01       	movw	r18, r12
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	80 e8       	ldi	r24, 0x80	; 128
    2c00:	9f e3       	ldi	r25, 0x3F	; 63
    2c02:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
    2c06:	6b 01       	movw	r12, r22
    2c08:	7c 01       	movw	r14, r24
    2c0a:	b8 01       	movw	r22, r16
    2c0c:	88 27       	eor	r24, r24
    2c0e:	77 fd       	sbrc	r23, 7
    2c10:	80 95       	com	r24
    2c12:	98 2f       	mov	r25, r24
    2c14:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2c18:	9b 01       	movw	r18, r22
    2c1a:	ac 01       	movw	r20, r24
    2c1c:	c7 01       	movw	r24, r14
    2c1e:	b6 01       	movw	r22, r12
    2c20:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2c24:	9b 01       	movw	r18, r22
    2c26:	ac 01       	movw	r20, r24
    2c28:	c5 01       	movw	r24, r10
    2c2a:	b4 01       	movw	r22, r8
    2c2c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
    2c30:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2c34:	ef 81       	ldd	r30, Y+7	; 0x07
    2c36:	f8 85       	ldd	r31, Y+8	; 0x08
    2c38:	71 83       	std	Z+1, r23	; 0x01
    2c3a:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    2c3c:	c0 90 2d 01 	lds	r12, 0x012D
    2c40:	d0 90 2e 01 	lds	r13, 0x012E
    2c44:	e0 90 2f 01 	lds	r14, 0x012F
    2c48:	f0 90 30 01 	lds	r15, 0x0130
    2c4c:	60 91 37 01 	lds	r22, 0x0137
    2c50:	70 91 38 01 	lds	r23, 0x0138
    2c54:	88 27       	eor	r24, r24
    2c56:	77 fd       	sbrc	r23, 7
    2c58:	80 95       	com	r24
    2c5a:	98 2f       	mov	r25, r24
    2c5c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2c60:	a7 01       	movw	r20, r14
    2c62:	96 01       	movw	r18, r12
    2c64:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2c68:	4b 01       	movw	r8, r22
    2c6a:	5c 01       	movw	r10, r24
    2c6c:	a7 01       	movw	r20, r14
    2c6e:	96 01       	movw	r18, r12
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	70 e0       	ldi	r23, 0x00	; 0
    2c74:	80 e8       	ldi	r24, 0x80	; 128
    2c76:	9f e3       	ldi	r25, 0x3F	; 63
    2c78:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
    2c7c:	6b 01       	movw	r12, r22
    2c7e:	7c 01       	movw	r14, r24
    2c80:	60 91 31 01 	lds	r22, 0x0131
    2c84:	70 91 32 01 	lds	r23, 0x0132
    2c88:	88 27       	eor	r24, r24
    2c8a:	77 fd       	sbrc	r23, 7
    2c8c:	80 95       	com	r24
    2c8e:	98 2f       	mov	r25, r24
    2c90:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2c94:	9b 01       	movw	r18, r22
    2c96:	ac 01       	movw	r20, r24
    2c98:	c7 01       	movw	r24, r14
    2c9a:	b6 01       	movw	r22, r12
    2c9c:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2ca0:	9b 01       	movw	r18, r22
    2ca2:	ac 01       	movw	r20, r24
    2ca4:	c5 01       	movw	r24, r10
    2ca6:	b4 01       	movw	r22, r8
    2ca8:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
    2cac:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2cb0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2cb2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2cb4:	71 83       	std	Z+1, r23	; 0x01
    2cb6:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    2cb8:	c0 90 2d 01 	lds	r12, 0x012D
    2cbc:	d0 90 2e 01 	lds	r13, 0x012E
    2cc0:	e0 90 2f 01 	lds	r14, 0x012F
    2cc4:	f0 90 30 01 	lds	r15, 0x0130
    2cc8:	60 91 3b 01 	lds	r22, 0x013B
    2ccc:	70 91 3c 01 	lds	r23, 0x013C
    2cd0:	88 27       	eor	r24, r24
    2cd2:	77 fd       	sbrc	r23, 7
    2cd4:	80 95       	com	r24
    2cd6:	98 2f       	mov	r25, r24
    2cd8:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2cdc:	a7 01       	movw	r20, r14
    2cde:	96 01       	movw	r18, r12
    2ce0:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2ce4:	4b 01       	movw	r8, r22
    2ce6:	5c 01       	movw	r10, r24
    2ce8:	a7 01       	movw	r20, r14
    2cea:	96 01       	movw	r18, r12
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	70 e0       	ldi	r23, 0x00	; 0
    2cf0:	80 e8       	ldi	r24, 0x80	; 128
    2cf2:	9f e3       	ldi	r25, 0x3F	; 63
    2cf4:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__subsf3>
    2cf8:	6b 01       	movw	r12, r22
    2cfa:	7c 01       	movw	r14, r24
    2cfc:	60 91 35 01 	lds	r22, 0x0135
    2d00:	70 91 36 01 	lds	r23, 0x0136
    2d04:	88 27       	eor	r24, r24
    2d06:	77 fd       	sbrc	r23, 7
    2d08:	80 95       	com	r24
    2d0a:	98 2f       	mov	r25, r24
    2d0c:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2d10:	9b 01       	movw	r18, r22
    2d12:	ac 01       	movw	r20, r24
    2d14:	c7 01       	movw	r24, r14
    2d16:	b6 01       	movw	r22, r12
    2d18:	0e 94 7b 1a 	call	0x34f6	; 0x34f6 <__mulsf3>
    2d1c:	9b 01       	movw	r18, r22
    2d1e:	ac 01       	movw	r20, r24
    2d20:	c5 01       	movw	r24, r10
    2d22:	b4 01       	movw	r22, r8
    2d24:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__addsf3>
    2d28:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
    2d2c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d2e:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d30:	71 83       	std	Z+1, r23	; 0x01
    2d32:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    2d34:	ef 81       	ldd	r30, Y+7	; 0x07
    2d36:	f8 85       	ldd	r31, Y+8	; 0x08
    2d38:	80 81       	ld	r24, Z
    2d3a:	91 81       	ldd	r25, Z+1	; 0x01
    2d3c:	90 93 3a 01 	sts	0x013A, r25
    2d40:	80 93 39 01 	sts	0x0139, r24
    y_robot_prev     = *y_robot;
    2d44:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d46:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2d48:	80 81       	ld	r24, Z
    2d4a:	91 81       	ldd	r25, Z+1	; 0x01
    2d4c:	90 93 38 01 	sts	0x0138, r25
    2d50:	80 93 37 01 	sts	0x0137, r24
    orientation_prev = *orientation;
    2d54:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2d56:	f8 a1       	ldd	r31, Y+32	; 0x20
    2d58:	80 81       	ld	r24, Z
    2d5a:	91 81       	ldd	r25, Z+1	; 0x01
    2d5c:	90 93 3c 01 	sts	0x013C, r25
    2d60:	80 93 3b 01 	sts	0x013B, r24
    
    return 1;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	2c c1       	rjmp	.+600    	; 0x2fc0 <localize+0x103e>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    2d68:	e0 91 09 01 	lds	r30, 0x0109
    2d6c:	f0 91 0a 01 	lds	r31, 0x010A
    2d70:	4c 01       	movw	r8, r24
    2d72:	8e 1a       	sub	r8, r30
    2d74:	9f 0a       	sbc	r9, r31
    2d76:	90 92 62 01 	sts	0x0162, r9
    2d7a:	80 92 61 01 	sts	0x0161, r8
    2d7e:	80 91 07 01 	lds	r24, 0x0107
    2d82:	90 91 08 01 	lds	r25, 0x0108
    2d86:	08 1b       	sub	r16, r24
    2d88:	19 0b       	sbc	r17, r25
    2d8a:	10 93 64 01 	sts	0x0164, r17
    2d8e:	00 93 63 01 	sts	0x0163, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    2d92:	3b 01       	movw	r6, r22
    2d94:	6e 1a       	sub	r6, r30
    2d96:	7f 0a       	sbc	r7, r31
    2d98:	70 92 5e 01 	sts	0x015E, r7
    2d9c:	60 92 5d 01 	sts	0x015D, r6
    2da0:	e8 1a       	sub	r14, r24
    2da2:	f9 0a       	sbc	r15, r25
    2da4:	f0 92 60 01 	sts	0x0160, r15
    2da8:	e0 92 5f 01 	sts	0x015F, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    2dac:	2a 01       	movw	r4, r20
    2dae:	4e 1a       	sub	r4, r30
    2db0:	5f 0a       	sbc	r5, r31
    2db2:	50 92 5a 01 	sts	0x015A, r5
    2db6:	40 92 59 01 	sts	0x0159, r4
    2dba:	16 01       	movw	r2, r12
    2dbc:	28 1a       	sub	r2, r24
    2dbe:	39 0a       	sbc	r3, r25
    2dc0:	30 92 5c 01 	sts	0x015C, r3
    2dc4:	20 92 5b 01 	sts	0x015B, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    2dc8:	69 01       	movw	r12, r18
    2dca:	ce 1a       	sub	r12, r30
    2dcc:	df 0a       	sbc	r13, r31
    2dce:	d0 92 56 01 	sts	0x0156, r13
    2dd2:	c0 92 55 01 	sts	0x0155, r12
    2dd6:	a8 1a       	sub	r10, r24
    2dd8:	b9 0a       	sbc	r11, r25
    2dda:	b0 92 58 01 	sts	0x0158, r11
    2dde:	a0 92 57 01 	sts	0x0157, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    2de2:	93 01       	movw	r18, r6
    2de4:	28 19       	sub	r18, r8
    2de6:	39 09       	sbc	r19, r9
    2de8:	c7 01       	movw	r24, r14
    2dea:	80 1b       	sub	r24, r16
    2dec:	91 0b       	sbc	r25, r17
    2dee:	22 9f       	mul	r18, r18
    2df0:	b0 01       	movw	r22, r0
    2df2:	23 9f       	mul	r18, r19
    2df4:	70 0d       	add	r23, r0
    2df6:	70 0d       	add	r23, r0
    2df8:	11 24       	eor	r1, r1
    2dfa:	88 9f       	mul	r24, r24
    2dfc:	90 01       	movw	r18, r0
    2dfe:	89 9f       	mul	r24, r25
    2e00:	30 0d       	add	r19, r0
    2e02:	30 0d       	add	r19, r0
    2e04:	11 24       	eor	r1, r1
    2e06:	62 0f       	add	r22, r18
    2e08:	73 1f       	adc	r23, r19
    2e0a:	88 27       	eor	r24, r24
    2e0c:	77 fd       	sbrc	r23, 7
    2e0e:	80 95       	com	r24
    2e10:	98 2f       	mov	r25, r24
    2e12:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2e16:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    2e1a:	60 93 3d 01 	sts	0x013D, r22
    2e1e:	70 93 3e 01 	sts	0x013E, r23
    2e22:	80 93 3f 01 	sts	0x013F, r24
    2e26:	90 93 40 01 	sts	0x0140, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    2e2a:	92 01       	movw	r18, r4
    2e2c:	28 19       	sub	r18, r8
    2e2e:	39 09       	sbc	r19, r9
    2e30:	c1 01       	movw	r24, r2
    2e32:	80 1b       	sub	r24, r16
    2e34:	91 0b       	sbc	r25, r17
    2e36:	22 9f       	mul	r18, r18
    2e38:	b0 01       	movw	r22, r0
    2e3a:	23 9f       	mul	r18, r19
    2e3c:	70 0d       	add	r23, r0
    2e3e:	70 0d       	add	r23, r0
    2e40:	11 24       	eor	r1, r1
    2e42:	88 9f       	mul	r24, r24
    2e44:	90 01       	movw	r18, r0
    2e46:	89 9f       	mul	r24, r25
    2e48:	30 0d       	add	r19, r0
    2e4a:	30 0d       	add	r19, r0
    2e4c:	11 24       	eor	r1, r1
    2e4e:	62 0f       	add	r22, r18
    2e50:	73 1f       	adc	r23, r19
    2e52:	88 27       	eor	r24, r24
    2e54:	77 fd       	sbrc	r23, 7
    2e56:	80 95       	com	r24
    2e58:	98 2f       	mov	r25, r24
    2e5a:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2e5e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    2e62:	60 93 41 01 	sts	0x0141, r22
    2e66:	70 93 42 01 	sts	0x0142, r23
    2e6a:	80 93 43 01 	sts	0x0143, r24
    2e6e:	90 93 44 01 	sts	0x0144, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    2e72:	96 01       	movw	r18, r12
    2e74:	28 19       	sub	r18, r8
    2e76:	39 09       	sbc	r19, r9
    2e78:	c5 01       	movw	r24, r10
    2e7a:	80 1b       	sub	r24, r16
    2e7c:	91 0b       	sbc	r25, r17
    2e7e:	22 9f       	mul	r18, r18
    2e80:	b0 01       	movw	r22, r0
    2e82:	23 9f       	mul	r18, r19
    2e84:	70 0d       	add	r23, r0
    2e86:	70 0d       	add	r23, r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	88 9f       	mul	r24, r24
    2e8c:	90 01       	movw	r18, r0
    2e8e:	89 9f       	mul	r24, r25
    2e90:	30 0d       	add	r19, r0
    2e92:	30 0d       	add	r19, r0
    2e94:	11 24       	eor	r1, r1
    2e96:	62 0f       	add	r22, r18
    2e98:	73 1f       	adc	r23, r19
    2e9a:	88 27       	eor	r24, r24
    2e9c:	77 fd       	sbrc	r23, 7
    2e9e:	80 95       	com	r24
    2ea0:	98 2f       	mov	r25, r24
    2ea2:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2ea6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    2eaa:	60 93 45 01 	sts	0x0145, r22
    2eae:	70 93 46 01 	sts	0x0146, r23
    2eb2:	80 93 47 01 	sts	0x0147, r24
    2eb6:	90 93 48 01 	sts	0x0148, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    2eba:	92 01       	movw	r18, r4
    2ebc:	26 19       	sub	r18, r6
    2ebe:	37 09       	sbc	r19, r7
    2ec0:	c1 01       	movw	r24, r2
    2ec2:	8e 19       	sub	r24, r14
    2ec4:	9f 09       	sbc	r25, r15
    2ec6:	22 9f       	mul	r18, r18
    2ec8:	b0 01       	movw	r22, r0
    2eca:	23 9f       	mul	r18, r19
    2ecc:	70 0d       	add	r23, r0
    2ece:	70 0d       	add	r23, r0
    2ed0:	11 24       	eor	r1, r1
    2ed2:	88 9f       	mul	r24, r24
    2ed4:	90 01       	movw	r18, r0
    2ed6:	89 9f       	mul	r24, r25
    2ed8:	30 0d       	add	r19, r0
    2eda:	30 0d       	add	r19, r0
    2edc:	11 24       	eor	r1, r1
    2ede:	62 0f       	add	r22, r18
    2ee0:	73 1f       	adc	r23, r19
    2ee2:	88 27       	eor	r24, r24
    2ee4:	77 fd       	sbrc	r23, 7
    2ee6:	80 95       	com	r24
    2ee8:	98 2f       	mov	r25, r24
    2eea:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2eee:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    2ef2:	60 93 49 01 	sts	0x0149, r22
    2ef6:	70 93 4a 01 	sts	0x014A, r23
    2efa:	80 93 4b 01 	sts	0x014B, r24
    2efe:	90 93 4c 01 	sts	0x014C, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    2f02:	96 01       	movw	r18, r12
    2f04:	26 19       	sub	r18, r6
    2f06:	37 09       	sbc	r19, r7
    2f08:	c5 01       	movw	r24, r10
    2f0a:	8e 19       	sub	r24, r14
    2f0c:	9f 09       	sbc	r25, r15
    2f0e:	22 9f       	mul	r18, r18
    2f10:	b0 01       	movw	r22, r0
    2f12:	23 9f       	mul	r18, r19
    2f14:	70 0d       	add	r23, r0
    2f16:	70 0d       	add	r23, r0
    2f18:	11 24       	eor	r1, r1
    2f1a:	88 9f       	mul	r24, r24
    2f1c:	90 01       	movw	r18, r0
    2f1e:	89 9f       	mul	r24, r25
    2f20:	30 0d       	add	r19, r0
    2f22:	30 0d       	add	r19, r0
    2f24:	11 24       	eor	r1, r1
    2f26:	62 0f       	add	r22, r18
    2f28:	73 1f       	adc	r23, r19
    2f2a:	88 27       	eor	r24, r24
    2f2c:	77 fd       	sbrc	r23, 7
    2f2e:	80 95       	com	r24
    2f30:	98 2f       	mov	r25, r24
    2f32:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2f36:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    2f3a:	60 93 4d 01 	sts	0x014D, r22
    2f3e:	70 93 4e 01 	sts	0x014E, r23
    2f42:	80 93 4f 01 	sts	0x014F, r24
    2f46:	90 93 50 01 	sts	0x0150, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    2f4a:	c4 18       	sub	r12, r4
    2f4c:	d5 08       	sbc	r13, r5
    2f4e:	a2 18       	sub	r10, r2
    2f50:	b3 08       	sbc	r11, r3
    2f52:	cc 9c       	mul	r12, r12
    2f54:	b0 01       	movw	r22, r0
    2f56:	cd 9c       	mul	r12, r13
    2f58:	70 0d       	add	r23, r0
    2f5a:	70 0d       	add	r23, r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	aa 9c       	mul	r10, r10
    2f60:	c0 01       	movw	r24, r0
    2f62:	ab 9c       	mul	r10, r11
    2f64:	90 0d       	add	r25, r0
    2f66:	90 0d       	add	r25, r0
    2f68:	11 24       	eor	r1, r1
    2f6a:	68 0f       	add	r22, r24
    2f6c:	79 1f       	adc	r23, r25
    2f6e:	88 27       	eor	r24, r24
    2f70:	77 fd       	sbrc	r23, 7
    2f72:	80 95       	com	r24
    2f74:	98 2f       	mov	r25, r24
    2f76:	0e 94 62 19 	call	0x32c4	; 0x32c4 <__floatsisf>
    2f7a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <sqrt>
    2f7e:	60 93 51 01 	sts	0x0151, r22
    2f82:	70 93 52 01 	sts	0x0152, r23
    2f86:	80 93 53 01 	sts	0x0153, r24
    2f8a:	90 93 54 01 	sts	0x0154, r25
    2f8e:	0d e3       	ldi	r16, 0x3D	; 61
    2f90:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    2f92:	e1 2c       	mov	r14, r1
    2f94:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    2f96:	1e 82       	std	Y+6, r1	; 0x06
    2f98:	1d 82       	std	Y+5, r1	; 0x05
    2f9a:	1a 82       	std	Y+2, r1	; 0x02
    2f9c:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    2f9e:	21 2c       	mov	r2, r1
    2fa0:	68 94       	set
    2fa2:	33 24       	eor	r3, r3
    2fa4:	36 f8       	bld	r3, 6
    2fa6:	0f 2e       	mov	r0, r31
    2fa8:	fc e1       	ldi	r31, 0x1C	; 28
    2faa:	4f 2e       	mov	r4, r31
    2fac:	f0 2d       	mov	r31, r0
    2fae:	0f 2e       	mov	r0, r31
    2fb0:	f6 e4       	ldi	r31, 0x46	; 70
    2fb2:	5f 2e       	mov	r5, r31
    2fb4:	f0 2d       	mov	r31, r0
    2fb6:	61 2c       	mov	r6, r1
    2fb8:	71 2c       	mov	r7, r1
    2fba:	81 2c       	mov	r8, r1
    2fbc:	91 2c       	mov	r9, r1
    2fbe:	2c c8       	rjmp	.-4008   	; 0x2018 <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    2fc0:	28 96       	adiw	r28, 0x08	; 8
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61
    2fcc:	df 91       	pop	r29
    2fce:	cf 91       	pop	r28
    2fd0:	1f 91       	pop	r17
    2fd2:	0f 91       	pop	r16
    2fd4:	ff 90       	pop	r15
    2fd6:	ef 90       	pop	r14
    2fd8:	df 90       	pop	r13
    2fda:	cf 90       	pop	r12
    2fdc:	bf 90       	pop	r11
    2fde:	af 90       	pop	r10
    2fe0:	9f 90       	pop	r9
    2fe2:	8f 90       	pop	r8
    2fe4:	7f 90       	pop	r7
    2fe6:	6f 90       	pop	r6
    2fe8:	5f 90       	pop	r5
    2fea:	4f 90       	pop	r4
    2fec:	3f 90       	pop	r3
    2fee:	2f 90       	pop	r2
    2ff0:	08 95       	ret

00002ff2 <__subsf3>:
    2ff2:	50 58       	subi	r21, 0x80	; 128

00002ff4 <__addsf3>:
    2ff4:	bb 27       	eor	r27, r27
    2ff6:	aa 27       	eor	r26, r26
    2ff8:	0e d0       	rcall	.+28     	; 0x3016 <__addsf3x>
    2ffa:	27 c2       	rjmp	.+1102   	; 0x344a <__fp_round>
    2ffc:	f0 d1       	rcall	.+992    	; 0x33de <__fp_pscA>
    2ffe:	30 f0       	brcs	.+12     	; 0x300c <__addsf3+0x18>
    3000:	f5 d1       	rcall	.+1002   	; 0x33ec <__fp_pscB>
    3002:	20 f0       	brcs	.+8      	; 0x300c <__addsf3+0x18>
    3004:	31 f4       	brne	.+12     	; 0x3012 <__addsf3+0x1e>
    3006:	9f 3f       	cpi	r25, 0xFF	; 255
    3008:	11 f4       	brne	.+4      	; 0x300e <__addsf3+0x1a>
    300a:	1e f4       	brtc	.+6      	; 0x3012 <__addsf3+0x1e>
    300c:	c0 c1       	rjmp	.+896    	; 0x338e <__fp_nan>
    300e:	0e f4       	brtc	.+2      	; 0x3012 <__addsf3+0x1e>
    3010:	e0 95       	com	r30
    3012:	e7 fb       	bst	r30, 7
    3014:	b6 c1       	rjmp	.+876    	; 0x3382 <__fp_inf>

00003016 <__addsf3x>:
    3016:	e9 2f       	mov	r30, r25
    3018:	3a d2       	rcall	.+1140   	; 0x348e <__fp_split3>
    301a:	80 f3       	brcs	.-32     	; 0x2ffc <__addsf3+0x8>
    301c:	ba 17       	cp	r27, r26
    301e:	62 07       	cpc	r22, r18
    3020:	73 07       	cpc	r23, r19
    3022:	84 07       	cpc	r24, r20
    3024:	95 07       	cpc	r25, r21
    3026:	18 f0       	brcs	.+6      	; 0x302e <__addsf3x+0x18>
    3028:	71 f4       	brne	.+28     	; 0x3046 <__addsf3x+0x30>
    302a:	9e f5       	brtc	.+102    	; 0x3092 <__addsf3x+0x7c>
    302c:	52 c2       	rjmp	.+1188   	; 0x34d2 <__fp_zero>
    302e:	0e f4       	brtc	.+2      	; 0x3032 <__addsf3x+0x1c>
    3030:	e0 95       	com	r30
    3032:	0b 2e       	mov	r0, r27
    3034:	ba 2f       	mov	r27, r26
    3036:	a0 2d       	mov	r26, r0
    3038:	0b 01       	movw	r0, r22
    303a:	b9 01       	movw	r22, r18
    303c:	90 01       	movw	r18, r0
    303e:	0c 01       	movw	r0, r24
    3040:	ca 01       	movw	r24, r20
    3042:	a0 01       	movw	r20, r0
    3044:	11 24       	eor	r1, r1
    3046:	ff 27       	eor	r31, r31
    3048:	59 1b       	sub	r21, r25
    304a:	99 f0       	breq	.+38     	; 0x3072 <__addsf3x+0x5c>
    304c:	59 3f       	cpi	r21, 0xF9	; 249
    304e:	50 f4       	brcc	.+20     	; 0x3064 <__addsf3x+0x4e>
    3050:	50 3e       	cpi	r21, 0xE0	; 224
    3052:	68 f1       	brcs	.+90     	; 0x30ae <__addsf3x+0x98>
    3054:	1a 16       	cp	r1, r26
    3056:	f0 40       	sbci	r31, 0x00	; 0
    3058:	a2 2f       	mov	r26, r18
    305a:	23 2f       	mov	r18, r19
    305c:	34 2f       	mov	r19, r20
    305e:	44 27       	eor	r20, r20
    3060:	58 5f       	subi	r21, 0xF8	; 248
    3062:	f3 cf       	rjmp	.-26     	; 0x304a <__addsf3x+0x34>
    3064:	46 95       	lsr	r20
    3066:	37 95       	ror	r19
    3068:	27 95       	ror	r18
    306a:	a7 95       	ror	r26
    306c:	f0 40       	sbci	r31, 0x00	; 0
    306e:	53 95       	inc	r21
    3070:	c9 f7       	brne	.-14     	; 0x3064 <__addsf3x+0x4e>
    3072:	7e f4       	brtc	.+30     	; 0x3092 <__addsf3x+0x7c>
    3074:	1f 16       	cp	r1, r31
    3076:	ba 0b       	sbc	r27, r26
    3078:	62 0b       	sbc	r22, r18
    307a:	73 0b       	sbc	r23, r19
    307c:	84 0b       	sbc	r24, r20
    307e:	ba f0       	brmi	.+46     	; 0x30ae <__addsf3x+0x98>
    3080:	91 50       	subi	r25, 0x01	; 1
    3082:	a1 f0       	breq	.+40     	; 0x30ac <__addsf3x+0x96>
    3084:	ff 0f       	add	r31, r31
    3086:	bb 1f       	adc	r27, r27
    3088:	66 1f       	adc	r22, r22
    308a:	77 1f       	adc	r23, r23
    308c:	88 1f       	adc	r24, r24
    308e:	c2 f7       	brpl	.-16     	; 0x3080 <__addsf3x+0x6a>
    3090:	0e c0       	rjmp	.+28     	; 0x30ae <__addsf3x+0x98>
    3092:	ba 0f       	add	r27, r26
    3094:	62 1f       	adc	r22, r18
    3096:	73 1f       	adc	r23, r19
    3098:	84 1f       	adc	r24, r20
    309a:	48 f4       	brcc	.+18     	; 0x30ae <__addsf3x+0x98>
    309c:	87 95       	ror	r24
    309e:	77 95       	ror	r23
    30a0:	67 95       	ror	r22
    30a2:	b7 95       	ror	r27
    30a4:	f7 95       	ror	r31
    30a6:	9e 3f       	cpi	r25, 0xFE	; 254
    30a8:	08 f0       	brcs	.+2      	; 0x30ac <__addsf3x+0x96>
    30aa:	b3 cf       	rjmp	.-154    	; 0x3012 <__addsf3+0x1e>
    30ac:	93 95       	inc	r25
    30ae:	88 0f       	add	r24, r24
    30b0:	08 f0       	brcs	.+2      	; 0x30b4 <__addsf3x+0x9e>
    30b2:	99 27       	eor	r25, r25
    30b4:	ee 0f       	add	r30, r30
    30b6:	97 95       	ror	r25
    30b8:	87 95       	ror	r24
    30ba:	08 95       	ret
    30bc:	90 d1       	rcall	.+800    	; 0x33de <__fp_pscA>
    30be:	58 f0       	brcs	.+22     	; 0x30d6 <__addsf3x+0xc0>
    30c0:	80 e8       	ldi	r24, 0x80	; 128
    30c2:	91 e0       	ldi	r25, 0x01	; 1
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <__addsf3x+0xb2>
    30c6:	9e ef       	ldi	r25, 0xFE	; 254
    30c8:	91 d1       	rcall	.+802    	; 0x33ec <__fp_pscB>
    30ca:	28 f0       	brcs	.+10     	; 0x30d6 <__addsf3x+0xc0>
    30cc:	40 e8       	ldi	r20, 0x80	; 128
    30ce:	51 e0       	ldi	r21, 0x01	; 1
    30d0:	59 f4       	brne	.+22     	; 0x30e8 <atan2+0xe>
    30d2:	5e ef       	ldi	r21, 0xFE	; 254
    30d4:	09 c0       	rjmp	.+18     	; 0x30e8 <atan2+0xe>
    30d6:	5b c1       	rjmp	.+694    	; 0x338e <__fp_nan>
    30d8:	fc c1       	rjmp	.+1016   	; 0x34d2 <__fp_zero>

000030da <atan2>:
    30da:	e9 2f       	mov	r30, r25
    30dc:	e0 78       	andi	r30, 0x80	; 128
    30de:	d7 d1       	rcall	.+942    	; 0x348e <__fp_split3>
    30e0:	68 f3       	brcs	.-38     	; 0x30bc <__addsf3x+0xa6>
    30e2:	09 2e       	mov	r0, r25
    30e4:	05 2a       	or	r0, r21
    30e6:	c1 f3       	breq	.-16     	; 0x30d8 <__addsf3x+0xc2>
    30e8:	26 17       	cp	r18, r22
    30ea:	37 07       	cpc	r19, r23
    30ec:	48 07       	cpc	r20, r24
    30ee:	59 07       	cpc	r21, r25
    30f0:	38 f0       	brcs	.+14     	; 0x3100 <atan2+0x26>
    30f2:	0e 2e       	mov	r0, r30
    30f4:	07 f8       	bld	r0, 7
    30f6:	e0 25       	eor	r30, r0
    30f8:	69 f0       	breq	.+26     	; 0x3114 <atan2+0x3a>
    30fa:	e0 25       	eor	r30, r0
    30fc:	e0 64       	ori	r30, 0x40	; 64
    30fe:	0a c0       	rjmp	.+20     	; 0x3114 <atan2+0x3a>
    3100:	ef 63       	ori	r30, 0x3F	; 63
    3102:	07 f8       	bld	r0, 7
    3104:	00 94       	com	r0
    3106:	07 fa       	bst	r0, 7
    3108:	db 01       	movw	r26, r22
    310a:	b9 01       	movw	r22, r18
    310c:	9d 01       	movw	r18, r26
    310e:	dc 01       	movw	r26, r24
    3110:	ca 01       	movw	r24, r20
    3112:	ad 01       	movw	r20, r26
    3114:	ef 93       	push	r30
    3116:	4a d0       	rcall	.+148    	; 0x31ac <__divsf3_pse>
    3118:	98 d1       	rcall	.+816    	; 0x344a <__fp_round>
    311a:	0a d0       	rcall	.+20     	; 0x3130 <atan>
    311c:	5f 91       	pop	r21
    311e:	55 23       	and	r21, r21
    3120:	31 f0       	breq	.+12     	; 0x312e <atan2+0x54>
    3122:	2b ed       	ldi	r18, 0xDB	; 219
    3124:	3f e0       	ldi	r19, 0x0F	; 15
    3126:	49 e4       	ldi	r20, 0x49	; 73
    3128:	50 fd       	sbrc	r21, 0
    312a:	49 ec       	ldi	r20, 0xC9	; 201
    312c:	63 cf       	rjmp	.-314    	; 0x2ff4 <__addsf3>
    312e:	08 95       	ret

00003130 <atan>:
    3130:	df 93       	push	r29
    3132:	dd 27       	eor	r29, r29
    3134:	b9 2f       	mov	r27, r25
    3136:	bf 77       	andi	r27, 0x7F	; 127
    3138:	40 e8       	ldi	r20, 0x80	; 128
    313a:	5f e3       	ldi	r21, 0x3F	; 63
    313c:	16 16       	cp	r1, r22
    313e:	17 06       	cpc	r1, r23
    3140:	48 07       	cpc	r20, r24
    3142:	5b 07       	cpc	r21, r27
    3144:	10 f4       	brcc	.+4      	; 0x314a <atan+0x1a>
    3146:	d9 2f       	mov	r29, r25
    3148:	cf d1       	rcall	.+926    	; 0x34e8 <inverse>
    314a:	9f 93       	push	r25
    314c:	8f 93       	push	r24
    314e:	7f 93       	push	r23
    3150:	6f 93       	push	r22
    3152:	7c d2       	rcall	.+1272   	; 0x364c <square>
    3154:	ec ea       	ldi	r30, 0xAC	; 172
    3156:	f0 e0       	ldi	r31, 0x00	; 0
    3158:	1d d1       	rcall	.+570    	; 0x3394 <__fp_powser>
    315a:	77 d1       	rcall	.+750    	; 0x344a <__fp_round>
    315c:	2f 91       	pop	r18
    315e:	3f 91       	pop	r19
    3160:	4f 91       	pop	r20
    3162:	5f 91       	pop	r21
    3164:	d4 d1       	rcall	.+936    	; 0x350e <__mulsf3x>
    3166:	dd 23       	and	r29, r29
    3168:	49 f0       	breq	.+18     	; 0x317c <atan+0x4c>
    316a:	90 58       	subi	r25, 0x80	; 128
    316c:	a2 ea       	ldi	r26, 0xA2	; 162
    316e:	2a ed       	ldi	r18, 0xDA	; 218
    3170:	3f e0       	ldi	r19, 0x0F	; 15
    3172:	49 ec       	ldi	r20, 0xC9	; 201
    3174:	5f e3       	ldi	r21, 0x3F	; 63
    3176:	d0 78       	andi	r29, 0x80	; 128
    3178:	5d 27       	eor	r21, r29
    317a:	4d df       	rcall	.-358    	; 0x3016 <__addsf3x>
    317c:	df 91       	pop	r29
    317e:	65 c1       	rjmp	.+714    	; 0x344a <__fp_round>

00003180 <__cmpsf2>:
    3180:	dc d0       	rcall	.+440    	; 0x333a <__fp_cmp>
    3182:	08 f4       	brcc	.+2      	; 0x3186 <__cmpsf2+0x6>
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	08 95       	ret

00003188 <cos>:
    3188:	39 d1       	rcall	.+626    	; 0x33fc <__fp_rempio2>
    318a:	e3 95       	inc	r30
    318c:	6f c1       	rjmp	.+734    	; 0x346c <__fp_sinus>

0000318e <__divsf3>:
    318e:	0c d0       	rcall	.+24     	; 0x31a8 <__divsf3x>
    3190:	5c c1       	rjmp	.+696    	; 0x344a <__fp_round>
    3192:	2c d1       	rcall	.+600    	; 0x33ec <__fp_pscB>
    3194:	40 f0       	brcs	.+16     	; 0x31a6 <__divsf3+0x18>
    3196:	23 d1       	rcall	.+582    	; 0x33de <__fp_pscA>
    3198:	30 f0       	brcs	.+12     	; 0x31a6 <__divsf3+0x18>
    319a:	21 f4       	brne	.+8      	; 0x31a4 <__divsf3+0x16>
    319c:	5f 3f       	cpi	r21, 0xFF	; 255
    319e:	19 f0       	breq	.+6      	; 0x31a6 <__divsf3+0x18>
    31a0:	f0 c0       	rjmp	.+480    	; 0x3382 <__fp_inf>
    31a2:	51 11       	cpse	r21, r1
    31a4:	97 c1       	rjmp	.+814    	; 0x34d4 <__fp_szero>
    31a6:	f3 c0       	rjmp	.+486    	; 0x338e <__fp_nan>

000031a8 <__divsf3x>:
    31a8:	72 d1       	rcall	.+740    	; 0x348e <__fp_split3>
    31aa:	98 f3       	brcs	.-26     	; 0x3192 <__divsf3+0x4>

000031ac <__divsf3_pse>:
    31ac:	99 23       	and	r25, r25
    31ae:	c9 f3       	breq	.-14     	; 0x31a2 <__divsf3+0x14>
    31b0:	55 23       	and	r21, r21
    31b2:	b1 f3       	breq	.-20     	; 0x31a0 <__divsf3+0x12>
    31b4:	95 1b       	sub	r25, r21
    31b6:	55 0b       	sbc	r21, r21
    31b8:	bb 27       	eor	r27, r27
    31ba:	aa 27       	eor	r26, r26
    31bc:	62 17       	cp	r22, r18
    31be:	73 07       	cpc	r23, r19
    31c0:	84 07       	cpc	r24, r20
    31c2:	38 f0       	brcs	.+14     	; 0x31d2 <__divsf3_pse+0x26>
    31c4:	9f 5f       	subi	r25, 0xFF	; 255
    31c6:	5f 4f       	sbci	r21, 0xFF	; 255
    31c8:	22 0f       	add	r18, r18
    31ca:	33 1f       	adc	r19, r19
    31cc:	44 1f       	adc	r20, r20
    31ce:	aa 1f       	adc	r26, r26
    31d0:	a9 f3       	breq	.-22     	; 0x31bc <__divsf3_pse+0x10>
    31d2:	33 d0       	rcall	.+102    	; 0x323a <__divsf3_pse+0x8e>
    31d4:	0e 2e       	mov	r0, r30
    31d6:	3a f0       	brmi	.+14     	; 0x31e6 <__divsf3_pse+0x3a>
    31d8:	e0 e8       	ldi	r30, 0x80	; 128
    31da:	30 d0       	rcall	.+96     	; 0x323c <__divsf3_pse+0x90>
    31dc:	91 50       	subi	r25, 0x01	; 1
    31de:	50 40       	sbci	r21, 0x00	; 0
    31e0:	e6 95       	lsr	r30
    31e2:	00 1c       	adc	r0, r0
    31e4:	ca f7       	brpl	.-14     	; 0x31d8 <__divsf3_pse+0x2c>
    31e6:	29 d0       	rcall	.+82     	; 0x323a <__divsf3_pse+0x8e>
    31e8:	fe 2f       	mov	r31, r30
    31ea:	27 d0       	rcall	.+78     	; 0x323a <__divsf3_pse+0x8e>
    31ec:	66 0f       	add	r22, r22
    31ee:	77 1f       	adc	r23, r23
    31f0:	88 1f       	adc	r24, r24
    31f2:	bb 1f       	adc	r27, r27
    31f4:	26 17       	cp	r18, r22
    31f6:	37 07       	cpc	r19, r23
    31f8:	48 07       	cpc	r20, r24
    31fa:	ab 07       	cpc	r26, r27
    31fc:	b0 e8       	ldi	r27, 0x80	; 128
    31fe:	09 f0       	breq	.+2      	; 0x3202 <__divsf3_pse+0x56>
    3200:	bb 0b       	sbc	r27, r27
    3202:	80 2d       	mov	r24, r0
    3204:	bf 01       	movw	r22, r30
    3206:	ff 27       	eor	r31, r31
    3208:	93 58       	subi	r25, 0x83	; 131
    320a:	5f 4f       	sbci	r21, 0xFF	; 255
    320c:	2a f0       	brmi	.+10     	; 0x3218 <__divsf3_pse+0x6c>
    320e:	9e 3f       	cpi	r25, 0xFE	; 254
    3210:	51 05       	cpc	r21, r1
    3212:	68 f0       	brcs	.+26     	; 0x322e <__divsf3_pse+0x82>
    3214:	b6 c0       	rjmp	.+364    	; 0x3382 <__fp_inf>
    3216:	5e c1       	rjmp	.+700    	; 0x34d4 <__fp_szero>
    3218:	5f 3f       	cpi	r21, 0xFF	; 255
    321a:	ec f3       	brlt	.-6      	; 0x3216 <__divsf3_pse+0x6a>
    321c:	98 3e       	cpi	r25, 0xE8	; 232
    321e:	dc f3       	brlt	.-10     	; 0x3216 <__divsf3_pse+0x6a>
    3220:	86 95       	lsr	r24
    3222:	77 95       	ror	r23
    3224:	67 95       	ror	r22
    3226:	b7 95       	ror	r27
    3228:	f7 95       	ror	r31
    322a:	9f 5f       	subi	r25, 0xFF	; 255
    322c:	c9 f7       	brne	.-14     	; 0x3220 <__divsf3_pse+0x74>
    322e:	88 0f       	add	r24, r24
    3230:	91 1d       	adc	r25, r1
    3232:	96 95       	lsr	r25
    3234:	87 95       	ror	r24
    3236:	97 f9       	bld	r25, 7
    3238:	08 95       	ret
    323a:	e1 e0       	ldi	r30, 0x01	; 1
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	88 1f       	adc	r24, r24
    3242:	bb 1f       	adc	r27, r27
    3244:	62 17       	cp	r22, r18
    3246:	73 07       	cpc	r23, r19
    3248:	84 07       	cpc	r24, r20
    324a:	ba 07       	cpc	r27, r26
    324c:	20 f0       	brcs	.+8      	; 0x3256 <__divsf3_pse+0xaa>
    324e:	62 1b       	sub	r22, r18
    3250:	73 0b       	sbc	r23, r19
    3252:	84 0b       	sbc	r24, r20
    3254:	ba 0b       	sbc	r27, r26
    3256:	ee 1f       	adc	r30, r30
    3258:	88 f7       	brcc	.-30     	; 0x323c <__divsf3_pse+0x90>
    325a:	e0 95       	com	r30
    325c:	08 95       	ret

0000325e <__fixsfsi>:
    325e:	04 d0       	rcall	.+8      	; 0x3268 <__fixunssfsi>
    3260:	68 94       	set
    3262:	b1 11       	cpse	r27, r1
    3264:	37 c1       	rjmp	.+622    	; 0x34d4 <__fp_szero>
    3266:	08 95       	ret

00003268 <__fixunssfsi>:
    3268:	1a d1       	rcall	.+564    	; 0x349e <__fp_splitA>
    326a:	88 f0       	brcs	.+34     	; 0x328e <__fixunssfsi+0x26>
    326c:	9f 57       	subi	r25, 0x7F	; 127
    326e:	90 f0       	brcs	.+36     	; 0x3294 <__fixunssfsi+0x2c>
    3270:	b9 2f       	mov	r27, r25
    3272:	99 27       	eor	r25, r25
    3274:	b7 51       	subi	r27, 0x17	; 23
    3276:	a0 f0       	brcs	.+40     	; 0x32a0 <__fixunssfsi+0x38>
    3278:	d1 f0       	breq	.+52     	; 0x32ae <__fixunssfsi+0x46>
    327a:	66 0f       	add	r22, r22
    327c:	77 1f       	adc	r23, r23
    327e:	88 1f       	adc	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	1a f0       	brmi	.+6      	; 0x328a <__fixunssfsi+0x22>
    3284:	ba 95       	dec	r27
    3286:	c9 f7       	brne	.-14     	; 0x327a <__fixunssfsi+0x12>
    3288:	12 c0       	rjmp	.+36     	; 0x32ae <__fixunssfsi+0x46>
    328a:	b1 30       	cpi	r27, 0x01	; 1
    328c:	81 f0       	breq	.+32     	; 0x32ae <__fixunssfsi+0x46>
    328e:	21 d1       	rcall	.+578    	; 0x34d2 <__fp_zero>
    3290:	b1 e0       	ldi	r27, 0x01	; 1
    3292:	08 95       	ret
    3294:	1e c1       	rjmp	.+572    	; 0x34d2 <__fp_zero>
    3296:	67 2f       	mov	r22, r23
    3298:	78 2f       	mov	r23, r24
    329a:	88 27       	eor	r24, r24
    329c:	b8 5f       	subi	r27, 0xF8	; 248
    329e:	39 f0       	breq	.+14     	; 0x32ae <__fixunssfsi+0x46>
    32a0:	b9 3f       	cpi	r27, 0xF9	; 249
    32a2:	cc f3       	brlt	.-14     	; 0x3296 <__fixunssfsi+0x2e>
    32a4:	86 95       	lsr	r24
    32a6:	77 95       	ror	r23
    32a8:	67 95       	ror	r22
    32aa:	b3 95       	inc	r27
    32ac:	d9 f7       	brne	.-10     	; 0x32a4 <__fixunssfsi+0x3c>
    32ae:	3e f4       	brtc	.+14     	; 0x32be <__fixunssfsi+0x56>
    32b0:	90 95       	com	r25
    32b2:	80 95       	com	r24
    32b4:	70 95       	com	r23
    32b6:	61 95       	neg	r22
    32b8:	7f 4f       	sbci	r23, 0xFF	; 255
    32ba:	8f 4f       	sbci	r24, 0xFF	; 255
    32bc:	9f 4f       	sbci	r25, 0xFF	; 255
    32be:	08 95       	ret

000032c0 <__floatunsisf>:
    32c0:	e8 94       	clt
    32c2:	09 c0       	rjmp	.+18     	; 0x32d6 <__floatsisf+0x12>

000032c4 <__floatsisf>:
    32c4:	97 fb       	bst	r25, 7
    32c6:	3e f4       	brtc	.+14     	; 0x32d6 <__floatsisf+0x12>
    32c8:	90 95       	com	r25
    32ca:	80 95       	com	r24
    32cc:	70 95       	com	r23
    32ce:	61 95       	neg	r22
    32d0:	7f 4f       	sbci	r23, 0xFF	; 255
    32d2:	8f 4f       	sbci	r24, 0xFF	; 255
    32d4:	9f 4f       	sbci	r25, 0xFF	; 255
    32d6:	99 23       	and	r25, r25
    32d8:	a9 f0       	breq	.+42     	; 0x3304 <__floatsisf+0x40>
    32da:	f9 2f       	mov	r31, r25
    32dc:	96 e9       	ldi	r25, 0x96	; 150
    32de:	bb 27       	eor	r27, r27
    32e0:	93 95       	inc	r25
    32e2:	f6 95       	lsr	r31
    32e4:	87 95       	ror	r24
    32e6:	77 95       	ror	r23
    32e8:	67 95       	ror	r22
    32ea:	b7 95       	ror	r27
    32ec:	f1 11       	cpse	r31, r1
    32ee:	f8 cf       	rjmp	.-16     	; 0x32e0 <__floatsisf+0x1c>
    32f0:	fa f4       	brpl	.+62     	; 0x3330 <__floatsisf+0x6c>
    32f2:	bb 0f       	add	r27, r27
    32f4:	11 f4       	brne	.+4      	; 0x32fa <__floatsisf+0x36>
    32f6:	60 ff       	sbrs	r22, 0
    32f8:	1b c0       	rjmp	.+54     	; 0x3330 <__floatsisf+0x6c>
    32fa:	6f 5f       	subi	r22, 0xFF	; 255
    32fc:	7f 4f       	sbci	r23, 0xFF	; 255
    32fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3300:	9f 4f       	sbci	r25, 0xFF	; 255
    3302:	16 c0       	rjmp	.+44     	; 0x3330 <__floatsisf+0x6c>
    3304:	88 23       	and	r24, r24
    3306:	11 f0       	breq	.+4      	; 0x330c <__floatsisf+0x48>
    3308:	96 e9       	ldi	r25, 0x96	; 150
    330a:	11 c0       	rjmp	.+34     	; 0x332e <__floatsisf+0x6a>
    330c:	77 23       	and	r23, r23
    330e:	21 f0       	breq	.+8      	; 0x3318 <__floatsisf+0x54>
    3310:	9e e8       	ldi	r25, 0x8E	; 142
    3312:	87 2f       	mov	r24, r23
    3314:	76 2f       	mov	r23, r22
    3316:	05 c0       	rjmp	.+10     	; 0x3322 <__floatsisf+0x5e>
    3318:	66 23       	and	r22, r22
    331a:	71 f0       	breq	.+28     	; 0x3338 <__floatsisf+0x74>
    331c:	96 e8       	ldi	r25, 0x86	; 134
    331e:	86 2f       	mov	r24, r22
    3320:	70 e0       	ldi	r23, 0x00	; 0
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	2a f0       	brmi	.+10     	; 0x3330 <__floatsisf+0x6c>
    3326:	9a 95       	dec	r25
    3328:	66 0f       	add	r22, r22
    332a:	77 1f       	adc	r23, r23
    332c:	88 1f       	adc	r24, r24
    332e:	da f7       	brpl	.-10     	; 0x3326 <__floatsisf+0x62>
    3330:	88 0f       	add	r24, r24
    3332:	96 95       	lsr	r25
    3334:	87 95       	ror	r24
    3336:	97 f9       	bld	r25, 7
    3338:	08 95       	ret

0000333a <__fp_cmp>:
    333a:	99 0f       	add	r25, r25
    333c:	00 08       	sbc	r0, r0
    333e:	55 0f       	add	r21, r21
    3340:	aa 0b       	sbc	r26, r26
    3342:	e0 e8       	ldi	r30, 0x80	; 128
    3344:	fe ef       	ldi	r31, 0xFE	; 254
    3346:	16 16       	cp	r1, r22
    3348:	17 06       	cpc	r1, r23
    334a:	e8 07       	cpc	r30, r24
    334c:	f9 07       	cpc	r31, r25
    334e:	c0 f0       	brcs	.+48     	; 0x3380 <__fp_cmp+0x46>
    3350:	12 16       	cp	r1, r18
    3352:	13 06       	cpc	r1, r19
    3354:	e4 07       	cpc	r30, r20
    3356:	f5 07       	cpc	r31, r21
    3358:	98 f0       	brcs	.+38     	; 0x3380 <__fp_cmp+0x46>
    335a:	62 1b       	sub	r22, r18
    335c:	73 0b       	sbc	r23, r19
    335e:	84 0b       	sbc	r24, r20
    3360:	95 0b       	sbc	r25, r21
    3362:	39 f4       	brne	.+14     	; 0x3372 <__fp_cmp+0x38>
    3364:	0a 26       	eor	r0, r26
    3366:	61 f0       	breq	.+24     	; 0x3380 <__fp_cmp+0x46>
    3368:	23 2b       	or	r18, r19
    336a:	24 2b       	or	r18, r20
    336c:	25 2b       	or	r18, r21
    336e:	21 f4       	brne	.+8      	; 0x3378 <__fp_cmp+0x3e>
    3370:	08 95       	ret
    3372:	0a 26       	eor	r0, r26
    3374:	09 f4       	brne	.+2      	; 0x3378 <__fp_cmp+0x3e>
    3376:	a1 40       	sbci	r26, 0x01	; 1
    3378:	a6 95       	lsr	r26
    337a:	8f ef       	ldi	r24, 0xFF	; 255
    337c:	81 1d       	adc	r24, r1
    337e:	81 1d       	adc	r24, r1
    3380:	08 95       	ret

00003382 <__fp_inf>:
    3382:	97 f9       	bld	r25, 7
    3384:	9f 67       	ori	r25, 0x7F	; 127
    3386:	80 e8       	ldi	r24, 0x80	; 128
    3388:	70 e0       	ldi	r23, 0x00	; 0
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	08 95       	ret

0000338e <__fp_nan>:
    338e:	9f ef       	ldi	r25, 0xFF	; 255
    3390:	80 ec       	ldi	r24, 0xC0	; 192
    3392:	08 95       	ret

00003394 <__fp_powser>:
    3394:	df 93       	push	r29
    3396:	cf 93       	push	r28
    3398:	1f 93       	push	r17
    339a:	0f 93       	push	r16
    339c:	ff 92       	push	r15
    339e:	ef 92       	push	r14
    33a0:	df 92       	push	r13
    33a2:	7b 01       	movw	r14, r22
    33a4:	8c 01       	movw	r16, r24
    33a6:	68 94       	set
    33a8:	05 c0       	rjmp	.+10     	; 0x33b4 <__fp_powser+0x20>
    33aa:	da 2e       	mov	r13, r26
    33ac:	ef 01       	movw	r28, r30
    33ae:	af d0       	rcall	.+350    	; 0x350e <__mulsf3x>
    33b0:	fe 01       	movw	r30, r28
    33b2:	e8 94       	clt
    33b4:	a5 91       	lpm	r26, Z+
    33b6:	25 91       	lpm	r18, Z+
    33b8:	35 91       	lpm	r19, Z+
    33ba:	45 91       	lpm	r20, Z+
    33bc:	55 91       	lpm	r21, Z+
    33be:	ae f3       	brts	.-22     	; 0x33aa <__fp_powser+0x16>
    33c0:	ef 01       	movw	r28, r30
    33c2:	29 de       	rcall	.-942    	; 0x3016 <__addsf3x>
    33c4:	fe 01       	movw	r30, r28
    33c6:	97 01       	movw	r18, r14
    33c8:	a8 01       	movw	r20, r16
    33ca:	da 94       	dec	r13
    33cc:	79 f7       	brne	.-34     	; 0x33ac <__fp_powser+0x18>
    33ce:	df 90       	pop	r13
    33d0:	ef 90       	pop	r14
    33d2:	ff 90       	pop	r15
    33d4:	0f 91       	pop	r16
    33d6:	1f 91       	pop	r17
    33d8:	cf 91       	pop	r28
    33da:	df 91       	pop	r29
    33dc:	08 95       	ret

000033de <__fp_pscA>:
    33de:	00 24       	eor	r0, r0
    33e0:	0a 94       	dec	r0
    33e2:	16 16       	cp	r1, r22
    33e4:	17 06       	cpc	r1, r23
    33e6:	18 06       	cpc	r1, r24
    33e8:	09 06       	cpc	r0, r25
    33ea:	08 95       	ret

000033ec <__fp_pscB>:
    33ec:	00 24       	eor	r0, r0
    33ee:	0a 94       	dec	r0
    33f0:	12 16       	cp	r1, r18
    33f2:	13 06       	cpc	r1, r19
    33f4:	14 06       	cpc	r1, r20
    33f6:	05 06       	cpc	r0, r21
    33f8:	08 95       	ret
    33fa:	c9 cf       	rjmp	.-110    	; 0x338e <__fp_nan>

000033fc <__fp_rempio2>:
    33fc:	50 d0       	rcall	.+160    	; 0x349e <__fp_splitA>
    33fe:	e8 f3       	brcs	.-6      	; 0x33fa <__fp_pscB+0xe>
    3400:	e8 94       	clt
    3402:	e0 e0       	ldi	r30, 0x00	; 0
    3404:	bb 27       	eor	r27, r27
    3406:	9f 57       	subi	r25, 0x7F	; 127
    3408:	f0 f0       	brcs	.+60     	; 0x3446 <__fp_rempio2+0x4a>
    340a:	2a ed       	ldi	r18, 0xDA	; 218
    340c:	3f e0       	ldi	r19, 0x0F	; 15
    340e:	49 ec       	ldi	r20, 0xC9	; 201
    3410:	06 c0       	rjmp	.+12     	; 0x341e <__fp_rempio2+0x22>
    3412:	ee 0f       	add	r30, r30
    3414:	bb 0f       	add	r27, r27
    3416:	66 1f       	adc	r22, r22
    3418:	77 1f       	adc	r23, r23
    341a:	88 1f       	adc	r24, r24
    341c:	28 f0       	brcs	.+10     	; 0x3428 <__fp_rempio2+0x2c>
    341e:	b2 3a       	cpi	r27, 0xA2	; 162
    3420:	62 07       	cpc	r22, r18
    3422:	73 07       	cpc	r23, r19
    3424:	84 07       	cpc	r24, r20
    3426:	28 f0       	brcs	.+10     	; 0x3432 <__fp_rempio2+0x36>
    3428:	b2 5a       	subi	r27, 0xA2	; 162
    342a:	62 0b       	sbc	r22, r18
    342c:	73 0b       	sbc	r23, r19
    342e:	84 0b       	sbc	r24, r20
    3430:	e3 95       	inc	r30
    3432:	9a 95       	dec	r25
    3434:	72 f7       	brpl	.-36     	; 0x3412 <__fp_rempio2+0x16>
    3436:	80 38       	cpi	r24, 0x80	; 128
    3438:	30 f4       	brcc	.+12     	; 0x3446 <__fp_rempio2+0x4a>
    343a:	9a 95       	dec	r25
    343c:	bb 0f       	add	r27, r27
    343e:	66 1f       	adc	r22, r22
    3440:	77 1f       	adc	r23, r23
    3442:	88 1f       	adc	r24, r24
    3444:	d2 f7       	brpl	.-12     	; 0x343a <__fp_rempio2+0x3e>
    3446:	90 48       	sbci	r25, 0x80	; 128
    3448:	06 c1       	rjmp	.+524    	; 0x3656 <__fp_mpack_finite>

0000344a <__fp_round>:
    344a:	09 2e       	mov	r0, r25
    344c:	03 94       	inc	r0
    344e:	00 0c       	add	r0, r0
    3450:	11 f4       	brne	.+4      	; 0x3456 <__fp_round+0xc>
    3452:	88 23       	and	r24, r24
    3454:	52 f0       	brmi	.+20     	; 0x346a <__fp_round+0x20>
    3456:	bb 0f       	add	r27, r27
    3458:	40 f4       	brcc	.+16     	; 0x346a <__fp_round+0x20>
    345a:	bf 2b       	or	r27, r31
    345c:	11 f4       	brne	.+4      	; 0x3462 <__fp_round+0x18>
    345e:	60 ff       	sbrs	r22, 0
    3460:	04 c0       	rjmp	.+8      	; 0x346a <__fp_round+0x20>
    3462:	6f 5f       	subi	r22, 0xFF	; 255
    3464:	7f 4f       	sbci	r23, 0xFF	; 255
    3466:	8f 4f       	sbci	r24, 0xFF	; 255
    3468:	9f 4f       	sbci	r25, 0xFF	; 255
    346a:	08 95       	ret

0000346c <__fp_sinus>:
    346c:	ef 93       	push	r30
    346e:	e0 ff       	sbrs	r30, 0
    3470:	06 c0       	rjmp	.+12     	; 0x347e <__fp_sinus+0x12>
    3472:	a2 ea       	ldi	r26, 0xA2	; 162
    3474:	2a ed       	ldi	r18, 0xDA	; 218
    3476:	3f e0       	ldi	r19, 0x0F	; 15
    3478:	49 ec       	ldi	r20, 0xC9	; 201
    347a:	5f eb       	ldi	r21, 0xBF	; 191
    347c:	cc dd       	rcall	.-1128   	; 0x3016 <__addsf3x>
    347e:	e5 df       	rcall	.-54     	; 0x344a <__fp_round>
    3480:	0f 90       	pop	r0
    3482:	03 94       	inc	r0
    3484:	01 fc       	sbrc	r0, 1
    3486:	90 58       	subi	r25, 0x80	; 128
    3488:	e9 ed       	ldi	r30, 0xD9	; 217
    348a:	f0 e0       	ldi	r31, 0x00	; 0
    348c:	f7 c0       	rjmp	.+494    	; 0x367c <__fp_powsodd>

0000348e <__fp_split3>:
    348e:	57 fd       	sbrc	r21, 7
    3490:	90 58       	subi	r25, 0x80	; 128
    3492:	44 0f       	add	r20, r20
    3494:	55 1f       	adc	r21, r21
    3496:	59 f0       	breq	.+22     	; 0x34ae <__fp_splitA+0x10>
    3498:	5f 3f       	cpi	r21, 0xFF	; 255
    349a:	71 f0       	breq	.+28     	; 0x34b8 <__fp_splitA+0x1a>
    349c:	47 95       	ror	r20

0000349e <__fp_splitA>:
    349e:	88 0f       	add	r24, r24
    34a0:	97 fb       	bst	r25, 7
    34a2:	99 1f       	adc	r25, r25
    34a4:	61 f0       	breq	.+24     	; 0x34be <__fp_splitA+0x20>
    34a6:	9f 3f       	cpi	r25, 0xFF	; 255
    34a8:	79 f0       	breq	.+30     	; 0x34c8 <__fp_splitA+0x2a>
    34aa:	87 95       	ror	r24
    34ac:	08 95       	ret
    34ae:	12 16       	cp	r1, r18
    34b0:	13 06       	cpc	r1, r19
    34b2:	14 06       	cpc	r1, r20
    34b4:	55 1f       	adc	r21, r21
    34b6:	f2 cf       	rjmp	.-28     	; 0x349c <__fp_split3+0xe>
    34b8:	46 95       	lsr	r20
    34ba:	f1 df       	rcall	.-30     	; 0x349e <__fp_splitA>
    34bc:	08 c0       	rjmp	.+16     	; 0x34ce <__fp_splitA+0x30>
    34be:	16 16       	cp	r1, r22
    34c0:	17 06       	cpc	r1, r23
    34c2:	18 06       	cpc	r1, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	f1 cf       	rjmp	.-30     	; 0x34aa <__fp_splitA+0xc>
    34c8:	86 95       	lsr	r24
    34ca:	71 05       	cpc	r23, r1
    34cc:	61 05       	cpc	r22, r1
    34ce:	08 94       	sec
    34d0:	08 95       	ret

000034d2 <__fp_zero>:
    34d2:	e8 94       	clt

000034d4 <__fp_szero>:
    34d4:	bb 27       	eor	r27, r27
    34d6:	66 27       	eor	r22, r22
    34d8:	77 27       	eor	r23, r23
    34da:	cb 01       	movw	r24, r22
    34dc:	97 f9       	bld	r25, 7
    34de:	08 95       	ret

000034e0 <__gesf2>:
    34e0:	2c df       	rcall	.-424    	; 0x333a <__fp_cmp>
    34e2:	08 f4       	brcc	.+2      	; 0x34e6 <__gesf2+0x6>
    34e4:	8f ef       	ldi	r24, 0xFF	; 255
    34e6:	08 95       	ret

000034e8 <inverse>:
    34e8:	9b 01       	movw	r18, r22
    34ea:	ac 01       	movw	r20, r24
    34ec:	60 e0       	ldi	r22, 0x00	; 0
    34ee:	70 e0       	ldi	r23, 0x00	; 0
    34f0:	80 e8       	ldi	r24, 0x80	; 128
    34f2:	9f e3       	ldi	r25, 0x3F	; 63
    34f4:	4c ce       	rjmp	.-872    	; 0x318e <__divsf3>

000034f6 <__mulsf3>:
    34f6:	0b d0       	rcall	.+22     	; 0x350e <__mulsf3x>
    34f8:	a8 cf       	rjmp	.-176    	; 0x344a <__fp_round>
    34fa:	71 df       	rcall	.-286    	; 0x33de <__fp_pscA>
    34fc:	28 f0       	brcs	.+10     	; 0x3508 <__mulsf3+0x12>
    34fe:	76 df       	rcall	.-276    	; 0x33ec <__fp_pscB>
    3500:	18 f0       	brcs	.+6      	; 0x3508 <__mulsf3+0x12>
    3502:	95 23       	and	r25, r21
    3504:	09 f0       	breq	.+2      	; 0x3508 <__mulsf3+0x12>
    3506:	3d cf       	rjmp	.-390    	; 0x3382 <__fp_inf>
    3508:	42 cf       	rjmp	.-380    	; 0x338e <__fp_nan>
    350a:	11 24       	eor	r1, r1
    350c:	e3 cf       	rjmp	.-58     	; 0x34d4 <__fp_szero>

0000350e <__mulsf3x>:
    350e:	bf df       	rcall	.-130    	; 0x348e <__fp_split3>
    3510:	a0 f3       	brcs	.-24     	; 0x34fa <__mulsf3+0x4>

00003512 <__mulsf3_pse>:
    3512:	95 9f       	mul	r25, r21
    3514:	d1 f3       	breq	.-12     	; 0x350a <__mulsf3+0x14>
    3516:	95 0f       	add	r25, r21
    3518:	50 e0       	ldi	r21, 0x00	; 0
    351a:	55 1f       	adc	r21, r21
    351c:	62 9f       	mul	r22, r18
    351e:	f0 01       	movw	r30, r0
    3520:	72 9f       	mul	r23, r18
    3522:	bb 27       	eor	r27, r27
    3524:	f0 0d       	add	r31, r0
    3526:	b1 1d       	adc	r27, r1
    3528:	63 9f       	mul	r22, r19
    352a:	aa 27       	eor	r26, r26
    352c:	f0 0d       	add	r31, r0
    352e:	b1 1d       	adc	r27, r1
    3530:	aa 1f       	adc	r26, r26
    3532:	64 9f       	mul	r22, r20
    3534:	66 27       	eor	r22, r22
    3536:	b0 0d       	add	r27, r0
    3538:	a1 1d       	adc	r26, r1
    353a:	66 1f       	adc	r22, r22
    353c:	82 9f       	mul	r24, r18
    353e:	22 27       	eor	r18, r18
    3540:	b0 0d       	add	r27, r0
    3542:	a1 1d       	adc	r26, r1
    3544:	62 1f       	adc	r22, r18
    3546:	73 9f       	mul	r23, r19
    3548:	b0 0d       	add	r27, r0
    354a:	a1 1d       	adc	r26, r1
    354c:	62 1f       	adc	r22, r18
    354e:	83 9f       	mul	r24, r19
    3550:	a0 0d       	add	r26, r0
    3552:	61 1d       	adc	r22, r1
    3554:	22 1f       	adc	r18, r18
    3556:	74 9f       	mul	r23, r20
    3558:	33 27       	eor	r19, r19
    355a:	a0 0d       	add	r26, r0
    355c:	61 1d       	adc	r22, r1
    355e:	23 1f       	adc	r18, r19
    3560:	84 9f       	mul	r24, r20
    3562:	60 0d       	add	r22, r0
    3564:	21 1d       	adc	r18, r1
    3566:	82 2f       	mov	r24, r18
    3568:	76 2f       	mov	r23, r22
    356a:	6a 2f       	mov	r22, r26
    356c:	11 24       	eor	r1, r1
    356e:	9f 57       	subi	r25, 0x7F	; 127
    3570:	50 40       	sbci	r21, 0x00	; 0
    3572:	8a f0       	brmi	.+34     	; 0x3596 <__mulsf3_pse+0x84>
    3574:	e1 f0       	breq	.+56     	; 0x35ae <__mulsf3_pse+0x9c>
    3576:	88 23       	and	r24, r24
    3578:	4a f0       	brmi	.+18     	; 0x358c <__mulsf3_pse+0x7a>
    357a:	ee 0f       	add	r30, r30
    357c:	ff 1f       	adc	r31, r31
    357e:	bb 1f       	adc	r27, r27
    3580:	66 1f       	adc	r22, r22
    3582:	77 1f       	adc	r23, r23
    3584:	88 1f       	adc	r24, r24
    3586:	91 50       	subi	r25, 0x01	; 1
    3588:	50 40       	sbci	r21, 0x00	; 0
    358a:	a9 f7       	brne	.-22     	; 0x3576 <__mulsf3_pse+0x64>
    358c:	9e 3f       	cpi	r25, 0xFE	; 254
    358e:	51 05       	cpc	r21, r1
    3590:	70 f0       	brcs	.+28     	; 0x35ae <__mulsf3_pse+0x9c>
    3592:	f7 ce       	rjmp	.-530    	; 0x3382 <__fp_inf>
    3594:	9f cf       	rjmp	.-194    	; 0x34d4 <__fp_szero>
    3596:	5f 3f       	cpi	r21, 0xFF	; 255
    3598:	ec f3       	brlt	.-6      	; 0x3594 <__mulsf3_pse+0x82>
    359a:	98 3e       	cpi	r25, 0xE8	; 232
    359c:	dc f3       	brlt	.-10     	; 0x3594 <__mulsf3_pse+0x82>
    359e:	86 95       	lsr	r24
    35a0:	77 95       	ror	r23
    35a2:	67 95       	ror	r22
    35a4:	b7 95       	ror	r27
    35a6:	f7 95       	ror	r31
    35a8:	e7 95       	ror	r30
    35aa:	9f 5f       	subi	r25, 0xFF	; 255
    35ac:	c1 f7       	brne	.-16     	; 0x359e <__mulsf3_pse+0x8c>
    35ae:	fe 2b       	or	r31, r30
    35b0:	88 0f       	add	r24, r24
    35b2:	91 1d       	adc	r25, r1
    35b4:	96 95       	lsr	r25
    35b6:	87 95       	ror	r24
    35b8:	97 f9       	bld	r25, 7
    35ba:	08 95       	ret

000035bc <sin>:
    35bc:	9f 93       	push	r25
    35be:	1e df       	rcall	.-452    	; 0x33fc <__fp_rempio2>
    35c0:	0f 90       	pop	r0
    35c2:	07 fc       	sbrc	r0, 7
    35c4:	ee 5f       	subi	r30, 0xFE	; 254
    35c6:	52 cf       	rjmp	.-348    	; 0x346c <__fp_sinus>
    35c8:	11 f4       	brne	.+4      	; 0x35ce <sin+0x12>
    35ca:	0e f4       	brtc	.+2      	; 0x35ce <sin+0x12>
    35cc:	e0 ce       	rjmp	.-576    	; 0x338e <__fp_nan>
    35ce:	41 c0       	rjmp	.+130    	; 0x3652 <__fp_mpack>

000035d0 <sqrt>:
    35d0:	66 df       	rcall	.-308    	; 0x349e <__fp_splitA>
    35d2:	d0 f3       	brcs	.-12     	; 0x35c8 <sin+0xc>
    35d4:	99 23       	and	r25, r25
    35d6:	d9 f3       	breq	.-10     	; 0x35ce <sin+0x12>
    35d8:	ce f3       	brts	.-14     	; 0x35cc <sin+0x10>
    35da:	9f 57       	subi	r25, 0x7F	; 127
    35dc:	55 0b       	sbc	r21, r21
    35de:	87 ff       	sbrs	r24, 7
    35e0:	46 d0       	rcall	.+140    	; 0x366e <__fp_norm2>
    35e2:	00 24       	eor	r0, r0
    35e4:	a0 e6       	ldi	r26, 0x60	; 96
    35e6:	40 ea       	ldi	r20, 0xA0	; 160
    35e8:	90 01       	movw	r18, r0
    35ea:	80 58       	subi	r24, 0x80	; 128
    35ec:	56 95       	lsr	r21
    35ee:	97 95       	ror	r25
    35f0:	28 f4       	brcc	.+10     	; 0x35fc <sqrt+0x2c>
    35f2:	80 5c       	subi	r24, 0xC0	; 192
    35f4:	66 0f       	add	r22, r22
    35f6:	77 1f       	adc	r23, r23
    35f8:	88 1f       	adc	r24, r24
    35fa:	20 f0       	brcs	.+8      	; 0x3604 <sqrt+0x34>
    35fc:	26 17       	cp	r18, r22
    35fe:	37 07       	cpc	r19, r23
    3600:	48 07       	cpc	r20, r24
    3602:	30 f4       	brcc	.+12     	; 0x3610 <sqrt+0x40>
    3604:	62 1b       	sub	r22, r18
    3606:	73 0b       	sbc	r23, r19
    3608:	84 0b       	sbc	r24, r20
    360a:	20 29       	or	r18, r0
    360c:	31 29       	or	r19, r1
    360e:	4a 2b       	or	r20, r26
    3610:	a6 95       	lsr	r26
    3612:	17 94       	ror	r1
    3614:	07 94       	ror	r0
    3616:	20 25       	eor	r18, r0
    3618:	31 25       	eor	r19, r1
    361a:	4a 27       	eor	r20, r26
    361c:	58 f7       	brcc	.-42     	; 0x35f4 <sqrt+0x24>
    361e:	66 0f       	add	r22, r22
    3620:	77 1f       	adc	r23, r23
    3622:	88 1f       	adc	r24, r24
    3624:	20 f0       	brcs	.+8      	; 0x362e <sqrt+0x5e>
    3626:	26 17       	cp	r18, r22
    3628:	37 07       	cpc	r19, r23
    362a:	48 07       	cpc	r20, r24
    362c:	30 f4       	brcc	.+12     	; 0x363a <sqrt+0x6a>
    362e:	62 0b       	sbc	r22, r18
    3630:	73 0b       	sbc	r23, r19
    3632:	84 0b       	sbc	r24, r20
    3634:	20 0d       	add	r18, r0
    3636:	31 1d       	adc	r19, r1
    3638:	41 1d       	adc	r20, r1
    363a:	a0 95       	com	r26
    363c:	81 f7       	brne	.-32     	; 0x361e <sqrt+0x4e>
    363e:	b9 01       	movw	r22, r18
    3640:	84 2f       	mov	r24, r20
    3642:	91 58       	subi	r25, 0x81	; 129
    3644:	88 0f       	add	r24, r24
    3646:	96 95       	lsr	r25
    3648:	87 95       	ror	r24
    364a:	08 95       	ret

0000364c <square>:
    364c:	9b 01       	movw	r18, r22
    364e:	ac 01       	movw	r20, r24
    3650:	52 cf       	rjmp	.-348    	; 0x34f6 <__mulsf3>

00003652 <__fp_mpack>:
    3652:	9f 3f       	cpi	r25, 0xFF	; 255
    3654:	31 f0       	breq	.+12     	; 0x3662 <__fp_mpack_finite+0xc>

00003656 <__fp_mpack_finite>:
    3656:	91 50       	subi	r25, 0x01	; 1
    3658:	20 f4       	brcc	.+8      	; 0x3662 <__fp_mpack_finite+0xc>
    365a:	87 95       	ror	r24
    365c:	77 95       	ror	r23
    365e:	67 95       	ror	r22
    3660:	b7 95       	ror	r27
    3662:	88 0f       	add	r24, r24
    3664:	91 1d       	adc	r25, r1
    3666:	96 95       	lsr	r25
    3668:	87 95       	ror	r24
    366a:	97 f9       	bld	r25, 7
    366c:	08 95       	ret

0000366e <__fp_norm2>:
    366e:	91 50       	subi	r25, 0x01	; 1
    3670:	50 40       	sbci	r21, 0x00	; 0
    3672:	66 0f       	add	r22, r22
    3674:	77 1f       	adc	r23, r23
    3676:	88 1f       	adc	r24, r24
    3678:	d2 f7       	brpl	.-12     	; 0x366e <__fp_norm2>
    367a:	08 95       	ret

0000367c <__fp_powsodd>:
    367c:	9f 93       	push	r25
    367e:	8f 93       	push	r24
    3680:	7f 93       	push	r23
    3682:	6f 93       	push	r22
    3684:	ff 93       	push	r31
    3686:	ef 93       	push	r30
    3688:	9b 01       	movw	r18, r22
    368a:	ac 01       	movw	r20, r24
    368c:	34 df       	rcall	.-408    	; 0x34f6 <__mulsf3>
    368e:	ef 91       	pop	r30
    3690:	ff 91       	pop	r31
    3692:	80 de       	rcall	.-768    	; 0x3394 <__fp_powser>
    3694:	2f 91       	pop	r18
    3696:	3f 91       	pop	r19
    3698:	4f 91       	pop	r20
    369a:	5f 91       	pop	r21
    369c:	2c cf       	rjmp	.-424    	; 0x34f6 <__mulsf3>

0000369e <__divmodhi4>:
    369e:	97 fb       	bst	r25, 7
    36a0:	07 2e       	mov	r0, r23
    36a2:	16 f4       	brtc	.+4      	; 0x36a8 <__divmodhi4+0xa>
    36a4:	00 94       	com	r0
    36a6:	07 d0       	rcall	.+14     	; 0x36b6 <__divmodhi4_neg1>
    36a8:	77 fd       	sbrc	r23, 7
    36aa:	09 d0       	rcall	.+18     	; 0x36be <__divmodhi4_neg2>
    36ac:	0e 94 63 1b 	call	0x36c6	; 0x36c6 <__udivmodhi4>
    36b0:	07 fc       	sbrc	r0, 7
    36b2:	05 d0       	rcall	.+10     	; 0x36be <__divmodhi4_neg2>
    36b4:	3e f4       	brtc	.+14     	; 0x36c4 <__divmodhi4_exit>

000036b6 <__divmodhi4_neg1>:
    36b6:	90 95       	com	r25
    36b8:	81 95       	neg	r24
    36ba:	9f 4f       	sbci	r25, 0xFF	; 255
    36bc:	08 95       	ret

000036be <__divmodhi4_neg2>:
    36be:	70 95       	com	r23
    36c0:	61 95       	neg	r22
    36c2:	7f 4f       	sbci	r23, 0xFF	; 255

000036c4 <__divmodhi4_exit>:
    36c4:	08 95       	ret

000036c6 <__udivmodhi4>:
    36c6:	aa 1b       	sub	r26, r26
    36c8:	bb 1b       	sub	r27, r27
    36ca:	51 e1       	ldi	r21, 0x11	; 17
    36cc:	07 c0       	rjmp	.+14     	; 0x36dc <__udivmodhi4_ep>

000036ce <__udivmodhi4_loop>:
    36ce:	aa 1f       	adc	r26, r26
    36d0:	bb 1f       	adc	r27, r27
    36d2:	a6 17       	cp	r26, r22
    36d4:	b7 07       	cpc	r27, r23
    36d6:	10 f0       	brcs	.+4      	; 0x36dc <__udivmodhi4_ep>
    36d8:	a6 1b       	sub	r26, r22
    36da:	b7 0b       	sbc	r27, r23

000036dc <__udivmodhi4_ep>:
    36dc:	88 1f       	adc	r24, r24
    36de:	99 1f       	adc	r25, r25
    36e0:	5a 95       	dec	r21
    36e2:	a9 f7       	brne	.-22     	; 0x36ce <__udivmodhi4_loop>
    36e4:	80 95       	com	r24
    36e6:	90 95       	com	r25
    36e8:	bc 01       	movw	r22, r24
    36ea:	cd 01       	movw	r24, r26
    36ec:	08 95       	ret

000036ee <_exit>:
    36ee:	f8 94       	cli

000036f0 <__stop_program>:
    36f0:	ff cf       	rjmp	.-2      	; 0x36f0 <__stop_program>
