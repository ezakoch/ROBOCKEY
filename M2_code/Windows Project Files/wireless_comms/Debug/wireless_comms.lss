
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000276e  00002802  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000276e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800108  00800108  0000280a  2**0
                  ALLOC
  3 .stab         000035ac  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  00005db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00006cc8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00006cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001999  00000000  00000000  00006e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000007ac  00000000  00000000  00008818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000c11  00000000  00000000  00008fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003d0  00000000  00000000  00009bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a2  00000000  00000000  00009fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000182e  00000000  00000000  0000a54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000168  00000000  00000000  0000bd78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 1b 0d 	jmp	0x1a36	; 0x1a36 <__vector_3>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 07 0d 	jmp	0x1a0e	; 0x1a0e <__vector_41>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	da e0       	ldi	r29, 0x0A	; 10
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	ee e6       	ldi	r30, 0x6E	; 110
     10c:	f7 e2       	ldi	r31, 0x27	; 39
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a8 30       	cpi	r26, 0x08	; 8
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	a8 e0       	ldi	r26, 0x08	; 8
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	aa 37       	cpi	r26, 0x7A	; 122
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 8c 09 	call	0x1318	; 0x1318 <main>
     12e:	0c 94 b5 13 	jmp	0x276a	; 0x276a <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     136:	2f 92       	push	r2
     138:	3f 92       	push	r3
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	8f 92       	push	r8
     144:	9f 92       	push	r9
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	28 97       	sbiw	r28, 0x08	; 8
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	98 86       	std	Y+8, r9	; 0x08
     16c:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     16e:	10 92 09 01 	sts	0x0109, r1
     172:	10 92 08 01 	sts	0x0108, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     176:	8f 3f       	cpi	r24, 0xFF	; 255
     178:	e3 e0       	ldi	r30, 0x03	; 3
     17a:	9e 07       	cpc	r25, r30
     17c:	01 f1       	breq	.+64     	; 0x1be <localize+0x88>
     17e:	6f 3f       	cpi	r22, 0xFF	; 255
     180:	f3 e0       	ldi	r31, 0x03	; 3
     182:	7f 07       	cpc	r23, r31
     184:	e1 f0       	breq	.+56     	; 0x1be <localize+0x88>
     186:	4f 3f       	cpi	r20, 0xFF	; 255
     188:	e3 e0       	ldi	r30, 0x03	; 3
     18a:	5e 07       	cpc	r21, r30
     18c:	c1 f0       	breq	.+48     	; 0x1be <localize+0x88>
     18e:	2f 3f       	cpi	r18, 0xFF	; 255
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	3f 07       	cpc	r19, r31
     194:	a1 f0       	breq	.+40     	; 0x1be <localize+0x88>
     196:	0f 3f       	cpi	r16, 0xFF	; 255
     198:	e3 e0       	ldi	r30, 0x03	; 3
     19a:	1e 07       	cpc	r17, r30
     19c:	81 f0       	breq	.+32     	; 0x1be <localize+0x88>
     19e:	ff ef       	ldi	r31, 0xFF	; 255
     1a0:	ef 16       	cp	r14, r31
     1a2:	f3 e0       	ldi	r31, 0x03	; 3
     1a4:	ff 06       	cpc	r15, r31
     1a6:	59 f0       	breq	.+22     	; 0x1be <localize+0x88>
     1a8:	ef ef       	ldi	r30, 0xFF	; 255
     1aa:	ce 16       	cp	r12, r30
     1ac:	e3 e0       	ldi	r30, 0x03	; 3
     1ae:	de 06       	cpc	r13, r30
     1b0:	31 f0       	breq	.+12     	; 0x1be <localize+0x88>
     1b2:	ff ef       	ldi	r31, 0xFF	; 255
     1b4:	af 16       	cp	r10, r31
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	bf 06       	cpc	r11, r31
     1ba:	09 f0       	breq	.+2      	; 0x1be <localize+0x88>
     1bc:	a4 c6       	rjmp	.+3400   	; 0xf06 <__stack+0x407>
        flag_no_good_stars = 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 09 01 	sts	0x0109, r25
     1c6:	80 93 08 01 	sts	0x0108, r24
     1ca:	d1 c3       	rjmp	.+1954   	; 0x96e <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     1cc:	f8 01       	movw	r30, r16
     1ce:	a0 80       	ld	r10, Z
     1d0:	b1 80       	ldd	r11, Z+1	; 0x01
     1d2:	c2 80       	ldd	r12, Z+2	; 0x02
     1d4:	d3 80       	ldd	r13, Z+3	; 0x03
     1d6:	0c 5f       	subi	r16, 0xFC	; 252
     1d8:	1f 4f       	sbci	r17, 0xFF	; 255
     1da:	26 2d       	mov	r18, r6
     1dc:	37 2d       	mov	r19, r7
     1de:	48 2d       	mov	r20, r8
     1e0:	59 2d       	mov	r21, r9
     1e2:	6a 2d       	mov	r22, r10
     1e4:	7b 2d       	mov	r23, r11
     1e6:	8c 2d       	mov	r24, r12
     1e8:	9d 2d       	mov	r25, r13
     1ea:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
     1ee:	18 16       	cp	r1, r24
     1f0:	34 f4       	brge	.+12     	; 0x1fe <localize+0xc8>
     1f2:	fa 82       	std	Y+2, r15	; 0x02
     1f4:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     1f6:	6a 2c       	mov	r6, r10
     1f8:	7b 2c       	mov	r7, r11
     1fa:	8c 2c       	mov	r8, r12
     1fc:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     1fe:	22 2d       	mov	r18, r2
     200:	33 2d       	mov	r19, r3
     202:	44 2d       	mov	r20, r4
     204:	55 2d       	mov	r21, r5
     206:	6a 2d       	mov	r22, r10
     208:	7b 2d       	mov	r23, r11
     20a:	8c 2d       	mov	r24, r12
     20c:	9d 2d       	mov	r25, r13
     20e:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
     212:	88 23       	and	r24, r24
     214:	34 f4       	brge	.+12     	; 0x222 <localize+0xec>
     216:	fe 82       	std	Y+6, r15	; 0x06
     218:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     21a:	2a 2c       	mov	r2, r10
     21c:	3b 2c       	mov	r3, r11
     21e:	4c 2c       	mov	r4, r12
     220:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     222:	ff ef       	ldi	r31, 0xFF	; 255
     224:	ef 1a       	sub	r14, r31
     226:	ff 0a       	sbc	r15, r31
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	e8 16       	cp	r14, r24
     22c:	f1 04       	cpc	r15, r1
     22e:	71 f6       	brne	.-100    	; 0x1cc <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     230:	e9 81       	ldd	r30, Y+1	; 0x01
     232:	fa 81       	ldd	r31, Y+2	; 0x02
     234:	e2 30       	cpi	r30, 0x02	; 2
     236:	f1 05       	cpc	r31, r1
     238:	09 f4       	brne	.+2      	; 0x23c <localize+0x106>
     23a:	3e c1       	rjmp	.+636    	; 0x4b8 <localize+0x382>
     23c:	34 f4       	brge	.+12     	; 0x24a <localize+0x114>
     23e:	30 97       	sbiw	r30, 0x00	; 0
     240:	81 f0       	breq	.+32     	; 0x262 <localize+0x12c>
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	09 f0       	breq	.+2      	; 0x248 <localize+0x112>
     246:	8d c3       	rjmp	.+1818   	; 0x962 <localize+0x82c>
     248:	a2 c0       	rjmp	.+324    	; 0x38e <localize+0x258>
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	91 05       	cpc	r25, r1
     252:	09 f4       	brne	.+2      	; 0x256 <localize+0x120>
     254:	5b c2       	rjmp	.+1206   	; 0x70c <localize+0x5d6>
     256:	0c f4       	brge	.+2      	; 0x25a <localize+0x124>
     258:	c4 c1       	rjmp	.+904    	; 0x5e2 <localize+0x4ac>
     25a:	05 97       	sbiw	r24, 0x05	; 5
     25c:	09 f0       	breq	.+2      	; 0x260 <localize+0x12a>
     25e:	81 c3       	rjmp	.+1794   	; 0x962 <localize+0x82c>
     260:	ea c2       	rjmp	.+1492   	; 0x836 <localize+0x700>
            case 0:
                switch (min_id) {
     262:	ed 81       	ldd	r30, Y+5	; 0x05
     264:	fe 81       	ldd	r31, Y+6	; 0x06
     266:	e2 30       	cpi	r30, 0x02	; 2
     268:	f1 05       	cpc	r31, r1
     26a:	39 f1       	breq	.+78     	; 0x2ba <localize+0x184>
     26c:	24 f4       	brge	.+8      	; 0x276 <localize+0x140>
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	09 f0       	breq	.+2      	; 0x274 <localize+0x13e>
     272:	6e c0       	rjmp	.+220    	; 0x350 <localize+0x21a>
     274:	09 c0       	rjmp	.+18     	; 0x288 <localize+0x152>
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	91 05       	cpc	r25, r1
     27e:	b1 f1       	breq	.+108    	; 0x2ec <localize+0x1b6>
     280:	04 97       	sbiw	r24, 0x04	; 4
     282:	09 f0       	breq	.+2      	; 0x286 <localize+0x150>
     284:	65 c0       	rjmp	.+202    	; 0x350 <localize+0x21a>
     286:	4b c0       	rjmp	.+150    	; 0x31e <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     288:	8a e3       	ldi	r24, 0x3A	; 58
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 6d 01 	sts	0x016D, r25
     290:	80 93 6c 01 	sts	0x016C, r24
     294:	82 e3       	ldi	r24, 0x32	; 50
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	90 93 53 01 	sts	0x0153, r25
     29c:	80 93 52 01 	sts	0x0152, r24
     2a0:	86 e3       	ldi	r24, 0x36	; 54
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	90 93 55 01 	sts	0x0155, r25
     2a8:	80 93 54 01 	sts	0x0154, r24
     2ac:	8e e2       	ldi	r24, 0x2E	; 46
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 67 01 	sts	0x0167, r25
     2b4:	80 93 66 01 	sts	0x0166, r24
                        break;
     2b8:	54 c3       	rjmp	.+1704   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     2ba:	8a e3       	ldi	r24, 0x3A	; 58
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	90 93 6d 01 	sts	0x016D, r25
     2c2:	80 93 6c 01 	sts	0x016C, r24
     2c6:	8e e2       	ldi	r24, 0x2E	; 46
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	90 93 53 01 	sts	0x0153, r25
     2ce:	80 93 52 01 	sts	0x0152, r24
     2d2:	86 e3       	ldi	r24, 0x36	; 54
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	90 93 55 01 	sts	0x0155, r25
     2da:	80 93 54 01 	sts	0x0154, r24
     2de:	82 e3       	ldi	r24, 0x32	; 50
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 93 67 01 	sts	0x0167, r25
     2e6:	80 93 66 01 	sts	0x0166, r24
                        break;
     2ea:	3b c3       	rjmp	.+1654   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     2ec:	86 e3       	ldi	r24, 0x36	; 54
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 93 6d 01 	sts	0x016D, r25
     2f4:	80 93 6c 01 	sts	0x016C, r24
     2f8:	82 e3       	ldi	r24, 0x32	; 50
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 53 01 	sts	0x0153, r25
     300:	80 93 52 01 	sts	0x0152, r24
     304:	8a e3       	ldi	r24, 0x3A	; 58
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	90 93 55 01 	sts	0x0155, r25
     30c:	80 93 54 01 	sts	0x0154, r24
     310:	8e e2       	ldi	r24, 0x2E	; 46
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	90 93 67 01 	sts	0x0167, r25
     318:	80 93 66 01 	sts	0x0166, r24
                        break;
     31c:	22 c3       	rjmp	.+1604   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     31e:	86 e3       	ldi	r24, 0x36	; 54
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	90 93 6d 01 	sts	0x016D, r25
     326:	80 93 6c 01 	sts	0x016C, r24
     32a:	8e e2       	ldi	r24, 0x2E	; 46
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	90 93 53 01 	sts	0x0153, r25
     332:	80 93 52 01 	sts	0x0152, r24
     336:	8a e3       	ldi	r24, 0x3A	; 58
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	90 93 55 01 	sts	0x0155, r25
     33e:	80 93 54 01 	sts	0x0154, r24
     342:	82 e3       	ldi	r24, 0x32	; 50
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	90 93 67 01 	sts	0x0167, r25
     34a:	80 93 66 01 	sts	0x0166, r24
                        break;
     34e:	09 c3       	rjmp	.+1554   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     350:	8a e3       	ldi	r24, 0x3A	; 58
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	90 93 6d 01 	sts	0x016D, r25
     358:	80 93 6c 01 	sts	0x016C, r24
     35c:	86 e3       	ldi	r24, 0x36	; 54
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	90 93 53 01 	sts	0x0153, r25
     364:	80 93 52 01 	sts	0x0152, r24
     368:	82 e3       	ldi	r24, 0x32	; 50
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 55 01 	sts	0x0155, r25
     370:	80 93 54 01 	sts	0x0154, r24
     374:	8e e2       	ldi	r24, 0x2E	; 46
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	90 93 67 01 	sts	0x0167, r25
     37c:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 09 01 	sts	0x0109, r25
     388:	80 93 08 01 	sts	0x0108, r24
                        break;
     38c:	f0 c2       	rjmp	.+1504   	; 0x96e <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
     38e:	ed 81       	ldd	r30, Y+5	; 0x05
     390:	fe 81       	ldd	r31, Y+6	; 0x06
     392:	e2 30       	cpi	r30, 0x02	; 2
     394:	f1 05       	cpc	r31, r1
     396:	31 f1       	breq	.+76     	; 0x3e4 <localize+0x2ae>
     398:	1c f4       	brge	.+6      	; 0x3a0 <localize+0x26a>
     39a:	ef 2b       	or	r30, r31
     39c:	51 f0       	breq	.+20     	; 0x3b2 <localize+0x27c>
     39e:	6d c0       	rjmp	.+218    	; 0x47a <localize+0x344>
     3a0:	8d 81       	ldd	r24, Y+5	; 0x05
     3a2:	9e 81       	ldd	r25, Y+6	; 0x06
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	91 05       	cpc	r25, r1
     3a8:	b1 f1       	breq	.+108    	; 0x416 <localize+0x2e0>
     3aa:	05 97       	sbiw	r24, 0x05	; 5
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <localize+0x27a>
     3ae:	65 c0       	rjmp	.+202    	; 0x47a <localize+0x344>
     3b0:	4b c0       	rjmp	.+150    	; 0x448 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     3b2:	8a e3       	ldi	r24, 0x3A	; 58
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 6d 01 	sts	0x016D, r25
     3ba:	80 93 6c 01 	sts	0x016C, r24
     3be:	86 e3       	ldi	r24, 0x36	; 54
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	90 93 53 01 	sts	0x0153, r25
     3c6:	80 93 52 01 	sts	0x0152, r24
     3ca:	82 e3       	ldi	r24, 0x32	; 50
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	90 93 55 01 	sts	0x0155, r25
     3d2:	80 93 54 01 	sts	0x0154, r24
     3d6:	8e e2       	ldi	r24, 0x2E	; 46
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 67 01 	sts	0x0167, r25
     3de:	80 93 66 01 	sts	0x0166, r24
                        break;
     3e2:	bf c2       	rjmp	.+1406   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     3e4:	8a e3       	ldi	r24, 0x3A	; 58
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	90 93 6d 01 	sts	0x016D, r25
     3ec:	80 93 6c 01 	sts	0x016C, r24
     3f0:	8e e2       	ldi	r24, 0x2E	; 46
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	90 93 53 01 	sts	0x0153, r25
     3f8:	80 93 52 01 	sts	0x0152, r24
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	90 93 55 01 	sts	0x0155, r25
     404:	80 93 54 01 	sts	0x0154, r24
     408:	86 e3       	ldi	r24, 0x36	; 54
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 67 01 	sts	0x0167, r25
     410:	80 93 66 01 	sts	0x0166, r24
                        break;
     414:	a6 c2       	rjmp	.+1356   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     416:	82 e3       	ldi	r24, 0x32	; 50
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	90 93 6d 01 	sts	0x016D, r25
     41e:	80 93 6c 01 	sts	0x016C, r24
     422:	86 e3       	ldi	r24, 0x36	; 54
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	90 93 53 01 	sts	0x0153, r25
     42a:	80 93 52 01 	sts	0x0152, r24
     42e:	8a e3       	ldi	r24, 0x3A	; 58
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 93 55 01 	sts	0x0155, r25
     436:	80 93 54 01 	sts	0x0154, r24
     43a:	8e e2       	ldi	r24, 0x2E	; 46
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	90 93 67 01 	sts	0x0167, r25
     442:	80 93 66 01 	sts	0x0166, r24
                        break;
     446:	8d c2       	rjmp	.+1306   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     448:	82 e3       	ldi	r24, 0x32	; 50
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	90 93 6d 01 	sts	0x016D, r25
     450:	80 93 6c 01 	sts	0x016C, r24
     454:	8e e2       	ldi	r24, 0x2E	; 46
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	90 93 53 01 	sts	0x0153, r25
     45c:	80 93 52 01 	sts	0x0152, r24
     460:	8a e3       	ldi	r24, 0x3A	; 58
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	90 93 55 01 	sts	0x0155, r25
     468:	80 93 54 01 	sts	0x0154, r24
     46c:	86 e3       	ldi	r24, 0x36	; 54
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	90 93 67 01 	sts	0x0167, r25
     474:	80 93 66 01 	sts	0x0166, r24
                        break;
     478:	74 c2       	rjmp	.+1256   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     47a:	8a e3       	ldi	r24, 0x3A	; 58
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	90 93 6d 01 	sts	0x016D, r25
     482:	80 93 6c 01 	sts	0x016C, r24
     486:	86 e3       	ldi	r24, 0x36	; 54
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	90 93 53 01 	sts	0x0153, r25
     48e:	80 93 52 01 	sts	0x0152, r24
     492:	82 e3       	ldi	r24, 0x32	; 50
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	90 93 55 01 	sts	0x0155, r25
     49a:	80 93 54 01 	sts	0x0154, r24
     49e:	8e e2       	ldi	r24, 0x2E	; 46
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	90 93 67 01 	sts	0x0167, r25
     4a6:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 09 01 	sts	0x0109, r25
     4b2:	80 93 08 01 	sts	0x0108, r24
                        break;
     4b6:	5b c2       	rjmp	.+1206   	; 0x96e <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
     4b8:	ed 81       	ldd	r30, Y+5	; 0x05
     4ba:	fe 81       	ldd	r31, Y+6	; 0x06
     4bc:	e1 30       	cpi	r30, 0x01	; 1
     4be:	f1 05       	cpc	r31, r1
     4c0:	31 f1       	breq	.+76     	; 0x50e <localize+0x3d8>
     4c2:	1c f4       	brge	.+6      	; 0x4ca <localize+0x394>
     4c4:	ef 2b       	or	r30, r31
     4c6:	51 f0       	breq	.+20     	; 0x4dc <localize+0x3a6>
     4c8:	6d c0       	rjmp	.+218    	; 0x5a4 <localize+0x46e>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	84 30       	cpi	r24, 0x04	; 4
     4d0:	91 05       	cpc	r25, r1
     4d2:	b1 f1       	breq	.+108    	; 0x540 <localize+0x40a>
     4d4:	05 97       	sbiw	r24, 0x05	; 5
     4d6:	09 f0       	breq	.+2      	; 0x4da <localize+0x3a4>
     4d8:	65 c0       	rjmp	.+202    	; 0x5a4 <localize+0x46e>
     4da:	4b c0       	rjmp	.+150    	; 0x572 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     4dc:	8a e3       	ldi	r24, 0x3A	; 58
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	90 93 6d 01 	sts	0x016D, r25
     4e4:	80 93 6c 01 	sts	0x016C, r24
     4e8:	86 e3       	ldi	r24, 0x36	; 54
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 53 01 	sts	0x0153, r25
     4f0:	80 93 52 01 	sts	0x0152, r24
     4f4:	8e e2       	ldi	r24, 0x2E	; 46
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 93 55 01 	sts	0x0155, r25
     4fc:	80 93 54 01 	sts	0x0154, r24
     500:	82 e3       	ldi	r24, 0x32	; 50
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	90 93 67 01 	sts	0x0167, r25
     508:	80 93 66 01 	sts	0x0166, r24
                        break;
     50c:	2a c2       	rjmp	.+1108   	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     50e:	8a e3       	ldi	r24, 0x3A	; 58
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 6d 01 	sts	0x016D, r25
     516:	80 93 6c 01 	sts	0x016C, r24
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	90 93 53 01 	sts	0x0153, r25
     522:	80 93 52 01 	sts	0x0152, r24
     526:	8e e2       	ldi	r24, 0x2E	; 46
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	90 93 55 01 	sts	0x0155, r25
     52e:	80 93 54 01 	sts	0x0154, r24
     532:	86 e3       	ldi	r24, 0x36	; 54
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	90 93 67 01 	sts	0x0167, r25
     53a:	80 93 66 01 	sts	0x0166, r24
                        break;
     53e:	11 c2       	rjmp	.+1058   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     540:	8e e2       	ldi	r24, 0x2E	; 46
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	90 93 6d 01 	sts	0x016D, r25
     548:	80 93 6c 01 	sts	0x016C, r24
     54c:	86 e3       	ldi	r24, 0x36	; 54
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 53 01 	sts	0x0153, r25
     554:	80 93 52 01 	sts	0x0152, r24
     558:	8a e3       	ldi	r24, 0x3A	; 58
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	90 93 55 01 	sts	0x0155, r25
     560:	80 93 54 01 	sts	0x0154, r24
     564:	82 e3       	ldi	r24, 0x32	; 50
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 93 67 01 	sts	0x0167, r25
     56c:	80 93 66 01 	sts	0x0166, r24
                        break;
     570:	f8 c1       	rjmp	.+1008   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     572:	8e e2       	ldi	r24, 0x2E	; 46
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	90 93 6d 01 	sts	0x016D, r25
     57a:	80 93 6c 01 	sts	0x016C, r24
     57e:	82 e3       	ldi	r24, 0x32	; 50
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	90 93 53 01 	sts	0x0153, r25
     586:	80 93 52 01 	sts	0x0152, r24
     58a:	8a e3       	ldi	r24, 0x3A	; 58
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	90 93 55 01 	sts	0x0155, r25
     592:	80 93 54 01 	sts	0x0154, r24
     596:	86 e3       	ldi	r24, 0x36	; 54
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	90 93 67 01 	sts	0x0167, r25
     59e:	80 93 66 01 	sts	0x0166, r24
                        break;
     5a2:	df c1       	rjmp	.+958    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     5a4:	8a e3       	ldi	r24, 0x3A	; 58
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	90 93 6d 01 	sts	0x016D, r25
     5ac:	80 93 6c 01 	sts	0x016C, r24
     5b0:	86 e3       	ldi	r24, 0x36	; 54
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	90 93 53 01 	sts	0x0153, r25
     5b8:	80 93 52 01 	sts	0x0152, r24
     5bc:	82 e3       	ldi	r24, 0x32	; 50
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	90 93 55 01 	sts	0x0155, r25
     5c4:	80 93 54 01 	sts	0x0154, r24
     5c8:	8e e2       	ldi	r24, 0x2E	; 46
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 67 01 	sts	0x0167, r25
     5d0:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 09 01 	sts	0x0109, r25
     5dc:	80 93 08 01 	sts	0x0108, r24
                        break;
     5e0:	c6 c1       	rjmp	.+908    	; 0x96e <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
     5e2:	ed 81       	ldd	r30, Y+5	; 0x05
     5e4:	fe 81       	ldd	r31, Y+6	; 0x06
     5e6:	e1 30       	cpi	r30, 0x01	; 1
     5e8:	f1 05       	cpc	r31, r1
     5ea:	31 f1       	breq	.+76     	; 0x638 <localize+0x502>
     5ec:	1c f4       	brge	.+6      	; 0x5f4 <localize+0x4be>
     5ee:	ef 2b       	or	r30, r31
     5f0:	51 f0       	breq	.+20     	; 0x606 <localize+0x4d0>
     5f2:	6d c0       	rjmp	.+218    	; 0x6ce <localize+0x598>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	91 05       	cpc	r25, r1
     5fc:	b1 f1       	breq	.+108    	; 0x66a <localize+0x534>
     5fe:	05 97       	sbiw	r24, 0x05	; 5
     600:	09 f0       	breq	.+2      	; 0x604 <localize+0x4ce>
     602:	65 c0       	rjmp	.+202    	; 0x6ce <localize+0x598>
     604:	4b c0       	rjmp	.+150    	; 0x69c <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     606:	86 e3       	ldi	r24, 0x36	; 54
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 6d 01 	sts	0x016D, r25
     60e:	80 93 6c 01 	sts	0x016C, r24
     612:	8a e3       	ldi	r24, 0x3A	; 58
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 53 01 	sts	0x0153, r25
     61a:	80 93 52 01 	sts	0x0152, r24
     61e:	82 e3       	ldi	r24, 0x32	; 50
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 55 01 	sts	0x0155, r25
     626:	80 93 54 01 	sts	0x0154, r24
     62a:	8e e2       	ldi	r24, 0x2E	; 46
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	90 93 67 01 	sts	0x0167, r25
     632:	80 93 66 01 	sts	0x0166, r24
                        break;
     636:	95 c1       	rjmp	.+810    	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 6d 01 	sts	0x016D, r25
     640:	80 93 6c 01 	sts	0x016C, r24
     644:	8a e3       	ldi	r24, 0x3A	; 58
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 53 01 	sts	0x0153, r25
     64c:	80 93 52 01 	sts	0x0152, r24
     650:	86 e3       	ldi	r24, 0x36	; 54
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 55 01 	sts	0x0155, r25
     658:	80 93 54 01 	sts	0x0154, r24
     65c:	8e e2       	ldi	r24, 0x2E	; 46
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	90 93 67 01 	sts	0x0167, r25
     664:	80 93 66 01 	sts	0x0166, r24
                        break;
     668:	7c c1       	rjmp	.+760    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     66a:	86 e3       	ldi	r24, 0x36	; 54
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 6d 01 	sts	0x016D, r25
     672:	80 93 6c 01 	sts	0x016C, r24
     676:	8e e2       	ldi	r24, 0x2E	; 46
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 53 01 	sts	0x0153, r25
     67e:	80 93 52 01 	sts	0x0152, r24
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 55 01 	sts	0x0155, r25
     68a:	80 93 54 01 	sts	0x0154, r24
     68e:	8a e3       	ldi	r24, 0x3A	; 58
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	90 93 67 01 	sts	0x0167, r25
     696:	80 93 66 01 	sts	0x0166, r24
                        break;
     69a:	63 c1       	rjmp	.+710    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     69c:	82 e3       	ldi	r24, 0x32	; 50
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 6d 01 	sts	0x016D, r25
     6a4:	80 93 6c 01 	sts	0x016C, r24
     6a8:	8e e2       	ldi	r24, 0x2E	; 46
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 53 01 	sts	0x0153, r25
     6b0:	80 93 52 01 	sts	0x0152, r24
     6b4:	86 e3       	ldi	r24, 0x36	; 54
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 55 01 	sts	0x0155, r25
     6bc:	80 93 54 01 	sts	0x0154, r24
     6c0:	8a e3       	ldi	r24, 0x3A	; 58
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 67 01 	sts	0x0167, r25
     6c8:	80 93 66 01 	sts	0x0166, r24
                        break;
     6cc:	4a c1       	rjmp	.+660    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6ce:	8a e3       	ldi	r24, 0x3A	; 58
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	90 93 6d 01 	sts	0x016D, r25
     6d6:	80 93 6c 01 	sts	0x016C, r24
     6da:	86 e3       	ldi	r24, 0x36	; 54
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	90 93 53 01 	sts	0x0153, r25
     6e2:	80 93 52 01 	sts	0x0152, r24
     6e6:	82 e3       	ldi	r24, 0x32	; 50
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	90 93 55 01 	sts	0x0155, r25
     6ee:	80 93 54 01 	sts	0x0154, r24
     6f2:	8e e2       	ldi	r24, 0x2E	; 46
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	90 93 67 01 	sts	0x0167, r25
     6fa:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	90 93 09 01 	sts	0x0109, r25
     706:	80 93 08 01 	sts	0x0108, r24
                        break;
     70a:	31 c1       	rjmp	.+610    	; 0x96e <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
     70c:	ed 81       	ldd	r30, Y+5	; 0x05
     70e:	fe 81       	ldd	r31, Y+6	; 0x06
     710:	e2 30       	cpi	r30, 0x02	; 2
     712:	f1 05       	cpc	r31, r1
     714:	31 f1       	breq	.+76     	; 0x762 <localize+0x62c>
     716:	1c f4       	brge	.+6      	; 0x71e <localize+0x5e8>
     718:	ef 2b       	or	r30, r31
     71a:	51 f0       	breq	.+20     	; 0x730 <localize+0x5fa>
     71c:	6d c0       	rjmp	.+218    	; 0x7f8 <localize+0x6c2>
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	91 05       	cpc	r25, r1
     726:	b1 f1       	breq	.+108    	; 0x794 <localize+0x65e>
     728:	05 97       	sbiw	r24, 0x05	; 5
     72a:	09 f0       	breq	.+2      	; 0x72e <localize+0x5f8>
     72c:	65 c0       	rjmp	.+202    	; 0x7f8 <localize+0x6c2>
     72e:	4b c0       	rjmp	.+150    	; 0x7c6 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     730:	86 e3       	ldi	r24, 0x36	; 54
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	90 93 6d 01 	sts	0x016D, r25
     738:	80 93 6c 01 	sts	0x016C, r24
     73c:	8a e3       	ldi	r24, 0x3A	; 58
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 53 01 	sts	0x0153, r25
     744:	80 93 52 01 	sts	0x0152, r24
     748:	8e e2       	ldi	r24, 0x2E	; 46
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	90 93 55 01 	sts	0x0155, r25
     750:	80 93 54 01 	sts	0x0154, r24
     754:	82 e3       	ldi	r24, 0x32	; 50
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	90 93 67 01 	sts	0x0167, r25
     75c:	80 93 66 01 	sts	0x0166, r24
                        break;
     760:	00 c1       	rjmp	.+512    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     762:	8e e2       	ldi	r24, 0x2E	; 46
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	90 93 6d 01 	sts	0x016D, r25
     76a:	80 93 6c 01 	sts	0x016C, r24
     76e:	8a e3       	ldi	r24, 0x3A	; 58
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 53 01 	sts	0x0153, r25
     776:	80 93 52 01 	sts	0x0152, r24
     77a:	86 e3       	ldi	r24, 0x36	; 54
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	90 93 55 01 	sts	0x0155, r25
     782:	80 93 54 01 	sts	0x0154, r24
     786:	82 e3       	ldi	r24, 0x32	; 50
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	90 93 67 01 	sts	0x0167, r25
     78e:	80 93 66 01 	sts	0x0166, r24
                        break;
     792:	e7 c0       	rjmp	.+462    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     794:	86 e3       	ldi	r24, 0x36	; 54
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 6d 01 	sts	0x016D, r25
     79c:	80 93 6c 01 	sts	0x016C, r24
     7a0:	82 e3       	ldi	r24, 0x32	; 50
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 53 01 	sts	0x0153, r25
     7a8:	80 93 52 01 	sts	0x0152, r24
     7ac:	8e e2       	ldi	r24, 0x2E	; 46
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 55 01 	sts	0x0155, r25
     7b4:	80 93 54 01 	sts	0x0154, r24
     7b8:	8a e3       	ldi	r24, 0x3A	; 58
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	90 93 67 01 	sts	0x0167, r25
     7c0:	80 93 66 01 	sts	0x0166, r24
                        break;
     7c4:	ce c0       	rjmp	.+412    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     7c6:	8e e2       	ldi	r24, 0x2E	; 46
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 6d 01 	sts	0x016D, r25
     7ce:	80 93 6c 01 	sts	0x016C, r24
     7d2:	82 e3       	ldi	r24, 0x32	; 50
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	90 93 53 01 	sts	0x0153, r25
     7da:	80 93 52 01 	sts	0x0152, r24
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 55 01 	sts	0x0155, r25
     7e6:	80 93 54 01 	sts	0x0154, r24
     7ea:	8a e3       	ldi	r24, 0x3A	; 58
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	90 93 67 01 	sts	0x0167, r25
     7f2:	80 93 66 01 	sts	0x0166, r24
                        break;
     7f6:	b5 c0       	rjmp	.+362    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7f8:	8a e3       	ldi	r24, 0x3A	; 58
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	90 93 6d 01 	sts	0x016D, r25
     800:	80 93 6c 01 	sts	0x016C, r24
     804:	86 e3       	ldi	r24, 0x36	; 54
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	90 93 53 01 	sts	0x0153, r25
     80c:	80 93 52 01 	sts	0x0152, r24
     810:	82 e3       	ldi	r24, 0x32	; 50
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	90 93 55 01 	sts	0x0155, r25
     818:	80 93 54 01 	sts	0x0154, r24
     81c:	8e e2       	ldi	r24, 0x2E	; 46
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 67 01 	sts	0x0167, r25
     824:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 09 01 	sts	0x0109, r25
     830:	80 93 08 01 	sts	0x0108, r24
                        break;
     834:	9c c0       	rjmp	.+312    	; 0x96e <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     836:	ed 81       	ldd	r30, Y+5	; 0x05
     838:	fe 81       	ldd	r31, Y+6	; 0x06
     83a:	e2 30       	cpi	r30, 0x02	; 2
     83c:	f1 05       	cpc	r31, r1
     83e:	39 f1       	breq	.+78     	; 0x88e <localize+0x758>
     840:	24 f4       	brge	.+8      	; 0x84a <localize+0x714>
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	09 f0       	breq	.+2      	; 0x848 <localize+0x712>
     846:	6e c0       	rjmp	.+220    	; 0x924 <localize+0x7ee>
     848:	09 c0       	rjmp	.+18     	; 0x85c <localize+0x726>
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	9e 81       	ldd	r25, Y+6	; 0x06
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	91 05       	cpc	r25, r1
     852:	b1 f1       	breq	.+108    	; 0x8c0 <localize+0x78a>
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	09 f0       	breq	.+2      	; 0x85a <localize+0x724>
     858:	65 c0       	rjmp	.+202    	; 0x924 <localize+0x7ee>
     85a:	4b c0       	rjmp	.+150    	; 0x8f2 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     85c:	82 e3       	ldi	r24, 0x32	; 50
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	90 93 6d 01 	sts	0x016D, r25
     864:	80 93 6c 01 	sts	0x016C, r24
     868:	8a e3       	ldi	r24, 0x3A	; 58
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	90 93 53 01 	sts	0x0153, r25
     870:	80 93 52 01 	sts	0x0152, r24
     874:	8e e2       	ldi	r24, 0x2E	; 46
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	90 93 55 01 	sts	0x0155, r25
     87c:	80 93 54 01 	sts	0x0154, r24
     880:	86 e3       	ldi	r24, 0x36	; 54
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 67 01 	sts	0x0167, r25
     888:	80 93 66 01 	sts	0x0166, r24
                        break;
     88c:	6a c0       	rjmp	.+212    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     88e:	8e e2       	ldi	r24, 0x2E	; 46
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	90 93 6d 01 	sts	0x016D, r25
     896:	80 93 6c 01 	sts	0x016C, r24
     89a:	8a e3       	ldi	r24, 0x3A	; 58
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	90 93 53 01 	sts	0x0153, r25
     8a2:	80 93 52 01 	sts	0x0152, r24
     8a6:	82 e3       	ldi	r24, 0x32	; 50
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 55 01 	sts	0x0155, r25
     8ae:	80 93 54 01 	sts	0x0154, r24
     8b2:	86 e3       	ldi	r24, 0x36	; 54
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 67 01 	sts	0x0167, r25
     8ba:	80 93 66 01 	sts	0x0166, r24
                        break;
     8be:	51 c0       	rjmp	.+162    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     8c0:	82 e3       	ldi	r24, 0x32	; 50
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 6d 01 	sts	0x016D, r25
     8c8:	80 93 6c 01 	sts	0x016C, r24
     8cc:	86 e3       	ldi	r24, 0x36	; 54
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	90 93 53 01 	sts	0x0153, r25
     8d4:	80 93 52 01 	sts	0x0152, r24
     8d8:	8e e2       	ldi	r24, 0x2E	; 46
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	90 93 55 01 	sts	0x0155, r25
     8e0:	80 93 54 01 	sts	0x0154, r24
     8e4:	8a e3       	ldi	r24, 0x3A	; 58
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	90 93 67 01 	sts	0x0167, r25
     8ec:	80 93 66 01 	sts	0x0166, r24
                        break;
     8f0:	38 c0       	rjmp	.+112    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     8f2:	8e e2       	ldi	r24, 0x2E	; 46
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	90 93 6d 01 	sts	0x016D, r25
     8fa:	80 93 6c 01 	sts	0x016C, r24
     8fe:	86 e3       	ldi	r24, 0x36	; 54
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	90 93 53 01 	sts	0x0153, r25
     906:	80 93 52 01 	sts	0x0152, r24
     90a:	82 e3       	ldi	r24, 0x32	; 50
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	90 93 55 01 	sts	0x0155, r25
     912:	80 93 54 01 	sts	0x0154, r24
     916:	8a e3       	ldi	r24, 0x3A	; 58
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	90 93 67 01 	sts	0x0167, r25
     91e:	80 93 66 01 	sts	0x0166, r24
                        break;
     922:	1f c0       	rjmp	.+62     	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     924:	8a e3       	ldi	r24, 0x3A	; 58
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	90 93 6d 01 	sts	0x016D, r25
     92c:	80 93 6c 01 	sts	0x016C, r24
     930:	86 e3       	ldi	r24, 0x36	; 54
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 53 01 	sts	0x0153, r25
     938:	80 93 52 01 	sts	0x0152, r24
     93c:	82 e3       	ldi	r24, 0x32	; 50
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	90 93 55 01 	sts	0x0155, r25
     944:	80 93 54 01 	sts	0x0154, r24
     948:	8e e2       	ldi	r24, 0x2E	; 46
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 67 01 	sts	0x0167, r25
     950:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 09 01 	sts	0x0109, r25
     95c:	80 93 08 01 	sts	0x0108, r24
                        break;
     960:	06 c0       	rjmp	.+12     	; 0x96e <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     962:	80 91 08 01 	lds	r24, 0x0108
     966:	90 91 09 01 	lds	r25, 0x0109
     96a:	89 2b       	or	r24, r25
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <localize+0x86c>
        *orientation = orientation_prev;
     96e:	80 91 14 01 	lds	r24, 0x0114
     972:	90 91 15 01 	lds	r25, 0x0115
     976:	ef 8d       	ldd	r30, Y+31	; 0x1f
     978:	f8 a1       	ldd	r31, Y+32	; 0x20
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     97e:	80 91 12 01 	lds	r24, 0x0112
     982:	90 91 13 01 	lds	r25, 0x0113
     986:	ef 81       	ldd	r30, Y+7	; 0x07
     988:	f8 85       	ldd	r31, Y+8	; 0x08
     98a:	91 83       	std	Z+1, r25	; 0x01
     98c:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     98e:	80 91 10 01 	lds	r24, 0x0110
     992:	90 91 11 01 	lds	r25, 0x0111
     996:	ed 8d       	ldd	r30, Y+29	; 0x1d
     998:	fe 8d       	ldd	r31, Y+30	; 0x1e
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
        return 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	de c3       	rjmp	.+1980   	; 0x115e <__stack+0x65f>
    }
    
    
    float scale = P_vertical/max_distance;
     9a2:	26 2d       	mov	r18, r6
     9a4:	37 2d       	mov	r19, r7
     9a6:	48 2d       	mov	r20, r8
     9a8:	59 2d       	mov	r21, r9
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	91 e4       	ldi	r25, 0x41	; 65
     9b2:	0e 94 2d 11 	call	0x225a	; 0x225a <__divsf3>
     9b6:	26 2e       	mov	r2, r22
     9b8:	37 2e       	mov	r3, r23
     9ba:	48 2e       	mov	r4, r24
     9bc:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     9be:	e0 90 6c 01 	lds	r14, 0x016C
     9c2:	f0 90 6d 01 	lds	r15, 0x016D
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fe e5       	ldi	r31, 0x5E	; 94
     9ca:	8f 2e       	mov	r8, r31
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	9f 2e       	mov	r9, r31
     9d0:	f0 2d       	mov	r31, r0
     9d2:	f7 01       	movw	r30, r14
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     9e4:	22 2d       	mov	r18, r2
     9e6:	33 2d       	mov	r19, r3
     9e8:	44 2d       	mov	r20, r4
     9ea:	55 2d       	mov	r21, r5
     9ec:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     9f0:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     9f4:	f4 01       	movw	r30, r8
     9f6:	71 83       	std	Z+1, r23	; 0x01
     9f8:	60 83       	st	Z, r22
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f0 e6       	ldi	r31, 0x60	; 96
     9fe:	6f 2e       	mov	r6, r31
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	7f 2e       	mov	r7, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	f7 01       	movw	r30, r14
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	73 81       	ldd	r23, Z+3	; 0x03
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     a18:	22 2d       	mov	r18, r2
     a1a:	33 2d       	mov	r19, r3
     a1c:	44 2d       	mov	r20, r4
     a1e:	55 2d       	mov	r21, r5
     a20:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     a24:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     a28:	f3 01       	movw	r30, r6
     a2a:	71 83       	std	Z+1, r23	; 0x01
     a2c:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     a2e:	00 91 54 01 	lds	r16, 0x0154
     a32:	10 91 55 01 	lds	r17, 0x0155
     a36:	0f 2e       	mov	r0, r31
     a38:	fe e4       	ldi	r31, 0x4E	; 78
     a3a:	af 2e       	mov	r10, r31
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	bf 2e       	mov	r11, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	f8 01       	movw	r30, r16
     a44:	60 81       	ld	r22, Z
     a46:	71 81       	ldd	r23, Z+1	; 0x01
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     a54:	22 2d       	mov	r18, r2
     a56:	33 2d       	mov	r19, r3
     a58:	44 2d       	mov	r20, r4
     a5a:	55 2d       	mov	r21, r5
     a5c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     a60:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     a64:	f5 01       	movw	r30, r10
     a66:	71 83       	std	Z+1, r23	; 0x01
     a68:	60 83       	st	Z, r22
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f0 e5       	ldi	r31, 0x50	; 80
     a6e:	cf 2e       	mov	r12, r31
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	df 2e       	mov	r13, r31
     a74:	f0 2d       	mov	r31, r0
     a76:	f8 01       	movw	r30, r16
     a78:	62 81       	ldd	r22, Z+2	; 0x02
     a7a:	73 81       	ldd	r23, Z+3	; 0x03
     a7c:	88 27       	eor	r24, r24
     a7e:	77 fd       	sbrc	r23, 7
     a80:	80 95       	com	r24
     a82:	98 2f       	mov	r25, r24
     a84:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     a88:	22 2d       	mov	r18, r2
     a8a:	33 2d       	mov	r19, r3
     a8c:	44 2d       	mov	r20, r4
     a8e:	55 2d       	mov	r21, r5
     a90:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     a94:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     a98:	f6 01       	movw	r30, r12
     a9a:	71 83       	std	Z+1, r23	; 0x01
     a9c:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     a9e:	f7 01       	movw	r30, r14
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	f8 01       	movw	r30, r16
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	68 0f       	add	r22, r24
     aac:	79 1f       	adc	r23, r25
     aae:	88 27       	eor	r24, r24
     ab0:	77 fd       	sbrc	r23, 7
     ab2:	80 95       	com	r24
     ab4:	98 2f       	mov	r25, r24
     ab6:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     ac6:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     aca:	e9 a1       	ldd	r30, Y+33	; 0x21
     acc:	fa a1       	ldd	r31, Y+34	; 0x22
     ace:	71 83       	std	Z+1, r23	; 0x01
     ad0:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     ad2:	a0 91 6c 01 	lds	r26, 0x016C
     ad6:	b0 91 6d 01 	lds	r27, 0x016D
     ada:	e0 91 54 01 	lds	r30, 0x0154
     ade:	f0 91 55 01 	lds	r31, 0x0155
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	6d 91       	ld	r22, X+
     ae6:	7c 91       	ld	r23, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	68 0f       	add	r22, r24
     af0:	79 1f       	adc	r23, r25
     af2:	88 27       	eor	r24, r24
     af4:	77 fd       	sbrc	r23, 7
     af6:	80 95       	com	r24
     af8:	98 2f       	mov	r25, r24
     afa:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     b0a:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     b0e:	eb a1       	ldd	r30, Y+35	; 0x23
     b10:	fc a1       	ldd	r31, Y+36	; 0x24
     b12:	71 83       	std	Z+1, r23	; 0x01
     b14:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     b16:	f4 01       	movw	r30, r8
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	f5 01       	movw	r30, r10
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	68 0f       	add	r22, r24
     b24:	79 1f       	adc	r23, r25
     b26:	88 27       	eor	r24, r24
     b28:	77 fd       	sbrc	r23, 7
     b2a:	80 95       	com	r24
     b2c:	98 2f       	mov	r25, r24
     b2e:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     b3e:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     b42:	1b 01       	movw	r2, r22
     b44:	70 93 73 01 	sts	0x0173, r23
     b48:	60 93 72 01 	sts	0x0172, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     b4c:	f3 01       	movw	r30, r6
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	f6 01       	movw	r30, r12
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	68 0f       	add	r22, r24
     b5a:	79 1f       	adc	r23, r25
     b5c:	88 27       	eor	r24, r24
     b5e:	77 fd       	sbrc	r23, 7
     b60:	80 95       	com	r24
     b62:	98 2f       	mov	r25, r24
     b64:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     b74:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     b78:	8b 01       	movw	r16, r22
     b7a:	70 93 75 01 	sts	0x0175, r23
     b7e:	60 93 74 01 	sts	0x0174, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     b82:	22 9c       	mul	r2, r2
     b84:	b0 01       	movw	r22, r0
     b86:	23 9c       	mul	r2, r3
     b88:	70 0d       	add	r23, r0
     b8a:	70 0d       	add	r23, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	00 9f       	mul	r16, r16
     b90:	c0 01       	movw	r24, r0
     b92:	01 9f       	mul	r16, r17
     b94:	90 0d       	add	r25, r0
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	68 0f       	add	r22, r24
     b9c:	79 1f       	adc	r23, r25
     b9e:	88 27       	eor	r24, r24
     ba0:	77 fd       	sbrc	r23, 7
     ba2:	80 95       	com	r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     baa:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	60 93 56 01 	sts	0x0156, r22
     bb6:	70 93 57 01 	sts	0x0157, r23
     bba:	80 93 58 01 	sts	0x0158, r24
     bbe:	90 93 59 01 	sts	0x0159, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     bc2:	80 91 54 01 	lds	r24, 0x0154
     bc6:	90 91 55 01 	lds	r25, 0x0155
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	e0 91 6c 01 	lds	r30, 0x016C
     bd2:	f0 91 6d 01 	lds	r31, 0x016D
     bd6:	fe 83       	std	Y+6, r31	; 0x06
     bd8:	ed 83       	std	Y+5, r30	; 0x05
     bda:	fc 01       	movw	r30, r24
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	ed 81       	ldd	r30, Y+5	; 0x05
     be2:	fe 81       	ldd	r31, Y+6	; 0x06
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	68 1b       	sub	r22, r24
     bea:	79 0b       	sbc	r23, r25
     bec:	88 27       	eor	r24, r24
     bee:	77 fd       	sbrc	r23, 7
     bf0:	80 95       	com	r24
     bf2:	98 2f       	mov	r25, r24
     bf4:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	62 81       	ldd	r22, Z+2	; 0x02
     c02:	73 81       	ldd	r23, Z+3	; 0x03
     c04:	ed 81       	ldd	r30, Y+5	; 0x05
     c06:	fe 81       	ldd	r31, Y+6	; 0x06
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	68 1b       	sub	r22, r24
     c0e:	79 0b       	sbc	r23, r25
     c10:	88 27       	eor	r24, r24
     c12:	77 fd       	sbrc	r23, 7
     c14:	80 95       	com	r24
     c16:	98 2f       	mov	r25, r24
     c18:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <atan2>
     c24:	4b 01       	movw	r8, r22
     c26:	5c 01       	movw	r10, r24
     c28:	60 93 62 01 	sts	0x0162, r22
     c2c:	70 93 63 01 	sts	0x0163, r23
     c30:	80 93 64 01 	sts	0x0164, r24
     c34:	90 93 65 01 	sts	0x0165, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     c38:	ed 81       	ldd	r30, Y+5	; 0x05
     c3a:	fe 81       	ldd	r31, Y+6	; 0x06
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	68 1b       	sub	r22, r24
     c4a:	79 0b       	sbc	r23, r25
     c4c:	88 27       	eor	r24, r24
     c4e:	77 fd       	sbrc	r23, 7
     c50:	80 95       	com	r24
     c52:	98 2f       	mov	r25, r24
     c54:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
     c5c:	ed 81       	ldd	r30, Y+5	; 0x05
     c5e:	fe 81       	ldd	r31, Y+6	; 0x06
     c60:	62 81       	ldd	r22, Z+2	; 0x02
     c62:	73 81       	ldd	r23, Z+3	; 0x03
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	68 1b       	sub	r22, r24
     c6e:	79 0b       	sbc	r23, r25
     c70:	88 27       	eor	r24, r24
     c72:	77 fd       	sbrc	r23, 7
     c74:	80 95       	com	r24
     c76:	98 2f       	mov	r25, r24
     c78:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     c7c:	a7 01       	movw	r20, r14
     c7e:	96 01       	movw	r18, r12
     c80:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <atan2>
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	60 93 5a 01 	sts	0x015A, r22
     c8c:	70 93 5b 01 	sts	0x015B, r23
     c90:	80 93 5c 01 	sts	0x015C, r24
     c94:	90 93 5d 01 	sts	0x015D, r25
    alpha = -atan2(S0[0],S0[1]);
     c98:	b8 01       	movw	r22, r16
     c9a:	88 27       	eor	r24, r24
     c9c:	77 fd       	sbrc	r23, 7
     c9e:	80 95       	com	r24
     ca0:	98 2f       	mov	r25, r24
     ca2:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     ca6:	69 83       	std	Y+1, r22	; 0x01
     ca8:	7a 83       	std	Y+2, r23	; 0x02
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	b1 01       	movw	r22, r2
     cb0:	88 27       	eor	r24, r24
     cb2:	77 fd       	sbrc	r23, 7
     cb4:	80 95       	com	r24
     cb6:	98 2f       	mov	r25, r24
     cb8:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	3a 81       	ldd	r19, Y+2	; 0x02
     cc0:	4b 81       	ldd	r20, Y+3	; 0x03
     cc2:	5c 81       	ldd	r21, Y+4	; 0x04
     cc4:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <atan2>
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	b0 58       	subi	r27, 0x80	; 128
     cd2:	80 93 76 01 	sts	0x0176, r24
     cd6:	90 93 77 01 	sts	0x0177, r25
     cda:	a0 93 78 01 	sts	0x0178, r26
     cde:	b0 93 79 01 	sts	0x0179, r27
    
    x_robot_current     = -radius * cos(theta - alpha);
     ce2:	77 fa       	bst	r7, 7
     ce4:	70 94       	com	r7
     ce6:	77 f8       	bld	r7, 7
     ce8:	70 94       	com	r7
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
     cf2:	86 2e       	mov	r8, r22
     cf4:	97 2e       	mov	r9, r23
     cf6:	a8 2e       	mov	r10, r24
     cf8:	b9 2e       	mov	r11, r25
     cfa:	0e 94 2a 11 	call	0x2254	; 0x2254 <cos>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c3 01       	movw	r24, r6
     d04:	b2 01       	movw	r22, r4
     d06:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     d0a:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     d0e:	8b 01       	movw	r16, r22
     d10:	70 93 0d 01 	sts	0x010D, r23
     d14:	60 93 0c 01 	sts	0x010C, r22
    y_robot_current     = -radius * sin(theta - alpha);
     d18:	68 2d       	mov	r22, r8
     d1a:	79 2d       	mov	r23, r9
     d1c:	8a 2d       	mov	r24, r10
     d1e:	9b 2d       	mov	r25, r11
     d20:	0e 94 44 13 	call	0x2688	; 0x2688 <sin>
     d24:	9b 01       	movw	r18, r22
     d26:	ac 01       	movw	r20, r24
     d28:	c3 01       	movw	r24, r6
     d2a:	b2 01       	movw	r22, r4
     d2c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     d30:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     d34:	70 93 0b 01 	sts	0x010B, r23
     d38:	60 93 0a 01 	sts	0x010A, r22
    orientation_current = (theta2) * 180/M_PI;
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	44 e3       	ldi	r20, 0x34	; 52
     d42:	53 e4       	ldi	r21, 0x43	; 67
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     d4c:	2b ed       	ldi	r18, 0xDB	; 219
     d4e:	3f e0       	ldi	r19, 0x0F	; 15
     d50:	49 e4       	ldi	r20, 0x49	; 73
     d52:	50 e4       	ldi	r21, 0x40	; 64
     d54:	0e 94 2d 11 	call	0x225a	; 0x225a <__divsf3>
     d58:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     d5c:	70 93 0f 01 	sts	0x010F, r23
     d60:	60 93 0e 01 	sts	0x010E, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
     d64:	c0 90 00 01 	lds	r12, 0x0100
     d68:	d0 90 01 01 	lds	r13, 0x0101
     d6c:	e0 90 02 01 	lds	r14, 0x0102
     d70:	f0 90 03 01 	lds	r15, 0x0103
     d74:	60 91 12 01 	lds	r22, 0x0112
     d78:	70 91 13 01 	lds	r23, 0x0113
     d7c:	88 27       	eor	r24, r24
     d7e:	77 fd       	sbrc	r23, 7
     d80:	80 95       	com	r24
     d82:	98 2f       	mov	r25, r24
     d84:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     d88:	a7 01       	movw	r20, r14
     d8a:	96 01       	movw	r18, r12
     d8c:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     d90:	4b 01       	movw	r8, r22
     d92:	5c 01       	movw	r10, r24
     d94:	a7 01       	movw	r20, r14
     d96:	96 01       	movw	r18, r12
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	70 e0       	ldi	r23, 0x00	; 0
     d9c:	80 e8       	ldi	r24, 0x80	; 128
     d9e:	9f e3       	ldi	r25, 0x3F	; 63
     da0:	0e 94 5f 10 	call	0x20be	; 0x20be <__subsf3>
     da4:	6b 01       	movw	r12, r22
     da6:	7c 01       	movw	r14, r24
     da8:	b8 01       	movw	r22, r16
     daa:	88 27       	eor	r24, r24
     dac:	77 fd       	sbrc	r23, 7
     dae:	80 95       	com	r24
     db0:	98 2f       	mov	r25, r24
     db2:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     db6:	9b 01       	movw	r18, r22
     db8:	ac 01       	movw	r20, r24
     dba:	c7 01       	movw	r24, r14
     dbc:	b6 01       	movw	r22, r12
     dbe:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     dc2:	9b 01       	movw	r18, r22
     dc4:	ac 01       	movw	r20, r24
     dc6:	c5 01       	movw	r24, r10
     dc8:	b4 01       	movw	r22, r8
     dca:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
     dce:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     dd2:	ef 81       	ldd	r30, Y+7	; 0x07
     dd4:	f8 85       	ldd	r31, Y+8	; 0x08
     dd6:	71 83       	std	Z+1, r23	; 0x01
     dd8:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
     dda:	c0 90 00 01 	lds	r12, 0x0100
     dde:	d0 90 01 01 	lds	r13, 0x0101
     de2:	e0 90 02 01 	lds	r14, 0x0102
     de6:	f0 90 03 01 	lds	r15, 0x0103
     dea:	60 91 10 01 	lds	r22, 0x0110
     dee:	70 91 11 01 	lds	r23, 0x0111
     df2:	88 27       	eor	r24, r24
     df4:	77 fd       	sbrc	r23, 7
     df6:	80 95       	com	r24
     df8:	98 2f       	mov	r25, r24
     dfa:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     dfe:	a7 01       	movw	r20, r14
     e00:	96 01       	movw	r18, r12
     e02:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     e06:	4b 01       	movw	r8, r22
     e08:	5c 01       	movw	r10, r24
     e0a:	a7 01       	movw	r20, r14
     e0c:	96 01       	movw	r18, r12
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e8       	ldi	r24, 0x80	; 128
     e14:	9f e3       	ldi	r25, 0x3F	; 63
     e16:	0e 94 5f 10 	call	0x20be	; 0x20be <__subsf3>
     e1a:	6b 01       	movw	r12, r22
     e1c:	7c 01       	movw	r14, r24
     e1e:	60 91 0a 01 	lds	r22, 0x010A
     e22:	70 91 0b 01 	lds	r23, 0x010B
     e26:	88 27       	eor	r24, r24
     e28:	77 fd       	sbrc	r23, 7
     e2a:	80 95       	com	r24
     e2c:	98 2f       	mov	r25, r24
     e2e:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     e32:	9b 01       	movw	r18, r22
     e34:	ac 01       	movw	r20, r24
     e36:	c7 01       	movw	r24, r14
     e38:	b6 01       	movw	r22, r12
     e3a:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
     e4a:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     e4e:	ed 8d       	ldd	r30, Y+29	; 0x1d
     e50:	fe 8d       	ldd	r31, Y+30	; 0x1e
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
     e56:	c0 90 00 01 	lds	r12, 0x0100
     e5a:	d0 90 01 01 	lds	r13, 0x0101
     e5e:	e0 90 02 01 	lds	r14, 0x0102
     e62:	f0 90 03 01 	lds	r15, 0x0103
     e66:	60 91 14 01 	lds	r22, 0x0114
     e6a:	70 91 15 01 	lds	r23, 0x0115
     e6e:	88 27       	eor	r24, r24
     e70:	77 fd       	sbrc	r23, 7
     e72:	80 95       	com	r24
     e74:	98 2f       	mov	r25, r24
     e76:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     e7a:	a7 01       	movw	r20, r14
     e7c:	96 01       	movw	r18, r12
     e7e:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     e82:	4b 01       	movw	r8, r22
     e84:	5c 01       	movw	r10, r24
     e86:	a7 01       	movw	r20, r14
     e88:	96 01       	movw	r18, r12
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 e8       	ldi	r24, 0x80	; 128
     e90:	9f e3       	ldi	r25, 0x3F	; 63
     e92:	0e 94 5f 10 	call	0x20be	; 0x20be <__subsf3>
     e96:	6b 01       	movw	r12, r22
     e98:	7c 01       	movw	r14, r24
     e9a:	60 91 0e 01 	lds	r22, 0x010E
     e9e:	70 91 0f 01 	lds	r23, 0x010F
     ea2:	88 27       	eor	r24, r24
     ea4:	77 fd       	sbrc	r23, 7
     ea6:	80 95       	com	r24
     ea8:	98 2f       	mov	r25, r24
     eaa:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     eae:	9b 01       	movw	r18, r22
     eb0:	ac 01       	movw	r20, r24
     eb2:	c7 01       	movw	r24, r14
     eb4:	b6 01       	movw	r22, r12
     eb6:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
     eba:	9b 01       	movw	r18, r22
     ebc:	ac 01       	movw	r20, r24
     ebe:	c5 01       	movw	r24, r10
     ec0:	b4 01       	movw	r22, r8
     ec2:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
     ec6:	0e 94 95 11 	call	0x232a	; 0x232a <__fixsfsi>
     eca:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ecc:	f8 a1       	ldd	r31, Y+32	; 0x20
     ece:	71 83       	std	Z+1, r23	; 0x01
     ed0:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
     ed2:	ef 81       	ldd	r30, Y+7	; 0x07
     ed4:	f8 85       	ldd	r31, Y+8	; 0x08
     ed6:	80 81       	ld	r24, Z
     ed8:	91 81       	ldd	r25, Z+1	; 0x01
     eda:	90 93 13 01 	sts	0x0113, r25
     ede:	80 93 12 01 	sts	0x0112, r24
    y_robot_prev     = *y_robot;
     ee2:	ed 8d       	ldd	r30, Y+29	; 0x1d
     ee4:	fe 8d       	ldd	r31, Y+30	; 0x1e
     ee6:	80 81       	ld	r24, Z
     ee8:	91 81       	ldd	r25, Z+1	; 0x01
     eea:	90 93 11 01 	sts	0x0111, r25
     eee:	80 93 10 01 	sts	0x0110, r24
    orientation_prev = *orientation;
     ef2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ef4:	f8 a1       	ldd	r31, Y+32	; 0x20
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	90 93 15 01 	sts	0x0115, r25
     efe:	80 93 14 01 	sts	0x0114, r24
    
    return 1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	2c c1       	rjmp	.+600    	; 0x115e <__stack+0x65f>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
     f06:	e0 91 06 01 	lds	r30, 0x0106
     f0a:	f0 91 07 01 	lds	r31, 0x0107
     f0e:	4c 01       	movw	r8, r24
     f10:	8e 1a       	sub	r8, r30
     f12:	9f 0a       	sbc	r9, r31
     f14:	90 92 3b 01 	sts	0x013B, r9
     f18:	80 92 3a 01 	sts	0x013A, r8
     f1c:	80 91 04 01 	lds	r24, 0x0104
     f20:	90 91 05 01 	lds	r25, 0x0105
     f24:	08 1b       	sub	r16, r24
     f26:	19 0b       	sbc	r17, r25
     f28:	10 93 3d 01 	sts	0x013D, r17
     f2c:	00 93 3c 01 	sts	0x013C, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
     f30:	3b 01       	movw	r6, r22
     f32:	6e 1a       	sub	r6, r30
     f34:	7f 0a       	sbc	r7, r31
     f36:	70 92 37 01 	sts	0x0137, r7
     f3a:	60 92 36 01 	sts	0x0136, r6
     f3e:	e8 1a       	sub	r14, r24
     f40:	f9 0a       	sbc	r15, r25
     f42:	f0 92 39 01 	sts	0x0139, r15
     f46:	e0 92 38 01 	sts	0x0138, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
     f4a:	2a 01       	movw	r4, r20
     f4c:	4e 1a       	sub	r4, r30
     f4e:	5f 0a       	sbc	r5, r31
     f50:	50 92 33 01 	sts	0x0133, r5
     f54:	40 92 32 01 	sts	0x0132, r4
     f58:	16 01       	movw	r2, r12
     f5a:	28 1a       	sub	r2, r24
     f5c:	39 0a       	sbc	r3, r25
     f5e:	30 92 35 01 	sts	0x0135, r3
     f62:	20 92 34 01 	sts	0x0134, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
     f66:	69 01       	movw	r12, r18
     f68:	ce 1a       	sub	r12, r30
     f6a:	df 0a       	sbc	r13, r31
     f6c:	d0 92 2f 01 	sts	0x012F, r13
     f70:	c0 92 2e 01 	sts	0x012E, r12
     f74:	a8 1a       	sub	r10, r24
     f76:	b9 0a       	sbc	r11, r25
     f78:	b0 92 31 01 	sts	0x0131, r11
     f7c:	a0 92 30 01 	sts	0x0130, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
     f80:	93 01       	movw	r18, r6
     f82:	28 19       	sub	r18, r8
     f84:	39 09       	sbc	r19, r9
     f86:	c7 01       	movw	r24, r14
     f88:	80 1b       	sub	r24, r16
     f8a:	91 0b       	sbc	r25, r17
     f8c:	22 9f       	mul	r18, r18
     f8e:	b0 01       	movw	r22, r0
     f90:	23 9f       	mul	r18, r19
     f92:	70 0d       	add	r23, r0
     f94:	70 0d       	add	r23, r0
     f96:	11 24       	eor	r1, r1
     f98:	88 9f       	mul	r24, r24
     f9a:	90 01       	movw	r18, r0
     f9c:	89 9f       	mul	r24, r25
     f9e:	30 0d       	add	r19, r0
     fa0:	30 0d       	add	r19, r0
     fa2:	11 24       	eor	r1, r1
     fa4:	62 0f       	add	r22, r18
     fa6:	73 1f       	adc	r23, r19
     fa8:	88 27       	eor	r24, r24
     faa:	77 fd       	sbrc	r23, 7
     fac:	80 95       	com	r24
     fae:	98 2f       	mov	r25, r24
     fb0:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     fb4:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
     fb8:	60 93 16 01 	sts	0x0116, r22
     fbc:	70 93 17 01 	sts	0x0117, r23
     fc0:	80 93 18 01 	sts	0x0118, r24
     fc4:	90 93 19 01 	sts	0x0119, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
     fc8:	92 01       	movw	r18, r4
     fca:	28 19       	sub	r18, r8
     fcc:	39 09       	sbc	r19, r9
     fce:	c1 01       	movw	r24, r2
     fd0:	80 1b       	sub	r24, r16
     fd2:	91 0b       	sbc	r25, r17
     fd4:	22 9f       	mul	r18, r18
     fd6:	b0 01       	movw	r22, r0
     fd8:	23 9f       	mul	r18, r19
     fda:	70 0d       	add	r23, r0
     fdc:	70 0d       	add	r23, r0
     fde:	11 24       	eor	r1, r1
     fe0:	88 9f       	mul	r24, r24
     fe2:	90 01       	movw	r18, r0
     fe4:	89 9f       	mul	r24, r25
     fe6:	30 0d       	add	r19, r0
     fe8:	30 0d       	add	r19, r0
     fea:	11 24       	eor	r1, r1
     fec:	62 0f       	add	r22, r18
     fee:	73 1f       	adc	r23, r19
     ff0:	88 27       	eor	r24, r24
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	80 95       	com	r24
     ff6:	98 2f       	mov	r25, r24
     ff8:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
     ffc:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
    1000:	60 93 1a 01 	sts	0x011A, r22
    1004:	70 93 1b 01 	sts	0x011B, r23
    1008:	80 93 1c 01 	sts	0x011C, r24
    100c:	90 93 1d 01 	sts	0x011D, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    1010:	96 01       	movw	r18, r12
    1012:	28 19       	sub	r18, r8
    1014:	39 09       	sbc	r19, r9
    1016:	c5 01       	movw	r24, r10
    1018:	80 1b       	sub	r24, r16
    101a:	91 0b       	sbc	r25, r17
    101c:	22 9f       	mul	r18, r18
    101e:	b0 01       	movw	r22, r0
    1020:	23 9f       	mul	r18, r19
    1022:	70 0d       	add	r23, r0
    1024:	70 0d       	add	r23, r0
    1026:	11 24       	eor	r1, r1
    1028:	88 9f       	mul	r24, r24
    102a:	90 01       	movw	r18, r0
    102c:	89 9f       	mul	r24, r25
    102e:	30 0d       	add	r19, r0
    1030:	30 0d       	add	r19, r0
    1032:	11 24       	eor	r1, r1
    1034:	62 0f       	add	r22, r18
    1036:	73 1f       	adc	r23, r19
    1038:	88 27       	eor	r24, r24
    103a:	77 fd       	sbrc	r23, 7
    103c:	80 95       	com	r24
    103e:	98 2f       	mov	r25, r24
    1040:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1044:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
    1048:	60 93 1e 01 	sts	0x011E, r22
    104c:	70 93 1f 01 	sts	0x011F, r23
    1050:	80 93 20 01 	sts	0x0120, r24
    1054:	90 93 21 01 	sts	0x0121, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    1058:	92 01       	movw	r18, r4
    105a:	26 19       	sub	r18, r6
    105c:	37 09       	sbc	r19, r7
    105e:	c1 01       	movw	r24, r2
    1060:	8e 19       	sub	r24, r14
    1062:	9f 09       	sbc	r25, r15
    1064:	22 9f       	mul	r18, r18
    1066:	b0 01       	movw	r22, r0
    1068:	23 9f       	mul	r18, r19
    106a:	70 0d       	add	r23, r0
    106c:	70 0d       	add	r23, r0
    106e:	11 24       	eor	r1, r1
    1070:	88 9f       	mul	r24, r24
    1072:	90 01       	movw	r18, r0
    1074:	89 9f       	mul	r24, r25
    1076:	30 0d       	add	r19, r0
    1078:	30 0d       	add	r19, r0
    107a:	11 24       	eor	r1, r1
    107c:	62 0f       	add	r22, r18
    107e:	73 1f       	adc	r23, r19
    1080:	88 27       	eor	r24, r24
    1082:	77 fd       	sbrc	r23, 7
    1084:	80 95       	com	r24
    1086:	98 2f       	mov	r25, r24
    1088:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    108c:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
    1090:	60 93 22 01 	sts	0x0122, r22
    1094:	70 93 23 01 	sts	0x0123, r23
    1098:	80 93 24 01 	sts	0x0124, r24
    109c:	90 93 25 01 	sts	0x0125, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    10a0:	96 01       	movw	r18, r12
    10a2:	26 19       	sub	r18, r6
    10a4:	37 09       	sbc	r19, r7
    10a6:	c5 01       	movw	r24, r10
    10a8:	8e 19       	sub	r24, r14
    10aa:	9f 09       	sbc	r25, r15
    10ac:	22 9f       	mul	r18, r18
    10ae:	b0 01       	movw	r22, r0
    10b0:	23 9f       	mul	r18, r19
    10b2:	70 0d       	add	r23, r0
    10b4:	70 0d       	add	r23, r0
    10b6:	11 24       	eor	r1, r1
    10b8:	88 9f       	mul	r24, r24
    10ba:	90 01       	movw	r18, r0
    10bc:	89 9f       	mul	r24, r25
    10be:	30 0d       	add	r19, r0
    10c0:	30 0d       	add	r19, r0
    10c2:	11 24       	eor	r1, r1
    10c4:	62 0f       	add	r22, r18
    10c6:	73 1f       	adc	r23, r19
    10c8:	88 27       	eor	r24, r24
    10ca:	77 fd       	sbrc	r23, 7
    10cc:	80 95       	com	r24
    10ce:	98 2f       	mov	r25, r24
    10d0:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    10d4:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
    10d8:	60 93 26 01 	sts	0x0126, r22
    10dc:	70 93 27 01 	sts	0x0127, r23
    10e0:	80 93 28 01 	sts	0x0128, r24
    10e4:	90 93 29 01 	sts	0x0129, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    10e8:	c4 18       	sub	r12, r4
    10ea:	d5 08       	sbc	r13, r5
    10ec:	a2 18       	sub	r10, r2
    10ee:	b3 08       	sbc	r11, r3
    10f0:	cc 9c       	mul	r12, r12
    10f2:	b0 01       	movw	r22, r0
    10f4:	cd 9c       	mul	r12, r13
    10f6:	70 0d       	add	r23, r0
    10f8:	70 0d       	add	r23, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	aa 9c       	mul	r10, r10
    10fe:	c0 01       	movw	r24, r0
    1100:	ab 9c       	mul	r10, r11
    1102:	90 0d       	add	r25, r0
    1104:	90 0d       	add	r25, r0
    1106:	11 24       	eor	r1, r1
    1108:	68 0f       	add	r22, r24
    110a:	79 1f       	adc	r23, r25
    110c:	88 27       	eor	r24, r24
    110e:	77 fd       	sbrc	r23, 7
    1110:	80 95       	com	r24
    1112:	98 2f       	mov	r25, r24
    1114:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1118:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
    111c:	60 93 2a 01 	sts	0x012A, r22
    1120:	70 93 2b 01 	sts	0x012B, r23
    1124:	80 93 2c 01 	sts	0x012C, r24
    1128:	90 93 2d 01 	sts	0x012D, r25
    112c:	06 e1       	ldi	r16, 0x16	; 22
    112e:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    1130:	e1 2c       	mov	r14, r1
    1132:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    1134:	1e 82       	std	Y+6, r1	; 0x06
    1136:	1d 82       	std	Y+5, r1	; 0x05
    1138:	1a 82       	std	Y+2, r1	; 0x02
    113a:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    113c:	21 2c       	mov	r2, r1
    113e:	68 94       	set
    1140:	33 24       	eor	r3, r3
    1142:	36 f8       	bld	r3, 6
    1144:	0f 2e       	mov	r0, r31
    1146:	fc e1       	ldi	r31, 0x1C	; 28
    1148:	4f 2e       	mov	r4, r31
    114a:	f0 2d       	mov	r31, r0
    114c:	0f 2e       	mov	r0, r31
    114e:	f6 e4       	ldi	r31, 0x46	; 70
    1150:	5f 2e       	mov	r5, r31
    1152:	f0 2d       	mov	r31, r0
    1154:	61 2c       	mov	r6, r1
    1156:	71 2c       	mov	r7, r1
    1158:	81 2c       	mov	r8, r1
    115a:	91 2c       	mov	r9, r1
    115c:	37 c8       	rjmp	.-3986   	; 0x1cc <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    115e:	28 96       	adiw	r28, 0x08	; 8
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	df 90       	pop	r13
    1178:	cf 90       	pop	r12
    117a:	bf 90       	pop	r11
    117c:	af 90       	pop	r10
    117e:	9f 90       	pop	r9
    1180:	8f 90       	pop	r8
    1182:	7f 90       	pop	r7
    1184:	6f 90       	pop	r6
    1186:	5f 90       	pop	r5
    1188:	4f 90       	pop	r4
    118a:	3f 90       	pop	r3
    118c:	2f 90       	pop	r2
    118e:	08 95       	ret

00001190 <set_timer1>:
}

void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    1190:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    1192:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    1194:	84 ef       	ldi	r24, 0xF4	; 244
    1196:	91 e0       	ldi	r25, 0x01	; 1
    1198:	90 93 89 00 	sts	0x0089, r25
    119c:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
    11a0:	10 92 8b 00 	sts	0x008B, r1
    11a4:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    11a8:	10 92 8d 00 	sts	0x008D, r1
    11ac:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    11b0:	a1 e8       	ldi	r26, 0x81	; 129
    11b2:	b0 e0       	ldi	r27, 0x00	; 0
    11b4:	8c 91       	ld	r24, X
    11b6:	80 61       	ori	r24, 0x10	; 16
    11b8:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    11ba:	8c 91       	ld	r24, X
    11bc:	88 60       	ori	r24, 0x08	; 8
    11be:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    11c0:	e0 e8       	ldi	r30, 0x80	; 128
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	82 60       	ori	r24, 0x02	; 2
    11c8:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    11ca:	80 81       	ld	r24, Z
    11cc:	81 60       	ori	r24, 0x01	; 1
    11ce:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    11d0:	80 81       	ld	r24, Z
    11d2:	80 62       	ori	r24, 0x20	; 32
    11d4:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    11d6:	80 81       	ld	r24, Z
    11d8:	8f 7e       	andi	r24, 0xEF	; 239
    11da:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    11dc:	80 81       	ld	r24, Z
    11de:	88 60       	ori	r24, 0x08	; 8
    11e0:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    11e2:	80 81       	ld	r24, Z
    11e4:	8b 7f       	andi	r24, 0xFB	; 251
    11e6:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    11e8:	8c 91       	ld	r24, X
    11ea:	8b 7f       	andi	r24, 0xFB	; 251
    11ec:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    11ee:	8c 91       	ld	r24, X
    11f0:	8d 7f       	andi	r24, 0xFD	; 253
    11f2:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    11f4:	8c 91       	ld	r24, X
    11f6:	81 60       	ori	r24, 0x01	; 1
    11f8:	8c 93       	st	X, r24
    11fa:	08 95       	ret

000011fc <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
    11fc:	83 ec       	ldi	r24, 0xC3	; 195
    11fe:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    1202:	e3 ec       	ldi	r30, 0xC3	; 195
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	80 81       	ld	r24, Z
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    120c:	80 81       	ld	r24, Z
    120e:	8e 7f       	andi	r24, 0xFE	; 254
    1210:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    1212:	e2 e7       	ldi	r30, 0x72	; 114
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 81       	ld	r24, Z
    1218:	84 60       	ori	r24, 0x04	; 4
    121a:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
    121c:	e1 ec       	ldi	r30, 0xC1	; 193
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	80 81       	ld	r24, Z
    1222:	88 60       	ori	r24, 0x08	; 8
    1224:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
    1226:	80 81       	ld	r24, Z
    1228:	84 60       	ori	r24, 0x04	; 4
    122a:	80 83       	st	Z, r24
    set(TCCR4B,CS41);
    122c:	80 81       	ld	r24, Z
    122e:	82 60       	ori	r24, 0x02	; 2
    1230:	80 83       	st	Z, r24
    clear(TCCR4B,CS40);
    1232:	80 81       	ld	r24, Z
    1234:	8e 7f       	andi	r24, 0xFE	; 254
    1236:	80 83       	st	Z, r24
    1238:	08 95       	ret

0000123a <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    123a:	ec e7       	ldi	r30, 0x7C	; 124
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	8f 77       	andi	r24, 0x7F	; 127
    1242:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    124a:	aa e7       	ldi	r26, 0x7A	; 122
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	8c 91       	ld	r24, X
    1250:	84 60       	ori	r24, 0x04	; 4
    1252:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    1254:	8c 91       	ld	r24, X
    1256:	82 60       	ori	r24, 0x02	; 2
    1258:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    125a:	8c 91       	ld	r24, X
    125c:	81 60       	ori	r24, 0x01	; 1
    125e:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    1260:	ee e7       	ldi	r30, 0x7E	; 126
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	81 60       	ori	r24, 0x01	; 1
    1268:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    126a:	80 81       	ld	r24, Z
    126c:	82 60       	ori	r24, 0x02	; 2
    126e:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    1270:	80 81       	ld	r24, Z
    1272:	80 61       	ori	r24, 0x10	; 16
    1274:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    1276:	80 81       	ld	r24, Z
    1278:	80 62       	ori	r24, 0x20	; 32
    127a:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    127c:	80 81       	ld	r24, Z
    127e:	80 64       	ori	r24, 0x40	; 64
    1280:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    1282:	80 81       	ld	r24, Z
    1284:	80 68       	ori	r24, 0x80	; 128
    1286:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    1288:	ed e7       	ldi	r30, 0x7D	; 125
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	81 60       	ori	r24, 0x01	; 1
    1290:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    1292:	80 81       	ld	r24, Z
    1294:	82 60       	ori	r24, 0x02	; 2
    1296:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    1298:	8c 91       	ld	r24, X
    129a:	80 62       	ori	r24, 0x20	; 32
    129c:	8c 93       	st	X, r24
    129e:	08 95       	ret

000012a0 <init_ports>:
}

void init_ports(void)
{
    //B0 and B1 as outputs
    set(DDRB,0);
    12a0:	20 9a       	sbi	0x04, 0	; 4
    set(DDRB,1);
    12a2:	21 9a       	sbi	0x04, 1	; 4
    set(PORTB,0);
    12a4:	28 9a       	sbi	0x05, 0	; 5
    clear(PORTB,1);
    12a6:	29 98       	cbi	0x05, 1	; 5
    
    //Set B2 as input
    clear(DDRB,2);
    12a8:	22 98       	cbi	0x04, 2	; 4
    12aa:	08 95       	ret

000012ac <stop_motor>:
}


void stop_motor(void)
{
    OCR1B = 0;
    12ac:	10 92 8b 00 	sts	0x008B, r1
    12b0:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    12b4:	10 92 8d 00 	sts	0x008D, r1
    12b8:	10 92 8c 00 	sts	0x008C, r1
    12bc:	08 95       	ret

000012be <turn_right>:
}

void turn_right(void)
{
    set(PORTB,0);
    12be:	28 9a       	sbi	0x05, 0	; 5
    set(PORTB,1);
    12c0:	29 9a       	sbi	0x05, 1	; 5
	OCR1B = PWM_SPEED_TURN_RGHT;
    12c2:	88 e6       	ldi	r24, 0x68	; 104
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	90 93 8b 00 	sts	0x008B, r25
    12ca:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    12ce:	8c e7       	ldi	r24, 0x7C	; 124
    12d0:	91 e0       	ldi	r25, 0x01	; 1
    12d2:	90 93 8d 00 	sts	0x008D, r25
    12d6:	80 93 8c 00 	sts	0x008C, r24
    12da:	08 95       	ret

000012dc <turn_left>:
	//m_green(OFF);
}

void turn_left(void)
{
    clear(PORTB,0);
    12dc:	28 98       	cbi	0x05, 0	; 5
    clear(PORTB,1);
    12de:	29 98       	cbi	0x05, 1	; 5
    OCR1B = PWM_SPEED_TURN_RGHT;
    12e0:	88 e6       	ldi	r24, 0x68	; 104
    12e2:	91 e0       	ldi	r25, 0x01	; 1
    12e4:	90 93 8b 00 	sts	0x008B, r25
    12e8:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    12ec:	8c e7       	ldi	r24, 0x7C	; 124
    12ee:	91 e0       	ldi	r25, 0x01	; 1
    12f0:	90 93 8d 00 	sts	0x008D, r25
    12f4:	80 93 8c 00 	sts	0x008C, r24
    12f8:	08 95       	ret

000012fa <go_fwd>:
	//m_green(ON);
}

void go_fwd(void)
{
    clear(PORTB,0);
    12fa:	28 98       	cbi	0x05, 0	; 5
    set(PORTB,1);
    12fc:	29 9a       	sbi	0x05, 1	; 5
    OCR1B = PWM_SPEED_FWD_RGHT;
    12fe:	80 e7       	ldi	r24, 0x70	; 112
    1300:	91 e0       	ldi	r25, 0x01	; 1
    1302:	90 93 8b 00 	sts	0x008B, r25
    1306:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_FWD_LFT;
    130a:	83 e8       	ldi	r24, 0x83	; 131
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	90 93 8d 00 	sts	0x008D, r25
    1312:	80 93 8c 00 	sts	0x008C, r24
    1316:	08 95       	ret

00001318 <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    1318:	cf 93       	push	r28
    131a:	df 93       	push	r29
    131c:	cd b7       	in	r28, 0x3d	; 61
    131e:	de b7       	in	r29, 0x3e	; 62
    1320:	ec 97       	sbiw	r28, 0x3c	; 60
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    132c:	1a 82       	std	Y+2, r1	; 0x02
    132e:	19 82       	std	Y+1, r1	; 0x01
    1330:	1c 82       	std	Y+4, r1	; 0x04
    1332:	1b 82       	std	Y+3, r1	; 0x03
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
    1334:	fe 01       	movw	r30, r28
    1336:	35 96       	adiw	r30, 0x05	; 5
    1338:	8a e0       	ldi	r24, 0x0A	; 10
    133a:	df 01       	movw	r26, r30
    133c:	1d 92       	st	X+, r1
    133e:	8a 95       	dec	r24
    1340:	e9 f7       	brne	.-6      	; 0x133c <main+0x24>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0, theta_robot = 0;
    1342:	18 a6       	std	Y+40, r1	; 0x28
    1344:	1f a2       	std	Y+39, r1	; 0x27
    1346:	1a a6       	std	Y+42, r1	; 0x2a
    1348:	19 a6       	std	Y+41, r1	; 0x29
    134a:	1c a6       	std	Y+44, r1	; 0x2c
    134c:	1b a6       	std	Y+43, r1	; 0x2b
    div_t aux_conversion;
    
    //Set the clock system prescaler
    m_clockdivide(N_CLOCK);
    134e:	e1 e6       	ldi	r30, 0x61	; 97
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 e8       	ldi	r24, 0x80	; 128
    1354:	80 83       	st	Z, r24
    1356:	10 82       	st	Z, r1
    
    //Turn off the LEDs
    m_green(OFF);
    1358:	6a 9a       	sbi	0x0d, 2	; 13
    135a:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);
    135c:	6e 9a       	sbi	0x0d, 6	; 13
    135e:	76 9a       	sbi	0x0e, 6	; 14
    
    m_red(ON);
    1360:	6e 9a       	sbi	0x0d, 6	; 13
    1362:	76 98       	cbi	0x0e, 6	; 14
    //Initialize bus
    m_bus_init();
    1364:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <m_bus_init>
    
    //Initialize ports
    init_ports();
    1368:	0e 94 50 09 	call	0x12a0	; 0x12a0 <init_ports>
    
    //Set timer 1 for motor
    set_timer1();
    136c:	0e 94 c8 08 	call	0x1190	; 0x1190 <set_timer1>
    
    //Set timer 3 for solenoid
    //set_timer3();
    
    //Set timer to every 0.1 s (10 Hz)
    set_timer4();
    1370:	0e 94 fe 08 	call	0x11fc	; 0x11fc <set_timer4>
    
    //Set the ADC
    init_analog();
    1374:	0e 94 1d 09 	call	0x123a	; 0x123a <init_analog>
    
    //Initialize wii camera
    char aux = 0;
    while(!aux)
    {
        aux = m_wii_open();
    1378:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <m_wii_open>
    //Set the ADC
    init_analog();
    
    //Initialize wii camera
    char aux = 0;
    while(!aux)
    137c:	88 23       	and	r24, r24
    137e:	e1 f3       	breq	.-8      	; 0x1378 <main+0x60>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1380:	bf e3       	ldi	r27, 0x3F	; 63
    1382:	ed e0       	ldi	r30, 0x0D	; 13
    1384:	f3 e0       	ldi	r31, 0x03	; 3
    1386:	b1 50       	subi	r27, 0x01	; 1
    1388:	e0 40       	sbci	r30, 0x00	; 0
    138a:	f0 40       	sbci	r31, 0x00	; 0
    138c:	e1 f7       	brne	.-8      	; 0x1386 <main+0x6e>
    138e:	00 c0       	rjmp	.+0      	; 0x1390 <main+0x78>
    1390:	00 00       	nop
    {
        aux = m_wii_open();
    }
    
    m_wait(1000);
    m_red(OFF);
    1392:	6e 9a       	sbi	0x0d, 6	; 13
    1394:	76 9a       	sbi	0x0e, 6	; 14
    
    //Open the channel
    m_rf_open(CHANNEL,ALEX_ADDRESS,PACKET_LENGTH_SYSTEM);
    1396:	4a e0       	ldi	r20, 0x0A	; 10
    1398:	62 e4       	ldi	r22, 0x42	; 66
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <m_rf_open>
	
    //Enable interruptions
    sei();
    13a0:	78 94       	sei
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    13a2:	1f aa       	std	Y+55, r1	; 0x37
    13a4:	18 ae       	std	Y+56, r1	; 0x38
    13a6:	19 ae       	std	Y+57, r1	; 0x39
    13a8:	1a ae       	std	Y+58, r1	; 0x3a
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
    13aa:	1c ae       	std	Y+60, r1	; 0x3c
    13ac:	1b ae       	std	Y+59, r1	; 0x3b
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    13ae:	1e aa       	std	Y+54, r1	; 0x36
    13b0:	1d aa       	std	Y+53, r1	; 0x35
int main(void)
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    13b2:	61 2c       	mov	r6, r1
    13b4:	71 2c       	mov	r7, r1
        
        //If data received correctly
        if (wii_OK)
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    13b6:	9e 01       	movw	r18, r28
    13b8:	2d 5f       	subi	r18, 0xFD	; 253
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	3e a7       	std	Y+46, r19	; 0x2e
    13be:	2d a7       	std	Y+45, r18	; 0x2d
    13c0:	ce 01       	movw	r24, r28
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	98 ab       	std	Y+48, r25	; 0x30
    13c6:	8f a7       	std	Y+47, r24	; 0x2f
    13c8:	de 01       	movw	r26, r28
    13ca:	9b 96       	adiw	r26, 0x2b	; 43
    13cc:	ba ab       	std	Y+50, r27	; 0x32
    13ce:	a9 ab       	std	Y+49, r26	; 0x31
    13d0:	fe 01       	movw	r30, r28
    13d2:	b9 96       	adiw	r30, 0x29	; 41
    13d4:	fc ab       	std	Y+52, r31	; 0x34
    13d6:	eb ab       	std	Y+51, r30	; 0x33
    13d8:	14 c0       	rjmp	.+40     	; 0x1402 <main+0xea>
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
                        status_go_to_goal = 2;
    13da:	68 94       	set
    13dc:	66 24       	eor	r6, r6
    13de:	61 f8       	bld	r6, 1
    13e0:	71 2c       	mov	r7, r1
    13e2:	0f c0       	rjmp	.+30     	; 0x1402 <main+0xea>
                    }
                }else if (status_go_to_goal == 2)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 3;
    13e4:	0f 2e       	mov	r0, r31
    13e6:	f3 e0       	ldi	r31, 0x03	; 3
    13e8:	6f 2e       	mov	r6, r31
    13ea:	71 2c       	mov	r7, r1
    13ec:	f0 2d       	mov	r31, r0
    13ee:	09 c0       	rjmp	.+18     	; 0x1402 <main+0xea>
                    else
                    {
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
                            status_go_to_goal = 0;
    13f0:	61 2c       	mov	r6, r1
    13f2:	71 2c       	mov	r7, r1
    13f4:	06 c0       	rjmp	.+12     	; 0x1402 <main+0xea>
    13f6:	61 2c       	mov	r6, r1
    13f8:	71 2c       	mov	r7, r1
    13fa:	03 c0       	rjmp	.+6      	; 0x1402 <main+0xea>
                
                if (status_go_to_goal == 0)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 1;
    13fc:	66 24       	eor	r6, r6
    13fe:	63 94       	inc	r6
    1400:	71 2c       	mov	r7, r1
    //Main loop
    while (1)
    {
        //LOCALIZATION CODE
        //Get the blobs
        cli();
    1402:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);
    1404:	ce 01       	movw	r24, r28
    1406:	0f 96       	adiw	r24, 0x0f	; 15
    1408:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <m_wii_read>
        sei();
    140c:	78 94       	sei
        
        //If data received correctly
        if (wii_OK)
    140e:	88 23       	and	r24, r24
    1410:	71 f1       	breq	.+92     	; 0x146e <main+0x156>
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1412:	ab a0       	ldd	r10, Y+35	; 0x23
    1414:	bc a0       	ldd	r11, Y+36	; 0x24
    1416:	cd 8c       	ldd	r12, Y+29	; 0x1d
    1418:	de 8c       	ldd	r13, Y+30	; 0x1e
    141a:	ef 88       	ldd	r14, Y+23	; 0x17
    141c:	f8 8c       	ldd	r15, Y+24	; 0x18
    141e:	09 89       	ldd	r16, Y+17	; 0x11
    1420:	1a 89       	ldd	r17, Y+18	; 0x12
    1422:	29 a1       	ldd	r18, Y+33	; 0x21
    1424:	3a a1       	ldd	r19, Y+34	; 0x22
    1426:	4b 8d       	ldd	r20, Y+27	; 0x1b
    1428:	5c 8d       	ldd	r21, Y+28	; 0x1c
    142a:	6d 89       	ldd	r22, Y+21	; 0x15
    142c:	7e 89       	ldd	r23, Y+22	; 0x16
    142e:	fe a5       	ldd	r31, Y+46	; 0x2e
    1430:	ff 93       	push	r31
    1432:	8d a5       	ldd	r24, Y+45	; 0x2d
    1434:	8f 93       	push	r24
    1436:	98 a9       	ldd	r25, Y+48	; 0x30
    1438:	9f 93       	push	r25
    143a:	af a5       	ldd	r26, Y+47	; 0x2f
    143c:	af 93       	push	r26
    143e:	ba a9       	ldd	r27, Y+50	; 0x32
    1440:	bf 93       	push	r27
    1442:	e9 a9       	ldd	r30, Y+49	; 0x31
    1444:	ef 93       	push	r30
    1446:	fc a9       	ldd	r31, Y+52	; 0x34
    1448:	ff 93       	push	r31
    144a:	8b a9       	ldd	r24, Y+51	; 0x33
    144c:	8f 93       	push	r24
    144e:	0f 2e       	mov	r0, r31
    1450:	f7 e2       	ldi	r31, 0x27	; 39
    1452:	8f 2e       	mov	r8, r31
    1454:	91 2c       	mov	r9, r1
    1456:	f0 2d       	mov	r31, r0
    1458:	8c 0e       	add	r8, r28
    145a:	9d 1e       	adc	r9, r29
    145c:	8f 85       	ldd	r24, Y+15	; 0x0f
    145e:	98 89       	ldd	r25, Y+16	; 0x10
    1460:	0e 94 9b 00 	call	0x136	; 0x136 <localize>
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	de bf       	out	0x3e, r29	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	cd bf       	out	0x3d, r28	; 61
         }
         */
        
        
        //SEND COMMANDS
        if (flag_timer == 1)
    146e:	80 91 4c 01 	lds	r24, 0x014C
    1472:	90 91 4d 01 	lds	r25, 0x014D
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	89 f4       	brne	.+34     	; 0x149c <main+0x184>
        {
			//Create the packet to send to system
			send_buffer[0] = ALEX_ADDRESS;
    147a:	b2 e4       	ldi	r27, 0x42	; 66
    147c:	bd 83       	std	Y+5, r27	; 0x05
			send_buffer[1] = x_robot;
    147e:	8f a1       	ldd	r24, Y+39	; 0x27
    1480:	8e 83       	std	Y+6, r24	; 0x06
			send_buffer[2] = y_robot;
    1482:	89 a5       	ldd	r24, Y+41	; 0x29
    1484:	8f 83       	std	Y+7, r24	; 0x07
           
            m_rf_send(SEN_ADDRESS,send_buffer,PACKET_LENGTH_SYSTEM);
    1486:	4a e0       	ldi	r20, 0x0A	; 10
    1488:	be 01       	movw	r22, r28
    148a:	6b 5f       	subi	r22, 0xFB	; 251
    148c:	7f 4f       	sbci	r23, 0xFF	; 255
    148e:	8a ed       	ldi	r24, 0xDA	; 218
    1490:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <m_rf_send>
            
            //Reset flag
            flag_timer = 0;
    1494:	10 92 4d 01 	sts	0x014D, r1
    1498:	10 92 4c 01 	sts	0x014C, r1
            //m_green(OFF);
        }
		
        //STATE COMMANDS
        switch (state)
    149c:	80 91 4a 01 	lds	r24, 0x014A
    14a0:	90 91 4b 01 	lds	r25, 0x014B
    14a4:	82 30       	cpi	r24, 0x02	; 2
    14a6:	91 05       	cpc	r25, r1
    14a8:	09 f4       	brne	.+2      	; 0x14ac <main+0x194>
    14aa:	bc c1       	rjmp	.+888    	; 0x1824 <main+0x50c>
    14ac:	34 f4       	brge	.+12     	; 0x14ba <main+0x1a2>
    14ae:	00 97       	sbiw	r24, 0x00	; 0
    14b0:	81 f0       	breq	.+32     	; 0x14d2 <main+0x1ba>
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <main+0x1a0>
    14b6:	8c c2       	rjmp	.+1304   	; 0x19d0 <main+0x6b8>
    14b8:	20 c0       	rjmp	.+64     	; 0x14fa <main+0x1e2>
    14ba:	86 31       	cpi	r24, 0x16	; 22
    14bc:	91 05       	cpc	r25, r1
    14be:	09 f4       	brne	.+2      	; 0x14c2 <main+0x1aa>
    14c0:	7b c2       	rjmp	.+1270   	; 0x19b8 <main+0x6a0>
    14c2:	83 36       	cpi	r24, 0x63	; 99
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <main+0x1b2>
    14c8:	15 c2       	rjmp	.+1066   	; 0x18f4 <main+0x5dc>
    14ca:	45 97       	sbiw	r24, 0x15	; 21
    14cc:	09 f0       	breq	.+2      	; 0x14d0 <main+0x1b8>
    14ce:	80 c2       	rjmp	.+1280   	; 0x19d0 <main+0x6b8>
    14d0:	7c c2       	rjmp	.+1272   	; 0x19ca <main+0x6b2>
        {
            case INITIAL_STATE:
                if (check(PINB,2))
    14d2:	1a 9b       	sbis	0x03, 2	; 3
    14d4:	05 c0       	rjmp	.+10     	; 0x14e0 <main+0x1c8>
                {
                    goal_pos_x = GOAL_A_POS_X;
    14d6:	ed e8       	ldi	r30, 0x8D	; 141
    14d8:	ff ef       	ldi	r31, 0xFF	; 255
    14da:	fe ab       	std	Y+54, r31	; 0x36
    14dc:	ed ab       	std	Y+53, r30	; 0x35
    14de:	04 c0       	rjmp	.+8      	; 0x14e8 <main+0x1d0>
                    goal_pos_y = GOAL_A_POS_Y;
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
    14e0:	23 e7       	ldi	r18, 0x73	; 115
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	3e ab       	std	Y+54, r19	; 0x36
    14e6:	2d ab       	std	Y+53, r18	; 0x35
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                state = GO_TO_GOAL_CURVED;
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	90 93 4b 01 	sts	0x014B, r25
    14f0:	80 93 4a 01 	sts	0x014A, r24
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    14f4:	61 2c       	mov	r6, r1
    14f6:	71 2c       	mov	r7, r1
                state = GO_TO_GOAL_CURVED;
                break;
    14f8:	84 cf       	rjmp	.-248    	; 0x1402 <main+0xea>
                
            case GO_TO_GOAL:
                if (status_go_to_goal == 0)
    14fa:	61 14       	cp	r6, r1
    14fc:	71 04       	cpc	r7, r1
    14fe:	91 f5       	brne	.+100    	; 0x1564 <main+0x24c>
                {
                    dir_x = goal_pos_x-x_robot;
                    dir_y = goal_pos_y-y_robot;
    1500:	69 a5       	ldd	r22, Y+41	; 0x29
    1502:	7a a5       	ldd	r23, Y+42	; 0x2a
    1504:	71 95       	neg	r23
    1506:	61 95       	neg	r22
    1508:	71 09       	sbc	r23, r1
    150a:	88 27       	eor	r24, r24
    150c:	77 fd       	sbrc	r23, 7
    150e:	80 95       	com	r24
    1510:	98 2f       	mov	r25, r24
    1512:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1516:	6b 01       	movw	r12, r22
    1518:	7c 01       	movw	r14, r24
                break;
                
            case GO_TO_GOAL:
                if (status_go_to_goal == 0)
                {
                    dir_x = goal_pos_x-x_robot;
    151a:	8f a1       	ldd	r24, Y+39	; 0x27
    151c:	98 a5       	ldd	r25, Y+40	; 0x28
    151e:	6d a9       	ldd	r22, Y+53	; 0x35
    1520:	7e a9       	ldd	r23, Y+54	; 0x36
    1522:	68 1b       	sub	r22, r24
    1524:	79 0b       	sbc	r23, r25
    1526:	88 27       	eor	r24, r24
    1528:	77 fd       	sbrc	r23, 7
    152a:	80 95       	com	r24
    152c:	98 2f       	mov	r25, r24
    152e:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
                    dir_y = goal_pos_y-y_robot;
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1532:	90 58       	subi	r25, 0x80	; 128
    1534:	a7 01       	movw	r20, r14
    1536:	96 01       	movw	r18, r12
    1538:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <atan2>
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	44 e3       	ldi	r20, 0x34	; 52
    1542:	53 e4       	ldi	r21, 0x43	; 67
    1544:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
    1548:	2b ed       	ldi	r18, 0xDB	; 219
    154a:	3f e0       	ldi	r19, 0x0F	; 15
    154c:	49 e4       	ldi	r20, 0x49	; 73
    154e:	50 e4       	ldi	r21, 0x40	; 64
    1550:	0e 94 2d 11 	call	0x225a	; 0x225a <__divsf3>
    1554:	6f ab       	std	Y+55, r22	; 0x37
    1556:	78 af       	std	Y+56, r23	; 0x38
    1558:	89 af       	std	Y+57, r24	; 0x39
    155a:	9a af       	std	Y+58, r25	; 0x3a
                    
                    status_go_to_goal = 1;
    155c:	66 24       	eor	r6, r6
    155e:	63 94       	inc	r6
    1560:	71 2c       	mov	r7, r1
    1562:	4f cf       	rjmp	.-354    	; 0x1402 <main+0xea>
                }else if (status_go_to_goal == 1)
    1564:	91 e0       	ldi	r25, 0x01	; 1
    1566:	69 16       	cp	r6, r25
    1568:	71 04       	cpc	r7, r1
    156a:	09 f0       	breq	.+2      	; 0x156e <main+0x256>
    156c:	e4 c0       	rjmp	.+456    	; 0x1736 <main+0x41e>
                {
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
    156e:	69 a5       	ldd	r22, Y+41	; 0x29
    1570:	7a a5       	ldd	r23, Y+42	; 0x2a
    1572:	71 95       	neg	r23
    1574:	61 95       	neg	r22
    1576:	71 09       	sbc	r23, r1
    1578:	88 27       	eor	r24, r24
    157a:	77 fd       	sbrc	r23, 7
    157c:	80 95       	com	r24
    157e:	98 2f       	mov	r25, r24
    1580:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1584:	6b 01       	movw	r12, r22
    1586:	7c 01       	movw	r14, r24
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
                    
                    status_go_to_goal = 1;
                }else if (status_go_to_goal == 1)
                {
					dir_x = goal_pos_x-x_robot;
    1588:	8f a1       	ldd	r24, Y+39	; 0x27
    158a:	98 a5       	ldd	r25, Y+40	; 0x28
    158c:	6d a9       	ldd	r22, Y+53	; 0x35
    158e:	7e a9       	ldd	r23, Y+54	; 0x36
    1590:	68 1b       	sub	r22, r24
    1592:	79 0b       	sbc	r23, r25
    1594:	88 27       	eor	r24, r24
    1596:	77 fd       	sbrc	r23, 7
    1598:	80 95       	com	r24
    159a:	98 2f       	mov	r25, r24
    159c:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    15a0:	90 58       	subi	r25, 0x80	; 128
    15a2:	a7 01       	movw	r20, r14
    15a4:	96 01       	movw	r18, r12
    15a6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <atan2>
    15aa:	20 e0       	ldi	r18, 0x00	; 0
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	44 e3       	ldi	r20, 0x34	; 52
    15b0:	53 e4       	ldi	r21, 0x43	; 67
    15b2:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
    15b6:	2b ed       	ldi	r18, 0xDB	; 219
    15b8:	3f e0       	ldi	r19, 0x0F	; 15
    15ba:	49 e4       	ldi	r20, 0x49	; 73
    15bc:	50 e4       	ldi	r21, 0x40	; 64
    15be:	0e 94 2d 11 	call	0x225a	; 0x225a <__divsf3>
    15c2:	b6 2e       	mov	r11, r22
    15c4:	a7 2e       	mov	r10, r23
    15c6:	98 2e       	mov	r9, r24
    15c8:	89 2e       	mov	r8, r25
    15ca:	6f ab       	std	Y+55, r22	; 0x37
    15cc:	78 af       	std	Y+56, r23	; 0x38
    15ce:	89 af       	std	Y+57, r24	; 0x39
    15d0:	9a af       	std	Y+58, r25	; 0x3a
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
    15d2:	0b a5       	ldd	r16, Y+43	; 0x2b
    15d4:	1c a5       	ldd	r17, Y+44	; 0x2c
    15d6:	b8 01       	movw	r22, r16
    15d8:	88 27       	eor	r24, r24
    15da:	77 fd       	sbrc	r23, 7
    15dc:	80 95       	com	r24
    15de:	98 2f       	mov	r25, r24
    15e0:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    15e4:	6b 01       	movw	r12, r22
    15e6:	7c 01       	movw	r14, r24
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 ee       	ldi	r20, 0xE0	; 224
    15ee:	50 e4       	ldi	r21, 0x40	; 64
    15f0:	6b 2d       	mov	r22, r11
    15f2:	7a 2d       	mov	r23, r10
    15f4:	89 2d       	mov	r24, r9
    15f6:	98 2d       	mov	r25, r8
    15f8:	0e 94 5f 10 	call	0x20be	; 0x20be <__subsf3>
    15fc:	9b 01       	movw	r18, r22
    15fe:	ac 01       	movw	r20, r24
    1600:	c7 01       	movw	r24, r14
    1602:	b6 01       	movw	r22, r12
    1604:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
    1608:	88 23       	and	r24, r24
    160a:	9c f0       	brlt	.+38     	; 0x1632 <main+0x31a>
    160c:	20 e0       	ldi	r18, 0x00	; 0
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	40 ee       	ldi	r20, 0xE0	; 224
    1612:	50 e4       	ldi	r21, 0x40	; 64
    1614:	6b 2d       	mov	r22, r11
    1616:	7a 2d       	mov	r23, r10
    1618:	89 2d       	mov	r24, r9
    161a:	98 2d       	mov	r25, r8
    161c:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
    1620:	9b 01       	movw	r18, r22
    1622:	ac 01       	movw	r20, r24
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    162c:	18 16       	cp	r1, r24
    162e:	0c f0       	brlt	.+2      	; 0x1632 <main+0x31a>
    1630:	d4 ce       	rjmp	.-600    	; 0x13da <main+0xc2>
                        status_go_to_goal = 2;
                    else
                    {
                        float angle_dir_aux = dir_angle-180;
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	44 e3       	ldi	r20, 0x34	; 52
    1638:	53 e4       	ldi	r21, 0x43	; 67
    163a:	6b 2d       	mov	r22, r11
    163c:	7a 2d       	mov	r23, r10
    163e:	89 2d       	mov	r24, r9
    1640:	98 2d       	mov	r25, r8
    1642:	0e 94 5f 10 	call	0x20be	; 0x20be <__subsf3>
    1646:	56 2e       	mov	r5, r22
    1648:	47 2e       	mov	r4, r23
    164a:	38 2e       	mov	r3, r24
    164c:	29 2e       	mov	r2, r25
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	44 e3       	ldi	r20, 0x34	; 52
    1654:	53 ec       	ldi	r21, 0xC3	; 195
    1656:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    165a:	88 23       	and	r24, r24
    165c:	0c f0       	brlt	.+2      	; 0x1660 <main+0x348>
    165e:	cb c1       	rjmp	.+918    	; 0x19f6 <main+0x6de>
                        {
                            angle_dir_aux += 360;
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	44 eb       	ldi	r20, 0xB4	; 180
    1666:	53 e4       	ldi	r21, 0x43	; 67
    1668:	65 2d       	mov	r22, r5
    166a:	74 2d       	mov	r23, r4
    166c:	83 2d       	mov	r24, r3
    166e:	92 2d       	mov	r25, r2
    1670:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
    1674:	26 2e       	mov	r2, r22
    1676:	37 2e       	mov	r3, r23
    1678:	48 2e       	mov	r4, r24
    167a:	59 2e       	mov	r5, r25
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
						{
                            turn_right();
							commands_var = 2;
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    167c:	a7 01       	movw	r20, r14
    167e:	96 01       	movw	r18, r12
    1680:	6b 2d       	mov	r22, r11
    1682:	7a 2d       	mov	r23, r10
    1684:	89 2d       	mov	r24, r9
    1686:	98 2d       	mov	r25, r8
    1688:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
    168c:	88 23       	and	r24, r24
    168e:	34 f5       	brge	.+76     	; 0x16dc <main+0x3c4>
    1690:	29 c0       	rjmp	.+82     	; 0x16e4 <main+0x3cc>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1692:	a7 01       	movw	r20, r14
    1694:	96 01       	movw	r18, r12
    1696:	6b 2d       	mov	r22, r11
    1698:	7a 2d       	mov	r23, r10
    169a:	89 2d       	mov	r24, r9
    169c:	98 2d       	mov	r25, r8
    169e:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
    16a2:	88 23       	and	r24, r24
    16a4:	1c f0       	brlt	.+6      	; 0x16ac <main+0x394>
						{
                            turn_left();
    16a6:	0e 94 6e 09 	call	0x12dc	; 0x12dc <turn_left>
							commands_var = 1;
    16aa:	ab ce       	rjmp	.-682    	; 0x1402 <main+0xea>
                        }
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    16ac:	25 2d       	mov	r18, r5
    16ae:	34 2d       	mov	r19, r4
    16b0:	43 2d       	mov	r20, r3
    16b2:	52 2d       	mov	r21, r2
    16b4:	c7 01       	movw	r24, r14
    16b6:	b6 01       	movw	r22, r12
    16b8:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    16bc:	88 23       	and	r24, r24
    16be:	5c f0       	brlt	.+22     	; 0x16d6 <main+0x3be>
    16c0:	a7 01       	movw	r20, r14
    16c2:	96 01       	movw	r18, r12
    16c4:	6b 2d       	mov	r22, r11
    16c6:	7a 2d       	mov	r23, r10
    16c8:	89 2d       	mov	r24, r9
    16ca:	98 2d       	mov	r25, r8
    16cc:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    16d0:	88 23       	and	r24, r24
    16d2:	0c f0       	brlt	.+2      	; 0x16d6 <main+0x3be>
    16d4:	96 ce       	rjmp	.-724    	; 0x1402 <main+0xea>
						{
                            turn_right();
    16d6:	0e 94 5f 09 	call	0x12be	; 0x12be <turn_right>
							commands_var = 2;
    16da:	93 ce       	rjmp	.-730    	; 0x1402 <main+0xea>
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    16dc:	0c 34       	cpi	r16, 0x4C	; 76
    16de:	af ef       	ldi	r26, 0xFF	; 255
    16e0:	1a 07       	cpc	r17, r26
    16e2:	6c f4       	brge	.+26     	; 0x16fe <main+0x3e6>
    16e4:	22 2d       	mov	r18, r2
    16e6:	33 2d       	mov	r19, r3
    16e8:	44 2d       	mov	r20, r4
    16ea:	55 2d       	mov	r21, r5
    16ec:	c7 01       	movw	r24, r14
    16ee:	b6 01       	movw	r22, r12
    16f0:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
    16f4:	88 23       	and	r24, r24
    16f6:	34 f0       	brlt	.+12     	; 0x1704 <main+0x3ec>
    16f8:	05 3b       	cpi	r16, 0xB5	; 181
    16fa:	11 05       	cpc	r17, r1
    16fc:	1c f4       	brge	.+6      	; 0x1704 <main+0x3ec>
						{
                            turn_left();
    16fe:	0e 94 6e 09 	call	0x12dc	; 0x12dc <turn_left>
							commands_var = 3;
    1702:	7f ce       	rjmp	.-770    	; 0x1402 <main+0xea>
						}
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    1704:	a7 01       	movw	r20, r14
    1706:	96 01       	movw	r18, r12
    1708:	6b 2d       	mov	r22, r11
    170a:	7a 2d       	mov	r23, r10
    170c:	89 2d       	mov	r24, r9
    170e:	98 2d       	mov	r25, r8
    1710:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    1714:	88 23       	and	r24, r24
    1716:	0c f0       	brlt	.+2      	; 0x171a <main+0x402>
    1718:	74 ce       	rjmp	.-792    	; 0x1402 <main+0xea>
    171a:	22 2d       	mov	r18, r2
    171c:	33 2d       	mov	r19, r3
    171e:	44 2d       	mov	r20, r4
    1720:	55 2d       	mov	r21, r5
    1722:	c7 01       	movw	r24, r14
    1724:	b6 01       	movw	r22, r12
    1726:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    172a:	88 23       	and	r24, r24
    172c:	0c f0       	brlt	.+2      	; 0x1730 <main+0x418>
    172e:	69 ce       	rjmp	.-814    	; 0x1402 <main+0xea>
						{
                            turn_right();
    1730:	0e 94 5f 09 	call	0x12be	; 0x12be <turn_right>
							commands_var = 4;
    1734:	66 ce       	rjmp	.-820    	; 0x1402 <main+0xea>
						}else
							commands_var = 0;
                        
                    }
                }else if (status_go_to_goal == 2)
    1736:	b2 e0       	ldi	r27, 0x02	; 2
    1738:	6b 16       	cp	r6, r27
    173a:	71 04       	cpc	r7, r1
    173c:	09 f0       	breq	.+2      	; 0x1740 <main+0x428>
    173e:	62 c0       	rjmp	.+196    	; 0x1804 <main+0x4ec>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1740:	2f a1       	ldd	r18, Y+39	; 0x27
    1742:	38 a5       	ldd	r19, Y+40	; 0x28
    1744:	ed a9       	ldd	r30, Y+53	; 0x35
    1746:	fe a9       	ldd	r31, Y+54	; 0x36
    1748:	2e 1b       	sub	r18, r30
    174a:	3f 0b       	sbc	r19, r31
    174c:	89 a5       	ldd	r24, Y+41	; 0x29
    174e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1750:	22 9f       	mul	r18, r18
    1752:	b0 01       	movw	r22, r0
    1754:	23 9f       	mul	r18, r19
    1756:	70 0d       	add	r23, r0
    1758:	70 0d       	add	r23, r0
    175a:	11 24       	eor	r1, r1
    175c:	88 9f       	mul	r24, r24
    175e:	90 01       	movw	r18, r0
    1760:	89 9f       	mul	r24, r25
    1762:	30 0d       	add	r19, r0
    1764:	30 0d       	add	r19, r0
    1766:	11 24       	eor	r1, r1
    1768:	62 0f       	add	r22, r18
    176a:	73 1f       	adc	r23, r19
    176c:	88 27       	eor	r24, r24
    176e:	77 fd       	sbrc	r23, 7
    1770:	80 95       	com	r24
    1772:	98 2f       	mov	r25, r24
    1774:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1778:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    177c:	20 e0       	ldi	r18, 0x00	; 0
    177e:	30 e0       	ldi	r19, 0x00	; 0
    1780:	40 e7       	ldi	r20, 0x70	; 112
    1782:	51 e4       	ldi	r21, 0x41	; 65
    1784:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    1788:	88 23       	and	r24, r24
    178a:	0c f4       	brge	.+2      	; 0x178e <main+0x476>
    178c:	2b ce       	rjmp	.-938    	; 0x13e4 <main+0xcc>
                        status_go_to_goal = 3;
                    else
                    {
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
    178e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1790:	7c a5       	ldd	r23, Y+44	; 0x2c
    1792:	88 27       	eor	r24, r24
    1794:	77 fd       	sbrc	r23, 7
    1796:	80 95       	com	r24
    1798:	98 2f       	mov	r25, r24
    179a:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    179e:	6b 01       	movw	r12, r22
    17a0:	7c 01       	movw	r14, r24
    17a2:	20 e0       	ldi	r18, 0x00	; 0
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	40 ee       	ldi	r20, 0xE0	; 224
    17a8:	50 e4       	ldi	r21, 0x40	; 64
    17aa:	bf a9       	ldd	r27, Y+55	; 0x37
    17ac:	a8 ad       	ldd	r26, Y+56	; 0x38
    17ae:	f9 ad       	ldd	r31, Y+57	; 0x39
    17b0:	ea ad       	ldd	r30, Y+58	; 0x3a
    17b2:	6b 2f       	mov	r22, r27
    17b4:	7a 2f       	mov	r23, r26
    17b6:	8f 2f       	mov	r24, r31
    17b8:	9e 2f       	mov	r25, r30
    17ba:	0e 94 5f 10 	call	0x20be	; 0x20be <__subsf3>
    17be:	9b 01       	movw	r18, r22
    17c0:	ac 01       	movw	r20, r24
    17c2:	c7 01       	movw	r24, r14
    17c4:	b6 01       	movw	r22, r12
    17c6:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    17ca:	88 23       	and	r24, r24
    17cc:	0c f4       	brge	.+2      	; 0x17d0 <main+0x4b8>
    17ce:	10 ce       	rjmp	.-992    	; 0x13f0 <main+0xd8>
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 ee       	ldi	r20, 0xE0	; 224
    17d6:	50 e4       	ldi	r21, 0x40	; 64
    17d8:	ff a9       	ldd	r31, Y+55	; 0x37
    17da:	e8 ad       	ldd	r30, Y+56	; 0x38
    17dc:	b9 ad       	ldd	r27, Y+57	; 0x39
    17de:	aa ad       	ldd	r26, Y+58	; 0x3a
    17e0:	6f 2f       	mov	r22, r31
    17e2:	7e 2f       	mov	r23, r30
    17e4:	8b 2f       	mov	r24, r27
    17e6:	9a 2f       	mov	r25, r26
    17e8:	0e 94 60 10 	call	0x20c0	; 0x20c0 <__addsf3>
    17ec:	9b 01       	movw	r18, r22
    17ee:	ac 01       	movw	r20, r24
    17f0:	c7 01       	movw	r24, r14
    17f2:	b6 01       	movw	r22, r12
    17f4:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
    17f8:	18 16       	cp	r1, r24
    17fa:	0c f4       	brge	.+2      	; 0x17fe <main+0x4e6>
    17fc:	fc cd       	rjmp	.-1032   	; 0x13f6 <main+0xde>
                            status_go_to_goal = 0;
                        else
						{
							commands_var = 5;
                            go_fwd();
    17fe:	0e 94 7d 09 	call	0x12fa	; 0x12fa <go_fwd>
    1802:	ff cd       	rjmp	.-1026   	; 0x1402 <main+0xea>
						}
						
                        
                    }
                }
                else if (status_go_to_goal == 3)
    1804:	f3 e0       	ldi	r31, 0x03	; 3
    1806:	6f 16       	cp	r6, r31
    1808:	71 04       	cpc	r7, r1
    180a:	09 f0       	breq	.+2      	; 0x180e <main+0x4f6>
    180c:	fa cd       	rjmp	.-1036   	; 0x1402 <main+0xea>
                {
                    //stop_motor();
                    status_go_to_goal = 4;
                    state = 2;
    180e:	22 e0       	ldi	r18, 0x02	; 2
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	30 93 4b 01 	sts	0x014B, r19
    1816:	20 93 4a 01 	sts	0x014A, r18
                    }
                }
                else if (status_go_to_goal == 3)
                {
                    //stop_motor();
                    status_go_to_goal = 4;
    181a:	68 94       	set
    181c:	66 24       	eor	r6, r6
    181e:	62 f8       	bld	r6, 2
    1820:	71 2c       	mov	r7, r1
    1822:	ef cd       	rjmp	.-1058   	; 0x1402 <main+0xea>
                break;
                
                
            case GO_TO_GOAL_CURVED:
                
                if (status_go_to_goal == 0)
    1824:	61 14       	cp	r6, r1
    1826:	71 04       	cpc	r7, r1
    1828:	09 f0       	breq	.+2      	; 0x182c <main+0x514>
    182a:	54 c0       	rjmp	.+168    	; 0x18d4 <main+0x5bc>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    182c:	0f a1       	ldd	r16, Y+39	; 0x27
    182e:	18 a5       	ldd	r17, Y+40	; 0x28
    1830:	c8 01       	movw	r24, r16
    1832:	ad a9       	ldd	r26, Y+53	; 0x35
    1834:	be a9       	ldd	r27, Y+54	; 0x36
    1836:	8a 1b       	sub	r24, r26
    1838:	9b 0b       	sbc	r25, r27
    183a:	e9 a4       	ldd	r14, Y+41	; 0x29
    183c:	fa a4       	ldd	r15, Y+42	; 0x2a
    183e:	88 9f       	mul	r24, r24
    1840:	b0 01       	movw	r22, r0
    1842:	89 9f       	mul	r24, r25
    1844:	70 0d       	add	r23, r0
    1846:	70 0d       	add	r23, r0
    1848:	11 24       	eor	r1, r1
    184a:	ee 9c       	mul	r14, r14
    184c:	c0 01       	movw	r24, r0
    184e:	ef 9c       	mul	r14, r15
    1850:	90 0d       	add	r25, r0
    1852:	90 0d       	add	r25, r0
    1854:	11 24       	eor	r1, r1
    1856:	68 0f       	add	r22, r24
    1858:	79 1f       	adc	r23, r25
    185a:	88 27       	eor	r24, r24
    185c:	77 fd       	sbrc	r23, 7
    185e:	80 95       	com	r24
    1860:	98 2f       	mov	r25, r24
    1862:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1866:	0e 94 4e 13 	call	0x269c	; 0x269c <sqrt>
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    186a:	20 e0       	ldi	r18, 0x00	; 0
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	40 e7       	ldi	r20, 0x70	; 112
    1870:	51 e4       	ldi	r21, 0x41	; 65
    1872:	0e 94 26 11 	call	0x224c	; 0x224c <__cmpsf2>
    1876:	88 23       	and	r24, r24
    1878:	0c f4       	brge	.+2      	; 0x187c <main+0x564>
    187a:	c0 cd       	rjmp	.-1152   	; 0x13fc <main+0xe4>
                        status_go_to_goal = 1;
                    else
                    {
                        
                        dir_x = goal_pos_x-x_robot;
                        dir_y = goal_pos_y-y_robot;
    187c:	66 27       	eor	r22, r22
    187e:	77 27       	eor	r23, r23
    1880:	6e 19       	sub	r22, r14
    1882:	7f 09       	sbc	r23, r15
    1884:	88 27       	eor	r24, r24
    1886:	77 fd       	sbrc	r23, 7
    1888:	80 95       	com	r24
    188a:	98 2f       	mov	r25, r24
    188c:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
    1890:	6b 01       	movw	r12, r22
    1892:	7c 01       	movw	r14, r24
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 1;
                    else
                    {
                        
                        dir_x = goal_pos_x-x_robot;
    1894:	6d a9       	ldd	r22, Y+53	; 0x35
    1896:	7e a9       	ldd	r23, Y+54	; 0x36
    1898:	60 1b       	sub	r22, r16
    189a:	71 0b       	sbc	r23, r17
    189c:	88 27       	eor	r24, r24
    189e:	77 fd       	sbrc	r23, 7
    18a0:	80 95       	com	r24
    18a2:	98 2f       	mov	r25, r24
    18a4:	0e 94 c8 11 	call	0x2390	; 0x2390 <__floatsisf>
                        dir_y = goal_pos_y-y_robot;
                        dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    18a8:	90 58       	subi	r25, 0x80	; 128
    18aa:	a7 01       	movw	r20, r14
    18ac:	96 01       	movw	r18, r12
    18ae:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <atan2>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	44 e3       	ldi	r20, 0x34	; 52
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 e1 12 	call	0x25c2	; 0x25c2 <__mulsf3>
    18be:	2b ed       	ldi	r18, 0xDB	; 219
    18c0:	3f e0       	ldi	r19, 0x0F	; 15
    18c2:	49 e4       	ldi	r20, 0x49	; 73
    18c4:	50 e4       	ldi	r21, 0x40	; 64
    18c6:	0e 94 2d 11 	call	0x225a	; 0x225a <__divsf3>
    18ca:	6f ab       	std	Y+55, r22	; 0x37
    18cc:	78 af       	std	Y+56, r23	; 0x38
    18ce:	89 af       	std	Y+57, r24	; 0x39
    18d0:	9a af       	std	Y+58, r25	; 0x3a
    18d2:	97 cd       	rjmp	.-1234   	; 0x1402 <main+0xea>
                            commands_var = 0;
                        }
                        
                    }
                }
                else if (status_go_to_goal == 1)
    18d4:	b1 e0       	ldi	r27, 0x01	; 1
    18d6:	6b 16       	cp	r6, r27
    18d8:	71 04       	cpc	r7, r1
    18da:	09 f0       	breq	.+2      	; 0x18de <main+0x5c6>
    18dc:	92 cd       	rjmp	.-1244   	; 0x1402 <main+0xea>
                {
                    //stop_motor();
                    status_go_to_goal = 2;
                    state = 3;
    18de:	e3 e0       	ldi	r30, 0x03	; 3
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	f0 93 4b 01 	sts	0x014B, r31
    18e6:	e0 93 4a 01 	sts	0x014A, r30
                    }
                }
                else if (status_go_to_goal == 1)
                {
                    //stop_motor();
                    status_go_to_goal = 2;
    18ea:	68 94       	set
    18ec:	66 24       	eor	r6, r6
    18ee:	61 f8       	bld	r6, 1
    18f0:	71 2c       	mov	r7, r1
    18f2:	87 cd       	rjmp	.-1266   	; 0x1402 <main+0xea>
                    state = 3;
                }
                break;
             
			case SYSTEM_STATE:
				switch (buffer_rec[0])
    18f4:	ae e3       	ldi	r26, 0x3E	; 62
    18f6:	b1 e0       	ldi	r27, 0x01	; 1
    18f8:	8c 91       	ld	r24, X
    18fa:	83 3a       	cpi	r24, 0xA3	; 163
    18fc:	b9 f1       	breq	.+110    	; 0x196c <main+0x654>
    18fe:	38 f4       	brcc	.+14     	; 0x190e <main+0x5f6>
    1900:	81 3a       	cpi	r24, 0xA1	; 161
    1902:	b1 f0       	breq	.+44     	; 0x1930 <main+0x618>
    1904:	48 f5       	brcc	.+82     	; 0x1958 <main+0x640>
    1906:	80 3a       	cpi	r24, 0xA0	; 160
    1908:	09 f0       	breq	.+2      	; 0x190c <main+0x5f4>
    190a:	7b cd       	rjmp	.-1290   	; 0x1402 <main+0xea>
    190c:	0a c0       	rjmp	.+20     	; 0x1922 <main+0x60a>
    190e:	86 3a       	cpi	r24, 0xA6	; 166
    1910:	09 f4       	brne	.+2      	; 0x1914 <main+0x5fc>
    1912:	41 c0       	rjmp	.+130    	; 0x1996 <main+0x67e>
    1914:	87 3a       	cpi	r24, 0xA7	; 167
    1916:	09 f4       	brne	.+2      	; 0x191a <main+0x602>
    1918:	45 c0       	rjmp	.+138    	; 0x19a4 <main+0x68c>
    191a:	84 3a       	cpi	r24, 0xA4	; 164
    191c:	09 f0       	breq	.+2      	; 0x1920 <main+0x608>
    191e:	71 cd       	rjmp	.-1310   	; 0x1402 <main+0xea>
    1920:	2f c0       	rjmp	.+94     	; 0x1980 <main+0x668>
				{
					//Comm test
					case 0xA0:
						state = BLUE_LED_STATE;
    1922:	86 e1       	ldi	r24, 0x16	; 22
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	90 93 4b 01 	sts	0x014B, r25
    192a:	80 93 4a 01 	sts	0x014A, r24
						break;
    192e:	69 cd       	rjmp	.-1326   	; 0x1402 <main+0xea>
						
					//Play
					case 0xA1:
						if (pause_bool)
    1930:	eb ad       	ldd	r30, Y+59	; 0x3b
    1932:	fc ad       	ldd	r31, Y+60	; 0x3c
    1934:	ef 2b       	or	r30, r31
    1936:	59 f0       	breq	.+22     	; 0x194e <main+0x636>
						{
							state = past_state;
    1938:	80 91 48 01 	lds	r24, 0x0148
    193c:	90 91 49 01 	lds	r25, 0x0149
    1940:	90 93 4b 01 	sts	0x014B, r25
    1944:	80 93 4a 01 	sts	0x014A, r24
							pause_bool = 0;
    1948:	1c ae       	std	Y+60, r1	; 0x3c
    194a:	1b ae       	std	Y+59, r1	; 0x3b
    194c:	5a cd       	rjmp	.-1356   	; 0x1402 <main+0xea>
						}else
							state = INITIAL_STATE;
    194e:	10 92 4b 01 	sts	0x014B, r1
    1952:	10 92 4a 01 	sts	0x014A, r1
    1956:	55 cd       	rjmp	.-1366   	; 0x1402 <main+0xea>
						break;
					
					//Goal A
					case 0xA2:
						if (check(PINB,2))
    1958:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();					
    195a:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    195e:	25 e1       	ldi	r18, 0x15	; 21
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	30 93 4b 01 	sts	0x014B, r19
    1966:	20 93 4a 01 	sts	0x014A, r18
						break;
    196a:	4b cd       	rjmp	.-1386   	; 0x1402 <main+0xea>
						
					//Goal B
					case 0xA3:
						if (!check(PINB,2))
    196c:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();
    196e:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    1972:	85 e1       	ldi	r24, 0x15	; 21
    1974:	90 e0       	ldi	r25, 0x00	; 0
    1976:	90 93 4b 01 	sts	0x014B, r25
    197a:	80 93 4a 01 	sts	0x014A, r24
						break;
    197e:	41 cd       	rjmp	.-1406   	; 0x1402 <main+0xea>
						
					//Pause
					case 0xA4:
						pause_bool = 1;
						state = STOP_STATE;
    1980:	a5 e1       	ldi	r26, 0x15	; 21
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	b0 93 4b 01 	sts	0x014B, r27
    1988:	a0 93 4a 01 	sts	0x014A, r26
						state = STOP_STATE;
						break;
						
					//Pause
					case 0xA4:
						pause_bool = 1;
    198c:	e1 e0       	ldi	r30, 0x01	; 1
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	fc af       	std	Y+60, r31	; 0x3c
    1992:	eb af       	std	Y+59, r30	; 0x3b
						state = STOP_STATE;
						break;
    1994:	36 cd       	rjmp	.-1428   	; 0x1402 <main+0xea>
						
					//Halftime
					case 0xA6:
						state = STOP_STATE;
    1996:	25 e1       	ldi	r18, 0x15	; 21
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	30 93 4b 01 	sts	0x014B, r19
    199e:	20 93 4a 01 	sts	0x014A, r18
						break;
    19a2:	2f cd       	rjmp	.-1442   	; 0x1402 <main+0xea>
						
					//Game over
					case 0xA7:
						if (check(PINB,2))
    19a4:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
							celebrate();
						}
						stop_motor();
    19a6:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
						state = STOP_STATE;													
    19aa:	85 e1       	ldi	r24, 0x15	; 21
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	90 93 4b 01 	sts	0x014B, r25
    19b2:	80 93 4a 01 	sts	0x014A, r24
						break;
    19b6:	25 cd       	rjmp	.-1462   	; 0x1402 <main+0xea>
						break;						
				}
				break;
				
			case BLUE_LED_STATE:
				stop_motor();
    19b8:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
				turnOnBlueLED();
				state = STOP_STATE;
    19bc:	a5 e1       	ldi	r26, 0x15	; 21
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	b0 93 4b 01 	sts	0x014B, r27
    19c4:	a0 93 4a 01 	sts	0x014A, r26
				break;
    19c8:	1c cd       	rjmp	.-1480   	; 0x1402 <main+0xea>
				
			case STOP_STATE:
				stop_motor();
    19ca:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
				break;			  
    19ce:	19 cd       	rjmp	.-1486   	; 0x1402 <main+0xea>
                
            default:
                stop_motor();
    19d0:	0e 94 56 09 	call	0x12ac	; 0x12ac <stop_motor>
                while(1)
                {
                    m_red(TOGGLE);
    19d4:	20 e4       	ldi	r18, 0x40	; 64
                    m_green(TOGGLE);
    19d6:	94 e0       	ldi	r25, 0x04	; 4
                
            default:
                stop_motor();
                while(1)
                {
                    m_red(TOGGLE);
    19d8:	6e 9a       	sbi	0x0d, 6	; 13
    19da:	8e b1       	in	r24, 0x0e	; 14
    19dc:	82 27       	eor	r24, r18
    19de:	8e b9       	out	0x0e, r24	; 14
                    m_green(TOGGLE);
    19e0:	6a 9a       	sbi	0x0d, 2	; 13
    19e2:	8e b1       	in	r24, 0x0e	; 14
    19e4:	89 27       	eor	r24, r25
    19e6:	8e b9       	out	0x0e, r24	; 14
    19e8:	e3 e2       	ldi	r30, 0x23	; 35
    19ea:	f4 ef       	ldi	r31, 0xF4	; 244
    19ec:	31 97       	sbiw	r30, 0x01	; 1
    19ee:	f1 f7       	brne	.-4      	; 0x19ec <main+0x6d4>
    19f0:	00 c0       	rjmp	.+0      	; 0x19f2 <main+0x6da>
    19f2:	00 00       	nop
    19f4:	f1 cf       	rjmp	.-30     	; 0x19d8 <main+0x6c0>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    19f6:	25 2d       	mov	r18, r5
    19f8:	34 2d       	mov	r19, r4
    19fa:	43 2d       	mov	r20, r3
    19fc:	52 2d       	mov	r21, r2
    19fe:	c7 01       	movw	r24, r14
    1a00:	b6 01       	movw	r22, r12
    1a02:	0e 94 d6 12 	call	0x25ac	; 0x25ac <__gesf2>
    1a06:	88 23       	and	r24, r24
    1a08:	0c f0       	brlt	.+2      	; 0x1a0c <main+0x6f4>
    1a0a:	43 ce       	rjmp	.-890    	; 0x1692 <main+0x37a>
    1a0c:	4f ce       	rjmp	.-866    	; 0x16ac <main+0x394>

00001a0e <__vector_41>:
 m_red(ON);
 flag_timer = 1;
 }*/

ISR(TIMER4_OVF_vect)
{
    1a0e:	1f 92       	push	r1
    1a10:	0f 92       	push	r0
    1a12:	0f b6       	in	r0, 0x3f	; 63
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	8f 93       	push	r24
    1a1a:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	90 93 4d 01 	sts	0x014D, r25
    1a24:	80 93 4c 01 	sts	0x014C, r24
}
    1a28:	9f 91       	pop	r25
    1a2a:	8f 91       	pop	r24
    1a2c:	0f 90       	pop	r0
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	0f 90       	pop	r0
    1a32:	1f 90       	pop	r1
    1a34:	18 95       	reti

00001a36 <__vector_3>:

ISR(INT2_vect)
{
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	2f 93       	push	r18
    1a42:	3f 93       	push	r19
    1a44:	4f 93       	push	r20
    1a46:	5f 93       	push	r21
    1a48:	6f 93       	push	r22
    1a4a:	7f 93       	push	r23
    1a4c:	8f 93       	push	r24
    1a4e:	9f 93       	push	r25
    1a50:	af 93       	push	r26
    1a52:	bf 93       	push	r27
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
	//Read
	m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    1a58:	6a e0       	ldi	r22, 0x0A	; 10
    1a5a:	8e e3       	ldi	r24, 0x3E	; 62
    1a5c:	91 e0       	ldi	r25, 0x01	; 1
    1a5e:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <m_rf_read>
	past_state = state;
    1a62:	80 91 4a 01 	lds	r24, 0x014A
    1a66:	90 91 4b 01 	lds	r25, 0x014B
    1a6a:	90 93 49 01 	sts	0x0149, r25
    1a6e:	80 93 48 01 	sts	0x0148, r24
	state = SYSTEM_STATE;
    1a72:	83 e6       	ldi	r24, 0x63	; 99
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	90 93 4b 01 	sts	0x014B, r25
    1a7a:	80 93 4a 01 	sts	0x014A, r24
	//m_green(ON); // Indicator receiving from RF
}
    1a7e:	ff 91       	pop	r31
    1a80:	ef 91       	pop	r30
    1a82:	bf 91       	pop	r27
    1a84:	af 91       	pop	r26
    1a86:	9f 91       	pop	r25
    1a88:	8f 91       	pop	r24
    1a8a:	7f 91       	pop	r23
    1a8c:	6f 91       	pop	r22
    1a8e:	5f 91       	pop	r21
    1a90:	4f 91       	pop	r20
    1a92:	3f 91       	pop	r19
    1a94:	2f 91       	pop	r18
    1a96:	0f 90       	pop	r0
    1a98:	0f be       	out	0x3f, r0	; 63
    1a9a:	0f 90       	pop	r0
    1a9c:	1f 90       	pop	r1
    1a9e:	18 95       	reti

00001aa0 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    1aa0:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1aa2:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1aa4:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1aa6:	8c e0       	ldi	r24, 0x0C	; 12
    1aa8:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    1aac:	e9 e6       	ldi	r30, 0x69	; 105
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	80 62       	ori	r24, 0x20	; 32
    1ab4:	80 83       	st	Z, r24
    1ab6:	80 81       	ld	r24, Z
    1ab8:	8f 7e       	andi	r24, 0xEF	; 239
    1aba:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    1abc:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    1abe:	78 94       	sei
    1ac0:	08 95       	ret

00001ac2 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	18 2f       	mov	r17, r24
    1aca:	d6 2f       	mov	r29, r22
    1acc:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    1ace:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1ad2:	94 ea       	ldi	r25, 0xA4	; 164
    1ad4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1ad8:	ec eb       	ldi	r30, 0xBC	; 188
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	90 81       	ld	r25, Z
    1ade:	99 23       	and	r25, r25
    1ae0:	ec f7       	brge	.-6      	; 0x1adc <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1ae2:	90 e5       	ldi	r25, 0x50	; 80
    1ae4:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1ae8:	94 e8       	ldi	r25, 0x84	; 132
    1aea:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1aee:	ec eb       	ldi	r30, 0xBC	; 188
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	90 81       	ld	r25, Z
    1af4:	99 23       	and	r25, r25
    1af6:	ec f7       	brge	.-6      	; 0x1af2 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1af8:	90 91 b9 00 	lds	r25, 0x00B9
    1afc:	98 7f       	andi	r25, 0xF8	; 248
    1afe:	90 32       	cpi	r25, 0x20	; 32
    1b00:	29 f4       	brne	.+10     	; 0x1b0c <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1b02:	84 e9       	ldi	r24, 0x94	; 148
    1b04:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	2d c0       	rjmp	.+90     	; 0x1b66 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1b0c:	81 e0       	ldi	r24, 0x01	; 1
    1b0e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b12:	84 e8       	ldi	r24, 0x84	; 132
    1b14:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1b18:	ec eb       	ldi	r30, 0xBC	; 188
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	90 81       	ld	r25, Z
    1b1e:	99 23       	and	r25, r25
    1b20:	ec f7       	brge	.-6      	; 0x1b1c <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    1b22:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b26:	84 e8       	ldi	r24, 0x84	; 132
    1b28:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1b2c:	ec eb       	ldi	r30, 0xBC	; 188
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
    1b32:	88 23       	and	r24, r24
    1b34:	ec f7       	brge	.-6      	; 0x1b30 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    1b36:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b3a:	84 e8       	ldi	r24, 0x84	; 132
    1b3c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1b40:	ec eb       	ldi	r30, 0xBC	; 188
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	88 23       	and	r24, r24
    1b48:	ec f7       	brge	.-6      	; 0x1b44 <m_rf_open+0x82>
	
	TWDR = packet_length;
    1b4a:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b4e:	84 e8       	ldi	r24, 0x84	; 132
    1b50:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1b54:	ec eb       	ldi	r30, 0xBC	; 188
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	ec f7       	brge	.-6      	; 0x1b58 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1b5e:	84 e9       	ldi	r24, 0x94	; 148
    1b60:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
}
    1b66:	df 91       	pop	r29
    1b68:	cf 91       	pop	r28
    1b6a:	1f 91       	pop	r17
    1b6c:	08 95       	ret

00001b6e <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1b72:	24 ea       	ldi	r18, 0xA4	; 164
    1b74:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    1b78:	ec eb       	ldi	r30, 0xBC	; 188
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	20 81       	ld	r18, Z
    1b7e:	22 23       	and	r18, r18
    1b80:	ec f7       	brge	.-6      	; 0x1b7c <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    1b82:	21 e5       	ldi	r18, 0x51	; 81
    1b84:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    1b88:	24 e8       	ldi	r18, 0x84	; 132
    1b8a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    1b8e:	ec eb       	ldi	r30, 0xBC	; 188
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	20 81       	ld	r18, Z
    1b94:	22 23       	and	r18, r18
    1b96:	ec f7       	brge	.-6      	; 0x1b92 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    1b98:	20 91 b9 00 	lds	r18, 0x00B9
    1b9c:	28 7f       	andi	r18, 0xF8	; 248
    1b9e:	28 34       	cpi	r18, 0x48	; 72
    1ba0:	29 f4       	brne	.+10     	; 0x1bac <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1ba2:	84 e9       	ldi	r24, 0x94	; 148
    1ba4:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	3f c0       	rjmp	.+126    	; 0x1c2a <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1bac:	24 ec       	ldi	r18, 0xC4	; 196
    1bae:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1bb2:	ec eb       	ldi	r30, 0xBC	; 188
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	20 81       	ld	r18, Z
    1bb8:	22 23       	and	r18, r18
    1bba:	ec f7       	brge	.-6      	; 0x1bb6 <m_rf_read+0x48>
	bytes = TWDR;
    1bbc:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    1bc0:	46 13       	cpse	r20, r22
    1bc2:	09 c0       	rjmp	.+18     	; 0x1bd6 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1bc4:	50 e0       	ldi	r21, 0x00	; 0
    1bc6:	41 50       	subi	r20, 0x01	; 1
    1bc8:	51 09       	sbc	r21, r1
    1bca:	14 16       	cp	r1, r20
    1bcc:	15 06       	cpc	r1, r21
    1bce:	44 f0       	brlt	.+16     	; 0x1be0 <m_rf_read+0x72>
    1bd0:	40 e0       	ldi	r20, 0x00	; 0
    1bd2:	50 e0       	ldi	r21, 0x00	; 0
    1bd4:	18 c0       	rjmp	.+48     	; 0x1c06 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1bd6:	84 e9       	ldi	r24, 0x94	; 148
    1bd8:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	25 c0       	rjmp	.+74     	; 0x1c2a <m_rf_read+0xbc>
    1be0:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1be6:	ec eb       	ldi	r30, 0xBC	; 188
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1bec:	cb eb       	ldi	r28, 0xBB	; 187
    1bee:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1bf0:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1bf2:	60 81       	ld	r22, Z
    1bf4:	66 23       	and	r22, r22
    1bf6:	ec f7       	brge	.-6      	; 0x1bf2 <m_rf_read+0x84>
		buffer[i] = TWDR;
    1bf8:	68 81       	ld	r22, Y
    1bfa:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1bfc:	2f 5f       	subi	r18, 0xFF	; 255
    1bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1c00:	24 17       	cp	r18, r20
    1c02:	35 07       	cpc	r19, r21
    1c04:	ac f3       	brlt	.-22     	; 0x1bf0 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1c06:	24 e8       	ldi	r18, 0x84	; 132
    1c08:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1c0c:	ec eb       	ldi	r30, 0xBC	; 188
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	20 81       	ld	r18, Z
    1c12:	22 23       	and	r18, r18
    1c14:	ec f7       	brge	.-6      	; 0x1c10 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    1c16:	20 91 bb 00 	lds	r18, 0x00BB
    1c1a:	fc 01       	movw	r30, r24
    1c1c:	e4 0f       	add	r30, r20
    1c1e:	f5 1f       	adc	r31, r21
    1c20:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1c22:	84 e9       	ldi	r24, 0x94	; 148
    1c24:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1c28:	81 e0       	ldi	r24, 0x01	; 1
}
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	08 95       	ret

00001c30 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    1c30:	cf 93       	push	r28
    1c32:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    1c34:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1c36:	94 ea       	ldi	r25, 0xA4	; 164
    1c38:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c3c:	ec eb       	ldi	r30, 0xBC	; 188
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	90 81       	ld	r25, Z
    1c42:	99 23       	and	r25, r25
    1c44:	ec f7       	brge	.-6      	; 0x1c40 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1c46:	90 e5       	ldi	r25, 0x50	; 80
    1c48:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c4c:	94 e8       	ldi	r25, 0x84	; 132
    1c4e:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c52:	ec eb       	ldi	r30, 0xBC	; 188
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	90 81       	ld	r25, Z
    1c58:	99 23       	and	r25, r25
    1c5a:	ec f7       	brge	.-6      	; 0x1c56 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1c5c:	90 91 b9 00 	lds	r25, 0x00B9
    1c60:	98 7f       	andi	r25, 0xF8	; 248
    1c62:	90 32       	cpi	r25, 0x20	; 32
    1c64:	31 f4       	brne	.+12     	; 0x1c72 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1c66:	84 e9       	ldi	r24, 0x94	; 148
    1c68:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    1c6c:	78 94       	sei
		return 0;
    1c6e:	80 e0       	ldi	r24, 0x00	; 0
    1c70:	32 c0       	rjmp	.+100    	; 0x1cd6 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    1c72:	93 e0       	ldi	r25, 0x03	; 3
    1c74:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c78:	94 e8       	ldi	r25, 0x84	; 132
    1c7a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1c7e:	ec eb       	ldi	r30, 0xBC	; 188
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	90 81       	ld	r25, Z
    1c84:	99 23       	and	r25, r25
    1c86:	ec f7       	brge	.-6      	; 0x1c82 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    1c88:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1c8c:	84 e8       	ldi	r24, 0x84	; 132
    1c8e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1c92:	ec eb       	ldi	r30, 0xBC	; 188
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	80 81       	ld	r24, Z
    1c98:	88 23       	and	r24, r24
    1c9a:	ec f7       	brge	.-6      	; 0x1c96 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    1c9c:	24 2f       	mov	r18, r20
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	12 16       	cp	r1, r18
    1ca2:	13 06       	cpc	r1, r19
    1ca4:	9c f4       	brge	.+38     	; 0x1ccc <m_rf_send+0x9c>
    1ca6:	a6 2f       	mov	r26, r22
    1ca8:	b7 2f       	mov	r27, r23
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    1cae:	cb eb       	ldi	r28, 0xBB	; 187
    1cb0:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    1cb2:	ec eb       	ldi	r30, 0xBC	; 188
    1cb4:	f0 e0       	ldi	r31, 0x00	; 0
    1cb6:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    1cb8:	4d 91       	ld	r20, X+
    1cba:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    1cbc:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    1cbe:	40 81       	ld	r20, Z
    1cc0:	44 23       	and	r20, r20
    1cc2:	ec f7       	brge	.-6      	; 0x1cbe <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    1cc4:	01 96       	adiw	r24, 0x01	; 1
    1cc6:	82 17       	cp	r24, r18
    1cc8:	93 07       	cpc	r25, r19
    1cca:	b4 f3       	brlt	.-20     	; 0x1cb8 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1ccc:	84 e9       	ldi	r24, 0x94	; 148
    1cce:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    1cd2:	78 94       	sei
	
	return 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
}
    1cd6:	df 91       	pop	r29
    1cd8:	cf 91       	pop	r28
    1cda:	08 95       	ret

00001cdc <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    1ce0:	ec eb       	ldi	r30, 0xBC	; 188
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 23       	and	r24, r24
    1ce8:	34 f0       	brlt	.+12     	; 0x1cf6 <twi_wait+0x1a>
    1cea:	2f 5f       	subi	r18, 0xFF	; 255
    1cec:	3f 4f       	sbci	r19, 0xFF	; 255
    1cee:	29 3e       	cpi	r18, 0xE9	; 233
    1cf0:	83 e0       	ldi	r24, 0x03	; 3
    1cf2:	38 07       	cpc	r19, r24
    1cf4:	b9 f7       	brne	.-18     	; 0x1ce4 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	28 3e       	cpi	r18, 0xE8	; 232
    1cfa:	33 40       	sbci	r19, 0x03	; 3
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <twi_wait+0x24>
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1d00:	08 95       	ret

00001d02 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1d02:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1d06:	84 e8       	ldi	r24, 0x84	; 132
    1d08:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1d0c:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <twi_wait>
    1d10:	88 23       	and	r24, r24
    1d12:	21 f0       	breq	.+8      	; 0x1d1c <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1d14:	80 91 b9 00 	lds	r24, 0x00B9
    1d18:	88 7f       	andi	r24, 0xF8	; 248
    1d1a:	08 95       	ret
	} else {
		return 0;					// comm failure
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1d1e:	08 95       	ret

00001d20 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1d20:	cf 93       	push	r28
    1d22:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d24:	94 ea       	ldi	r25, 0xA4	; 164
    1d26:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1d2a:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <twi_wait>
    1d2e:	88 23       	and	r24, r24
    1d30:	61 f0       	breq	.+24     	; 0x1d4a <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1d32:	8c 2f       	mov	r24, r28
    1d34:	88 0f       	add	r24, r24
    1d36:	8f 5f       	subi	r24, 0xFF	; 255
    1d38:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1d3c:	88 34       	cpi	r24, 0x48	; 72
    1d3e:	39 f4       	brne	.+14     	; 0x1d4e <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d40:	84 e9       	ldi	r24, 0x94	; 148
    1d42:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1d46:	80 e0       	ldi	r24, 0x00	; 0
    1d48:	03 c0       	rjmp	.+6      	; 0x1d50 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
}	
    1d50:	cf 91       	pop	r28
    1d52:	08 95       	ret

00001d54 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1d54:	cf 93       	push	r28
    1d56:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1d58:	94 ea       	ldi	r25, 0xA4	; 164
    1d5a:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1d5e:	0e 94 6e 0e 	call	0x1cdc	; 0x1cdc <twi_wait>
    1d62:	88 23       	and	r24, r24
    1d64:	59 f0       	breq	.+22     	; 0x1d7c <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1d66:	8c 2f       	mov	r24, r28
    1d68:	88 0f       	add	r24, r24
    1d6a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1d6e:	80 32       	cpi	r24, 0x20	; 32
    1d70:	39 f4       	brne	.+14     	; 0x1d80 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1d72:	84 e9       	ldi	r24, 0x94	; 148
    1d74:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	03 c0       	rjmp	.+6      	; 0x1d82 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	01 c0       	rjmp	.+2      	; 0x1d82 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1d80:	81 e0       	ldi	r24, 0x01	; 1
}	
    1d82:	cf 91       	pop	r28
    1d84:	08 95       	ret

00001d86 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1d86:	84 e9       	ldi	r24, 0x94	; 148
    1d88:	80 93 bc 00 	sts	0x00BC, r24
    1d8c:	08 95       	ret

00001d8e <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1d8e:	ef 92       	push	r14
    1d90:	ff 92       	push	r15
    1d92:	0f 93       	push	r16
    1d94:	1f 93       	push	r17
    1d96:	cf 93       	push	r28
    1d98:	df 93       	push	r29
    1d9a:	cd b7       	in	r28, 0x3d	; 61
    1d9c:	de b7       	in	r29, 0x3e	; 62
    1d9e:	60 97       	sbiw	r28, 0x10	; 16
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	e8 2e       	mov	r14, r24
    1dac:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1dae:	fe 01       	movw	r30, r28
    1db0:	31 96       	adiw	r30, 0x01	; 1
    1db2:	80 e1       	ldi	r24, 0x10	; 16
    1db4:	df 01       	movw	r26, r30
    1db6:	1d 92       	st	X+, r1
    1db8:	8a 95       	dec	r24
    1dba:	e9 f7       	brne	.-6      	; 0x1db6 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1dbc:	88 e5       	ldi	r24, 0x58	; 88
    1dbe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    1dc2:	88 23       	and	r24, r24
    1dc4:	09 f4       	brne	.+2      	; 0x1dc8 <m_wii_read+0x3a>
    1dc6:	66 c0       	rjmp	.+204    	; 0x1e94 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1dc8:	86 e3       	ldi	r24, 0x36	; 54
    1dca:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f4       	brne	.+2      	; 0x1dd4 <m_wii_read+0x46>
    1dd2:	62 c0       	rjmp	.+196    	; 0x1e98 <m_wii_read+0x10a>
	end();
    1dd4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1dd8:	b8 e0       	ldi	r27, 0x08	; 8
    1dda:	ba 95       	dec	r27
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <m_wii_read+0x4c>
    1dde:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1de0:	88 e5       	ldi	r24, 0x58	; 88
    1de2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <start_read>
    1de6:	88 23       	and	r24, r24
    1de8:	09 f4       	brne	.+2      	; 0x1dec <m_wii_read+0x5e>
    1dea:	58 c0       	rjmp	.+176    	; 0x1e9c <m_wii_read+0x10e>
    1dec:	ae 01       	movw	r20, r28
    1dee:	4f 5f       	subi	r20, 0xFF	; 255
    1df0:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1df2:	8e 01       	movw	r16, r28
    1df4:	00 5f       	subi	r16, 0xF0	; 240
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1df8:	ec eb       	ldi	r30, 0xBC	; 188
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1dfe:	2b eb       	ldi	r18, 0xBB	; 187
    1e00:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1e02:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e04:	80 81       	ld	r24, Z
    1e06:	88 23       	and	r24, r24
    1e08:	ec f7       	brge	.-6      	; 0x1e04 <m_wii_read+0x76>
		temp[i] = TWDR;
    1e0a:	d9 01       	movw	r26, r18
    1e0c:	8c 91       	ld	r24, X
    1e0e:	da 01       	movw	r26, r20
    1e10:	8d 93       	st	X+, r24
    1e12:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1e14:	a0 17       	cp	r26, r16
    1e16:	b1 07       	cpc	r27, r17
    1e18:	a1 f7       	brne	.-24     	; 0x1e02 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1e1a:	84 e8       	ldi	r24, 0x84	; 132
    1e1c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1e20:	ec eb       	ldi	r30, 0xBC	; 188
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	88 23       	and	r24, r24
    1e28:	ec f7       	brge	.-6      	; 0x1e24 <m_wii_read+0x96>
	temp[15] = TWDR;
    1e2a:	80 91 bb 00 	lds	r24, 0x00BB
    1e2e:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1e30:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
    1e34:	de 01       	movw	r26, r28
    1e36:	14 96       	adiw	r26, 0x04	; 4
    1e38:	6e 2d       	mov	r22, r14
    1e3a:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1e3c:	4c 91       	ld	r20, X
    1e3e:	24 2f       	mov	r18, r20
    1e40:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1e42:	cd 01       	movw	r24, r26
    1e44:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1e46:	fc 01       	movw	r30, r24
    1e48:	80 81       	ld	r24, Z
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	f0 e1       	ldi	r31, 0x10	; 16
    1e4e:	2f 9f       	mul	r18, r31
    1e50:	80 0d       	add	r24, r0
    1e52:	91 1d       	adc	r25, r1
    1e54:	11 24       	eor	r1, r1
    1e56:	fb 01       	movw	r30, r22
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e5c:	84 2f       	mov	r24, r20
    1e5e:	80 7c       	andi	r24, 0xC0	; 192
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	88 0f       	add	r24, r24
    1e64:	99 1f       	adc	r25, r25
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1e6a:	9d 01       	movw	r18, r26
    1e6c:	21 50       	subi	r18, 0x01	; 1
    1e6e:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1e70:	f9 01       	movw	r30, r18
    1e72:	20 81       	ld	r18, Z
    1e74:	82 0f       	add	r24, r18
    1e76:	91 1d       	adc	r25, r1
    1e78:	fb 01       	movw	r30, r22
    1e7a:	93 83       	std	Z+3, r25	; 0x03
    1e7c:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1e7e:	4f 70       	andi	r20, 0x0F	; 15
    1e80:	44 83       	std	Z+4, r20	; 0x04
    1e82:	15 82       	std	Z+5, r1	; 0x05
    1e84:	13 96       	adiw	r26, 0x03	; 3
    1e86:	6a 5f       	subi	r22, 0xFA	; 250
    1e88:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1e8a:	0a 17       	cp	r16, r26
    1e8c:	1b 07       	cpc	r17, r27
    1e8e:	b1 f6       	brne	.-84     	; 0x1e3c <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	05 c0       	rjmp	.+10     	; 0x1e9e <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	03 c0       	rjmp	.+6      	; 0x1e9e <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	01 c0       	rjmp	.+2      	; 0x1e9e <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1e9c:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1e9e:	60 96       	adiw	r28, 0x10	; 16
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	08 95       	ret

00001eb8 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1eb8:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1ebc:	88 e5       	ldi	r24, 0x58	; 88
    1ebe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    1ec2:	88 23       	and	r24, r24
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <m_wii_open+0x10>
    1ec6:	c7 c0       	rjmp	.+398    	; 0x2056 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1ec8:	80 e3       	ldi	r24, 0x30	; 48
    1eca:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1ece:	88 23       	and	r24, r24
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <m_wii_open+0x1c>
    1ed2:	c3 c0       	rjmp	.+390    	; 0x205a <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1eda:	88 23       	and	r24, r24
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <m_wii_open+0x28>
    1ede:	bf c0       	rjmp	.+382    	; 0x205e <m_wii_open+0x1a6>
	end();
    1ee0:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ee4:	83 ec       	ldi	r24, 0xC3	; 195
    1ee6:	99 e0       	ldi	r25, 0x09	; 9
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	f1 f7       	brne	.-4      	; 0x1ee8 <m_wii_open+0x30>
    1eec:	00 c0       	rjmp	.+0      	; 0x1eee <m_wii_open+0x36>
    1eee:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1ef0:	88 e5       	ldi	r24, 0x58	; 88
    1ef2:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <m_wii_open+0x44>
    1efa:	b3 c0       	rjmp	.+358    	; 0x2062 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f02:	88 23       	and	r24, r24
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <m_wii_open+0x50>
    1f06:	af c0       	rjmp	.+350    	; 0x2066 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1f08:	80 e0       	ldi	r24, 0x00	; 0
    1f0a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f0e:	88 23       	and	r24, r24
    1f10:	09 f4       	brne	.+2      	; 0x1f14 <m_wii_open+0x5c>
    1f12:	ab c0       	rjmp	.+342    	; 0x206a <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f1a:	88 23       	and	r24, r24
    1f1c:	09 f4       	brne	.+2      	; 0x1f20 <m_wii_open+0x68>
    1f1e:	a7 c0       	rjmp	.+334    	; 0x206e <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f26:	88 23       	and	r24, r24
    1f28:	09 f4       	brne	.+2      	; 0x1f2c <m_wii_open+0x74>
    1f2a:	a3 c0       	rjmp	.+326    	; 0x2072 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f32:	88 23       	and	r24, r24
    1f34:	09 f4       	brne	.+2      	; 0x1f38 <m_wii_open+0x80>
    1f36:	9f c0       	rjmp	.+318    	; 0x2076 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f3e:	88 23       	and	r24, r24
    1f40:	09 f4       	brne	.+2      	; 0x1f44 <m_wii_open+0x8c>
    1f42:	9b c0       	rjmp	.+310    	; 0x207a <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f4a:	88 23       	and	r24, r24
    1f4c:	09 f4       	brne	.+2      	; 0x1f50 <m_wii_open+0x98>
    1f4e:	97 c0       	rjmp	.+302    	; 0x207e <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1f50:	80 e9       	ldi	r24, 0x90	; 144
    1f52:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f56:	88 23       	and	r24, r24
    1f58:	09 f4       	brne	.+2      	; 0x1f5c <m_wii_open+0xa4>
    1f5a:	93 c0       	rjmp	.+294    	; 0x2082 <m_wii_open+0x1ca>
	end();
    1f5c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
    1f60:	83 ec       	ldi	r24, 0xC3	; 195
    1f62:	99 e0       	ldi	r25, 0x09	; 9
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <m_wii_open+0xac>
    1f68:	00 c0       	rjmp	.+0      	; 0x1f6a <m_wii_open+0xb2>
    1f6a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1f6c:	88 e5       	ldi	r24, 0x58	; 88
    1f6e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    1f72:	88 23       	and	r24, r24
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <m_wii_open+0xc0>
    1f76:	87 c0       	rjmp	.+270    	; 0x2086 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1f78:	87 e0       	ldi	r24, 0x07	; 7
    1f7a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <m_wii_open+0xcc>
    1f82:	83 c0       	rjmp	.+262    	; 0x208a <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1f84:	80 e0       	ldi	r24, 0x00	; 0
    1f86:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f8a:	88 23       	and	r24, r24
    1f8c:	09 f4       	brne	.+2      	; 0x1f90 <m_wii_open+0xd8>
    1f8e:	7f c0       	rjmp	.+254    	; 0x208e <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1f90:	81 e4       	ldi	r24, 0x41	; 65
    1f92:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1f96:	88 23       	and	r24, r24
    1f98:	09 f4       	brne	.+2      	; 0x1f9c <m_wii_open+0xe4>
    1f9a:	7b c0       	rjmp	.+246    	; 0x2092 <m_wii_open+0x1da>
	end();
    1f9c:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
    1fa0:	83 ec       	ldi	r24, 0xC3	; 195
    1fa2:	99 e0       	ldi	r25, 0x09	; 9
    1fa4:	01 97       	sbiw	r24, 0x01	; 1
    1fa6:	f1 f7       	brne	.-4      	; 0x1fa4 <m_wii_open+0xec>
    1fa8:	00 c0       	rjmp	.+0      	; 0x1faa <m_wii_open+0xf2>
    1faa:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1fac:	88 e5       	ldi	r24, 0x58	; 88
    1fae:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    1fb2:	88 23       	and	r24, r24
    1fb4:	09 f4       	brne	.+2      	; 0x1fb8 <m_wii_open+0x100>
    1fb6:	6f c0       	rjmp	.+222    	; 0x2096 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1fb8:	8a e1       	ldi	r24, 0x1A	; 26
    1fba:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1fbe:	88 23       	and	r24, r24
    1fc0:	09 f4       	brne	.+2      	; 0x1fc4 <m_wii_open+0x10c>
    1fc2:	6b c0       	rjmp	.+214    	; 0x209a <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1fc4:	80 e4       	ldi	r24, 0x40	; 64
    1fc6:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1fca:	88 23       	and	r24, r24
    1fcc:	09 f4       	brne	.+2      	; 0x1fd0 <m_wii_open+0x118>
    1fce:	67 c0       	rjmp	.+206    	; 0x209e <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1fd6:	88 23       	and	r24, r24
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <m_wii_open+0x124>
    1fda:	63 c0       	rjmp	.+198    	; 0x20a2 <m_wii_open+0x1ea>
	end();
    1fdc:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
    1fe0:	83 ec       	ldi	r24, 0xC3	; 195
    1fe2:	99 e0       	ldi	r25, 0x09	; 9
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <m_wii_open+0x12c>
    1fe8:	00 c0       	rjmp	.+0      	; 0x1fea <m_wii_open+0x132>
    1fea:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1fec:	88 e5       	ldi	r24, 0x58	; 88
    1fee:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    1ff2:	88 23       	and	r24, r24
    1ff4:	09 f4       	brne	.+2      	; 0x1ff8 <m_wii_open+0x140>
    1ff6:	57 c0       	rjmp	.+174    	; 0x20a6 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1ff8:	83 e3       	ldi	r24, 0x33	; 51
    1ffa:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <m_wii_open+0x14c>
    2002:	53 c0       	rjmp	.+166    	; 0x20aa <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2004:	83 e0       	ldi	r24, 0x03	; 3
    2006:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    200a:	88 23       	and	r24, r24
    200c:	09 f4       	brne	.+2      	; 0x2010 <m_wii_open+0x158>
    200e:	4f c0       	rjmp	.+158    	; 0x20ae <m_wii_open+0x1f6>
	end();
    2010:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
    2014:	83 ec       	ldi	r24, 0xC3	; 195
    2016:	99 e0       	ldi	r25, 0x09	; 9
    2018:	01 97       	sbiw	r24, 0x01	; 1
    201a:	f1 f7       	brne	.-4      	; 0x2018 <m_wii_open+0x160>
    201c:	00 c0       	rjmp	.+0      	; 0x201e <m_wii_open+0x166>
    201e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2020:	88 e5       	ldi	r24, 0x58	; 88
    2022:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <start_write>
    2026:	88 23       	and	r24, r24
    2028:	09 f4       	brne	.+2      	; 0x202c <m_wii_open+0x174>
    202a:	43 c0       	rjmp	.+134    	; 0x20b2 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    202c:	80 e3       	ldi	r24, 0x30	; 48
    202e:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    2032:	88 23       	and	r24, r24
    2034:	09 f4       	brne	.+2      	; 0x2038 <m_wii_open+0x180>
    2036:	3f c0       	rjmp	.+126    	; 0x20b6 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2038:	88 e0       	ldi	r24, 0x08	; 8
    203a:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <send_byte>
    203e:	88 23       	and	r24, r24
    2040:	e1 f1       	breq	.+120    	; 0x20ba <m_wii_open+0x202>
	end();
    2042:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <end>
    2046:	83 ec       	ldi	r24, 0xC3	; 195
    2048:	99 e0       	ldi	r25, 0x09	; 9
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <m_wii_open+0x192>
    204e:	00 c0       	rjmp	.+0      	; 0x2050 <m_wii_open+0x198>
    2050:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    207a:	80 e0       	ldi	r24, 0x00	; 0
    207c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    207e:	80 e0       	ldi	r24, 0x00	; 0
    2080:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2082:	80 e0       	ldi	r24, 0x00	; 0
    2084:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2086:	80 e0       	ldi	r24, 0x00	; 0
    2088:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    208a:	80 e0       	ldi	r24, 0x00	; 0
    208c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2092:	80 e0       	ldi	r24, 0x00	; 0
    2094:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    20aa:	80 e0       	ldi	r24, 0x00	; 0
    20ac:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    20b6:	80 e0       	ldi	r24, 0x00	; 0
    20b8:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    20ba:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    20bc:	08 95       	ret

000020be <__subsf3>:
    20be:	50 58       	subi	r21, 0x80	; 128

000020c0 <__addsf3>:
    20c0:	bb 27       	eor	r27, r27
    20c2:	aa 27       	eor	r26, r26
    20c4:	0e d0       	rcall	.+28     	; 0x20e2 <__addsf3x>
    20c6:	27 c2       	rjmp	.+1102   	; 0x2516 <__fp_round>
    20c8:	f0 d1       	rcall	.+992    	; 0x24aa <__fp_pscA>
    20ca:	30 f0       	brcs	.+12     	; 0x20d8 <__addsf3+0x18>
    20cc:	f5 d1       	rcall	.+1002   	; 0x24b8 <__fp_pscB>
    20ce:	20 f0       	brcs	.+8      	; 0x20d8 <__addsf3+0x18>
    20d0:	31 f4       	brne	.+12     	; 0x20de <__addsf3+0x1e>
    20d2:	9f 3f       	cpi	r25, 0xFF	; 255
    20d4:	11 f4       	brne	.+4      	; 0x20da <__addsf3+0x1a>
    20d6:	1e f4       	brtc	.+6      	; 0x20de <__addsf3+0x1e>
    20d8:	c0 c1       	rjmp	.+896    	; 0x245a <__fp_nan>
    20da:	0e f4       	brtc	.+2      	; 0x20de <__addsf3+0x1e>
    20dc:	e0 95       	com	r30
    20de:	e7 fb       	bst	r30, 7
    20e0:	b6 c1       	rjmp	.+876    	; 0x244e <__fp_inf>

000020e2 <__addsf3x>:
    20e2:	e9 2f       	mov	r30, r25
    20e4:	3a d2       	rcall	.+1140   	; 0x255a <__fp_split3>
    20e6:	80 f3       	brcs	.-32     	; 0x20c8 <__addsf3+0x8>
    20e8:	ba 17       	cp	r27, r26
    20ea:	62 07       	cpc	r22, r18
    20ec:	73 07       	cpc	r23, r19
    20ee:	84 07       	cpc	r24, r20
    20f0:	95 07       	cpc	r25, r21
    20f2:	18 f0       	brcs	.+6      	; 0x20fa <__addsf3x+0x18>
    20f4:	71 f4       	brne	.+28     	; 0x2112 <__addsf3x+0x30>
    20f6:	9e f5       	brtc	.+102    	; 0x215e <__addsf3x+0x7c>
    20f8:	52 c2       	rjmp	.+1188   	; 0x259e <__fp_zero>
    20fa:	0e f4       	brtc	.+2      	; 0x20fe <__addsf3x+0x1c>
    20fc:	e0 95       	com	r30
    20fe:	0b 2e       	mov	r0, r27
    2100:	ba 2f       	mov	r27, r26
    2102:	a0 2d       	mov	r26, r0
    2104:	0b 01       	movw	r0, r22
    2106:	b9 01       	movw	r22, r18
    2108:	90 01       	movw	r18, r0
    210a:	0c 01       	movw	r0, r24
    210c:	ca 01       	movw	r24, r20
    210e:	a0 01       	movw	r20, r0
    2110:	11 24       	eor	r1, r1
    2112:	ff 27       	eor	r31, r31
    2114:	59 1b       	sub	r21, r25
    2116:	99 f0       	breq	.+38     	; 0x213e <__addsf3x+0x5c>
    2118:	59 3f       	cpi	r21, 0xF9	; 249
    211a:	50 f4       	brcc	.+20     	; 0x2130 <__addsf3x+0x4e>
    211c:	50 3e       	cpi	r21, 0xE0	; 224
    211e:	68 f1       	brcs	.+90     	; 0x217a <__addsf3x+0x98>
    2120:	1a 16       	cp	r1, r26
    2122:	f0 40       	sbci	r31, 0x00	; 0
    2124:	a2 2f       	mov	r26, r18
    2126:	23 2f       	mov	r18, r19
    2128:	34 2f       	mov	r19, r20
    212a:	44 27       	eor	r20, r20
    212c:	58 5f       	subi	r21, 0xF8	; 248
    212e:	f3 cf       	rjmp	.-26     	; 0x2116 <__addsf3x+0x34>
    2130:	46 95       	lsr	r20
    2132:	37 95       	ror	r19
    2134:	27 95       	ror	r18
    2136:	a7 95       	ror	r26
    2138:	f0 40       	sbci	r31, 0x00	; 0
    213a:	53 95       	inc	r21
    213c:	c9 f7       	brne	.-14     	; 0x2130 <__addsf3x+0x4e>
    213e:	7e f4       	brtc	.+30     	; 0x215e <__addsf3x+0x7c>
    2140:	1f 16       	cp	r1, r31
    2142:	ba 0b       	sbc	r27, r26
    2144:	62 0b       	sbc	r22, r18
    2146:	73 0b       	sbc	r23, r19
    2148:	84 0b       	sbc	r24, r20
    214a:	ba f0       	brmi	.+46     	; 0x217a <__addsf3x+0x98>
    214c:	91 50       	subi	r25, 0x01	; 1
    214e:	a1 f0       	breq	.+40     	; 0x2178 <__addsf3x+0x96>
    2150:	ff 0f       	add	r31, r31
    2152:	bb 1f       	adc	r27, r27
    2154:	66 1f       	adc	r22, r22
    2156:	77 1f       	adc	r23, r23
    2158:	88 1f       	adc	r24, r24
    215a:	c2 f7       	brpl	.-16     	; 0x214c <__addsf3x+0x6a>
    215c:	0e c0       	rjmp	.+28     	; 0x217a <__addsf3x+0x98>
    215e:	ba 0f       	add	r27, r26
    2160:	62 1f       	adc	r22, r18
    2162:	73 1f       	adc	r23, r19
    2164:	84 1f       	adc	r24, r20
    2166:	48 f4       	brcc	.+18     	; 0x217a <__addsf3x+0x98>
    2168:	87 95       	ror	r24
    216a:	77 95       	ror	r23
    216c:	67 95       	ror	r22
    216e:	b7 95       	ror	r27
    2170:	f7 95       	ror	r31
    2172:	9e 3f       	cpi	r25, 0xFE	; 254
    2174:	08 f0       	brcs	.+2      	; 0x2178 <__addsf3x+0x96>
    2176:	b3 cf       	rjmp	.-154    	; 0x20de <__addsf3+0x1e>
    2178:	93 95       	inc	r25
    217a:	88 0f       	add	r24, r24
    217c:	08 f0       	brcs	.+2      	; 0x2180 <__addsf3x+0x9e>
    217e:	99 27       	eor	r25, r25
    2180:	ee 0f       	add	r30, r30
    2182:	97 95       	ror	r25
    2184:	87 95       	ror	r24
    2186:	08 95       	ret
    2188:	90 d1       	rcall	.+800    	; 0x24aa <__fp_pscA>
    218a:	58 f0       	brcs	.+22     	; 0x21a2 <__addsf3x+0xc0>
    218c:	80 e8       	ldi	r24, 0x80	; 128
    218e:	91 e0       	ldi	r25, 0x01	; 1
    2190:	09 f4       	brne	.+2      	; 0x2194 <__addsf3x+0xb2>
    2192:	9e ef       	ldi	r25, 0xFE	; 254
    2194:	91 d1       	rcall	.+802    	; 0x24b8 <__fp_pscB>
    2196:	28 f0       	brcs	.+10     	; 0x21a2 <__addsf3x+0xc0>
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	51 e0       	ldi	r21, 0x01	; 1
    219c:	59 f4       	brne	.+22     	; 0x21b4 <atan2+0xe>
    219e:	5e ef       	ldi	r21, 0xFE	; 254
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <atan2+0xe>
    21a2:	5b c1       	rjmp	.+694    	; 0x245a <__fp_nan>
    21a4:	fc c1       	rjmp	.+1016   	; 0x259e <__fp_zero>

000021a6 <atan2>:
    21a6:	e9 2f       	mov	r30, r25
    21a8:	e0 78       	andi	r30, 0x80	; 128
    21aa:	d7 d1       	rcall	.+942    	; 0x255a <__fp_split3>
    21ac:	68 f3       	brcs	.-38     	; 0x2188 <__addsf3x+0xa6>
    21ae:	09 2e       	mov	r0, r25
    21b0:	05 2a       	or	r0, r21
    21b2:	c1 f3       	breq	.-16     	; 0x21a4 <__addsf3x+0xc2>
    21b4:	26 17       	cp	r18, r22
    21b6:	37 07       	cpc	r19, r23
    21b8:	48 07       	cpc	r20, r24
    21ba:	59 07       	cpc	r21, r25
    21bc:	38 f0       	brcs	.+14     	; 0x21cc <atan2+0x26>
    21be:	0e 2e       	mov	r0, r30
    21c0:	07 f8       	bld	r0, 7
    21c2:	e0 25       	eor	r30, r0
    21c4:	69 f0       	breq	.+26     	; 0x21e0 <atan2+0x3a>
    21c6:	e0 25       	eor	r30, r0
    21c8:	e0 64       	ori	r30, 0x40	; 64
    21ca:	0a c0       	rjmp	.+20     	; 0x21e0 <atan2+0x3a>
    21cc:	ef 63       	ori	r30, 0x3F	; 63
    21ce:	07 f8       	bld	r0, 7
    21d0:	00 94       	com	r0
    21d2:	07 fa       	bst	r0, 7
    21d4:	db 01       	movw	r26, r22
    21d6:	b9 01       	movw	r22, r18
    21d8:	9d 01       	movw	r18, r26
    21da:	dc 01       	movw	r26, r24
    21dc:	ca 01       	movw	r24, r20
    21de:	ad 01       	movw	r20, r26
    21e0:	ef 93       	push	r30
    21e2:	4a d0       	rcall	.+148    	; 0x2278 <__divsf3_pse>
    21e4:	98 d1       	rcall	.+816    	; 0x2516 <__fp_round>
    21e6:	0a d0       	rcall	.+20     	; 0x21fc <atan>
    21e8:	5f 91       	pop	r21
    21ea:	55 23       	and	r21, r21
    21ec:	31 f0       	breq	.+12     	; 0x21fa <atan2+0x54>
    21ee:	2b ed       	ldi	r18, 0xDB	; 219
    21f0:	3f e0       	ldi	r19, 0x0F	; 15
    21f2:	49 e4       	ldi	r20, 0x49	; 73
    21f4:	50 fd       	sbrc	r21, 0
    21f6:	49 ec       	ldi	r20, 0xC9	; 201
    21f8:	63 cf       	rjmp	.-314    	; 0x20c0 <__addsf3>
    21fa:	08 95       	ret

000021fc <atan>:
    21fc:	df 93       	push	r29
    21fe:	dd 27       	eor	r29, r29
    2200:	b9 2f       	mov	r27, r25
    2202:	bf 77       	andi	r27, 0x7F	; 127
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	5f e3       	ldi	r21, 0x3F	; 63
    2208:	16 16       	cp	r1, r22
    220a:	17 06       	cpc	r1, r23
    220c:	48 07       	cpc	r20, r24
    220e:	5b 07       	cpc	r21, r27
    2210:	10 f4       	brcc	.+4      	; 0x2216 <atan+0x1a>
    2212:	d9 2f       	mov	r29, r25
    2214:	cf d1       	rcall	.+926    	; 0x25b4 <inverse>
    2216:	9f 93       	push	r25
    2218:	8f 93       	push	r24
    221a:	7f 93       	push	r23
    221c:	6f 93       	push	r22
    221e:	7c d2       	rcall	.+1272   	; 0x2718 <square>
    2220:	ec ea       	ldi	r30, 0xAC	; 172
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	1d d1       	rcall	.+570    	; 0x2460 <__fp_powser>
    2226:	77 d1       	rcall	.+750    	; 0x2516 <__fp_round>
    2228:	2f 91       	pop	r18
    222a:	3f 91       	pop	r19
    222c:	4f 91       	pop	r20
    222e:	5f 91       	pop	r21
    2230:	d4 d1       	rcall	.+936    	; 0x25da <__mulsf3x>
    2232:	dd 23       	and	r29, r29
    2234:	49 f0       	breq	.+18     	; 0x2248 <atan+0x4c>
    2236:	90 58       	subi	r25, 0x80	; 128
    2238:	a2 ea       	ldi	r26, 0xA2	; 162
    223a:	2a ed       	ldi	r18, 0xDA	; 218
    223c:	3f e0       	ldi	r19, 0x0F	; 15
    223e:	49 ec       	ldi	r20, 0xC9	; 201
    2240:	5f e3       	ldi	r21, 0x3F	; 63
    2242:	d0 78       	andi	r29, 0x80	; 128
    2244:	5d 27       	eor	r21, r29
    2246:	4d df       	rcall	.-358    	; 0x20e2 <__addsf3x>
    2248:	df 91       	pop	r29
    224a:	65 c1       	rjmp	.+714    	; 0x2516 <__fp_round>

0000224c <__cmpsf2>:
    224c:	dc d0       	rcall	.+440    	; 0x2406 <__fp_cmp>
    224e:	08 f4       	brcc	.+2      	; 0x2252 <__cmpsf2+0x6>
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	08 95       	ret

00002254 <cos>:
    2254:	39 d1       	rcall	.+626    	; 0x24c8 <__fp_rempio2>
    2256:	e3 95       	inc	r30
    2258:	6f c1       	rjmp	.+734    	; 0x2538 <__fp_sinus>

0000225a <__divsf3>:
    225a:	0c d0       	rcall	.+24     	; 0x2274 <__divsf3x>
    225c:	5c c1       	rjmp	.+696    	; 0x2516 <__fp_round>
    225e:	2c d1       	rcall	.+600    	; 0x24b8 <__fp_pscB>
    2260:	40 f0       	brcs	.+16     	; 0x2272 <__divsf3+0x18>
    2262:	23 d1       	rcall	.+582    	; 0x24aa <__fp_pscA>
    2264:	30 f0       	brcs	.+12     	; 0x2272 <__divsf3+0x18>
    2266:	21 f4       	brne	.+8      	; 0x2270 <__divsf3+0x16>
    2268:	5f 3f       	cpi	r21, 0xFF	; 255
    226a:	19 f0       	breq	.+6      	; 0x2272 <__divsf3+0x18>
    226c:	f0 c0       	rjmp	.+480    	; 0x244e <__fp_inf>
    226e:	51 11       	cpse	r21, r1
    2270:	97 c1       	rjmp	.+814    	; 0x25a0 <__fp_szero>
    2272:	f3 c0       	rjmp	.+486    	; 0x245a <__fp_nan>

00002274 <__divsf3x>:
    2274:	72 d1       	rcall	.+740    	; 0x255a <__fp_split3>
    2276:	98 f3       	brcs	.-26     	; 0x225e <__divsf3+0x4>

00002278 <__divsf3_pse>:
    2278:	99 23       	and	r25, r25
    227a:	c9 f3       	breq	.-14     	; 0x226e <__divsf3+0x14>
    227c:	55 23       	and	r21, r21
    227e:	b1 f3       	breq	.-20     	; 0x226c <__divsf3+0x12>
    2280:	95 1b       	sub	r25, r21
    2282:	55 0b       	sbc	r21, r21
    2284:	bb 27       	eor	r27, r27
    2286:	aa 27       	eor	r26, r26
    2288:	62 17       	cp	r22, r18
    228a:	73 07       	cpc	r23, r19
    228c:	84 07       	cpc	r24, r20
    228e:	38 f0       	brcs	.+14     	; 0x229e <__divsf3_pse+0x26>
    2290:	9f 5f       	subi	r25, 0xFF	; 255
    2292:	5f 4f       	sbci	r21, 0xFF	; 255
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	44 1f       	adc	r20, r20
    229a:	aa 1f       	adc	r26, r26
    229c:	a9 f3       	breq	.-22     	; 0x2288 <__divsf3_pse+0x10>
    229e:	33 d0       	rcall	.+102    	; 0x2306 <__divsf3_pse+0x8e>
    22a0:	0e 2e       	mov	r0, r30
    22a2:	3a f0       	brmi	.+14     	; 0x22b2 <__divsf3_pse+0x3a>
    22a4:	e0 e8       	ldi	r30, 0x80	; 128
    22a6:	30 d0       	rcall	.+96     	; 0x2308 <__divsf3_pse+0x90>
    22a8:	91 50       	subi	r25, 0x01	; 1
    22aa:	50 40       	sbci	r21, 0x00	; 0
    22ac:	e6 95       	lsr	r30
    22ae:	00 1c       	adc	r0, r0
    22b0:	ca f7       	brpl	.-14     	; 0x22a4 <__divsf3_pse+0x2c>
    22b2:	29 d0       	rcall	.+82     	; 0x2306 <__divsf3_pse+0x8e>
    22b4:	fe 2f       	mov	r31, r30
    22b6:	27 d0       	rcall	.+78     	; 0x2306 <__divsf3_pse+0x8e>
    22b8:	66 0f       	add	r22, r22
    22ba:	77 1f       	adc	r23, r23
    22bc:	88 1f       	adc	r24, r24
    22be:	bb 1f       	adc	r27, r27
    22c0:	26 17       	cp	r18, r22
    22c2:	37 07       	cpc	r19, r23
    22c4:	48 07       	cpc	r20, r24
    22c6:	ab 07       	cpc	r26, r27
    22c8:	b0 e8       	ldi	r27, 0x80	; 128
    22ca:	09 f0       	breq	.+2      	; 0x22ce <__divsf3_pse+0x56>
    22cc:	bb 0b       	sbc	r27, r27
    22ce:	80 2d       	mov	r24, r0
    22d0:	bf 01       	movw	r22, r30
    22d2:	ff 27       	eor	r31, r31
    22d4:	93 58       	subi	r25, 0x83	; 131
    22d6:	5f 4f       	sbci	r21, 0xFF	; 255
    22d8:	2a f0       	brmi	.+10     	; 0x22e4 <__divsf3_pse+0x6c>
    22da:	9e 3f       	cpi	r25, 0xFE	; 254
    22dc:	51 05       	cpc	r21, r1
    22de:	68 f0       	brcs	.+26     	; 0x22fa <__divsf3_pse+0x82>
    22e0:	b6 c0       	rjmp	.+364    	; 0x244e <__fp_inf>
    22e2:	5e c1       	rjmp	.+700    	; 0x25a0 <__fp_szero>
    22e4:	5f 3f       	cpi	r21, 0xFF	; 255
    22e6:	ec f3       	brlt	.-6      	; 0x22e2 <__divsf3_pse+0x6a>
    22e8:	98 3e       	cpi	r25, 0xE8	; 232
    22ea:	dc f3       	brlt	.-10     	; 0x22e2 <__divsf3_pse+0x6a>
    22ec:	86 95       	lsr	r24
    22ee:	77 95       	ror	r23
    22f0:	67 95       	ror	r22
    22f2:	b7 95       	ror	r27
    22f4:	f7 95       	ror	r31
    22f6:	9f 5f       	subi	r25, 0xFF	; 255
    22f8:	c9 f7       	brne	.-14     	; 0x22ec <__divsf3_pse+0x74>
    22fa:	88 0f       	add	r24, r24
    22fc:	91 1d       	adc	r25, r1
    22fe:	96 95       	lsr	r25
    2300:	87 95       	ror	r24
    2302:	97 f9       	bld	r25, 7
    2304:	08 95       	ret
    2306:	e1 e0       	ldi	r30, 0x01	; 1
    2308:	66 0f       	add	r22, r22
    230a:	77 1f       	adc	r23, r23
    230c:	88 1f       	adc	r24, r24
    230e:	bb 1f       	adc	r27, r27
    2310:	62 17       	cp	r22, r18
    2312:	73 07       	cpc	r23, r19
    2314:	84 07       	cpc	r24, r20
    2316:	ba 07       	cpc	r27, r26
    2318:	20 f0       	brcs	.+8      	; 0x2322 <__divsf3_pse+0xaa>
    231a:	62 1b       	sub	r22, r18
    231c:	73 0b       	sbc	r23, r19
    231e:	84 0b       	sbc	r24, r20
    2320:	ba 0b       	sbc	r27, r26
    2322:	ee 1f       	adc	r30, r30
    2324:	88 f7       	brcc	.-30     	; 0x2308 <__divsf3_pse+0x90>
    2326:	e0 95       	com	r30
    2328:	08 95       	ret

0000232a <__fixsfsi>:
    232a:	04 d0       	rcall	.+8      	; 0x2334 <__fixunssfsi>
    232c:	68 94       	set
    232e:	b1 11       	cpse	r27, r1
    2330:	37 c1       	rjmp	.+622    	; 0x25a0 <__fp_szero>
    2332:	08 95       	ret

00002334 <__fixunssfsi>:
    2334:	1a d1       	rcall	.+564    	; 0x256a <__fp_splitA>
    2336:	88 f0       	brcs	.+34     	; 0x235a <__fixunssfsi+0x26>
    2338:	9f 57       	subi	r25, 0x7F	; 127
    233a:	90 f0       	brcs	.+36     	; 0x2360 <__fixunssfsi+0x2c>
    233c:	b9 2f       	mov	r27, r25
    233e:	99 27       	eor	r25, r25
    2340:	b7 51       	subi	r27, 0x17	; 23
    2342:	a0 f0       	brcs	.+40     	; 0x236c <__fixunssfsi+0x38>
    2344:	d1 f0       	breq	.+52     	; 0x237a <__fixunssfsi+0x46>
    2346:	66 0f       	add	r22, r22
    2348:	77 1f       	adc	r23, r23
    234a:	88 1f       	adc	r24, r24
    234c:	99 1f       	adc	r25, r25
    234e:	1a f0       	brmi	.+6      	; 0x2356 <__fixunssfsi+0x22>
    2350:	ba 95       	dec	r27
    2352:	c9 f7       	brne	.-14     	; 0x2346 <__fixunssfsi+0x12>
    2354:	12 c0       	rjmp	.+36     	; 0x237a <__fixunssfsi+0x46>
    2356:	b1 30       	cpi	r27, 0x01	; 1
    2358:	81 f0       	breq	.+32     	; 0x237a <__fixunssfsi+0x46>
    235a:	21 d1       	rcall	.+578    	; 0x259e <__fp_zero>
    235c:	b1 e0       	ldi	r27, 0x01	; 1
    235e:	08 95       	ret
    2360:	1e c1       	rjmp	.+572    	; 0x259e <__fp_zero>
    2362:	67 2f       	mov	r22, r23
    2364:	78 2f       	mov	r23, r24
    2366:	88 27       	eor	r24, r24
    2368:	b8 5f       	subi	r27, 0xF8	; 248
    236a:	39 f0       	breq	.+14     	; 0x237a <__fixunssfsi+0x46>
    236c:	b9 3f       	cpi	r27, 0xF9	; 249
    236e:	cc f3       	brlt	.-14     	; 0x2362 <__fixunssfsi+0x2e>
    2370:	86 95       	lsr	r24
    2372:	77 95       	ror	r23
    2374:	67 95       	ror	r22
    2376:	b3 95       	inc	r27
    2378:	d9 f7       	brne	.-10     	; 0x2370 <__fixunssfsi+0x3c>
    237a:	3e f4       	brtc	.+14     	; 0x238a <__fixunssfsi+0x56>
    237c:	90 95       	com	r25
    237e:	80 95       	com	r24
    2380:	70 95       	com	r23
    2382:	61 95       	neg	r22
    2384:	7f 4f       	sbci	r23, 0xFF	; 255
    2386:	8f 4f       	sbci	r24, 0xFF	; 255
    2388:	9f 4f       	sbci	r25, 0xFF	; 255
    238a:	08 95       	ret

0000238c <__floatunsisf>:
    238c:	e8 94       	clt
    238e:	09 c0       	rjmp	.+18     	; 0x23a2 <__floatsisf+0x12>

00002390 <__floatsisf>:
    2390:	97 fb       	bst	r25, 7
    2392:	3e f4       	brtc	.+14     	; 0x23a2 <__floatsisf+0x12>
    2394:	90 95       	com	r25
    2396:	80 95       	com	r24
    2398:	70 95       	com	r23
    239a:	61 95       	neg	r22
    239c:	7f 4f       	sbci	r23, 0xFF	; 255
    239e:	8f 4f       	sbci	r24, 0xFF	; 255
    23a0:	9f 4f       	sbci	r25, 0xFF	; 255
    23a2:	99 23       	and	r25, r25
    23a4:	a9 f0       	breq	.+42     	; 0x23d0 <__floatsisf+0x40>
    23a6:	f9 2f       	mov	r31, r25
    23a8:	96 e9       	ldi	r25, 0x96	; 150
    23aa:	bb 27       	eor	r27, r27
    23ac:	93 95       	inc	r25
    23ae:	f6 95       	lsr	r31
    23b0:	87 95       	ror	r24
    23b2:	77 95       	ror	r23
    23b4:	67 95       	ror	r22
    23b6:	b7 95       	ror	r27
    23b8:	f1 11       	cpse	r31, r1
    23ba:	f8 cf       	rjmp	.-16     	; 0x23ac <__floatsisf+0x1c>
    23bc:	fa f4       	brpl	.+62     	; 0x23fc <__floatsisf+0x6c>
    23be:	bb 0f       	add	r27, r27
    23c0:	11 f4       	brne	.+4      	; 0x23c6 <__floatsisf+0x36>
    23c2:	60 ff       	sbrs	r22, 0
    23c4:	1b c0       	rjmp	.+54     	; 0x23fc <__floatsisf+0x6c>
    23c6:	6f 5f       	subi	r22, 0xFF	; 255
    23c8:	7f 4f       	sbci	r23, 0xFF	; 255
    23ca:	8f 4f       	sbci	r24, 0xFF	; 255
    23cc:	9f 4f       	sbci	r25, 0xFF	; 255
    23ce:	16 c0       	rjmp	.+44     	; 0x23fc <__floatsisf+0x6c>
    23d0:	88 23       	and	r24, r24
    23d2:	11 f0       	breq	.+4      	; 0x23d8 <__floatsisf+0x48>
    23d4:	96 e9       	ldi	r25, 0x96	; 150
    23d6:	11 c0       	rjmp	.+34     	; 0x23fa <__floatsisf+0x6a>
    23d8:	77 23       	and	r23, r23
    23da:	21 f0       	breq	.+8      	; 0x23e4 <__floatsisf+0x54>
    23dc:	9e e8       	ldi	r25, 0x8E	; 142
    23de:	87 2f       	mov	r24, r23
    23e0:	76 2f       	mov	r23, r22
    23e2:	05 c0       	rjmp	.+10     	; 0x23ee <__floatsisf+0x5e>
    23e4:	66 23       	and	r22, r22
    23e6:	71 f0       	breq	.+28     	; 0x2404 <__floatsisf+0x74>
    23e8:	96 e8       	ldi	r25, 0x86	; 134
    23ea:	86 2f       	mov	r24, r22
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	60 e0       	ldi	r22, 0x00	; 0
    23f0:	2a f0       	brmi	.+10     	; 0x23fc <__floatsisf+0x6c>
    23f2:	9a 95       	dec	r25
    23f4:	66 0f       	add	r22, r22
    23f6:	77 1f       	adc	r23, r23
    23f8:	88 1f       	adc	r24, r24
    23fa:	da f7       	brpl	.-10     	; 0x23f2 <__floatsisf+0x62>
    23fc:	88 0f       	add	r24, r24
    23fe:	96 95       	lsr	r25
    2400:	87 95       	ror	r24
    2402:	97 f9       	bld	r25, 7
    2404:	08 95       	ret

00002406 <__fp_cmp>:
    2406:	99 0f       	add	r25, r25
    2408:	00 08       	sbc	r0, r0
    240a:	55 0f       	add	r21, r21
    240c:	aa 0b       	sbc	r26, r26
    240e:	e0 e8       	ldi	r30, 0x80	; 128
    2410:	fe ef       	ldi	r31, 0xFE	; 254
    2412:	16 16       	cp	r1, r22
    2414:	17 06       	cpc	r1, r23
    2416:	e8 07       	cpc	r30, r24
    2418:	f9 07       	cpc	r31, r25
    241a:	c0 f0       	brcs	.+48     	; 0x244c <__fp_cmp+0x46>
    241c:	12 16       	cp	r1, r18
    241e:	13 06       	cpc	r1, r19
    2420:	e4 07       	cpc	r30, r20
    2422:	f5 07       	cpc	r31, r21
    2424:	98 f0       	brcs	.+38     	; 0x244c <__fp_cmp+0x46>
    2426:	62 1b       	sub	r22, r18
    2428:	73 0b       	sbc	r23, r19
    242a:	84 0b       	sbc	r24, r20
    242c:	95 0b       	sbc	r25, r21
    242e:	39 f4       	brne	.+14     	; 0x243e <__fp_cmp+0x38>
    2430:	0a 26       	eor	r0, r26
    2432:	61 f0       	breq	.+24     	; 0x244c <__fp_cmp+0x46>
    2434:	23 2b       	or	r18, r19
    2436:	24 2b       	or	r18, r20
    2438:	25 2b       	or	r18, r21
    243a:	21 f4       	brne	.+8      	; 0x2444 <__fp_cmp+0x3e>
    243c:	08 95       	ret
    243e:	0a 26       	eor	r0, r26
    2440:	09 f4       	brne	.+2      	; 0x2444 <__fp_cmp+0x3e>
    2442:	a1 40       	sbci	r26, 0x01	; 1
    2444:	a6 95       	lsr	r26
    2446:	8f ef       	ldi	r24, 0xFF	; 255
    2448:	81 1d       	adc	r24, r1
    244a:	81 1d       	adc	r24, r1
    244c:	08 95       	ret

0000244e <__fp_inf>:
    244e:	97 f9       	bld	r25, 7
    2450:	9f 67       	ori	r25, 0x7F	; 127
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	70 e0       	ldi	r23, 0x00	; 0
    2456:	60 e0       	ldi	r22, 0x00	; 0
    2458:	08 95       	ret

0000245a <__fp_nan>:
    245a:	9f ef       	ldi	r25, 0xFF	; 255
    245c:	80 ec       	ldi	r24, 0xC0	; 192
    245e:	08 95       	ret

00002460 <__fp_powser>:
    2460:	df 93       	push	r29
    2462:	cf 93       	push	r28
    2464:	1f 93       	push	r17
    2466:	0f 93       	push	r16
    2468:	ff 92       	push	r15
    246a:	ef 92       	push	r14
    246c:	df 92       	push	r13
    246e:	7b 01       	movw	r14, r22
    2470:	8c 01       	movw	r16, r24
    2472:	68 94       	set
    2474:	05 c0       	rjmp	.+10     	; 0x2480 <__fp_powser+0x20>
    2476:	da 2e       	mov	r13, r26
    2478:	ef 01       	movw	r28, r30
    247a:	af d0       	rcall	.+350    	; 0x25da <__mulsf3x>
    247c:	fe 01       	movw	r30, r28
    247e:	e8 94       	clt
    2480:	a5 91       	lpm	r26, Z+
    2482:	25 91       	lpm	r18, Z+
    2484:	35 91       	lpm	r19, Z+
    2486:	45 91       	lpm	r20, Z+
    2488:	55 91       	lpm	r21, Z+
    248a:	ae f3       	brts	.-22     	; 0x2476 <__fp_powser+0x16>
    248c:	ef 01       	movw	r28, r30
    248e:	29 de       	rcall	.-942    	; 0x20e2 <__addsf3x>
    2490:	fe 01       	movw	r30, r28
    2492:	97 01       	movw	r18, r14
    2494:	a8 01       	movw	r20, r16
    2496:	da 94       	dec	r13
    2498:	79 f7       	brne	.-34     	; 0x2478 <__fp_powser+0x18>
    249a:	df 90       	pop	r13
    249c:	ef 90       	pop	r14
    249e:	ff 90       	pop	r15
    24a0:	0f 91       	pop	r16
    24a2:	1f 91       	pop	r17
    24a4:	cf 91       	pop	r28
    24a6:	df 91       	pop	r29
    24a8:	08 95       	ret

000024aa <__fp_pscA>:
    24aa:	00 24       	eor	r0, r0
    24ac:	0a 94       	dec	r0
    24ae:	16 16       	cp	r1, r22
    24b0:	17 06       	cpc	r1, r23
    24b2:	18 06       	cpc	r1, r24
    24b4:	09 06       	cpc	r0, r25
    24b6:	08 95       	ret

000024b8 <__fp_pscB>:
    24b8:	00 24       	eor	r0, r0
    24ba:	0a 94       	dec	r0
    24bc:	12 16       	cp	r1, r18
    24be:	13 06       	cpc	r1, r19
    24c0:	14 06       	cpc	r1, r20
    24c2:	05 06       	cpc	r0, r21
    24c4:	08 95       	ret
    24c6:	c9 cf       	rjmp	.-110    	; 0x245a <__fp_nan>

000024c8 <__fp_rempio2>:
    24c8:	50 d0       	rcall	.+160    	; 0x256a <__fp_splitA>
    24ca:	e8 f3       	brcs	.-6      	; 0x24c6 <__fp_pscB+0xe>
    24cc:	e8 94       	clt
    24ce:	e0 e0       	ldi	r30, 0x00	; 0
    24d0:	bb 27       	eor	r27, r27
    24d2:	9f 57       	subi	r25, 0x7F	; 127
    24d4:	f0 f0       	brcs	.+60     	; 0x2512 <__fp_rempio2+0x4a>
    24d6:	2a ed       	ldi	r18, 0xDA	; 218
    24d8:	3f e0       	ldi	r19, 0x0F	; 15
    24da:	49 ec       	ldi	r20, 0xC9	; 201
    24dc:	06 c0       	rjmp	.+12     	; 0x24ea <__fp_rempio2+0x22>
    24de:	ee 0f       	add	r30, r30
    24e0:	bb 0f       	add	r27, r27
    24e2:	66 1f       	adc	r22, r22
    24e4:	77 1f       	adc	r23, r23
    24e6:	88 1f       	adc	r24, r24
    24e8:	28 f0       	brcs	.+10     	; 0x24f4 <__fp_rempio2+0x2c>
    24ea:	b2 3a       	cpi	r27, 0xA2	; 162
    24ec:	62 07       	cpc	r22, r18
    24ee:	73 07       	cpc	r23, r19
    24f0:	84 07       	cpc	r24, r20
    24f2:	28 f0       	brcs	.+10     	; 0x24fe <__fp_rempio2+0x36>
    24f4:	b2 5a       	subi	r27, 0xA2	; 162
    24f6:	62 0b       	sbc	r22, r18
    24f8:	73 0b       	sbc	r23, r19
    24fa:	84 0b       	sbc	r24, r20
    24fc:	e3 95       	inc	r30
    24fe:	9a 95       	dec	r25
    2500:	72 f7       	brpl	.-36     	; 0x24de <__fp_rempio2+0x16>
    2502:	80 38       	cpi	r24, 0x80	; 128
    2504:	30 f4       	brcc	.+12     	; 0x2512 <__fp_rempio2+0x4a>
    2506:	9a 95       	dec	r25
    2508:	bb 0f       	add	r27, r27
    250a:	66 1f       	adc	r22, r22
    250c:	77 1f       	adc	r23, r23
    250e:	88 1f       	adc	r24, r24
    2510:	d2 f7       	brpl	.-12     	; 0x2506 <__fp_rempio2+0x3e>
    2512:	90 48       	sbci	r25, 0x80	; 128
    2514:	06 c1       	rjmp	.+524    	; 0x2722 <__fp_mpack_finite>

00002516 <__fp_round>:
    2516:	09 2e       	mov	r0, r25
    2518:	03 94       	inc	r0
    251a:	00 0c       	add	r0, r0
    251c:	11 f4       	brne	.+4      	; 0x2522 <__fp_round+0xc>
    251e:	88 23       	and	r24, r24
    2520:	52 f0       	brmi	.+20     	; 0x2536 <__fp_round+0x20>
    2522:	bb 0f       	add	r27, r27
    2524:	40 f4       	brcc	.+16     	; 0x2536 <__fp_round+0x20>
    2526:	bf 2b       	or	r27, r31
    2528:	11 f4       	brne	.+4      	; 0x252e <__fp_round+0x18>
    252a:	60 ff       	sbrs	r22, 0
    252c:	04 c0       	rjmp	.+8      	; 0x2536 <__fp_round+0x20>
    252e:	6f 5f       	subi	r22, 0xFF	; 255
    2530:	7f 4f       	sbci	r23, 0xFF	; 255
    2532:	8f 4f       	sbci	r24, 0xFF	; 255
    2534:	9f 4f       	sbci	r25, 0xFF	; 255
    2536:	08 95       	ret

00002538 <__fp_sinus>:
    2538:	ef 93       	push	r30
    253a:	e0 ff       	sbrs	r30, 0
    253c:	06 c0       	rjmp	.+12     	; 0x254a <__fp_sinus+0x12>
    253e:	a2 ea       	ldi	r26, 0xA2	; 162
    2540:	2a ed       	ldi	r18, 0xDA	; 218
    2542:	3f e0       	ldi	r19, 0x0F	; 15
    2544:	49 ec       	ldi	r20, 0xC9	; 201
    2546:	5f eb       	ldi	r21, 0xBF	; 191
    2548:	cc dd       	rcall	.-1128   	; 0x20e2 <__addsf3x>
    254a:	e5 df       	rcall	.-54     	; 0x2516 <__fp_round>
    254c:	0f 90       	pop	r0
    254e:	03 94       	inc	r0
    2550:	01 fc       	sbrc	r0, 1
    2552:	90 58       	subi	r25, 0x80	; 128
    2554:	e9 ed       	ldi	r30, 0xD9	; 217
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	f7 c0       	rjmp	.+494    	; 0x2748 <__fp_powsodd>

0000255a <__fp_split3>:
    255a:	57 fd       	sbrc	r21, 7
    255c:	90 58       	subi	r25, 0x80	; 128
    255e:	44 0f       	add	r20, r20
    2560:	55 1f       	adc	r21, r21
    2562:	59 f0       	breq	.+22     	; 0x257a <__fp_splitA+0x10>
    2564:	5f 3f       	cpi	r21, 0xFF	; 255
    2566:	71 f0       	breq	.+28     	; 0x2584 <__fp_splitA+0x1a>
    2568:	47 95       	ror	r20

0000256a <__fp_splitA>:
    256a:	88 0f       	add	r24, r24
    256c:	97 fb       	bst	r25, 7
    256e:	99 1f       	adc	r25, r25
    2570:	61 f0       	breq	.+24     	; 0x258a <__fp_splitA+0x20>
    2572:	9f 3f       	cpi	r25, 0xFF	; 255
    2574:	79 f0       	breq	.+30     	; 0x2594 <__fp_splitA+0x2a>
    2576:	87 95       	ror	r24
    2578:	08 95       	ret
    257a:	12 16       	cp	r1, r18
    257c:	13 06       	cpc	r1, r19
    257e:	14 06       	cpc	r1, r20
    2580:	55 1f       	adc	r21, r21
    2582:	f2 cf       	rjmp	.-28     	; 0x2568 <__fp_split3+0xe>
    2584:	46 95       	lsr	r20
    2586:	f1 df       	rcall	.-30     	; 0x256a <__fp_splitA>
    2588:	08 c0       	rjmp	.+16     	; 0x259a <__fp_splitA+0x30>
    258a:	16 16       	cp	r1, r22
    258c:	17 06       	cpc	r1, r23
    258e:	18 06       	cpc	r1, r24
    2590:	99 1f       	adc	r25, r25
    2592:	f1 cf       	rjmp	.-30     	; 0x2576 <__fp_splitA+0xc>
    2594:	86 95       	lsr	r24
    2596:	71 05       	cpc	r23, r1
    2598:	61 05       	cpc	r22, r1
    259a:	08 94       	sec
    259c:	08 95       	ret

0000259e <__fp_zero>:
    259e:	e8 94       	clt

000025a0 <__fp_szero>:
    25a0:	bb 27       	eor	r27, r27
    25a2:	66 27       	eor	r22, r22
    25a4:	77 27       	eor	r23, r23
    25a6:	cb 01       	movw	r24, r22
    25a8:	97 f9       	bld	r25, 7
    25aa:	08 95       	ret

000025ac <__gesf2>:
    25ac:	2c df       	rcall	.-424    	; 0x2406 <__fp_cmp>
    25ae:	08 f4       	brcc	.+2      	; 0x25b2 <__gesf2+0x6>
    25b0:	8f ef       	ldi	r24, 0xFF	; 255
    25b2:	08 95       	ret

000025b4 <inverse>:
    25b4:	9b 01       	movw	r18, r22
    25b6:	ac 01       	movw	r20, r24
    25b8:	60 e0       	ldi	r22, 0x00	; 0
    25ba:	70 e0       	ldi	r23, 0x00	; 0
    25bc:	80 e8       	ldi	r24, 0x80	; 128
    25be:	9f e3       	ldi	r25, 0x3F	; 63
    25c0:	4c ce       	rjmp	.-872    	; 0x225a <__divsf3>

000025c2 <__mulsf3>:
    25c2:	0b d0       	rcall	.+22     	; 0x25da <__mulsf3x>
    25c4:	a8 cf       	rjmp	.-176    	; 0x2516 <__fp_round>
    25c6:	71 df       	rcall	.-286    	; 0x24aa <__fp_pscA>
    25c8:	28 f0       	brcs	.+10     	; 0x25d4 <__mulsf3+0x12>
    25ca:	76 df       	rcall	.-276    	; 0x24b8 <__fp_pscB>
    25cc:	18 f0       	brcs	.+6      	; 0x25d4 <__mulsf3+0x12>
    25ce:	95 23       	and	r25, r21
    25d0:	09 f0       	breq	.+2      	; 0x25d4 <__mulsf3+0x12>
    25d2:	3d cf       	rjmp	.-390    	; 0x244e <__fp_inf>
    25d4:	42 cf       	rjmp	.-380    	; 0x245a <__fp_nan>
    25d6:	11 24       	eor	r1, r1
    25d8:	e3 cf       	rjmp	.-58     	; 0x25a0 <__fp_szero>

000025da <__mulsf3x>:
    25da:	bf df       	rcall	.-130    	; 0x255a <__fp_split3>
    25dc:	a0 f3       	brcs	.-24     	; 0x25c6 <__mulsf3+0x4>

000025de <__mulsf3_pse>:
    25de:	95 9f       	mul	r25, r21
    25e0:	d1 f3       	breq	.-12     	; 0x25d6 <__mulsf3+0x14>
    25e2:	95 0f       	add	r25, r21
    25e4:	50 e0       	ldi	r21, 0x00	; 0
    25e6:	55 1f       	adc	r21, r21
    25e8:	62 9f       	mul	r22, r18
    25ea:	f0 01       	movw	r30, r0
    25ec:	72 9f       	mul	r23, r18
    25ee:	bb 27       	eor	r27, r27
    25f0:	f0 0d       	add	r31, r0
    25f2:	b1 1d       	adc	r27, r1
    25f4:	63 9f       	mul	r22, r19
    25f6:	aa 27       	eor	r26, r26
    25f8:	f0 0d       	add	r31, r0
    25fa:	b1 1d       	adc	r27, r1
    25fc:	aa 1f       	adc	r26, r26
    25fe:	64 9f       	mul	r22, r20
    2600:	66 27       	eor	r22, r22
    2602:	b0 0d       	add	r27, r0
    2604:	a1 1d       	adc	r26, r1
    2606:	66 1f       	adc	r22, r22
    2608:	82 9f       	mul	r24, r18
    260a:	22 27       	eor	r18, r18
    260c:	b0 0d       	add	r27, r0
    260e:	a1 1d       	adc	r26, r1
    2610:	62 1f       	adc	r22, r18
    2612:	73 9f       	mul	r23, r19
    2614:	b0 0d       	add	r27, r0
    2616:	a1 1d       	adc	r26, r1
    2618:	62 1f       	adc	r22, r18
    261a:	83 9f       	mul	r24, r19
    261c:	a0 0d       	add	r26, r0
    261e:	61 1d       	adc	r22, r1
    2620:	22 1f       	adc	r18, r18
    2622:	74 9f       	mul	r23, r20
    2624:	33 27       	eor	r19, r19
    2626:	a0 0d       	add	r26, r0
    2628:	61 1d       	adc	r22, r1
    262a:	23 1f       	adc	r18, r19
    262c:	84 9f       	mul	r24, r20
    262e:	60 0d       	add	r22, r0
    2630:	21 1d       	adc	r18, r1
    2632:	82 2f       	mov	r24, r18
    2634:	76 2f       	mov	r23, r22
    2636:	6a 2f       	mov	r22, r26
    2638:	11 24       	eor	r1, r1
    263a:	9f 57       	subi	r25, 0x7F	; 127
    263c:	50 40       	sbci	r21, 0x00	; 0
    263e:	8a f0       	brmi	.+34     	; 0x2662 <__mulsf3_pse+0x84>
    2640:	e1 f0       	breq	.+56     	; 0x267a <__mulsf3_pse+0x9c>
    2642:	88 23       	and	r24, r24
    2644:	4a f0       	brmi	.+18     	; 0x2658 <__mulsf3_pse+0x7a>
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	bb 1f       	adc	r27, r27
    264c:	66 1f       	adc	r22, r22
    264e:	77 1f       	adc	r23, r23
    2650:	88 1f       	adc	r24, r24
    2652:	91 50       	subi	r25, 0x01	; 1
    2654:	50 40       	sbci	r21, 0x00	; 0
    2656:	a9 f7       	brne	.-22     	; 0x2642 <__mulsf3_pse+0x64>
    2658:	9e 3f       	cpi	r25, 0xFE	; 254
    265a:	51 05       	cpc	r21, r1
    265c:	70 f0       	brcs	.+28     	; 0x267a <__mulsf3_pse+0x9c>
    265e:	f7 ce       	rjmp	.-530    	; 0x244e <__fp_inf>
    2660:	9f cf       	rjmp	.-194    	; 0x25a0 <__fp_szero>
    2662:	5f 3f       	cpi	r21, 0xFF	; 255
    2664:	ec f3       	brlt	.-6      	; 0x2660 <__mulsf3_pse+0x82>
    2666:	98 3e       	cpi	r25, 0xE8	; 232
    2668:	dc f3       	brlt	.-10     	; 0x2660 <__mulsf3_pse+0x82>
    266a:	86 95       	lsr	r24
    266c:	77 95       	ror	r23
    266e:	67 95       	ror	r22
    2670:	b7 95       	ror	r27
    2672:	f7 95       	ror	r31
    2674:	e7 95       	ror	r30
    2676:	9f 5f       	subi	r25, 0xFF	; 255
    2678:	c1 f7       	brne	.-16     	; 0x266a <__mulsf3_pse+0x8c>
    267a:	fe 2b       	or	r31, r30
    267c:	88 0f       	add	r24, r24
    267e:	91 1d       	adc	r25, r1
    2680:	96 95       	lsr	r25
    2682:	87 95       	ror	r24
    2684:	97 f9       	bld	r25, 7
    2686:	08 95       	ret

00002688 <sin>:
    2688:	9f 93       	push	r25
    268a:	1e df       	rcall	.-452    	; 0x24c8 <__fp_rempio2>
    268c:	0f 90       	pop	r0
    268e:	07 fc       	sbrc	r0, 7
    2690:	ee 5f       	subi	r30, 0xFE	; 254
    2692:	52 cf       	rjmp	.-348    	; 0x2538 <__fp_sinus>
    2694:	11 f4       	brne	.+4      	; 0x269a <sin+0x12>
    2696:	0e f4       	brtc	.+2      	; 0x269a <sin+0x12>
    2698:	e0 ce       	rjmp	.-576    	; 0x245a <__fp_nan>
    269a:	41 c0       	rjmp	.+130    	; 0x271e <__fp_mpack>

0000269c <sqrt>:
    269c:	66 df       	rcall	.-308    	; 0x256a <__fp_splitA>
    269e:	d0 f3       	brcs	.-12     	; 0x2694 <sin+0xc>
    26a0:	99 23       	and	r25, r25
    26a2:	d9 f3       	breq	.-10     	; 0x269a <sin+0x12>
    26a4:	ce f3       	brts	.-14     	; 0x2698 <sin+0x10>
    26a6:	9f 57       	subi	r25, 0x7F	; 127
    26a8:	55 0b       	sbc	r21, r21
    26aa:	87 ff       	sbrs	r24, 7
    26ac:	46 d0       	rcall	.+140    	; 0x273a <__fp_norm2>
    26ae:	00 24       	eor	r0, r0
    26b0:	a0 e6       	ldi	r26, 0x60	; 96
    26b2:	40 ea       	ldi	r20, 0xA0	; 160
    26b4:	90 01       	movw	r18, r0
    26b6:	80 58       	subi	r24, 0x80	; 128
    26b8:	56 95       	lsr	r21
    26ba:	97 95       	ror	r25
    26bc:	28 f4       	brcc	.+10     	; 0x26c8 <sqrt+0x2c>
    26be:	80 5c       	subi	r24, 0xC0	; 192
    26c0:	66 0f       	add	r22, r22
    26c2:	77 1f       	adc	r23, r23
    26c4:	88 1f       	adc	r24, r24
    26c6:	20 f0       	brcs	.+8      	; 0x26d0 <sqrt+0x34>
    26c8:	26 17       	cp	r18, r22
    26ca:	37 07       	cpc	r19, r23
    26cc:	48 07       	cpc	r20, r24
    26ce:	30 f4       	brcc	.+12     	; 0x26dc <sqrt+0x40>
    26d0:	62 1b       	sub	r22, r18
    26d2:	73 0b       	sbc	r23, r19
    26d4:	84 0b       	sbc	r24, r20
    26d6:	20 29       	or	r18, r0
    26d8:	31 29       	or	r19, r1
    26da:	4a 2b       	or	r20, r26
    26dc:	a6 95       	lsr	r26
    26de:	17 94       	ror	r1
    26e0:	07 94       	ror	r0
    26e2:	20 25       	eor	r18, r0
    26e4:	31 25       	eor	r19, r1
    26e6:	4a 27       	eor	r20, r26
    26e8:	58 f7       	brcc	.-42     	; 0x26c0 <sqrt+0x24>
    26ea:	66 0f       	add	r22, r22
    26ec:	77 1f       	adc	r23, r23
    26ee:	88 1f       	adc	r24, r24
    26f0:	20 f0       	brcs	.+8      	; 0x26fa <sqrt+0x5e>
    26f2:	26 17       	cp	r18, r22
    26f4:	37 07       	cpc	r19, r23
    26f6:	48 07       	cpc	r20, r24
    26f8:	30 f4       	brcc	.+12     	; 0x2706 <sqrt+0x6a>
    26fa:	62 0b       	sbc	r22, r18
    26fc:	73 0b       	sbc	r23, r19
    26fe:	84 0b       	sbc	r24, r20
    2700:	20 0d       	add	r18, r0
    2702:	31 1d       	adc	r19, r1
    2704:	41 1d       	adc	r20, r1
    2706:	a0 95       	com	r26
    2708:	81 f7       	brne	.-32     	; 0x26ea <sqrt+0x4e>
    270a:	b9 01       	movw	r22, r18
    270c:	84 2f       	mov	r24, r20
    270e:	91 58       	subi	r25, 0x81	; 129
    2710:	88 0f       	add	r24, r24
    2712:	96 95       	lsr	r25
    2714:	87 95       	ror	r24
    2716:	08 95       	ret

00002718 <square>:
    2718:	9b 01       	movw	r18, r22
    271a:	ac 01       	movw	r20, r24
    271c:	52 cf       	rjmp	.-348    	; 0x25c2 <__mulsf3>

0000271e <__fp_mpack>:
    271e:	9f 3f       	cpi	r25, 0xFF	; 255
    2720:	31 f0       	breq	.+12     	; 0x272e <__fp_mpack_finite+0xc>

00002722 <__fp_mpack_finite>:
    2722:	91 50       	subi	r25, 0x01	; 1
    2724:	20 f4       	brcc	.+8      	; 0x272e <__fp_mpack_finite+0xc>
    2726:	87 95       	ror	r24
    2728:	77 95       	ror	r23
    272a:	67 95       	ror	r22
    272c:	b7 95       	ror	r27
    272e:	88 0f       	add	r24, r24
    2730:	91 1d       	adc	r25, r1
    2732:	96 95       	lsr	r25
    2734:	87 95       	ror	r24
    2736:	97 f9       	bld	r25, 7
    2738:	08 95       	ret

0000273a <__fp_norm2>:
    273a:	91 50       	subi	r25, 0x01	; 1
    273c:	50 40       	sbci	r21, 0x00	; 0
    273e:	66 0f       	add	r22, r22
    2740:	77 1f       	adc	r23, r23
    2742:	88 1f       	adc	r24, r24
    2744:	d2 f7       	brpl	.-12     	; 0x273a <__fp_norm2>
    2746:	08 95       	ret

00002748 <__fp_powsodd>:
    2748:	9f 93       	push	r25
    274a:	8f 93       	push	r24
    274c:	7f 93       	push	r23
    274e:	6f 93       	push	r22
    2750:	ff 93       	push	r31
    2752:	ef 93       	push	r30
    2754:	9b 01       	movw	r18, r22
    2756:	ac 01       	movw	r20, r24
    2758:	34 df       	rcall	.-408    	; 0x25c2 <__mulsf3>
    275a:	ef 91       	pop	r30
    275c:	ff 91       	pop	r31
    275e:	80 de       	rcall	.-768    	; 0x2460 <__fp_powser>
    2760:	2f 91       	pop	r18
    2762:	3f 91       	pop	r19
    2764:	4f 91       	pop	r20
    2766:	5f 91       	pop	r21
    2768:	2c cf       	rjmp	.-424    	; 0x25c2 <__mulsf3>

0000276a <_exit>:
    276a:	f8 94       	cli

0000276c <__stop_program>:
    276c:	ff cf       	rjmp	.-2      	; 0x276c <__stop_program>
