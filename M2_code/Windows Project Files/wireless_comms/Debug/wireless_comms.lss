
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00003322  000033b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003322  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  00800110  00800110  000033c6  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  000033c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007c12  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000328  00000000  00000000  00007c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000031b1  00000000  00000000  00007f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bac  00000000  00000000  0000b11a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000160e  00000000  00000000  0000bcc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009d0  00000000  00000000  0000d2d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000c33  00000000  00000000  0000dca4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003b35  00000000  00000000  0000e8d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000330  00000000  00000000  0001240c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 2f 11 	jmp	0x225e	; 0x225e <__vector_3>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 82 12 	jmp	0x2504	; 0x2504 <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 07 11 	jmp	0x220e	; 0x220e <__vector_23>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 dd 10 	jmp	0x21ba	; 0x21ba <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e2 e2       	ldi	r30, 0x22	; 34
     1be:	f3 e3       	ldi	r31, 0x33	; 51
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	a0 31       	cpi	r26, 0x10	; 16
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	a0 e1       	ldi	r26, 0x10	; 16
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a1 3a       	cpi	r26, 0xA1	; 161
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 a8 0c 	call	0x1950	; 0x1950 <main>
     1e0:	0c 94 8f 19 	jmp	0x331e	; 0x331e <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <turnOnBlueLED>:



void turnOnBlueLED(void)
{
	set(PORTD,5);
     1e8:	5d 9a       	sbi	0x0b, 5	; 11
     1ea:	08 95       	ret

000001ec <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
     1ec:	5d 98       	cbi	0x0b, 5	; 11
     1ee:	08 95       	ret

000001f0 <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
     1f0:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
     1f2:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
     1f4:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
     1f6:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
     1f8:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
     1fa:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
     1fc:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
     1fe:	5d 98       	cbi	0x0b, 5	; 11
     200:	08 95       	ret

00000202 <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
     202:	ea e7       	ldi	r30, 0x7A	; 122
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	20 81       	ld	r18, Z
     208:	2f 77       	andi	r18, 0x7F	; 127
     20a:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
     20c:	83 30       	cpi	r24, 0x03	; 3
     20e:	91 05       	cpc	r25, r1
     210:	09 f4       	brne	.+2      	; 0x214 <get_analog_val+0x12>
     212:	49 c0       	rjmp	.+146    	; 0x2a6 <get_analog_val+0xa4>
     214:	3c f4       	brge	.+14     	; 0x224 <get_analog_val+0x22>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	19 f1       	breq	.+70     	; 0x262 <get_analog_val+0x60>
     21c:	9c f5       	brge	.+102    	; 0x284 <get_analog_val+0x82>
     21e:	89 2b       	or	r24, r25
     220:	79 f0       	breq	.+30     	; 0x240 <get_analog_val+0x3e>
     222:	95 c0       	rjmp	.+298    	; 0x34e <get_analog_val+0x14c>
     224:	85 30       	cpi	r24, 0x05	; 5
     226:	91 05       	cpc	r25, r1
     228:	09 f4       	brne	.+2      	; 0x22c <get_analog_val+0x2a>
     22a:	5f c0       	rjmp	.+190    	; 0x2ea <get_analog_val+0xe8>
     22c:	0c f4       	brge	.+2      	; 0x230 <get_analog_val+0x2e>
     22e:	4c c0       	rjmp	.+152    	; 0x2c8 <get_analog_val+0xc6>
     230:	86 30       	cpi	r24, 0x06	; 6
     232:	91 05       	cpc	r25, r1
     234:	09 f4       	brne	.+2      	; 0x238 <get_analog_val+0x36>
     236:	6a c0       	rjmp	.+212    	; 0x30c <get_analog_val+0x10a>
     238:	07 97       	sbiw	r24, 0x07	; 7
     23a:	09 f0       	breq	.+2      	; 0x23e <get_analog_val+0x3c>
     23c:	88 c0       	rjmp	.+272    	; 0x34e <get_analog_val+0x14c>
     23e:	77 c0       	rjmp	.+238    	; 0x32e <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
     240:	eb e7       	ldi	r30, 0x7B	; 123
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8f 7d       	andi	r24, 0xDF	; 223
     248:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8b 7f       	andi	r24, 0xFB	; 251
     252:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     254:	80 81       	ld	r24, Z
     256:	8d 7f       	andi	r24, 0xFD	; 253
     258:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     25a:	80 81       	ld	r24, Z
     25c:	8e 7f       	andi	r24, 0xFE	; 254
     25e:	80 83       	st	Z, r24
            break;
     260:	76 c0       	rjmp	.+236    	; 0x34e <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
     262:	eb e7       	ldi	r30, 0x7B	; 123
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	8b 7f       	andi	r24, 0xFB	; 251
     274:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     276:	80 81       	ld	r24, Z
     278:	8d 7f       	andi	r24, 0xFD	; 253
     27a:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     27c:	80 81       	ld	r24, Z
     27e:	81 60       	ori	r24, 0x01	; 1
     280:	80 83       	st	Z, r24
            break;
     282:	65 c0       	rjmp	.+202    	; 0x34e <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
     284:	eb e7       	ldi	r30, 0x7B	; 123
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	8f 7d       	andi	r24, 0xDF	; 223
     28c:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     28e:	ec e7       	ldi	r30, 0x7C	; 124
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	84 60       	ori	r24, 0x04	; 4
     296:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     298:	80 81       	ld	r24, Z
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     29e:	80 81       	ld	r24, Z
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	80 83       	st	Z, r24
            break;
     2a4:	54 c0       	rjmp	.+168    	; 0x34e <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
     2a6:	eb e7       	ldi	r30, 0x7B	; 123
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 7d       	andi	r24, 0xDF	; 223
     2ae:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2b0:	ec e7       	ldi	r30, 0x7C	; 124
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	84 60       	ori	r24, 0x04	; 4
     2b8:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     2ba:	80 81       	ld	r24, Z
     2bc:	8d 7f       	andi	r24, 0xFD	; 253
     2be:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     2c0:	80 81       	ld	r24, Z
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
            break;
     2c6:	43 c0       	rjmp	.+134    	; 0x34e <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
     2c8:	eb e7       	ldi	r30, 0x7B	; 123
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2d2:	ec e7       	ldi	r30, 0x7C	; 124
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2dc:	80 81       	ld	r24, Z
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     2e2:	80 81       	ld	r24, Z
     2e4:	8e 7f       	andi	r24, 0xFE	; 254
     2e6:	80 83       	st	Z, r24
            break;
     2e8:	32 c0       	rjmp	.+100    	; 0x34e <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
     2ea:	eb e7       	ldi	r30, 0x7B	; 123
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8f 7d       	andi	r24, 0xDF	; 223
     2f2:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2f4:	ec e7       	ldi	r30, 0x7C	; 124
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	84 60       	ori	r24, 0x04	; 4
     2fc:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2fe:	80 81       	ld	r24, Z
     300:	82 60       	ori	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     304:	80 81       	ld	r24, Z
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 83       	st	Z, r24
            break;
     30a:	21 c0       	rjmp	.+66     	; 0x34e <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
     30c:	eb e7       	ldi	r30, 0x7B	; 123
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	80 62       	ori	r24, 0x20	; 32
     314:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     316:	ec e7       	ldi	r30, 0x7C	; 124
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	8b 7f       	andi	r24, 0xFB	; 251
     31e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     320:	80 81       	ld	r24, Z
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     326:	80 81       	ld	r24, Z
     328:	8e 7f       	andi	r24, 0xFE	; 254
     32a:	80 83       	st	Z, r24
            break;
     32c:	10 c0       	rjmp	.+32     	; 0x34e <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
     32e:	eb e7       	ldi	r30, 0x7B	; 123
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	80 62       	ori	r24, 0x20	; 32
     336:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     338:	ec e7       	ldi	r30, 0x7C	; 124
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 7f       	andi	r24, 0xFB	; 251
     340:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     348:	80 81       	ld	r24, Z
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
     34e:	ea e7       	ldi	r30, 0x7A	; 122
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	80 68       	ori	r24, 0x80	; 128
     356:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
     358:	80 81       	ld	r24, Z
     35a:	80 64       	ori	r24, 0x40	; 64
     35c:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
     35e:	80 81       	ld	r24, Z
     360:	80 61       	ori	r24, 0x10	; 16
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
     366:	83 ec       	ldi	r24, 0xC3	; 195
     368:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
     36c:	e3 ec       	ldi	r30, 0xC3	; 195
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8d 7f       	andi	r24, 0xFD	; 253
     374:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
     376:	80 81       	ld	r24, Z
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
     37c:	e2 e7       	ldi	r30, 0x72	; 114
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	84 60       	ori	r24, 0x04	; 4
     384:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
     386:	e1 ec       	ldi	r30, 0xC1	; 193
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 60       	ori	r24, 0x08	; 8
     38e:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
     390:	80 81       	ld	r24, Z
     392:	84 60       	ori	r24, 0x04	; 4
     394:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
     396:	80 81       	ld	r24, Z
     398:	8d 7f       	andi	r24, 0xFD	; 253
     39a:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
     39c:	80 81       	ld	r24, Z
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	80 83       	st	Z, r24
     3a2:	08 95       	ret

000003a4 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
     3a4:	ec e7       	ldi	r30, 0x7C	; 124
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
     3ae:	80 81       	ld	r24, Z
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
     3b4:	aa e7       	ldi	r26, 0x7A	; 122
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	8c 91       	ld	r24, X
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
     3be:	8c 91       	ld	r24, X
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
     3c4:	8c 91       	ld	r24, X
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
     3ca:	ee e7       	ldi	r30, 0x7E	; 126
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
     3d4:	80 81       	ld	r24, Z
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
     3da:	80 81       	ld	r24, Z
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
     3e0:	80 81       	ld	r24, Z
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
     3e6:	80 81       	ld	r24, Z
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
     3ec:	80 81       	ld	r24, Z
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
     3f2:	ed e7       	ldi	r30, 0x7D	; 125
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
     3fc:	80 81       	ld	r24, Z
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
     402:	8c 91       	ld	r24, X
     404:	80 62       	ori	r24, 0x20	; 32
     406:	8c 93       	st	X, r24
     408:	08 95       	ret

0000040a <set_timer0>:



void set_timer0(void)
{
    OCR0A = TIME_TO_TURN;
     40a:	8d e7       	ldi	r24, 0x7D	; 125
     40c:	87 bd       	out	0x27, r24	; 39
    
    //Set to UP to FF
    clear(TCCR0B,WGM02);
     40e:	85 b5       	in	r24, 0x25	; 37
     410:	87 7f       	andi	r24, 0xF7	; 247
     412:	85 bd       	out	0x25, r24	; 37
    clear(TCCR0A,WGM01);
     414:	84 b5       	in	r24, 0x24	; 36
     416:	8d 7f       	andi	r24, 0xFD	; 253
     418:	84 bd       	out	0x24, r24	; 36
    clear(TCCR0A,WGM00);
     41a:	84 b5       	in	r24, 0x24	; 36
     41c:	8e 7f       	andi	r24, 0xFE	; 254
     41e:	84 bd       	out	0x24, r24	; 36
    
    //Set timer prescaler to /0
    clear(TCCR0B,CS02);
     420:	85 b5       	in	r24, 0x25	; 37
     422:	8b 7f       	andi	r24, 0xFB	; 251
     424:	85 bd       	out	0x25, r24	; 37
    clear(TCCR0B,CS01);
     426:	85 b5       	in	r24, 0x25	; 37
     428:	8d 7f       	andi	r24, 0xFD	; 253
     42a:	85 bd       	out	0x25, r24	; 37
    clear(TCCR0B,CS00);
     42c:	85 b5       	in	r24, 0x25	; 37
     42e:	8e 7f       	andi	r24, 0xFE	; 254
     430:	85 bd       	out	0x25, r24	; 37
    
    //Demask OCR3A interrupt
    set(TIMSK0,TOIE0);
     432:	ee e6       	ldi	r30, 0x6E	; 110
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	80 81       	ld	r24, Z
     438:	81 60       	ori	r24, 0x01	; 1
     43a:	80 83       	st	Z, r24
     43c:	08 95       	ret

0000043e <start_timer0>:
}

void start_timer0(void)
{
    //Set timer prescaler to /256
    clear(TCCR0B,CS02);
     43e:	85 b5       	in	r24, 0x25	; 37
     440:	8b 7f       	andi	r24, 0xFB	; 251
     442:	85 bd       	out	0x25, r24	; 37
    clear(TCCR0B,CS01);
     444:	85 b5       	in	r24, 0x25	; 37
     446:	8d 7f       	andi	r24, 0xFD	; 253
     448:	85 bd       	out	0x25, r24	; 37
    set(TCCR0B,CS00);
     44a:	85 b5       	in	r24, 0x25	; 37
     44c:	81 60       	ori	r24, 0x01	; 1
     44e:	85 bd       	out	0x25, r24	; 37
     450:	08 95       	ret

00000452 <stop_timer0>:
}

void stop_timer0(void)
{
    //Set timer prescaler to /0
    clear(TCCR0B,CS02);
     452:	85 b5       	in	r24, 0x25	; 37
     454:	8b 7f       	andi	r24, 0xFB	; 251
     456:	85 bd       	out	0x25, r24	; 37
    clear(TCCR0B,CS01);
     458:	85 b5       	in	r24, 0x25	; 37
     45a:	8d 7f       	andi	r24, 0xFD	; 253
     45c:	85 bd       	out	0x25, r24	; 37
    clear(TCCR0B,CS00);
     45e:	85 b5       	in	r24, 0x25	; 37
     460:	8e 7f       	andi	r24, 0xFE	; 254
     462:	85 bd       	out	0x25, r24	; 37
    
    TCNT0 = 0;
     464:	16 bc       	out	0x26, r1	; 38
     466:	08 95       	ret

00000468 <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
     468:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
     46a:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
     46c:	88 e8       	ldi	r24, 0x88	; 136
     46e:	93 e1       	ldi	r25, 0x13	; 19
     470:	90 93 89 00 	sts	0x0089, r25
     474:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
     478:	10 92 8b 00 	sts	0x008B, r1
     47c:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
     480:	10 92 8d 00 	sts	0x008D, r1
     484:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
     488:	a1 e8       	ldi	r26, 0x81	; 129
     48a:	b0 e0       	ldi	r27, 0x00	; 0
     48c:	8c 91       	ld	r24, X
     48e:	80 61       	ori	r24, 0x10	; 16
     490:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
     492:	8c 91       	ld	r24, X
     494:	88 60       	ori	r24, 0x08	; 8
     496:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
     498:	e0 e8       	ldi	r30, 0x80	; 128
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	82 60       	ori	r24, 0x02	; 2
     4a0:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
     4a2:	80 81       	ld	r24, Z
     4a4:	81 60       	ori	r24, 0x01	; 1
     4a6:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
     4a8:	80 81       	ld	r24, Z
     4aa:	80 62       	ori	r24, 0x20	; 32
     4ac:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
     4ae:	80 81       	ld	r24, Z
     4b0:	8f 7e       	andi	r24, 0xEF	; 239
     4b2:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
     4b4:	80 81       	ld	r24, Z
     4b6:	88 60       	ori	r24, 0x08	; 8
     4b8:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
     4ba:	80 81       	ld	r24, Z
     4bc:	8b 7f       	andi	r24, 0xFB	; 251
     4be:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
     4c0:	8c 91       	ld	r24, X
     4c2:	8b 7f       	andi	r24, 0xFB	; 251
     4c4:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
     4c6:	8c 91       	ld	r24, X
     4c8:	8d 7f       	andi	r24, 0xFD	; 253
     4ca:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
     4cc:	8c 91       	ld	r24, X
     4ce:	81 60       	ori	r24, 0x01	; 1
     4d0:	8c 93       	st	X, r24
     4d2:	08 95       	ret

000004d4 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     4d4:	2f 92       	push	r2
     4d6:	3f 92       	push	r3
     4d8:	4f 92       	push	r4
     4da:	5f 92       	push	r5
     4dc:	6f 92       	push	r6
     4de:	7f 92       	push	r7
     4e0:	8f 92       	push	r8
     4e2:	9f 92       	push	r9
     4e4:	af 92       	push	r10
     4e6:	bf 92       	push	r11
     4e8:	cf 92       	push	r12
     4ea:	df 92       	push	r13
     4ec:	ef 92       	push	r14
     4ee:	ff 92       	push	r15
     4f0:	0f 93       	push	r16
     4f2:	1f 93       	push	r17
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	cd b7       	in	r28, 0x3d	; 61
     4fa:	de b7       	in	r29, 0x3e	; 62
     4fc:	28 97       	sbiw	r28, 0x08	; 8
     4fe:	0f b6       	in	r0, 0x3f	; 63
     500:	f8 94       	cli
     502:	de bf       	out	0x3e, r29	; 62
     504:	0f be       	out	0x3f, r0	; 63
     506:	cd bf       	out	0x3d, r28	; 61
     508:	98 86       	std	Y+8, r9	; 0x08
     50a:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     50c:	10 92 11 01 	sts	0x0111, r1
     510:	10 92 10 01 	sts	0x0110, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     514:	8f 3f       	cpi	r24, 0xFF	; 255
     516:	e3 e0       	ldi	r30, 0x03	; 3
     518:	9e 07       	cpc	r25, r30
     51a:	01 f1       	breq	.+64     	; 0x55c <localize+0x88>
     51c:	6f 3f       	cpi	r22, 0xFF	; 255
     51e:	f3 e0       	ldi	r31, 0x03	; 3
     520:	7f 07       	cpc	r23, r31
     522:	e1 f0       	breq	.+56     	; 0x55c <localize+0x88>
     524:	4f 3f       	cpi	r20, 0xFF	; 255
     526:	e3 e0       	ldi	r30, 0x03	; 3
     528:	5e 07       	cpc	r21, r30
     52a:	c1 f0       	breq	.+48     	; 0x55c <localize+0x88>
     52c:	2f 3f       	cpi	r18, 0xFF	; 255
     52e:	f3 e0       	ldi	r31, 0x03	; 3
     530:	3f 07       	cpc	r19, r31
     532:	a1 f0       	breq	.+40     	; 0x55c <localize+0x88>
     534:	0f 3f       	cpi	r16, 0xFF	; 255
     536:	e3 e0       	ldi	r30, 0x03	; 3
     538:	1e 07       	cpc	r17, r30
     53a:	81 f0       	breq	.+32     	; 0x55c <localize+0x88>
     53c:	ff ef       	ldi	r31, 0xFF	; 255
     53e:	ef 16       	cp	r14, r31
     540:	f3 e0       	ldi	r31, 0x03	; 3
     542:	ff 06       	cpc	r15, r31
     544:	59 f0       	breq	.+22     	; 0x55c <localize+0x88>
     546:	ef ef       	ldi	r30, 0xFF	; 255
     548:	ce 16       	cp	r12, r30
     54a:	e3 e0       	ldi	r30, 0x03	; 3
     54c:	de 06       	cpc	r13, r30
     54e:	31 f0       	breq	.+12     	; 0x55c <localize+0x88>
     550:	ff ef       	ldi	r31, 0xFF	; 255
     552:	af 16       	cp	r10, r31
     554:	f3 e0       	ldi	r31, 0x03	; 3
     556:	bf 06       	cpc	r11, r31
     558:	09 f0       	breq	.+2      	; 0x55c <localize+0x88>
     55a:	b0 c6       	rjmp	.+3424   	; 0x12bc <__stack+0x7bd>
        flag_no_good_stars = 1;
     55c:	81 e0       	ldi	r24, 0x01	; 1
     55e:	90 e0       	ldi	r25, 0x00	; 0
     560:	90 93 11 01 	sts	0x0111, r25
     564:	80 93 10 01 	sts	0x0110, r24
     568:	d1 c3       	rjmp	.+1954   	; 0xd0c <__stack+0x20d>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     56a:	f8 01       	movw	r30, r16
     56c:	a0 80       	ld	r10, Z
     56e:	b1 80       	ldd	r11, Z+1	; 0x01
     570:	c2 80       	ldd	r12, Z+2	; 0x02
     572:	d3 80       	ldd	r13, Z+3	; 0x03
     574:	0c 5f       	subi	r16, 0xFC	; 252
     576:	1f 4f       	sbci	r17, 0xFF	; 255
     578:	26 2d       	mov	r18, r6
     57a:	37 2d       	mov	r19, r7
     57c:	48 2d       	mov	r20, r8
     57e:	59 2d       	mov	r21, r9
     580:	6a 2d       	mov	r22, r10
     582:	7b 2d       	mov	r23, r11
     584:	8c 2d       	mov	r24, r12
     586:	9d 2d       	mov	r25, r13
     588:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
     58c:	18 16       	cp	r1, r24
     58e:	34 f4       	brge	.+12     	; 0x59c <localize+0xc8>
     590:	fa 82       	std	Y+2, r15	; 0x02
     592:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     594:	6a 2c       	mov	r6, r10
     596:	7b 2c       	mov	r7, r11
     598:	8c 2c       	mov	r8, r12
     59a:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     59c:	22 2d       	mov	r18, r2
     59e:	33 2d       	mov	r19, r3
     5a0:	44 2d       	mov	r20, r4
     5a2:	55 2d       	mov	r21, r5
     5a4:	6a 2d       	mov	r22, r10
     5a6:	7b 2d       	mov	r23, r11
     5a8:	8c 2d       	mov	r24, r12
     5aa:	9d 2d       	mov	r25, r13
     5ac:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
     5b0:	88 23       	and	r24, r24
     5b2:	34 f4       	brge	.+12     	; 0x5c0 <localize+0xec>
     5b4:	fe 82       	std	Y+6, r15	; 0x06
     5b6:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     5b8:	2a 2c       	mov	r2, r10
     5ba:	3b 2c       	mov	r3, r11
     5bc:	4c 2c       	mov	r4, r12
     5be:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     5c0:	ff ef       	ldi	r31, 0xFF	; 255
     5c2:	ef 1a       	sub	r14, r31
     5c4:	ff 0a       	sbc	r15, r31
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	e8 16       	cp	r14, r24
     5ca:	f1 04       	cpc	r15, r1
     5cc:	71 f6       	brne	.-100    	; 0x56a <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     5ce:	e9 81       	ldd	r30, Y+1	; 0x01
     5d0:	fa 81       	ldd	r31, Y+2	; 0x02
     5d2:	e2 30       	cpi	r30, 0x02	; 2
     5d4:	f1 05       	cpc	r31, r1
     5d6:	09 f4       	brne	.+2      	; 0x5da <localize+0x106>
     5d8:	3e c1       	rjmp	.+636    	; 0x856 <localize+0x382>
     5da:	34 f4       	brge	.+12     	; 0x5e8 <localize+0x114>
     5dc:	30 97       	sbiw	r30, 0x00	; 0
     5de:	81 f0       	breq	.+32     	; 0x600 <localize+0x12c>
     5e0:	31 97       	sbiw	r30, 0x01	; 1
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <localize+0x112>
     5e4:	8d c3       	rjmp	.+1818   	; 0xd00 <__stack+0x201>
     5e6:	a2 c0       	rjmp	.+324    	; 0x72c <localize+0x258>
     5e8:	89 81       	ldd	r24, Y+1	; 0x01
     5ea:	9a 81       	ldd	r25, Y+2	; 0x02
     5ec:	84 30       	cpi	r24, 0x04	; 4
     5ee:	91 05       	cpc	r25, r1
     5f0:	09 f4       	brne	.+2      	; 0x5f4 <localize+0x120>
     5f2:	5b c2       	rjmp	.+1206   	; 0xaaa <localize+0x5d6>
     5f4:	0c f4       	brge	.+2      	; 0x5f8 <localize+0x124>
     5f6:	c4 c1       	rjmp	.+904    	; 0x980 <localize+0x4ac>
     5f8:	05 97       	sbiw	r24, 0x05	; 5
     5fa:	09 f0       	breq	.+2      	; 0x5fe <localize+0x12a>
     5fc:	81 c3       	rjmp	.+1794   	; 0xd00 <__stack+0x201>
     5fe:	ea c2       	rjmp	.+1492   	; 0xbd4 <__stack+0xd5>
            case 0:
                switch (min_id) {
     600:	ed 81       	ldd	r30, Y+5	; 0x05
     602:	fe 81       	ldd	r31, Y+6	; 0x06
     604:	e2 30       	cpi	r30, 0x02	; 2
     606:	f1 05       	cpc	r31, r1
     608:	39 f1       	breq	.+78     	; 0x658 <localize+0x184>
     60a:	24 f4       	brge	.+8      	; 0x614 <localize+0x140>
     60c:	31 97       	sbiw	r30, 0x01	; 1
     60e:	09 f0       	breq	.+2      	; 0x612 <localize+0x13e>
     610:	6e c0       	rjmp	.+220    	; 0x6ee <localize+0x21a>
     612:	09 c0       	rjmp	.+18     	; 0x626 <localize+0x152>
     614:	8d 81       	ldd	r24, Y+5	; 0x05
     616:	9e 81       	ldd	r25, Y+6	; 0x06
     618:	83 30       	cpi	r24, 0x03	; 3
     61a:	91 05       	cpc	r25, r1
     61c:	b1 f1       	breq	.+108    	; 0x68a <localize+0x1b6>
     61e:	04 97       	sbiw	r24, 0x04	; 4
     620:	09 f0       	breq	.+2      	; 0x624 <localize+0x150>
     622:	65 c0       	rjmp	.+202    	; 0x6ee <localize+0x21a>
     624:	4b c0       	rjmp	.+150    	; 0x6bc <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     626:	86 e4       	ldi	r24, 0x46	; 70
     628:	91 e0       	ldi	r25, 0x01	; 1
     62a:	90 93 94 01 	sts	0x0194, r25
     62e:	80 93 93 01 	sts	0x0193, r24
     632:	8e e3       	ldi	r24, 0x3E	; 62
     634:	91 e0       	ldi	r25, 0x01	; 1
     636:	90 93 7a 01 	sts	0x017A, r25
     63a:	80 93 79 01 	sts	0x0179, r24
     63e:	82 e4       	ldi	r24, 0x42	; 66
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	90 93 7c 01 	sts	0x017C, r25
     646:	80 93 7b 01 	sts	0x017B, r24
     64a:	8a e3       	ldi	r24, 0x3A	; 58
     64c:	91 e0       	ldi	r25, 0x01	; 1
     64e:	90 93 8e 01 	sts	0x018E, r25
     652:	80 93 8d 01 	sts	0x018D, r24
                        break;
     656:	54 c3       	rjmp	.+1704   	; 0xd00 <__stack+0x201>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     658:	86 e4       	ldi	r24, 0x46	; 70
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	90 93 94 01 	sts	0x0194, r25
     660:	80 93 93 01 	sts	0x0193, r24
     664:	8a e3       	ldi	r24, 0x3A	; 58
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	90 93 7a 01 	sts	0x017A, r25
     66c:	80 93 79 01 	sts	0x0179, r24
     670:	82 e4       	ldi	r24, 0x42	; 66
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	90 93 7c 01 	sts	0x017C, r25
     678:	80 93 7b 01 	sts	0x017B, r24
     67c:	8e e3       	ldi	r24, 0x3E	; 62
     67e:	91 e0       	ldi	r25, 0x01	; 1
     680:	90 93 8e 01 	sts	0x018E, r25
     684:	80 93 8d 01 	sts	0x018D, r24
                        break;
     688:	3b c3       	rjmp	.+1654   	; 0xd00 <__stack+0x201>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     68a:	82 e4       	ldi	r24, 0x42	; 66
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	90 93 94 01 	sts	0x0194, r25
     692:	80 93 93 01 	sts	0x0193, r24
     696:	8e e3       	ldi	r24, 0x3E	; 62
     698:	91 e0       	ldi	r25, 0x01	; 1
     69a:	90 93 7a 01 	sts	0x017A, r25
     69e:	80 93 79 01 	sts	0x0179, r24
     6a2:	86 e4       	ldi	r24, 0x46	; 70
     6a4:	91 e0       	ldi	r25, 0x01	; 1
     6a6:	90 93 7c 01 	sts	0x017C, r25
     6aa:	80 93 7b 01 	sts	0x017B, r24
     6ae:	8a e3       	ldi	r24, 0x3A	; 58
     6b0:	91 e0       	ldi	r25, 0x01	; 1
     6b2:	90 93 8e 01 	sts	0x018E, r25
     6b6:	80 93 8d 01 	sts	0x018D, r24
                        break;
     6ba:	22 c3       	rjmp	.+1604   	; 0xd00 <__stack+0x201>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     6bc:	82 e4       	ldi	r24, 0x42	; 66
     6be:	91 e0       	ldi	r25, 0x01	; 1
     6c0:	90 93 94 01 	sts	0x0194, r25
     6c4:	80 93 93 01 	sts	0x0193, r24
     6c8:	8a e3       	ldi	r24, 0x3A	; 58
     6ca:	91 e0       	ldi	r25, 0x01	; 1
     6cc:	90 93 7a 01 	sts	0x017A, r25
     6d0:	80 93 79 01 	sts	0x0179, r24
     6d4:	86 e4       	ldi	r24, 0x46	; 70
     6d6:	91 e0       	ldi	r25, 0x01	; 1
     6d8:	90 93 7c 01 	sts	0x017C, r25
     6dc:	80 93 7b 01 	sts	0x017B, r24
     6e0:	8e e3       	ldi	r24, 0x3E	; 62
     6e2:	91 e0       	ldi	r25, 0x01	; 1
     6e4:	90 93 8e 01 	sts	0x018E, r25
     6e8:	80 93 8d 01 	sts	0x018D, r24
                        break;
     6ec:	09 c3       	rjmp	.+1554   	; 0xd00 <__stack+0x201>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6ee:	86 e4       	ldi	r24, 0x46	; 70
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	90 93 94 01 	sts	0x0194, r25
     6f6:	80 93 93 01 	sts	0x0193, r24
     6fa:	82 e4       	ldi	r24, 0x42	; 66
     6fc:	91 e0       	ldi	r25, 0x01	; 1
     6fe:	90 93 7a 01 	sts	0x017A, r25
     702:	80 93 79 01 	sts	0x0179, r24
     706:	8e e3       	ldi	r24, 0x3E	; 62
     708:	91 e0       	ldi	r25, 0x01	; 1
     70a:	90 93 7c 01 	sts	0x017C, r25
     70e:	80 93 7b 01 	sts	0x017B, r24
     712:	8a e3       	ldi	r24, 0x3A	; 58
     714:	91 e0       	ldi	r25, 0x01	; 1
     716:	90 93 8e 01 	sts	0x018E, r25
     71a:	80 93 8d 01 	sts	0x018D, r24
                        flag_no_good_stars = 1;
     71e:	81 e0       	ldi	r24, 0x01	; 1
     720:	90 e0       	ldi	r25, 0x00	; 0
     722:	90 93 11 01 	sts	0x0111, r25
     726:	80 93 10 01 	sts	0x0110, r24
                        break;
     72a:	f0 c2       	rjmp	.+1504   	; 0xd0c <__stack+0x20d>
                }
                break;
                
            case 1:
                switch (min_id) {
     72c:	ed 81       	ldd	r30, Y+5	; 0x05
     72e:	fe 81       	ldd	r31, Y+6	; 0x06
     730:	e2 30       	cpi	r30, 0x02	; 2
     732:	f1 05       	cpc	r31, r1
     734:	31 f1       	breq	.+76     	; 0x782 <localize+0x2ae>
     736:	1c f4       	brge	.+6      	; 0x73e <localize+0x26a>
     738:	ef 2b       	or	r30, r31
     73a:	51 f0       	breq	.+20     	; 0x750 <localize+0x27c>
     73c:	6d c0       	rjmp	.+218    	; 0x818 <localize+0x344>
     73e:	8d 81       	ldd	r24, Y+5	; 0x05
     740:	9e 81       	ldd	r25, Y+6	; 0x06
     742:	83 30       	cpi	r24, 0x03	; 3
     744:	91 05       	cpc	r25, r1
     746:	b1 f1       	breq	.+108    	; 0x7b4 <localize+0x2e0>
     748:	05 97       	sbiw	r24, 0x05	; 5
     74a:	09 f0       	breq	.+2      	; 0x74e <localize+0x27a>
     74c:	65 c0       	rjmp	.+202    	; 0x818 <localize+0x344>
     74e:	4b c0       	rjmp	.+150    	; 0x7e6 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     750:	86 e4       	ldi	r24, 0x46	; 70
     752:	91 e0       	ldi	r25, 0x01	; 1
     754:	90 93 94 01 	sts	0x0194, r25
     758:	80 93 93 01 	sts	0x0193, r24
     75c:	82 e4       	ldi	r24, 0x42	; 66
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	90 93 7a 01 	sts	0x017A, r25
     764:	80 93 79 01 	sts	0x0179, r24
     768:	8e e3       	ldi	r24, 0x3E	; 62
     76a:	91 e0       	ldi	r25, 0x01	; 1
     76c:	90 93 7c 01 	sts	0x017C, r25
     770:	80 93 7b 01 	sts	0x017B, r24
     774:	8a e3       	ldi	r24, 0x3A	; 58
     776:	91 e0       	ldi	r25, 0x01	; 1
     778:	90 93 8e 01 	sts	0x018E, r25
     77c:	80 93 8d 01 	sts	0x018D, r24
                        break;
     780:	bf c2       	rjmp	.+1406   	; 0xd00 <__stack+0x201>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     782:	86 e4       	ldi	r24, 0x46	; 70
     784:	91 e0       	ldi	r25, 0x01	; 1
     786:	90 93 94 01 	sts	0x0194, r25
     78a:	80 93 93 01 	sts	0x0193, r24
     78e:	8a e3       	ldi	r24, 0x3A	; 58
     790:	91 e0       	ldi	r25, 0x01	; 1
     792:	90 93 7a 01 	sts	0x017A, r25
     796:	80 93 79 01 	sts	0x0179, r24
     79a:	8e e3       	ldi	r24, 0x3E	; 62
     79c:	91 e0       	ldi	r25, 0x01	; 1
     79e:	90 93 7c 01 	sts	0x017C, r25
     7a2:	80 93 7b 01 	sts	0x017B, r24
     7a6:	82 e4       	ldi	r24, 0x42	; 66
     7a8:	91 e0       	ldi	r25, 0x01	; 1
     7aa:	90 93 8e 01 	sts	0x018E, r25
     7ae:	80 93 8d 01 	sts	0x018D, r24
                        break;
     7b2:	a6 c2       	rjmp	.+1356   	; 0xd00 <__stack+0x201>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     7b4:	8e e3       	ldi	r24, 0x3E	; 62
     7b6:	91 e0       	ldi	r25, 0x01	; 1
     7b8:	90 93 94 01 	sts	0x0194, r25
     7bc:	80 93 93 01 	sts	0x0193, r24
     7c0:	82 e4       	ldi	r24, 0x42	; 66
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	90 93 7a 01 	sts	0x017A, r25
     7c8:	80 93 79 01 	sts	0x0179, r24
     7cc:	86 e4       	ldi	r24, 0x46	; 70
     7ce:	91 e0       	ldi	r25, 0x01	; 1
     7d0:	90 93 7c 01 	sts	0x017C, r25
     7d4:	80 93 7b 01 	sts	0x017B, r24
     7d8:	8a e3       	ldi	r24, 0x3A	; 58
     7da:	91 e0       	ldi	r25, 0x01	; 1
     7dc:	90 93 8e 01 	sts	0x018E, r25
     7e0:	80 93 8d 01 	sts	0x018D, r24
                        break;
     7e4:	8d c2       	rjmp	.+1306   	; 0xd00 <__stack+0x201>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     7e6:	8e e3       	ldi	r24, 0x3E	; 62
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	90 93 94 01 	sts	0x0194, r25
     7ee:	80 93 93 01 	sts	0x0193, r24
     7f2:	8a e3       	ldi	r24, 0x3A	; 58
     7f4:	91 e0       	ldi	r25, 0x01	; 1
     7f6:	90 93 7a 01 	sts	0x017A, r25
     7fa:	80 93 79 01 	sts	0x0179, r24
     7fe:	86 e4       	ldi	r24, 0x46	; 70
     800:	91 e0       	ldi	r25, 0x01	; 1
     802:	90 93 7c 01 	sts	0x017C, r25
     806:	80 93 7b 01 	sts	0x017B, r24
     80a:	82 e4       	ldi	r24, 0x42	; 66
     80c:	91 e0       	ldi	r25, 0x01	; 1
     80e:	90 93 8e 01 	sts	0x018E, r25
     812:	80 93 8d 01 	sts	0x018D, r24
                        break;
     816:	74 c2       	rjmp	.+1256   	; 0xd00 <__stack+0x201>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     818:	86 e4       	ldi	r24, 0x46	; 70
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	90 93 94 01 	sts	0x0194, r25
     820:	80 93 93 01 	sts	0x0193, r24
     824:	82 e4       	ldi	r24, 0x42	; 66
     826:	91 e0       	ldi	r25, 0x01	; 1
     828:	90 93 7a 01 	sts	0x017A, r25
     82c:	80 93 79 01 	sts	0x0179, r24
     830:	8e e3       	ldi	r24, 0x3E	; 62
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	90 93 7c 01 	sts	0x017C, r25
     838:	80 93 7b 01 	sts	0x017B, r24
     83c:	8a e3       	ldi	r24, 0x3A	; 58
     83e:	91 e0       	ldi	r25, 0x01	; 1
     840:	90 93 8e 01 	sts	0x018E, r25
     844:	80 93 8d 01 	sts	0x018D, r24
                        flag_no_good_stars = 1;
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	90 93 11 01 	sts	0x0111, r25
     850:	80 93 10 01 	sts	0x0110, r24
                        break;
     854:	5b c2       	rjmp	.+1206   	; 0xd0c <__stack+0x20d>
                }
                break;
                
            case 2:
                switch (min_id) {
     856:	ed 81       	ldd	r30, Y+5	; 0x05
     858:	fe 81       	ldd	r31, Y+6	; 0x06
     85a:	e1 30       	cpi	r30, 0x01	; 1
     85c:	f1 05       	cpc	r31, r1
     85e:	31 f1       	breq	.+76     	; 0x8ac <localize+0x3d8>
     860:	1c f4       	brge	.+6      	; 0x868 <localize+0x394>
     862:	ef 2b       	or	r30, r31
     864:	51 f0       	breq	.+20     	; 0x87a <localize+0x3a6>
     866:	6d c0       	rjmp	.+218    	; 0x942 <localize+0x46e>
     868:	8d 81       	ldd	r24, Y+5	; 0x05
     86a:	9e 81       	ldd	r25, Y+6	; 0x06
     86c:	84 30       	cpi	r24, 0x04	; 4
     86e:	91 05       	cpc	r25, r1
     870:	b1 f1       	breq	.+108    	; 0x8de <localize+0x40a>
     872:	05 97       	sbiw	r24, 0x05	; 5
     874:	09 f0       	breq	.+2      	; 0x878 <localize+0x3a4>
     876:	65 c0       	rjmp	.+202    	; 0x942 <localize+0x46e>
     878:	4b c0       	rjmp	.+150    	; 0x910 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     87a:	86 e4       	ldi	r24, 0x46	; 70
     87c:	91 e0       	ldi	r25, 0x01	; 1
     87e:	90 93 94 01 	sts	0x0194, r25
     882:	80 93 93 01 	sts	0x0193, r24
     886:	82 e4       	ldi	r24, 0x42	; 66
     888:	91 e0       	ldi	r25, 0x01	; 1
     88a:	90 93 7a 01 	sts	0x017A, r25
     88e:	80 93 79 01 	sts	0x0179, r24
     892:	8a e3       	ldi	r24, 0x3A	; 58
     894:	91 e0       	ldi	r25, 0x01	; 1
     896:	90 93 7c 01 	sts	0x017C, r25
     89a:	80 93 7b 01 	sts	0x017B, r24
     89e:	8e e3       	ldi	r24, 0x3E	; 62
     8a0:	91 e0       	ldi	r25, 0x01	; 1
     8a2:	90 93 8e 01 	sts	0x018E, r25
     8a6:	80 93 8d 01 	sts	0x018D, r24
                        break;
     8aa:	2a c2       	rjmp	.+1108   	; 0xd00 <__stack+0x201>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     8ac:	86 e4       	ldi	r24, 0x46	; 70
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	90 93 94 01 	sts	0x0194, r25
     8b4:	80 93 93 01 	sts	0x0193, r24
     8b8:	8e e3       	ldi	r24, 0x3E	; 62
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	90 93 7a 01 	sts	0x017A, r25
     8c0:	80 93 79 01 	sts	0x0179, r24
     8c4:	8a e3       	ldi	r24, 0x3A	; 58
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	90 93 7c 01 	sts	0x017C, r25
     8cc:	80 93 7b 01 	sts	0x017B, r24
     8d0:	82 e4       	ldi	r24, 0x42	; 66
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	90 93 8e 01 	sts	0x018E, r25
     8d8:	80 93 8d 01 	sts	0x018D, r24
                        break;
     8dc:	11 c2       	rjmp	.+1058   	; 0xd00 <__stack+0x201>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     8de:	8a e3       	ldi	r24, 0x3A	; 58
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	90 93 94 01 	sts	0x0194, r25
     8e6:	80 93 93 01 	sts	0x0193, r24
     8ea:	82 e4       	ldi	r24, 0x42	; 66
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	90 93 7a 01 	sts	0x017A, r25
     8f2:	80 93 79 01 	sts	0x0179, r24
     8f6:	86 e4       	ldi	r24, 0x46	; 70
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	90 93 7c 01 	sts	0x017C, r25
     8fe:	80 93 7b 01 	sts	0x017B, r24
     902:	8e e3       	ldi	r24, 0x3E	; 62
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	90 93 8e 01 	sts	0x018E, r25
     90a:	80 93 8d 01 	sts	0x018D, r24
                        break;
     90e:	f8 c1       	rjmp	.+1008   	; 0xd00 <__stack+0x201>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     910:	8a e3       	ldi	r24, 0x3A	; 58
     912:	91 e0       	ldi	r25, 0x01	; 1
     914:	90 93 94 01 	sts	0x0194, r25
     918:	80 93 93 01 	sts	0x0193, r24
     91c:	8e e3       	ldi	r24, 0x3E	; 62
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	90 93 7a 01 	sts	0x017A, r25
     924:	80 93 79 01 	sts	0x0179, r24
     928:	86 e4       	ldi	r24, 0x46	; 70
     92a:	91 e0       	ldi	r25, 0x01	; 1
     92c:	90 93 7c 01 	sts	0x017C, r25
     930:	80 93 7b 01 	sts	0x017B, r24
     934:	82 e4       	ldi	r24, 0x42	; 66
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	90 93 8e 01 	sts	0x018E, r25
     93c:	80 93 8d 01 	sts	0x018D, r24
                        break;
     940:	df c1       	rjmp	.+958    	; 0xd00 <__stack+0x201>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     942:	86 e4       	ldi	r24, 0x46	; 70
     944:	91 e0       	ldi	r25, 0x01	; 1
     946:	90 93 94 01 	sts	0x0194, r25
     94a:	80 93 93 01 	sts	0x0193, r24
     94e:	82 e4       	ldi	r24, 0x42	; 66
     950:	91 e0       	ldi	r25, 0x01	; 1
     952:	90 93 7a 01 	sts	0x017A, r25
     956:	80 93 79 01 	sts	0x0179, r24
     95a:	8e e3       	ldi	r24, 0x3E	; 62
     95c:	91 e0       	ldi	r25, 0x01	; 1
     95e:	90 93 7c 01 	sts	0x017C, r25
     962:	80 93 7b 01 	sts	0x017B, r24
     966:	8a e3       	ldi	r24, 0x3A	; 58
     968:	91 e0       	ldi	r25, 0x01	; 1
     96a:	90 93 8e 01 	sts	0x018E, r25
     96e:	80 93 8d 01 	sts	0x018D, r24
                        flag_no_good_stars = 1;
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	90 93 11 01 	sts	0x0111, r25
     97a:	80 93 10 01 	sts	0x0110, r24
                        break;
     97e:	c6 c1       	rjmp	.+908    	; 0xd0c <__stack+0x20d>
                }
                break;
                
            case 3:
                switch (min_id) {
     980:	ed 81       	ldd	r30, Y+5	; 0x05
     982:	fe 81       	ldd	r31, Y+6	; 0x06
     984:	e1 30       	cpi	r30, 0x01	; 1
     986:	f1 05       	cpc	r31, r1
     988:	31 f1       	breq	.+76     	; 0x9d6 <localize+0x502>
     98a:	1c f4       	brge	.+6      	; 0x992 <localize+0x4be>
     98c:	ef 2b       	or	r30, r31
     98e:	51 f0       	breq	.+20     	; 0x9a4 <localize+0x4d0>
     990:	6d c0       	rjmp	.+218    	; 0xa6c <localize+0x598>
     992:	8d 81       	ldd	r24, Y+5	; 0x05
     994:	9e 81       	ldd	r25, Y+6	; 0x06
     996:	84 30       	cpi	r24, 0x04	; 4
     998:	91 05       	cpc	r25, r1
     99a:	b1 f1       	breq	.+108    	; 0xa08 <localize+0x534>
     99c:	05 97       	sbiw	r24, 0x05	; 5
     99e:	09 f0       	breq	.+2      	; 0x9a2 <localize+0x4ce>
     9a0:	65 c0       	rjmp	.+202    	; 0xa6c <localize+0x598>
     9a2:	4b c0       	rjmp	.+150    	; 0xa3a <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     9a4:	82 e4       	ldi	r24, 0x42	; 66
     9a6:	91 e0       	ldi	r25, 0x01	; 1
     9a8:	90 93 94 01 	sts	0x0194, r25
     9ac:	80 93 93 01 	sts	0x0193, r24
     9b0:	86 e4       	ldi	r24, 0x46	; 70
     9b2:	91 e0       	ldi	r25, 0x01	; 1
     9b4:	90 93 7a 01 	sts	0x017A, r25
     9b8:	80 93 79 01 	sts	0x0179, r24
     9bc:	8e e3       	ldi	r24, 0x3E	; 62
     9be:	91 e0       	ldi	r25, 0x01	; 1
     9c0:	90 93 7c 01 	sts	0x017C, r25
     9c4:	80 93 7b 01 	sts	0x017B, r24
     9c8:	8a e3       	ldi	r24, 0x3A	; 58
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	90 93 8e 01 	sts	0x018E, r25
     9d0:	80 93 8d 01 	sts	0x018D, r24
                        break;
     9d4:	95 c1       	rjmp	.+810    	; 0xd00 <__stack+0x201>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     9d6:	8e e3       	ldi	r24, 0x3E	; 62
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	90 93 94 01 	sts	0x0194, r25
     9de:	80 93 93 01 	sts	0x0193, r24
     9e2:	86 e4       	ldi	r24, 0x46	; 70
     9e4:	91 e0       	ldi	r25, 0x01	; 1
     9e6:	90 93 7a 01 	sts	0x017A, r25
     9ea:	80 93 79 01 	sts	0x0179, r24
     9ee:	82 e4       	ldi	r24, 0x42	; 66
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	90 93 7c 01 	sts	0x017C, r25
     9f6:	80 93 7b 01 	sts	0x017B, r24
     9fa:	8a e3       	ldi	r24, 0x3A	; 58
     9fc:	91 e0       	ldi	r25, 0x01	; 1
     9fe:	90 93 8e 01 	sts	0x018E, r25
     a02:	80 93 8d 01 	sts	0x018D, r24
                        break;
     a06:	7c c1       	rjmp	.+760    	; 0xd00 <__stack+0x201>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     a08:	82 e4       	ldi	r24, 0x42	; 66
     a0a:	91 e0       	ldi	r25, 0x01	; 1
     a0c:	90 93 94 01 	sts	0x0194, r25
     a10:	80 93 93 01 	sts	0x0193, r24
     a14:	8a e3       	ldi	r24, 0x3A	; 58
     a16:	91 e0       	ldi	r25, 0x01	; 1
     a18:	90 93 7a 01 	sts	0x017A, r25
     a1c:	80 93 79 01 	sts	0x0179, r24
     a20:	8e e3       	ldi	r24, 0x3E	; 62
     a22:	91 e0       	ldi	r25, 0x01	; 1
     a24:	90 93 7c 01 	sts	0x017C, r25
     a28:	80 93 7b 01 	sts	0x017B, r24
     a2c:	86 e4       	ldi	r24, 0x46	; 70
     a2e:	91 e0       	ldi	r25, 0x01	; 1
     a30:	90 93 8e 01 	sts	0x018E, r25
     a34:	80 93 8d 01 	sts	0x018D, r24
                        break;
     a38:	63 c1       	rjmp	.+710    	; 0xd00 <__stack+0x201>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     a3a:	8e e3       	ldi	r24, 0x3E	; 62
     a3c:	91 e0       	ldi	r25, 0x01	; 1
     a3e:	90 93 94 01 	sts	0x0194, r25
     a42:	80 93 93 01 	sts	0x0193, r24
     a46:	8a e3       	ldi	r24, 0x3A	; 58
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	90 93 7a 01 	sts	0x017A, r25
     a4e:	80 93 79 01 	sts	0x0179, r24
     a52:	82 e4       	ldi	r24, 0x42	; 66
     a54:	91 e0       	ldi	r25, 0x01	; 1
     a56:	90 93 7c 01 	sts	0x017C, r25
     a5a:	80 93 7b 01 	sts	0x017B, r24
     a5e:	86 e4       	ldi	r24, 0x46	; 70
     a60:	91 e0       	ldi	r25, 0x01	; 1
     a62:	90 93 8e 01 	sts	0x018E, r25
     a66:	80 93 8d 01 	sts	0x018D, r24
                        break;
     a6a:	4a c1       	rjmp	.+660    	; 0xd00 <__stack+0x201>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     a6c:	86 e4       	ldi	r24, 0x46	; 70
     a6e:	91 e0       	ldi	r25, 0x01	; 1
     a70:	90 93 94 01 	sts	0x0194, r25
     a74:	80 93 93 01 	sts	0x0193, r24
     a78:	82 e4       	ldi	r24, 0x42	; 66
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	90 93 7a 01 	sts	0x017A, r25
     a80:	80 93 79 01 	sts	0x0179, r24
     a84:	8e e3       	ldi	r24, 0x3E	; 62
     a86:	91 e0       	ldi	r25, 0x01	; 1
     a88:	90 93 7c 01 	sts	0x017C, r25
     a8c:	80 93 7b 01 	sts	0x017B, r24
     a90:	8a e3       	ldi	r24, 0x3A	; 58
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	90 93 8e 01 	sts	0x018E, r25
     a98:	80 93 8d 01 	sts	0x018D, r24
                        flag_no_good_stars = 1;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	90 93 11 01 	sts	0x0111, r25
     aa4:	80 93 10 01 	sts	0x0110, r24
                        break;
     aa8:	31 c1       	rjmp	.+610    	; 0xd0c <__stack+0x20d>
                }
                break;
                
            case 4:
                switch (min_id) {
     aaa:	ed 81       	ldd	r30, Y+5	; 0x05
     aac:	fe 81       	ldd	r31, Y+6	; 0x06
     aae:	e2 30       	cpi	r30, 0x02	; 2
     ab0:	f1 05       	cpc	r31, r1
     ab2:	31 f1       	breq	.+76     	; 0xb00 <__stack+0x1>
     ab4:	1c f4       	brge	.+6      	; 0xabc <localize+0x5e8>
     ab6:	ef 2b       	or	r30, r31
     ab8:	51 f0       	breq	.+20     	; 0xace <localize+0x5fa>
     aba:	6d c0       	rjmp	.+218    	; 0xb96 <__stack+0x97>
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	9e 81       	ldd	r25, Y+6	; 0x06
     ac0:	83 30       	cpi	r24, 0x03	; 3
     ac2:	91 05       	cpc	r25, r1
     ac4:	b1 f1       	breq	.+108    	; 0xb32 <__stack+0x33>
     ac6:	05 97       	sbiw	r24, 0x05	; 5
     ac8:	09 f0       	breq	.+2      	; 0xacc <localize+0x5f8>
     aca:	65 c0       	rjmp	.+202    	; 0xb96 <__stack+0x97>
     acc:	4b c0       	rjmp	.+150    	; 0xb64 <__stack+0x65>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     ace:	82 e4       	ldi	r24, 0x42	; 66
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	90 93 94 01 	sts	0x0194, r25
     ad6:	80 93 93 01 	sts	0x0193, r24
     ada:	86 e4       	ldi	r24, 0x46	; 70
     adc:	91 e0       	ldi	r25, 0x01	; 1
     ade:	90 93 7a 01 	sts	0x017A, r25
     ae2:	80 93 79 01 	sts	0x0179, r24
     ae6:	8a e3       	ldi	r24, 0x3A	; 58
     ae8:	91 e0       	ldi	r25, 0x01	; 1
     aea:	90 93 7c 01 	sts	0x017C, r25
     aee:	80 93 7b 01 	sts	0x017B, r24
     af2:	8e e3       	ldi	r24, 0x3E	; 62
     af4:	91 e0       	ldi	r25, 0x01	; 1
     af6:	90 93 8e 01 	sts	0x018E, r25
     afa:	80 93 8d 01 	sts	0x018D, r24
                        break;
     afe:	00 c1       	rjmp	.+512    	; 0xd00 <__stack+0x201>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     b00:	8a e3       	ldi	r24, 0x3A	; 58
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	90 93 94 01 	sts	0x0194, r25
     b08:	80 93 93 01 	sts	0x0193, r24
     b0c:	86 e4       	ldi	r24, 0x46	; 70
     b0e:	91 e0       	ldi	r25, 0x01	; 1
     b10:	90 93 7a 01 	sts	0x017A, r25
     b14:	80 93 79 01 	sts	0x0179, r24
     b18:	82 e4       	ldi	r24, 0x42	; 66
     b1a:	91 e0       	ldi	r25, 0x01	; 1
     b1c:	90 93 7c 01 	sts	0x017C, r25
     b20:	80 93 7b 01 	sts	0x017B, r24
     b24:	8e e3       	ldi	r24, 0x3E	; 62
     b26:	91 e0       	ldi	r25, 0x01	; 1
     b28:	90 93 8e 01 	sts	0x018E, r25
     b2c:	80 93 8d 01 	sts	0x018D, r24
                        break;
     b30:	e7 c0       	rjmp	.+462    	; 0xd00 <__stack+0x201>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     b32:	82 e4       	ldi	r24, 0x42	; 66
     b34:	91 e0       	ldi	r25, 0x01	; 1
     b36:	90 93 94 01 	sts	0x0194, r25
     b3a:	80 93 93 01 	sts	0x0193, r24
     b3e:	8e e3       	ldi	r24, 0x3E	; 62
     b40:	91 e0       	ldi	r25, 0x01	; 1
     b42:	90 93 7a 01 	sts	0x017A, r25
     b46:	80 93 79 01 	sts	0x0179, r24
     b4a:	8a e3       	ldi	r24, 0x3A	; 58
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	90 93 7c 01 	sts	0x017C, r25
     b52:	80 93 7b 01 	sts	0x017B, r24
     b56:	86 e4       	ldi	r24, 0x46	; 70
     b58:	91 e0       	ldi	r25, 0x01	; 1
     b5a:	90 93 8e 01 	sts	0x018E, r25
     b5e:	80 93 8d 01 	sts	0x018D, r24
                        break;
     b62:	ce c0       	rjmp	.+412    	; 0xd00 <__stack+0x201>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     b64:	8a e3       	ldi	r24, 0x3A	; 58
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	90 93 94 01 	sts	0x0194, r25
     b6c:	80 93 93 01 	sts	0x0193, r24
     b70:	8e e3       	ldi	r24, 0x3E	; 62
     b72:	91 e0       	ldi	r25, 0x01	; 1
     b74:	90 93 7a 01 	sts	0x017A, r25
     b78:	80 93 79 01 	sts	0x0179, r24
     b7c:	82 e4       	ldi	r24, 0x42	; 66
     b7e:	91 e0       	ldi	r25, 0x01	; 1
     b80:	90 93 7c 01 	sts	0x017C, r25
     b84:	80 93 7b 01 	sts	0x017B, r24
     b88:	86 e4       	ldi	r24, 0x46	; 70
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	90 93 8e 01 	sts	0x018E, r25
     b90:	80 93 8d 01 	sts	0x018D, r24
                        break;
     b94:	b5 c0       	rjmp	.+362    	; 0xd00 <__stack+0x201>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     b96:	86 e4       	ldi	r24, 0x46	; 70
     b98:	91 e0       	ldi	r25, 0x01	; 1
     b9a:	90 93 94 01 	sts	0x0194, r25
     b9e:	80 93 93 01 	sts	0x0193, r24
     ba2:	82 e4       	ldi	r24, 0x42	; 66
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	90 93 7a 01 	sts	0x017A, r25
     baa:	80 93 79 01 	sts	0x0179, r24
     bae:	8e e3       	ldi	r24, 0x3E	; 62
     bb0:	91 e0       	ldi	r25, 0x01	; 1
     bb2:	90 93 7c 01 	sts	0x017C, r25
     bb6:	80 93 7b 01 	sts	0x017B, r24
     bba:	8a e3       	ldi	r24, 0x3A	; 58
     bbc:	91 e0       	ldi	r25, 0x01	; 1
     bbe:	90 93 8e 01 	sts	0x018E, r25
     bc2:	80 93 8d 01 	sts	0x018D, r24
                        flag_no_good_stars = 1;
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	90 93 11 01 	sts	0x0111, r25
     bce:	80 93 10 01 	sts	0x0110, r24
                        break;
     bd2:	9c c0       	rjmp	.+312    	; 0xd0c <__stack+0x20d>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     bd4:	ed 81       	ldd	r30, Y+5	; 0x05
     bd6:	fe 81       	ldd	r31, Y+6	; 0x06
     bd8:	e2 30       	cpi	r30, 0x02	; 2
     bda:	f1 05       	cpc	r31, r1
     bdc:	39 f1       	breq	.+78     	; 0xc2c <__stack+0x12d>
     bde:	24 f4       	brge	.+8      	; 0xbe8 <__stack+0xe9>
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	09 f0       	breq	.+2      	; 0xbe6 <__stack+0xe7>
     be4:	6e c0       	rjmp	.+220    	; 0xcc2 <__stack+0x1c3>
     be6:	09 c0       	rjmp	.+18     	; 0xbfa <__stack+0xfb>
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
     bea:	9e 81       	ldd	r25, Y+6	; 0x06
     bec:	83 30       	cpi	r24, 0x03	; 3
     bee:	91 05       	cpc	r25, r1
     bf0:	b1 f1       	breq	.+108    	; 0xc5e <__stack+0x15f>
     bf2:	04 97       	sbiw	r24, 0x04	; 4
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <__stack+0xf9>
     bf6:	65 c0       	rjmp	.+202    	; 0xcc2 <__stack+0x1c3>
     bf8:	4b c0       	rjmp	.+150    	; 0xc90 <__stack+0x191>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     bfa:	8e e3       	ldi	r24, 0x3E	; 62
     bfc:	91 e0       	ldi	r25, 0x01	; 1
     bfe:	90 93 94 01 	sts	0x0194, r25
     c02:	80 93 93 01 	sts	0x0193, r24
     c06:	86 e4       	ldi	r24, 0x46	; 70
     c08:	91 e0       	ldi	r25, 0x01	; 1
     c0a:	90 93 7a 01 	sts	0x017A, r25
     c0e:	80 93 79 01 	sts	0x0179, r24
     c12:	8a e3       	ldi	r24, 0x3A	; 58
     c14:	91 e0       	ldi	r25, 0x01	; 1
     c16:	90 93 7c 01 	sts	0x017C, r25
     c1a:	80 93 7b 01 	sts	0x017B, r24
     c1e:	82 e4       	ldi	r24, 0x42	; 66
     c20:	91 e0       	ldi	r25, 0x01	; 1
     c22:	90 93 8e 01 	sts	0x018E, r25
     c26:	80 93 8d 01 	sts	0x018D, r24
                        break;
     c2a:	6a c0       	rjmp	.+212    	; 0xd00 <__stack+0x201>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     c2c:	8a e3       	ldi	r24, 0x3A	; 58
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	90 93 94 01 	sts	0x0194, r25
     c34:	80 93 93 01 	sts	0x0193, r24
     c38:	86 e4       	ldi	r24, 0x46	; 70
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	90 93 7a 01 	sts	0x017A, r25
     c40:	80 93 79 01 	sts	0x0179, r24
     c44:	8e e3       	ldi	r24, 0x3E	; 62
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	90 93 7c 01 	sts	0x017C, r25
     c4c:	80 93 7b 01 	sts	0x017B, r24
     c50:	82 e4       	ldi	r24, 0x42	; 66
     c52:	91 e0       	ldi	r25, 0x01	; 1
     c54:	90 93 8e 01 	sts	0x018E, r25
     c58:	80 93 8d 01 	sts	0x018D, r24
                        break;
     c5c:	51 c0       	rjmp	.+162    	; 0xd00 <__stack+0x201>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     c5e:	8e e3       	ldi	r24, 0x3E	; 62
     c60:	91 e0       	ldi	r25, 0x01	; 1
     c62:	90 93 94 01 	sts	0x0194, r25
     c66:	80 93 93 01 	sts	0x0193, r24
     c6a:	82 e4       	ldi	r24, 0x42	; 66
     c6c:	91 e0       	ldi	r25, 0x01	; 1
     c6e:	90 93 7a 01 	sts	0x017A, r25
     c72:	80 93 79 01 	sts	0x0179, r24
     c76:	8a e3       	ldi	r24, 0x3A	; 58
     c78:	91 e0       	ldi	r25, 0x01	; 1
     c7a:	90 93 7c 01 	sts	0x017C, r25
     c7e:	80 93 7b 01 	sts	0x017B, r24
     c82:	86 e4       	ldi	r24, 0x46	; 70
     c84:	91 e0       	ldi	r25, 0x01	; 1
     c86:	90 93 8e 01 	sts	0x018E, r25
     c8a:	80 93 8d 01 	sts	0x018D, r24
                        break;
     c8e:	38 c0       	rjmp	.+112    	; 0xd00 <__stack+0x201>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     c90:	8a e3       	ldi	r24, 0x3A	; 58
     c92:	91 e0       	ldi	r25, 0x01	; 1
     c94:	90 93 94 01 	sts	0x0194, r25
     c98:	80 93 93 01 	sts	0x0193, r24
     c9c:	82 e4       	ldi	r24, 0x42	; 66
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	90 93 7a 01 	sts	0x017A, r25
     ca4:	80 93 79 01 	sts	0x0179, r24
     ca8:	8e e3       	ldi	r24, 0x3E	; 62
     caa:	91 e0       	ldi	r25, 0x01	; 1
     cac:	90 93 7c 01 	sts	0x017C, r25
     cb0:	80 93 7b 01 	sts	0x017B, r24
     cb4:	86 e4       	ldi	r24, 0x46	; 70
     cb6:	91 e0       	ldi	r25, 0x01	; 1
     cb8:	90 93 8e 01 	sts	0x018E, r25
     cbc:	80 93 8d 01 	sts	0x018D, r24
                        break;
     cc0:	1f c0       	rjmp	.+62     	; 0xd00 <__stack+0x201>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     cc2:	86 e4       	ldi	r24, 0x46	; 70
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	90 93 94 01 	sts	0x0194, r25
     cca:	80 93 93 01 	sts	0x0193, r24
     cce:	82 e4       	ldi	r24, 0x42	; 66
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	90 93 7a 01 	sts	0x017A, r25
     cd6:	80 93 79 01 	sts	0x0179, r24
     cda:	8e e3       	ldi	r24, 0x3E	; 62
     cdc:	91 e0       	ldi	r25, 0x01	; 1
     cde:	90 93 7c 01 	sts	0x017C, r25
     ce2:	80 93 7b 01 	sts	0x017B, r24
     ce6:	8a e3       	ldi	r24, 0x3A	; 58
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	90 93 8e 01 	sts	0x018E, r25
     cee:	80 93 8d 01 	sts	0x018D, r24
                        flag_no_good_stars = 1;
     cf2:	81 e0       	ldi	r24, 0x01	; 1
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	90 93 11 01 	sts	0x0111, r25
     cfa:	80 93 10 01 	sts	0x0110, r24
                        break;
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <__stack+0x20d>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     d00:	80 91 10 01 	lds	r24, 0x0110
     d04:	90 91 11 01 	lds	r25, 0x0111
     d08:	89 2b       	or	r24, r25
     d0a:	d1 f0       	breq	.+52     	; 0xd40 <__stack+0x241>
        *orientation = orientation_prev;
     d0c:	80 91 20 01 	lds	r24, 0x0120
     d10:	90 91 21 01 	lds	r25, 0x0121
     d14:	ef 8d       	ldd	r30, Y+31	; 0x1f
     d16:	f8 a1       	ldd	r31, Y+32	; 0x20
     d18:	91 83       	std	Z+1, r25	; 0x01
     d1a:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     d1c:	80 91 1e 01 	lds	r24, 0x011E
     d20:	90 91 1f 01 	lds	r25, 0x011F
     d24:	ef 81       	ldd	r30, Y+7	; 0x07
     d26:	f8 85       	ldd	r31, Y+8	; 0x08
     d28:	91 83       	std	Z+1, r25	; 0x01
     d2a:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     d2c:	80 91 1c 01 	lds	r24, 0x011C
     d30:	90 91 1d 01 	lds	r25, 0x011D
     d34:	ed 8d       	ldd	r30, Y+29	; 0x1d
     d36:	fe 8d       	ldd	r31, Y+30	; 0x1e
     d38:	91 83       	std	Z+1, r25	; 0x01
     d3a:	80 83       	st	Z, r24
        return 0;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	ea c3       	rjmp	.+2004   	; 0x1514 <__stack+0xa15>
    }
    
    
    float scale = P_vertical/max_distance;
     d40:	26 2d       	mov	r18, r6
     d42:	37 2d       	mov	r19, r7
     d44:	48 2d       	mov	r20, r8
     d46:	59 2d       	mov	r21, r9
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	88 ee       	ldi	r24, 0xE8	; 232
     d4e:	91 e4       	ldi	r25, 0x41	; 65
     d50:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__divsf3>
     d54:	26 2e       	mov	r2, r22
     d56:	37 2e       	mov	r3, r23
     d58:	48 2e       	mov	r4, r24
     d5a:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     d5c:	e0 90 93 01 	lds	r14, 0x0193
     d60:	f0 90 94 01 	lds	r15, 0x0194
     d64:	0f 2e       	mov	r0, r31
     d66:	f5 e8       	ldi	r31, 0x85	; 133
     d68:	8f 2e       	mov	r8, r31
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	9f 2e       	mov	r9, r31
     d6e:	f0 2d       	mov	r31, r0
     d70:	f7 01       	movw	r30, r14
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	88 27       	eor	r24, r24
     d78:	77 fd       	sbrc	r23, 7
     d7a:	80 95       	com	r24
     d7c:	98 2f       	mov	r25, r24
     d7e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     d82:	22 2d       	mov	r18, r2
     d84:	33 2d       	mov	r19, r3
     d86:	44 2d       	mov	r20, r4
     d88:	55 2d       	mov	r21, r5
     d8a:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     d8e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     d92:	f4 01       	movw	r30, r8
     d94:	71 83       	std	Z+1, r23	; 0x01
     d96:	60 83       	st	Z, r22
     d98:	0f 2e       	mov	r0, r31
     d9a:	f7 e8       	ldi	r31, 0x87	; 135
     d9c:	6f 2e       	mov	r6, r31
     d9e:	f1 e0       	ldi	r31, 0x01	; 1
     da0:	7f 2e       	mov	r7, r31
     da2:	f0 2d       	mov	r31, r0
     da4:	f7 01       	movw	r30, r14
     da6:	62 81       	ldd	r22, Z+2	; 0x02
     da8:	73 81       	ldd	r23, Z+3	; 0x03
     daa:	88 27       	eor	r24, r24
     dac:	77 fd       	sbrc	r23, 7
     dae:	80 95       	com	r24
     db0:	98 2f       	mov	r25, r24
     db2:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     db6:	22 2d       	mov	r18, r2
     db8:	33 2d       	mov	r19, r3
     dba:	44 2d       	mov	r20, r4
     dbc:	55 2d       	mov	r21, r5
     dbe:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     dc2:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     dc6:	f3 01       	movw	r30, r6
     dc8:	71 83       	std	Z+1, r23	; 0x01
     dca:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     dcc:	00 91 7b 01 	lds	r16, 0x017B
     dd0:	10 91 7c 01 	lds	r17, 0x017C
     dd4:	0f 2e       	mov	r0, r31
     dd6:	f5 e7       	ldi	r31, 0x75	; 117
     dd8:	af 2e       	mov	r10, r31
     dda:	f1 e0       	ldi	r31, 0x01	; 1
     ddc:	bf 2e       	mov	r11, r31
     dde:	f0 2d       	mov	r31, r0
     de0:	f8 01       	movw	r30, r16
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	88 27       	eor	r24, r24
     de8:	77 fd       	sbrc	r23, 7
     dea:	80 95       	com	r24
     dec:	98 2f       	mov	r25, r24
     dee:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     df2:	22 2d       	mov	r18, r2
     df4:	33 2d       	mov	r19, r3
     df6:	44 2d       	mov	r20, r4
     df8:	55 2d       	mov	r21, r5
     dfa:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     dfe:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     e02:	f5 01       	movw	r30, r10
     e04:	71 83       	std	Z+1, r23	; 0x01
     e06:	60 83       	st	Z, r22
     e08:	0f 2e       	mov	r0, r31
     e0a:	f7 e7       	ldi	r31, 0x77	; 119
     e0c:	cf 2e       	mov	r12, r31
     e0e:	f1 e0       	ldi	r31, 0x01	; 1
     e10:	df 2e       	mov	r13, r31
     e12:	f0 2d       	mov	r31, r0
     e14:	f8 01       	movw	r30, r16
     e16:	62 81       	ldd	r22, Z+2	; 0x02
     e18:	73 81       	ldd	r23, Z+3	; 0x03
     e1a:	88 27       	eor	r24, r24
     e1c:	77 fd       	sbrc	r23, 7
     e1e:	80 95       	com	r24
     e20:	98 2f       	mov	r25, r24
     e22:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     e26:	22 2d       	mov	r18, r2
     e28:	33 2d       	mov	r19, r3
     e2a:	44 2d       	mov	r20, r4
     e2c:	55 2d       	mov	r21, r5
     e2e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     e32:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     e36:	f6 01       	movw	r30, r12
     e38:	71 83       	std	Z+1, r23	; 0x01
     e3a:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     e3c:	f7 01       	movw	r30, r14
     e3e:	60 81       	ld	r22, Z
     e40:	71 81       	ldd	r23, Z+1	; 0x01
     e42:	f8 01       	movw	r30, r16
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	68 0f       	add	r22, r24
     e4a:	79 1f       	adc	r23, r25
     e4c:	88 27       	eor	r24, r24
     e4e:	77 fd       	sbrc	r23, 7
     e50:	80 95       	com	r24
     e52:	98 2f       	mov	r25, r24
     e54:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     e58:	20 e0       	ldi	r18, 0x00	; 0
     e5a:	30 e0       	ldi	r19, 0x00	; 0
     e5c:	40 e0       	ldi	r20, 0x00	; 0
     e5e:	5f e3       	ldi	r21, 0x3F	; 63
     e60:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     e64:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     e68:	e9 a1       	ldd	r30, Y+33	; 0x21
     e6a:	fa a1       	ldd	r31, Y+34	; 0x22
     e6c:	71 83       	std	Z+1, r23	; 0x01
     e6e:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     e70:	a0 91 93 01 	lds	r26, 0x0193
     e74:	b0 91 94 01 	lds	r27, 0x0194
     e78:	e0 91 7b 01 	lds	r30, 0x017B
     e7c:	f0 91 7c 01 	lds	r31, 0x017C
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	6d 91       	ld	r22, X+
     e84:	7c 91       	ld	r23, X
     e86:	13 97       	sbiw	r26, 0x03	; 3
     e88:	82 81       	ldd	r24, Z+2	; 0x02
     e8a:	93 81       	ldd	r25, Z+3	; 0x03
     e8c:	68 0f       	add	r22, r24
     e8e:	79 1f       	adc	r23, r25
     e90:	88 27       	eor	r24, r24
     e92:	77 fd       	sbrc	r23, 7
     e94:	80 95       	com	r24
     e96:	98 2f       	mov	r25, r24
     e98:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     e9c:	20 e0       	ldi	r18, 0x00	; 0
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	40 e0       	ldi	r20, 0x00	; 0
     ea2:	5f e3       	ldi	r21, 0x3F	; 63
     ea4:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     ea8:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     eac:	eb a1       	ldd	r30, Y+35	; 0x23
     eae:	fc a1       	ldd	r31, Y+36	; 0x24
     eb0:	71 83       	std	Z+1, r23	; 0x01
     eb2:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     eb4:	f4 01       	movw	r30, r8
     eb6:	60 81       	ld	r22, Z
     eb8:	71 81       	ldd	r23, Z+1	; 0x01
     eba:	f5 01       	movw	r30, r10
     ebc:	80 81       	ld	r24, Z
     ebe:	91 81       	ldd	r25, Z+1	; 0x01
     ec0:	68 0f       	add	r22, r24
     ec2:	79 1f       	adc	r23, r25
     ec4:	88 27       	eor	r24, r24
     ec6:	77 fd       	sbrc	r23, 7
     ec8:	80 95       	com	r24
     eca:	98 2f       	mov	r25, r24
     ecc:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	5f e3       	ldi	r21, 0x3F	; 63
     ed8:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     edc:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     ee0:	1b 01       	movw	r2, r22
     ee2:	70 93 9a 01 	sts	0x019A, r23
     ee6:	60 93 99 01 	sts	0x0199, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     eea:	f3 01       	movw	r30, r6
     eec:	60 81       	ld	r22, Z
     eee:	71 81       	ldd	r23, Z+1	; 0x01
     ef0:	f6 01       	movw	r30, r12
     ef2:	80 81       	ld	r24, Z
     ef4:	91 81       	ldd	r25, Z+1	; 0x01
     ef6:	68 0f       	add	r22, r24
     ef8:	79 1f       	adc	r23, r25
     efa:	88 27       	eor	r24, r24
     efc:	77 fd       	sbrc	r23, 7
     efe:	80 95       	com	r24
     f00:	98 2f       	mov	r25, r24
     f02:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	5f e3       	ldi	r21, 0x3F	; 63
     f0e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
     f12:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
     f16:	8b 01       	movw	r16, r22
     f18:	70 93 9c 01 	sts	0x019C, r23
     f1c:	60 93 9b 01 	sts	0x019B, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     f20:	22 9c       	mul	r2, r2
     f22:	b0 01       	movw	r22, r0
     f24:	23 9c       	mul	r2, r3
     f26:	70 0d       	add	r23, r0
     f28:	70 0d       	add	r23, r0
     f2a:	11 24       	eor	r1, r1
     f2c:	00 9f       	mul	r16, r16
     f2e:	c0 01       	movw	r24, r0
     f30:	01 9f       	mul	r16, r17
     f32:	90 0d       	add	r25, r0
     f34:	90 0d       	add	r25, r0
     f36:	11 24       	eor	r1, r1
     f38:	68 0f       	add	r22, r24
     f3a:	79 1f       	adc	r23, r25
     f3c:	88 27       	eor	r24, r24
     f3e:	77 fd       	sbrc	r23, 7
     f40:	80 95       	com	r24
     f42:	98 2f       	mov	r25, r24
     f44:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     f48:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
     f4c:	2b 01       	movw	r4, r22
     f4e:	3c 01       	movw	r6, r24
     f50:	60 93 7d 01 	sts	0x017D, r22
     f54:	70 93 7e 01 	sts	0x017E, r23
     f58:	80 93 7f 01 	sts	0x017F, r24
     f5c:	90 93 80 01 	sts	0x0180, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     f60:	80 91 7b 01 	lds	r24, 0x017B
     f64:	90 91 7c 01 	lds	r25, 0x017C
     f68:	9a 83       	std	Y+2, r25	; 0x02
     f6a:	89 83       	std	Y+1, r24	; 0x01
     f6c:	e0 91 93 01 	lds	r30, 0x0193
     f70:	f0 91 94 01 	lds	r31, 0x0194
     f74:	fe 83       	std	Y+6, r31	; 0x06
     f76:	ed 83       	std	Y+5, r30	; 0x05
     f78:	fc 01       	movw	r30, r24
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	ed 81       	ldd	r30, Y+5	; 0x05
     f80:	fe 81       	ldd	r31, Y+6	; 0x06
     f82:	80 81       	ld	r24, Z
     f84:	91 81       	ldd	r25, Z+1	; 0x01
     f86:	68 1b       	sub	r22, r24
     f88:	79 0b       	sbc	r23, r25
     f8a:	88 27       	eor	r24, r24
     f8c:	77 fd       	sbrc	r23, 7
     f8e:	80 95       	com	r24
     f90:	98 2f       	mov	r25, r24
     f92:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     f96:	6b 01       	movw	r12, r22
     f98:	7c 01       	movw	r14, r24
     f9a:	e9 81       	ldd	r30, Y+1	; 0x01
     f9c:	fa 81       	ldd	r31, Y+2	; 0x02
     f9e:	62 81       	ldd	r22, Z+2	; 0x02
     fa0:	73 81       	ldd	r23, Z+3	; 0x03
     fa2:	ed 81       	ldd	r30, Y+5	; 0x05
     fa4:	fe 81       	ldd	r31, Y+6	; 0x06
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	68 1b       	sub	r22, r24
     fac:	79 0b       	sbc	r23, r25
     fae:	88 27       	eor	r24, r24
     fb0:	77 fd       	sbrc	r23, 7
     fb2:	80 95       	com	r24
     fb4:	98 2f       	mov	r25, r24
     fb6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     fba:	a7 01       	movw	r20, r14
     fbc:	96 01       	movw	r18, r12
     fbe:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <atan2>
     fc2:	4b 01       	movw	r8, r22
     fc4:	5c 01       	movw	r10, r24
     fc6:	60 93 89 01 	sts	0x0189, r22
     fca:	70 93 8a 01 	sts	0x018A, r23
     fce:	80 93 8b 01 	sts	0x018B, r24
     fd2:	90 93 8c 01 	sts	0x018C, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     fd6:	ed 81       	ldd	r30, Y+5	; 0x05
     fd8:	fe 81       	ldd	r31, Y+6	; 0x06
     fda:	60 81       	ld	r22, Z
     fdc:	71 81       	ldd	r23, Z+1	; 0x01
     fde:	e9 81       	ldd	r30, Y+1	; 0x01
     fe0:	fa 81       	ldd	r31, Y+2	; 0x02
     fe2:	80 81       	ld	r24, Z
     fe4:	91 81       	ldd	r25, Z+1	; 0x01
     fe6:	68 1b       	sub	r22, r24
     fe8:	79 0b       	sbc	r23, r25
     fea:	88 27       	eor	r24, r24
     fec:	77 fd       	sbrc	r23, 7
     fee:	80 95       	com	r24
     ff0:	98 2f       	mov	r25, r24
     ff2:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
     ff6:	6b 01       	movw	r12, r22
     ff8:	7c 01       	movw	r14, r24
     ffa:	ed 81       	ldd	r30, Y+5	; 0x05
     ffc:	fe 81       	ldd	r31, Y+6	; 0x06
     ffe:	62 81       	ldd	r22, Z+2	; 0x02
    1000:	73 81       	ldd	r23, Z+3	; 0x03
    1002:	e9 81       	ldd	r30, Y+1	; 0x01
    1004:	fa 81       	ldd	r31, Y+2	; 0x02
    1006:	82 81       	ldd	r24, Z+2	; 0x02
    1008:	93 81       	ldd	r25, Z+3	; 0x03
    100a:	68 1b       	sub	r22, r24
    100c:	79 0b       	sbc	r23, r25
    100e:	88 27       	eor	r24, r24
    1010:	77 fd       	sbrc	r23, 7
    1012:	80 95       	com	r24
    1014:	98 2f       	mov	r25, r24
    1016:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    101a:	a7 01       	movw	r20, r14
    101c:	96 01       	movw	r18, r12
    101e:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <atan2>
    1022:	6b 01       	movw	r12, r22
    1024:	7c 01       	movw	r14, r24
    1026:	60 93 81 01 	sts	0x0181, r22
    102a:	70 93 82 01 	sts	0x0182, r23
    102e:	80 93 83 01 	sts	0x0183, r24
    1032:	90 93 84 01 	sts	0x0184, r25
    alpha = -atan2(S0[0],S0[1]);
    1036:	b8 01       	movw	r22, r16
    1038:	88 27       	eor	r24, r24
    103a:	77 fd       	sbrc	r23, 7
    103c:	80 95       	com	r24
    103e:	98 2f       	mov	r25, r24
    1040:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1044:	69 83       	std	Y+1, r22	; 0x01
    1046:	7a 83       	std	Y+2, r23	; 0x02
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	b1 01       	movw	r22, r2
    104e:	88 27       	eor	r24, r24
    1050:	77 fd       	sbrc	r23, 7
    1052:	80 95       	com	r24
    1054:	98 2f       	mov	r25, r24
    1056:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    105a:	29 81       	ldd	r18, Y+1	; 0x01
    105c:	3a 81       	ldd	r19, Y+2	; 0x02
    105e:	4b 81       	ldd	r20, Y+3	; 0x03
    1060:	5c 81       	ldd	r21, Y+4	; 0x04
    1062:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <atan2>
    1066:	9b 01       	movw	r18, r22
    1068:	ac 01       	movw	r20, r24
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	b0 58       	subi	r27, 0x80	; 128
    1070:	80 93 9d 01 	sts	0x019D, r24
    1074:	90 93 9e 01 	sts	0x019E, r25
    1078:	a0 93 9f 01 	sts	0x019F, r26
    107c:	b0 93 a0 01 	sts	0x01A0, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    1080:	77 fa       	bst	r7, 7
    1082:	70 94       	com	r7
    1084:	77 f8       	bld	r7, 7
    1086:	70 94       	com	r7
    1088:	c5 01       	movw	r24, r10
    108a:	b4 01       	movw	r22, r8
    108c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    1090:	86 2e       	mov	r8, r22
    1092:	97 2e       	mov	r9, r23
    1094:	a8 2e       	mov	r10, r24
    1096:	b9 2e       	mov	r11, r25
    1098:	0e 94 04 17 	call	0x2e08	; 0x2e08 <cos>
    109c:	9b 01       	movw	r18, r22
    109e:	ac 01       	movw	r20, r24
    10a0:	c3 01       	movw	r24, r6
    10a2:	b2 01       	movw	r22, r4
    10a4:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	40 e0       	ldi	r20, 0x00	; 0
    10ae:	51 e4       	ldi	r21, 0x41	; 65
    10b0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    10b4:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    10b8:	8b 01       	movw	r16, r22
    10ba:	70 93 19 01 	sts	0x0119, r23
    10be:	60 93 18 01 	sts	0x0118, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    10c2:	68 2d       	mov	r22, r8
    10c4:	79 2d       	mov	r23, r9
    10c6:	8a 2d       	mov	r24, r10
    10c8:	9b 2d       	mov	r25, r11
    10ca:	0e 94 1e 19 	call	0x323c	; 0x323c <sin>
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	c3 01       	movw	r24, r6
    10d4:	b2 01       	movw	r22, r4
    10d6:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 ee       	ldi	r20, 0xE0	; 224
    10e0:	50 e4       	ldi	r21, 0x40	; 64
    10e2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    10e6:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    10ea:	70 93 17 01 	sts	0x0117, r23
    10ee:	60 93 16 01 	sts	0x0116, r22
    orientation_current = (theta2) * 180/M_PI;
    10f2:	20 e0       	ldi	r18, 0x00	; 0
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	44 e3       	ldi	r20, 0x34	; 52
    10f8:	53 e4       	ldi	r21, 0x43	; 67
    10fa:	c7 01       	movw	r24, r14
    10fc:	b6 01       	movw	r22, r12
    10fe:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1102:	2b ed       	ldi	r18, 0xDB	; 219
    1104:	3f e0       	ldi	r19, 0x0F	; 15
    1106:	49 e4       	ldi	r20, 0x49	; 73
    1108:	50 e4       	ldi	r21, 0x40	; 64
    110a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__divsf3>
    110e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1112:	70 93 1b 01 	sts	0x011B, r23
    1116:	60 93 1a 01 	sts	0x011A, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    111a:	c0 90 12 01 	lds	r12, 0x0112
    111e:	d0 90 13 01 	lds	r13, 0x0113
    1122:	e0 90 14 01 	lds	r14, 0x0114
    1126:	f0 90 15 01 	lds	r15, 0x0115
    112a:	60 91 1e 01 	lds	r22, 0x011E
    112e:	70 91 1f 01 	lds	r23, 0x011F
    1132:	88 27       	eor	r24, r24
    1134:	77 fd       	sbrc	r23, 7
    1136:	80 95       	com	r24
    1138:	98 2f       	mov	r25, r24
    113a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    113e:	a7 01       	movw	r20, r14
    1140:	96 01       	movw	r18, r12
    1142:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1146:	4b 01       	movw	r8, r22
    1148:	5c 01       	movw	r10, r24
    114a:	a7 01       	movw	r20, r14
    114c:	96 01       	movw	r18, r12
    114e:	60 e0       	ldi	r22, 0x00	; 0
    1150:	70 e0       	ldi	r23, 0x00	; 0
    1152:	80 e8       	ldi	r24, 0x80	; 128
    1154:	9f e3       	ldi	r25, 0x3F	; 63
    1156:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    115a:	6b 01       	movw	r12, r22
    115c:	7c 01       	movw	r14, r24
    115e:	b8 01       	movw	r22, r16
    1160:	88 27       	eor	r24, r24
    1162:	77 fd       	sbrc	r23, 7
    1164:	80 95       	com	r24
    1166:	98 2f       	mov	r25, r24
    1168:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    116c:	9b 01       	movw	r18, r22
    116e:	ac 01       	movw	r20, r24
    1170:	c7 01       	movw	r24, r14
    1172:	b6 01       	movw	r22, r12
    1174:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1178:	9b 01       	movw	r18, r22
    117a:	ac 01       	movw	r20, r24
    117c:	c5 01       	movw	r24, r10
    117e:	b4 01       	movw	r22, r8
    1180:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    1184:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1188:	ef 81       	ldd	r30, Y+7	; 0x07
    118a:	f8 85       	ldd	r31, Y+8	; 0x08
    118c:	71 83       	std	Z+1, r23	; 0x01
    118e:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    1190:	c0 90 12 01 	lds	r12, 0x0112
    1194:	d0 90 13 01 	lds	r13, 0x0113
    1198:	e0 90 14 01 	lds	r14, 0x0114
    119c:	f0 90 15 01 	lds	r15, 0x0115
    11a0:	60 91 1c 01 	lds	r22, 0x011C
    11a4:	70 91 1d 01 	lds	r23, 0x011D
    11a8:	88 27       	eor	r24, r24
    11aa:	77 fd       	sbrc	r23, 7
    11ac:	80 95       	com	r24
    11ae:	98 2f       	mov	r25, r24
    11b0:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    11b4:	a7 01       	movw	r20, r14
    11b6:	96 01       	movw	r18, r12
    11b8:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    11bc:	4b 01       	movw	r8, r22
    11be:	5c 01       	movw	r10, r24
    11c0:	a7 01       	movw	r20, r14
    11c2:	96 01       	movw	r18, r12
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	70 e0       	ldi	r23, 0x00	; 0
    11c8:	80 e8       	ldi	r24, 0x80	; 128
    11ca:	9f e3       	ldi	r25, 0x3F	; 63
    11cc:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    11d0:	6b 01       	movw	r12, r22
    11d2:	7c 01       	movw	r14, r24
    11d4:	60 91 16 01 	lds	r22, 0x0116
    11d8:	70 91 17 01 	lds	r23, 0x0117
    11dc:	88 27       	eor	r24, r24
    11de:	77 fd       	sbrc	r23, 7
    11e0:	80 95       	com	r24
    11e2:	98 2f       	mov	r25, r24
    11e4:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    11e8:	9b 01       	movw	r18, r22
    11ea:	ac 01       	movw	r20, r24
    11ec:	c7 01       	movw	r24, r14
    11ee:	b6 01       	movw	r22, r12
    11f0:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    11f4:	9b 01       	movw	r18, r22
    11f6:	ac 01       	movw	r20, r24
    11f8:	c5 01       	movw	r24, r10
    11fa:	b4 01       	movw	r22, r8
    11fc:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    1200:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1204:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1206:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1208:	71 83       	std	Z+1, r23	; 0x01
    120a:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    120c:	c0 90 12 01 	lds	r12, 0x0112
    1210:	d0 90 13 01 	lds	r13, 0x0113
    1214:	e0 90 14 01 	lds	r14, 0x0114
    1218:	f0 90 15 01 	lds	r15, 0x0115
    121c:	60 91 20 01 	lds	r22, 0x0120
    1220:	70 91 21 01 	lds	r23, 0x0121
    1224:	88 27       	eor	r24, r24
    1226:	77 fd       	sbrc	r23, 7
    1228:	80 95       	com	r24
    122a:	98 2f       	mov	r25, r24
    122c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1230:	a7 01       	movw	r20, r14
    1232:	96 01       	movw	r18, r12
    1234:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1238:	4b 01       	movw	r8, r22
    123a:	5c 01       	movw	r10, r24
    123c:	a7 01       	movw	r20, r14
    123e:	96 01       	movw	r18, r12
    1240:	60 e0       	ldi	r22, 0x00	; 0
    1242:	70 e0       	ldi	r23, 0x00	; 0
    1244:	80 e8       	ldi	r24, 0x80	; 128
    1246:	9f e3       	ldi	r25, 0x3F	; 63
    1248:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    124c:	6b 01       	movw	r12, r22
    124e:	7c 01       	movw	r14, r24
    1250:	60 91 1a 01 	lds	r22, 0x011A
    1254:	70 91 1b 01 	lds	r23, 0x011B
    1258:	88 27       	eor	r24, r24
    125a:	77 fd       	sbrc	r23, 7
    125c:	80 95       	com	r24
    125e:	98 2f       	mov	r25, r24
    1260:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1264:	9b 01       	movw	r18, r22
    1266:	ac 01       	movw	r20, r24
    1268:	c7 01       	movw	r24, r14
    126a:	b6 01       	movw	r22, r12
    126c:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1270:	9b 01       	movw	r18, r22
    1272:	ac 01       	movw	r20, r24
    1274:	c5 01       	movw	r24, r10
    1276:	b4 01       	movw	r22, r8
    1278:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    127c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1280:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1282:	f8 a1       	ldd	r31, Y+32	; 0x20
    1284:	71 83       	std	Z+1, r23	; 0x01
    1286:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    1288:	ef 81       	ldd	r30, Y+7	; 0x07
    128a:	f8 85       	ldd	r31, Y+8	; 0x08
    128c:	80 81       	ld	r24, Z
    128e:	91 81       	ldd	r25, Z+1	; 0x01
    1290:	90 93 1f 01 	sts	0x011F, r25
    1294:	80 93 1e 01 	sts	0x011E, r24
    y_robot_prev     = *y_robot;
    1298:	ed 8d       	ldd	r30, Y+29	; 0x1d
    129a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    129c:	80 81       	ld	r24, Z
    129e:	91 81       	ldd	r25, Z+1	; 0x01
    12a0:	90 93 1d 01 	sts	0x011D, r25
    12a4:	80 93 1c 01 	sts	0x011C, r24
    orientation_prev = *orientation;
    12a8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    12aa:	f8 a1       	ldd	r31, Y+32	; 0x20
    12ac:	80 81       	ld	r24, Z
    12ae:	91 81       	ldd	r25, Z+1	; 0x01
    12b0:	90 93 21 01 	sts	0x0121, r25
    12b4:	80 93 20 01 	sts	0x0120, r24
    
    return 1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	2c c1       	rjmp	.+600    	; 0x1514 <__stack+0xa15>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    12bc:	e0 91 02 01 	lds	r30, 0x0102
    12c0:	f0 91 03 01 	lds	r31, 0x0103
    12c4:	4c 01       	movw	r8, r24
    12c6:	8e 1a       	sub	r8, r30
    12c8:	9f 0a       	sbc	r9, r31
    12ca:	90 92 47 01 	sts	0x0147, r9
    12ce:	80 92 46 01 	sts	0x0146, r8
    12d2:	80 91 00 01 	lds	r24, 0x0100
    12d6:	90 91 01 01 	lds	r25, 0x0101
    12da:	08 1b       	sub	r16, r24
    12dc:	19 0b       	sbc	r17, r25
    12de:	10 93 49 01 	sts	0x0149, r17
    12e2:	00 93 48 01 	sts	0x0148, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    12e6:	3b 01       	movw	r6, r22
    12e8:	6e 1a       	sub	r6, r30
    12ea:	7f 0a       	sbc	r7, r31
    12ec:	70 92 43 01 	sts	0x0143, r7
    12f0:	60 92 42 01 	sts	0x0142, r6
    12f4:	e8 1a       	sub	r14, r24
    12f6:	f9 0a       	sbc	r15, r25
    12f8:	f0 92 45 01 	sts	0x0145, r15
    12fc:	e0 92 44 01 	sts	0x0144, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    1300:	2a 01       	movw	r4, r20
    1302:	4e 1a       	sub	r4, r30
    1304:	5f 0a       	sbc	r5, r31
    1306:	50 92 3f 01 	sts	0x013F, r5
    130a:	40 92 3e 01 	sts	0x013E, r4
    130e:	16 01       	movw	r2, r12
    1310:	28 1a       	sub	r2, r24
    1312:	39 0a       	sbc	r3, r25
    1314:	30 92 41 01 	sts	0x0141, r3
    1318:	20 92 40 01 	sts	0x0140, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    131c:	69 01       	movw	r12, r18
    131e:	ce 1a       	sub	r12, r30
    1320:	df 0a       	sbc	r13, r31
    1322:	d0 92 3b 01 	sts	0x013B, r13
    1326:	c0 92 3a 01 	sts	0x013A, r12
    132a:	a8 1a       	sub	r10, r24
    132c:	b9 0a       	sbc	r11, r25
    132e:	b0 92 3d 01 	sts	0x013D, r11
    1332:	a0 92 3c 01 	sts	0x013C, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    1336:	93 01       	movw	r18, r6
    1338:	28 19       	sub	r18, r8
    133a:	39 09       	sbc	r19, r9
    133c:	c7 01       	movw	r24, r14
    133e:	80 1b       	sub	r24, r16
    1340:	91 0b       	sbc	r25, r17
    1342:	22 9f       	mul	r18, r18
    1344:	b0 01       	movw	r22, r0
    1346:	23 9f       	mul	r18, r19
    1348:	70 0d       	add	r23, r0
    134a:	70 0d       	add	r23, r0
    134c:	11 24       	eor	r1, r1
    134e:	88 9f       	mul	r24, r24
    1350:	90 01       	movw	r18, r0
    1352:	89 9f       	mul	r24, r25
    1354:	30 0d       	add	r19, r0
    1356:	30 0d       	add	r19, r0
    1358:	11 24       	eor	r1, r1
    135a:	62 0f       	add	r22, r18
    135c:	73 1f       	adc	r23, r19
    135e:	88 27       	eor	r24, r24
    1360:	77 fd       	sbrc	r23, 7
    1362:	80 95       	com	r24
    1364:	98 2f       	mov	r25, r24
    1366:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    136a:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
    136e:	60 93 22 01 	sts	0x0122, r22
    1372:	70 93 23 01 	sts	0x0123, r23
    1376:	80 93 24 01 	sts	0x0124, r24
    137a:	90 93 25 01 	sts	0x0125, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    137e:	92 01       	movw	r18, r4
    1380:	28 19       	sub	r18, r8
    1382:	39 09       	sbc	r19, r9
    1384:	c1 01       	movw	r24, r2
    1386:	80 1b       	sub	r24, r16
    1388:	91 0b       	sbc	r25, r17
    138a:	22 9f       	mul	r18, r18
    138c:	b0 01       	movw	r22, r0
    138e:	23 9f       	mul	r18, r19
    1390:	70 0d       	add	r23, r0
    1392:	70 0d       	add	r23, r0
    1394:	11 24       	eor	r1, r1
    1396:	88 9f       	mul	r24, r24
    1398:	90 01       	movw	r18, r0
    139a:	89 9f       	mul	r24, r25
    139c:	30 0d       	add	r19, r0
    139e:	30 0d       	add	r19, r0
    13a0:	11 24       	eor	r1, r1
    13a2:	62 0f       	add	r22, r18
    13a4:	73 1f       	adc	r23, r19
    13a6:	88 27       	eor	r24, r24
    13a8:	77 fd       	sbrc	r23, 7
    13aa:	80 95       	com	r24
    13ac:	98 2f       	mov	r25, r24
    13ae:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    13b2:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
    13b6:	60 93 26 01 	sts	0x0126, r22
    13ba:	70 93 27 01 	sts	0x0127, r23
    13be:	80 93 28 01 	sts	0x0128, r24
    13c2:	90 93 29 01 	sts	0x0129, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    13c6:	96 01       	movw	r18, r12
    13c8:	28 19       	sub	r18, r8
    13ca:	39 09       	sbc	r19, r9
    13cc:	c5 01       	movw	r24, r10
    13ce:	80 1b       	sub	r24, r16
    13d0:	91 0b       	sbc	r25, r17
    13d2:	22 9f       	mul	r18, r18
    13d4:	b0 01       	movw	r22, r0
    13d6:	23 9f       	mul	r18, r19
    13d8:	70 0d       	add	r23, r0
    13da:	70 0d       	add	r23, r0
    13dc:	11 24       	eor	r1, r1
    13de:	88 9f       	mul	r24, r24
    13e0:	90 01       	movw	r18, r0
    13e2:	89 9f       	mul	r24, r25
    13e4:	30 0d       	add	r19, r0
    13e6:	30 0d       	add	r19, r0
    13e8:	11 24       	eor	r1, r1
    13ea:	62 0f       	add	r22, r18
    13ec:	73 1f       	adc	r23, r19
    13ee:	88 27       	eor	r24, r24
    13f0:	77 fd       	sbrc	r23, 7
    13f2:	80 95       	com	r24
    13f4:	98 2f       	mov	r25, r24
    13f6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    13fa:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
    13fe:	60 93 2a 01 	sts	0x012A, r22
    1402:	70 93 2b 01 	sts	0x012B, r23
    1406:	80 93 2c 01 	sts	0x012C, r24
    140a:	90 93 2d 01 	sts	0x012D, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    140e:	92 01       	movw	r18, r4
    1410:	26 19       	sub	r18, r6
    1412:	37 09       	sbc	r19, r7
    1414:	c1 01       	movw	r24, r2
    1416:	8e 19       	sub	r24, r14
    1418:	9f 09       	sbc	r25, r15
    141a:	22 9f       	mul	r18, r18
    141c:	b0 01       	movw	r22, r0
    141e:	23 9f       	mul	r18, r19
    1420:	70 0d       	add	r23, r0
    1422:	70 0d       	add	r23, r0
    1424:	11 24       	eor	r1, r1
    1426:	88 9f       	mul	r24, r24
    1428:	90 01       	movw	r18, r0
    142a:	89 9f       	mul	r24, r25
    142c:	30 0d       	add	r19, r0
    142e:	30 0d       	add	r19, r0
    1430:	11 24       	eor	r1, r1
    1432:	62 0f       	add	r22, r18
    1434:	73 1f       	adc	r23, r19
    1436:	88 27       	eor	r24, r24
    1438:	77 fd       	sbrc	r23, 7
    143a:	80 95       	com	r24
    143c:	98 2f       	mov	r25, r24
    143e:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1442:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
    1446:	60 93 2e 01 	sts	0x012E, r22
    144a:	70 93 2f 01 	sts	0x012F, r23
    144e:	80 93 30 01 	sts	0x0130, r24
    1452:	90 93 31 01 	sts	0x0131, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    1456:	96 01       	movw	r18, r12
    1458:	26 19       	sub	r18, r6
    145a:	37 09       	sbc	r19, r7
    145c:	c5 01       	movw	r24, r10
    145e:	8e 19       	sub	r24, r14
    1460:	9f 09       	sbc	r25, r15
    1462:	22 9f       	mul	r18, r18
    1464:	b0 01       	movw	r22, r0
    1466:	23 9f       	mul	r18, r19
    1468:	70 0d       	add	r23, r0
    146a:	70 0d       	add	r23, r0
    146c:	11 24       	eor	r1, r1
    146e:	88 9f       	mul	r24, r24
    1470:	90 01       	movw	r18, r0
    1472:	89 9f       	mul	r24, r25
    1474:	30 0d       	add	r19, r0
    1476:	30 0d       	add	r19, r0
    1478:	11 24       	eor	r1, r1
    147a:	62 0f       	add	r22, r18
    147c:	73 1f       	adc	r23, r19
    147e:	88 27       	eor	r24, r24
    1480:	77 fd       	sbrc	r23, 7
    1482:	80 95       	com	r24
    1484:	98 2f       	mov	r25, r24
    1486:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    148a:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
    148e:	60 93 32 01 	sts	0x0132, r22
    1492:	70 93 33 01 	sts	0x0133, r23
    1496:	80 93 34 01 	sts	0x0134, r24
    149a:	90 93 35 01 	sts	0x0135, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    149e:	c4 18       	sub	r12, r4
    14a0:	d5 08       	sbc	r13, r5
    14a2:	a2 18       	sub	r10, r2
    14a4:	b3 08       	sbc	r11, r3
    14a6:	cc 9c       	mul	r12, r12
    14a8:	b0 01       	movw	r22, r0
    14aa:	cd 9c       	mul	r12, r13
    14ac:	70 0d       	add	r23, r0
    14ae:	70 0d       	add	r23, r0
    14b0:	11 24       	eor	r1, r1
    14b2:	aa 9c       	mul	r10, r10
    14b4:	c0 01       	movw	r24, r0
    14b6:	ab 9c       	mul	r10, r11
    14b8:	90 0d       	add	r25, r0
    14ba:	90 0d       	add	r25, r0
    14bc:	11 24       	eor	r1, r1
    14be:	68 0f       	add	r22, r24
    14c0:	79 1f       	adc	r23, r25
    14c2:	88 27       	eor	r24, r24
    14c4:	77 fd       	sbrc	r23, 7
    14c6:	80 95       	com	r24
    14c8:	98 2f       	mov	r25, r24
    14ca:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    14ce:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
    14d2:	60 93 36 01 	sts	0x0136, r22
    14d6:	70 93 37 01 	sts	0x0137, r23
    14da:	80 93 38 01 	sts	0x0138, r24
    14de:	90 93 39 01 	sts	0x0139, r25
    14e2:	02 e2       	ldi	r16, 0x22	; 34
    14e4:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    14e6:	e1 2c       	mov	r14, r1
    14e8:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    14ea:	1e 82       	std	Y+6, r1	; 0x06
    14ec:	1d 82       	std	Y+5, r1	; 0x05
    14ee:	1a 82       	std	Y+2, r1	; 0x02
    14f0:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    14f2:	21 2c       	mov	r2, r1
    14f4:	68 94       	set
    14f6:	33 24       	eor	r3, r3
    14f8:	36 f8       	bld	r3, 6
    14fa:	0f 2e       	mov	r0, r31
    14fc:	fc e1       	ldi	r31, 0x1C	; 28
    14fe:	4f 2e       	mov	r4, r31
    1500:	f0 2d       	mov	r31, r0
    1502:	0f 2e       	mov	r0, r31
    1504:	f6 e4       	ldi	r31, 0x46	; 70
    1506:	5f 2e       	mov	r5, r31
    1508:	f0 2d       	mov	r31, r0
    150a:	61 2c       	mov	r6, r1
    150c:	71 2c       	mov	r7, r1
    150e:	81 2c       	mov	r8, r1
    1510:	91 2c       	mov	r9, r1
    1512:	2b c8       	rjmp	.-4010   	; 0x56a <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    1514:	28 96       	adiw	r28, 0x08	; 8
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	af 90       	pop	r10
    1534:	9f 90       	pop	r9
    1536:	8f 90       	pop	r8
    1538:	7f 90       	pop	r7
    153a:	6f 90       	pop	r6
    153c:	5f 90       	pop	r5
    153e:	4f 90       	pop	r4
    1540:	3f 90       	pop	r3
    1542:	2f 90       	pop	r2
    1544:	08 95       	ret

00001546 <calculate_diff_theta>:


// --------------------------------------------------------------
// CALCULATE ERROR IN ORIENTATION and OPTIMAL TURNING
// --------------------------------------------------------------
void calculate_diff_theta(float theta_des, float* err_theta, int* dir_to_turn){
    1546:	2f 92       	push	r2
    1548:	3f 92       	push	r3
    154a:	4f 92       	push	r4
    154c:	5f 92       	push	r5
    154e:	6f 92       	push	r6
    1550:	7f 92       	push	r7
    1552:	8f 92       	push	r8
    1554:	9f 92       	push	r9
    1556:	af 92       	push	r10
    1558:	bf 92       	push	r11
    155a:	cf 92       	push	r12
    155c:	df 92       	push	r13
    155e:	ef 92       	push	r14
    1560:	ff 92       	push	r15
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	6b 01       	movw	r12, r22
    156c:	7c 01       	movw	r14, r24
    156e:	ea 01       	movw	r28, r20
    1570:	89 01       	movw	r16, r18
    
    float angle_dir_aux = theta_des-180;
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	44 e3       	ldi	r20, 0x34	; 52
    1578:	53 e4       	ldi	r21, 0x43	; 67
    157a:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    157e:	96 2e       	mov	r9, r22
    1580:	87 2e       	mov	r8, r23
    1582:	38 2e       	mov	r3, r24
    1584:	29 2e       	mov	r2, r25
    float add_360 = 0;
    if (angle_dir_aux < -180)
    1586:	20 e0       	ldi	r18, 0x00	; 0
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	44 e3       	ldi	r20, 0x34	; 52
    158c:	53 ec       	ldi	r21, 0xC3	; 195
    158e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1592:	88 23       	and	r24, r24
    1594:	0c f0       	brlt	.+2      	; 0x1598 <calculate_diff_theta+0x52>
    1596:	c8 c0       	rjmp	.+400    	; 0x1728 <calculate_diff_theta+0x1e2>
    {
        angle_dir_aux += 360;
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	44 eb       	ldi	r20, 0xB4	; 180
    159e:	53 e4       	ldi	r21, 0x43	; 67
    15a0:	69 2d       	mov	r22, r9
    15a2:	78 2d       	mov	r23, r8
    15a4:	83 2d       	mov	r24, r3
    15a6:	92 2d       	mov	r25, r2
    15a8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    15ac:	26 2e       	mov	r2, r22
    15ae:	37 2e       	mov	r3, r23
    15b0:	88 2e       	mov	r8, r24
    15b2:	99 2e       	mov	r9, r25
            *err_theta = (theta_robot+360) - theta_des;
        else
            *err_theta = (theta_robot) - theta_des;
        *dir_to_turn = 1;
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    15b4:	a0 90 5a 01 	lds	r10, 0x015A
    15b8:	b0 90 5b 01 	lds	r11, 0x015B
    15bc:	b5 01       	movw	r22, r10
    15be:	88 27       	eor	r24, r24
    15c0:	77 fd       	sbrc	r23, 7
    15c2:	80 95       	com	r24
    15c4:	98 2f       	mov	r25, r24
    15c6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    15ca:	2b 01       	movw	r4, r22
    15cc:	3c 01       	movw	r6, r24
    15ce:	9b 01       	movw	r18, r22
    15d0:	ac 01       	movw	r20, r24
    15d2:	c7 01       	movw	r24, r14
    15d4:	b6 01       	movw	r22, r12
    15d6:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
    15da:	88 23       	and	r24, r24
    15dc:	0c f0       	brlt	.+2      	; 0x15e0 <calculate_diff_theta+0x9a>
    15de:	4e c0       	rjmp	.+156    	; 0x167c <calculate_diff_theta+0x136>
    15e0:	52 c0       	rjmp	.+164    	; 0x1686 <calculate_diff_theta+0x140>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
    15e2:	a3 01       	movw	r20, r6
    15e4:	92 01       	movw	r18, r4
    15e6:	c7 01       	movw	r24, r14
    15e8:	b6 01       	movw	r22, r12
    15ea:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
    15ee:	88 23       	and	r24, r24
    15f0:	74 f0       	brlt	.+28     	; 0x160e <calculate_diff_theta+0xc8>
    {
        *err_theta = theta_des - theta_robot;
    15f2:	a3 01       	movw	r20, r6
    15f4:	92 01       	movw	r18, r4
    15f6:	c7 01       	movw	r24, r14
    15f8:	b6 01       	movw	r22, r12
    15fa:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    15fe:	68 83       	st	Y, r22
    1600:	79 83       	std	Y+1, r23	; 0x01
    1602:	8a 83       	std	Y+2, r24	; 0x02
    1604:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
    1606:	f8 01       	movw	r30, r16
    1608:	11 82       	std	Z+1, r1	; 0x01
    160a:	10 82       	st	Z, r1
    160c:	a6 c0       	rjmp	.+332    	; 0x175a <calculate_diff_theta+0x214>
    }
    else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > theta_des))
    160e:	a3 01       	movw	r20, r6
    1610:	92 01       	movw	r18, r4
    1612:	69 2d       	mov	r22, r9
    1614:	78 2d       	mov	r23, r8
    1616:	83 2d       	mov	r24, r3
    1618:	92 2d       	mov	r25, r2
    161a:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
    161e:	18 16       	cp	r1, r24
    1620:	4c f0       	brlt	.+18     	; 0x1634 <calculate_diff_theta+0xee>
    1622:	a3 01       	movw	r20, r6
    1624:	92 01       	movw	r18, r4
    1626:	c7 01       	movw	r24, r14
    1628:	b6 01       	movw	r22, r12
    162a:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    162e:	88 23       	and	r24, r24
    1630:	0c f0       	brlt	.+2      	; 0x1634 <calculate_diff_theta+0xee>
    1632:	93 c0       	rjmp	.+294    	; 0x175a <calculate_diff_theta+0x214>
    {
        if (theta_robot < 0)
    1634:	bb 20       	and	r11, r11
    1636:	94 f4       	brge	.+36     	; 0x165c <calculate_diff_theta+0x116>
            *err_theta = (theta_robot+360) - theta_des;
    1638:	b5 01       	movw	r22, r10
    163a:	68 59       	subi	r22, 0x98	; 152
    163c:	7e 4f       	sbci	r23, 0xFE	; 254
    163e:	88 27       	eor	r24, r24
    1640:	77 fd       	sbrc	r23, 7
    1642:	80 95       	com	r24
    1644:	98 2f       	mov	r25, r24
    1646:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    164a:	a7 01       	movw	r20, r14
    164c:	96 01       	movw	r18, r12
    164e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    1652:	68 83       	st	Y, r22
    1654:	79 83       	std	Y+1, r23	; 0x01
    1656:	8a 83       	std	Y+2, r24	; 0x02
    1658:	9b 83       	std	Y+3, r25	; 0x03
    165a:	0a c0       	rjmp	.+20     	; 0x1670 <calculate_diff_theta+0x12a>
        else
            *err_theta = (theta_robot) - theta_des;
    165c:	a7 01       	movw	r20, r14
    165e:	96 01       	movw	r18, r12
    1660:	c3 01       	movw	r24, r6
    1662:	b2 01       	movw	r22, r4
    1664:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    1668:	68 83       	st	Y, r22
    166a:	79 83       	std	Y+1, r23	; 0x01
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	f8 01       	movw	r30, r16
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	80 83       	st	Z, r24
    167a:	6f c0       	rjmp	.+222    	; 0x175a <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    167c:	fc e4       	ldi	r31, 0x4C	; 76
    167e:	af 16       	cp	r10, r31
    1680:	ff ef       	ldi	r31, 0xFF	; 255
    1682:	bf 06       	cpc	r11, r31
    1684:	74 f4       	brge	.+28     	; 0x16a2 <calculate_diff_theta+0x15c>
    1686:	a3 01       	movw	r20, r6
    1688:	92 01       	movw	r18, r4
    168a:	62 2d       	mov	r22, r2
    168c:	73 2d       	mov	r23, r3
    168e:	88 2d       	mov	r24, r8
    1690:	99 2d       	mov	r25, r9
    1692:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1696:	18 16       	cp	r1, r24
    1698:	2c f1       	brlt	.+74     	; 0x16e4 <calculate_diff_theta+0x19e>
    169a:	85 eb       	ldi	r24, 0xB5	; 181
    169c:	a8 16       	cp	r10, r24
    169e:	b1 04       	cpc	r11, r1
    16a0:	0c f5       	brge	.+66     	; 0x16e4 <calculate_diff_theta+0x19e>
    {
        if (theta_robot < 0)
    16a2:	bb 20       	and	r11, r11
    16a4:	5c f4       	brge	.+22     	; 0x16bc <calculate_diff_theta+0x176>
            *err_theta = theta_des - theta_robot;
    16a6:	a3 01       	movw	r20, r6
    16a8:	92 01       	movw	r18, r4
    16aa:	c7 01       	movw	r24, r14
    16ac:	b6 01       	movw	r22, r12
    16ae:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    16b2:	68 83       	st	Y, r22
    16b4:	79 83       	std	Y+1, r23	; 0x01
    16b6:	8a 83       	std	Y+2, r24	; 0x02
    16b8:	9b 83       	std	Y+3, r25	; 0x03
    16ba:	10 c0       	rjmp	.+32     	; 0x16dc <calculate_diff_theta+0x196>
        else
            *err_theta = (theta_des + 360) - theta_robot;
    16bc:	20 e0       	ldi	r18, 0x00	; 0
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	44 eb       	ldi	r20, 0xB4	; 180
    16c2:	53 e4       	ldi	r21, 0x43	; 67
    16c4:	c7 01       	movw	r24, r14
    16c6:	b6 01       	movw	r22, r12
    16c8:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    16cc:	a3 01       	movw	r20, r6
    16ce:	92 01       	movw	r18, r4
    16d0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    16d4:	68 83       	st	Y, r22
    16d6:	79 83       	std	Y+1, r23	; 0x01
    16d8:	8a 83       	std	Y+2, r24	; 0x02
    16da:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
    16dc:	f8 01       	movw	r30, r16
    16de:	11 82       	std	Z+1, r1	; 0x01
    16e0:	10 82       	st	Z, r1
    16e2:	3b c0       	rjmp	.+118    	; 0x175a <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && (theta_robot > theta_des && theta_robot < angle_dir_aux))
    16e4:	a3 01       	movw	r20, r6
    16e6:	92 01       	movw	r18, r4
    16e8:	c7 01       	movw	r24, r14
    16ea:	b6 01       	movw	r22, r12
    16ec:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	9c f5       	brge	.+102    	; 0x175a <calculate_diff_theta+0x214>
    16f4:	a3 01       	movw	r20, r6
    16f6:	92 01       	movw	r18, r4
    16f8:	62 2d       	mov	r22, r2
    16fa:	73 2d       	mov	r23, r3
    16fc:	88 2d       	mov	r24, r8
    16fe:	99 2d       	mov	r25, r9
    1700:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <calculate_diff_theta+0x214>
    {
        *err_theta = theta_robot - theta_des;
    1708:	a7 01       	movw	r20, r14
    170a:	96 01       	movw	r18, r12
    170c:	c3 01       	movw	r24, r6
    170e:	b2 01       	movw	r22, r4
    1710:	0e 94 39 16 	call	0x2c72	; 0x2c72 <__subsf3>
    1714:	68 83       	st	Y, r22
    1716:	79 83       	std	Y+1, r23	; 0x01
    1718:	8a 83       	std	Y+2, r24	; 0x02
    171a:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	f8 01       	movw	r30, r16
    1722:	91 83       	std	Z+1, r25	; 0x01
    1724:	80 83       	st	Z, r24
    1726:	19 c0       	rjmp	.+50     	; 0x175a <calculate_diff_theta+0x214>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
    1728:	a0 90 5a 01 	lds	r10, 0x015A
    172c:	b0 90 5b 01 	lds	r11, 0x015B
    1730:	b5 01       	movw	r22, r10
    1732:	88 27       	eor	r24, r24
    1734:	77 fd       	sbrc	r23, 7
    1736:	80 95       	com	r24
    1738:	98 2f       	mov	r25, r24
    173a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    173e:	2b 01       	movw	r4, r22
    1740:	3c 01       	movw	r6, r24
    1742:	9b 01       	movw	r18, r22
    1744:	ac 01       	movw	r20, r24
    1746:	69 2d       	mov	r22, r9
    1748:	78 2d       	mov	r23, r8
    174a:	83 2d       	mov	r24, r3
    174c:	92 2d       	mov	r25, r2
    174e:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1752:	18 16       	cp	r1, r24
    1754:	0c f0       	brlt	.+2      	; 0x1758 <calculate_diff_theta+0x212>
    1756:	45 cf       	rjmp	.-374    	; 0x15e2 <calculate_diff_theta+0x9c>
    1758:	5a cf       	rjmp	.-332    	; 0x160e <calculate_diff_theta+0xc8>
        *dir_to_turn = 1;
    }else {
        err_theta = 0;
        dir_to_turn = 0;
    }
}
    175a:	df 91       	pop	r29
    175c:	cf 91       	pop	r28
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	ff 90       	pop	r15
    1764:	ef 90       	pop	r14
    1766:	df 90       	pop	r13
    1768:	cf 90       	pop	r12
    176a:	bf 90       	pop	r11
    176c:	af 90       	pop	r10
    176e:	9f 90       	pop	r9
    1770:	8f 90       	pop	r8
    1772:	7f 90       	pop	r7
    1774:	6f 90       	pop	r6
    1776:	5f 90       	pop	r5
    1778:	4f 90       	pop	r4
    177a:	3f 90       	pop	r3
    177c:	2f 90       	pop	r2
    177e:	08 95       	ret

00001780 <turn_robot>:

// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO TURN ROBOT
// --------------------------------------------------------------
void turn_robot(float theta, int dir, float diff){
	if (dir == 1) {             // Move with a right curve
    1780:	41 30       	cpi	r20, 0x01	; 1
    1782:	51 05       	cpc	r21, r1
    1784:	c9 f4       	brne	.+50     	; 0x17b8 <turn_robot+0x38>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e0       	ldi	r20, 0x00	; 0
    178c:	51 e4       	ldi	r21, 0x41	; 65
    178e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1792:	20 e0       	ldi	r18, 0x00	; 0
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	41 ee       	ldi	r20, 0xE1	; 225
    1798:	54 e4       	ldi	r21, 0x44	; 68
    179a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    179e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    17a2:	70 93 8b 00 	sts	0x008B, r23
    17a6:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_MIN_RGHT+theta*Kp);// + diff*Kd);
    17aa:	70 93 8d 00 	sts	0x008D, r23
    17ae:	60 93 8c 00 	sts	0x008C, r22
		
		set(PORTB,3);
    17b2:	2b 9a       	sbi	0x05, 3	; 5
		clear(PORTD,3);
    17b4:	5b 98       	cbi	0x0b, 3	; 11
    17b6:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1C = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);;
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e0       	ldi	r20, 0x00	; 0
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    17c4:	20 e0       	ldi	r18, 0x00	; 0
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	41 ee       	ldi	r20, 0xE1	; 225
    17ca:	54 e4       	ldi	r21, 0x44	; 68
    17cc:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    17d0:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    17d4:	70 93 8d 00 	sts	0x008D, r23
    17d8:	60 93 8c 00 	sts	0x008C, r22
		OCR1B = (int)(PWM_MIN_LEFT+theta*Kp);// + diff*Kd);
    17dc:	70 93 8b 00 	sts	0x008B, r23
    17e0:	60 93 8a 00 	sts	0x008A, r22
		
		clear(PORTB,3);
    17e4:	2b 98       	cbi	0x05, 3	; 5
		set(PORTD,3);
    17e6:	5b 9a       	sbi	0x0b, 3	; 11
    17e8:	08 95       	ret

000017ea <move_robot>:

// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO MOVE ROBOT FORWARD
// --------------------------------------------------------------
void move_robot(float theta, int dir, float diff){
	if (dir == 1) {             // Move with a right curve
    17ea:	41 30       	cpi	r20, 0x01	; 1
    17ec:	51 05       	cpc	r21, r1
    17ee:	d9 f4       	brne	.+54     	; 0x1826 <move_robot+0x3c>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
    17f0:	28 e2       	ldi	r18, 0x28	; 40
    17f2:	3a e0       	ldi	r19, 0x0A	; 10
    17f4:	30 93 8b 00 	sts	0x008B, r19
    17f8:	20 93 8a 00 	sts	0x008A, r18
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+theta*Kp_move);
    17fc:	20 e0       	ldi	r18, 0x00	; 0
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	40 e2       	ldi	r20, 0x20	; 32
    1802:	51 e4       	ldi	r21, 0x41	; 65
    1804:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e4       	ldi	r19, 0x40	; 64
    180c:	4c e1       	ldi	r20, 0x1C	; 28
    180e:	55 e4       	ldi	r21, 0x45	; 69
    1810:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    1814:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1818:	70 93 8d 00 	sts	0x008D, r23
    181c:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
    1820:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1822:	5b 98       	cbi	0x0b, 3	; 11
    1824:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT+theta*Kp_move);
    1826:	20 e0       	ldi	r18, 0x00	; 0
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	40 e2       	ldi	r20, 0x20	; 32
    182c:	51 e4       	ldi	r21, 0x41	; 65
    182e:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	30 e8       	ldi	r19, 0x80	; 128
    1836:	42 e2       	ldi	r20, 0x22	; 34
    1838:	55 e4       	ldi	r21, 0x45	; 69
    183a:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    183e:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1842:	70 93 8b 00 	sts	0x008B, r23
    1846:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
    184a:	84 ec       	ldi	r24, 0xC4	; 196
    184c:	99 e0       	ldi	r25, 0x09	; 9
    184e:	90 93 8d 00 	sts	0x008D, r25
    1852:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
    1856:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1858:	5b 98       	cbi	0x0b, 3	; 11
    185a:	08 95       	ret

0000185c <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a right curve
    185c:	01 97       	sbiw	r24, 0x01	; 1
    185e:	09 f5       	brne	.+66     	; 0x18a2 <move_robot_to_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
    1860:	88 e2       	ldi	r24, 0x28	; 40
    1862:	9a e0       	ldi	r25, 0x0A	; 10
    1864:	90 93 8b 00 	sts	0x008B, r25
    1868:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
    186c:	88 27       	eor	r24, r24
    186e:	77 fd       	sbrc	r23, 7
    1870:	80 95       	com	r24
    1872:	98 2f       	mov	r25, r24
    1874:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1878:	2d ec       	ldi	r18, 0xCD	; 205
    187a:	3c ec       	ldi	r19, 0xCC	; 204
    187c:	4c ec       	ldi	r20, 0xCC	; 204
    187e:	5d e3       	ldi	r21, 0x3D	; 61
    1880:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	30 e4       	ldi	r19, 0x40	; 64
    1888:	4c e1       	ldi	r20, 0x1C	; 28
    188a:	55 e4       	ldi	r21, 0x45	; 69
    188c:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    1890:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1894:	70 93 8d 00 	sts	0x008D, r23
    1898:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
    189c:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    189e:	5b 98       	cbi	0x0b, 3	; 11
    18a0:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
    18a2:	88 27       	eor	r24, r24
    18a4:	77 fd       	sbrc	r23, 7
    18a6:	80 95       	com	r24
    18a8:	98 2f       	mov	r25, r24
    18aa:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    18ae:	2d ec       	ldi	r18, 0xCD	; 205
    18b0:	3c ec       	ldi	r19, 0xCC	; 204
    18b2:	4c ec       	ldi	r20, 0xCC	; 204
    18b4:	5d e3       	ldi	r21, 0x3D	; 61
    18b6:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e8       	ldi	r19, 0x80	; 128
    18be:	42 e2       	ldi	r20, 0x22	; 34
    18c0:	55 e4       	ldi	r21, 0x45	; 69
    18c2:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <__addsf3>
    18c6:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    18ca:	70 93 8b 00 	sts	0x008B, r23
    18ce:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
    18d2:	84 ec       	ldi	r24, 0xC4	; 196
    18d4:	99 e0       	ldi	r25, 0x09	; 9
    18d6:	90 93 8d 00 	sts	0x008D, r25
    18da:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
    18de:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    18e0:	5b 98       	cbi	0x0b, 3	; 11
    18e2:	08 95       	ret

000018e4 <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
    18e4:	10 92 8b 00 	sts	0x008B, r1
    18e8:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    18ec:	10 92 8d 00 	sts	0x008D, r1
    18f0:	10 92 8c 00 	sts	0x008C, r1
    18f4:	08 95       	ret

000018f6 <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
    18f6:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
    18f8:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
    18fa:	8c ef       	ldi	r24, 0xFC	; 252
    18fc:	98 e0       	ldi	r25, 0x08	; 8
    18fe:	90 93 8d 00 	sts	0x008D, r25
    1902:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    1906:	88 e9       	ldi	r24, 0x98	; 152
    1908:	98 e0       	ldi	r25, 0x08	; 8
    190a:	90 93 8b 00 	sts	0x008B, r25
    190e:	80 93 8a 00 	sts	0x008A, r24
    1912:	08 95       	ret

00001914 <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
    1914:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
    1916:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
    1918:	8c ef       	ldi	r24, 0xFC	; 252
    191a:	98 e0       	ldi	r25, 0x08	; 8
    191c:	90 93 8d 00 	sts	0x008D, r25
    1920:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    1924:	88 e9       	ldi	r24, 0x98	; 152
    1926:	98 e0       	ldi	r25, 0x08	; 8
    1928:	90 93 8b 00 	sts	0x008B, r25
    192c:	80 93 8a 00 	sts	0x008A, r24
    1930:	08 95       	ret

00001932 <go_bwd>:
// --------------------------------------------------------------
// GO BACKWARDS
// --------------------------------------------------------------
void go_bwd(void)
{
    set(PORTB,3);
    1932:	2b 9a       	sbi	0x05, 3	; 5
    set(PORTD,3);
    1934:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_FWD_LFT;
    1936:	88 e2       	ldi	r24, 0x28	; 40
    1938:	9a e0       	ldi	r25, 0x0A	; 10
    193a:	90 93 8d 00 	sts	0x008D, r25
    193e:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_FWD_RGHT;
    1942:	84 ec       	ldi	r24, 0xC4	; 196
    1944:	99 e0       	ldi	r25, 0x09	; 9
    1946:	90 93 8b 00 	sts	0x008B, r25
    194a:	80 93 8a 00 	sts	0x008A, r24
    194e:	08 95       	ret

00001950 <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    1950:	cf 93       	push	r28
    1952:	df 93       	push	r29
    1954:	cd b7       	in	r28, 0x3d	; 61
    1956:	de b7       	in	r29, 0x3e	; 62
    1958:	c6 54       	subi	r28, 0x46	; 70
    195a:	d1 09       	sbc	r29, r1
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
    1966:	80 e8       	ldi	r24, 0x80	; 128
    1968:	85 bf       	out	0x35, r24	; 53
    196a:	85 bf       	out	0x35, r24	; 53
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    196c:	19 82       	std	Y+1, r1	; 0x01
    196e:	1a 82       	std	Y+2, r1	; 0x02
    1970:	1b 82       	std	Y+3, r1	; 0x03
    1972:	1c 82       	std	Y+4, r1	; 0x04
    int bank = 0;
    1974:	1e 82       	std	Y+6, r1	; 0x06
    1976:	1d 82       	std	Y+5, r1	; 0x05
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1978:	18 86       	std	Y+8, r1	; 0x08
    197a:	1f 82       	std	Y+7, r1	; 0x07
    197c:	1a 86       	std	Y+10, r1	; 0x0a
    197e:	19 86       	std	Y+9, r1	; 0x09
	
	int circle_started_before = 0;
    
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
    1980:	fe 01       	movw	r30, r28
    1982:	3b 96       	adiw	r30, 0x0b	; 11
    1984:	9a e0       	ldi	r25, 0x0A	; 10
    1986:	df 01       	movw	r26, r30
    1988:	1d 92       	st	X+, r1
    198a:	9a 95       	dec	r25
    198c:	e9 f7       	brne	.-6      	; 0x1988 <main+0x38>
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
    198e:	1e a6       	std	Y+46, r1	; 0x2e
    1990:	1d a6       	std	Y+45, r1	; 0x2d
    1992:	18 aa       	std	Y+48, r1	; 0x30
    1994:	1f a6       	std	Y+47, r1	; 0x2f
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
    1996:	e1 e6       	ldi	r30, 0x61	; 97
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 83       	st	Z, r24
    199c:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
    199e:	6a 9a       	sbi	0x0d, 2	; 13
    19a0:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
    19a2:	6e 9a       	sbi	0x0d, 6	; 13
    19a4:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
    19a6:	6e 9a       	sbi	0x0d, 6	; 13
    19a8:	76 98       	cbi	0x0e, 6	; 14
    
    m_bus_init();                       // Initialize bus
    19aa:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_bus_init>
    init_ports();                       // Initialize ports
    19ae:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_ports>
    set_timer1();                       // Set timer 1 for motor
    19b2:	0e 94 34 02 	call	0x468	; 0x468 <set_timer1>
    set_timer0();                       // Set timer 0 for main loop frame rate
    19b6:	0e 94 05 02 	call	0x40a	; 0x40a <set_timer0>
    start_timer0();                     // Start timer 0
    19ba:	0e 94 1f 02 	call	0x43e	; 0x43e <start_timer0>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    19be:	0e 94 b3 01 	call	0x366	; 0x366 <set_timer4>
    init_analog();                      // Set the ADC System
    19c2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
    19c6:	0e 94 36 15 	call	0x2a6c	; 0x2a6c <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    19ca:	88 23       	and	r24, r24
    19cc:	e1 f3       	breq	.-8      	; 0x19c6 <main+0x76>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
    m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);       // Open the RF channel
    19ce:	4a e0       	ldi	r20, 0x0A	; 10
    19d0:	60 e4       	ldi	r22, 0x40	; 64
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	0e 94 75 11 	call	0x22ea	; 0x22ea <m_rf_open>
	//m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    
    sei();                              // Enable interruptions
    19d8:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
    19da:	6e 9a       	sbi	0x0d, 6	; 13
    19dc:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
    19de:	10 92 64 01 	sts	0x0164, r1
    19e2:	10 92 65 01 	sts	0x0165, r1
    19e6:	10 92 66 01 	sts	0x0166, r1
    19ea:	10 92 67 01 	sts	0x0167, r1
    TARGETS_Y[0] = 0;
    19ee:	10 92 5c 01 	sts	0x015C, r1
    19f2:	10 92 5d 01 	sts	0x015D, r1
    19f6:	10 92 5e 01 	sts	0x015E, r1
    19fa:	10 92 5f 01 	sts	0x015F, r1
    TARGETS_X[1] = 0;
    19fe:	10 92 68 01 	sts	0x0168, r1
    1a02:	10 92 69 01 	sts	0x0169, r1
    1a06:	10 92 6a 01 	sts	0x016A, r1
    1a0a:	10 92 6b 01 	sts	0x016B, r1
    TARGETS_Y[1] = 0;
    1a0e:	10 92 60 01 	sts	0x0160, r1
    1a12:	10 92 61 01 	sts	0x0161, r1
    1a16:	10 92 62 01 	sts	0x0162, r1
    1a1a:	10 92 63 01 	sts	0x0163, r1
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
    1a1e:	18 ae       	std	Y+56, r1	; 0x38
    1a20:	1f aa       	std	Y+55, r1	; 0x37
    1a22:	1a ae       	std	Y+58, r1	; 0x3a
    1a24:	19 ae       	std	Y+57, r1	; 0x39
    1a26:	1c ae       	std	Y+60, r1	; 0x3c
    1a28:	1b ae       	std	Y+59, r1	; 0x3b
    1a2a:	1e ae       	std	Y+62, r1	; 0x3e
    1a2c:	1d ae       	std	Y+61, r1	; 0x3d
    1a2e:	21 96       	adiw	r28, 0x01	; 1
    1a30:	1f ae       	std	Y+63, r1	; 0x3f
    1a32:	1e ae       	std	Y+62, r1	; 0x3e
    1a34:	21 97       	sbiw	r28, 0x01	; 1
    1a36:	41 2c       	mov	r4, r1
    1a38:	51 2c       	mov	r5, r1
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    1a3a:	27 96       	adiw	r28, 0x07	; 7
    1a3c:	1f ae       	std	Y+63, r1	; 0x3f
    1a3e:	1e ae       	std	Y+62, r1	; 0x3e
    1a40:	27 97       	sbiw	r28, 0x07	; 7
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    1a42:	23 96       	adiw	r28, 0x03	; 3
    1a44:	1f ae       	std	Y+63, r1	; 0x3f
    1a46:	1e ae       	std	Y+62, r1	; 0x3e
    1a48:	23 97       	sbiw	r28, 0x03	; 3
            // --------------------------------------------------------------
            int i;
            for (i=0;i<NUM_LEDS;i++)
            {
                get_analog_val(i);              // Get the values for each ADC pin
                while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1a4a:	0f 2e       	mov	r0, r31
    1a4c:	fa e7       	ldi	r31, 0x7A	; 122
    1a4e:	2f 2e       	mov	r2, r31
    1a50:	31 2c       	mov	r3, r1
    1a52:	f0 2d       	mov	r31, r0
                        break;
                    case(2):
                        PT3_right_inside = ADC;
                        break;
                    case(3):
						PT4_right_outside = ADC;
    1a54:	0f 2e       	mov	r0, r31
    1a56:	f8 e7       	ldi	r31, 0x78	; 120
    1a58:	6f 2e       	mov	r6, r31
    1a5a:	71 2c       	mov	r7, r1
    1a5c:	f0 2d       	mov	r31, r0
            
            // If data received correctly
            if (wii_OK)
            {
                // Get the position and orientation of the robot from the constellation
                localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1a5e:	fe 01       	movw	r30, r28
    1a60:	39 96       	adiw	r30, 0x09	; 9
    1a62:	fa ab       	std	Y+50, r31	; 0x32
    1a64:	e9 ab       	std	Y+49, r30	; 0x31
    1a66:	9e 01       	movw	r18, r28
    1a68:	29 5f       	subi	r18, 0xF9	; 249
    1a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a6c:	3c ab       	std	Y+52, r19	; 0x34
    1a6e:	2b ab       	std	Y+51, r18	; 0x33
    1a70:	ce 01       	movw	r24, r28
    1a72:	8f 96       	adiw	r24, 0x2f	; 47
    1a74:	9e ab       	std	Y+54, r25	; 0x36
    1a76:	8d ab       	std	Y+53, r24	; 0x35
		}*/
		
		// --------------------------------------------------------------
		// SYSTEM COMMAND CHECK
		// --------------------------------------------------------------
		if (flag_system == 1)
    1a78:	80 91 04 01 	lds	r24, 0x0104
    1a7c:	90 91 05 01 	lds	r25, 0x0105
    1a80:	01 97       	sbiw	r24, 0x01	; 1
    1a82:	51 f4       	brne	.+20     	; 0x1a98 <main+0x148>
		{
			state = SYSTEM_STATE;
    1a84:	83 e6       	ldi	r24, 0x63	; 99
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	90 93 57 01 	sts	0x0157, r25
    1a8c:	80 93 56 01 	sts	0x0156, r24
			flag_system = 0;
    1a90:	10 92 05 01 	sts	0x0105, r1
    1a94:	10 92 04 01 	sts	0x0104, r1
		}
		
		// --------------------------------------------------------------
        // SEND COMMANDS
        // --------------------------------------------------------------
        if (flag_timer == 1)
    1a98:	80 91 58 01 	lds	r24, 0x0158
    1a9c:	90 91 59 01 	lds	r25, 0x0159
    1aa0:	01 97       	sbiw	r24, 0x01	; 1
    1aa2:	89 f4       	brne	.+34     	; 0x1ac6 <main+0x176>
        {
            // SEND DATA TO THE MAIN SYSTEM
            //if (timer_switch == 0)
            //{
            //Create the packet to send to system
            send_buffer[0] = ALEX_ADDRESS_SYSTEM;
    1aa4:	80 e4       	ldi	r24, 0x40	; 64
    1aa6:	8b 87       	std	Y+11, r24	; 0x0b
            send_buffer[1] = x_robot;
    1aa8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1aaa:	8c 87       	std	Y+12, r24	; 0x0c
            send_buffer[2] = y_robot;
    1aac:	8f a5       	ldd	r24, Y+47	; 0x2f
    1aae:	8d 87       	std	Y+13, r24	; 0x0d
            m_rf_send(SEN_ADDRESS_SYSTEM,send_buffer,PACKET_LENGTH_SYSTEM);
    1ab0:	4a e0       	ldi	r20, 0x0A	; 10
    1ab2:	be 01       	movw	r22, r28
    1ab4:	65 5f       	subi	r22, 0xF5	; 245
    1ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ab8:	8a ed       	ldi	r24, 0xDA	; 218
    1aba:	0e 94 2c 12 	call	0x2458	; 0x2458 <m_rf_send>
				////Open again the system channel
				//m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
				//timer_switch = 0;
			//}
                
			flag_timer = 0;         //Reset flag
    1abe:	10 92 59 01 	sts	0x0159, r1
    1ac2:	10 92 58 01 	sts	0x0158, r1
			// m_green(OFF);
		}
        
        if (flag_turn == 0) 
    1ac6:	80 91 06 01 	lds	r24, 0x0106
    1aca:	90 91 07 01 	lds	r25, 0x0107
    1ace:	89 2b       	or	r24, r25
    1ad0:	99 f6       	brne	.-90     	; 0x1a78 <main+0x128>
			
            
            // --------------------------------------------------------------
            // LOCALIZATION CODE
            // --------------------------------------------------------------
            cli();                                          // Clear Interupts to not interfere with the mWii
    1ad2:	f8 94       	cli
            wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	45 96       	adiw	r24, 0x15	; 21
    1ad8:	0e 94 a1 14 	call	0x2942	; 0x2942 <m_wii_read>
            sei();                                          // Enable back the interupts
    1adc:	78 94       	sei
            
            // If data received correctly
            if (wii_OK)
    1ade:	88 23       	and	r24, r24
    1ae0:	09 f4       	brne	.+2      	; 0x1ae4 <main+0x194>
    1ae2:	62 c3       	rjmp	.+1732   	; 0x21a8 <main+0x858>
            {
                // Get the position and orientation of the robot from the constellation
                localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1ae4:	a9 a4       	ldd	r10, Y+41	; 0x29
    1ae6:	ba a4       	ldd	r11, Y+42	; 0x2a
    1ae8:	cb a0       	ldd	r12, Y+35	; 0x23
    1aea:	dc a0       	ldd	r13, Y+36	; 0x24
    1aec:	ed 8c       	ldd	r14, Y+29	; 0x1d
    1aee:	fe 8c       	ldd	r15, Y+30	; 0x1e
    1af0:	0f 89       	ldd	r16, Y+23	; 0x17
    1af2:	18 8d       	ldd	r17, Y+24	; 0x18
    1af4:	2f a1       	ldd	r18, Y+39	; 0x27
    1af6:	38 a5       	ldd	r19, Y+40	; 0x28
    1af8:	49 a1       	ldd	r20, Y+33	; 0x21
    1afa:	5a a1       	ldd	r21, Y+34	; 0x22
    1afc:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1afe:	7c 8d       	ldd	r23, Y+28	; 0x1c
    1b00:	9a a9       	ldd	r25, Y+50	; 0x32
    1b02:	9f 93       	push	r25
    1b04:	a9 a9       	ldd	r26, Y+49	; 0x31
    1b06:	af 93       	push	r26
    1b08:	bc a9       	ldd	r27, Y+52	; 0x34
    1b0a:	bf 93       	push	r27
    1b0c:	eb a9       	ldd	r30, Y+51	; 0x33
    1b0e:	ef 93       	push	r30
    1b10:	8a e5       	ldi	r24, 0x5A	; 90
    1b12:	91 e0       	ldi	r25, 0x01	; 1
    1b14:	9f 93       	push	r25
    1b16:	8f 93       	push	r24
    1b18:	fe a9       	ldd	r31, Y+54	; 0x36
    1b1a:	ff 93       	push	r31
    1b1c:	8d a9       	ldd	r24, Y+53	; 0x35
    1b1e:	8f 93       	push	r24
    1b20:	0f 2e       	mov	r0, r31
    1b22:	fd e2       	ldi	r31, 0x2D	; 45
    1b24:	8f 2e       	mov	r8, r31
    1b26:	91 2c       	mov	r9, r1
    1b28:	f0 2d       	mov	r31, r0
    1b2a:	8c 0e       	add	r8, r28
    1b2c:	9d 1e       	adc	r9, r29
    1b2e:	8d 89       	ldd	r24, Y+21	; 0x15
    1b30:	9e 89       	ldd	r25, Y+22	; 0x16
    1b32:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <localize>
    1b36:	0f b6       	in	r0, 0x3f	; 63
    1b38:	f8 94       	cli
    1b3a:	de bf       	out	0x3e, r29	; 62
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	cd bf       	out	0x3d, r28	; 61
    1b40:	33 c3       	rjmp	.+1638   	; 0x21a8 <main+0x858>
    1b42:	bf ef       	ldi	r27, 0xFF	; 255
    1b44:	eb 1a       	sub	r14, r27
    1b46:	fb 0a       	sbc	r15, r27

//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
    1b48:	87 01       	movw	r16, r14
    1b4a:	01 50       	subi	r16, 0x01	; 1
    1b4c:	11 09       	sbc	r17, r1
            // ANALOG CODE
            // --------------------------------------------------------------
            int i;
            for (i=0;i<NUM_LEDS;i++)
            {
                get_analog_val(i);              // Get the values for each ADC pin
    1b4e:	c8 01       	movw	r24, r16
    1b50:	0e 94 01 01 	call	0x202	; 0x202 <get_analog_val>
                while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1b54:	f1 01       	movw	r30, r2
    1b56:	80 81       	ld	r24, Z
    1b58:	84 ff       	sbrs	r24, 4
    1b5a:	fc cf       	rjmp	.-8      	; 0x1b54 <main+0x204>
                switch(i)
    1b5c:	03 30       	cpi	r16, 0x03	; 3
    1b5e:	11 05       	cpc	r17, r1
    1b60:	29 f1       	breq	.+74     	; 0x1bac <main+0x25c>
    1b62:	3c f4       	brge	.+14     	; 0x1b72 <main+0x222>
    1b64:	01 30       	cpi	r16, 0x01	; 1
    1b66:	11 05       	cpc	r17, r1
    1b68:	89 f0       	breq	.+34     	; 0x1b8c <main+0x23c>
    1b6a:	cc f4       	brge	.+50     	; 0x1b9e <main+0x24e>
    1b6c:	01 2b       	or	r16, r17
    1b6e:	51 f0       	breq	.+20     	; 0x1b84 <main+0x234>
    1b70:	4b c0       	rjmp	.+150    	; 0x1c08 <main+0x2b8>
    1b72:	05 30       	cpi	r16, 0x05	; 5
    1b74:	11 05       	cpc	r17, r1
    1b76:	41 f1       	breq	.+80     	; 0x1bc8 <main+0x278>
    1b78:	04 f1       	brlt	.+64     	; 0x1bba <main+0x26a>
    1b7a:	06 30       	cpi	r16, 0x06	; 6
    1b7c:	11 05       	cpc	r17, r1
    1b7e:	09 f0       	breq	.+2      	; 0x1b82 <main+0x232>
    1b80:	43 c0       	rjmp	.+134    	; 0x1c08 <main+0x2b8>
    1b82:	29 c0       	rjmp	.+82     	; 0x1bd6 <main+0x286>
                {
                    case(0):
                        PT1_left_outside = ADC;
    1b84:	d3 01       	movw	r26, r6
    1b86:	4d 90       	ld	r4, X+
    1b88:	5c 90       	ld	r5, X
                        break;
    1b8a:	12 c3       	rjmp	.+1572   	; 0x21b0 <main+0x860>
                    case(1):
                        PT2_left_inside = ADC;
    1b8c:	f3 01       	movw	r30, r6
    1b8e:	01 90       	ld	r0, Z+
    1b90:	f0 81       	ld	r31, Z
    1b92:	e0 2d       	mov	r30, r0
    1b94:	21 96       	adiw	r28, 0x01	; 1
    1b96:	ff af       	std	Y+63, r31	; 0x3f
    1b98:	ee af       	std	Y+62, r30	; 0x3e
    1b9a:	21 97       	sbiw	r28, 0x01	; 1
                        break;
    1b9c:	09 c3       	rjmp	.+1554   	; 0x21b0 <main+0x860>
                    case(2):
                        PT3_right_inside = ADC;
    1b9e:	d3 01       	movw	r26, r6
    1ba0:	0d 90       	ld	r0, X+
    1ba2:	bc 91       	ld	r27, X
    1ba4:	a0 2d       	mov	r26, r0
    1ba6:	be af       	std	Y+62, r27	; 0x3e
    1ba8:	ad af       	std	Y+61, r26	; 0x3d
                        break;
    1baa:	02 c3       	rjmp	.+1540   	; 0x21b0 <main+0x860>
                    case(3):
						PT4_right_outside = ADC;
    1bac:	f3 01       	movw	r30, r6
    1bae:	01 90       	ld	r0, Z+
    1bb0:	f0 81       	ld	r31, Z
    1bb2:	e0 2d       	mov	r30, r0
    1bb4:	fc af       	std	Y+60, r31	; 0x3c
    1bb6:	eb af       	std	Y+59, r30	; 0x3b
                        break;
    1bb8:	fb c2       	rjmp	.+1526   	; 0x21b0 <main+0x860>
                    case(4):
                        PT5_back_right = ADC;
    1bba:	d3 01       	movw	r26, r6
    1bbc:	0d 90       	ld	r0, X+
    1bbe:	bc 91       	ld	r27, X
    1bc0:	a0 2d       	mov	r26, r0
    1bc2:	ba af       	std	Y+58, r27	; 0x3a
    1bc4:	a9 af       	std	Y+57, r26	; 0x39
                        break;
    1bc6:	f4 c2       	rjmp	.+1512   	; 0x21b0 <main+0x860>
                    case(5):
                        PT6_back_left = ADC;
    1bc8:	f3 01       	movw	r30, r6
    1bca:	01 90       	ld	r0, Z+
    1bcc:	f0 81       	ld	r31, Z
    1bce:	e0 2d       	mov	r30, r0
    1bd0:	f8 af       	std	Y+56, r31	; 0x38
    1bd2:	ef ab       	std	Y+55, r30	; 0x37
                        break;
    1bd4:	ed c2       	rjmp	.+1498   	; 0x21b0 <main+0x860>
                    case(6):
                        PT7_have_puck = ADC;
    1bd6:	d3 01       	movw	r26, r6
    1bd8:	8d 91       	ld	r24, X+
    1bda:	9c 91       	ld	r25, X
                        break;
                }
                
                set(ADCSRA,ADIF);               // After doing the conversion reset flag
    1bdc:	f1 01       	movw	r30, r2
    1bde:	80 81       	ld	r24, Z
    1be0:	80 61       	ori	r24, 0x10	; 16
    1be2:	80 83       	st	Z, r24
    1be4:	8f a8       	ldd	r8, Y+55	; 0x37
    1be6:	98 ac       	ldd	r9, Y+56	; 0x38
    1be8:	29 ad       	ldd	r18, Y+57	; 0x39
    1bea:	3a ad       	ldd	r19, Y+58	; 0x3a
    1bec:	25 96       	adiw	r28, 0x05	; 5
    1bee:	3f af       	std	Y+63, r19	; 0x3f
    1bf0:	2e af       	std	Y+62, r18	; 0x3e
    1bf2:	25 97       	sbiw	r28, 0x05	; 5
    1bf4:	eb ac       	ldd	r14, Y+59	; 0x3b
    1bf6:	fc ac       	ldd	r15, Y+60	; 0x3c
    1bf8:	cd ac       	ldd	r12, Y+61	; 0x3d
    1bfa:	de ac       	ldd	r13, Y+62	; 0x3e
    1bfc:	21 96       	adiw	r28, 0x01	; 1
    1bfe:	ae ac       	ldd	r10, Y+62	; 0x3e
    1c00:	bf ac       	ldd	r11, Y+63	; 0x3f
    1c02:	21 97       	sbiw	r28, 0x01	; 1
    1c04:	82 01       	movw	r16, r4
    1c06:	1a c0       	rjmp	.+52     	; 0x1c3c <main+0x2ec>
    1c08:	d1 01       	movw	r26, r2
    1c0a:	8c 91       	ld	r24, X
    1c0c:	80 61       	ori	r24, 0x10	; 16
    1c0e:	8c 93       	st	X, r24
            
            // --------------------------------------------------------------
            // ANALOG CODE
            // --------------------------------------------------------------
            int i;
            for (i=0;i<NUM_LEDS;i++)
    1c10:	b7 e0       	ldi	r27, 0x07	; 7
    1c12:	eb 16       	cp	r14, r27
    1c14:	f1 04       	cpc	r15, r1
    1c16:	0c f4       	brge	.+2      	; 0x1c1a <main+0x2ca>
    1c18:	94 cf       	rjmp	.-216    	; 0x1b42 <main+0x1f2>
    1c1a:	8f a8       	ldd	r8, Y+55	; 0x37
    1c1c:	98 ac       	ldd	r9, Y+56	; 0x38
    1c1e:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c20:	fa ad       	ldd	r31, Y+58	; 0x3a
    1c22:	25 96       	adiw	r28, 0x05	; 5
    1c24:	ff af       	std	Y+63, r31	; 0x3f
    1c26:	ee af       	std	Y+62, r30	; 0x3e
    1c28:	25 97       	sbiw	r28, 0x05	; 5
    1c2a:	eb ac       	ldd	r14, Y+59	; 0x3b
    1c2c:	fc ac       	ldd	r15, Y+60	; 0x3c
    1c2e:	cd ac       	ldd	r12, Y+61	; 0x3d
    1c30:	de ac       	ldd	r13, Y+62	; 0x3e
    1c32:	21 96       	adiw	r28, 0x01	; 1
    1c34:	ae ac       	ldd	r10, Y+62	; 0x3e
    1c36:	bf ac       	ldd	r11, Y+63	; 0x3f
    1c38:	21 97       	sbiw	r28, 0x01	; 1
    1c3a:	82 01       	movw	r16, r4
            
            
            // --------------------------------------------------------------
            // STATE COMMANDS
            // --------------------------------------------------------------
            switch (state)
    1c3c:	80 91 56 01 	lds	r24, 0x0156
    1c40:	90 91 57 01 	lds	r25, 0x0157
    1c44:	85 30       	cpi	r24, 0x05	; 5
    1c46:	91 05       	cpc	r25, r1
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <main+0x2fc>
    1c4a:	fc c1       	rjmp	.+1016   	; 0x2044 <main+0x6f4>
    1c4c:	5c f4       	brge	.+22     	; 0x1c64 <main+0x314>
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	91 05       	cpc	r25, r1
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <main+0x306>
    1c54:	b9 c0       	rjmp	.+370    	; 0x1dc8 <main+0x478>
    1c56:	83 30       	cpi	r24, 0x03	; 3
    1c58:	91 05       	cpc	r25, r1
    1c5a:	81 f0       	breq	.+32     	; 0x1c7c <main+0x32c>
    1c5c:	89 2b       	or	r24, r25
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <main+0x312>
    1c60:	99 c0       	rjmp	.+306    	; 0x1d94 <main+0x444>
    1c62:	82 c2       	rjmp	.+1284   	; 0x2168 <main+0x818>
    1c64:	86 31       	cpi	r24, 0x16	; 22
    1c66:	91 05       	cpc	r25, r1
    1c68:	09 f4       	brne	.+2      	; 0x1c6c <main+0x31c>
    1c6a:	61 c2       	rjmp	.+1218   	; 0x212e <main+0x7de>
    1c6c:	83 36       	cpi	r24, 0x63	; 99
    1c6e:	91 05       	cpc	r25, r1
    1c70:	09 f4       	brne	.+2      	; 0x1c74 <main+0x324>
    1c72:	f3 c1       	rjmp	.+998    	; 0x205a <main+0x70a>
    1c74:	45 97       	sbiw	r24, 0x15	; 21
    1c76:	09 f0       	breq	.+2      	; 0x1c7a <main+0x32a>
    1c78:	77 c2       	rjmp	.+1262   	; 0x2168 <main+0x818>
    1c7a:	6f c2       	rjmp	.+1246   	; 0x215a <main+0x80a>
                        max_lr = 0;
                    else
                        max_lr = 1;
                    
                    //Check if the puck is up or down
                    if (max_lr == 0)
    1c7c:	e0 16       	cp	r14, r16
    1c7e:	f1 06       	cpc	r15, r17
    1c80:	64 f4       	brge	.+24     	; 0x1c9a <main+0x34a>
                    {
                        if (PT1_left_outside >= PT6_back_left)
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	08 15       	cp	r16, r8
    1c88:	19 05       	cpc	r17, r9
    1c8a:	14 f0       	brlt	.+4      	; 0x1c90 <main+0x340>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
                            half_range = 0;
                        else
                            half_range = 1;
    1c90:	23 96       	adiw	r28, 0x03	; 3
    1c92:	9f af       	std	Y+63, r25	; 0x3f
    1c94:	8e af       	std	Y+62, r24	; 0x3e
    1c96:	23 97       	sbiw	r28, 0x03	; 3
    1c98:	0f c0       	rjmp	.+30     	; 0x1cb8 <main+0x368>
                    }
                    else
                    {
                        if (PT4_right_outside >= PT5_back_right)
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	90 e0       	ldi	r25, 0x00	; 0
    1c9e:	25 96       	adiw	r28, 0x05	; 5
    1ca0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1ca2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1ca4:	25 97       	sbiw	r28, 0x05	; 5
    1ca6:	e2 16       	cp	r14, r18
    1ca8:	f3 06       	cpc	r15, r19
    1caa:	14 f0       	brlt	.+4      	; 0x1cb0 <main+0x360>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
                    if (max_lr == 0)
                    {
                        if (PT1_left_outside >= PT6_back_left)
                            half_range = 0;
                        else
                            half_range = 1;
    1cb0:	23 96       	adiw	r28, 0x03	; 3
    1cb2:	9f af       	std	Y+63, r25	; 0x3f
    1cb4:	8e af       	std	Y+62, r24	; 0x3e
    1cb6:	23 97       	sbiw	r28, 0x03	; 3
                        max_pt_backs = PT6_back_left;
                    
                    
                    
                    // If Insides see the puck
                    if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 250)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) {
    1cb8:	b5 01       	movw	r22, r10
    1cba:	6c 0d       	add	r22, r12
    1cbc:	7d 1d       	adc	r23, r13
    1cbe:	88 27       	eor	r24, r24
    1cc0:	77 fd       	sbrc	r23, 7
    1cc2:	80 95       	com	r24
    1cc4:	98 2f       	mov	r25, r24
    1cc6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1cca:	20 e0       	ldi	r18, 0x00	; 0
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	5f e3       	ldi	r21, 0x3F	; 63
    1cd2:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1cd6:	20 e0       	ldi	r18, 0x00	; 0
    1cd8:	30 e0       	ldi	r19, 0x00	; 0
    1cda:	4a e7       	ldi	r20, 0x7A	; 122
    1cdc:	53 e4       	ldi	r21, 0x43	; 67
    1cde:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
    1ce2:	88 23       	and	r24, r24
    1ce4:	5c f1       	brlt	.+86     	; 0x1d3c <main+0x3ec>
    1ce6:	0d 3b       	cpi	r16, 0xBD	; 189
    1ce8:	32 e0       	ldi	r19, 0x02	; 2
    1cea:	13 07       	cpc	r17, r19
    1cec:	3c f5       	brge	.+78     	; 0x1d3c <main+0x3ec>
    1cee:	8d eb       	ldi	r24, 0xBD	; 189
    1cf0:	e8 16       	cp	r14, r24
    1cf2:	82 e0       	ldi	r24, 0x02	; 2
    1cf4:	f8 06       	cpc	r15, r24
    1cf6:	14 f5       	brge	.+68     	; 0x1d3c <main+0x3ec>
                        //turnOnBlueLED();
                        status_go_to_goal = 1;
                        int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
    1cf8:	c5 01       	movw	r24, r10
    1cfa:	8c 19       	sub	r24, r12
    1cfc:	9d 09       	sbc	r25, r13
    1cfe:	1a f4       	brpl	.+6      	; 0x1d06 <main+0x3b6>
    1d00:	91 95       	neg	r25
    1d02:	81 95       	neg	r24
    1d04:	91 09       	sbc	r25, r1
    1d06:	68 2f       	mov	r22, r24
    1d08:	79 2f       	mov	r23, r25
                        if (PT2_left_inside >= PT3_right_inside) {
    1d0a:	ac 14       	cp	r10, r12
    1d0c:	bd 04       	cpc	r11, r13
    1d0e:	5c f0       	brlt	.+22     	; 0x1d26 <main+0x3d6>
                            move_robot_to_puck(1,diff_PT_inside);
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	0e 94 2e 0c 	call	0x185c	; 0x185c <move_robot_to_puck>
                    
                    
                    // If Insides see the puck
                    if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 250)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) {
                        //turnOnBlueLED();
                        status_go_to_goal = 1;
    1d18:	a1 e0       	ldi	r26, 0x01	; 1
    1d1a:	b0 e0       	ldi	r27, 0x00	; 0
    1d1c:	23 96       	adiw	r28, 0x03	; 3
    1d1e:	bf af       	std	Y+63, r27	; 0x3f
    1d20:	ae af       	std	Y+62, r26	; 0x3e
    1d22:	23 97       	sbiw	r28, 0x03	; 3
    1d24:	38 c2       	rjmp	.+1136   	; 0x2196 <main+0x846>
                        if (PT2_left_inside >= PT3_right_inside) {
                            move_robot_to_puck(1,diff_PT_inside);
                            
                        }
                        else{
                            move_robot_to_puck(0,diff_PT_inside);
    1d26:	80 e0       	ldi	r24, 0x00	; 0
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 2e 0c 	call	0x185c	; 0x185c <move_robot_to_puck>
                    
                    
                    // If Insides see the puck
                    if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 250)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) {
                        //turnOnBlueLED();
                        status_go_to_goal = 1;
    1d2e:	e1 e0       	ldi	r30, 0x01	; 1
    1d30:	f0 e0       	ldi	r31, 0x00	; 0
    1d32:	23 96       	adiw	r28, 0x03	; 3
    1d34:	ff af       	std	Y+63, r31	; 0x3f
    1d36:	ee af       	std	Y+62, r30	; 0x3e
    1d38:	23 97       	sbiw	r28, 0x03	; 3
    1d3a:	2d c2       	rjmp	.+1114   	; 0x2196 <main+0x846>
                    // If Insides do not see the puck
                    else {
                        //turnOffBlueLED();
                        status_go_to_goal = 0;
                        //Case where the puck is in front
                        if (half_range == 0)
    1d3c:	23 96       	adiw	r28, 0x03	; 3
    1d3e:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d40:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d42:	23 97       	sbiw	r28, 0x03	; 3
    1d44:	23 2b       	or	r18, r19
    1d46:	89 f4       	brne	.+34     	; 0x1d6a <main+0x41a>
                        {
                            if (PT1_left_outside >= PT4_right_outside) {
    1d48:	0e 15       	cp	r16, r14
    1d4a:	1f 05       	cpc	r17, r15
    1d4c:	3c f0       	brlt	.+14     	; 0x1d5c <main+0x40c>
                                turn_left();
    1d4e:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <turn_left>
                        }
                    }
                    // If Insides do not see the puck
                    else {
                        //turnOffBlueLED();
                        status_go_to_goal = 0;
    1d52:	23 96       	adiw	r28, 0x03	; 3
    1d54:	1f ae       	std	Y+63, r1	; 0x3f
    1d56:	1e ae       	std	Y+62, r1	; 0x3e
    1d58:	23 97       	sbiw	r28, 0x03	; 3
    1d5a:	1d c2       	rjmp	.+1082   	; 0x2196 <main+0x846>
                        {
                            if (PT1_left_outside >= PT4_right_outside) {
                                turn_left();
                            }
                            else
                                turn_right();
    1d5c:	0e 94 8a 0c 	call	0x1914	; 0x1914 <turn_right>
                        }
                    }
                    // If Insides do not see the puck
                    else {
                        //turnOffBlueLED();
                        status_go_to_goal = 0;
    1d60:	23 96       	adiw	r28, 0x03	; 3
    1d62:	1f ae       	std	Y+63, r1	; 0x3f
    1d64:	1e ae       	std	Y+62, r1	; 0x3e
    1d66:	23 97       	sbiw	r28, 0x03	; 3
    1d68:	16 c2       	rjmp	.+1068   	; 0x2196 <main+0x846>
                            }
                            else
                                turn_right();
                        }
                        else{
                            if (PT6_back_left >= PT5_back_right) {
    1d6a:	25 96       	adiw	r28, 0x05	; 5
    1d6c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d6e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d70:	25 97       	sbiw	r28, 0x05	; 5
    1d72:	88 16       	cp	r8, r24
    1d74:	99 06       	cpc	r9, r25
    1d76:	3c f0       	brlt	.+14     	; 0x1d86 <main+0x436>
                                turn_left();
    1d78:	0e 94 7b 0c 	call	0x18f6	; 0x18f6 <turn_left>
                        }
                    }
                    // If Insides do not see the puck
                    else {
                        //turnOffBlueLED();
                        status_go_to_goal = 0;
    1d7c:	23 96       	adiw	r28, 0x03	; 3
    1d7e:	1f ae       	std	Y+63, r1	; 0x3f
    1d80:	1e ae       	std	Y+62, r1	; 0x3e
    1d82:	23 97       	sbiw	r28, 0x03	; 3
    1d84:	08 c2       	rjmp	.+1040   	; 0x2196 <main+0x846>
                        else{
                            if (PT6_back_left >= PT5_back_right) {
                                turn_left();
                            }
                            else
                                turn_right();
    1d86:	0e 94 8a 0c 	call	0x1914	; 0x1914 <turn_right>
                        }
                    }
                    // If Insides do not see the puck
                    else {
                        //turnOffBlueLED();
                        status_go_to_goal = 0;
    1d8a:	23 96       	adiw	r28, 0x03	; 3
    1d8c:	1f ae       	std	Y+63, r1	; 0x3f
    1d8e:	1e ae       	std	Y+62, r1	; 0x3e
    1d90:	23 97       	sbiw	r28, 0x03	; 3
    1d92:	01 c2       	rjmp	.+1026   	; 0x2196 <main+0x846>
                    
                    // --------------------------------------------------------------
                    // INITIAL STATE
                    // --------------------------------------------------------------
                case INITIAL_STATE:
                    if (check(PINB,2))
    1d94:	1a 9b       	sbis	0x03, 2	; 3
    1d96:	07 c0       	rjmp	.+14     	; 0x1da6 <main+0x456>
                    {
                        goal_pos_x = GOAL_A_POS_X;
    1d98:	ac e9       	ldi	r26, 0x9C	; 156
    1d9a:	bf ef       	ldi	r27, 0xFF	; 255
    1d9c:	27 96       	adiw	r28, 0x07	; 7
    1d9e:	bf af       	std	Y+63, r27	; 0x3f
    1da0:	ae af       	std	Y+62, r26	; 0x3e
    1da2:	27 97       	sbiw	r28, 0x07	; 7
    1da4:	06 c0       	rjmp	.+12     	; 0x1db2 <main+0x462>
                        //                        goal_pos_x = TARGETS_X[TARGET_NUM];
                        //                        goal_pos_y = TARGETS_Y[TARGET_NUM];
                        //
                    }else
                    {
                        goal_pos_x = GOAL_B_POS_X;
    1da6:	e3 e7       	ldi	r30, 0x73	; 115
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	27 96       	adiw	r28, 0x07	; 7
    1dac:	ff af       	std	Y+63, r31	; 0x3f
    1dae:	ee af       	std	Y+62, r30	; 0x3e
    1db0:	27 97       	sbiw	r28, 0x07	; 7
                        goal_pos_y = GOAL_B_POS_Y;
                    }
                    status_go_to_goal = 0;
                    //                    state = GO_TO_GOAL_CURVED;
                    state = FIND_PUCK;
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	90 93 57 01 	sts	0x0157, r25
    1dba:	80 93 56 01 	sts	0x0156, r24
                    }else
                    {
                        goal_pos_x = GOAL_B_POS_X;
                        goal_pos_y = GOAL_B_POS_Y;
                    }
                    status_go_to_goal = 0;
    1dbe:	23 96       	adiw	r28, 0x03	; 3
    1dc0:	1f ae       	std	Y+63, r1	; 0x3f
    1dc2:	1e ae       	std	Y+62, r1	; 0x3e
    1dc4:	23 97       	sbiw	r28, 0x03	; 3
                    //                    state = GO_TO_GOAL_CURVED;
                    state = FIND_PUCK;
                    break;
    1dc6:	e7 c1       	rjmp	.+974    	; 0x2196 <main+0x846>
                    // GO TO GOAL CURVED STATE
                    // --------------------------------------------------------------
                case GO_TO_GOAL_CURVED:
                    
                    dir_x = goal_pos_x-x_robot;
                    dir_y = goal_pos_y-y_robot;
    1dc8:	6f a5       	ldd	r22, Y+47	; 0x2f
    1dca:	78 a9       	ldd	r23, Y+48	; 0x30
    1dcc:	71 95       	neg	r23
    1dce:	61 95       	neg	r22
    1dd0:	71 09       	sbc	r23, r1
    1dd2:	88 27       	eor	r24, r24
    1dd4:	77 fd       	sbrc	r23, 7
    1dd6:	80 95       	com	r24
    1dd8:	98 2f       	mov	r25, r24
    1dda:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1dde:	6b 01       	movw	r12, r22
    1de0:	7c 01       	movw	r14, r24
                    // --------------------------------------------------------------
                    // GO TO GOAL CURVED STATE
                    // --------------------------------------------------------------
                case GO_TO_GOAL_CURVED:
                    
                    dir_x = goal_pos_x-x_robot;
    1de2:	8d a5       	ldd	r24, Y+45	; 0x2d
    1de4:	9e a5       	ldd	r25, Y+46	; 0x2e
    1de6:	27 96       	adiw	r28, 0x07	; 7
    1de8:	6e ad       	ldd	r22, Y+62	; 0x3e
    1dea:	7f ad       	ldd	r23, Y+63	; 0x3f
    1dec:	27 97       	sbiw	r28, 0x07	; 7
    1dee:	68 1b       	sub	r22, r24
    1df0:	79 0b       	sbc	r23, r25
    1df2:	88 27       	eor	r24, r24
    1df4:	77 fd       	sbrc	r23, 7
    1df6:	80 95       	com	r24
    1df8:	98 2f       	mov	r25, r24
    1dfa:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
                    dir_y = goal_pos_y-y_robot;
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1dfe:	90 58       	subi	r25, 0x80	; 128
    1e00:	a7 01       	movw	r20, r14
    1e02:	96 01       	movw	r18, r12
    1e04:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <atan2>
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	44 e3       	ldi	r20, 0x34	; 52
    1e0e:	53 e4       	ldi	r21, 0x43	; 67
    1e10:	0e 94 bb 18 	call	0x3176	; 0x3176 <__mulsf3>
    1e14:	2b ed       	ldi	r18, 0xDB	; 219
    1e16:	3f e0       	ldi	r19, 0x0F	; 15
    1e18:	49 e4       	ldi	r20, 0x49	; 73
    1e1a:	50 e4       	ldi	r21, 0x40	; 64
    1e1c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <__divsf3>
                    
                    calculate_diff_theta(dir_angle,&diff_theta, &bank);
    1e20:	9e 01       	movw	r18, r28
    1e22:	2b 5f       	subi	r18, 0xFB	; 251
    1e24:	3f 4f       	sbci	r19, 0xFF	; 255
    1e26:	ae 01       	movw	r20, r28
    1e28:	4f 5f       	subi	r20, 0xFF	; 255
    1e2a:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2c:	0e 94 a3 0a 	call	0x1546	; 0x1546 <calculate_diff_theta>
                    
                    
                    cur_error = diff_theta;
    1e30:	c9 80       	ldd	r12, Y+1	; 0x01
    1e32:	da 80       	ldd	r13, Y+2	; 0x02
    1e34:	eb 80       	ldd	r14, Y+3	; 0x03
    1e36:	fc 80       	ldd	r15, Y+4	; 0x04
    1e38:	c7 01       	movw	r24, r14
    1e3a:	b6 01       	movw	r22, r12
    1e3c:	0e 94 6f 17 	call	0x2ede	; 0x2ede <__fixsfsi>
    1e40:	8b 01       	movw	r16, r22
    1e42:	70 93 6f 01 	sts	0x016F, r23
    1e46:	60 93 6e 01 	sts	0x016E, r22
                    diff_error = cur_error - prev_error;
    1e4a:	20 91 6c 01 	lds	r18, 0x016C
    1e4e:	30 91 6d 01 	lds	r19, 0x016D
    1e52:	02 1b       	sub	r16, r18
    1e54:	13 0b       	sbc	r17, r19
    1e56:	10 93 71 01 	sts	0x0171, r17
    1e5a:	00 93 70 01 	sts	0x0170, r16
                    prev_error = cur_error;
    1e5e:	70 93 6d 01 	sts	0x016D, r23
    1e62:	60 93 6c 01 	sts	0x016C, r22
                    
                    if (status_go_to_goal == 0)
    1e66:	23 96       	adiw	r28, 0x03	; 3
    1e68:	2e ad       	ldd	r18, Y+62	; 0x3e
    1e6a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e6c:	23 97       	sbiw	r28, 0x03	; 3
    1e6e:	23 2b       	or	r18, r19
    1e70:	09 f0       	breq	.+2      	; 0x1e74 <main+0x524>
    1e72:	44 c0       	rjmp	.+136    	; 0x1efc <main+0x5ac>
                    {
                        {
                            dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1e74:	2d a5       	ldd	r18, Y+45	; 0x2d
    1e76:	3e a5       	ldd	r19, Y+46	; 0x2e
    1e78:	27 96       	adiw	r28, 0x07	; 7
    1e7a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e7c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e7e:	27 97       	sbiw	r28, 0x07	; 7
    1e80:	28 1b       	sub	r18, r24
    1e82:	39 0b       	sbc	r19, r25
    1e84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e86:	98 a9       	ldd	r25, Y+48	; 0x30
    1e88:	22 9f       	mul	r18, r18
    1e8a:	b0 01       	movw	r22, r0
    1e8c:	23 9f       	mul	r18, r19
    1e8e:	70 0d       	add	r23, r0
    1e90:	70 0d       	add	r23, r0
    1e92:	11 24       	eor	r1, r1
    1e94:	88 9f       	mul	r24, r24
    1e96:	90 01       	movw	r18, r0
    1e98:	89 9f       	mul	r24, r25
    1e9a:	30 0d       	add	r19, r0
    1e9c:	30 0d       	add	r19, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	62 0f       	add	r22, r18
    1ea2:	73 1f       	adc	r23, r19
    1ea4:	88 27       	eor	r24, r24
    1ea6:	77 fd       	sbrc	r23, 7
    1ea8:	80 95       	com	r24
    1eaa:	98 2f       	mov	r25, r24
    1eac:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1eb0:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
                            if (dist_goal < THRESHOLD_DIST_GOAL){
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 ea       	ldi	r20, 0xA0	; 160
    1eba:	50 e4       	ldi	r21, 0x40	; 64
    1ebc:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1ec0:	88 23       	and	r24, r24
    1ec2:	0c f4       	brge	.+2      	; 0x1ec6 <main+0x576>
    1ec4:	54 c1       	rjmp	.+680    	; 0x216e <main+0x81e>
                                status_go_to_goal = 2;
                            }
                            else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e7       	ldi	r20, 0x70	; 112
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b6 01       	movw	r22, r12
    1ed2:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1ed6:	88 23       	and	r24, r24
    1ed8:	0c f4       	brge	.+2      	; 0x1edc <main+0x58c>
    1eda:	50 c1       	rjmp	.+672    	; 0x217c <main+0x82c>
                                status_go_to_goal = 1;
                            }
                            else
                                turn_robot(diff_theta,bank,diff_error);
    1edc:	b8 01       	movw	r22, r16
    1ede:	88 27       	eor	r24, r24
    1ee0:	77 fd       	sbrc	r23, 7
    1ee2:	80 95       	com	r24
    1ee4:	98 2f       	mov	r25, r24
    1ee6:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1eea:	8b 01       	movw	r16, r22
    1eec:	9c 01       	movw	r18, r24
    1eee:	4d 81       	ldd	r20, Y+5	; 0x05
    1ef0:	5e 81       	ldd	r21, Y+6	; 0x06
    1ef2:	c7 01       	movw	r24, r14
    1ef4:	b6 01       	movw	r22, r12
    1ef6:	0e 94 c0 0b 	call	0x1780	; 0x1780 <turn_robot>
    1efa:	4d c1       	rjmp	.+666    	; 0x2196 <main+0x846>
                            
                        }
                        
                    }
                    
                    else if (status_go_to_goal == 1){
    1efc:	23 96       	adiw	r28, 0x03	; 3
    1efe:	ae ad       	ldd	r26, Y+62	; 0x3e
    1f00:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f02:	23 97       	sbiw	r28, 0x03	; 3
    1f04:	11 97       	sbiw	r26, 0x01	; 1
    1f06:	09 f0       	breq	.+2      	; 0x1f0a <main+0x5ba>
    1f08:	56 c0       	rjmp	.+172    	; 0x1fb6 <main+0x666>
                        dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1f0a:	2d a5       	ldd	r18, Y+45	; 0x2d
    1f0c:	3e a5       	ldd	r19, Y+46	; 0x2e
    1f0e:	27 96       	adiw	r28, 0x07	; 7
    1f10:	ee ad       	ldd	r30, Y+62	; 0x3e
    1f12:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f14:	27 97       	sbiw	r28, 0x07	; 7
    1f16:	2e 1b       	sub	r18, r30
    1f18:	3f 0b       	sbc	r19, r31
    1f1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f1c:	98 a9       	ldd	r25, Y+48	; 0x30
    1f1e:	22 9f       	mul	r18, r18
    1f20:	b0 01       	movw	r22, r0
    1f22:	23 9f       	mul	r18, r19
    1f24:	70 0d       	add	r23, r0
    1f26:	70 0d       	add	r23, r0
    1f28:	11 24       	eor	r1, r1
    1f2a:	88 9f       	mul	r24, r24
    1f2c:	90 01       	movw	r18, r0
    1f2e:	89 9f       	mul	r24, r25
    1f30:	30 0d       	add	r19, r0
    1f32:	30 0d       	add	r19, r0
    1f34:	11 24       	eor	r1, r1
    1f36:	62 0f       	add	r22, r18
    1f38:	73 1f       	adc	r23, r19
    1f3a:	88 27       	eor	r24, r24
    1f3c:	77 fd       	sbrc	r23, 7
    1f3e:	80 95       	com	r24
    1f40:	98 2f       	mov	r25, r24
    1f42:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1f46:	0e 94 28 19 	call	0x3250	; 0x3250 <sqrt>
                        if (dist_goal < THRESHOLD_DIST_GOAL){
    1f4a:	20 e0       	ldi	r18, 0x00	; 0
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	40 ea       	ldi	r20, 0xA0	; 160
    1f50:	50 e4       	ldi	r21, 0x40	; 64
    1f52:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1f56:	88 23       	and	r24, r24
    1f58:	44 f4       	brge	.+16     	; 0x1f6a <main+0x61a>
                            status_go_to_goal = 2;
                            set(PORTD,5);
    1f5a:	5d 9a       	sbi	0x0b, 5	; 11
                    }
                    
                    else if (status_go_to_goal == 1){
                        dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                        if (dist_goal < THRESHOLD_DIST_GOAL){
                            status_go_to_goal = 2;
    1f5c:	22 e0       	ldi	r18, 0x02	; 2
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	23 96       	adiw	r28, 0x03	; 3
    1f62:	3f af       	std	Y+63, r19	; 0x3f
    1f64:	2e af       	std	Y+62, r18	; 0x3e
    1f66:	23 97       	sbiw	r28, 0x03	; 3
    1f68:	16 c1       	rjmp	.+556    	; 0x2196 <main+0x846>
                            //                                stop_counter++;
                            //                            }
                            //stop_motor();
                            //m_wait(1000);
                        }
                        else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	40 ef       	ldi	r20, 0xF0	; 240
    1f70:	51 e4       	ldi	r21, 0x41	; 65
    1f72:	c7 01       	movw	r24, r14
    1f74:	b6 01       	movw	r22, r12
    1f76:	0e 94 b0 18 	call	0x3160	; 0x3160 <__gesf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	34 f4       	brge	.+12     	; 0x1f8a <main+0x63a>
                        {
                            status_go_to_goal = 0;
                            set(PORTD,5);
    1f7e:	5d 9a       	sbi	0x0b, 5	; 11
                            //stop_motor();
                            //m_wait(1000);
                        }
                        else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
                        {
                            status_go_to_goal = 0;
    1f80:	23 96       	adiw	r28, 0x03	; 3
    1f82:	1f ae       	std	Y+63, r1	; 0x3f
    1f84:	1e ae       	std	Y+62, r1	; 0x3e
    1f86:	23 97       	sbiw	r28, 0x03	; 3
    1f88:	06 c1       	rjmp	.+524    	; 0x2196 <main+0x846>
                            set(PORTD,5);
                        }
                        else {
                            clear(PORTD,5);
    1f8a:	5d 98       	cbi	0x0b, 5	; 11
                            move_robot(diff_theta,bank,diff_error);
    1f8c:	60 91 70 01 	lds	r22, 0x0170
    1f90:	70 91 71 01 	lds	r23, 0x0171
    1f94:	88 27       	eor	r24, r24
    1f96:	77 fd       	sbrc	r23, 7
    1f98:	80 95       	com	r24
    1f9a:	98 2f       	mov	r25, r24
    1f9c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    1fa0:	8b 01       	movw	r16, r22
    1fa2:	9c 01       	movw	r18, r24
    1fa4:	4d 81       	ldd	r20, Y+5	; 0x05
    1fa6:	5e 81       	ldd	r21, Y+6	; 0x06
    1fa8:	69 81       	ldd	r22, Y+1	; 0x01
    1faa:	7a 81       	ldd	r23, Y+2	; 0x02
    1fac:	8b 81       	ldd	r24, Y+3	; 0x03
    1fae:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb0:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <move_robot>
    1fb4:	f0 c0       	rjmp	.+480    	; 0x2196 <main+0x846>
                        }
                        
                    }
                    else if (status_go_to_goal == 2){
    1fb6:	23 96       	adiw	r28, 0x03	; 3
    1fb8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1fba:	9f ad       	ldd	r25, Y+63	; 0x3f
    1fbc:	23 97       	sbiw	r28, 0x03	; 3
    1fbe:	02 97       	sbiw	r24, 0x02	; 2
    1fc0:	69 f5       	brne	.+90     	; 0x201c <main+0x6cc>
                        
                        calculate_diff_theta(0,&diff_theta, &bank);
    1fc2:	9e 01       	movw	r18, r28
    1fc4:	2b 5f       	subi	r18, 0xFB	; 251
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	ae 01       	movw	r20, r28
    1fca:	4f 5f       	subi	r20, 0xFF	; 255
    1fcc:	5f 4f       	sbci	r21, 0xFF	; 255
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	0e 94 a3 0a 	call	0x1546	; 0x1546 <calculate_diff_theta>
                        
                        
                        if (diff_theta < THRESHOLD_ANGLE_GOAL)
    1fd8:	c9 80       	ldd	r12, Y+1	; 0x01
    1fda:	da 80       	ldd	r13, Y+2	; 0x02
    1fdc:	eb 80       	ldd	r14, Y+3	; 0x03
    1fde:	fc 80       	ldd	r15, Y+4	; 0x04
    1fe0:	20 e0       	ldi	r18, 0x00	; 0
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	40 e7       	ldi	r20, 0x70	; 112
    1fe6:	51 e4       	ldi	r21, 0x41	; 65
    1fe8:	c7 01       	movw	r24, r14
    1fea:	b6 01       	movw	r22, r12
    1fec:	0e 94 00 17 	call	0x2e00	; 0x2e00 <__cmpsf2>
    1ff0:	88 23       	and	r24, r24
    1ff2:	0c f4       	brge	.+2      	; 0x1ff6 <main+0x6a6>
    1ff4:	ca c0       	rjmp	.+404    	; 0x218a <main+0x83a>
                            //stop_motor();
                            //m_wait(1000);
                            //set(PORTD,5);
                        }
                        else {
                            turn_robot(diff_theta,bank,diff_error);
    1ff6:	60 91 70 01 	lds	r22, 0x0170
    1ffa:	70 91 71 01 	lds	r23, 0x0171
    1ffe:	88 27       	eor	r24, r24
    2000:	77 fd       	sbrc	r23, 7
    2002:	80 95       	com	r24
    2004:	98 2f       	mov	r25, r24
    2006:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <__floatsisf>
    200a:	8b 01       	movw	r16, r22
    200c:	9c 01       	movw	r18, r24
    200e:	4d 81       	ldd	r20, Y+5	; 0x05
    2010:	5e 81       	ldd	r21, Y+6	; 0x06
    2012:	c7 01       	movw	r24, r14
    2014:	b6 01       	movw	r22, r12
    2016:	0e 94 c0 0b 	call	0x1780	; 0x1780 <turn_robot>
    201a:	bd c0       	rjmp	.+378    	; 0x2196 <main+0x846>
                        }
                        
                    }
                    else if (status_go_to_goal == 3)
    201c:	23 96       	adiw	r28, 0x03	; 3
    201e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2020:	bf ad       	ldd	r27, Y+63	; 0x3f
    2022:	23 97       	sbiw	r28, 0x03	; 3
    2024:	13 97       	sbiw	r26, 0x03	; 3
    2026:	09 f0       	breq	.+2      	; 0x202a <main+0x6da>
    2028:	b6 c0       	rjmp	.+364    	; 0x2196 <main+0x846>
                    {
                        
                        stop_motor();
    202a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
                        //}
                        //goal_pos_x = TARGETS_X[TARGET_NUM];
                        //goal_pos_y = TARGETS_Y[TARGET_NUM];
                        //status_go_to_goal = 0;
						
						state = FIND_PUCK;
    202e:	83 e0       	ldi	r24, 0x03	; 3
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	90 93 57 01 	sts	0x0157, r25
    2036:	80 93 56 01 	sts	0x0156, r24
						status_go_to_goal = 0;
    203a:	23 96       	adiw	r28, 0x03	; 3
    203c:	1f ae       	std	Y+63, r1	; 0x3f
    203e:	1e ae       	std	Y+62, r1	; 0x3e
    2040:	23 97       	sbiw	r28, 0x03	; 3
						break;
    2042:	a9 c0       	rjmp	.+338    	; 0x2196 <main+0x846>
                    
                 case GO_TO_GOAL_WITH_PUCK:
				 
					if (have_puck == 0)
					{
						state = FIND_PUCK;
    2044:	83 e0       	ldi	r24, 0x03	; 3
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	90 93 57 01 	sts	0x0157, r25
    204c:	80 93 56 01 	sts	0x0156, r24
						status_go_to_goal = 0;
    2050:	23 96       	adiw	r28, 0x03	; 3
    2052:	1f ae       	std	Y+63, r1	; 0x3f
    2054:	1e ae       	std	Y+62, r1	; 0x3e
    2056:	23 97       	sbiw	r28, 0x03	; 3
						break;
    2058:	9e c0       	rjmp	.+316    	; 0x2196 <main+0x846>
                    
                    // --------------------------------------------------------------
                    // SYSTEM STATE
                    // --------------------------------------------------------------
                case SYSTEM_STATE:
                    switch ((int)buffer_rec[0])
    205a:	80 91 4a 01 	lds	r24, 0x014A
    205e:	83 3a       	cpi	r24, 0xA3	; 163
    2060:	49 f1       	breq	.+82     	; 0x20b4 <main+0x764>
    2062:	38 f4       	brcc	.+14     	; 0x2072 <main+0x722>
    2064:	81 3a       	cpi	r24, 0xA1	; 161
    2066:	a9 f0       	breq	.+42     	; 0x2092 <main+0x742>
    2068:	d8 f4       	brcc	.+54     	; 0x20a0 <main+0x750>
    206a:	80 3a       	cpi	r24, 0xA0	; 160
    206c:	09 f0       	breq	.+2      	; 0x2070 <main+0x720>
    206e:	93 c0       	rjmp	.+294    	; 0x2196 <main+0x846>
    2070:	09 c0       	rjmp	.+18     	; 0x2084 <main+0x734>
    2072:	86 3a       	cpi	r24, 0xA6	; 166
    2074:	c9 f1       	breq	.+114    	; 0x20e8 <main+0x798>
    2076:	87 3a       	cpi	r24, 0xA7	; 167
    2078:	09 f4       	brne	.+2      	; 0x207c <main+0x72c>
    207a:	46 c0       	rjmp	.+140    	; 0x2108 <main+0x7b8>
    207c:	84 3a       	cpi	r24, 0xA4	; 164
    207e:	09 f0       	breq	.+2      	; 0x2082 <main+0x732>
    2080:	8a c0       	rjmp	.+276    	; 0x2196 <main+0x846>
    2082:	22 c0       	rjmp	.+68     	; 0x20c8 <main+0x778>
					{
                        //Comm test
                    case 0xA0:
                        state = BLUE_LED_STATE;
    2084:	86 e1       	ldi	r24, 0x16	; 22
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	90 93 57 01 	sts	0x0157, r25
    208c:	80 93 56 01 	sts	0x0156, r24
                        break;
    2090:	82 c0       	rjmp	.+260    	; 0x2196 <main+0x846>
                        //pause_bool = 0;
                        //}else
                        //{
                        //state = INITIAL_STATE;
                        //}
                        state = INITIAL_STATE;
    2092:	10 92 57 01 	sts	0x0157, r1
    2096:	10 92 56 01 	sts	0x0156, r1
                        turnOnBlueLED();
    209a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
                        break;
    209e:	7b c0       	rjmp	.+246    	; 0x2196 <main+0x846>
                        
                        //Goal A
                    case 0xA2:
                        if (check(PINB,2))
    20a0:	83 b1       	in	r24, 0x03	; 3
                            celebrate();
                        stop_motor();
    20a2:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
                        scoreA = buffer_rec[1];
                        scoreB = buffer_rec[2];
                        state = STOP_STATE;
    20a6:	85 e1       	ldi	r24, 0x15	; 21
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	90 93 57 01 	sts	0x0157, r25
    20ae:	80 93 56 01 	sts	0x0156, r24
                        break;
    20b2:	71 c0       	rjmp	.+226    	; 0x2196 <main+0x846>
                        
                        //Goal B
                    case 0xA3:
                        if (!check(PINB,2))
    20b4:	83 b1       	in	r24, 0x03	; 3
                            celebrate();
                        stop_motor();
    20b6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
                        scoreA = buffer_rec[1];
                        scoreB = buffer_rec[2];
                        state = STOP_STATE;
    20ba:	85 e1       	ldi	r24, 0x15	; 21
    20bc:	90 e0       	ldi	r25, 0x00	; 0
    20be:	90 93 57 01 	sts	0x0157, r25
    20c2:	80 93 56 01 	sts	0x0156, r24
                        break;
    20c6:	67 c0       	rjmp	.+206    	; 0x2196 <main+0x846>
                        
                        //Pause
                    case 0xA4:
                        pause_bool = 1;
                        stop_counter = 0;
                        go_bwd();
    20c8:	0e 94 99 0c 	call	0x1932	; 0x1932 <go_bwd>
    20cc:	80 e0       	ldi	r24, 0x00	; 0
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	01 96       	adiw	r24, 0x01	; 1
                        while(stop_counter<TIME_STOP)
    20d2:	88 3e       	cpi	r24, 0xE8	; 232
    20d4:	b3 e0       	ldi	r27, 0x03	; 3
    20d6:	9b 07       	cpc	r25, r27
    20d8:	d9 f7       	brne	.-10     	; 0x20d0 <main+0x780>
                        {
                            stop_counter++;
                        }
                        state = STOP_STATE;
    20da:	85 e1       	ldi	r24, 0x15	; 21
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	90 93 57 01 	sts	0x0157, r25
    20e2:	80 93 56 01 	sts	0x0156, r24
                        break;
    20e6:	57 c0       	rjmp	.+174    	; 0x2196 <main+0x846>
                        
                        //Halftime
                    case 0xA6:
                        stop_counter = 0;
                        go_bwd();
    20e8:	0e 94 99 0c 	call	0x1932	; 0x1932 <go_bwd>
    20ec:	80 e0       	ldi	r24, 0x00	; 0
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	01 96       	adiw	r24, 0x01	; 1
                        while(stop_counter<TIME_STOP)
    20f2:	88 3e       	cpi	r24, 0xE8	; 232
    20f4:	e3 e0       	ldi	r30, 0x03	; 3
    20f6:	9e 07       	cpc	r25, r30
    20f8:	d9 f7       	brne	.-10     	; 0x20f0 <main+0x7a0>
                        {
                            stop_counter++;
                        }
                        state = STOP_STATE;
    20fa:	85 e1       	ldi	r24, 0x15	; 21
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	90 93 57 01 	sts	0x0157, r25
    2102:	80 93 56 01 	sts	0x0156, r24
                        break;
    2106:	47 c0       	rjmp	.+142    	; 0x2196 <main+0x846>
                        
                        //Game over
                    case 0xA7:
                        if (check(PINB,2))
    2108:	83 b1       	in	r24, 0x03	; 3
                        }else
                        {
                            if (scoreA < scoreB)
                                celebrate();
                        }
                        stop_motor();
    210a:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
                        stop_counter = 0;
                        go_bwd();
    210e:	0e 94 99 0c 	call	0x1932	; 0x1932 <go_bwd>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	01 96       	adiw	r24, 0x01	; 1
                        while(stop_counter<TIME_STOP)
    2118:	88 3e       	cpi	r24, 0xE8	; 232
    211a:	f3 e0       	ldi	r31, 0x03	; 3
    211c:	9f 07       	cpc	r25, r31
    211e:	d9 f7       	brne	.-10     	; 0x2116 <main+0x7c6>
                        {
                            stop_counter++;
                        }
                        state = STOP_STATE;
    2120:	85 e1       	ldi	r24, 0x15	; 21
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	90 93 57 01 	sts	0x0157, r25
    2128:	80 93 56 01 	sts	0x0156, r24
                        break;
    212c:	34 c0       	rjmp	.+104    	; 0x2196 <main+0x846>
                    
                    // --------------------------------------------------------------
                    // BLUE LED STATE
                    // --------------------------------------------------------------
                case BLUE_LED_STATE:
                    stop_motor();
    212e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
                    turnOnBlueLED();
    2132:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
    2136:	2f eb       	ldi	r18, 0xBF	; 191
    2138:	37 e2       	ldi	r19, 0x27	; 39
    213a:	89 e0       	ldi	r24, 0x09	; 9
    213c:	21 50       	subi	r18, 0x01	; 1
    213e:	30 40       	sbci	r19, 0x00	; 0
    2140:	80 40       	sbci	r24, 0x00	; 0
    2142:	e1 f7       	brne	.-8      	; 0x213c <main+0x7ec>
    2144:	00 c0       	rjmp	.+0      	; 0x2146 <main+0x7f6>
    2146:	00 00       	nop
					m_wait(3000);
					turnOffBlueLED();
    2148:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
                    state = STOP_STATE;
    214c:	85 e1       	ldi	r24, 0x15	; 21
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	90 93 57 01 	sts	0x0157, r25
    2154:	80 93 56 01 	sts	0x0156, r24
                    break;
    2158:	1e c0       	rjmp	.+60     	; 0x2196 <main+0x846>
                    
                    // --------------------------------------------------------------
                    // STOP STATE
                    // --------------------------------------------------------------
                case STOP_STATE:
                    m_green(ON);
    215a:	6a 9a       	sbi	0x0d, 2	; 13
    215c:	72 98       	cbi	0x0e, 2	; 14
					turnOffBlueLED();
    215e:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
                    stop_motor();
    2162:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
                    break;
    2166:	17 c0       	rjmp	.+46     	; 0x2196 <main+0x846>
                    
                    // --------------------------------------------------------------
                    // DEFAULT STATE
                    // --------------------------------------------------------------
                default:
                    stop_motor();
    2168:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <stop_motor>
    216c:	14 c0       	rjmp	.+40     	; 0x2196 <main+0x846>
                    if (status_go_to_goal == 0)
                    {
                        {
                            dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                            if (dist_goal < THRESHOLD_DIST_GOAL){
                                status_go_to_goal = 2;
    216e:	a2 e0       	ldi	r26, 0x02	; 2
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	23 96       	adiw	r28, 0x03	; 3
    2174:	bf af       	std	Y+63, r27	; 0x3f
    2176:	ae af       	std	Y+62, r26	; 0x3e
    2178:	23 97       	sbiw	r28, 0x03	; 3
    217a:	0d c0       	rjmp	.+26     	; 0x2196 <main+0x846>
                            }
                            else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
                                status_go_to_goal = 1;
    217c:	e1 e0       	ldi	r30, 0x01	; 1
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	23 96       	adiw	r28, 0x03	; 3
    2182:	ff af       	std	Y+63, r31	; 0x3f
    2184:	ee af       	std	Y+62, r30	; 0x3e
    2186:	23 97       	sbiw	r28, 0x03	; 3
    2188:	06 c0       	rjmp	.+12     	; 0x2196 <main+0x846>
                        calculate_diff_theta(0,&diff_theta, &bank);
                        
                        
                        if (diff_theta < THRESHOLD_ANGLE_GOAL)
                        {
                            status_go_to_goal = 3;
    218a:	23 e0       	ldi	r18, 0x03	; 3
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	23 96       	adiw	r28, 0x03	; 3
    2190:	3f af       	std	Y+63, r19	; 0x3f
    2192:	2e af       	std	Y+62, r18	; 0x3e
    2194:	23 97       	sbiw	r28, 0x03	; 3
                    //m_green(TOGGLE);
                    //m_wait(250);
                    //}
                    // --------------------------------------------------------------
			}           
			flag_turn = 1;
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	90 93 07 01 	sts	0x0107, r25
    219e:	80 93 06 01 	sts	0x0106, r24
			start_timer0();    
    21a2:	0e 94 1f 02 	call	0x43e	; 0x43e <start_timer0>
    21a6:	68 cc       	rjmp	.-1840   	; 0x1a78 <main+0x128>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    21a8:	ee 24       	eor	r14, r14
    21aa:	e3 94       	inc	r14
    21ac:	f1 2c       	mov	r15, r1
    21ae:	cc cc       	rjmp	.-1640   	; 0x1b48 <main+0x1f8>
                    case(6):
                        PT7_have_puck = ADC;
                        break;
                }
                
                set(ADCSRA,ADIF);               // After doing the conversion reset flag
    21b0:	d1 01       	movw	r26, r2
    21b2:	8c 91       	ld	r24, X
    21b4:	80 61       	ori	r24, 0x10	; 16
    21b6:	8c 93       	st	X, r24
    21b8:	c4 cc       	rjmp	.-1656   	; 0x1b42 <main+0x1f2>

000021ba <__vector_41>:

// --------------------------------------------------------------
// INTERUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    21ba:	1f 92       	push	r1
    21bc:	0f 92       	push	r0
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	0f 92       	push	r0
    21c2:	11 24       	eor	r1, r1
    21c4:	2f 93       	push	r18
    21c6:	3f 93       	push	r19
    21c8:	4f 93       	push	r20
    21ca:	5f 93       	push	r21
    21cc:	6f 93       	push	r22
    21ce:	7f 93       	push	r23
    21d0:	8f 93       	push	r24
    21d2:	9f 93       	push	r25
    21d4:	af 93       	push	r26
    21d6:	bf 93       	push	r27
    21d8:	ef 93       	push	r30
    21da:	ff 93       	push	r31
    //m_green(ON);
    flag_timer = 1;
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	90 93 59 01 	sts	0x0159, r25
    21e4:	80 93 58 01 	sts	0x0158, r24
    stop_timer0();
    21e8:	0e 94 29 02 	call	0x452	; 0x452 <stop_timer0>
}
    21ec:	ff 91       	pop	r31
    21ee:	ef 91       	pop	r30
    21f0:	bf 91       	pop	r27
    21f2:	af 91       	pop	r26
    21f4:	9f 91       	pop	r25
    21f6:	8f 91       	pop	r24
    21f8:	7f 91       	pop	r23
    21fa:	6f 91       	pop	r22
    21fc:	5f 91       	pop	r21
    21fe:	4f 91       	pop	r20
    2200:	3f 91       	pop	r19
    2202:	2f 91       	pop	r18
    2204:	0f 90       	pop	r0
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	0f 90       	pop	r0
    220a:	1f 90       	pop	r1
    220c:	18 95       	reti

0000220e <__vector_23>:

ISR(TIMER0_OVF_vect)
{
    220e:	1f 92       	push	r1
    2210:	0f 92       	push	r0
    2212:	0f b6       	in	r0, 0x3f	; 63
    2214:	0f 92       	push	r0
    2216:	11 24       	eor	r1, r1
    2218:	2f 93       	push	r18
    221a:	3f 93       	push	r19
    221c:	4f 93       	push	r20
    221e:	5f 93       	push	r21
    2220:	6f 93       	push	r22
    2222:	7f 93       	push	r23
    2224:	8f 93       	push	r24
    2226:	9f 93       	push	r25
    2228:	af 93       	push	r26
    222a:	bf 93       	push	r27
    222c:	ef 93       	push	r30
    222e:	ff 93       	push	r31
    //m_green(ON);
    flag_turn = 0;
    2230:	10 92 07 01 	sts	0x0107, r1
    2234:	10 92 06 01 	sts	0x0106, r1
    stop_timer0();
    2238:	0e 94 29 02 	call	0x452	; 0x452 <stop_timer0>
    
}
    223c:	ff 91       	pop	r31
    223e:	ef 91       	pop	r30
    2240:	bf 91       	pop	r27
    2242:	af 91       	pop	r26
    2244:	9f 91       	pop	r25
    2246:	8f 91       	pop	r24
    2248:	7f 91       	pop	r23
    224a:	6f 91       	pop	r22
    224c:	5f 91       	pop	r21
    224e:	4f 91       	pop	r20
    2250:	3f 91       	pop	r19
    2252:	2f 91       	pop	r18
    2254:	0f 90       	pop	r0
    2256:	0f be       	out	0x3f, r0	; 63
    2258:	0f 90       	pop	r0
    225a:	1f 90       	pop	r1
    225c:	18 95       	reti

0000225e <__vector_3>:


ISR(INT2_vect)
 {
    225e:	1f 92       	push	r1
    2260:	0f 92       	push	r0
    2262:	0f b6       	in	r0, 0x3f	; 63
    2264:	0f 92       	push	r0
    2266:	11 24       	eor	r1, r1
    2268:	2f 93       	push	r18
    226a:	3f 93       	push	r19
    226c:	4f 93       	push	r20
    226e:	5f 93       	push	r21
    2270:	6f 93       	push	r22
    2272:	7f 93       	push	r23
    2274:	8f 93       	push	r24
    2276:	9f 93       	push	r25
    2278:	af 93       	push	r26
    227a:	bf 93       	push	r27
    227c:	ef 93       	push	r30
    227e:	ff 93       	push	r31
 //Read
 m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    2280:	6a e0       	ldi	r22, 0x0A	; 10
    2282:	8a e4       	ldi	r24, 0x4A	; 74
    2284:	91 e0       	ldi	r25, 0x01	; 1
    2286:	0e 94 cb 11 	call	0x2396	; 0x2396 <m_rf_read>
 past_state = state;
    228a:	80 91 56 01 	lds	r24, 0x0156
    228e:	90 91 57 01 	lds	r25, 0x0157
    2292:	90 93 55 01 	sts	0x0155, r25
    2296:	80 93 54 01 	sts	0x0154, r24
 //state = SYSTEM_STATE;
 flag_system = 1;
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	90 93 05 01 	sts	0x0105, r25
    22a2:	80 93 04 01 	sts	0x0104, r24
 //m_green(ON); // Indicator receiving from RF
 }
    22a6:	ff 91       	pop	r31
    22a8:	ef 91       	pop	r30
    22aa:	bf 91       	pop	r27
    22ac:	af 91       	pop	r26
    22ae:	9f 91       	pop	r25
    22b0:	8f 91       	pop	r24
    22b2:	7f 91       	pop	r23
    22b4:	6f 91       	pop	r22
    22b6:	5f 91       	pop	r21
    22b8:	4f 91       	pop	r20
    22ba:	3f 91       	pop	r19
    22bc:	2f 91       	pop	r18
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0f 90       	pop	r0
    22c4:	1f 90       	pop	r1
    22c6:	18 95       	reti

000022c8 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    22c8:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    22ca:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    22cc:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    22ce:	8c e0       	ldi	r24, 0x0C	; 12
    22d0:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    22d4:	e9 e6       	ldi	r30, 0x69	; 105
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	80 81       	ld	r24, Z
    22da:	80 62       	ori	r24, 0x20	; 32
    22dc:	80 83       	st	Z, r24
    22de:	80 81       	ld	r24, Z
    22e0:	8f 7e       	andi	r24, 0xEF	; 239
    22e2:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    22e4:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    22e6:	78 94       	sei
    22e8:	08 95       	ret

000022ea <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    22ea:	1f 93       	push	r17
    22ec:	cf 93       	push	r28
    22ee:	df 93       	push	r29
    22f0:	18 2f       	mov	r17, r24
    22f2:	d6 2f       	mov	r29, r22
    22f4:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    22f6:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    22fa:	94 ea       	ldi	r25, 0xA4	; 164
    22fc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2300:	ec eb       	ldi	r30, 0xBC	; 188
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	90 81       	ld	r25, Z
    2306:	99 23       	and	r25, r25
    2308:	ec f7       	brge	.-6      	; 0x2304 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    230a:	90 e5       	ldi	r25, 0x50	; 80
    230c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2310:	94 e8       	ldi	r25, 0x84	; 132
    2312:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2316:	ec eb       	ldi	r30, 0xBC	; 188
    2318:	f0 e0       	ldi	r31, 0x00	; 0
    231a:	90 81       	ld	r25, Z
    231c:	99 23       	and	r25, r25
    231e:	ec f7       	brge	.-6      	; 0x231a <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2320:	90 91 b9 00 	lds	r25, 0x00B9
    2324:	98 7f       	andi	r25, 0xF8	; 248
    2326:	90 32       	cpi	r25, 0x20	; 32
    2328:	29 f4       	brne	.+10     	; 0x2334 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    232a:	84 e9       	ldi	r24, 0x94	; 148
    232c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	2d c0       	rjmp	.+90     	; 0x238e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    233a:	84 e8       	ldi	r24, 0x84	; 132
    233c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2340:	ec eb       	ldi	r30, 0xBC	; 188
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	90 81       	ld	r25, Z
    2346:	99 23       	and	r25, r25
    2348:	ec f7       	brge	.-6      	; 0x2344 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    234a:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    234e:	84 e8       	ldi	r24, 0x84	; 132
    2350:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2354:	ec eb       	ldi	r30, 0xBC	; 188
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	88 23       	and	r24, r24
    235c:	ec f7       	brge	.-6      	; 0x2358 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    235e:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    2362:	84 e8       	ldi	r24, 0x84	; 132
    2364:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2368:	ec eb       	ldi	r30, 0xBC	; 188
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	80 81       	ld	r24, Z
    236e:	88 23       	and	r24, r24
    2370:	ec f7       	brge	.-6      	; 0x236c <m_rf_open+0x82>
	
	TWDR = packet_length;
    2372:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2376:	84 e8       	ldi	r24, 0x84	; 132
    2378:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    237c:	ec eb       	ldi	r30, 0xBC	; 188
    237e:	f0 e0       	ldi	r31, 0x00	; 0
    2380:	80 81       	ld	r24, Z
    2382:	88 23       	and	r24, r24
    2384:	ec f7       	brge	.-6      	; 0x2380 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2386:	84 e9       	ldi	r24, 0x94	; 148
    2388:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    238c:	81 e0       	ldi	r24, 0x01	; 1
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	1f 91       	pop	r17
    2394:	08 95       	ret

00002396 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    239a:	24 ea       	ldi	r18, 0xA4	; 164
    239c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    23a0:	ec eb       	ldi	r30, 0xBC	; 188
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	20 81       	ld	r18, Z
    23a6:	22 23       	and	r18, r18
    23a8:	ec f7       	brge	.-6      	; 0x23a4 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    23aa:	21 e5       	ldi	r18, 0x51	; 81
    23ac:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    23b0:	24 e8       	ldi	r18, 0x84	; 132
    23b2:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    23b6:	ec eb       	ldi	r30, 0xBC	; 188
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	20 81       	ld	r18, Z
    23bc:	22 23       	and	r18, r18
    23be:	ec f7       	brge	.-6      	; 0x23ba <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    23c0:	20 91 b9 00 	lds	r18, 0x00B9
    23c4:	28 7f       	andi	r18, 0xF8	; 248
    23c6:	28 34       	cpi	r18, 0x48	; 72
    23c8:	29 f4       	brne	.+10     	; 0x23d4 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23ca:	84 e9       	ldi	r24, 0x94	; 148
    23cc:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    23d0:	80 e0       	ldi	r24, 0x00	; 0
    23d2:	3f c0       	rjmp	.+126    	; 0x2452 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    23d4:	24 ec       	ldi	r18, 0xC4	; 196
    23d6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    23da:	ec eb       	ldi	r30, 0xBC	; 188
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	20 81       	ld	r18, Z
    23e0:	22 23       	and	r18, r18
    23e2:	ec f7       	brge	.-6      	; 0x23de <m_rf_read+0x48>
	bytes = TWDR;
    23e4:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    23e8:	46 13       	cpse	r20, r22
    23ea:	09 c0       	rjmp	.+18     	; 0x23fe <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    23ec:	50 e0       	ldi	r21, 0x00	; 0
    23ee:	41 50       	subi	r20, 0x01	; 1
    23f0:	51 09       	sbc	r21, r1
    23f2:	14 16       	cp	r1, r20
    23f4:	15 06       	cpc	r1, r21
    23f6:	44 f0       	brlt	.+16     	; 0x2408 <m_rf_read+0x72>
    23f8:	40 e0       	ldi	r20, 0x00	; 0
    23fa:	50 e0       	ldi	r21, 0x00	; 0
    23fc:	18 c0       	rjmp	.+48     	; 0x242e <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23fe:	84 e9       	ldi	r24, 0x94	; 148
    2400:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2404:	80 e0       	ldi	r24, 0x00	; 0
    2406:	25 c0       	rjmp	.+74     	; 0x2452 <m_rf_read+0xbc>
    2408:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    240a:	20 e0       	ldi	r18, 0x00	; 0
    240c:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    240e:	ec eb       	ldi	r30, 0xBC	; 188
    2410:	f0 e0       	ldi	r31, 0x00	; 0
    2412:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2414:	cb eb       	ldi	r28, 0xBB	; 187
    2416:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2418:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    241a:	60 81       	ld	r22, Z
    241c:	66 23       	and	r22, r22
    241e:	ec f7       	brge	.-6      	; 0x241a <m_rf_read+0x84>
		buffer[i] = TWDR;
    2420:	68 81       	ld	r22, Y
    2422:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2424:	2f 5f       	subi	r18, 0xFF	; 255
    2426:	3f 4f       	sbci	r19, 0xFF	; 255
    2428:	24 17       	cp	r18, r20
    242a:	35 07       	cpc	r19, r21
    242c:	ac f3       	brlt	.-22     	; 0x2418 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    242e:	24 e8       	ldi	r18, 0x84	; 132
    2430:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2434:	ec eb       	ldi	r30, 0xBC	; 188
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	20 81       	ld	r18, Z
    243a:	22 23       	and	r18, r18
    243c:	ec f7       	brge	.-6      	; 0x2438 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    243e:	20 91 bb 00 	lds	r18, 0x00BB
    2442:	fc 01       	movw	r30, r24
    2444:	e4 0f       	add	r30, r20
    2446:	f5 1f       	adc	r31, r21
    2448:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    244a:	84 e9       	ldi	r24, 0x94	; 148
    244c:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2450:	81 e0       	ldi	r24, 0x01	; 1
}
    2452:	df 91       	pop	r29
    2454:	cf 91       	pop	r28
    2456:	08 95       	ret

00002458 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    2458:	cf 93       	push	r28
    245a:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    245c:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    245e:	94 ea       	ldi	r25, 0xA4	; 164
    2460:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2464:	ec eb       	ldi	r30, 0xBC	; 188
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	90 81       	ld	r25, Z
    246a:	99 23       	and	r25, r25
    246c:	ec f7       	brge	.-6      	; 0x2468 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    246e:	90 e5       	ldi	r25, 0x50	; 80
    2470:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2474:	94 e8       	ldi	r25, 0x84	; 132
    2476:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    247a:	ec eb       	ldi	r30, 0xBC	; 188
    247c:	f0 e0       	ldi	r31, 0x00	; 0
    247e:	90 81       	ld	r25, Z
    2480:	99 23       	and	r25, r25
    2482:	ec f7       	brge	.-6      	; 0x247e <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2484:	90 91 b9 00 	lds	r25, 0x00B9
    2488:	98 7f       	andi	r25, 0xF8	; 248
    248a:	90 32       	cpi	r25, 0x20	; 32
    248c:	31 f4       	brne	.+12     	; 0x249a <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    248e:	84 e9       	ldi	r24, 0x94	; 148
    2490:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2494:	78 94       	sei
		return 0;
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	32 c0       	rjmp	.+100    	; 0x24fe <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    24a0:	94 e8       	ldi	r25, 0x84	; 132
    24a2:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    24a6:	ec eb       	ldi	r30, 0xBC	; 188
    24a8:	f0 e0       	ldi	r31, 0x00	; 0
    24aa:	90 81       	ld	r25, Z
    24ac:	99 23       	and	r25, r25
    24ae:	ec f7       	brge	.-6      	; 0x24aa <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    24b0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    24b4:	84 e8       	ldi	r24, 0x84	; 132
    24b6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    24ba:	ec eb       	ldi	r30, 0xBC	; 188
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	80 81       	ld	r24, Z
    24c0:	88 23       	and	r24, r24
    24c2:	ec f7       	brge	.-6      	; 0x24be <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    24c4:	24 2f       	mov	r18, r20
    24c6:	30 e0       	ldi	r19, 0x00	; 0
    24c8:	12 16       	cp	r1, r18
    24ca:	13 06       	cpc	r1, r19
    24cc:	9c f4       	brge	.+38     	; 0x24f4 <m_rf_send+0x9c>
    24ce:	a6 2f       	mov	r26, r22
    24d0:	b7 2f       	mov	r27, r23
    24d2:	80 e0       	ldi	r24, 0x00	; 0
    24d4:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    24d6:	cb eb       	ldi	r28, 0xBB	; 187
    24d8:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    24da:	ec eb       	ldi	r30, 0xBC	; 188
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    24e0:	4d 91       	ld	r20, X+
    24e2:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    24e4:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    24e6:	40 81       	ld	r20, Z
    24e8:	44 23       	and	r20, r20
    24ea:	ec f7       	brge	.-6      	; 0x24e6 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    24ec:	01 96       	adiw	r24, 0x01	; 1
    24ee:	82 17       	cp	r24, r18
    24f0:	93 07       	cpc	r25, r19
    24f2:	b4 f3       	brlt	.-20     	; 0x24e0 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24f4:	84 e9       	ldi	r24, 0x94	; 148
    24f6:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    24fa:	78 94       	sei
	
	return 1;
    24fc:	81 e0       	ldi	r24, 0x01	; 1
}
    24fe:	df 91       	pop	r29
    2500:	cf 91       	pop	r28
    2502:	08 95       	ret

00002504 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2504:	1f 92       	push	r1
    2506:	0f 92       	push	r0
    2508:	0f b6       	in	r0, 0x3f	; 63
    250a:	0f 92       	push	r0
    250c:	11 24       	eor	r1, r1
    250e:	8f 93       	push	r24
    2510:	9f 93       	push	r25
    2512:	ef 93       	push	r30
    2514:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2516:	e1 ee       	ldi	r30, 0xE1	; 225
    2518:	f0 e0       	ldi	r31, 0x00	; 0
    251a:	80 81       	ld	r24, Z
        UDINT = 0;
    251c:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    251e:	83 ff       	sbrs	r24, 3
    2520:	11 c0       	rjmp	.+34     	; 0x2544 <__vector_10+0x40>
		UENUM = 0;
    2522:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2526:	91 e0       	ldi	r25, 0x01	; 1
    2528:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    252c:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2530:	92 e1       	ldi	r25, 0x12	; 18
    2532:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2536:	98 e0       	ldi	r25, 0x08	; 8
    2538:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    253c:	10 92 73 01 	sts	0x0173, r1
		cdc_line_rtsdtr = 0;
    2540:	10 92 74 01 	sts	0x0174, r1
        }
	if (intbits & (1<<SOFI)) {
    2544:	82 ff       	sbrs	r24, 2
    2546:	13 c0       	rjmp	.+38     	; 0x256e <__vector_10+0x6a>
		if (usb_configuration) {
    2548:	80 91 73 01 	lds	r24, 0x0173
    254c:	88 23       	and	r24, r24
    254e:	79 f0       	breq	.+30     	; 0x256e <__vector_10+0x6a>
			t = transmit_flush_timer;
    2550:	80 91 72 01 	lds	r24, 0x0172
			if (t) {
    2554:	88 23       	and	r24, r24
    2556:	59 f0       	breq	.+22     	; 0x256e <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2558:	81 50       	subi	r24, 0x01	; 1
    255a:	80 93 72 01 	sts	0x0172, r24
				if (!t) {
    255e:	81 11       	cpse	r24, r1
    2560:	06 c0       	rjmp	.+12     	; 0x256e <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2562:	84 e0       	ldi	r24, 0x04	; 4
    2564:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2568:	8a e3       	ldi	r24, 0x3A	; 58
    256a:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    256e:	ff 91       	pop	r31
    2570:	ef 91       	pop	r30
    2572:	9f 91       	pop	r25
    2574:	8f 91       	pop	r24
    2576:	0f 90       	pop	r0
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	0f 90       	pop	r0
    257c:	1f 90       	pop	r1
    257e:	18 95       	reti

00002580 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2580:	1f 92       	push	r1
    2582:	0f 92       	push	r0
    2584:	0f b6       	in	r0, 0x3f	; 63
    2586:	0f 92       	push	r0
    2588:	11 24       	eor	r1, r1
    258a:	0f 93       	push	r16
    258c:	1f 93       	push	r17
    258e:	2f 93       	push	r18
    2590:	3f 93       	push	r19
    2592:	4f 93       	push	r20
    2594:	5f 93       	push	r21
    2596:	6f 93       	push	r22
    2598:	7f 93       	push	r23
    259a:	8f 93       	push	r24
    259c:	9f 93       	push	r25
    259e:	af 93       	push	r26
    25a0:	bf 93       	push	r27
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    25aa:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    25ae:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    25b2:	83 ff       	sbrs	r24, 3
    25b4:	51 c1       	rjmp	.+674    	; 0x2858 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    25b6:	e1 ef       	ldi	r30, 0xF1	; 241
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    25bc:	40 81       	ld	r20, Z
                wValue = UEDATX;
    25be:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    25c0:	30 81       	ld	r19, Z
    25c2:	93 2f       	mov	r25, r19
    25c4:	80 e0       	ldi	r24, 0x00	; 0
    25c6:	dc 01       	movw	r26, r24
    25c8:	a2 2b       	or	r26, r18
    25ca:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    25cc:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    25ce:	60 81       	ld	r22, Z
    25d0:	96 2f       	mov	r25, r22
    25d2:	80 e0       	ldi	r24, 0x00	; 0
    25d4:	85 2b       	or	r24, r21
                wLength = UEDATX;
    25d6:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    25d8:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    25da:	52 ef       	ldi	r21, 0xF2	; 242
    25dc:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    25e0:	46 30       	cpi	r20, 0x06	; 6
    25e2:	09 f0       	breq	.+2      	; 0x25e6 <__vector_11+0x66>
    25e4:	5c c0       	rjmp	.+184    	; 0x269e <__vector_11+0x11e>
    25e6:	04 c0       	rjmp	.+8      	; 0x25f0 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    25e8:	81 e2       	ldi	r24, 0x21	; 33
    25ea:	80 93 eb 00 	sts	0x00EB, r24
					return;
    25ee:	3b c1       	rjmp	.+630    	; 0x2866 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    25f0:	c6 e0       	ldi	r28, 0x06	; 6
    25f2:	47 ef       	ldi	r20, 0xF7	; 247
    25f4:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    25f6:	fa 01       	movw	r30, r20
    25f8:	65 91       	lpm	r22, Z+
    25fa:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    25fc:	26 17       	cp	r18, r22
    25fe:	37 07       	cpc	r19, r23
    2600:	19 f0       	breq	.+6      	; 0x2608 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    2602:	49 5f       	subi	r20, 0xF9	; 249
    2604:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    2606:	20 c0       	rjmp	.+64     	; 0x2648 <__vector_11+0xc8>
				}
				list += 2;
    2608:	fa 01       	movw	r30, r20
    260a:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    260c:	65 91       	lpm	r22, Z+
    260e:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2610:	86 17       	cp	r24, r22
    2612:	97 07       	cpc	r25, r23
    2614:	19 f0       	breq	.+6      	; 0x261c <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    2616:	49 5f       	subi	r20, 0xF9	; 249
    2618:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    261a:	16 c0       	rjmp	.+44     	; 0x2648 <__vector_11+0xc8>
				}
				list += 2;
    261c:	fa 01       	movw	r30, r20
    261e:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2620:	85 91       	lpm	r24, Z+
    2622:	94 91       	lpm	r25, Z
    2624:	28 2f       	mov	r18, r24
    2626:	39 2f       	mov	r19, r25
				list += 2;
    2628:	fa 01       	movw	r30, r20
    262a:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    262c:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    262e:	9b 2f       	mov	r25, r27
    2630:	80 e0       	ldi	r24, 0x00	; 0
    2632:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2634:	8f 3f       	cpi	r24, 0xFF	; 255
    2636:	91 05       	cpc	r25, r1
    2638:	19 f0       	breq	.+6      	; 0x2640 <__vector_11+0xc0>
    263a:	10 f0       	brcs	.+4      	; 0x2640 <__vector_11+0xc0>
    263c:	8f ef       	ldi	r24, 0xFF	; 255
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	84 17       	cp	r24, r20
    2642:	28 f4       	brcc	.+10     	; 0x264e <__vector_11+0xce>
    2644:	48 2f       	mov	r20, r24
    2646:	03 c0       	rjmp	.+6      	; 0x264e <__vector_11+0xce>
    2648:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    264a:	a9 f6       	brne	.-86     	; 0x25f6 <__vector_11+0x76>
    264c:	cd cf       	rjmp	.-102    	; 0x25e8 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    264e:	c8 ee       	ldi	r28, 0xE8	; 232
    2650:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2652:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2654:	a1 ef       	ldi	r26, 0xF1	; 241
    2656:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2658:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    265a:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    265c:	98 2f       	mov	r25, r24
    265e:	95 70       	andi	r25, 0x05	; 5
    2660:	e1 f3       	breq	.-8      	; 0x265a <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2662:	82 fd       	sbrc	r24, 2
    2664:	00 c1       	rjmp	.+512    	; 0x2866 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2666:	64 2f       	mov	r22, r20
    2668:	41 31       	cpi	r20, 0x11	; 17
    266a:	08 f0       	brcs	.+2      	; 0x266e <__vector_11+0xee>
    266c:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    266e:	66 23       	and	r22, r22
    2670:	09 f4       	brne	.+2      	; 0x2674 <__vector_11+0xf4>
    2672:	f6 c0       	rjmp	.+492    	; 0x2860 <__vector_11+0x2e0>
    2674:	c9 01       	movw	r24, r18
    2676:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    2678:	fc 01       	movw	r30, r24
    267a:	01 96       	adiw	r24, 0x01	; 1
    267c:	e4 91       	lpm	r30, Z
    267e:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2680:	51 50       	subi	r21, 0x01	; 1
    2682:	d1 f7       	brne	.-12     	; 0x2678 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2684:	86 2f       	mov	r24, r22
    2686:	81 50       	subi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	01 96       	adiw	r24, 0x01	; 1
    268c:	28 0f       	add	r18, r24
    268e:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2690:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2692:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2694:	41 11       	cpse	r20, r1
    2696:	e1 cf       	rjmp	.-62     	; 0x265a <__vector_11+0xda>
    2698:	60 31       	cpi	r22, 0x10	; 16
    269a:	f9 f2       	breq	.-66     	; 0x265a <__vector_11+0xda>
    269c:	e4 c0       	rjmp	.+456    	; 0x2866 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    269e:	45 30       	cpi	r20, 0x05	; 5
    26a0:	61 f4       	brne	.+24     	; 0x26ba <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    26a2:	8e ef       	ldi	r24, 0xFE	; 254
    26a4:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    26a8:	e8 ee       	ldi	r30, 0xE8	; 232
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	80 ff       	sbrs	r24, 0
    26b0:	fd cf       	rjmp	.-6      	; 0x26ac <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    26b2:	20 68       	ori	r18, 0x80	; 128
    26b4:	20 93 e3 00 	sts	0x00E3, r18
			return;
    26b8:	d6 c0       	rjmp	.+428    	; 0x2866 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    26ba:	49 30       	cpi	r20, 0x09	; 9
    26bc:	a1 f5       	brne	.+104    	; 0x2726 <__vector_11+0x1a6>
    26be:	71 11       	cpse	r23, r1
    26c0:	5b c0       	rjmp	.+182    	; 0x2778 <__vector_11+0x1f8>
			usb_configuration = wValue;
    26c2:	20 93 73 01 	sts	0x0173, r18
			cdc_line_rtsdtr = 0;
    26c6:	10 92 74 01 	sts	0x0174, r1
			transmit_flush_timer = 0;
    26ca:	10 92 72 01 	sts	0x0172, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    26ce:	8e ef       	ldi	r24, 0xFE	; 254
    26d0:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    26d4:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    26d6:	81 e2       	ldi	r24, 0x21	; 33
    26d8:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    26da:	c9 ee       	ldi	r28, 0xE9	; 233
    26dc:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    26de:	ab ee       	ldi	r26, 0xEB	; 235
    26e0:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    26e2:	6c ee       	ldi	r22, 0xEC	; 236
    26e4:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    26e6:	4d ee       	ldi	r20, 0xED	; 237
    26e8:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    26ea:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    26ec:	9c 01       	movw	r18, r24
    26ee:	2f 5f       	subi	r18, 0xFF	; 255
    26f0:	3f 4f       	sbci	r19, 0xFF	; 255
    26f2:	fc 01       	movw	r30, r24
    26f4:	04 91       	lpm	r16, Z
				UECONX = en;
    26f6:	0c 93       	st	X, r16
				if (en) {
    26f8:	00 23       	and	r16, r16
    26fa:	59 f0       	breq	.+22     	; 0x2712 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    26fc:	f9 01       	movw	r30, r18
    26fe:	24 91       	lpm	r18, Z
    2700:	fb 01       	movw	r30, r22
    2702:	20 83       	st	Z, r18
    2704:	fc 01       	movw	r30, r24
    2706:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    2708:	03 96       	adiw	r24, 0x03	; 3
    270a:	24 91       	lpm	r18, Z
    270c:	fa 01       	movw	r30, r20
    270e:	20 83       	st	Z, r18
    2710:	01 c0       	rjmp	.+2      	; 0x2714 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2712:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2714:	1f 5f       	subi	r17, 0xFF	; 255
    2716:	15 30       	cpi	r17, 0x05	; 5
    2718:	41 f7       	brne	.-48     	; 0x26ea <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    271a:	ea ee       	ldi	r30, 0xEA	; 234
    271c:	f0 e0       	ldi	r31, 0x00	; 0
    271e:	8e e1       	ldi	r24, 0x1E	; 30
    2720:	80 83       	st	Z, r24
        		UERST = 0;
    2722:	10 82       	st	Z, r1
			return;
    2724:	a0 c0       	rjmp	.+320    	; 0x2866 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2726:	48 30       	cpi	r20, 0x08	; 8
    2728:	81 f4       	brne	.+32     	; 0x274a <__vector_11+0x1ca>
    272a:	70 38       	cpi	r23, 0x80	; 128
    272c:	09 f0       	breq	.+2      	; 0x2730 <__vector_11+0x1b0>
    272e:	3f c0       	rjmp	.+126    	; 0x27ae <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2730:	e8 ee       	ldi	r30, 0xE8	; 232
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	80 ff       	sbrs	r24, 0
    2738:	fd cf       	rjmp	.-6      	; 0x2734 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    273a:	80 91 73 01 	lds	r24, 0x0173
    273e:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2742:	8e ef       	ldi	r24, 0xFE	; 254
    2744:	80 93 e8 00 	sts	0x00E8, r24
    2748:	8e c0       	rjmp	.+284    	; 0x2866 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    274a:	41 32       	cpi	r20, 0x21	; 33
    274c:	a9 f4       	brne	.+42     	; 0x2778 <__vector_11+0x1f8>
    274e:	71 3a       	cpi	r23, 0xA1	; 161
    2750:	f1 f5       	brne	.+124    	; 0x27ce <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2752:	e8 ee       	ldi	r30, 0xE8	; 232
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	80 ff       	sbrs	r24, 0
    275a:	fd cf       	rjmp	.-6      	; 0x2756 <__vector_11+0x1d6>
    275c:	e8 e0       	ldi	r30, 0x08	; 8
    275e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2760:	a1 ef       	ldi	r26, 0xF1	; 241
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	81 91       	ld	r24, Z+
    2766:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	ef 30       	cpi	r30, 0x0F	; 15
    276c:	f4 07       	cpc	r31, r20
    276e:	d1 f7       	brne	.-12     	; 0x2764 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2770:	8e ef       	ldi	r24, 0xFE	; 254
    2772:	80 93 e8 00 	sts	0x00E8, r24
    2776:	77 c0       	rjmp	.+238    	; 0x2866 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2778:	40 32       	cpi	r20, 0x20	; 32
    277a:	c9 f4       	brne	.+50     	; 0x27ae <__vector_11+0x22e>
    277c:	71 32       	cpi	r23, 0x21	; 33
    277e:	09 f0       	breq	.+2      	; 0x2782 <__vector_11+0x202>
    2780:	6b c0       	rjmp	.+214    	; 0x2858 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2782:	e8 ee       	ldi	r30, 0xE8	; 232
    2784:	f0 e0       	ldi	r31, 0x00	; 0
    2786:	80 81       	ld	r24, Z
    2788:	82 ff       	sbrs	r24, 2
    278a:	fd cf       	rjmp	.-6      	; 0x2786 <__vector_11+0x206>
    278c:	e8 e0       	ldi	r30, 0x08	; 8
    278e:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2790:	a1 ef       	ldi	r26, 0xF1	; 241
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	8c 91       	ld	r24, X
    2796:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2798:	51 e0       	ldi	r21, 0x01	; 1
    279a:	ef 30       	cpi	r30, 0x0F	; 15
    279c:	f5 07       	cpc	r31, r21
    279e:	d1 f7       	brne	.-12     	; 0x2794 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    27a0:	e8 ee       	ldi	r30, 0xE8	; 232
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	8b ef       	ldi	r24, 0xFB	; 251
    27a6:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27a8:	8e ef       	ldi	r24, 0xFE	; 254
    27aa:	80 83       	st	Z, r24
    27ac:	5c c0       	rjmp	.+184    	; 0x2866 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    27ae:	42 32       	cpi	r20, 0x22	; 34
    27b0:	71 f4       	brne	.+28     	; 0x27ce <__vector_11+0x24e>
    27b2:	71 32       	cpi	r23, 0x21	; 33
    27b4:	09 f0       	breq	.+2      	; 0x27b8 <__vector_11+0x238>
    27b6:	50 c0       	rjmp	.+160    	; 0x2858 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    27b8:	20 93 74 01 	sts	0x0174, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    27bc:	e8 ee       	ldi	r30, 0xE8	; 232
    27be:	f0 e0       	ldi	r31, 0x00	; 0
    27c0:	80 81       	ld	r24, Z
    27c2:	80 ff       	sbrs	r24, 0
    27c4:	fd cf       	rjmp	.-6      	; 0x27c0 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27c6:	8e ef       	ldi	r24, 0xFE	; 254
    27c8:	80 93 e8 00 	sts	0x00E8, r24
    27cc:	4c c0       	rjmp	.+152    	; 0x2866 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    27ce:	41 11       	cpse	r20, r1
    27d0:	1a c0       	rjmp	.+52     	; 0x2806 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    27d2:	e8 ee       	ldi	r30, 0xE8	; 232
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	20 81       	ld	r18, Z
    27d8:	20 ff       	sbrs	r18, 0
    27da:	fd cf       	rjmp	.-6      	; 0x27d6 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    27dc:	72 38       	cpi	r23, 0x82	; 130
    27de:	51 f4       	brne	.+20     	; 0x27f4 <__vector_11+0x274>
				UENUM = wIndex;
    27e0:	e9 ee       	ldi	r30, 0xE9	; 233
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    27e6:	80 91 eb 00 	lds	r24, 0x00EB
    27ea:	85 fb       	bst	r24, 5
    27ec:	88 27       	eor	r24, r24
    27ee:	80 f9       	bld	r24, 0
				UENUM = 0;
    27f0:	10 82       	st	Z, r1
    27f2:	01 c0       	rjmp	.+2      	; 0x27f6 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    27f4:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    27f6:	e1 ef       	ldi	r30, 0xF1	; 241
    27f8:	f0 e0       	ldi	r31, 0x00	; 0
    27fa:	80 83       	st	Z, r24
			UEDATX = 0;
    27fc:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27fe:	8e ef       	ldi	r24, 0xFE	; 254
    2800:	80 93 e8 00 	sts	0x00E8, r24
    2804:	30 c0       	rjmp	.+96     	; 0x2866 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2806:	41 30       	cpi	r20, 0x01	; 1
    2808:	11 f0       	breq	.+4      	; 0x280e <__vector_11+0x28e>
    280a:	43 30       	cpi	r20, 0x03	; 3
    280c:	29 f5       	brne	.+74     	; 0x2858 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    280e:	72 30       	cpi	r23, 0x02	; 2
    2810:	19 f5       	brne	.+70     	; 0x2858 <__vector_11+0x2d8>
    2812:	23 2b       	or	r18, r19
    2814:	09 f5       	brne	.+66     	; 0x2858 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    2816:	8f 77       	andi	r24, 0x7F	; 127
    2818:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    281a:	38 2f       	mov	r19, r24
    281c:	31 50       	subi	r19, 0x01	; 1
    281e:	34 30       	cpi	r19, 0x04	; 4
    2820:	d8 f4       	brcc	.+54     	; 0x2858 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2822:	3e ef       	ldi	r19, 0xFE	; 254
    2824:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2828:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    282c:	43 30       	cpi	r20, 0x03	; 3
    282e:	21 f4       	brne	.+8      	; 0x2838 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2830:	81 e2       	ldi	r24, 0x21	; 33
    2832:	80 93 eb 00 	sts	0x00EB, r24
    2836:	17 c0       	rjmp	.+46     	; 0x2866 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2838:	99 e1       	ldi	r25, 0x19	; 25
    283a:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    283e:	21 e0       	ldi	r18, 0x01	; 1
    2840:	30 e0       	ldi	r19, 0x00	; 0
    2842:	d9 01       	movw	r26, r18
    2844:	02 c0       	rjmp	.+4      	; 0x284a <__vector_11+0x2ca>
    2846:	aa 0f       	add	r26, r26
    2848:	bb 1f       	adc	r27, r27
    284a:	8a 95       	dec	r24
    284c:	e2 f7       	brpl	.-8      	; 0x2846 <__vector_11+0x2c6>
    284e:	ea ee       	ldi	r30, 0xEA	; 234
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	a0 83       	st	Z, r26
					UERST = 0;
    2854:	10 82       	st	Z, r1
    2856:	07 c0       	rjmp	.+14     	; 0x2866 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2858:	81 e2       	ldi	r24, 0x21	; 33
    285a:	80 93 eb 00 	sts	0x00EB, r24
    285e:	03 c0       	rjmp	.+6      	; 0x2866 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2860:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2862:	41 11       	cpse	r20, r1
    2864:	fa ce       	rjmp	.-524    	; 0x265a <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2866:	ff 91       	pop	r31
    2868:	ef 91       	pop	r30
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	bf 91       	pop	r27
    2870:	af 91       	pop	r26
    2872:	9f 91       	pop	r25
    2874:	8f 91       	pop	r24
    2876:	7f 91       	pop	r23
    2878:	6f 91       	pop	r22
    287a:	5f 91       	pop	r21
    287c:	4f 91       	pop	r20
    287e:	3f 91       	pop	r19
    2880:	2f 91       	pop	r18
    2882:	1f 91       	pop	r17
    2884:	0f 91       	pop	r16
    2886:	0f 90       	pop	r0
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	0f 90       	pop	r0
    288c:	1f 90       	pop	r1
    288e:	18 95       	reti

00002890 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2894:	ec eb       	ldi	r30, 0xBC	; 188
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	88 23       	and	r24, r24
    289c:	34 f0       	brlt	.+12     	; 0x28aa <twi_wait+0x1a>
    289e:	2f 5f       	subi	r18, 0xFF	; 255
    28a0:	3f 4f       	sbci	r19, 0xFF	; 255
    28a2:	29 3e       	cpi	r18, 0xE9	; 233
    28a4:	83 e0       	ldi	r24, 0x03	; 3
    28a6:	38 07       	cpc	r19, r24
    28a8:	b9 f7       	brne	.-18     	; 0x2898 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    28aa:	81 e0       	ldi	r24, 0x01	; 1
    28ac:	28 3e       	cpi	r18, 0xE8	; 232
    28ae:	33 40       	sbci	r19, 0x03	; 3
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <twi_wait+0x24>
    28b2:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    28b4:	08 95       	ret

000028b6 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    28b6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    28ba:	84 e8       	ldi	r24, 0x84	; 132
    28bc:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    28c0:	0e 94 48 14 	call	0x2890	; 0x2890 <twi_wait>
    28c4:	88 23       	and	r24, r24
    28c6:	21 f0       	breq	.+8      	; 0x28d0 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    28c8:	80 91 b9 00 	lds	r24, 0x00B9
    28cc:	88 7f       	andi	r24, 0xF8	; 248
    28ce:	08 95       	ret
	} else {
		return 0;					// comm failure
    28d0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    28d2:	08 95       	ret

000028d4 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    28d4:	cf 93       	push	r28
    28d6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    28d8:	94 ea       	ldi	r25, 0xA4	; 164
    28da:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    28de:	0e 94 48 14 	call	0x2890	; 0x2890 <twi_wait>
    28e2:	88 23       	and	r24, r24
    28e4:	61 f0       	breq	.+24     	; 0x28fe <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    28e6:	8c 2f       	mov	r24, r28
    28e8:	88 0f       	add	r24, r24
    28ea:	8f 5f       	subi	r24, 0xFF	; 255
    28ec:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    28f0:	88 34       	cpi	r24, 0x48	; 72
    28f2:	39 f4       	brne	.+14     	; 0x2902 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    28f4:	84 e9       	ldi	r24, 0x94	; 148
    28f6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    28fa:	80 e0       	ldi	r24, 0x00	; 0
    28fc:	03 c0       	rjmp	.+6      	; 0x2904 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    28fe:	80 e0       	ldi	r24, 0x00	; 0
    2900:	01 c0       	rjmp	.+2      	; 0x2904 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2902:	81 e0       	ldi	r24, 0x01	; 1
}	
    2904:	cf 91       	pop	r28
    2906:	08 95       	ret

00002908 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2908:	cf 93       	push	r28
    290a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    290c:	94 ea       	ldi	r25, 0xA4	; 164
    290e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2912:	0e 94 48 14 	call	0x2890	; 0x2890 <twi_wait>
    2916:	88 23       	and	r24, r24
    2918:	59 f0       	breq	.+22     	; 0x2930 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    291a:	8c 2f       	mov	r24, r28
    291c:	88 0f       	add	r24, r24
    291e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2922:	80 32       	cpi	r24, 0x20	; 32
    2924:	39 f4       	brne	.+14     	; 0x2934 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2926:	84 e9       	ldi	r24, 0x94	; 148
    2928:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	03 c0       	rjmp	.+6      	; 0x2936 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	01 c0       	rjmp	.+2      	; 0x2936 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2934:	81 e0       	ldi	r24, 0x01	; 1
}	
    2936:	cf 91       	pop	r28
    2938:	08 95       	ret

0000293a <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    293a:	84 e9       	ldi	r24, 0x94	; 148
    293c:	80 93 bc 00 	sts	0x00BC, r24
    2940:	08 95       	ret

00002942 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2942:	ef 92       	push	r14
    2944:	ff 92       	push	r15
    2946:	0f 93       	push	r16
    2948:	1f 93       	push	r17
    294a:	cf 93       	push	r28
    294c:	df 93       	push	r29
    294e:	cd b7       	in	r28, 0x3d	; 61
    2950:	de b7       	in	r29, 0x3e	; 62
    2952:	60 97       	sbiw	r28, 0x10	; 16
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	e8 2e       	mov	r14, r24
    2960:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2962:	fe 01       	movw	r30, r28
    2964:	31 96       	adiw	r30, 0x01	; 1
    2966:	80 e1       	ldi	r24, 0x10	; 16
    2968:	df 01       	movw	r26, r30
    296a:	1d 92       	st	X+, r1
    296c:	8a 95       	dec	r24
    296e:	e9 f7       	brne	.-6      	; 0x296a <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2970:	88 e5       	ldi	r24, 0x58	; 88
    2972:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2976:	88 23       	and	r24, r24
    2978:	09 f4       	brne	.+2      	; 0x297c <m_wii_read+0x3a>
    297a:	66 c0       	rjmp	.+204    	; 0x2a48 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    297c:	86 e3       	ldi	r24, 0x36	; 54
    297e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2982:	88 23       	and	r24, r24
    2984:	09 f4       	brne	.+2      	; 0x2988 <m_wii_read+0x46>
    2986:	62 c0       	rjmp	.+196    	; 0x2a4c <m_wii_read+0x10a>
	end();
    2988:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    298c:	b8 e0       	ldi	r27, 0x08	; 8
    298e:	ba 95       	dec	r27
    2990:	f1 f7       	brne	.-4      	; 0x298e <m_wii_read+0x4c>
    2992:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2994:	88 e5       	ldi	r24, 0x58	; 88
    2996:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <start_read>
    299a:	88 23       	and	r24, r24
    299c:	09 f4       	brne	.+2      	; 0x29a0 <m_wii_read+0x5e>
    299e:	58 c0       	rjmp	.+176    	; 0x2a50 <m_wii_read+0x10e>
    29a0:	ae 01       	movw	r20, r28
    29a2:	4f 5f       	subi	r20, 0xFF	; 255
    29a4:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    29a6:	8e 01       	movw	r16, r28
    29a8:	00 5f       	subi	r16, 0xF0	; 240
    29aa:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    29ac:	ec eb       	ldi	r30, 0xBC	; 188
    29ae:	f0 e0       	ldi	r31, 0x00	; 0
    29b0:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    29b2:	2b eb       	ldi	r18, 0xBB	; 187
    29b4:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    29b6:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    29b8:	80 81       	ld	r24, Z
    29ba:	88 23       	and	r24, r24
    29bc:	ec f7       	brge	.-6      	; 0x29b8 <m_wii_read+0x76>
		temp[i] = TWDR;
    29be:	d9 01       	movw	r26, r18
    29c0:	8c 91       	ld	r24, X
    29c2:	da 01       	movw	r26, r20
    29c4:	8d 93       	st	X+, r24
    29c6:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    29c8:	a0 17       	cp	r26, r16
    29ca:	b1 07       	cpc	r27, r17
    29cc:	a1 f7       	brne	.-24     	; 0x29b6 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    29ce:	84 e8       	ldi	r24, 0x84	; 132
    29d0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    29d4:	ec eb       	ldi	r30, 0xBC	; 188
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	80 81       	ld	r24, Z
    29da:	88 23       	and	r24, r24
    29dc:	ec f7       	brge	.-6      	; 0x29d8 <m_wii_read+0x96>
	temp[15] = TWDR;
    29de:	80 91 bb 00 	lds	r24, 0x00BB
    29e2:	88 8b       	std	Y+16, r24	; 0x10
	end();
    29e4:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
    29e8:	de 01       	movw	r26, r28
    29ea:	14 96       	adiw	r26, 0x04	; 4
    29ec:	6e 2d       	mov	r22, r14
    29ee:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    29f0:	4c 91       	ld	r20, X
    29f2:	24 2f       	mov	r18, r20
    29f4:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    29f6:	cd 01       	movw	r24, r26
    29f8:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    29fa:	fc 01       	movw	r30, r24
    29fc:	80 81       	ld	r24, Z
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	f0 e1       	ldi	r31, 0x10	; 16
    2a02:	2f 9f       	mul	r18, r31
    2a04:	80 0d       	add	r24, r0
    2a06:	91 1d       	adc	r25, r1
    2a08:	11 24       	eor	r1, r1
    2a0a:	fb 01       	movw	r30, r22
    2a0c:	91 83       	std	Z+1, r25	; 0x01
    2a0e:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2a10:	84 2f       	mov	r24, r20
    2a12:	80 7c       	andi	r24, 0xC0	; 192
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	88 0f       	add	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	88 0f       	add	r24, r24
    2a1c:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2a1e:	9d 01       	movw	r18, r26
    2a20:	21 50       	subi	r18, 0x01	; 1
    2a22:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2a24:	f9 01       	movw	r30, r18
    2a26:	20 81       	ld	r18, Z
    2a28:	82 0f       	add	r24, r18
    2a2a:	91 1d       	adc	r25, r1
    2a2c:	fb 01       	movw	r30, r22
    2a2e:	93 83       	std	Z+3, r25	; 0x03
    2a30:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2a32:	4f 70       	andi	r20, 0x0F	; 15
    2a34:	44 83       	std	Z+4, r20	; 0x04
    2a36:	15 82       	std	Z+5, r1	; 0x05
    2a38:	13 96       	adiw	r26, 0x03	; 3
    2a3a:	6a 5f       	subi	r22, 0xFA	; 250
    2a3c:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2a3e:	0a 17       	cp	r16, r26
    2a40:	1b 07       	cpc	r17, r27
    2a42:	b1 f6       	brne	.-84     	; 0x29f0 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2a4c:	80 e0       	ldi	r24, 0x00	; 0
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2a50:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2a52:	60 96       	adiw	r28, 0x10	; 16
    2a54:	0f b6       	in	r0, 0x3f	; 63
    2a56:	f8 94       	cli
    2a58:	de bf       	out	0x3e, r29	; 62
    2a5a:	0f be       	out	0x3f, r0	; 63
    2a5c:	cd bf       	out	0x3d, r28	; 61
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	ff 90       	pop	r15
    2a68:	ef 90       	pop	r14
    2a6a:	08 95       	ret

00002a6c <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2a6c:	0e 94 64 11 	call	0x22c8	; 0x22c8 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2a70:	88 e5       	ldi	r24, 0x58	; 88
    2a72:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2a76:	88 23       	and	r24, r24
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <m_wii_open+0x10>
    2a7a:	c7 c0       	rjmp	.+398    	; 0x2c0a <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    2a7c:	80 e3       	ldi	r24, 0x30	; 48
    2a7e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2a82:	88 23       	and	r24, r24
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <m_wii_open+0x1c>
    2a86:	c3 c0       	rjmp	.+390    	; 0x2c0e <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2a8e:	88 23       	and	r24, r24
    2a90:	09 f4       	brne	.+2      	; 0x2a94 <m_wii_open+0x28>
    2a92:	bf c0       	rjmp	.+382    	; 0x2c12 <m_wii_open+0x1a6>
	end();
    2a94:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2a98:	83 ec       	ldi	r24, 0xC3	; 195
    2a9a:	99 e0       	ldi	r25, 0x09	; 9
    2a9c:	01 97       	sbiw	r24, 0x01	; 1
    2a9e:	f1 f7       	brne	.-4      	; 0x2a9c <m_wii_open+0x30>
    2aa0:	00 c0       	rjmp	.+0      	; 0x2aa2 <m_wii_open+0x36>
    2aa2:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2aa4:	88 e5       	ldi	r24, 0x58	; 88
    2aa6:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2aaa:	88 23       	and	r24, r24
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <m_wii_open+0x44>
    2aae:	b3 c0       	rjmp	.+358    	; 0x2c16 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2ab6:	88 23       	and	r24, r24
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <m_wii_open+0x50>
    2aba:	af c0       	rjmp	.+350    	; 0x2c1a <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    2abc:	80 e0       	ldi	r24, 0x00	; 0
    2abe:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2ac2:	88 23       	and	r24, r24
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <m_wii_open+0x5c>
    2ac6:	ab c0       	rjmp	.+342    	; 0x2c1e <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2ac8:	80 e0       	ldi	r24, 0x00	; 0
    2aca:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2ace:	88 23       	and	r24, r24
    2ad0:	09 f4       	brne	.+2      	; 0x2ad4 <m_wii_open+0x68>
    2ad2:	a7 c0       	rjmp	.+334    	; 0x2c22 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2ada:	88 23       	and	r24, r24
    2adc:	09 f4       	brne	.+2      	; 0x2ae0 <m_wii_open+0x74>
    2ade:	a3 c0       	rjmp	.+326    	; 0x2c26 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2ae0:	80 e0       	ldi	r24, 0x00	; 0
    2ae2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2ae6:	88 23       	and	r24, r24
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <m_wii_open+0x80>
    2aea:	9f c0       	rjmp	.+318    	; 0x2c2a <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2af2:	88 23       	and	r24, r24
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <m_wii_open+0x8c>
    2af6:	9b c0       	rjmp	.+310    	; 0x2c2e <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2af8:	80 e0       	ldi	r24, 0x00	; 0
    2afa:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2afe:	88 23       	and	r24, r24
    2b00:	09 f4       	brne	.+2      	; 0x2b04 <m_wii_open+0x98>
    2b02:	97 c0       	rjmp	.+302    	; 0x2c32 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2b04:	80 e9       	ldi	r24, 0x90	; 144
    2b06:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b0a:	88 23       	and	r24, r24
    2b0c:	09 f4       	brne	.+2      	; 0x2b10 <m_wii_open+0xa4>
    2b0e:	93 c0       	rjmp	.+294    	; 0x2c36 <m_wii_open+0x1ca>
	end();
    2b10:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
    2b14:	83 ec       	ldi	r24, 0xC3	; 195
    2b16:	99 e0       	ldi	r25, 0x09	; 9
    2b18:	01 97       	sbiw	r24, 0x01	; 1
    2b1a:	f1 f7       	brne	.-4      	; 0x2b18 <m_wii_open+0xac>
    2b1c:	00 c0       	rjmp	.+0      	; 0x2b1e <m_wii_open+0xb2>
    2b1e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2b20:	88 e5       	ldi	r24, 0x58	; 88
    2b22:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2b26:	88 23       	and	r24, r24
    2b28:	09 f4       	brne	.+2      	; 0x2b2c <m_wii_open+0xc0>
    2b2a:	87 c0       	rjmp	.+270    	; 0x2c3a <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2b2c:	87 e0       	ldi	r24, 0x07	; 7
    2b2e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b32:	88 23       	and	r24, r24
    2b34:	09 f4       	brne	.+2      	; 0x2b38 <m_wii_open+0xcc>
    2b36:	83 c0       	rjmp	.+262    	; 0x2c3e <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b3e:	88 23       	and	r24, r24
    2b40:	09 f4       	brne	.+2      	; 0x2b44 <m_wii_open+0xd8>
    2b42:	7f c0       	rjmp	.+254    	; 0x2c42 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    2b44:	81 e4       	ldi	r24, 0x41	; 65
    2b46:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b4a:	88 23       	and	r24, r24
    2b4c:	09 f4       	brne	.+2      	; 0x2b50 <m_wii_open+0xe4>
    2b4e:	7b c0       	rjmp	.+246    	; 0x2c46 <m_wii_open+0x1da>
	end();
    2b50:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
    2b54:	83 ec       	ldi	r24, 0xC3	; 195
    2b56:	99 e0       	ldi	r25, 0x09	; 9
    2b58:	01 97       	sbiw	r24, 0x01	; 1
    2b5a:	f1 f7       	brne	.-4      	; 0x2b58 <m_wii_open+0xec>
    2b5c:	00 c0       	rjmp	.+0      	; 0x2b5e <m_wii_open+0xf2>
    2b5e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2b60:	88 e5       	ldi	r24, 0x58	; 88
    2b62:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2b66:	88 23       	and	r24, r24
    2b68:	09 f4       	brne	.+2      	; 0x2b6c <m_wii_open+0x100>
    2b6a:	6f c0       	rjmp	.+222    	; 0x2c4a <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    2b6c:	8a e1       	ldi	r24, 0x1A	; 26
    2b6e:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b72:	88 23       	and	r24, r24
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <m_wii_open+0x10c>
    2b76:	6b c0       	rjmp	.+214    	; 0x2c4e <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    2b78:	80 e4       	ldi	r24, 0x40	; 64
    2b7a:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b7e:	88 23       	and	r24, r24
    2b80:	09 f4       	brne	.+2      	; 0x2b84 <m_wii_open+0x118>
    2b82:	67 c0       	rjmp	.+206    	; 0x2c52 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2b8a:	88 23       	and	r24, r24
    2b8c:	09 f4       	brne	.+2      	; 0x2b90 <m_wii_open+0x124>
    2b8e:	63 c0       	rjmp	.+198    	; 0x2c56 <m_wii_open+0x1ea>
	end();
    2b90:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
    2b94:	83 ec       	ldi	r24, 0xC3	; 195
    2b96:	99 e0       	ldi	r25, 0x09	; 9
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	f1 f7       	brne	.-4      	; 0x2b98 <m_wii_open+0x12c>
    2b9c:	00 c0       	rjmp	.+0      	; 0x2b9e <m_wii_open+0x132>
    2b9e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2ba0:	88 e5       	ldi	r24, 0x58	; 88
    2ba2:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2ba6:	88 23       	and	r24, r24
    2ba8:	09 f4       	brne	.+2      	; 0x2bac <m_wii_open+0x140>
    2baa:	57 c0       	rjmp	.+174    	; 0x2c5a <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    2bac:	83 e3       	ldi	r24, 0x33	; 51
    2bae:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2bb2:	88 23       	and	r24, r24
    2bb4:	09 f4       	brne	.+2      	; 0x2bb8 <m_wii_open+0x14c>
    2bb6:	53 c0       	rjmp	.+166    	; 0x2c5e <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2bb8:	83 e0       	ldi	r24, 0x03	; 3
    2bba:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2bbe:	88 23       	and	r24, r24
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <m_wii_open+0x158>
    2bc2:	4f c0       	rjmp	.+158    	; 0x2c62 <m_wii_open+0x1f6>
	end();
    2bc4:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
    2bc8:	83 ec       	ldi	r24, 0xC3	; 195
    2bca:	99 e0       	ldi	r25, 0x09	; 9
    2bcc:	01 97       	sbiw	r24, 0x01	; 1
    2bce:	f1 f7       	brne	.-4      	; 0x2bcc <m_wii_open+0x160>
    2bd0:	00 c0       	rjmp	.+0      	; 0x2bd2 <m_wii_open+0x166>
    2bd2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2bd4:	88 e5       	ldi	r24, 0x58	; 88
    2bd6:	0e 94 84 14 	call	0x2908	; 0x2908 <start_write>
    2bda:	88 23       	and	r24, r24
    2bdc:	09 f4       	brne	.+2      	; 0x2be0 <m_wii_open+0x174>
    2bde:	43 c0       	rjmp	.+134    	; 0x2c66 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    2be0:	80 e3       	ldi	r24, 0x30	; 48
    2be2:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2be6:	88 23       	and	r24, r24
    2be8:	09 f4       	brne	.+2      	; 0x2bec <m_wii_open+0x180>
    2bea:	3f c0       	rjmp	.+126    	; 0x2c6a <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2bec:	88 e0       	ldi	r24, 0x08	; 8
    2bee:	0e 94 5b 14 	call	0x28b6	; 0x28b6 <send_byte>
    2bf2:	88 23       	and	r24, r24
    2bf4:	e1 f1       	breq	.+120    	; 0x2c6e <m_wii_open+0x202>
	end();
    2bf6:	0e 94 9d 14 	call	0x293a	; 0x293a <end>
    2bfa:	83 ec       	ldi	r24, 0xC3	; 195
    2bfc:	99 e0       	ldi	r25, 0x09	; 9
    2bfe:	01 97       	sbiw	r24, 0x01	; 1
    2c00:	f1 f7       	brne	.-4      	; 0x2bfe <m_wii_open+0x192>
    2c02:	00 c0       	rjmp	.+0      	; 0x2c04 <m_wii_open+0x198>
    2c04:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2c06:	81 e0       	ldi	r24, 0x01	; 1
    2c08:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2c0a:	80 e0       	ldi	r24, 0x00	; 0
    2c0c:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2c12:	80 e0       	ldi	r24, 0x00	; 0
    2c14:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2c16:	80 e0       	ldi	r24, 0x00	; 0
    2c18:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c1a:	80 e0       	ldi	r24, 0x00	; 0
    2c1c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
    2c20:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c2e:	80 e0       	ldi	r24, 0x00	; 0
    2c30:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2c42:	80 e0       	ldi	r24, 0x00	; 0
    2c44:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2c46:	80 e0       	ldi	r24, 0x00	; 0
    2c48:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2c4e:	80 e0       	ldi	r24, 0x00	; 0
    2c50:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2c52:	80 e0       	ldi	r24, 0x00	; 0
    2c54:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2c62:	80 e0       	ldi	r24, 0x00	; 0
    2c64:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2c6a:	80 e0       	ldi	r24, 0x00	; 0
    2c6c:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2c70:	08 95       	ret

00002c72 <__subsf3>:
    2c72:	50 58       	subi	r21, 0x80	; 128

00002c74 <__addsf3>:
    2c74:	bb 27       	eor	r27, r27
    2c76:	aa 27       	eor	r26, r26
    2c78:	0e d0       	rcall	.+28     	; 0x2c96 <__addsf3x>
    2c7a:	27 c2       	rjmp	.+1102   	; 0x30ca <__fp_round>
    2c7c:	f0 d1       	rcall	.+992    	; 0x305e <__fp_pscA>
    2c7e:	30 f0       	brcs	.+12     	; 0x2c8c <__addsf3+0x18>
    2c80:	f5 d1       	rcall	.+1002   	; 0x306c <__fp_pscB>
    2c82:	20 f0       	brcs	.+8      	; 0x2c8c <__addsf3+0x18>
    2c84:	31 f4       	brne	.+12     	; 0x2c92 <__addsf3+0x1e>
    2c86:	9f 3f       	cpi	r25, 0xFF	; 255
    2c88:	11 f4       	brne	.+4      	; 0x2c8e <__addsf3+0x1a>
    2c8a:	1e f4       	brtc	.+6      	; 0x2c92 <__addsf3+0x1e>
    2c8c:	c0 c1       	rjmp	.+896    	; 0x300e <__fp_nan>
    2c8e:	0e f4       	brtc	.+2      	; 0x2c92 <__addsf3+0x1e>
    2c90:	e0 95       	com	r30
    2c92:	e7 fb       	bst	r30, 7
    2c94:	b6 c1       	rjmp	.+876    	; 0x3002 <__fp_inf>

00002c96 <__addsf3x>:
    2c96:	e9 2f       	mov	r30, r25
    2c98:	3a d2       	rcall	.+1140   	; 0x310e <__fp_split3>
    2c9a:	80 f3       	brcs	.-32     	; 0x2c7c <__addsf3+0x8>
    2c9c:	ba 17       	cp	r27, r26
    2c9e:	62 07       	cpc	r22, r18
    2ca0:	73 07       	cpc	r23, r19
    2ca2:	84 07       	cpc	r24, r20
    2ca4:	95 07       	cpc	r25, r21
    2ca6:	18 f0       	brcs	.+6      	; 0x2cae <__addsf3x+0x18>
    2ca8:	71 f4       	brne	.+28     	; 0x2cc6 <__addsf3x+0x30>
    2caa:	9e f5       	brtc	.+102    	; 0x2d12 <__addsf3x+0x7c>
    2cac:	52 c2       	rjmp	.+1188   	; 0x3152 <__fp_zero>
    2cae:	0e f4       	brtc	.+2      	; 0x2cb2 <__addsf3x+0x1c>
    2cb0:	e0 95       	com	r30
    2cb2:	0b 2e       	mov	r0, r27
    2cb4:	ba 2f       	mov	r27, r26
    2cb6:	a0 2d       	mov	r26, r0
    2cb8:	0b 01       	movw	r0, r22
    2cba:	b9 01       	movw	r22, r18
    2cbc:	90 01       	movw	r18, r0
    2cbe:	0c 01       	movw	r0, r24
    2cc0:	ca 01       	movw	r24, r20
    2cc2:	a0 01       	movw	r20, r0
    2cc4:	11 24       	eor	r1, r1
    2cc6:	ff 27       	eor	r31, r31
    2cc8:	59 1b       	sub	r21, r25
    2cca:	99 f0       	breq	.+38     	; 0x2cf2 <__addsf3x+0x5c>
    2ccc:	59 3f       	cpi	r21, 0xF9	; 249
    2cce:	50 f4       	brcc	.+20     	; 0x2ce4 <__addsf3x+0x4e>
    2cd0:	50 3e       	cpi	r21, 0xE0	; 224
    2cd2:	68 f1       	brcs	.+90     	; 0x2d2e <__addsf3x+0x98>
    2cd4:	1a 16       	cp	r1, r26
    2cd6:	f0 40       	sbci	r31, 0x00	; 0
    2cd8:	a2 2f       	mov	r26, r18
    2cda:	23 2f       	mov	r18, r19
    2cdc:	34 2f       	mov	r19, r20
    2cde:	44 27       	eor	r20, r20
    2ce0:	58 5f       	subi	r21, 0xF8	; 248
    2ce2:	f3 cf       	rjmp	.-26     	; 0x2cca <__addsf3x+0x34>
    2ce4:	46 95       	lsr	r20
    2ce6:	37 95       	ror	r19
    2ce8:	27 95       	ror	r18
    2cea:	a7 95       	ror	r26
    2cec:	f0 40       	sbci	r31, 0x00	; 0
    2cee:	53 95       	inc	r21
    2cf0:	c9 f7       	brne	.-14     	; 0x2ce4 <__addsf3x+0x4e>
    2cf2:	7e f4       	brtc	.+30     	; 0x2d12 <__addsf3x+0x7c>
    2cf4:	1f 16       	cp	r1, r31
    2cf6:	ba 0b       	sbc	r27, r26
    2cf8:	62 0b       	sbc	r22, r18
    2cfa:	73 0b       	sbc	r23, r19
    2cfc:	84 0b       	sbc	r24, r20
    2cfe:	ba f0       	brmi	.+46     	; 0x2d2e <__addsf3x+0x98>
    2d00:	91 50       	subi	r25, 0x01	; 1
    2d02:	a1 f0       	breq	.+40     	; 0x2d2c <__addsf3x+0x96>
    2d04:	ff 0f       	add	r31, r31
    2d06:	bb 1f       	adc	r27, r27
    2d08:	66 1f       	adc	r22, r22
    2d0a:	77 1f       	adc	r23, r23
    2d0c:	88 1f       	adc	r24, r24
    2d0e:	c2 f7       	brpl	.-16     	; 0x2d00 <__addsf3x+0x6a>
    2d10:	0e c0       	rjmp	.+28     	; 0x2d2e <__addsf3x+0x98>
    2d12:	ba 0f       	add	r27, r26
    2d14:	62 1f       	adc	r22, r18
    2d16:	73 1f       	adc	r23, r19
    2d18:	84 1f       	adc	r24, r20
    2d1a:	48 f4       	brcc	.+18     	; 0x2d2e <__addsf3x+0x98>
    2d1c:	87 95       	ror	r24
    2d1e:	77 95       	ror	r23
    2d20:	67 95       	ror	r22
    2d22:	b7 95       	ror	r27
    2d24:	f7 95       	ror	r31
    2d26:	9e 3f       	cpi	r25, 0xFE	; 254
    2d28:	08 f0       	brcs	.+2      	; 0x2d2c <__addsf3x+0x96>
    2d2a:	b3 cf       	rjmp	.-154    	; 0x2c92 <__addsf3+0x1e>
    2d2c:	93 95       	inc	r25
    2d2e:	88 0f       	add	r24, r24
    2d30:	08 f0       	brcs	.+2      	; 0x2d34 <__addsf3x+0x9e>
    2d32:	99 27       	eor	r25, r25
    2d34:	ee 0f       	add	r30, r30
    2d36:	97 95       	ror	r25
    2d38:	87 95       	ror	r24
    2d3a:	08 95       	ret
    2d3c:	90 d1       	rcall	.+800    	; 0x305e <__fp_pscA>
    2d3e:	58 f0       	brcs	.+22     	; 0x2d56 <__addsf3x+0xc0>
    2d40:	80 e8       	ldi	r24, 0x80	; 128
    2d42:	91 e0       	ldi	r25, 0x01	; 1
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <__addsf3x+0xb2>
    2d46:	9e ef       	ldi	r25, 0xFE	; 254
    2d48:	91 d1       	rcall	.+802    	; 0x306c <__fp_pscB>
    2d4a:	28 f0       	brcs	.+10     	; 0x2d56 <__addsf3x+0xc0>
    2d4c:	40 e8       	ldi	r20, 0x80	; 128
    2d4e:	51 e0       	ldi	r21, 0x01	; 1
    2d50:	59 f4       	brne	.+22     	; 0x2d68 <atan2+0xe>
    2d52:	5e ef       	ldi	r21, 0xFE	; 254
    2d54:	09 c0       	rjmp	.+18     	; 0x2d68 <atan2+0xe>
    2d56:	5b c1       	rjmp	.+694    	; 0x300e <__fp_nan>
    2d58:	fc c1       	rjmp	.+1016   	; 0x3152 <__fp_zero>

00002d5a <atan2>:
    2d5a:	e9 2f       	mov	r30, r25
    2d5c:	e0 78       	andi	r30, 0x80	; 128
    2d5e:	d7 d1       	rcall	.+942    	; 0x310e <__fp_split3>
    2d60:	68 f3       	brcs	.-38     	; 0x2d3c <__addsf3x+0xa6>
    2d62:	09 2e       	mov	r0, r25
    2d64:	05 2a       	or	r0, r21
    2d66:	c1 f3       	breq	.-16     	; 0x2d58 <__addsf3x+0xc2>
    2d68:	26 17       	cp	r18, r22
    2d6a:	37 07       	cpc	r19, r23
    2d6c:	48 07       	cpc	r20, r24
    2d6e:	59 07       	cpc	r21, r25
    2d70:	38 f0       	brcs	.+14     	; 0x2d80 <atan2+0x26>
    2d72:	0e 2e       	mov	r0, r30
    2d74:	07 f8       	bld	r0, 7
    2d76:	e0 25       	eor	r30, r0
    2d78:	69 f0       	breq	.+26     	; 0x2d94 <atan2+0x3a>
    2d7a:	e0 25       	eor	r30, r0
    2d7c:	e0 64       	ori	r30, 0x40	; 64
    2d7e:	0a c0       	rjmp	.+20     	; 0x2d94 <atan2+0x3a>
    2d80:	ef 63       	ori	r30, 0x3F	; 63
    2d82:	07 f8       	bld	r0, 7
    2d84:	00 94       	com	r0
    2d86:	07 fa       	bst	r0, 7
    2d88:	db 01       	movw	r26, r22
    2d8a:	b9 01       	movw	r22, r18
    2d8c:	9d 01       	movw	r18, r26
    2d8e:	dc 01       	movw	r26, r24
    2d90:	ca 01       	movw	r24, r20
    2d92:	ad 01       	movw	r20, r26
    2d94:	ef 93       	push	r30
    2d96:	4a d0       	rcall	.+148    	; 0x2e2c <__divsf3_pse>
    2d98:	98 d1       	rcall	.+816    	; 0x30ca <__fp_round>
    2d9a:	0a d0       	rcall	.+20     	; 0x2db0 <atan>
    2d9c:	5f 91       	pop	r21
    2d9e:	55 23       	and	r21, r21
    2da0:	31 f0       	breq	.+12     	; 0x2dae <atan2+0x54>
    2da2:	2b ed       	ldi	r18, 0xDB	; 219
    2da4:	3f e0       	ldi	r19, 0x0F	; 15
    2da6:	49 e4       	ldi	r20, 0x49	; 73
    2da8:	50 fd       	sbrc	r21, 0
    2daa:	49 ec       	ldi	r20, 0xC9	; 201
    2dac:	63 cf       	rjmp	.-314    	; 0x2c74 <__addsf3>
    2dae:	08 95       	ret

00002db0 <atan>:
    2db0:	df 93       	push	r29
    2db2:	dd 27       	eor	r29, r29
    2db4:	b9 2f       	mov	r27, r25
    2db6:	bf 77       	andi	r27, 0x7F	; 127
    2db8:	40 e8       	ldi	r20, 0x80	; 128
    2dba:	5f e3       	ldi	r21, 0x3F	; 63
    2dbc:	16 16       	cp	r1, r22
    2dbe:	17 06       	cpc	r1, r23
    2dc0:	48 07       	cpc	r20, r24
    2dc2:	5b 07       	cpc	r21, r27
    2dc4:	10 f4       	brcc	.+4      	; 0x2dca <atan+0x1a>
    2dc6:	d9 2f       	mov	r29, r25
    2dc8:	cf d1       	rcall	.+926    	; 0x3168 <inverse>
    2dca:	9f 93       	push	r25
    2dcc:	8f 93       	push	r24
    2dce:	7f 93       	push	r23
    2dd0:	6f 93       	push	r22
    2dd2:	7c d2       	rcall	.+1272   	; 0x32cc <square>
    2dd4:	ec ea       	ldi	r30, 0xAC	; 172
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	1d d1       	rcall	.+570    	; 0x3014 <__fp_powser>
    2dda:	77 d1       	rcall	.+750    	; 0x30ca <__fp_round>
    2ddc:	2f 91       	pop	r18
    2dde:	3f 91       	pop	r19
    2de0:	4f 91       	pop	r20
    2de2:	5f 91       	pop	r21
    2de4:	d4 d1       	rcall	.+936    	; 0x318e <__mulsf3x>
    2de6:	dd 23       	and	r29, r29
    2de8:	49 f0       	breq	.+18     	; 0x2dfc <atan+0x4c>
    2dea:	90 58       	subi	r25, 0x80	; 128
    2dec:	a2 ea       	ldi	r26, 0xA2	; 162
    2dee:	2a ed       	ldi	r18, 0xDA	; 218
    2df0:	3f e0       	ldi	r19, 0x0F	; 15
    2df2:	49 ec       	ldi	r20, 0xC9	; 201
    2df4:	5f e3       	ldi	r21, 0x3F	; 63
    2df6:	d0 78       	andi	r29, 0x80	; 128
    2df8:	5d 27       	eor	r21, r29
    2dfa:	4d df       	rcall	.-358    	; 0x2c96 <__addsf3x>
    2dfc:	df 91       	pop	r29
    2dfe:	65 c1       	rjmp	.+714    	; 0x30ca <__fp_round>

00002e00 <__cmpsf2>:
    2e00:	dc d0       	rcall	.+440    	; 0x2fba <__fp_cmp>
    2e02:	08 f4       	brcc	.+2      	; 0x2e06 <__cmpsf2+0x6>
    2e04:	81 e0       	ldi	r24, 0x01	; 1
    2e06:	08 95       	ret

00002e08 <cos>:
    2e08:	39 d1       	rcall	.+626    	; 0x307c <__fp_rempio2>
    2e0a:	e3 95       	inc	r30
    2e0c:	6f c1       	rjmp	.+734    	; 0x30ec <__fp_sinus>

00002e0e <__divsf3>:
    2e0e:	0c d0       	rcall	.+24     	; 0x2e28 <__divsf3x>
    2e10:	5c c1       	rjmp	.+696    	; 0x30ca <__fp_round>
    2e12:	2c d1       	rcall	.+600    	; 0x306c <__fp_pscB>
    2e14:	40 f0       	brcs	.+16     	; 0x2e26 <__divsf3+0x18>
    2e16:	23 d1       	rcall	.+582    	; 0x305e <__fp_pscA>
    2e18:	30 f0       	brcs	.+12     	; 0x2e26 <__divsf3+0x18>
    2e1a:	21 f4       	brne	.+8      	; 0x2e24 <__divsf3+0x16>
    2e1c:	5f 3f       	cpi	r21, 0xFF	; 255
    2e1e:	19 f0       	breq	.+6      	; 0x2e26 <__divsf3+0x18>
    2e20:	f0 c0       	rjmp	.+480    	; 0x3002 <__fp_inf>
    2e22:	51 11       	cpse	r21, r1
    2e24:	97 c1       	rjmp	.+814    	; 0x3154 <__fp_szero>
    2e26:	f3 c0       	rjmp	.+486    	; 0x300e <__fp_nan>

00002e28 <__divsf3x>:
    2e28:	72 d1       	rcall	.+740    	; 0x310e <__fp_split3>
    2e2a:	98 f3       	brcs	.-26     	; 0x2e12 <__divsf3+0x4>

00002e2c <__divsf3_pse>:
    2e2c:	99 23       	and	r25, r25
    2e2e:	c9 f3       	breq	.-14     	; 0x2e22 <__divsf3+0x14>
    2e30:	55 23       	and	r21, r21
    2e32:	b1 f3       	breq	.-20     	; 0x2e20 <__divsf3+0x12>
    2e34:	95 1b       	sub	r25, r21
    2e36:	55 0b       	sbc	r21, r21
    2e38:	bb 27       	eor	r27, r27
    2e3a:	aa 27       	eor	r26, r26
    2e3c:	62 17       	cp	r22, r18
    2e3e:	73 07       	cpc	r23, r19
    2e40:	84 07       	cpc	r24, r20
    2e42:	38 f0       	brcs	.+14     	; 0x2e52 <__divsf3_pse+0x26>
    2e44:	9f 5f       	subi	r25, 0xFF	; 255
    2e46:	5f 4f       	sbci	r21, 0xFF	; 255
    2e48:	22 0f       	add	r18, r18
    2e4a:	33 1f       	adc	r19, r19
    2e4c:	44 1f       	adc	r20, r20
    2e4e:	aa 1f       	adc	r26, r26
    2e50:	a9 f3       	breq	.-22     	; 0x2e3c <__divsf3_pse+0x10>
    2e52:	33 d0       	rcall	.+102    	; 0x2eba <__divsf3_pse+0x8e>
    2e54:	0e 2e       	mov	r0, r30
    2e56:	3a f0       	brmi	.+14     	; 0x2e66 <__divsf3_pse+0x3a>
    2e58:	e0 e8       	ldi	r30, 0x80	; 128
    2e5a:	30 d0       	rcall	.+96     	; 0x2ebc <__divsf3_pse+0x90>
    2e5c:	91 50       	subi	r25, 0x01	; 1
    2e5e:	50 40       	sbci	r21, 0x00	; 0
    2e60:	e6 95       	lsr	r30
    2e62:	00 1c       	adc	r0, r0
    2e64:	ca f7       	brpl	.-14     	; 0x2e58 <__divsf3_pse+0x2c>
    2e66:	29 d0       	rcall	.+82     	; 0x2eba <__divsf3_pse+0x8e>
    2e68:	fe 2f       	mov	r31, r30
    2e6a:	27 d0       	rcall	.+78     	; 0x2eba <__divsf3_pse+0x8e>
    2e6c:	66 0f       	add	r22, r22
    2e6e:	77 1f       	adc	r23, r23
    2e70:	88 1f       	adc	r24, r24
    2e72:	bb 1f       	adc	r27, r27
    2e74:	26 17       	cp	r18, r22
    2e76:	37 07       	cpc	r19, r23
    2e78:	48 07       	cpc	r20, r24
    2e7a:	ab 07       	cpc	r26, r27
    2e7c:	b0 e8       	ldi	r27, 0x80	; 128
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <__divsf3_pse+0x56>
    2e80:	bb 0b       	sbc	r27, r27
    2e82:	80 2d       	mov	r24, r0
    2e84:	bf 01       	movw	r22, r30
    2e86:	ff 27       	eor	r31, r31
    2e88:	93 58       	subi	r25, 0x83	; 131
    2e8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e8c:	2a f0       	brmi	.+10     	; 0x2e98 <__divsf3_pse+0x6c>
    2e8e:	9e 3f       	cpi	r25, 0xFE	; 254
    2e90:	51 05       	cpc	r21, r1
    2e92:	68 f0       	brcs	.+26     	; 0x2eae <__divsf3_pse+0x82>
    2e94:	b6 c0       	rjmp	.+364    	; 0x3002 <__fp_inf>
    2e96:	5e c1       	rjmp	.+700    	; 0x3154 <__fp_szero>
    2e98:	5f 3f       	cpi	r21, 0xFF	; 255
    2e9a:	ec f3       	brlt	.-6      	; 0x2e96 <__divsf3_pse+0x6a>
    2e9c:	98 3e       	cpi	r25, 0xE8	; 232
    2e9e:	dc f3       	brlt	.-10     	; 0x2e96 <__divsf3_pse+0x6a>
    2ea0:	86 95       	lsr	r24
    2ea2:	77 95       	ror	r23
    2ea4:	67 95       	ror	r22
    2ea6:	b7 95       	ror	r27
    2ea8:	f7 95       	ror	r31
    2eaa:	9f 5f       	subi	r25, 0xFF	; 255
    2eac:	c9 f7       	brne	.-14     	; 0x2ea0 <__divsf3_pse+0x74>
    2eae:	88 0f       	add	r24, r24
    2eb0:	91 1d       	adc	r25, r1
    2eb2:	96 95       	lsr	r25
    2eb4:	87 95       	ror	r24
    2eb6:	97 f9       	bld	r25, 7
    2eb8:	08 95       	ret
    2eba:	e1 e0       	ldi	r30, 0x01	; 1
    2ebc:	66 0f       	add	r22, r22
    2ebe:	77 1f       	adc	r23, r23
    2ec0:	88 1f       	adc	r24, r24
    2ec2:	bb 1f       	adc	r27, r27
    2ec4:	62 17       	cp	r22, r18
    2ec6:	73 07       	cpc	r23, r19
    2ec8:	84 07       	cpc	r24, r20
    2eca:	ba 07       	cpc	r27, r26
    2ecc:	20 f0       	brcs	.+8      	; 0x2ed6 <__divsf3_pse+0xaa>
    2ece:	62 1b       	sub	r22, r18
    2ed0:	73 0b       	sbc	r23, r19
    2ed2:	84 0b       	sbc	r24, r20
    2ed4:	ba 0b       	sbc	r27, r26
    2ed6:	ee 1f       	adc	r30, r30
    2ed8:	88 f7       	brcc	.-30     	; 0x2ebc <__divsf3_pse+0x90>
    2eda:	e0 95       	com	r30
    2edc:	08 95       	ret

00002ede <__fixsfsi>:
    2ede:	04 d0       	rcall	.+8      	; 0x2ee8 <__fixunssfsi>
    2ee0:	68 94       	set
    2ee2:	b1 11       	cpse	r27, r1
    2ee4:	37 c1       	rjmp	.+622    	; 0x3154 <__fp_szero>
    2ee6:	08 95       	ret

00002ee8 <__fixunssfsi>:
    2ee8:	1a d1       	rcall	.+564    	; 0x311e <__fp_splitA>
    2eea:	88 f0       	brcs	.+34     	; 0x2f0e <__fixunssfsi+0x26>
    2eec:	9f 57       	subi	r25, 0x7F	; 127
    2eee:	90 f0       	brcs	.+36     	; 0x2f14 <__fixunssfsi+0x2c>
    2ef0:	b9 2f       	mov	r27, r25
    2ef2:	99 27       	eor	r25, r25
    2ef4:	b7 51       	subi	r27, 0x17	; 23
    2ef6:	a0 f0       	brcs	.+40     	; 0x2f20 <__fixunssfsi+0x38>
    2ef8:	d1 f0       	breq	.+52     	; 0x2f2e <__fixunssfsi+0x46>
    2efa:	66 0f       	add	r22, r22
    2efc:	77 1f       	adc	r23, r23
    2efe:	88 1f       	adc	r24, r24
    2f00:	99 1f       	adc	r25, r25
    2f02:	1a f0       	brmi	.+6      	; 0x2f0a <__fixunssfsi+0x22>
    2f04:	ba 95       	dec	r27
    2f06:	c9 f7       	brne	.-14     	; 0x2efa <__fixunssfsi+0x12>
    2f08:	12 c0       	rjmp	.+36     	; 0x2f2e <__fixunssfsi+0x46>
    2f0a:	b1 30       	cpi	r27, 0x01	; 1
    2f0c:	81 f0       	breq	.+32     	; 0x2f2e <__fixunssfsi+0x46>
    2f0e:	21 d1       	rcall	.+578    	; 0x3152 <__fp_zero>
    2f10:	b1 e0       	ldi	r27, 0x01	; 1
    2f12:	08 95       	ret
    2f14:	1e c1       	rjmp	.+572    	; 0x3152 <__fp_zero>
    2f16:	67 2f       	mov	r22, r23
    2f18:	78 2f       	mov	r23, r24
    2f1a:	88 27       	eor	r24, r24
    2f1c:	b8 5f       	subi	r27, 0xF8	; 248
    2f1e:	39 f0       	breq	.+14     	; 0x2f2e <__fixunssfsi+0x46>
    2f20:	b9 3f       	cpi	r27, 0xF9	; 249
    2f22:	cc f3       	brlt	.-14     	; 0x2f16 <__fixunssfsi+0x2e>
    2f24:	86 95       	lsr	r24
    2f26:	77 95       	ror	r23
    2f28:	67 95       	ror	r22
    2f2a:	b3 95       	inc	r27
    2f2c:	d9 f7       	brne	.-10     	; 0x2f24 <__fixunssfsi+0x3c>
    2f2e:	3e f4       	brtc	.+14     	; 0x2f3e <__fixunssfsi+0x56>
    2f30:	90 95       	com	r25
    2f32:	80 95       	com	r24
    2f34:	70 95       	com	r23
    2f36:	61 95       	neg	r22
    2f38:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f3e:	08 95       	ret

00002f40 <__floatunsisf>:
    2f40:	e8 94       	clt
    2f42:	09 c0       	rjmp	.+18     	; 0x2f56 <__floatsisf+0x12>

00002f44 <__floatsisf>:
    2f44:	97 fb       	bst	r25, 7
    2f46:	3e f4       	brtc	.+14     	; 0x2f56 <__floatsisf+0x12>
    2f48:	90 95       	com	r25
    2f4a:	80 95       	com	r24
    2f4c:	70 95       	com	r23
    2f4e:	61 95       	neg	r22
    2f50:	7f 4f       	sbci	r23, 0xFF	; 255
    2f52:	8f 4f       	sbci	r24, 0xFF	; 255
    2f54:	9f 4f       	sbci	r25, 0xFF	; 255
    2f56:	99 23       	and	r25, r25
    2f58:	a9 f0       	breq	.+42     	; 0x2f84 <__floatsisf+0x40>
    2f5a:	f9 2f       	mov	r31, r25
    2f5c:	96 e9       	ldi	r25, 0x96	; 150
    2f5e:	bb 27       	eor	r27, r27
    2f60:	93 95       	inc	r25
    2f62:	f6 95       	lsr	r31
    2f64:	87 95       	ror	r24
    2f66:	77 95       	ror	r23
    2f68:	67 95       	ror	r22
    2f6a:	b7 95       	ror	r27
    2f6c:	f1 11       	cpse	r31, r1
    2f6e:	f8 cf       	rjmp	.-16     	; 0x2f60 <__floatsisf+0x1c>
    2f70:	fa f4       	brpl	.+62     	; 0x2fb0 <__floatsisf+0x6c>
    2f72:	bb 0f       	add	r27, r27
    2f74:	11 f4       	brne	.+4      	; 0x2f7a <__floatsisf+0x36>
    2f76:	60 ff       	sbrs	r22, 0
    2f78:	1b c0       	rjmp	.+54     	; 0x2fb0 <__floatsisf+0x6c>
    2f7a:	6f 5f       	subi	r22, 0xFF	; 255
    2f7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f7e:	8f 4f       	sbci	r24, 0xFF	; 255
    2f80:	9f 4f       	sbci	r25, 0xFF	; 255
    2f82:	16 c0       	rjmp	.+44     	; 0x2fb0 <__floatsisf+0x6c>
    2f84:	88 23       	and	r24, r24
    2f86:	11 f0       	breq	.+4      	; 0x2f8c <__floatsisf+0x48>
    2f88:	96 e9       	ldi	r25, 0x96	; 150
    2f8a:	11 c0       	rjmp	.+34     	; 0x2fae <__floatsisf+0x6a>
    2f8c:	77 23       	and	r23, r23
    2f8e:	21 f0       	breq	.+8      	; 0x2f98 <__floatsisf+0x54>
    2f90:	9e e8       	ldi	r25, 0x8E	; 142
    2f92:	87 2f       	mov	r24, r23
    2f94:	76 2f       	mov	r23, r22
    2f96:	05 c0       	rjmp	.+10     	; 0x2fa2 <__floatsisf+0x5e>
    2f98:	66 23       	and	r22, r22
    2f9a:	71 f0       	breq	.+28     	; 0x2fb8 <__floatsisf+0x74>
    2f9c:	96 e8       	ldi	r25, 0x86	; 134
    2f9e:	86 2f       	mov	r24, r22
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	60 e0       	ldi	r22, 0x00	; 0
    2fa4:	2a f0       	brmi	.+10     	; 0x2fb0 <__floatsisf+0x6c>
    2fa6:	9a 95       	dec	r25
    2fa8:	66 0f       	add	r22, r22
    2faa:	77 1f       	adc	r23, r23
    2fac:	88 1f       	adc	r24, r24
    2fae:	da f7       	brpl	.-10     	; 0x2fa6 <__floatsisf+0x62>
    2fb0:	88 0f       	add	r24, r24
    2fb2:	96 95       	lsr	r25
    2fb4:	87 95       	ror	r24
    2fb6:	97 f9       	bld	r25, 7
    2fb8:	08 95       	ret

00002fba <__fp_cmp>:
    2fba:	99 0f       	add	r25, r25
    2fbc:	00 08       	sbc	r0, r0
    2fbe:	55 0f       	add	r21, r21
    2fc0:	aa 0b       	sbc	r26, r26
    2fc2:	e0 e8       	ldi	r30, 0x80	; 128
    2fc4:	fe ef       	ldi	r31, 0xFE	; 254
    2fc6:	16 16       	cp	r1, r22
    2fc8:	17 06       	cpc	r1, r23
    2fca:	e8 07       	cpc	r30, r24
    2fcc:	f9 07       	cpc	r31, r25
    2fce:	c0 f0       	brcs	.+48     	; 0x3000 <__fp_cmp+0x46>
    2fd0:	12 16       	cp	r1, r18
    2fd2:	13 06       	cpc	r1, r19
    2fd4:	e4 07       	cpc	r30, r20
    2fd6:	f5 07       	cpc	r31, r21
    2fd8:	98 f0       	brcs	.+38     	; 0x3000 <__fp_cmp+0x46>
    2fda:	62 1b       	sub	r22, r18
    2fdc:	73 0b       	sbc	r23, r19
    2fde:	84 0b       	sbc	r24, r20
    2fe0:	95 0b       	sbc	r25, r21
    2fe2:	39 f4       	brne	.+14     	; 0x2ff2 <__fp_cmp+0x38>
    2fe4:	0a 26       	eor	r0, r26
    2fe6:	61 f0       	breq	.+24     	; 0x3000 <__fp_cmp+0x46>
    2fe8:	23 2b       	or	r18, r19
    2fea:	24 2b       	or	r18, r20
    2fec:	25 2b       	or	r18, r21
    2fee:	21 f4       	brne	.+8      	; 0x2ff8 <__fp_cmp+0x3e>
    2ff0:	08 95       	ret
    2ff2:	0a 26       	eor	r0, r26
    2ff4:	09 f4       	brne	.+2      	; 0x2ff8 <__fp_cmp+0x3e>
    2ff6:	a1 40       	sbci	r26, 0x01	; 1
    2ff8:	a6 95       	lsr	r26
    2ffa:	8f ef       	ldi	r24, 0xFF	; 255
    2ffc:	81 1d       	adc	r24, r1
    2ffe:	81 1d       	adc	r24, r1
    3000:	08 95       	ret

00003002 <__fp_inf>:
    3002:	97 f9       	bld	r25, 7
    3004:	9f 67       	ori	r25, 0x7F	; 127
    3006:	80 e8       	ldi	r24, 0x80	; 128
    3008:	70 e0       	ldi	r23, 0x00	; 0
    300a:	60 e0       	ldi	r22, 0x00	; 0
    300c:	08 95       	ret

0000300e <__fp_nan>:
    300e:	9f ef       	ldi	r25, 0xFF	; 255
    3010:	80 ec       	ldi	r24, 0xC0	; 192
    3012:	08 95       	ret

00003014 <__fp_powser>:
    3014:	df 93       	push	r29
    3016:	cf 93       	push	r28
    3018:	1f 93       	push	r17
    301a:	0f 93       	push	r16
    301c:	ff 92       	push	r15
    301e:	ef 92       	push	r14
    3020:	df 92       	push	r13
    3022:	7b 01       	movw	r14, r22
    3024:	8c 01       	movw	r16, r24
    3026:	68 94       	set
    3028:	05 c0       	rjmp	.+10     	; 0x3034 <__fp_powser+0x20>
    302a:	da 2e       	mov	r13, r26
    302c:	ef 01       	movw	r28, r30
    302e:	af d0       	rcall	.+350    	; 0x318e <__mulsf3x>
    3030:	fe 01       	movw	r30, r28
    3032:	e8 94       	clt
    3034:	a5 91       	lpm	r26, Z+
    3036:	25 91       	lpm	r18, Z+
    3038:	35 91       	lpm	r19, Z+
    303a:	45 91       	lpm	r20, Z+
    303c:	55 91       	lpm	r21, Z+
    303e:	ae f3       	brts	.-22     	; 0x302a <__fp_powser+0x16>
    3040:	ef 01       	movw	r28, r30
    3042:	29 de       	rcall	.-942    	; 0x2c96 <__addsf3x>
    3044:	fe 01       	movw	r30, r28
    3046:	97 01       	movw	r18, r14
    3048:	a8 01       	movw	r20, r16
    304a:	da 94       	dec	r13
    304c:	79 f7       	brne	.-34     	; 0x302c <__fp_powser+0x18>
    304e:	df 90       	pop	r13
    3050:	ef 90       	pop	r14
    3052:	ff 90       	pop	r15
    3054:	0f 91       	pop	r16
    3056:	1f 91       	pop	r17
    3058:	cf 91       	pop	r28
    305a:	df 91       	pop	r29
    305c:	08 95       	ret

0000305e <__fp_pscA>:
    305e:	00 24       	eor	r0, r0
    3060:	0a 94       	dec	r0
    3062:	16 16       	cp	r1, r22
    3064:	17 06       	cpc	r1, r23
    3066:	18 06       	cpc	r1, r24
    3068:	09 06       	cpc	r0, r25
    306a:	08 95       	ret

0000306c <__fp_pscB>:
    306c:	00 24       	eor	r0, r0
    306e:	0a 94       	dec	r0
    3070:	12 16       	cp	r1, r18
    3072:	13 06       	cpc	r1, r19
    3074:	14 06       	cpc	r1, r20
    3076:	05 06       	cpc	r0, r21
    3078:	08 95       	ret
    307a:	c9 cf       	rjmp	.-110    	; 0x300e <__fp_nan>

0000307c <__fp_rempio2>:
    307c:	50 d0       	rcall	.+160    	; 0x311e <__fp_splitA>
    307e:	e8 f3       	brcs	.-6      	; 0x307a <__fp_pscB+0xe>
    3080:	e8 94       	clt
    3082:	e0 e0       	ldi	r30, 0x00	; 0
    3084:	bb 27       	eor	r27, r27
    3086:	9f 57       	subi	r25, 0x7F	; 127
    3088:	f0 f0       	brcs	.+60     	; 0x30c6 <__fp_rempio2+0x4a>
    308a:	2a ed       	ldi	r18, 0xDA	; 218
    308c:	3f e0       	ldi	r19, 0x0F	; 15
    308e:	49 ec       	ldi	r20, 0xC9	; 201
    3090:	06 c0       	rjmp	.+12     	; 0x309e <__fp_rempio2+0x22>
    3092:	ee 0f       	add	r30, r30
    3094:	bb 0f       	add	r27, r27
    3096:	66 1f       	adc	r22, r22
    3098:	77 1f       	adc	r23, r23
    309a:	88 1f       	adc	r24, r24
    309c:	28 f0       	brcs	.+10     	; 0x30a8 <__fp_rempio2+0x2c>
    309e:	b2 3a       	cpi	r27, 0xA2	; 162
    30a0:	62 07       	cpc	r22, r18
    30a2:	73 07       	cpc	r23, r19
    30a4:	84 07       	cpc	r24, r20
    30a6:	28 f0       	brcs	.+10     	; 0x30b2 <__fp_rempio2+0x36>
    30a8:	b2 5a       	subi	r27, 0xA2	; 162
    30aa:	62 0b       	sbc	r22, r18
    30ac:	73 0b       	sbc	r23, r19
    30ae:	84 0b       	sbc	r24, r20
    30b0:	e3 95       	inc	r30
    30b2:	9a 95       	dec	r25
    30b4:	72 f7       	brpl	.-36     	; 0x3092 <__fp_rempio2+0x16>
    30b6:	80 38       	cpi	r24, 0x80	; 128
    30b8:	30 f4       	brcc	.+12     	; 0x30c6 <__fp_rempio2+0x4a>
    30ba:	9a 95       	dec	r25
    30bc:	bb 0f       	add	r27, r27
    30be:	66 1f       	adc	r22, r22
    30c0:	77 1f       	adc	r23, r23
    30c2:	88 1f       	adc	r24, r24
    30c4:	d2 f7       	brpl	.-12     	; 0x30ba <__fp_rempio2+0x3e>
    30c6:	90 48       	sbci	r25, 0x80	; 128
    30c8:	06 c1       	rjmp	.+524    	; 0x32d6 <__fp_mpack_finite>

000030ca <__fp_round>:
    30ca:	09 2e       	mov	r0, r25
    30cc:	03 94       	inc	r0
    30ce:	00 0c       	add	r0, r0
    30d0:	11 f4       	brne	.+4      	; 0x30d6 <__fp_round+0xc>
    30d2:	88 23       	and	r24, r24
    30d4:	52 f0       	brmi	.+20     	; 0x30ea <__fp_round+0x20>
    30d6:	bb 0f       	add	r27, r27
    30d8:	40 f4       	brcc	.+16     	; 0x30ea <__fp_round+0x20>
    30da:	bf 2b       	or	r27, r31
    30dc:	11 f4       	brne	.+4      	; 0x30e2 <__fp_round+0x18>
    30de:	60 ff       	sbrs	r22, 0
    30e0:	04 c0       	rjmp	.+8      	; 0x30ea <__fp_round+0x20>
    30e2:	6f 5f       	subi	r22, 0xFF	; 255
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	8f 4f       	sbci	r24, 0xFF	; 255
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	08 95       	ret

000030ec <__fp_sinus>:
    30ec:	ef 93       	push	r30
    30ee:	e0 ff       	sbrs	r30, 0
    30f0:	06 c0       	rjmp	.+12     	; 0x30fe <__fp_sinus+0x12>
    30f2:	a2 ea       	ldi	r26, 0xA2	; 162
    30f4:	2a ed       	ldi	r18, 0xDA	; 218
    30f6:	3f e0       	ldi	r19, 0x0F	; 15
    30f8:	49 ec       	ldi	r20, 0xC9	; 201
    30fa:	5f eb       	ldi	r21, 0xBF	; 191
    30fc:	cc dd       	rcall	.-1128   	; 0x2c96 <__addsf3x>
    30fe:	e5 df       	rcall	.-54     	; 0x30ca <__fp_round>
    3100:	0f 90       	pop	r0
    3102:	03 94       	inc	r0
    3104:	01 fc       	sbrc	r0, 1
    3106:	90 58       	subi	r25, 0x80	; 128
    3108:	e9 ed       	ldi	r30, 0xD9	; 217
    310a:	f0 e0       	ldi	r31, 0x00	; 0
    310c:	f7 c0       	rjmp	.+494    	; 0x32fc <__fp_powsodd>

0000310e <__fp_split3>:
    310e:	57 fd       	sbrc	r21, 7
    3110:	90 58       	subi	r25, 0x80	; 128
    3112:	44 0f       	add	r20, r20
    3114:	55 1f       	adc	r21, r21
    3116:	59 f0       	breq	.+22     	; 0x312e <__fp_splitA+0x10>
    3118:	5f 3f       	cpi	r21, 0xFF	; 255
    311a:	71 f0       	breq	.+28     	; 0x3138 <__fp_splitA+0x1a>
    311c:	47 95       	ror	r20

0000311e <__fp_splitA>:
    311e:	88 0f       	add	r24, r24
    3120:	97 fb       	bst	r25, 7
    3122:	99 1f       	adc	r25, r25
    3124:	61 f0       	breq	.+24     	; 0x313e <__fp_splitA+0x20>
    3126:	9f 3f       	cpi	r25, 0xFF	; 255
    3128:	79 f0       	breq	.+30     	; 0x3148 <__fp_splitA+0x2a>
    312a:	87 95       	ror	r24
    312c:	08 95       	ret
    312e:	12 16       	cp	r1, r18
    3130:	13 06       	cpc	r1, r19
    3132:	14 06       	cpc	r1, r20
    3134:	55 1f       	adc	r21, r21
    3136:	f2 cf       	rjmp	.-28     	; 0x311c <__fp_split3+0xe>
    3138:	46 95       	lsr	r20
    313a:	f1 df       	rcall	.-30     	; 0x311e <__fp_splitA>
    313c:	08 c0       	rjmp	.+16     	; 0x314e <__fp_splitA+0x30>
    313e:	16 16       	cp	r1, r22
    3140:	17 06       	cpc	r1, r23
    3142:	18 06       	cpc	r1, r24
    3144:	99 1f       	adc	r25, r25
    3146:	f1 cf       	rjmp	.-30     	; 0x312a <__fp_splitA+0xc>
    3148:	86 95       	lsr	r24
    314a:	71 05       	cpc	r23, r1
    314c:	61 05       	cpc	r22, r1
    314e:	08 94       	sec
    3150:	08 95       	ret

00003152 <__fp_zero>:
    3152:	e8 94       	clt

00003154 <__fp_szero>:
    3154:	bb 27       	eor	r27, r27
    3156:	66 27       	eor	r22, r22
    3158:	77 27       	eor	r23, r23
    315a:	cb 01       	movw	r24, r22
    315c:	97 f9       	bld	r25, 7
    315e:	08 95       	ret

00003160 <__gesf2>:
    3160:	2c df       	rcall	.-424    	; 0x2fba <__fp_cmp>
    3162:	08 f4       	brcc	.+2      	; 0x3166 <__gesf2+0x6>
    3164:	8f ef       	ldi	r24, 0xFF	; 255
    3166:	08 95       	ret

00003168 <inverse>:
    3168:	9b 01       	movw	r18, r22
    316a:	ac 01       	movw	r20, r24
    316c:	60 e0       	ldi	r22, 0x00	; 0
    316e:	70 e0       	ldi	r23, 0x00	; 0
    3170:	80 e8       	ldi	r24, 0x80	; 128
    3172:	9f e3       	ldi	r25, 0x3F	; 63
    3174:	4c ce       	rjmp	.-872    	; 0x2e0e <__divsf3>

00003176 <__mulsf3>:
    3176:	0b d0       	rcall	.+22     	; 0x318e <__mulsf3x>
    3178:	a8 cf       	rjmp	.-176    	; 0x30ca <__fp_round>
    317a:	71 df       	rcall	.-286    	; 0x305e <__fp_pscA>
    317c:	28 f0       	brcs	.+10     	; 0x3188 <__mulsf3+0x12>
    317e:	76 df       	rcall	.-276    	; 0x306c <__fp_pscB>
    3180:	18 f0       	brcs	.+6      	; 0x3188 <__mulsf3+0x12>
    3182:	95 23       	and	r25, r21
    3184:	09 f0       	breq	.+2      	; 0x3188 <__mulsf3+0x12>
    3186:	3d cf       	rjmp	.-390    	; 0x3002 <__fp_inf>
    3188:	42 cf       	rjmp	.-380    	; 0x300e <__fp_nan>
    318a:	11 24       	eor	r1, r1
    318c:	e3 cf       	rjmp	.-58     	; 0x3154 <__fp_szero>

0000318e <__mulsf3x>:
    318e:	bf df       	rcall	.-130    	; 0x310e <__fp_split3>
    3190:	a0 f3       	brcs	.-24     	; 0x317a <__mulsf3+0x4>

00003192 <__mulsf3_pse>:
    3192:	95 9f       	mul	r25, r21
    3194:	d1 f3       	breq	.-12     	; 0x318a <__mulsf3+0x14>
    3196:	95 0f       	add	r25, r21
    3198:	50 e0       	ldi	r21, 0x00	; 0
    319a:	55 1f       	adc	r21, r21
    319c:	62 9f       	mul	r22, r18
    319e:	f0 01       	movw	r30, r0
    31a0:	72 9f       	mul	r23, r18
    31a2:	bb 27       	eor	r27, r27
    31a4:	f0 0d       	add	r31, r0
    31a6:	b1 1d       	adc	r27, r1
    31a8:	63 9f       	mul	r22, r19
    31aa:	aa 27       	eor	r26, r26
    31ac:	f0 0d       	add	r31, r0
    31ae:	b1 1d       	adc	r27, r1
    31b0:	aa 1f       	adc	r26, r26
    31b2:	64 9f       	mul	r22, r20
    31b4:	66 27       	eor	r22, r22
    31b6:	b0 0d       	add	r27, r0
    31b8:	a1 1d       	adc	r26, r1
    31ba:	66 1f       	adc	r22, r22
    31bc:	82 9f       	mul	r24, r18
    31be:	22 27       	eor	r18, r18
    31c0:	b0 0d       	add	r27, r0
    31c2:	a1 1d       	adc	r26, r1
    31c4:	62 1f       	adc	r22, r18
    31c6:	73 9f       	mul	r23, r19
    31c8:	b0 0d       	add	r27, r0
    31ca:	a1 1d       	adc	r26, r1
    31cc:	62 1f       	adc	r22, r18
    31ce:	83 9f       	mul	r24, r19
    31d0:	a0 0d       	add	r26, r0
    31d2:	61 1d       	adc	r22, r1
    31d4:	22 1f       	adc	r18, r18
    31d6:	74 9f       	mul	r23, r20
    31d8:	33 27       	eor	r19, r19
    31da:	a0 0d       	add	r26, r0
    31dc:	61 1d       	adc	r22, r1
    31de:	23 1f       	adc	r18, r19
    31e0:	84 9f       	mul	r24, r20
    31e2:	60 0d       	add	r22, r0
    31e4:	21 1d       	adc	r18, r1
    31e6:	82 2f       	mov	r24, r18
    31e8:	76 2f       	mov	r23, r22
    31ea:	6a 2f       	mov	r22, r26
    31ec:	11 24       	eor	r1, r1
    31ee:	9f 57       	subi	r25, 0x7F	; 127
    31f0:	50 40       	sbci	r21, 0x00	; 0
    31f2:	8a f0       	brmi	.+34     	; 0x3216 <__mulsf3_pse+0x84>
    31f4:	e1 f0       	breq	.+56     	; 0x322e <__mulsf3_pse+0x9c>
    31f6:	88 23       	and	r24, r24
    31f8:	4a f0       	brmi	.+18     	; 0x320c <__mulsf3_pse+0x7a>
    31fa:	ee 0f       	add	r30, r30
    31fc:	ff 1f       	adc	r31, r31
    31fe:	bb 1f       	adc	r27, r27
    3200:	66 1f       	adc	r22, r22
    3202:	77 1f       	adc	r23, r23
    3204:	88 1f       	adc	r24, r24
    3206:	91 50       	subi	r25, 0x01	; 1
    3208:	50 40       	sbci	r21, 0x00	; 0
    320a:	a9 f7       	brne	.-22     	; 0x31f6 <__mulsf3_pse+0x64>
    320c:	9e 3f       	cpi	r25, 0xFE	; 254
    320e:	51 05       	cpc	r21, r1
    3210:	70 f0       	brcs	.+28     	; 0x322e <__mulsf3_pse+0x9c>
    3212:	f7 ce       	rjmp	.-530    	; 0x3002 <__fp_inf>
    3214:	9f cf       	rjmp	.-194    	; 0x3154 <__fp_szero>
    3216:	5f 3f       	cpi	r21, 0xFF	; 255
    3218:	ec f3       	brlt	.-6      	; 0x3214 <__mulsf3_pse+0x82>
    321a:	98 3e       	cpi	r25, 0xE8	; 232
    321c:	dc f3       	brlt	.-10     	; 0x3214 <__mulsf3_pse+0x82>
    321e:	86 95       	lsr	r24
    3220:	77 95       	ror	r23
    3222:	67 95       	ror	r22
    3224:	b7 95       	ror	r27
    3226:	f7 95       	ror	r31
    3228:	e7 95       	ror	r30
    322a:	9f 5f       	subi	r25, 0xFF	; 255
    322c:	c1 f7       	brne	.-16     	; 0x321e <__mulsf3_pse+0x8c>
    322e:	fe 2b       	or	r31, r30
    3230:	88 0f       	add	r24, r24
    3232:	91 1d       	adc	r25, r1
    3234:	96 95       	lsr	r25
    3236:	87 95       	ror	r24
    3238:	97 f9       	bld	r25, 7
    323a:	08 95       	ret

0000323c <sin>:
    323c:	9f 93       	push	r25
    323e:	1e df       	rcall	.-452    	; 0x307c <__fp_rempio2>
    3240:	0f 90       	pop	r0
    3242:	07 fc       	sbrc	r0, 7
    3244:	ee 5f       	subi	r30, 0xFE	; 254
    3246:	52 cf       	rjmp	.-348    	; 0x30ec <__fp_sinus>
    3248:	11 f4       	brne	.+4      	; 0x324e <sin+0x12>
    324a:	0e f4       	brtc	.+2      	; 0x324e <sin+0x12>
    324c:	e0 ce       	rjmp	.-576    	; 0x300e <__fp_nan>
    324e:	41 c0       	rjmp	.+130    	; 0x32d2 <__fp_mpack>

00003250 <sqrt>:
    3250:	66 df       	rcall	.-308    	; 0x311e <__fp_splitA>
    3252:	d0 f3       	brcs	.-12     	; 0x3248 <sin+0xc>
    3254:	99 23       	and	r25, r25
    3256:	d9 f3       	breq	.-10     	; 0x324e <sin+0x12>
    3258:	ce f3       	brts	.-14     	; 0x324c <sin+0x10>
    325a:	9f 57       	subi	r25, 0x7F	; 127
    325c:	55 0b       	sbc	r21, r21
    325e:	87 ff       	sbrs	r24, 7
    3260:	46 d0       	rcall	.+140    	; 0x32ee <__fp_norm2>
    3262:	00 24       	eor	r0, r0
    3264:	a0 e6       	ldi	r26, 0x60	; 96
    3266:	40 ea       	ldi	r20, 0xA0	; 160
    3268:	90 01       	movw	r18, r0
    326a:	80 58       	subi	r24, 0x80	; 128
    326c:	56 95       	lsr	r21
    326e:	97 95       	ror	r25
    3270:	28 f4       	brcc	.+10     	; 0x327c <sqrt+0x2c>
    3272:	80 5c       	subi	r24, 0xC0	; 192
    3274:	66 0f       	add	r22, r22
    3276:	77 1f       	adc	r23, r23
    3278:	88 1f       	adc	r24, r24
    327a:	20 f0       	brcs	.+8      	; 0x3284 <sqrt+0x34>
    327c:	26 17       	cp	r18, r22
    327e:	37 07       	cpc	r19, r23
    3280:	48 07       	cpc	r20, r24
    3282:	30 f4       	brcc	.+12     	; 0x3290 <sqrt+0x40>
    3284:	62 1b       	sub	r22, r18
    3286:	73 0b       	sbc	r23, r19
    3288:	84 0b       	sbc	r24, r20
    328a:	20 29       	or	r18, r0
    328c:	31 29       	or	r19, r1
    328e:	4a 2b       	or	r20, r26
    3290:	a6 95       	lsr	r26
    3292:	17 94       	ror	r1
    3294:	07 94       	ror	r0
    3296:	20 25       	eor	r18, r0
    3298:	31 25       	eor	r19, r1
    329a:	4a 27       	eor	r20, r26
    329c:	58 f7       	brcc	.-42     	; 0x3274 <sqrt+0x24>
    329e:	66 0f       	add	r22, r22
    32a0:	77 1f       	adc	r23, r23
    32a2:	88 1f       	adc	r24, r24
    32a4:	20 f0       	brcs	.+8      	; 0x32ae <sqrt+0x5e>
    32a6:	26 17       	cp	r18, r22
    32a8:	37 07       	cpc	r19, r23
    32aa:	48 07       	cpc	r20, r24
    32ac:	30 f4       	brcc	.+12     	; 0x32ba <sqrt+0x6a>
    32ae:	62 0b       	sbc	r22, r18
    32b0:	73 0b       	sbc	r23, r19
    32b2:	84 0b       	sbc	r24, r20
    32b4:	20 0d       	add	r18, r0
    32b6:	31 1d       	adc	r19, r1
    32b8:	41 1d       	adc	r20, r1
    32ba:	a0 95       	com	r26
    32bc:	81 f7       	brne	.-32     	; 0x329e <sqrt+0x4e>
    32be:	b9 01       	movw	r22, r18
    32c0:	84 2f       	mov	r24, r20
    32c2:	91 58       	subi	r25, 0x81	; 129
    32c4:	88 0f       	add	r24, r24
    32c6:	96 95       	lsr	r25
    32c8:	87 95       	ror	r24
    32ca:	08 95       	ret

000032cc <square>:
    32cc:	9b 01       	movw	r18, r22
    32ce:	ac 01       	movw	r20, r24
    32d0:	52 cf       	rjmp	.-348    	; 0x3176 <__mulsf3>

000032d2 <__fp_mpack>:
    32d2:	9f 3f       	cpi	r25, 0xFF	; 255
    32d4:	31 f0       	breq	.+12     	; 0x32e2 <__fp_mpack_finite+0xc>

000032d6 <__fp_mpack_finite>:
    32d6:	91 50       	subi	r25, 0x01	; 1
    32d8:	20 f4       	brcc	.+8      	; 0x32e2 <__fp_mpack_finite+0xc>
    32da:	87 95       	ror	r24
    32dc:	77 95       	ror	r23
    32de:	67 95       	ror	r22
    32e0:	b7 95       	ror	r27
    32e2:	88 0f       	add	r24, r24
    32e4:	91 1d       	adc	r25, r1
    32e6:	96 95       	lsr	r25
    32e8:	87 95       	ror	r24
    32ea:	97 f9       	bld	r25, 7
    32ec:	08 95       	ret

000032ee <__fp_norm2>:
    32ee:	91 50       	subi	r25, 0x01	; 1
    32f0:	50 40       	sbci	r21, 0x00	; 0
    32f2:	66 0f       	add	r22, r22
    32f4:	77 1f       	adc	r23, r23
    32f6:	88 1f       	adc	r24, r24
    32f8:	d2 f7       	brpl	.-12     	; 0x32ee <__fp_norm2>
    32fa:	08 95       	ret

000032fc <__fp_powsodd>:
    32fc:	9f 93       	push	r25
    32fe:	8f 93       	push	r24
    3300:	7f 93       	push	r23
    3302:	6f 93       	push	r22
    3304:	ff 93       	push	r31
    3306:	ef 93       	push	r30
    3308:	9b 01       	movw	r18, r22
    330a:	ac 01       	movw	r20, r24
    330c:	34 df       	rcall	.-408    	; 0x3176 <__mulsf3>
    330e:	ef 91       	pop	r30
    3310:	ff 91       	pop	r31
    3312:	80 de       	rcall	.-768    	; 0x3014 <__fp_powser>
    3314:	2f 91       	pop	r18
    3316:	3f 91       	pop	r19
    3318:	4f 91       	pop	r20
    331a:	5f 91       	pop	r21
    331c:	2c cf       	rjmp	.-424    	; 0x3176 <__mulsf3>

0000331e <_exit>:
    331e:	f8 94       	cli

00003320 <__stop_program>:
    3320:	ff cf       	rjmp	.-2      	; 0x3320 <__stop_program>
