
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000034e6  0000357a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008f  0080010e  0080010e  00003588  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00003588  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007dd2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00007e01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000030c5  00000000  00000000  00008109  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ba6  00000000  00000000  0000b1ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001634  00000000  00000000  0000bd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  0000d3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bf8  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d7f  00000000  00000000  0000e880  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000310  00000000  00000000  000125ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 fe 08 	jmp	0x11fc	; 0x11fc <__vector_3>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 2c 0b 	jmp	0x1658	; 0x1658 <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 6a 0b 	jmp	0x16d4	; 0x16d4 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 ea 08 	jmp	0x11d4	; 0x11d4 <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e6 ee       	ldi	r30, 0xE6	; 230
     1be:	f4 e3       	ldi	r31, 0x34	; 52
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ae 30       	cpi	r26, 0x0E	; 14
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ae e0       	ldi	r26, 0x0E	; 14
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	ad 39       	cpi	r26, 0x9D	; 157
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 0d 03 	call	0x61a	; 0x61a <main>
     1e0:	0c 94 71 1a 	jmp	0x34e2	; 0x34e2 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <calculate_diff_theta>:


// --------------------------------------------------------------
// CALCULATE ERROR IN ORIENTATION and OPTIMAL TURNING
// --------------------------------------------------------------
void calculate_diff_theta(float theta_des, float* err_theta, int* dir_to_turn){
     1e8:	2f 92       	push	r2
     1ea:	3f 92       	push	r3
     1ec:	4f 92       	push	r4
     1ee:	5f 92       	push	r5
     1f0:	6f 92       	push	r6
     1f2:	7f 92       	push	r7
     1f4:	8f 92       	push	r8
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	6b 01       	movw	r12, r22
     20e:	7c 01       	movw	r14, r24
     210:	ea 01       	movw	r28, r20
     212:	89 01       	movw	r16, r18
    
    float angle_dir_aux = theta_des-180;
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	44 e3       	ldi	r20, 0x34	; 52
     21a:	53 e4       	ldi	r21, 0x43	; 67
     21c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     220:	96 2e       	mov	r9, r22
     222:	87 2e       	mov	r8, r23
     224:	38 2e       	mov	r3, r24
     226:	29 2e       	mov	r2, r25
    float add_360 = 0;
    if (angle_dir_aux < -180)
     228:	20 e0       	ldi	r18, 0x00	; 0
     22a:	30 e0       	ldi	r19, 0x00	; 0
     22c:	44 e3       	ldi	r20, 0x34	; 52
     22e:	53 ec       	ldi	r21, 0xC3	; 195
     230:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     234:	88 23       	and	r24, r24
     236:	0c f0       	brlt	.+2      	; 0x23a <calculate_diff_theta+0x52>
     238:	c8 c0       	rjmp	.+400    	; 0x3ca <calculate_diff_theta+0x1e2>
    {
        angle_dir_aux += 360;
     23a:	20 e0       	ldi	r18, 0x00	; 0
     23c:	30 e0       	ldi	r19, 0x00	; 0
     23e:	44 eb       	ldi	r20, 0xB4	; 180
     240:	53 e4       	ldi	r21, 0x43	; 67
     242:	69 2d       	mov	r22, r9
     244:	78 2d       	mov	r23, r8
     246:	83 2d       	mov	r24, r3
     248:	92 2d       	mov	r25, r2
     24a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
     24e:	26 2e       	mov	r2, r22
     250:	37 2e       	mov	r3, r23
     252:	88 2e       	mov	r8, r24
     254:	99 2e       	mov	r9, r25
            *err_theta = (theta_robot+360) - theta_des;
        else
            *err_theta = (theta_robot) - theta_des;
        *dir_to_turn = 1;
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
     256:	a0 90 1c 01 	lds	r10, 0x011C
     25a:	b0 90 1d 01 	lds	r11, 0x011D
     25e:	b5 01       	movw	r22, r10
     260:	88 27       	eor	r24, r24
     262:	77 fd       	sbrc	r23, 7
     264:	80 95       	com	r24
     266:	98 2f       	mov	r25, r24
     268:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     26c:	2b 01       	movw	r4, r22
     26e:	3c 01       	movw	r6, r24
     270:	9b 01       	movw	r18, r22
     272:	ac 01       	movw	r20, r24
     274:	c7 01       	movw	r24, r14
     276:	b6 01       	movw	r22, r12
     278:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
     27c:	88 23       	and	r24, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <calculate_diff_theta+0x9a>
     280:	4e c0       	rjmp	.+156    	; 0x31e <calculate_diff_theta+0x136>
     282:	52 c0       	rjmp	.+164    	; 0x328 <calculate_diff_theta+0x140>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
     284:	a3 01       	movw	r20, r6
     286:	92 01       	movw	r18, r4
     288:	c7 01       	movw	r24, r14
     28a:	b6 01       	movw	r22, r12
     28c:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
     290:	88 23       	and	r24, r24
     292:	74 f0       	brlt	.+28     	; 0x2b0 <calculate_diff_theta+0xc8>
    {
        *err_theta = theta_des - theta_robot;
     294:	a3 01       	movw	r20, r6
     296:	92 01       	movw	r18, r4
     298:	c7 01       	movw	r24, r14
     29a:	b6 01       	movw	r22, r12
     29c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     2a0:	68 83       	st	Y, r22
     2a2:	79 83       	std	Y+1, r23	; 0x01
     2a4:	8a 83       	std	Y+2, r24	; 0x02
     2a6:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
     2a8:	f8 01       	movw	r30, r16
     2aa:	11 82       	std	Z+1, r1	; 0x01
     2ac:	10 82       	st	Z, r1
     2ae:	a6 c0       	rjmp	.+332    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > theta_des))
     2b0:	a3 01       	movw	r20, r6
     2b2:	92 01       	movw	r18, r4
     2b4:	69 2d       	mov	r22, r9
     2b6:	78 2d       	mov	r23, r8
     2b8:	83 2d       	mov	r24, r3
     2ba:	92 2d       	mov	r25, r2
     2bc:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
     2c0:	18 16       	cp	r1, r24
     2c2:	4c f0       	brlt	.+18     	; 0x2d6 <calculate_diff_theta+0xee>
     2c4:	a3 01       	movw	r20, r6
     2c6:	92 01       	movw	r18, r4
     2c8:	c7 01       	movw	r24, r14
     2ca:	b6 01       	movw	r22, r12
     2cc:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     2d0:	88 23       	and	r24, r24
     2d2:	0c f0       	brlt	.+2      	; 0x2d6 <calculate_diff_theta+0xee>
     2d4:	93 c0       	rjmp	.+294    	; 0x3fc <calculate_diff_theta+0x214>
    {
        if (theta_robot < 0)
     2d6:	bb 20       	and	r11, r11
     2d8:	94 f4       	brge	.+36     	; 0x2fe <calculate_diff_theta+0x116>
            *err_theta = (theta_robot+360) - theta_des;
     2da:	b5 01       	movw	r22, r10
     2dc:	68 59       	subi	r22, 0x98	; 152
     2de:	7e 4f       	sbci	r23, 0xFE	; 254
     2e0:	88 27       	eor	r24, r24
     2e2:	77 fd       	sbrc	r23, 7
     2e4:	80 95       	com	r24
     2e6:	98 2f       	mov	r25, r24
     2e8:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     2ec:	a7 01       	movw	r20, r14
     2ee:	96 01       	movw	r18, r12
     2f0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     2f4:	68 83       	st	Y, r22
     2f6:	79 83       	std	Y+1, r23	; 0x01
     2f8:	8a 83       	std	Y+2, r24	; 0x02
     2fa:	9b 83       	std	Y+3, r25	; 0x03
     2fc:	0a c0       	rjmp	.+20     	; 0x312 <calculate_diff_theta+0x12a>
        else
            *err_theta = (theta_robot) - theta_des;
     2fe:	a7 01       	movw	r20, r14
     300:	96 01       	movw	r18, r12
     302:	c3 01       	movw	r24, r6
     304:	b2 01       	movw	r22, r4
     306:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     30a:	68 83       	st	Y, r22
     30c:	79 83       	std	Y+1, r23	; 0x01
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	f8 01       	movw	r30, r16
     318:	91 83       	std	Z+1, r25	; 0x01
     31a:	80 83       	st	Z, r24
     31c:	6f c0       	rjmp	.+222    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
     31e:	fc e4       	ldi	r31, 0x4C	; 76
     320:	af 16       	cp	r10, r31
     322:	ff ef       	ldi	r31, 0xFF	; 255
     324:	bf 06       	cpc	r11, r31
     326:	74 f4       	brge	.+28     	; 0x344 <calculate_diff_theta+0x15c>
     328:	a3 01       	movw	r20, r6
     32a:	92 01       	movw	r18, r4
     32c:	62 2d       	mov	r22, r2
     32e:	73 2d       	mov	r23, r3
     330:	88 2d       	mov	r24, r8
     332:	99 2d       	mov	r25, r9
     334:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     338:	18 16       	cp	r1, r24
     33a:	2c f1       	brlt	.+74     	; 0x386 <calculate_diff_theta+0x19e>
     33c:	85 eb       	ldi	r24, 0xB5	; 181
     33e:	a8 16       	cp	r10, r24
     340:	b1 04       	cpc	r11, r1
     342:	0c f5       	brge	.+66     	; 0x386 <calculate_diff_theta+0x19e>
    {
        if (theta_robot < 0)
     344:	bb 20       	and	r11, r11
     346:	5c f4       	brge	.+22     	; 0x35e <calculate_diff_theta+0x176>
            *err_theta = theta_des - theta_robot;
     348:	a3 01       	movw	r20, r6
     34a:	92 01       	movw	r18, r4
     34c:	c7 01       	movw	r24, r14
     34e:	b6 01       	movw	r22, r12
     350:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     354:	68 83       	st	Y, r22
     356:	79 83       	std	Y+1, r23	; 0x01
     358:	8a 83       	std	Y+2, r24	; 0x02
     35a:	9b 83       	std	Y+3, r25	; 0x03
     35c:	10 c0       	rjmp	.+32     	; 0x37e <calculate_diff_theta+0x196>
        else
            *err_theta = (theta_des + 360) - theta_robot;
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	44 eb       	ldi	r20, 0xB4	; 180
     364:	53 e4       	ldi	r21, 0x43	; 67
     366:	c7 01       	movw	r24, r14
     368:	b6 01       	movw	r22, r12
     36a:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
     36e:	a3 01       	movw	r20, r6
     370:	92 01       	movw	r18, r4
     372:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     376:	68 83       	st	Y, r22
     378:	79 83       	std	Y+1, r23	; 0x01
     37a:	8a 83       	std	Y+2, r24	; 0x02
     37c:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
     37e:	f8 01       	movw	r30, r16
     380:	11 82       	std	Z+1, r1	; 0x01
     382:	10 82       	st	Z, r1
     384:	3b c0       	rjmp	.+118    	; 0x3fc <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && (theta_robot > theta_des && theta_robot < angle_dir_aux))
     386:	a3 01       	movw	r20, r6
     388:	92 01       	movw	r18, r4
     38a:	c7 01       	movw	r24, r14
     38c:	b6 01       	movw	r22, r12
     38e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     392:	88 23       	and	r24, r24
     394:	9c f5       	brge	.+102    	; 0x3fc <calculate_diff_theta+0x214>
     396:	a3 01       	movw	r20, r6
     398:	92 01       	movw	r18, r4
     39a:	62 2d       	mov	r22, r2
     39c:	73 2d       	mov	r23, r3
     39e:	88 2d       	mov	r24, r8
     3a0:	99 2d       	mov	r25, r9
     3a2:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
     3a6:	18 16       	cp	r1, r24
     3a8:	4c f5       	brge	.+82     	; 0x3fc <calculate_diff_theta+0x214>
    {
        *err_theta = theta_robot - theta_des;
     3aa:	a7 01       	movw	r20, r14
     3ac:	96 01       	movw	r18, r12
     3ae:	c3 01       	movw	r24, r6
     3b0:	b2 01       	movw	r22, r4
     3b2:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     3b6:	68 83       	st	Y, r22
     3b8:	79 83       	std	Y+1, r23	; 0x01
     3ba:	8a 83       	std	Y+2, r24	; 0x02
     3bc:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	f8 01       	movw	r30, r16
     3c4:	91 83       	std	Z+1, r25	; 0x01
     3c6:	80 83       	st	Z, r24
     3c8:	19 c0       	rjmp	.+50     	; 0x3fc <calculate_diff_theta+0x214>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
     3ca:	a0 90 1c 01 	lds	r10, 0x011C
     3ce:	b0 90 1d 01 	lds	r11, 0x011D
     3d2:	b5 01       	movw	r22, r10
     3d4:	88 27       	eor	r24, r24
     3d6:	77 fd       	sbrc	r23, 7
     3d8:	80 95       	com	r24
     3da:	98 2f       	mov	r25, r24
     3dc:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     3e0:	2b 01       	movw	r4, r22
     3e2:	3c 01       	movw	r6, r24
     3e4:	9b 01       	movw	r18, r22
     3e6:	ac 01       	movw	r20, r24
     3e8:	69 2d       	mov	r22, r9
     3ea:	78 2d       	mov	r23, r8
     3ec:	83 2d       	mov	r24, r3
     3ee:	92 2d       	mov	r25, r2
     3f0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	0c f0       	brlt	.+2      	; 0x3fa <calculate_diff_theta+0x212>
     3f8:	45 cf       	rjmp	.-374    	; 0x284 <calculate_diff_theta+0x9c>
     3fa:	5a cf       	rjmp	.-332    	; 0x2b0 <calculate_diff_theta+0xc8>
        *dir_to_turn = 1;
    }else {
        err_theta = 0;
        dir_to_turn = 0;
    }
}
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	ff 90       	pop	r15
     406:	ef 90       	pop	r14
     408:	df 90       	pop	r13
     40a:	cf 90       	pop	r12
     40c:	bf 90       	pop	r11
     40e:	af 90       	pop	r10
     410:	9f 90       	pop	r9
     412:	8f 90       	pop	r8
     414:	7f 90       	pop	r7
     416:	6f 90       	pop	r6
     418:	5f 90       	pop	r5
     41a:	4f 90       	pop	r4
     41c:	3f 90       	pop	r3
     41e:	2f 90       	pop	r2
     420:	08 95       	ret

00000422 <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
     422:	01 97       	sbiw	r24, 0x01	; 1
     424:	a1 f4       	brne	.+40     	; 0x44e <move_robot_to_puck+0x2c>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
     426:	80 e8       	ldi	r24, 0x80	; 128
     428:	9c e0       	ldi	r25, 0x0C	; 12
     42a:	90 93 8b 00 	sts	0x008B, r25
     42e:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
     432:	cb 01       	movw	r24, r22
     434:	88 0f       	add	r24, r24
     436:	99 1f       	adc	r25, r25
     438:	88 0f       	add	r24, r24
     43a:	99 1f       	adc	r25, r25
     43c:	68 0f       	add	r22, r24
     43e:	79 1f       	adc	r23, r25
     440:	68 54       	subi	r22, 0x48	; 72
     442:	74 4f       	sbci	r23, 0xF4	; 244
     444:	70 93 8d 00 	sts	0x008D, r23
     448:	60 93 8c 00 	sts	0x008C, r22
     44c:	13 c0       	rjmp	.+38     	; 0x474 <move_robot_to_puck+0x52>
		
	}
	else
	{                      // Move with a right curve
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
     44e:	cb 01       	movw	r24, r22
     450:	88 0f       	add	r24, r24
     452:	99 1f       	adc	r25, r25
     454:	88 0f       	add	r24, r24
     456:	99 1f       	adc	r25, r25
     458:	68 0f       	add	r22, r24
     45a:	79 1f       	adc	r23, r25
     45c:	60 58       	subi	r22, 0x80	; 128
     45e:	73 4f       	sbci	r23, 0xF3	; 243
     460:	70 93 8b 00 	sts	0x008B, r23
     464:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
     468:	88 eb       	ldi	r24, 0xB8	; 184
     46a:	9b e0       	ldi	r25, 0x0B	; 11
     46c:	90 93 8d 00 	sts	0x008D, r25
     470:	80 93 8c 00 	sts	0x008C, r24
	}
	
	clear(PORTB,3);
     474:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     476:	5b 98       	cbi	0x0b, 3	; 11
     478:	08 95       	ret

0000047a <move_robot_after_get_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_after_get_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
     47a:	01 97       	sbiw	r24, 0x01	; 1
     47c:	09 f5       	brne	.+66     	; 0x4c0 <move_robot_after_get_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT);
     47e:	80 ea       	ldi	r24, 0xA0	; 160
     480:	9f e0       	ldi	r25, 0x0F	; 15
     482:	90 93 8b 00 	sts	0x008B, r25
     486:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT+diff*Kp_move_with_puck);
     48a:	88 27       	eor	r24, r24
     48c:	77 fd       	sbrc	r23, 7
     48e:	80 95       	com	r24
     490:	98 2f       	mov	r25, r24
     492:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     496:	2a e0       	ldi	r18, 0x0A	; 10
     498:	37 ed       	ldi	r19, 0xD7	; 215
     49a:	43 e2       	ldi	r20, 0x23	; 35
     49c:	5c e3       	ldi	r21, 0x3C	; 60
     49e:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     4a2:	20 e0       	ldi	r18, 0x00	; 0
     4a4:	30 e8       	ldi	r19, 0x80	; 128
     4a6:	4d e6       	ldi	r20, 0x6D	; 109
     4a8:	55 e4       	ldi	r21, 0x45	; 69
     4aa:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
     4ae:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
     4b2:	70 93 8d 00 	sts	0x008D, r23
     4b6:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
     4ba:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
     4bc:	5b 98       	cbi	0x0b, 3	; 11
     4be:	08 95       	ret
	}
	else
	{                      // Move with a right curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT+diff*Kp_move_with_puck);
     4c0:	88 27       	eor	r24, r24
     4c2:	77 fd       	sbrc	r23, 7
     4c4:	80 95       	com	r24
     4c6:	98 2f       	mov	r25, r24
     4c8:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     4cc:	2a e0       	ldi	r18, 0x0A	; 10
     4ce:	37 ed       	ldi	r19, 0xD7	; 215
     4d0:	43 e2       	ldi	r20, 0x23	; 35
     4d2:	5c e3       	ldi	r21, 0x3C	; 60
     4d4:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     4d8:	20 e0       	ldi	r18, 0x00	; 0
     4da:	30 e0       	ldi	r19, 0x00	; 0
     4dc:	4a e7       	ldi	r20, 0x7A	; 122
     4de:	55 e4       	ldi	r21, 0x45	; 69
     4e0:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
     4e4:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
     4e8:	70 93 8b 00 	sts	0x008B, r23
     4ec:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT);
     4f0:	88 ed       	ldi	r24, 0xD8	; 216
     4f2:	9e e0       	ldi	r25, 0x0E	; 14
     4f4:	90 93 8d 00 	sts	0x008D, r25
     4f8:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
     4fc:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
     4fe:	5b 98       	cbi	0x0b, 3	; 11
     500:	08 95       	ret

00000502 <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
     502:	10 92 8b 00 	sts	0x008B, r1
     506:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
     50a:	10 92 8d 00 	sts	0x008D, r1
     50e:	10 92 8c 00 	sts	0x008C, r1
     512:	08 95       	ret

00000514 <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
     514:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
     516:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
     518:	88 e2       	ldi	r24, 0x28	; 40
     51a:	9a e0       	ldi	r25, 0x0A	; 10
     51c:	90 93 8d 00 	sts	0x008D, r25
     520:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
     524:	80 e6       	ldi	r24, 0x60	; 96
     526:	99 e0       	ldi	r25, 0x09	; 9
     528:	90 93 8b 00 	sts	0x008B, r25
     52c:	80 93 8a 00 	sts	0x008A, r24
     530:	08 95       	ret

00000532 <turn_left_puck>:
// --------------------------------------------------------------
// TURN LEFT FOR PUCK
// --------------------------------------------------------------
void turn_left_puck(int scale_turn)
{
    clear(PORTB,3);
     532:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
     534:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = (int)(PWM_MIN_LEFT+scale_turn*Kp_turn);
     536:	9c 01       	movw	r18, r24
     538:	24 5d       	subi	r18, 0xD4	; 212
     53a:	3e 4f       	sbci	r19, 0xFE	; 254
     53c:	22 0f       	add	r18, r18
     53e:	33 1f       	adc	r19, r19
     540:	22 0f       	add	r18, r18
     542:	33 1f       	adc	r19, r19
     544:	22 0f       	add	r18, r18
     546:	33 1f       	adc	r19, r19
     548:	30 93 8d 00 	sts	0x008D, r19
     54c:	20 93 8c 00 	sts	0x008C, r18
    OCR1B = (int)(PWM_MIN_RGHT+scale_turn*Kp_turn);
     550:	8d 5e       	subi	r24, 0xED	; 237
     552:	9e 4f       	sbci	r25, 0xFE	; 254
     554:	88 0f       	add	r24, r24
     556:	99 1f       	adc	r25, r25
     558:	88 0f       	add	r24, r24
     55a:	99 1f       	adc	r25, r25
     55c:	88 0f       	add	r24, r24
     55e:	99 1f       	adc	r25, r25
     560:	90 93 8b 00 	sts	0x008B, r25
     564:	80 93 8a 00 	sts	0x008A, r24
     568:	08 95       	ret

0000056a <turn_right_puck>:
// --------------------------------------------------------------
// TURN RIGHT PUCK
// --------------------------------------------------------------
void turn_right_puck(int scale_turn)
{
    set(PORTB,3);
     56a:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
     56c:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = (int)(PWM_MIN_LEFT+scale_turn*Kp_turn);
     56e:	9c 01       	movw	r18, r24
     570:	24 5d       	subi	r18, 0xD4	; 212
     572:	3e 4f       	sbci	r19, 0xFE	; 254
     574:	22 0f       	add	r18, r18
     576:	33 1f       	adc	r19, r19
     578:	22 0f       	add	r18, r18
     57a:	33 1f       	adc	r19, r19
     57c:	22 0f       	add	r18, r18
     57e:	33 1f       	adc	r19, r19
     580:	30 93 8d 00 	sts	0x008D, r19
     584:	20 93 8c 00 	sts	0x008C, r18
    OCR1B = (int)(PWM_MIN_RGHT+scale_turn*Kp_turn);
     588:	8d 5e       	subi	r24, 0xED	; 237
     58a:	9e 4f       	sbci	r25, 0xFE	; 254
     58c:	88 0f       	add	r24, r24
     58e:	99 1f       	adc	r25, r25
     590:	88 0f       	add	r24, r24
     592:	99 1f       	adc	r25, r25
     594:	88 0f       	add	r24, r24
     596:	99 1f       	adc	r25, r25
     598:	90 93 8b 00 	sts	0x008B, r25
     59c:	80 93 8a 00 	sts	0x008A, r24
     5a0:	08 95       	ret

000005a2 <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
     5a2:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
     5a4:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
     5a6:	88 e2       	ldi	r24, 0x28	; 40
     5a8:	9a e0       	ldi	r25, 0x0A	; 10
     5aa:	90 93 8d 00 	sts	0x008D, r25
     5ae:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
     5b2:	80 e6       	ldi	r24, 0x60	; 96
     5b4:	99 e0       	ldi	r25, 0x09	; 9
     5b6:	90 93 8b 00 	sts	0x008B, r25
     5ba:	80 93 8a 00 	sts	0x008A, r24
     5be:	08 95       	ret

000005c0 <go_bwd>:
// --------------------------------------------------------------
// GO BACKWARDS
// --------------------------------------------------------------
void go_bwd(void)
{
    set(PORTB,3);
     5c0:	2b 9a       	sbi	0x05, 3	; 5
    set(PORTD,3);
     5c2:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_FWD_LFT;
     5c4:	80 e8       	ldi	r24, 0x80	; 128
     5c6:	9c e0       	ldi	r25, 0x0C	; 12
     5c8:	90 93 8d 00 	sts	0x008D, r25
     5cc:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_FWD_RGHT;
     5d0:	88 eb       	ldi	r24, 0xB8	; 184
     5d2:	9b e0       	ldi	r25, 0x0B	; 11
     5d4:	90 93 8b 00 	sts	0x008B, r25
     5d8:	80 93 8a 00 	sts	0x008A, r24
     5dc:	08 95       	ret

000005de <circle_left>:
// --------------------------------------------------------------
// CIRCLE_LEFT
// --------------------------------------------------------------
void circle_left()
{
	clear(PORTB,3);
     5de:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     5e0:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
     5e2:	84 ec       	ldi	r24, 0xC4	; 196
     5e4:	99 e0       	ldi	r25, 0x09	; 9
     5e6:	90 93 8b 00 	sts	0x008B, r25
     5ea:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
     5ee:	8b e1       	ldi	r24, 0x1B	; 27
     5f0:	98 e0       	ldi	r25, 0x08	; 8
     5f2:	90 93 8d 00 	sts	0x008D, r25
     5f6:	80 93 8c 00 	sts	0x008C, r24
     5fa:	08 95       	ret

000005fc <circle_right>:
// --------------------------------------------------------------
// CIRCLE_RIGHT
// --------------------------------------------------------------
void circle_right()
{
	clear(PORTB,3);
     5fc:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
     5fe:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
     600:	85 e7       	ldi	r24, 0x75	; 117
     602:	97 e0       	ldi	r25, 0x07	; 7
     604:	90 93 8b 00 	sts	0x008B, r25
     608:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
     60c:	8c ef       	ldi	r24, 0xFC	; 252
     60e:	98 e0       	ldi	r25, 0x08	; 8
     610:	90 93 8d 00 	sts	0x008D, r25
     614:	80 93 8c 00 	sts	0x008C, r24
     618:	08 95       	ret

0000061a <main>:
int state = STOP_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
{
     61a:	cf 93       	push	r28
     61c:	df 93       	push	r29
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	c6 54       	subi	r28, 0x46	; 70
     624:	d1 09       	sbc	r29, r1
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
     630:	20 e8       	ldi	r18, 0x80	; 128
     632:	25 bf       	out	0x35, r18	; 53
     634:	25 bf       	out	0x35, r18	; 53
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
     636:	19 82       	std	Y+1, r1	; 0x01
     638:	1a 82       	std	Y+2, r1	; 0x02
     63a:	1b 82       	std	Y+3, r1	; 0x03
     63c:	1c 82       	std	Y+4, r1	; 0x04
    int bank = 22;
     63e:	86 e1       	ldi	r24, 0x16	; 22
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	9e 83       	std	Y+6, r25	; 0x06
     644:	8d 83       	std	Y+5, r24	; 0x05
	int cam_X = 0, cam_Y = 0, commands_var = 0;
     646:	18 86       	std	Y+8, r1	; 0x08
     648:	1f 82       	std	Y+7, r1	; 0x07
     64a:	1a 86       	std	Y+10, r1	; 0x0a
     64c:	19 86       	std	Y+9, r1	; 0x09
	int circle_started_before = 0;
    
	//Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
     64e:	1c a2       	std	Y+36, r1	; 0x24
     650:	1b a2       	std	Y+35, r1	; 0x23
     652:	1e a2       	std	Y+38, r1	; 0x26
     654:	1d a2       	std	Y+37, r1	; 0x25
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
     656:	e1 e6       	ldi	r30, 0x61	; 97
     658:	f0 e0       	ldi	r31, 0x00	; 0
     65a:	20 83       	st	Z, r18
     65c:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
     65e:	6a 9a       	sbi	0x0d, 2	; 13
     660:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
     662:	6e 9a       	sbi	0x0d, 6	; 13
     664:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
     666:	6e 9a       	sbi	0x0d, 6	; 13
     668:	76 98       	cbi	0x0e, 6	; 14
    
	stop_motor();
     66a:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
    m_bus_init();                       // Initialize bus
     66e:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <m_bus_init>
    init_ports();                       // Initialize ports
     672:	0e 94 1f 09 	call	0x123e	; 0x123e <init_ports>
    set_timer1();                       // Set timer 1 for motor
     676:	0e 94 2c 0a 	call	0x1458	; 0x1458 <set_timer1>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
     67a:	0e 94 da 09 	call	0x13b4	; 0x13b4 <set_timer4>
    init_analog();                      // Set the ADC System
     67e:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
     682:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
     686:	88 23       	and	r24, r24
     688:	e1 f3       	breq	.-8      	; 0x682 <main+0x68>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
	m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM); 
     68a:	4a e0       	ldi	r20, 0x0A	; 10
     68c:	61 e4       	ldi	r22, 0x41	; 65
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 75 0a 	call	0x14ea	; 0x14ea <m_rf_open>
    
    sei();                              // Enable interruptions
     694:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
     696:	6e 9a       	sbi	0x0d, 6	; 13
     698:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
     69a:	10 92 26 01 	sts	0x0126, r1
     69e:	10 92 27 01 	sts	0x0127, r1
     6a2:	10 92 28 01 	sts	0x0128, r1
     6a6:	10 92 29 01 	sts	0x0129, r1
    TARGETS_Y[0] = 0;
     6aa:	10 92 1e 01 	sts	0x011E, r1
     6ae:	10 92 1f 01 	sts	0x011F, r1
     6b2:	10 92 20 01 	sts	0x0120, r1
     6b6:	10 92 21 01 	sts	0x0121, r1
    TARGETS_X[1] = GOAL_A_POS_X - 15;
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	a6 ee       	ldi	r26, 0xE6	; 230
     6c0:	b2 ec       	ldi	r27, 0xC2	; 194
     6c2:	80 93 2a 01 	sts	0x012A, r24
     6c6:	90 93 2b 01 	sts	0x012B, r25
     6ca:	a0 93 2c 01 	sts	0x012C, r26
     6ce:	b0 93 2d 01 	sts	0x012D, r27
    TARGETS_Y[1] = GOAL_A_POS_Y;
     6d2:	10 92 22 01 	sts	0x0122, r1
     6d6:	10 92 23 01 	sts	0x0123, r1
     6da:	10 92 24 01 	sts	0x0124, r1
     6de:	10 92 25 01 	sts	0x0125, r1
    
    int TARGET_NUM = 0;
     6e2:	25 96       	adiw	r28, 0x05	; 5
     6e4:	1f ae       	std	Y+63, r1	; 0x3f
     6e6:	1e ae       	std	Y+62, r1	; 0x3e
     6e8:	25 97       	sbiw	r28, 0x05	; 5
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
     6ea:	1e a6       	std	Y+46, r1	; 0x2e
     6ec:	1d a6       	std	Y+45, r1	; 0x2d
     6ee:	18 aa       	std	Y+48, r1	; 0x30
     6f0:	1f a6       	std	Y+47, r1	; 0x2f
     6f2:	1a aa       	std	Y+50, r1	; 0x32
     6f4:	19 aa       	std	Y+49, r1	; 0x31
     6f6:	1c aa       	std	Y+52, r1	; 0x34
     6f8:	1b aa       	std	Y+51, r1	; 0x33
     6fa:	1e aa       	std	Y+54, r1	; 0x36
     6fc:	1d aa       	std	Y+53, r1	; 0x35
     6fe:	61 2c       	mov	r6, r1
     700:	71 2c       	mov	r7, r1
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
     702:	23 96       	adiw	r28, 0x03	; 3
     704:	1f ae       	std	Y+63, r1	; 0x3f
     706:	1e ae       	std	Y+62, r1	; 0x3e
     708:	23 97       	sbiw	r28, 0x03	; 3
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
     70a:	1c ae       	std	Y+60, r1	; 0x3c
     70c:	1b ae       	std	Y+59, r1	; 0x3b
			// --------------------------------------------------------------
			int i;
			for (i=0;i<NUM_LEDS;i++)
			{
				get_analog_val(i);              // Get the values for each ADC pin
				while(!check(ADCSRA,ADIF));     // Wait until flag is on
     70e:	0f 2e       	mov	r0, r31
     710:	fa e7       	ldi	r31, 0x7A	; 122
     712:	2f 2e       	mov	r2, r31
     714:	31 2c       	mov	r3, r1
     716:	f0 2d       	mov	r31, r0
					break;
					case(2):
					PT3_right_inside = ADC;
					break;
					case(3):
					PT4_right_outside = ADC;
     718:	0f 2e       	mov	r0, r31
     71a:	f8 e7       	ldi	r31, 0x78	; 120
     71c:	4f 2e       	mov	r4, r31
     71e:	51 2c       	mov	r5, r1
     720:	f0 2d       	mov	r31, r0

			// If data received correctly
			if (wii_OK)
			{
				// Get the position and orientation of the robot from the constellation
				localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
     722:	9e 01       	movw	r18, r28
     724:	27 5f       	subi	r18, 0xF7	; 247
     726:	3f 4f       	sbci	r19, 0xFF	; 255
     728:	38 a7       	std	Y+40, r19	; 0x28
     72a:	2f a3       	std	Y+39, r18	; 0x27
     72c:	ae 01       	movw	r20, r28
     72e:	49 5f       	subi	r20, 0xF9	; 249
     730:	5f 4f       	sbci	r21, 0xFF	; 255
     732:	5a a7       	std	Y+42, r21	; 0x2a
     734:	49 a7       	std	Y+41, r20	; 0x29
     736:	ce 01       	movw	r24, r28
     738:	85 96       	adiw	r24, 0x25	; 37
     73a:	9c a7       	std	Y+44, r25	; 0x2c
     73c:	8b a7       	std	Y+43, r24	; 0x2b
    while (1)
    {
		// --------------------------------------------------------------
		// SYSTEM COMMAND CHECK
		// --------------------------------------------------------------
		if (flag_system == 1)
     73e:	80 91 0e 01 	lds	r24, 0x010E
     742:	90 91 0f 01 	lds	r25, 0x010F
     746:	01 97       	sbiw	r24, 0x01	; 1
     748:	79 f4       	brne	.+30     	; 0x768 <main+0x14e>
		{
			m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
     74a:	6a e0       	ldi	r22, 0x0A	; 10
     74c:	82 e1       	ldi	r24, 0x12	; 18
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	0e 94 cb 0a 	call	0x1596	; 0x1596 <m_rf_read>
			state = SYSTEM_STATE;
     754:	e3 e6       	ldi	r30, 0x63	; 99
     756:	f0 e0       	ldi	r31, 0x00	; 0
     758:	f0 93 01 01 	sts	0x0101, r31
     75c:	e0 93 00 01 	sts	0x0100, r30
			flag_system = 0;
     760:	10 92 0f 01 	sts	0x010F, r1
     764:	10 92 0e 01 	sts	0x010E, r1
		}
	
		 //--------------------------------------------------------------
         //SEND COMMANDS
         //--------------------------------------------------------------
        if (flag_timer == 1)
     768:	80 91 10 01 	lds	r24, 0x0110
     76c:	90 91 11 01 	lds	r25, 0x0111
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	29 f7       	brne	.-54     	; 0x73e <main+0x124>
		{
			m_green(ON);	
     774:	6a 9a       	sbi	0x0d, 2	; 13
     776:	72 98       	cbi	0x0e, 2	; 14
			// --------------------------------------------------------------
			// LOCALIZATION CODE
			// --------------------------------------------------------------
			cli();                                          // Clear Interupts to not interfere with the mWii
     778:	f8 94       	cli
			wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
     77a:	ce 01       	movw	r24, r28
     77c:	0b 96       	adiw	r24, 0x0b	; 11
     77e:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <m_wii_read>
			sei();                                          // Enable back the interupts
     782:	78 94       	sei

			// If data received correctly
			if (wii_OK)
     784:	88 23       	and	r24, r24
     786:	09 f4       	brne	.+2      	; 0x78a <main+0x170>
     788:	1c c5       	rjmp	.+2616   	; 0x11c2 <__stack+0x6c3>
			{
				// Get the position and orientation of the robot from the constellation
				localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
     78a:	af 8c       	ldd	r10, Y+31	; 0x1f
     78c:	b8 a0       	ldd	r11, Y+32	; 0x20
     78e:	c9 8c       	ldd	r12, Y+25	; 0x19
     790:	da 8c       	ldd	r13, Y+26	; 0x1a
     792:	eb 88       	ldd	r14, Y+19	; 0x13
     794:	fc 88       	ldd	r15, Y+20	; 0x14
     796:	0d 85       	ldd	r16, Y+13	; 0x0d
     798:	1e 85       	ldd	r17, Y+14	; 0x0e
     79a:	2d 8d       	ldd	r18, Y+29	; 0x1d
     79c:	3e 8d       	ldd	r19, Y+30	; 0x1e
     79e:	4f 89       	ldd	r20, Y+23	; 0x17
     7a0:	58 8d       	ldd	r21, Y+24	; 0x18
     7a2:	69 89       	ldd	r22, Y+17	; 0x11
     7a4:	7a 89       	ldd	r23, Y+18	; 0x12
     7a6:	f8 a5       	ldd	r31, Y+40	; 0x28
     7a8:	ff 93       	push	r31
     7aa:	8f a1       	ldd	r24, Y+39	; 0x27
     7ac:	8f 93       	push	r24
     7ae:	9a a5       	ldd	r25, Y+42	; 0x2a
     7b0:	9f 93       	push	r25
     7b2:	e9 a5       	ldd	r30, Y+41	; 0x29
     7b4:	ef 93       	push	r30
     7b6:	8c e1       	ldi	r24, 0x1C	; 28
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	9f 93       	push	r25
     7bc:	8f 93       	push	r24
     7be:	fc a5       	ldd	r31, Y+44	; 0x2c
     7c0:	ff 93       	push	r31
     7c2:	8b a5       	ldd	r24, Y+43	; 0x2b
     7c4:	8f 93       	push	r24
     7c6:	0f 2e       	mov	r0, r31
     7c8:	f3 e2       	ldi	r31, 0x23	; 35
     7ca:	8f 2e       	mov	r8, r31
     7cc:	91 2c       	mov	r9, r1
     7ce:	f0 2d       	mov	r31, r0
     7d0:	8c 0e       	add	r8, r28
     7d2:	9d 1e       	adc	r9, r29
     7d4:	8b 85       	ldd	r24, Y+11	; 0x0b
     7d6:	9c 85       	ldd	r25, Y+12	; 0x0c
     7d8:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <localize>
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
     7e6:	ed c4       	rjmp	.+2522   	; 0x11c2 <__stack+0x6c3>
     7e8:	ff ef       	ldi	r31, 0xFF	; 255
     7ea:	ef 1a       	sub	r14, r31
     7ec:	ff 0a       	sbc	r15, r31
//Variable for states
int state = STOP_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
     7ee:	87 01       	movw	r16, r14
     7f0:	01 50       	subi	r16, 0x01	; 1
     7f2:	11 09       	sbc	r17, r1
			// ANALOG CODE
			// --------------------------------------------------------------
			int i;
			for (i=0;i<NUM_LEDS;i++)
			{
				get_analog_val(i);              // Get the values for each ADC pin
     7f4:	c8 01       	movw	r24, r16
     7f6:	0e 94 28 09 	call	0x1250	; 0x1250 <get_analog_val>
				while(!check(ADCSRA,ADIF));     // Wait until flag is on
     7fa:	f1 01       	movw	r30, r2
     7fc:	80 81       	ld	r24, Z
     7fe:	84 ff       	sbrs	r24, 4
     800:	fc cf       	rjmp	.-8      	; 0x7fa <main+0x1e0>
				switch(i)
     802:	03 30       	cpi	r16, 0x03	; 3
     804:	11 05       	cpc	r17, r1
     806:	11 f1       	breq	.+68     	; 0x84c <main+0x232>
     808:	3c f4       	brge	.+14     	; 0x818 <main+0x1fe>
     80a:	01 30       	cpi	r16, 0x01	; 1
     80c:	11 05       	cpc	r17, r1
     80e:	81 f0       	breq	.+32     	; 0x830 <main+0x216>
     810:	b4 f4       	brge	.+44     	; 0x83e <main+0x224>
     812:	01 2b       	or	r16, r17
     814:	49 f0       	breq	.+18     	; 0x828 <main+0x20e>
     816:	44 c0       	rjmp	.+136    	; 0x8a0 <main+0x286>
     818:	05 30       	cpi	r16, 0x05	; 5
     81a:	11 05       	cpc	r17, r1
     81c:	29 f1       	breq	.+74     	; 0x868 <main+0x24e>
     81e:	ec f0       	brlt	.+58     	; 0x85a <main+0x240>
     820:	06 30       	cpi	r16, 0x06	; 6
     822:	11 05       	cpc	r17, r1
     824:	e9 f5       	brne	.+122    	; 0x8a0 <main+0x286>
     826:	27 c0       	rjmp	.+78     	; 0x876 <main+0x25c>
				{
					case(0):
					PT1_left_outside = ADC;
     828:	f2 01       	movw	r30, r4
     82a:	60 80       	ld	r6, Z
     82c:	71 80       	ldd	r7, Z+1	; 0x01
					break;
     82e:	cd c4       	rjmp	.+2458   	; 0x11ca <__stack+0x6cb>
					case(1):
					PT2_left_inside = ADC;
     830:	f2 01       	movw	r30, r4
     832:	01 90       	ld	r0, Z+
     834:	f0 81       	ld	r31, Z
     836:	e0 2d       	mov	r30, r0
     838:	fe ab       	std	Y+54, r31	; 0x36
     83a:	ed ab       	std	Y+53, r30	; 0x35
					break;
     83c:	c6 c4       	rjmp	.+2444   	; 0x11ca <__stack+0x6cb>
					case(2):
					PT3_right_inside = ADC;
     83e:	f2 01       	movw	r30, r4
     840:	01 90       	ld	r0, Z+
     842:	f0 81       	ld	r31, Z
     844:	e0 2d       	mov	r30, r0
     846:	fc ab       	std	Y+52, r31	; 0x34
     848:	eb ab       	std	Y+51, r30	; 0x33
					break;
     84a:	bf c4       	rjmp	.+2430   	; 0x11ca <__stack+0x6cb>
					case(3):
					PT4_right_outside = ADC;
     84c:	f2 01       	movw	r30, r4
     84e:	01 90       	ld	r0, Z+
     850:	f0 81       	ld	r31, Z
     852:	e0 2d       	mov	r30, r0
     854:	fa ab       	std	Y+50, r31	; 0x32
     856:	e9 ab       	std	Y+49, r30	; 0x31
					break;
     858:	b8 c4       	rjmp	.+2416   	; 0x11ca <__stack+0x6cb>
					case(4):
					PT5_back_right = ADC;
     85a:	f2 01       	movw	r30, r4
     85c:	01 90       	ld	r0, Z+
     85e:	f0 81       	ld	r31, Z
     860:	e0 2d       	mov	r30, r0
     862:	f8 ab       	std	Y+48, r31	; 0x30
     864:	ef a7       	std	Y+47, r30	; 0x2f
					break;
     866:	b1 c4       	rjmp	.+2402   	; 0x11ca <__stack+0x6cb>
					case(5):
					PT6_back_left = ADC;
     868:	f2 01       	movw	r30, r4
     86a:	01 90       	ld	r0, Z+
     86c:	f0 81       	ld	r31, Z
     86e:	e0 2d       	mov	r30, r0
     870:	fe a7       	std	Y+46, r31	; 0x2e
     872:	ed a7       	std	Y+45, r30	; 0x2d
					break;
     874:	aa c4       	rjmp	.+2388   	; 0x11ca <__stack+0x6cb>
					case(6):
					PT7_have_puck = ADC;
     876:	f2 01       	movw	r30, r4
     878:	80 81       	ld	r24, Z
     87a:	91 81       	ldd	r25, Z+1	; 0x01
					break;
				}
	
				set(ADCSRA,ADIF);               // After doing the conversion reset flag
     87c:	f1 01       	movw	r30, r2
     87e:	80 81       	ld	r24, Z
     880:	80 61       	ori	r24, 0x10	; 16
     882:	80 83       	st	Z, r24
     884:	8d a4       	ldd	r8, Y+45	; 0x2d
     886:	9e a4       	ldd	r9, Y+46	; 0x2e
     888:	2f a5       	ldd	r18, Y+47	; 0x2f
     88a:	38 a9       	ldd	r19, Y+48	; 0x30
     88c:	38 af       	std	Y+56, r19	; 0x38
     88e:	2f ab       	std	Y+55, r18	; 0x37
     890:	c9 a8       	ldd	r12, Y+49	; 0x31
     892:	da a8       	ldd	r13, Y+50	; 0x32
     894:	ab a8       	ldd	r10, Y+51	; 0x33
     896:	bc a8       	ldd	r11, Y+52	; 0x34
     898:	0d a9       	ldd	r16, Y+53	; 0x35
     89a:	1e a9       	ldd	r17, Y+54	; 0x36
     89c:	73 01       	movw	r14, r6
     89e:	16 c0       	rjmp	.+44     	; 0x8cc <main+0x2b2>
     8a0:	f1 01       	movw	r30, r2
     8a2:	80 81       	ld	r24, Z
     8a4:	80 61       	ori	r24, 0x10	; 16
     8a6:	80 83       	st	Z, r24

			// --------------------------------------------------------------
			// ANALOG CODE
			// --------------------------------------------------------------
			int i;
			for (i=0;i<NUM_LEDS;i++)
     8a8:	f7 e0       	ldi	r31, 0x07	; 7
     8aa:	ef 16       	cp	r14, r31
     8ac:	f1 04       	cpc	r15, r1
     8ae:	0c f4       	brge	.+2      	; 0x8b2 <main+0x298>
     8b0:	9b cf       	rjmp	.-202    	; 0x7e8 <main+0x1ce>
     8b2:	8d a4       	ldd	r8, Y+45	; 0x2d
     8b4:	9e a4       	ldd	r9, Y+46	; 0x2e
     8b6:	2f a5       	ldd	r18, Y+47	; 0x2f
     8b8:	38 a9       	ldd	r19, Y+48	; 0x30
     8ba:	38 af       	std	Y+56, r19	; 0x38
     8bc:	2f ab       	std	Y+55, r18	; 0x37
     8be:	c9 a8       	ldd	r12, Y+49	; 0x31
     8c0:	da a8       	ldd	r13, Y+50	; 0x32
     8c2:	ab a8       	ldd	r10, Y+51	; 0x33
     8c4:	bc a8       	ldd	r11, Y+52	; 0x34
     8c6:	0d a9       	ldd	r16, Y+53	; 0x35
     8c8:	1e a9       	ldd	r17, Y+54	; 0x36
     8ca:	73 01       	movw	r14, r6


			// --------------------------------------------------------------
			// STATE COMMANDS
			// --------------------------------------------------------------
			switch (state)
     8cc:	80 91 00 01 	lds	r24, 0x0100
     8d0:	90 91 01 01 	lds	r25, 0x0101
     8d4:	85 31       	cpi	r24, 0x15	; 21
     8d6:	91 05       	cpc	r25, r1
     8d8:	09 f4       	brne	.+2      	; 0x8dc <main+0x2c2>
     8da:	4b c4       	rjmp	.+2198   	; 0x1172 <__stack+0x673>
     8dc:	64 f4       	brge	.+24     	; 0x8f6 <main+0x2dc>
     8de:	83 30       	cpi	r24, 0x03	; 3
     8e0:	91 05       	cpc	r25, r1
     8e2:	09 f4       	brne	.+2      	; 0x8e6 <main+0x2cc>
     8e4:	f2 c1       	rjmp	.+996    	; 0xcca <__stack+0x1cb>
     8e6:	85 30       	cpi	r24, 0x05	; 5
     8e8:	91 05       	cpc	r25, r1
     8ea:	09 f4       	brne	.+2      	; 0x8ee <main+0x2d4>
     8ec:	eb c2       	rjmp	.+1494   	; 0xec4 <__stack+0x3c5>
     8ee:	89 2b       	or	r24, r25
     8f0:	09 f4       	brne	.+2      	; 0x8f4 <main+0x2da>
     8f2:	d0 c2       	rjmp	.+1440   	; 0xe94 <__stack+0x395>
     8f4:	43 c4       	rjmp	.+2182   	; 0x117c <__stack+0x67d>
     8f6:	80 35       	cpi	r24, 0x50	; 80
     8f8:	91 05       	cpc	r25, r1
     8fa:	41 f0       	breq	.+16     	; 0x90c <main+0x2f2>
     8fc:	83 36       	cpi	r24, 0x63	; 99
     8fe:	91 05       	cpc	r25, r1
     900:	09 f4       	brne	.+2      	; 0x904 <main+0x2ea>
     902:	b4 c3       	rjmp	.+1896   	; 0x106c <__stack+0x56d>
     904:	46 97       	sbiw	r24, 0x16	; 22
     906:	09 f0       	breq	.+2      	; 0x90a <main+0x2f0>
     908:	39 c4       	rjmp	.+2162   	; 0x117c <__stack+0x67d>
     90a:	1d c4       	rjmp	.+2106   	; 0x1146 <__stack+0x647>
				case GO_TO_WPT:
	
				//m_green(ON);
	
	
				if (PT1_left_outside > NOT_SEE_PUCK || PT2_left_inside > NOT_SEE_PUCK || PT3_right_inside > NOT_SEE_PUCK || PT4_right_outside > NOT_SEE_PUCK || PT5_back_right > NOT_SEE_PUCK || PT6_back_left > NOT_SEE_PUCK)
     90c:	3d e2       	ldi	r19, 0x2D	; 45
     90e:	e3 16       	cp	r14, r19
     910:	31 e0       	ldi	r19, 0x01	; 1
     912:	f3 06       	cpc	r15, r19
     914:	bc f4       	brge	.+46     	; 0x944 <main+0x32a>
     916:	0d 32       	cpi	r16, 0x2D	; 45
     918:	11 40       	sbci	r17, 0x01	; 1
     91a:	a4 f4       	brge	.+40     	; 0x944 <main+0x32a>
     91c:	5d e2       	ldi	r21, 0x2D	; 45
     91e:	a5 16       	cp	r10, r21
     920:	51 e0       	ldi	r21, 0x01	; 1
     922:	b5 06       	cpc	r11, r21
     924:	7c f4       	brge	.+30     	; 0x944 <main+0x32a>
     926:	8d e2       	ldi	r24, 0x2D	; 45
     928:	c8 16       	cp	r12, r24
     92a:	81 e0       	ldi	r24, 0x01	; 1
     92c:	d8 06       	cpc	r13, r24
     92e:	54 f4       	brge	.+20     	; 0x944 <main+0x32a>
     930:	ef a9       	ldd	r30, Y+55	; 0x37
     932:	f8 ad       	ldd	r31, Y+56	; 0x38
     934:	ed 32       	cpi	r30, 0x2D	; 45
     936:	f1 40       	sbci	r31, 0x01	; 1
     938:	2c f4       	brge	.+10     	; 0x944 <main+0x32a>
     93a:	3d e2       	ldi	r19, 0x2D	; 45
     93c:	83 16       	cp	r8, r19
     93e:	31 e0       	ldi	r19, 0x01	; 1
     940:	93 06       	cpc	r9, r19
     942:	3c f0       	brlt	.+14     	; 0x952 <main+0x338>
				{
					state = FIND_PUCK;
     944:	83 e0       	ldi	r24, 0x03	; 3
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	90 93 01 01 	sts	0x0101, r25
     94c:	80 93 00 01 	sts	0x0100, r24
					break;
     950:	33 c4       	rjmp	.+2150   	; 0x11b8 <__stack+0x6b9>
				}
	
				dir_x = TARGETS_X[TARGET_NUM]-x_robot;
				dir_y = TARGETS_Y[TARGET_NUM]-y_robot;
     952:	25 96       	adiw	r28, 0x05	; 5
     954:	0e ad       	ldd	r16, Y+62	; 0x3e
     956:	1f ad       	ldd	r17, Y+63	; 0x3f
     958:	25 97       	sbiw	r28, 0x05	; 5
     95a:	00 0f       	add	r16, r16
     95c:	11 1f       	adc	r17, r17
     95e:	00 0f       	add	r16, r16
     960:	11 1f       	adc	r17, r17
     962:	0f 2e       	mov	r0, r31
     964:	fe e1       	ldi	r31, 0x1E	; 30
     966:	ef 2e       	mov	r14, r31
     968:	f1 e0       	ldi	r31, 0x01	; 1
     96a:	ff 2e       	mov	r15, r31
     96c:	f0 2d       	mov	r31, r0
     96e:	e0 0e       	add	r14, r16
     970:	f1 1e       	adc	r15, r17
     972:	6d a1       	ldd	r22, Y+37	; 0x25
     974:	7e a1       	ldd	r23, Y+38	; 0x26
     976:	88 27       	eor	r24, r24
     978:	77 fd       	sbrc	r23, 7
     97a:	80 95       	com	r24
     97c:	98 2f       	mov	r25, r24
     97e:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     982:	9b 01       	movw	r18, r22
     984:	ac 01       	movw	r20, r24
     986:	f7 01       	movw	r30, r14
     988:	60 81       	ld	r22, Z
     98a:	71 81       	ldd	r23, Z+1	; 0x01
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     994:	6b 01       	movw	r12, r22
     996:	7c 01       	movw	r14, r24
				{
					state = FIND_PUCK;
					break;
				}
	
				dir_x = TARGETS_X[TARGET_NUM]-x_robot;
     998:	0a 5d       	subi	r16, 0xDA	; 218
     99a:	1e 4f       	sbci	r17, 0xFE	; 254
     99c:	6b a1       	ldd	r22, Y+35	; 0x23
     99e:	7c a1       	ldd	r23, Y+36	; 0x24
     9a0:	88 27       	eor	r24, r24
     9a2:	77 fd       	sbrc	r23, 7
     9a4:	80 95       	com	r24
     9a6:	98 2f       	mov	r25, r24
     9a8:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     9ac:	9b 01       	movw	r18, r22
     9ae:	ac 01       	movw	r20, r24
     9b0:	f8 01       	movw	r30, r16
     9b2:	60 81       	ld	r22, Z
     9b4:	71 81       	ldd	r23, Z+1	; 0x01
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
				dir_y = TARGETS_Y[TARGET_NUM]-y_robot;
				dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
     9be:	90 58       	subi	r25, 0x80	; 128
     9c0:	a7 01       	movw	r20, r14
     9c2:	96 01       	movw	r18, r12
     9c4:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <atan2>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	44 e3       	ldi	r20, 0x34	; 52
     9ce:	53 e4       	ldi	r21, 0x43	; 67
     9d0:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     9d4:	2b ed       	ldi	r18, 0xDB	; 219
     9d6:	3f e0       	ldi	r19, 0x0F	; 15
     9d8:	49 e4       	ldi	r20, 0x49	; 73
     9da:	50 e4       	ldi	r21, 0x40	; 64
     9dc:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__divsf3>
	
				calculate_diff_theta(dir_angle,&diff_theta, &bank);
     9e0:	9e 01       	movw	r18, r28
     9e2:	2b 5f       	subi	r18, 0xFB	; 251
     9e4:	3f 4f       	sbci	r19, 0xFF	; 255
     9e6:	ae 01       	movw	r20, r28
     9e8:	4f 5f       	subi	r20, 0xFF	; 255
     9ea:	5f 4f       	sbci	r21, 0xFF	; 255
     9ec:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
	
	
				cur_error = diff_theta;
     9f0:	89 80       	ldd	r8, Y+1	; 0x01
     9f2:	9a 80       	ldd	r9, Y+2	; 0x02
     9f4:	ab 80       	ldd	r10, Y+3	; 0x03
     9f6:	bc 80       	ldd	r11, Y+4	; 0x04
     9f8:	c5 01       	movw	r24, r10
     9fa:	b4 01       	movw	r22, r8
     9fc:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
     a00:	8b 01       	movw	r16, r22
     a02:	70 93 31 01 	sts	0x0131, r23
     a06:	60 93 30 01 	sts	0x0130, r22
				diff_error = cur_error - prev_error;
     a0a:	20 91 2e 01 	lds	r18, 0x012E
     a0e:	30 91 2f 01 	lds	r19, 0x012F
     a12:	ab 01       	movw	r20, r22
     a14:	42 1b       	sub	r20, r18
     a16:	53 0b       	sbc	r21, r19
     a18:	50 93 33 01 	sts	0x0133, r21
     a1c:	40 93 32 01 	sts	0x0132, r20
				prev_error = cur_error;
     a20:	70 93 2f 01 	sts	0x012F, r23
     a24:	60 93 2e 01 	sts	0x012E, r22
	
				if (status_go_to_goal == 0)
     a28:	8b ad       	ldd	r24, Y+59	; 0x3b
     a2a:	9c ad       	ldd	r25, Y+60	; 0x3c
     a2c:	89 2b       	or	r24, r25
     a2e:	09 f0       	breq	.+2      	; 0xa32 <main+0x418>
     a30:	7b c0       	rjmp	.+246    	; 0xb28 <__stack+0x29>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
     a32:	6b a1       	ldd	r22, Y+35	; 0x23
     a34:	7c a1       	ldd	r23, Y+36	; 0x24
     a36:	88 27       	eor	r24, r24
     a38:	77 fd       	sbrc	r23, 7
     a3a:	80 95       	com	r24
     a3c:	98 2f       	mov	r25, r24
     a3e:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     a42:	25 96       	adiw	r28, 0x05	; 5
     a44:	ee ac       	ldd	r14, Y+62	; 0x3e
     a46:	ff ac       	ldd	r15, Y+63	; 0x3f
     a48:	25 97       	sbiw	r28, 0x05	; 5
     a4a:	ee 0c       	add	r14, r14
     a4c:	ff 1c       	adc	r15, r15
     a4e:	ee 0c       	add	r14, r14
     a50:	ff 1c       	adc	r15, r15
     a52:	f7 01       	movw	r30, r14
     a54:	ea 5d       	subi	r30, 0xDA	; 218
     a56:	fe 4f       	sbci	r31, 0xFE	; 254
     a58:	20 81       	ld	r18, Z
     a5a:	31 81       	ldd	r19, Z+1	; 0x01
     a5c:	42 81       	ldd	r20, Z+2	; 0x02
     a5e:	53 81       	ldd	r21, Z+3	; 0x03
     a60:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     a64:	6f ab       	std	Y+55, r22	; 0x37
     a66:	7d af       	std	Y+61, r23	; 0x3d
     a68:	c8 2e       	mov	r12, r24
     a6a:	d9 2e       	mov	r13, r25
     a6c:	6d a1       	ldd	r22, Y+37	; 0x25
     a6e:	7e a1       	ldd	r23, Y+38	; 0x26
     a70:	88 27       	eor	r24, r24
     a72:	77 fd       	sbrc	r23, 7
     a74:	80 95       	com	r24
     a76:	98 2f       	mov	r25, r24
     a78:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     a7c:	f7 01       	movw	r30, r14
     a7e:	e2 5e       	subi	r30, 0xE2	; 226
     a80:	fe 4f       	sbci	r31, 0xFE	; 254
     a82:	20 81       	ld	r18, Z
     a84:	31 81       	ldd	r19, Z+1	; 0x01
     a86:	42 81       	ldd	r20, Z+2	; 0x02
     a88:	53 81       	ldd	r21, Z+3	; 0x03
     a8a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     a8e:	f6 2e       	mov	r15, r22
     a90:	e7 2e       	mov	r14, r23
     a92:	8f af       	std	Y+63, r24	; 0x3f
     a94:	21 96       	adiw	r28, 0x01	; 1
     a96:	9f af       	std	Y+63, r25	; 0x3f
     a98:	21 97       	sbiw	r28, 0x01	; 1
     a9a:	7f a9       	ldd	r23, Y+55	; 0x37
     a9c:	6d ad       	ldd	r22, Y+61	; 0x3d
     a9e:	27 2f       	mov	r18, r23
     aa0:	36 2f       	mov	r19, r22
     aa2:	4c 2d       	mov	r20, r12
     aa4:	5d 2d       	mov	r21, r13
     aa6:	67 2f       	mov	r22, r23
     aa8:	73 2f       	mov	r23, r19
     aaa:	8c 2d       	mov	r24, r12
     aac:	9d 2d       	mov	r25, r13
     aae:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     ab2:	6f ab       	std	Y+55, r22	; 0x37
     ab4:	78 af       	std	Y+56, r23	; 0x38
     ab6:	89 af       	std	Y+57, r24	; 0x39
     ab8:	9a af       	std	Y+58, r25	; 0x3a
     aba:	9f ad       	ldd	r25, Y+63	; 0x3f
     abc:	21 96       	adiw	r28, 0x01	; 1
     abe:	8f ad       	ldd	r24, Y+63	; 0x3f
     ac0:	21 97       	sbiw	r28, 0x01	; 1
     ac2:	2f 2d       	mov	r18, r15
     ac4:	3e 2d       	mov	r19, r14
     ac6:	49 2f       	mov	r20, r25
     ac8:	58 2f       	mov	r21, r24
     aca:	6f 2d       	mov	r22, r15
     acc:	7e 2d       	mov	r23, r14
     ace:	89 2f       	mov	r24, r25
     ad0:	95 2f       	mov	r25, r21
     ad2:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     ad6:	9b 01       	movw	r18, r22
     ad8:	ac 01       	movw	r20, r24
     ada:	6f a9       	ldd	r22, Y+55	; 0x37
     adc:	78 ad       	ldd	r23, Y+56	; 0x38
     ade:	89 ad       	ldd	r24, Y+57	; 0x39
     ae0:	9a ad       	ldd	r25, Y+58	; 0x3a
     ae2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
     ae6:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
     aea:	20 e0       	ldi	r18, 0x00	; 0
     aec:	30 e0       	ldi	r19, 0x00	; 0
     aee:	a9 01       	movw	r20, r18
     af0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     af4:	88 23       	and	r24, r24
     af6:	0c f4       	brge	.+2      	; 0xafa <main+0x4e0>
     af8:	44 c3       	rjmp	.+1672   	; 0x1182 <__stack+0x683>
						status_go_to_goal = 2;
					}
		
		
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	4c e0       	ldi	r20, 0x0C	; 12
     b00:	52 e4       	ldi	r21, 0x42	; 66
     b02:	c5 01       	movw	r24, r10
     b04:	b4 01       	movw	r22, r8
     b06:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     b0a:	88 23       	and	r24, r24
     b0c:	0c f4       	brge	.+2      	; 0xb10 <__stack+0x11>
     b0e:	3e c3       	rjmp	.+1660   	; 0x118c <__stack+0x68d>
						status_go_to_goal = 1;
					}
					else
					if (bank == 0)
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	9e 81       	ldd	r25, Y+6	; 0x06
     b14:	89 2b       	or	r24, r25
     b16:	21 f4       	brne	.+8      	; 0xb20 <__stack+0x21>
					turn_left_puck(diff_theta);
     b18:	c8 01       	movw	r24, r16
     b1a:	0e 94 99 02 	call	0x532	; 0x532 <turn_left_puck>
     b1e:	4c c3       	rjmp	.+1688   	; 0x11b8 <__stack+0x6b9>
					else
					turn_right_puck(diff_theta);
     b20:	c8 01       	movw	r24, r16
     b22:	0e 94 b5 02 	call	0x56a	; 0x56a <turn_right_puck>
     b26:	48 c3       	rjmp	.+1680   	; 0x11b8 <__stack+0x6b9>
				}
	
				else if (status_go_to_goal == 1)
     b28:	eb ad       	ldd	r30, Y+59	; 0x3b
     b2a:	fc ad       	ldd	r31, Y+60	; 0x3c
     b2c:	31 97       	sbiw	r30, 0x01	; 1
     b2e:	09 f0       	breq	.+2      	; 0xb32 <__stack+0x33>
     b30:	75 c0       	rjmp	.+234    	; 0xc1c <__stack+0x11d>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
     b32:	6b a1       	ldd	r22, Y+35	; 0x23
     b34:	7c a1       	ldd	r23, Y+36	; 0x24
     b36:	88 27       	eor	r24, r24
     b38:	77 fd       	sbrc	r23, 7
     b3a:	80 95       	com	r24
     b3c:	98 2f       	mov	r25, r24
     b3e:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     b42:	25 96       	adiw	r28, 0x05	; 5
     b44:	ee ac       	ldd	r14, Y+62	; 0x3e
     b46:	ff ac       	ldd	r15, Y+63	; 0x3f
     b48:	25 97       	sbiw	r28, 0x05	; 5
     b4a:	ee 0c       	add	r14, r14
     b4c:	ff 1c       	adc	r15, r15
     b4e:	ee 0c       	add	r14, r14
     b50:	ff 1c       	adc	r15, r15
     b52:	f7 01       	movw	r30, r14
     b54:	ea 5d       	subi	r30, 0xDA	; 218
     b56:	fe 4f       	sbci	r31, 0xFE	; 254
     b58:	20 81       	ld	r18, Z
     b5a:	31 81       	ldd	r19, Z+1	; 0x01
     b5c:	42 81       	ldd	r20, Z+2	; 0x02
     b5e:	53 81       	ldd	r21, Z+3	; 0x03
     b60:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     b64:	6f ab       	std	Y+55, r22	; 0x37
     b66:	7d af       	std	Y+61, r23	; 0x3d
     b68:	c8 2e       	mov	r12, r24
     b6a:	d9 2e       	mov	r13, r25
     b6c:	6d a1       	ldd	r22, Y+37	; 0x25
     b6e:	7e a1       	ldd	r23, Y+38	; 0x26
     b70:	88 27       	eor	r24, r24
     b72:	77 fd       	sbrc	r23, 7
     b74:	80 95       	com	r24
     b76:	98 2f       	mov	r25, r24
     b78:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     b7c:	f7 01       	movw	r30, r14
     b7e:	e2 5e       	subi	r30, 0xE2	; 226
     b80:	fe 4f       	sbci	r31, 0xFE	; 254
     b82:	20 81       	ld	r18, Z
     b84:	31 81       	ldd	r19, Z+1	; 0x01
     b86:	42 81       	ldd	r20, Z+2	; 0x02
     b88:	53 81       	ldd	r21, Z+3	; 0x03
     b8a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
     b8e:	f6 2e       	mov	r15, r22
     b90:	e7 2e       	mov	r14, r23
     b92:	8f af       	std	Y+63, r24	; 0x3f
     b94:	21 96       	adiw	r28, 0x01	; 1
     b96:	9f af       	std	Y+63, r25	; 0x3f
     b98:	21 97       	sbiw	r28, 0x01	; 1
     b9a:	7f a9       	ldd	r23, Y+55	; 0x37
     b9c:	6d ad       	ldd	r22, Y+61	; 0x3d
     b9e:	27 2f       	mov	r18, r23
     ba0:	36 2f       	mov	r19, r22
     ba2:	4c 2d       	mov	r20, r12
     ba4:	5d 2d       	mov	r21, r13
     ba6:	67 2f       	mov	r22, r23
     ba8:	73 2f       	mov	r23, r19
     baa:	8c 2d       	mov	r24, r12
     bac:	9d 2d       	mov	r25, r13
     bae:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     bb2:	6f ab       	std	Y+55, r22	; 0x37
     bb4:	78 af       	std	Y+56, r23	; 0x38
     bb6:	89 af       	std	Y+57, r24	; 0x39
     bb8:	9a af       	std	Y+58, r25	; 0x3a
     bba:	9f ad       	ldd	r25, Y+63	; 0x3f
     bbc:	21 96       	adiw	r28, 0x01	; 1
     bbe:	8f ad       	ldd	r24, Y+63	; 0x3f
     bc0:	21 97       	sbiw	r28, 0x01	; 1
     bc2:	2f 2d       	mov	r18, r15
     bc4:	3e 2d       	mov	r19, r14
     bc6:	49 2f       	mov	r20, r25
     bc8:	58 2f       	mov	r21, r24
     bca:	6f 2d       	mov	r22, r15
     bcc:	7e 2d       	mov	r23, r14
     bce:	89 2f       	mov	r24, r25
     bd0:	95 2f       	mov	r25, r21
     bd2:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     bd6:	9b 01       	movw	r18, r22
     bd8:	ac 01       	movw	r20, r24
     bda:	6f a9       	ldd	r22, Y+55	; 0x37
     bdc:	78 ad       	ldd	r23, Y+56	; 0x38
     bde:	89 ad       	ldd	r24, Y+57	; 0x39
     be0:	9a ad       	ldd	r25, Y+58	; 0x3a
     be2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
     be6:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
     bea:	20 e0       	ldi	r18, 0x00	; 0
     bec:	30 e0       	ldi	r19, 0x00	; 0
     bee:	a9 01       	movw	r20, r18
     bf0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     bf4:	88 23       	and	r24, r24
     bf6:	0c f4       	brge	.+2      	; 0xbfa <__stack+0xfb>
     bf8:	ce c2       	rjmp	.+1436   	; 0x1196 <__stack+0x697>
						//                                stop_counter++;
						//                            }
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	4c e8       	ldi	r20, 0x8C	; 140
     c00:	52 e4       	ldi	r21, 0x42	; 66
     c02:	c5 01       	movw	r24, r10
     c04:	b4 01       	movw	r22, r8
     c06:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
     c0a:	18 16       	cp	r1, r24
     c0c:	0c f4       	brge	.+2      	; 0xc10 <__stack+0x111>
     c0e:	c8 c2       	rjmp	.+1424   	; 0x11a0 <__stack+0x6a1>
						//set(PORTD,5);
					}
					else
					{
						//clear(PORTD,5);
						move_robot_to_puck(diff_theta,bank);
     c10:	6d 81       	ldd	r22, Y+5	; 0x05
     c12:	7e 81       	ldd	r23, Y+6	; 0x06
     c14:	c8 01       	movw	r24, r16
     c16:	0e 94 11 02 	call	0x422	; 0x422 <move_robot_to_puck>
     c1a:	ce c2       	rjmp	.+1436   	; 0x11b8 <__stack+0x6b9>
					}
		
				}
				else if (status_go_to_goal == 2){
     c1c:	2b ad       	ldd	r18, Y+59	; 0x3b
     c1e:	3c ad       	ldd	r19, Y+60	; 0x3c
     c20:	22 30       	cpi	r18, 0x02	; 2
     c22:	31 05       	cpc	r19, r1
     c24:	b1 f5       	brne	.+108    	; 0xc92 <__stack+0x193>
		
					calculate_diff_theta(0,&diff_theta, &bank);
     c26:	9e 01       	movw	r18, r28
     c28:	2b 5f       	subi	r18, 0xFB	; 251
     c2a:	3f 4f       	sbci	r19, 0xFF	; 255
     c2c:	ae 01       	movw	r20, r28
     c2e:	4f 5f       	subi	r20, 0xFF	; 255
     c30:	5f 4f       	sbci	r21, 0xFF	; 255
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	cb 01       	movw	r24, r22
     c38:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
		
					status_go_to_goal = 3;
		
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
     c3c:	c9 80       	ldd	r12, Y+1	; 0x01
     c3e:	da 80       	ldd	r13, Y+2	; 0x02
     c40:	eb 80       	ldd	r14, Y+3	; 0x03
     c42:	fc 80       	ldd	r15, Y+4	; 0x04
     c44:	20 e0       	ldi	r18, 0x00	; 0
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	4c e0       	ldi	r20, 0x0C	; 12
     c4a:	52 e4       	ldi	r21, 0x42	; 66
     c4c:	c7 01       	movw	r24, r14
     c4e:	b6 01       	movw	r22, r12
     c50:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     c54:	88 23       	and	r24, r24
     c56:	0c f4       	brge	.+2      	; 0xc5a <__stack+0x15b>
     c58:	a6 c2       	rjmp	.+1356   	; 0x11a6 <__stack+0x6a7>
						//m_wait(1000);
						//set(PORTD,5);
					}
					else
					{
						if (bank == 0)
     c5a:	8d 81       	ldd	r24, Y+5	; 0x05
     c5c:	9e 81       	ldd	r25, Y+6	; 0x06
     c5e:	89 2b       	or	r24, r25
     c60:	61 f4       	brne	.+24     	; 0xc7a <__stack+0x17b>
						turn_left_puck(diff_theta);
     c62:	c7 01       	movw	r24, r14
     c64:	b6 01       	movw	r22, r12
     c66:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
     c6a:	cb 01       	movw	r24, r22
     c6c:	0e 94 99 02 	call	0x532	; 0x532 <turn_left_puck>
				}
				else if (status_go_to_goal == 2){
		
					calculate_diff_theta(0,&diff_theta, &bank);
		
					status_go_to_goal = 3;
     c70:	43 e0       	ldi	r20, 0x03	; 3
     c72:	50 e0       	ldi	r21, 0x00	; 0
     c74:	5c af       	std	Y+60, r21	; 0x3c
     c76:	4b af       	std	Y+59, r20	; 0x3b
     c78:	9f c2       	rjmp	.+1342   	; 0x11b8 <__stack+0x6b9>
					else
					{
						if (bank == 0)
						turn_left_puck(diff_theta);
						else
						turn_right_puck(diff_theta);
     c7a:	c7 01       	movw	r24, r14
     c7c:	b6 01       	movw	r22, r12
     c7e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
     c82:	cb 01       	movw	r24, r22
     c84:	0e 94 b5 02 	call	0x56a	; 0x56a <turn_right_puck>
				}
				else if (status_go_to_goal == 2){
		
					calculate_diff_theta(0,&diff_theta, &bank);
		
					status_go_to_goal = 3;
     c88:	83 e0       	ldi	r24, 0x03	; 3
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	9c af       	std	Y+60, r25	; 0x3c
     c8e:	8b af       	std	Y+59, r24	; 0x3b
     c90:	93 c2       	rjmp	.+1318   	; 0x11b8 <__stack+0x6b9>
						else
						turn_right_puck(diff_theta);
					}
		
				}
				else if (status_go_to_goal == 3)
     c92:	eb ad       	ldd	r30, Y+59	; 0x3b
     c94:	fc ad       	ldd	r31, Y+60	; 0x3c
     c96:	33 97       	sbiw	r30, 0x03	; 3
     c98:	09 f0       	breq	.+2      	; 0xc9c <__stack+0x19d>
     c9a:	8e c2       	rjmp	.+1308   	; 0x11b8 <__stack+0x6b9>
				{
					//stop_motor();
					if (TARGET_NUM == 0) {
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	25 96       	adiw	r28, 0x05	; 5
     ca0:	2e ad       	ldd	r18, Y+62	; 0x3e
     ca2:	3f ad       	ldd	r19, Y+63	; 0x3f
     ca4:	25 97       	sbiw	r28, 0x05	; 5
     ca6:	23 2b       	or	r18, r19
     ca8:	09 f0       	breq	.+2      	; 0xcac <__stack+0x1ad>
     caa:	80 e0       	ldi	r24, 0x00	; 0
						TARGET_NUM = 1;
     cac:	48 2f       	mov	r20, r24
     cae:	50 e0       	ldi	r21, 0x00	; 0
     cb0:	25 96       	adiw	r28, 0x05	; 5
     cb2:	5f af       	std	Y+63, r21	; 0x3f
     cb4:	4e af       	std	Y+62, r20	; 0x3e
     cb6:	25 97       	sbiw	r28, 0x05	; 5
					}
					else {
						TARGET_NUM = 0;
					}
					status_go_to_goal = 0;
					state = FIND_PUCK;
     cb8:	83 e0       	ldi	r24, 0x03	; 3
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	90 93 01 01 	sts	0x0101, r25
     cc0:	80 93 00 01 	sts	0x0100, r24
						TARGET_NUM = 1;
					}
					else {
						TARGET_NUM = 0;
					}
					status_go_to_goal = 0;
     cc4:	1c ae       	std	Y+60, r1	; 0x3c
     cc6:	1b ae       	std	Y+59, r1	; 0x3b
     cc8:	77 c2       	rjmp	.+1262   	; 0x11b8 <__stack+0x6b9>
				//}
				//
	
	
				//Check if we have the puck
				if (PT2_left_inside > 1010 &&  PT3_right_inside > 1010)
     cca:	03 3f       	cpi	r16, 0xF3	; 243
     ccc:	53 e0       	ldi	r21, 0x03	; 3
     cce:	15 07       	cpc	r17, r21
     cd0:	74 f0       	brlt	.+28     	; 0xcee <__stack+0x1ef>
     cd2:	83 ef       	ldi	r24, 0xF3	; 243
     cd4:	a8 16       	cp	r10, r24
     cd6:	83 e0       	ldi	r24, 0x03	; 3
     cd8:	b8 06       	cpc	r11, r24
     cda:	4c f0       	brlt	.+18     	; 0xcee <__stack+0x1ef>
				{
					state = GO_TO_GOAL_WITH_PUCK;
     cdc:	85 e0       	ldi	r24, 0x05	; 5
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	90 93 01 01 	sts	0x0101, r25
     ce4:	80 93 00 01 	sts	0x0100, r24
					//turnOnBlueLED();
		
					status_go_to_goal = 0;
     ce8:	1c ae       	std	Y+60, r1	; 0x3c
     cea:	1b ae       	std	Y+59, r1	; 0x3b
					break;
     cec:	65 c2       	rjmp	.+1226   	; 0x11b8 <__stack+0x6b9>
				max_lr = 0;
				else
				max_lr = 1;
	
				//Check if the puck is up or down
				if (max_lr == 0)
     cee:	ce 14       	cp	r12, r14
     cf0:	df 04       	cpc	r13, r15
     cf2:	54 f4       	brge	.+20     	; 0xd08 <__stack+0x209>
				{
					if (PT1_left_outside >= PT6_back_left)
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	e8 14       	cp	r14, r8
     cfa:	f9 04       	cpc	r15, r9
     cfc:	14 f0       	brlt	.+4      	; 0xd02 <__stack+0x203>
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
					half_range = 0;
					else
					half_range = 1;
     d02:	9e af       	std	Y+62, r25	; 0x3e
     d04:	8d af       	std	Y+61, r24	; 0x3d
     d06:	0b c0       	rjmp	.+22     	; 0xd1e <__stack+0x21f>
				}
				else
				{
					if (PT4_right_outside >= PT5_back_right)
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	ef a9       	ldd	r30, Y+55	; 0x37
     d0e:	f8 ad       	ldd	r31, Y+56	; 0x38
     d10:	ce 16       	cp	r12, r30
     d12:	df 06       	cpc	r13, r31
     d14:	14 f0       	brlt	.+4      	; 0xd1a <__stack+0x21b>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
				if (max_lr == 0)
				{
					if (PT1_left_outside >= PT6_back_left)
					half_range = 0;
					else
					half_range = 1;
     d1a:	9e af       	std	Y+62, r25	; 0x3e
     d1c:	8d af       	std	Y+61, r24	; 0x3d
				max_pt_backs = PT6_back_left;
	
	
	
				//                // If Insides see the puck
				if (PT1_left_outside < NOT_SEE_PUCK && PT2_left_inside < NOT_SEE_PUCK && PT3_right_inside < NOT_SEE_PUCK && PT4_right_outside < NOT_SEE_PUCK && PT5_back_right < NOT_SEE_PUCK && PT6_back_left < NOT_SEE_PUCK)
     d1e:	fc e2       	ldi	r31, 0x2C	; 44
     d20:	ef 16       	cp	r14, r31
     d22:	f1 e0       	ldi	r31, 0x01	; 1
     d24:	ff 06       	cpc	r15, r31
     d26:	fc f4       	brge	.+62     	; 0xd66 <__stack+0x267>
     d28:	0c 32       	cpi	r16, 0x2C	; 44
     d2a:	21 e0       	ldi	r18, 0x01	; 1
     d2c:	12 07       	cpc	r17, r18
     d2e:	dc f4       	brge	.+54     	; 0xd66 <__stack+0x267>
     d30:	3c e2       	ldi	r19, 0x2C	; 44
     d32:	a3 16       	cp	r10, r19
     d34:	31 e0       	ldi	r19, 0x01	; 1
     d36:	b3 06       	cpc	r11, r19
     d38:	b4 f4       	brge	.+44     	; 0xd66 <__stack+0x267>
     d3a:	4c e2       	ldi	r20, 0x2C	; 44
     d3c:	c4 16       	cp	r12, r20
     d3e:	41 e0       	ldi	r20, 0x01	; 1
     d40:	d4 06       	cpc	r13, r20
     d42:	8c f4       	brge	.+34     	; 0xd66 <__stack+0x267>
     d44:	8f a9       	ldd	r24, Y+55	; 0x37
     d46:	98 ad       	ldd	r25, Y+56	; 0x38
     d48:	8c 32       	cpi	r24, 0x2C	; 44
     d4a:	91 40       	sbci	r25, 0x01	; 1
     d4c:	64 f4       	brge	.+24     	; 0xd66 <__stack+0x267>
     d4e:	fc e2       	ldi	r31, 0x2C	; 44
     d50:	8f 16       	cp	r8, r31
     d52:	f1 e0       	ldi	r31, 0x01	; 1
     d54:	9f 06       	cpc	r9, r31
     d56:	3c f4       	brge	.+14     	; 0xd66 <__stack+0x267>
				{
					//turnOffBlueLED();
					state = GO_TO_WPT;
     d58:	80 e5       	ldi	r24, 0x50	; 80
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	90 93 01 01 	sts	0x0101, r25
     d60:	80 93 00 01 	sts	0x0100, r24
					break;
     d64:	29 c2       	rjmp	.+1106   	; 0x11b8 <__stack+0x6b9>
				}
	
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700)))
     d66:	b8 01       	movw	r22, r16
     d68:	6a 0d       	add	r22, r10
     d6a:	7b 1d       	adc	r23, r11
     d6c:	88 27       	eor	r24, r24
     d6e:	77 fd       	sbrc	r23, 7
     d70:	80 95       	com	r24
     d72:	98 2f       	mov	r25, r24
     d74:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	5f e3       	ldi	r21, 0x3F	; 63
     d80:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     d84:	6f af       	std	Y+63, r22	; 0x3f
     d86:	21 96       	adiw	r28, 0x01	; 1
     d88:	7f af       	std	Y+63, r23	; 0x3f
     d8a:	21 97       	sbiw	r28, 0x01	; 1
     d8c:	26 96       	adiw	r28, 0x06	; 6
     d8e:	8f af       	std	Y+63, r24	; 0x3f
     d90:	26 97       	sbiw	r28, 0x06	; 6
     d92:	27 96       	adiw	r28, 0x07	; 7
     d94:	9f af       	std	Y+63, r25	; 0x3f
     d96:	27 97       	sbiw	r28, 0x07	; 7
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	48 e4       	ldi	r20, 0x48	; 72
     d9e:	53 e4       	ldi	r21, 0x43	; 67
     da0:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
     da4:	88 23       	and	r24, r24
     da6:	44 f1       	brlt	.+80     	; 0xdf8 <__stack+0x2f9>
     da8:	2d eb       	ldi	r18, 0xBD	; 189
     daa:	e2 16       	cp	r14, r18
     dac:	22 e0       	ldi	r18, 0x02	; 2
     dae:	f2 06       	cpc	r15, r18
     db0:	1c f5       	brge	.+70     	; 0xdf8 <__stack+0x2f9>
     db2:	3d eb       	ldi	r19, 0xBD	; 189
     db4:	c3 16       	cp	r12, r19
     db6:	32 e0       	ldi	r19, 0x02	; 2
     db8:	d3 06       	cpc	r13, r19
     dba:	f4 f4       	brge	.+60     	; 0xdf8 <__stack+0x2f9>
				{
					//turnOnBlueLED();
					status_go_to_goal = 1;
					int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
     dbc:	c8 01       	movw	r24, r16
     dbe:	8a 19       	sub	r24, r10
     dc0:	9b 09       	sbc	r25, r11
     dc2:	1a f4       	brpl	.+6      	; 0xdca <__stack+0x2cb>
     dc4:	91 95       	neg	r25
     dc6:	81 95       	neg	r24
     dc8:	91 09       	sbc	r25, r1
     dca:	68 2f       	mov	r22, r24
     dcc:	79 2f       	mov	r23, r25
					if (PT2_left_inside >= PT3_right_inside)
     dce:	0a 15       	cp	r16, r10
     dd0:	1b 05       	cpc	r17, r11
     dd2:	4c f0       	brlt	.+18     	; 0xde6 <__stack+0x2e7>
					{
						move_robot_to_puck(1,diff_PT_inside);
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 11 02 	call	0x422	; 0x422 <move_robot_to_puck>
				}
	
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700)))
				{
					//turnOnBlueLED();
					status_go_to_goal = 1;
     ddc:	41 e0       	ldi	r20, 0x01	; 1
     dde:	50 e0       	ldi	r21, 0x00	; 0
     de0:	5c af       	std	Y+60, r21	; 0x3c
     de2:	4b af       	std	Y+59, r20	; 0x3b
     de4:	e9 c1       	rjmp	.+978    	; 0x11b8 <__stack+0x6b9>
						move_robot_to_puck(1,diff_PT_inside);
			
					}
					else
					{
						move_robot_to_puck(0,diff_PT_inside);
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 11 02 	call	0x422	; 0x422 <move_robot_to_puck>
				}
	
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700)))
				{
					//turnOnBlueLED();
					status_go_to_goal = 1;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	9c af       	std	Y+60, r25	; 0x3c
     df4:	8b af       	std	Y+59, r24	; 0x3b
     df6:	e0 c1       	rjmp	.+960    	; 0x11b8 <__stack+0x6b9>
					{
						move_robot_to_puck(0,diff_PT_inside);
					}
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	48 e4       	ldi	r20, 0x48	; 72
     dfe:	53 e4       	ldi	r21, 0x43	; 67
     e00:	ef ad       	ldd	r30, Y+63	; 0x3f
     e02:	21 96       	adiw	r28, 0x01	; 1
     e04:	bf ad       	ldd	r27, Y+63	; 0x3f
     e06:	21 97       	sbiw	r28, 0x01	; 1
     e08:	26 96       	adiw	r28, 0x06	; 6
     e0a:	af ad       	ldd	r26, Y+63	; 0x3f
     e0c:	26 97       	sbiw	r28, 0x06	; 6
     e0e:	27 96       	adiw	r28, 0x07	; 7
     e10:	ff ad       	ldd	r31, Y+63	; 0x3f
     e12:	27 97       	sbiw	r28, 0x07	; 7
     e14:	6e 2f       	mov	r22, r30
     e16:	7b 2f       	mov	r23, r27
     e18:	8a 2f       	mov	r24, r26
     e1a:	9f 2f       	mov	r25, r31
     e1c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     e20:	88 23       	and	r24, r24
     e22:	8c f5       	brge	.+98     	; 0xe86 <__stack+0x387>
     e24:	95 e6       	ldi	r25, 0x65	; 101
     e26:	e9 16       	cp	r14, r25
     e28:	f1 04       	cpc	r15, r1
     e2a:	6c f4       	brge	.+26     	; 0xe46 <__stack+0x347>
     e2c:	e5 e6       	ldi	r30, 0x65	; 101
     e2e:	ce 16       	cp	r12, r30
     e30:	d1 04       	cpc	r13, r1
     e32:	4c f4       	brge	.+18     	; 0xe46 <__stack+0x347>
     e34:	f5 e6       	ldi	r31, 0x65	; 101
     e36:	8f 16       	cp	r8, r31
     e38:	91 04       	cpc	r9, r1
     e3a:	2c f4       	brge	.+10     	; 0xe46 <__stack+0x347>
     e3c:	2f a9       	ldd	r18, Y+55	; 0x37
     e3e:	38 ad       	ldd	r19, Y+56	; 0x38
     e40:	25 36       	cpi	r18, 0x65	; 101
     e42:	31 05       	cpc	r19, r1
     e44:	04 f1       	brlt	.+64     	; 0xe86 <__stack+0x387>
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
					//Case where the puck is in front
					if (half_range == 0)
     e46:	4d ad       	ldd	r20, Y+61	; 0x3d
     e48:	5e ad       	ldd	r21, Y+62	; 0x3e
     e4a:	45 2b       	or	r20, r21
     e4c:	69 f4       	brne	.+26     	; 0xe68 <__stack+0x369>
					{
						if (PT1_left_outside >= PT4_right_outside)
     e4e:	ec 14       	cp	r14, r12
     e50:	fd 04       	cpc	r15, r13
     e52:	2c f0       	brlt	.+10     	; 0xe5e <__stack+0x35f>
						{
							turn_left();
     e54:	0e 94 8a 02 	call	0x514	; 0x514 <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
     e58:	1c ae       	std	Y+60, r1	; 0x3c
     e5a:	1b ae       	std	Y+59, r1	; 0x3b
     e5c:	ad c1       	rjmp	.+858    	; 0x11b8 <__stack+0x6b9>
						if (PT1_left_outside >= PT4_right_outside)
						{
							turn_left();
						}
						else
						turn_right();
     e5e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
     e62:	1c ae       	std	Y+60, r1	; 0x3c
     e64:	1b ae       	std	Y+59, r1	; 0x3b
     e66:	a8 c1       	rjmp	.+848    	; 0x11b8 <__stack+0x6b9>
						else
						turn_right();
					}
					else
					{
						if (PT6_back_left >= PT5_back_right)
     e68:	8f a9       	ldd	r24, Y+55	; 0x37
     e6a:	98 ad       	ldd	r25, Y+56	; 0x38
     e6c:	88 16       	cp	r8, r24
     e6e:	99 06       	cpc	r9, r25
     e70:	2c f0       	brlt	.+10     	; 0xe7c <__stack+0x37d>
						{
							turn_left();
     e72:	0e 94 8a 02 	call	0x514	; 0x514 <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
     e76:	1c ae       	std	Y+60, r1	; 0x3c
     e78:	1b ae       	std	Y+59, r1	; 0x3b
     e7a:	9e c1       	rjmp	.+828    	; 0x11b8 <__stack+0x6b9>
						if (PT6_back_left >= PT5_back_right)
						{
							turn_left();
						}
						else
						turn_right();
     e7c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					//turnOffBlueLED();
					status_go_to_goal = 0;
     e80:	1c ae       	std	Y+60, r1	; 0x3c
     e82:	1b ae       	std	Y+59, r1	; 0x3b
     e84:	99 c1       	rjmp	.+818    	; 0x11b8 <__stack+0x6b9>
						turn_right();
			
					}
				}
				else{
					state = GO_TO_WPT;
     e86:	80 e5       	ldi	r24, 0x50	; 80
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	90 93 01 01 	sts	0x0101, r25
     e8e:	80 93 00 01 	sts	0x0100, r24
     e92:	92 c1       	rjmp	.+804    	; 0x11b8 <__stack+0x6b9>
	
				// --------------------------------------------------------------
				// INITIAL STATE
				// --------------------------------------------------------------
				case INITIAL_STATE:
				if (check(PINB,2))
     e94:	1a 9b       	sbis	0x03, 2	; 3
     e96:	07 c0       	rjmp	.+14     	; 0xea6 <__stack+0x3a7>
				{
					goal_pos_x = GOAL_A_POS_X;
     e98:	ec e9       	ldi	r30, 0x9C	; 156
     e9a:	ff ef       	ldi	r31, 0xFF	; 255
     e9c:	23 96       	adiw	r28, 0x03	; 3
     e9e:	ff af       	std	Y+63, r31	; 0x3f
     ea0:	ee af       	std	Y+62, r30	; 0x3e
     ea2:	23 97       	sbiw	r28, 0x03	; 3
     ea4:	06 c0       	rjmp	.+12     	; 0xeb2 <__stack+0x3b3>
					//                        goal_pos_y = TARGETS_Y[TARGET_NUM];
					//
				}
				else
				{
					goal_pos_x = GOAL_B_POS_X;
     ea6:	23 e7       	ldi	r18, 0x73	; 115
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	23 96       	adiw	r28, 0x03	; 3
     eac:	3f af       	std	Y+63, r19	; 0x3f
     eae:	2e af       	std	Y+62, r18	; 0x3e
     eb0:	23 97       	sbiw	r28, 0x03	; 3
					goal_pos_y = GOAL_B_POS_Y;
				}
				status_go_to_goal = 0;
				//                    state = GO_TO_GOAL_CURVED;
				state = FIND_PUCK;
     eb2:	83 e0       	ldi	r24, 0x03	; 3
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	90 93 01 01 	sts	0x0101, r25
     eba:	80 93 00 01 	sts	0x0100, r24
				else
				{
					goal_pos_x = GOAL_B_POS_X;
					goal_pos_y = GOAL_B_POS_Y;
				}
				status_go_to_goal = 0;
     ebe:	1c ae       	std	Y+60, r1	; 0x3c
     ec0:	1b ae       	std	Y+59, r1	; 0x3b
				//                    state = GO_TO_GOAL_CURVED;
				state = FIND_PUCK;
				//state = GO_TO_WPT;
				break;
     ec2:	7a c1       	rjmp	.+756    	; 0x11b8 <__stack+0x6b9>
				// GO TO GOAL WITH PUCK
				// --------------------------------------------------------------
	
				case GO_TO_GOAL_WITH_PUCK:
	
					if ( PT2_left_inside < 900 || PT3_right_inside < 900 )
     ec4:	04 38       	cpi	r16, 0x84	; 132
     ec6:	13 40       	sbci	r17, 0x03	; 3
     ec8:	2c f0       	brlt	.+10     	; 0xed4 <__stack+0x3d5>
     eca:	44 e8       	ldi	r20, 0x84	; 132
     ecc:	a4 16       	cp	r10, r20
     ece:	43 e0       	ldi	r20, 0x03	; 3
     ed0:	b4 06       	cpc	r11, r20
     ed2:	4c f4       	brge	.+18     	; 0xee6 <__stack+0x3e7>
					{
						state = FIND_PUCK;
     ed4:	83 e0       	ldi	r24, 0x03	; 3
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	90 93 01 01 	sts	0x0101, r25
     edc:	80 93 00 01 	sts	0x0100, r24
						status_go_to_goal = 0;
     ee0:	1c ae       	std	Y+60, r1	; 0x3c
     ee2:	1b ae       	std	Y+59, r1	; 0x3b
						break;
     ee4:	69 c1       	rjmp	.+722    	; 0x11b8 <__stack+0x6b9>
					}
	
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
     ee6:	0b a1       	ldd	r16, Y+35	; 0x23
     ee8:	1c a1       	ldd	r17, Y+36	; 0x24
     eea:	c8 01       	movw	r24, r16
     eec:	23 96       	adiw	r28, 0x03	; 3
     eee:	ee ad       	ldd	r30, Y+62	; 0x3e
     ef0:	ff ad       	ldd	r31, Y+63	; 0x3f
     ef2:	23 97       	sbiw	r28, 0x03	; 3
     ef4:	8e 1b       	sub	r24, r30
     ef6:	9f 0b       	sbc	r25, r31
     ef8:	ed a0       	ldd	r14, Y+37	; 0x25
     efa:	fe a0       	ldd	r15, Y+38	; 0x26
     efc:	88 9f       	mul	r24, r24
     efe:	b0 01       	movw	r22, r0
     f00:	89 9f       	mul	r24, r25
     f02:	70 0d       	add	r23, r0
     f04:	70 0d       	add	r23, r0
     f06:	11 24       	eor	r1, r1
     f08:	ee 9c       	mul	r14, r14
     f0a:	c0 01       	movw	r24, r0
     f0c:	ef 9c       	mul	r14, r15
     f0e:	90 0d       	add	r25, r0
     f10:	90 0d       	add	r25, r0
     f12:	11 24       	eor	r1, r1
     f14:	68 0f       	add	r22, r24
     f16:	79 1f       	adc	r23, r25
     f18:	88 27       	eor	r24, r24
     f1a:	77 fd       	sbrc	r23, 7
     f1c:	80 95       	com	r24
     f1e:	98 2f       	mov	r25, r24
     f20:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     f24:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
     f28:	20 e0       	ldi	r18, 0x00	; 0
     f2a:	30 e0       	ldi	r19, 0x00	; 0
     f2c:	a9 01       	movw	r20, r18
     f2e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     f32:	88 23       	and	r24, r24
     f34:	4c f4       	brge	.+18     	; 0xf48 <__stack+0x449>
					{
						status_go_to_goal = 0;
						state  = FIND_PUCK;
     f36:	83 e0       	ldi	r24, 0x03	; 3
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	90 93 01 01 	sts	0x0101, r25
     f3e:	80 93 00 01 	sts	0x0100, r24
					}
	
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 0;
     f42:	1c ae       	std	Y+60, r1	; 0x3c
     f44:	1b ae       	std	Y+59, r1	; 0x3b
						state  = FIND_PUCK;
						break;
     f46:	38 c1       	rjmp	.+624    	; 0x11b8 <__stack+0x6b9>
					}
	
					if (status_go_to_goal == 0)
     f48:	2b ad       	ldd	r18, Y+59	; 0x3b
     f4a:	3c ad       	ldd	r19, Y+60	; 0x3c
     f4c:	23 2b       	or	r18, r19
     f4e:	09 f0       	breq	.+2      	; 0xf52 <__stack+0x453>
     f50:	4b c0       	rjmp	.+150    	; 0xfe8 <__stack+0x4e9>
					{
		
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
     f52:	66 27       	eor	r22, r22
     f54:	77 27       	eor	r23, r23
     f56:	6e 19       	sub	r22, r14
     f58:	7f 09       	sbc	r23, r15
     f5a:	88 27       	eor	r24, r24
     f5c:	77 fd       	sbrc	r23, 7
     f5e:	80 95       	com	r24
     f60:	98 2f       	mov	r25, r24
     f62:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
     f66:	6b 01       	movw	r12, r22
     f68:	7c 01       	movw	r14, r24
					}
	
					if (status_go_to_goal == 0)
					{
		
						dir_x = goal_pos_x-x_robot;
     f6a:	23 96       	adiw	r28, 0x03	; 3
     f6c:	6e ad       	ldd	r22, Y+62	; 0x3e
     f6e:	7f ad       	ldd	r23, Y+63	; 0x3f
     f70:	23 97       	sbiw	r28, 0x03	; 3
     f72:	60 1b       	sub	r22, r16
     f74:	71 0b       	sbc	r23, r17
     f76:	88 27       	eor	r24, r24
     f78:	77 fd       	sbrc	r23, 7
     f7a:	80 95       	com	r24
     f7c:	98 2f       	mov	r25, r24
     f7e:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
     f82:	90 58       	subi	r25, 0x80	; 128
     f84:	a7 01       	movw	r20, r14
     f86:	96 01       	movw	r18, r12
     f88:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <atan2>
     f8c:	20 e0       	ldi	r18, 0x00	; 0
     f8e:	30 e0       	ldi	r19, 0x00	; 0
     f90:	44 e3       	ldi	r20, 0x34	; 52
     f92:	53 e4       	ldi	r21, 0x43	; 67
     f94:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
     f98:	2b ed       	ldi	r18, 0xDB	; 219
     f9a:	3f e0       	ldi	r19, 0x0F	; 15
     f9c:	49 e4       	ldi	r20, 0x49	; 73
     f9e:	50 e4       	ldi	r21, 0x40	; 64
     fa0:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__divsf3>
		
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
     fa4:	9e 01       	movw	r18, r28
     fa6:	2b 5f       	subi	r18, 0xFB	; 251
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	ae 01       	movw	r20, r28
     fac:	4f 5f       	subi	r20, 0xFF	; 255
     fae:	5f 4f       	sbci	r21, 0xFF	; 255
     fb0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
		
						if (diff_theta <20)
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 ea       	ldi	r20, 0xA0	; 160
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	69 81       	ldd	r22, Y+1	; 0x01
     fbe:	7a 81       	ldd	r23, Y+2	; 0x02
     fc0:	8b 81       	ldd	r24, Y+3	; 0x03
     fc2:	9c 81       	ldd	r25, Y+4	; 0x04
     fc4:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
     fc8:	88 23       	and	r24, r24
     fca:	0c f4       	brge	.+2      	; 0xfce <__stack+0x4cf>
     fcc:	f1 c0       	rjmp	.+482    	; 0x11b0 <__stack+0x6b1>
							break;
						}
						else
						{
			
							if (bank == 0)
     fce:	8d 81       	ldd	r24, Y+5	; 0x05
     fd0:	9e 81       	ldd	r25, Y+6	; 0x06
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	19 f4       	brne	.+6      	; 0xfdc <__stack+0x4dd>
							{
								//turnOnBlueLED();
								circle_left();
     fd6:	0e 94 ef 02 	call	0x5de	; 0x5de <circle_left>
     fda:	ee c0       	rjmp	.+476    	; 0x11b8 <__stack+0x6b9>
								circle_started_before = 1;
							}
							else if (bank == 1)
     fdc:	01 97       	sbiw	r24, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <__stack+0x4e3>
     fe0:	eb c0       	rjmp	.+470    	; 0x11b8 <__stack+0x6b9>
							{
								//turnOffBlueLED();
								circle_right();
     fe2:	0e 94 fe 02 	call	0x5fc	; 0x5fc <circle_right>
     fe6:	e8 c0       	rjmp	.+464    	; 0x11b8 <__stack+0x6b9>
								circle_started_before = 1;
							}
			
						}
					}
					else if (status_go_to_goal == 1)
     fe8:	4b ad       	ldd	r20, Y+59	; 0x3b
     fea:	5c ad       	ldd	r21, Y+60	; 0x3c
     fec:	41 30       	cpi	r20, 0x01	; 1
     fee:	51 05       	cpc	r21, r1
     ff0:	09 f0       	breq	.+2      	; 0xff4 <__stack+0x4f5>
     ff2:	e2 c0       	rjmp	.+452    	; 0x11b8 <__stack+0x6b9>
					{
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
     ff4:	66 27       	eor	r22, r22
     ff6:	77 27       	eor	r23, r23
     ff8:	6e 19       	sub	r22, r14
     ffa:	7f 09       	sbc	r23, r15
     ffc:	88 27       	eor	r24, r24
     ffe:	77 fd       	sbrc	r23, 7
    1000:	80 95       	com	r24
    1002:	98 2f       	mov	r25, r24
    1004:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    1008:	6b 01       	movw	r12, r22
    100a:	7c 01       	movw	r14, r24
			
						}
					}
					else if (status_go_to_goal == 1)
					{
						dir_x = goal_pos_x-x_robot;
    100c:	23 96       	adiw	r28, 0x03	; 3
    100e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1010:	7f ad       	ldd	r23, Y+63	; 0x3f
    1012:	23 97       	sbiw	r28, 0x03	; 3
    1014:	60 1b       	sub	r22, r16
    1016:	71 0b       	sbc	r23, r17
    1018:	88 27       	eor	r24, r24
    101a:	77 fd       	sbrc	r23, 7
    101c:	80 95       	com	r24
    101e:	98 2f       	mov	r25, r24
    1020:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1024:	90 58       	subi	r25, 0x80	; 128
    1026:	a7 01       	movw	r20, r14
    1028:	96 01       	movw	r18, r12
    102a:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <atan2>
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	44 e3       	ldi	r20, 0x34	; 52
    1034:	53 e4       	ldi	r21, 0x43	; 67
    1036:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    103a:	2b ed       	ldi	r18, 0xDB	; 219
    103c:	3f e0       	ldi	r19, 0x0F	; 15
    103e:	49 e4       	ldi	r20, 0x49	; 73
    1040:	50 e4       	ldi	r21, 0x40	; 64
    1042:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__divsf3>
		
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    1046:	9e 01       	movw	r18, r28
    1048:	2b 5f       	subi	r18, 0xFB	; 251
    104a:	3f 4f       	sbci	r19, 0xFF	; 255
    104c:	ae 01       	movw	r20, r28
    104e:	4f 5f       	subi	r20, 0xFF	; 255
    1050:	5f 4f       	sbci	r21, 0xFF	; 255
    1052:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <calculate_diff_theta>
		
						move_robot_after_get_puck(bank,diff_theta);
    1056:	69 81       	ldd	r22, Y+1	; 0x01
    1058:	7a 81       	ldd	r23, Y+2	; 0x02
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	0e 94 3d 02 	call	0x47a	; 0x47a <move_robot_after_get_puck>
    106a:	a6 c0       	rjmp	.+332    	; 0x11b8 <__stack+0x6b9>
				
				// --------------------------------------------------------------
				// SYSTEM STATE
				// --------------------------------------------------------------
				case SYSTEM_STATE:
					m_red(TOGGLE);
    106c:	6e 9a       	sbi	0x0d, 6	; 13
    106e:	9e b1       	in	r25, 0x0e	; 14
    1070:	80 e4       	ldi	r24, 0x40	; 64
    1072:	89 27       	eor	r24, r25
    1074:	8e b9       	out	0x0e, r24	; 14
					switch (buffer_rec[0])
    1076:	80 91 12 01 	lds	r24, 0x0112
    107a:	83 3a       	cpi	r24, 0xA3	; 163
    107c:	39 f1       	breq	.+78     	; 0x10cc <__stack+0x5cd>
    107e:	38 f4       	brcc	.+14     	; 0x108e <__stack+0x58f>
    1080:	81 3a       	cpi	r24, 0xA1	; 161
    1082:	a9 f0       	breq	.+42     	; 0x10ae <__stack+0x5af>
    1084:	c8 f4       	brcc	.+50     	; 0x10b8 <__stack+0x5b9>
    1086:	80 3a       	cpi	r24, 0xA0	; 160
    1088:	09 f0       	breq	.+2      	; 0x108c <__stack+0x58d>
    108a:	96 c0       	rjmp	.+300    	; 0x11b8 <__stack+0x6b9>
    108c:	09 c0       	rjmp	.+18     	; 0x10a0 <__stack+0x5a1>
    108e:	86 3a       	cpi	r24, 0xA6	; 166
    1090:	b9 f1       	breq	.+110    	; 0x1100 <__stack+0x601>
    1092:	87 3a       	cpi	r24, 0xA7	; 167
    1094:	09 f4       	brne	.+2      	; 0x1098 <__stack+0x599>
    1096:	44 c0       	rjmp	.+136    	; 0x1120 <__stack+0x621>
    1098:	84 3a       	cpi	r24, 0xA4	; 164
    109a:	09 f0       	breq	.+2      	; 0x109e <__stack+0x59f>
    109c:	8d c0       	rjmp	.+282    	; 0x11b8 <__stack+0x6b9>
    109e:	20 c0       	rjmp	.+64     	; 0x10e0 <__stack+0x5e1>
					{
						//Comm test
						case 0xA0:
						state = BLUE_LED_STATE;
    10a0:	86 e1       	ldi	r24, 0x16	; 22
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	90 93 01 01 	sts	0x0101, r25
    10a8:	80 93 00 01 	sts	0x0100, r24
						break;
    10ac:	85 c0       	rjmp	.+266    	; 0x11b8 <__stack+0x6b9>
						//pause_bool = 0;
						//}else
						//{
						//state = INITIAL_STATE;
						//}
						state = INITIAL_STATE;
    10ae:	10 92 01 01 	sts	0x0101, r1
    10b2:	10 92 00 01 	sts	0x0100, r1
						//turnOnBlueLED();
						break;
    10b6:	80 c0       	rjmp	.+256    	; 0x11b8 <__stack+0x6b9>
					
						//Goal A
						case 0xA2:
						if (check(PINB,2))
    10b8:	83 b1       	in	r24, 0x03	; 3
						celebrate();
						stop_motor();
    10ba:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    10be:	85 e1       	ldi	r24, 0x15	; 21
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	90 93 01 01 	sts	0x0101, r25
    10c6:	80 93 00 01 	sts	0x0100, r24
						break;
    10ca:	76 c0       	rjmp	.+236    	; 0x11b8 <__stack+0x6b9>
					
						//Goal B
						case 0xA3:
						if (!check(PINB,2))
    10cc:	83 b1       	in	r24, 0x03	; 3
						celebrate();
						stop_motor();
    10ce:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    10d2:	85 e1       	ldi	r24, 0x15	; 21
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	90 93 01 01 	sts	0x0101, r25
    10da:	80 93 00 01 	sts	0x0100, r24
						break;
    10de:	6c c0       	rjmp	.+216    	; 0x11b8 <__stack+0x6b9>
					
						//Pause
						case 0xA4:
						pause_bool = 1;
						stop_counter = 0;
						go_bwd();
    10e0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <go_bwd>
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    10ea:	88 3e       	cpi	r24, 0xE8	; 232
    10ec:	53 e0       	ldi	r21, 0x03	; 3
    10ee:	95 07       	cpc	r25, r21
    10f0:	d9 f7       	brne	.-10     	; 0x10e8 <__stack+0x5e9>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    10f2:	85 e1       	ldi	r24, 0x15	; 21
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	90 93 01 01 	sts	0x0101, r25
    10fa:	80 93 00 01 	sts	0x0100, r24
						break;
    10fe:	5c c0       	rjmp	.+184    	; 0x11b8 <__stack+0x6b9>
					
						//Halftime
						case 0xA6:
						stop_counter = 0;
						go_bwd();
    1100:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <go_bwd>
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    110a:	88 3e       	cpi	r24, 0xE8	; 232
    110c:	e3 e0       	ldi	r30, 0x03	; 3
    110e:	9e 07       	cpc	r25, r30
    1110:	d9 f7       	brne	.-10     	; 0x1108 <__stack+0x609>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    1112:	85 e1       	ldi	r24, 0x15	; 21
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	90 93 01 01 	sts	0x0101, r25
    111a:	80 93 00 01 	sts	0x0100, r24
						break;
    111e:	4c c0       	rjmp	.+152    	; 0x11b8 <__stack+0x6b9>
					
						//Game over
						case 0xA7:
						if (check(PINB,2))
    1120:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
							celebrate();
						}
						stop_motor();
    1122:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
						stop_counter = 0;
						go_bwd();
    1126:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <go_bwd>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    1130:	88 3e       	cpi	r24, 0xE8	; 232
    1132:	f3 e0       	ldi	r31, 0x03	; 3
    1134:	9f 07       	cpc	r25, r31
    1136:	d9 f7       	brne	.-10     	; 0x112e <__stack+0x62f>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    1138:	85 e1       	ldi	r24, 0x15	; 21
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	90 93 01 01 	sts	0x0101, r25
    1140:	80 93 00 01 	sts	0x0100, r24
						break;
    1144:	39 c0       	rjmp	.+114    	; 0x11b8 <__stack+0x6b9>
	
				// --------------------------------------------------------------
				// BLUE LED STATE
				// --------------------------------------------------------------
				case BLUE_LED_STATE:
				stop_motor();
    1146:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
				turnOnBlueLED();
    114a:	0e 94 1b 09 	call	0x1236	; 0x1236 <turnOnBlueLED>
    114e:	2f eb       	ldi	r18, 0xBF	; 191
    1150:	37 e2       	ldi	r19, 0x27	; 39
    1152:	49 e0       	ldi	r20, 0x09	; 9
    1154:	21 50       	subi	r18, 0x01	; 1
    1156:	30 40       	sbci	r19, 0x00	; 0
    1158:	40 40       	sbci	r20, 0x00	; 0
    115a:	e1 f7       	brne	.-8      	; 0x1154 <__stack+0x655>
    115c:	00 c0       	rjmp	.+0      	; 0x115e <__stack+0x65f>
    115e:	00 00       	nop
				m_wait(3000);
				turnOffBlueLED();
    1160:	0e 94 1d 09 	call	0x123a	; 0x123a <turnOffBlueLED>
				state = STOP_STATE;
    1164:	85 e1       	ldi	r24, 0x15	; 21
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	90 93 01 01 	sts	0x0101, r25
    116c:	80 93 00 01 	sts	0x0100, r24
				break;
    1170:	23 c0       	rjmp	.+70     	; 0x11b8 <__stack+0x6b9>
				// --------------------------------------------------------------
				// STOP STATE
				// --------------------------------------------------------------
				case STOP_STATE:
				//m_green(ON);
				turnOffBlueLED();
    1172:	0e 94 1d 09 	call	0x123a	; 0x123a <turnOffBlueLED>
				stop_motor();
    1176:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
				break;
    117a:	1e c0       	rjmp	.+60     	; 0x11b8 <__stack+0x6b9>
	
				// --------------------------------------------------------------
				// DEFAULT STATE
				// --------------------------------------------------------------
				default:
				stop_motor();
    117c:	0e 94 81 02 	call	0x502	; 0x502 <stop_motor>
				break;
    1180:	1b c0       	rjmp	.+54     	; 0x11b8 <__stack+0x6b9>
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
    1182:	82 e0       	ldi	r24, 0x02	; 2
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	9c af       	std	Y+60, r25	; 0x3c
    1188:	8b af       	std	Y+59, r24	; 0x3b
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <__stack+0x6b9>
					}
		
		
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
						status_go_to_goal = 1;
    118c:	e1 e0       	ldi	r30, 0x01	; 1
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	fc af       	std	Y+60, r31	; 0x3c
    1192:	eb af       	std	Y+59, r30	; 0x3b
    1194:	11 c0       	rjmp	.+34     	; 0x11b8 <__stack+0x6b9>
				else if (status_go_to_goal == 1)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
    1196:	22 e0       	ldi	r18, 0x02	; 2
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c af       	std	Y+60, r19	; 0x3c
    119c:	2b af       	std	Y+59, r18	; 0x3b
    119e:	0c c0       	rjmp	.+24     	; 0x11b8 <__stack+0x6b9>
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 0;
    11a0:	1c ae       	std	Y+60, r1	; 0x3c
    11a2:	1b ae       	std	Y+59, r1	; 0x3b
    11a4:	09 c0       	rjmp	.+18     	; 0x11b8 <__stack+0x6b9>
		
					status_go_to_goal = 3;
		
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 3;
    11a6:	43 e0       	ldi	r20, 0x03	; 3
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	5c af       	std	Y+60, r21	; 0x3c
    11ac:	4b af       	std	Y+59, r20	; 0x3b
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <__stack+0x6b9>
		
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
		
						if (diff_theta <20)
						{
							status_go_to_goal = 1;
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	9c af       	std	Y+60, r25	; 0x3c
    11b6:	8b af       	std	Y+59, r24	; 0x3b
				//m_green(TOGGLE);
				//m_wait(250);
				//}
				// --------------------------------------------------------------
			}		
			flag_timer = 0;        
    11b8:	10 92 11 01 	sts	0x0111, r1
    11bc:	10 92 10 01 	sts	0x0110, r1
    11c0:	be ca       	rjmp	.-2692   	; 0x73e <main+0x124>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    11c2:	ee 24       	eor	r14, r14
    11c4:	e3 94       	inc	r14
    11c6:	f1 2c       	mov	r15, r1
    11c8:	12 cb       	rjmp	.-2524   	; 0x7ee <main+0x1d4>
					case(6):
					PT7_have_puck = ADC;
					break;
				}
	
				set(ADCSRA,ADIF);               // After doing the conversion reset flag
    11ca:	f1 01       	movw	r30, r2
    11cc:	80 81       	ld	r24, Z
    11ce:	80 61       	ori	r24, 0x10	; 16
    11d0:	80 83       	st	Z, r24
    11d2:	0a cb       	rjmp	.-2540   	; 0x7e8 <main+0x1ce>

000011d4 <__vector_41>:

// --------------------------------------------------------------
// INTERRUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    11d4:	1f 92       	push	r1
    11d6:	0f 92       	push	r0
    11d8:	0f b6       	in	r0, 0x3f	; 63
    11da:	0f 92       	push	r0
    11dc:	11 24       	eor	r1, r1
    11de:	8f 93       	push	r24
    11e0:	9f 93       	push	r25
	//m_green(ON);
	flag_timer = 1;
    11e2:	81 e0       	ldi	r24, 0x01	; 1
    11e4:	90 e0       	ldi	r25, 0x00	; 0
    11e6:	90 93 11 01 	sts	0x0111, r25
    11ea:	80 93 10 01 	sts	0x0110, r24
}
    11ee:	9f 91       	pop	r25
    11f0:	8f 91       	pop	r24
    11f2:	0f 90       	pop	r0
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	0f 90       	pop	r0
    11f8:	1f 90       	pop	r1
    11fa:	18 95       	reti

000011fc <__vector_3>:

ISR(INT2_vect)
{
    11fc:	1f 92       	push	r1
    11fe:	0f 92       	push	r0
    1200:	0f b6       	in	r0, 0x3f	; 63
    1202:	0f 92       	push	r0
    1204:	11 24       	eor	r1, r1
    1206:	8f 93       	push	r24
    1208:	9f 93       	push	r25
	//Read
	//past_state = state;
	//state = SYSTEM_STATE;
	flag_system = 1;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	90 93 0f 01 	sts	0x010F, r25
    1212:	80 93 0e 01 	sts	0x010E, r24
	flag_timer= 1;
    1216:	90 93 11 01 	sts	0x0111, r25
    121a:	80 93 10 01 	sts	0x0110, r24
	m_green(TOGGLE); // Indicator receiving from RF
    121e:	6a 9a       	sbi	0x0d, 2	; 13
    1220:	9e b1       	in	r25, 0x0e	; 14
    1222:	84 e0       	ldi	r24, 0x04	; 4
    1224:	89 27       	eor	r24, r25
    1226:	8e b9       	out	0x0e, r24	; 14
}
    1228:	9f 91       	pop	r25
    122a:	8f 91       	pop	r24
    122c:	0f 90       	pop	r0
    122e:	0f be       	out	0x3f, r0	; 63
    1230:	0f 90       	pop	r0
    1232:	1f 90       	pop	r1
    1234:	18 95       	reti

00001236 <turnOnBlueLED>:
#include "Init_functions.h"
#include "m_general.h"

void turnOnBlueLED(void)
{
	set(PORTD,5);
    1236:	5d 9a       	sbi	0x0b, 5	; 11
    1238:	08 95       	ret

0000123a <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
    123a:	5d 98       	cbi	0x0b, 5	; 11
    123c:	08 95       	ret

0000123e <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
    123e:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
    1240:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
    1242:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
    1244:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
    1246:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
    1248:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
    124a:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
    124c:	5d 98       	cbi	0x0b, 5	; 11
    124e:	08 95       	ret

00001250 <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
    1250:	ea e7       	ldi	r30, 0x7A	; 122
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	20 81       	ld	r18, Z
    1256:	2f 77       	andi	r18, 0x7F	; 127
    1258:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
    125a:	83 30       	cpi	r24, 0x03	; 3
    125c:	91 05       	cpc	r25, r1
    125e:	09 f4       	brne	.+2      	; 0x1262 <get_analog_val+0x12>
    1260:	49 c0       	rjmp	.+146    	; 0x12f4 <get_analog_val+0xa4>
    1262:	3c f4       	brge	.+14     	; 0x1272 <get_analog_val+0x22>
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	19 f1       	breq	.+70     	; 0x12b0 <get_analog_val+0x60>
    126a:	9c f5       	brge	.+102    	; 0x12d2 <get_analog_val+0x82>
    126c:	89 2b       	or	r24, r25
    126e:	79 f0       	breq	.+30     	; 0x128e <get_analog_val+0x3e>
    1270:	95 c0       	rjmp	.+298    	; 0x139c <get_analog_val+0x14c>
    1272:	85 30       	cpi	r24, 0x05	; 5
    1274:	91 05       	cpc	r25, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <get_analog_val+0x2a>
    1278:	5f c0       	rjmp	.+190    	; 0x1338 <get_analog_val+0xe8>
    127a:	0c f4       	brge	.+2      	; 0x127e <get_analog_val+0x2e>
    127c:	4c c0       	rjmp	.+152    	; 0x1316 <get_analog_val+0xc6>
    127e:	86 30       	cpi	r24, 0x06	; 6
    1280:	91 05       	cpc	r25, r1
    1282:	09 f4       	brne	.+2      	; 0x1286 <get_analog_val+0x36>
    1284:	6a c0       	rjmp	.+212    	; 0x135a <get_analog_val+0x10a>
    1286:	07 97       	sbiw	r24, 0x07	; 7
    1288:	09 f0       	breq	.+2      	; 0x128c <get_analog_val+0x3c>
    128a:	88 c0       	rjmp	.+272    	; 0x139c <get_analog_val+0x14c>
    128c:	77 c0       	rjmp	.+238    	; 0x137c <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
    128e:	eb e7       	ldi	r30, 0x7B	; 123
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	80 81       	ld	r24, Z
    1294:	8f 7d       	andi	r24, 0xDF	; 223
    1296:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1298:	ec e7       	ldi	r30, 0x7C	; 124
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8b 7f       	andi	r24, 0xFB	; 251
    12a0:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    12a2:	80 81       	ld	r24, Z
    12a4:	8d 7f       	andi	r24, 0xFD	; 253
    12a6:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    12a8:	80 81       	ld	r24, Z
    12aa:	8e 7f       	andi	r24, 0xFE	; 254
    12ac:	80 83       	st	Z, r24
            break;
    12ae:	76 c0       	rjmp	.+236    	; 0x139c <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
    12b0:	eb e7       	ldi	r30, 0x7B	; 123
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	8f 7d       	andi	r24, 0xDF	; 223
    12b8:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    12ba:	ec e7       	ldi	r30, 0x7C	; 124
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	8b 7f       	andi	r24, 0xFB	; 251
    12c2:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    12c4:	80 81       	ld	r24, Z
    12c6:	8d 7f       	andi	r24, 0xFD	; 253
    12c8:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    12ca:	80 81       	ld	r24, Z
    12cc:	81 60       	ori	r24, 0x01	; 1
    12ce:	80 83       	st	Z, r24
            break;
    12d0:	65 c0       	rjmp	.+202    	; 0x139c <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
    12d2:	eb e7       	ldi	r30, 0x7B	; 123
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	8f 7d       	andi	r24, 0xDF	; 223
    12da:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    12dc:	ec e7       	ldi	r30, 0x7C	; 124
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	84 60       	ori	r24, 0x04	; 4
    12e4:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    12e6:	80 81       	ld	r24, Z
    12e8:	8d 7f       	andi	r24, 0xFD	; 253
    12ea:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    12ec:	80 81       	ld	r24, Z
    12ee:	8e 7f       	andi	r24, 0xFE	; 254
    12f0:	80 83       	st	Z, r24
            break;
    12f2:	54 c0       	rjmp	.+168    	; 0x139c <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
    12f4:	eb e7       	ldi	r30, 0x7B	; 123
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	8f 7d       	andi	r24, 0xDF	; 223
    12fc:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    12fe:	ec e7       	ldi	r30, 0x7C	; 124
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	84 60       	ori	r24, 0x04	; 4
    1306:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1308:	80 81       	ld	r24, Z
    130a:	8d 7f       	andi	r24, 0xFD	; 253
    130c:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    130e:	80 81       	ld	r24, Z
    1310:	81 60       	ori	r24, 0x01	; 1
    1312:	80 83       	st	Z, r24
            break;
    1314:	43 c0       	rjmp	.+134    	; 0x139c <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
    1316:	eb e7       	ldi	r30, 0x7B	; 123
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 7d       	andi	r24, 0xDF	; 223
    131e:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    1320:	ec e7       	ldi	r30, 0x7C	; 124
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	84 60       	ori	r24, 0x04	; 4
    1328:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    132a:	80 81       	ld	r24, Z
    132c:	82 60       	ori	r24, 0x02	; 2
    132e:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1330:	80 81       	ld	r24, Z
    1332:	8e 7f       	andi	r24, 0xFE	; 254
    1334:	80 83       	st	Z, r24
            break;
    1336:	32 c0       	rjmp	.+100    	; 0x139c <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
    1338:	eb e7       	ldi	r30, 0x7B	; 123
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8f 7d       	andi	r24, 0xDF	; 223
    1340:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
    1342:	ec e7       	ldi	r30, 0x7C	; 124
    1344:	f0 e0       	ldi	r31, 0x00	; 0
    1346:	80 81       	ld	r24, Z
    1348:	84 60       	ori	r24, 0x04	; 4
    134a:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
    134c:	80 81       	ld	r24, Z
    134e:	82 60       	ori	r24, 0x02	; 2
    1350:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1352:	80 81       	ld	r24, Z
    1354:	81 60       	ori	r24, 0x01	; 1
    1356:	80 83       	st	Z, r24
            break;
    1358:	21 c0       	rjmp	.+66     	; 0x139c <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
    135a:	eb e7       	ldi	r30, 0x7B	; 123
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	80 62       	ori	r24, 0x20	; 32
    1362:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1364:	ec e7       	ldi	r30, 0x7C	; 124
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	80 81       	ld	r24, Z
    136a:	8b 7f       	andi	r24, 0xFB	; 251
    136c:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    136e:	80 81       	ld	r24, Z
    1370:	8d 7f       	andi	r24, 0xFD	; 253
    1372:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
    1374:	80 81       	ld	r24, Z
    1376:	8e 7f       	andi	r24, 0xFE	; 254
    1378:	80 83       	st	Z, r24
            break;
    137a:	10 c0       	rjmp	.+32     	; 0x139c <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
    137c:	eb e7       	ldi	r30, 0x7B	; 123
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	80 62       	ori	r24, 0x20	; 32
    1384:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
    1386:	ec e7       	ldi	r30, 0x7C	; 124
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	8b 7f       	andi	r24, 0xFB	; 251
    138e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
    1390:	80 81       	ld	r24, Z
    1392:	8d 7f       	andi	r24, 0xFD	; 253
    1394:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
    1396:	80 81       	ld	r24, Z
    1398:	81 60       	ori	r24, 0x01	; 1
    139a:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
    139c:	ea e7       	ldi	r30, 0x7A	; 122
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	80 68       	ori	r24, 0x80	; 128
    13a4:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
    13a6:	80 81       	ld	r24, Z
    13a8:	80 64       	ori	r24, 0x40	; 64
    13aa:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
    13ac:	80 81       	ld	r24, Z
    13ae:	80 61       	ori	r24, 0x10	; 16
    13b0:	80 83       	st	Z, r24
    13b2:	08 95       	ret

000013b4 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 125;
    13b4:	8d e7       	ldi	r24, 0x7D	; 125
    13b6:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    13ba:	e3 ec       	ldi	r30, 0xC3	; 195
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	8d 7f       	andi	r24, 0xFD	; 253
    13c2:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    13c4:	80 81       	ld	r24, Z
    13c6:	8e 7f       	andi	r24, 0xFE	; 254
    13c8:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    13ca:	e2 e7       	ldi	r30, 0x72	; 114
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	84 60       	ori	r24, 0x04	; 4
    13d2:	80 83       	st	Z, r24
    
    //Set prescaler to /256
    set(TCCR4B,CS43);
    13d4:	e1 ec       	ldi	r30, 0xC1	; 193
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 60       	ori	r24, 0x08	; 8
    13dc:	80 83       	st	Z, r24
    clear(TCCR4B,CS42);
    13de:	80 81       	ld	r24, Z
    13e0:	8b 7f       	andi	r24, 0xFB	; 251
    13e2:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    13e4:	80 81       	ld	r24, Z
    13e6:	8d 7f       	andi	r24, 0xFD	; 253
    13e8:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    13ea:	80 81       	ld	r24, Z
    13ec:	81 60       	ori	r24, 0x01	; 1
    13ee:	80 83       	st	Z, r24
    13f0:	08 95       	ret

000013f2 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    13f2:	ec e7       	ldi	r30, 0x7C	; 124
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	8f 77       	andi	r24, 0x7F	; 127
    13fa:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    13fc:	80 81       	ld	r24, Z
    13fe:	80 64       	ori	r24, 0x40	; 64
    1400:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    1402:	aa e7       	ldi	r26, 0x7A	; 122
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	8c 91       	ld	r24, X
    1408:	84 60       	ori	r24, 0x04	; 4
    140a:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    140c:	8c 91       	ld	r24, X
    140e:	82 60       	ori	r24, 0x02	; 2
    1410:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    1412:	8c 91       	ld	r24, X
    1414:	81 60       	ori	r24, 0x01	; 1
    1416:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    1418:	ee e7       	ldi	r30, 0x7E	; 126
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	81 60       	ori	r24, 0x01	; 1
    1420:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    1422:	80 81       	ld	r24, Z
    1424:	82 60       	ori	r24, 0x02	; 2
    1426:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    1428:	80 81       	ld	r24, Z
    142a:	80 61       	ori	r24, 0x10	; 16
    142c:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    142e:	80 81       	ld	r24, Z
    1430:	80 62       	ori	r24, 0x20	; 32
    1432:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    1434:	80 81       	ld	r24, Z
    1436:	80 64       	ori	r24, 0x40	; 64
    1438:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    143a:	80 81       	ld	r24, Z
    143c:	80 68       	ori	r24, 0x80	; 128
    143e:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    1440:	ed e7       	ldi	r30, 0x7D	; 125
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	81 60       	ori	r24, 0x01	; 1
    1448:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    144a:	80 81       	ld	r24, Z
    144c:	82 60       	ori	r24, 0x02	; 2
    144e:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    1450:	8c 91       	ld	r24, X
    1452:	80 62       	ori	r24, 0x20	; 32
    1454:	8c 93       	st	X, r24
    1456:	08 95       	ret

00001458 <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    1458:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    145a:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    145c:	88 e8       	ldi	r24, 0x88	; 136
    145e:	93 e1       	ldi	r25, 0x13	; 19
    1460:	90 93 89 00 	sts	0x0089, r25
    1464:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 4000;
    1468:	80 ea       	ldi	r24, 0xA0	; 160
    146a:	9f e0       	ldi	r25, 0x0F	; 15
    146c:	90 93 8b 00 	sts	0x008B, r25
    1470:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = 4000;
    1474:	90 93 8d 00 	sts	0x008D, r25
    1478:	80 93 8c 00 	sts	0x008C, r24
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    147c:	a1 e8       	ldi	r26, 0x81	; 129
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	8c 91       	ld	r24, X
    1482:	80 61       	ori	r24, 0x10	; 16
    1484:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    1486:	8c 91       	ld	r24, X
    1488:	88 60       	ori	r24, 0x08	; 8
    148a:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    148c:	e0 e8       	ldi	r30, 0x80	; 128
    148e:	f0 e0       	ldi	r31, 0x00	; 0
    1490:	80 81       	ld	r24, Z
    1492:	82 60       	ori	r24, 0x02	; 2
    1494:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    1496:	80 81       	ld	r24, Z
    1498:	81 60       	ori	r24, 0x01	; 1
    149a:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    149c:	80 81       	ld	r24, Z
    149e:	80 62       	ori	r24, 0x20	; 32
    14a0:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 7e       	andi	r24, 0xEF	; 239
    14a6:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    14a8:	80 81       	ld	r24, Z
    14aa:	88 60       	ori	r24, 0x08	; 8
    14ac:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    14ae:	80 81       	ld	r24, Z
    14b0:	8b 7f       	andi	r24, 0xFB	; 251
    14b2:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    14b4:	8c 91       	ld	r24, X
    14b6:	8b 7f       	andi	r24, 0xFB	; 251
    14b8:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    14ba:	8c 91       	ld	r24, X
    14bc:	8d 7f       	andi	r24, 0xFD	; 253
    14be:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    14c0:	8c 91       	ld	r24, X
    14c2:	81 60       	ori	r24, 0x01	; 1
    14c4:	8c 93       	st	X, r24
    14c6:	08 95       	ret

000014c8 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    14c8:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    14ca:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    14cc:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    14ce:	8c e0       	ldi	r24, 0x0C	; 12
    14d0:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    14d4:	e9 e6       	ldi	r30, 0x69	; 105
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	80 62       	ori	r24, 0x20	; 32
    14dc:	80 83       	st	Z, r24
    14de:	80 81       	ld	r24, Z
    14e0:	8f 7e       	andi	r24, 0xEF	; 239
    14e2:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    14e4:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    14e6:	78 94       	sei
    14e8:	08 95       	ret

000014ea <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    14ea:	1f 93       	push	r17
    14ec:	cf 93       	push	r28
    14ee:	df 93       	push	r29
    14f0:	18 2f       	mov	r17, r24
    14f2:	d6 2f       	mov	r29, r22
    14f4:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    14f6:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    14fa:	94 ea       	ldi	r25, 0xA4	; 164
    14fc:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1500:	ec eb       	ldi	r30, 0xBC	; 188
    1502:	f0 e0       	ldi	r31, 0x00	; 0
    1504:	90 81       	ld	r25, Z
    1506:	99 23       	and	r25, r25
    1508:	ec f7       	brge	.-6      	; 0x1504 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    150a:	90 e5       	ldi	r25, 0x50	; 80
    150c:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1510:	94 e8       	ldi	r25, 0x84	; 132
    1512:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1516:	ec eb       	ldi	r30, 0xBC	; 188
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	90 81       	ld	r25, Z
    151c:	99 23       	and	r25, r25
    151e:	ec f7       	brge	.-6      	; 0x151a <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1520:	90 91 b9 00 	lds	r25, 0x00B9
    1524:	98 7f       	andi	r25, 0xF8	; 248
    1526:	90 32       	cpi	r25, 0x20	; 32
    1528:	29 f4       	brne	.+10     	; 0x1534 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    152a:	84 e9       	ldi	r24, 0x94	; 148
    152c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    1530:	80 e0       	ldi	r24, 0x00	; 0
    1532:	2d c0       	rjmp	.+90     	; 0x158e <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    153a:	84 e8       	ldi	r24, 0x84	; 132
    153c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1540:	ec eb       	ldi	r30, 0xBC	; 188
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	90 81       	ld	r25, Z
    1546:	99 23       	and	r25, r25
    1548:	ec f7       	brge	.-6      	; 0x1544 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    154a:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    154e:	84 e8       	ldi	r24, 0x84	; 132
    1550:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1554:	ec eb       	ldi	r30, 0xBC	; 188
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	88 23       	and	r24, r24
    155c:	ec f7       	brge	.-6      	; 0x1558 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    155e:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    1562:	84 e8       	ldi	r24, 0x84	; 132
    1564:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1568:	ec eb       	ldi	r30, 0xBC	; 188
    156a:	f0 e0       	ldi	r31, 0x00	; 0
    156c:	80 81       	ld	r24, Z
    156e:	88 23       	and	r24, r24
    1570:	ec f7       	brge	.-6      	; 0x156c <m_rf_open+0x82>
	
	TWDR = packet_length;
    1572:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    1576:	84 e8       	ldi	r24, 0x84	; 132
    1578:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    157c:	ec eb       	ldi	r30, 0xBC	; 188
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	88 23       	and	r24, r24
    1584:	ec f7       	brge	.-6      	; 0x1580 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1586:	84 e9       	ldi	r24, 0x94	; 148
    1588:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
}
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	1f 91       	pop	r17
    1594:	08 95       	ret

00001596 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    1596:	cf 93       	push	r28
    1598:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    159a:	24 ea       	ldi	r18, 0xA4	; 164
    159c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    15a0:	ec eb       	ldi	r30, 0xBC	; 188
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	20 81       	ld	r18, Z
    15a6:	22 23       	and	r18, r18
    15a8:	ec f7       	brge	.-6      	; 0x15a4 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    15aa:	21 e5       	ldi	r18, 0x51	; 81
    15ac:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    15b0:	24 e8       	ldi	r18, 0x84	; 132
    15b2:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    15b6:	ec eb       	ldi	r30, 0xBC	; 188
    15b8:	f0 e0       	ldi	r31, 0x00	; 0
    15ba:	20 81       	ld	r18, Z
    15bc:	22 23       	and	r18, r18
    15be:	ec f7       	brge	.-6      	; 0x15ba <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    15c0:	20 91 b9 00 	lds	r18, 0x00B9
    15c4:	28 7f       	andi	r18, 0xF8	; 248
    15c6:	28 34       	cpi	r18, 0x48	; 72
    15c8:	29 f4       	brne	.+10     	; 0x15d4 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    15ca:	84 e9       	ldi	r24, 0x94	; 148
    15cc:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    15d0:	80 e0       	ldi	r24, 0x00	; 0
    15d2:	3f c0       	rjmp	.+126    	; 0x1652 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    15d4:	24 ec       	ldi	r18, 0xC4	; 196
    15d6:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    15da:	ec eb       	ldi	r30, 0xBC	; 188
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	20 81       	ld	r18, Z
    15e0:	22 23       	and	r18, r18
    15e2:	ec f7       	brge	.-6      	; 0x15de <m_rf_read+0x48>
	bytes = TWDR;
    15e4:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    15e8:	46 13       	cpse	r20, r22
    15ea:	09 c0       	rjmp	.+18     	; 0x15fe <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    15ec:	50 e0       	ldi	r21, 0x00	; 0
    15ee:	41 50       	subi	r20, 0x01	; 1
    15f0:	51 09       	sbc	r21, r1
    15f2:	14 16       	cp	r1, r20
    15f4:	15 06       	cpc	r1, r21
    15f6:	44 f0       	brlt	.+16     	; 0x1608 <m_rf_read+0x72>
    15f8:	40 e0       	ldi	r20, 0x00	; 0
    15fa:	50 e0       	ldi	r21, 0x00	; 0
    15fc:	18 c0       	rjmp	.+48     	; 0x162e <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    15fe:	84 e9       	ldi	r24, 0x94	; 148
    1600:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	25 c0       	rjmp	.+74     	; 0x1652 <m_rf_read+0xbc>
    1608:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    160e:	ec eb       	ldi	r30, 0xBC	; 188
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    1614:	cb eb       	ldi	r28, 0xBB	; 187
    1616:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1618:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    161a:	60 81       	ld	r22, Z
    161c:	66 23       	and	r22, r22
    161e:	ec f7       	brge	.-6      	; 0x161a <m_rf_read+0x84>
		buffer[i] = TWDR;
    1620:	68 81       	ld	r22, Y
    1622:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    1624:	2f 5f       	subi	r18, 0xFF	; 255
    1626:	3f 4f       	sbci	r19, 0xFF	; 255
    1628:	24 17       	cp	r18, r20
    162a:	35 07       	cpc	r19, r21
    162c:	ac f3       	brlt	.-22     	; 0x1618 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    162e:	24 e8       	ldi	r18, 0x84	; 132
    1630:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1634:	ec eb       	ldi	r30, 0xBC	; 188
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	20 81       	ld	r18, Z
    163a:	22 23       	and	r18, r18
    163c:	ec f7       	brge	.-6      	; 0x1638 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    163e:	20 91 bb 00 	lds	r18, 0x00BB
    1642:	fc 01       	movw	r30, r24
    1644:	e4 0f       	add	r30, r20
    1646:	f5 1f       	adc	r31, r21
    1648:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    164a:	84 e9       	ldi	r24, 0x94	; 148
    164c:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    1650:	81 e0       	ldi	r24, 0x01	; 1
}
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    1658:	1f 92       	push	r1
    165a:	0f 92       	push	r0
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	0f 92       	push	r0
    1660:	11 24       	eor	r1, r1
    1662:	8f 93       	push	r24
    1664:	9f 93       	push	r25
    1666:	ef 93       	push	r30
    1668:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    166a:	e1 ee       	ldi	r30, 0xE1	; 225
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	80 81       	ld	r24, Z
        UDINT = 0;
    1670:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    1672:	83 ff       	sbrs	r24, 3
    1674:	11 c0       	rjmp	.+34     	; 0x1698 <__vector_10+0x40>
		UENUM = 0;
    1676:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    167a:	91 e0       	ldi	r25, 0x01	; 1
    167c:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    1680:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    1684:	92 e1       	ldi	r25, 0x12	; 18
    1686:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    168a:	98 e0       	ldi	r25, 0x08	; 8
    168c:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    1690:	10 92 35 01 	sts	0x0135, r1
		cdc_line_rtsdtr = 0;
    1694:	10 92 36 01 	sts	0x0136, r1
        }
	if (intbits & (1<<SOFI)) {
    1698:	82 ff       	sbrs	r24, 2
    169a:	13 c0       	rjmp	.+38     	; 0x16c2 <__vector_10+0x6a>
		if (usb_configuration) {
    169c:	80 91 35 01 	lds	r24, 0x0135
    16a0:	88 23       	and	r24, r24
    16a2:	79 f0       	breq	.+30     	; 0x16c2 <__vector_10+0x6a>
			t = transmit_flush_timer;
    16a4:	80 91 34 01 	lds	r24, 0x0134
			if (t) {
    16a8:	88 23       	and	r24, r24
    16aa:	59 f0       	breq	.+22     	; 0x16c2 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    16ac:	81 50       	subi	r24, 0x01	; 1
    16ae:	80 93 34 01 	sts	0x0134, r24
				if (!t) {
    16b2:	81 11       	cpse	r24, r1
    16b4:	06 c0       	rjmp	.+12     	; 0x16c2 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    16b6:	84 e0       	ldi	r24, 0x04	; 4
    16b8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    16bc:	8a e3       	ldi	r24, 0x3A	; 58
    16be:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    16c2:	ff 91       	pop	r31
    16c4:	ef 91       	pop	r30
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	0f 90       	pop	r0
    16cc:	0f be       	out	0x3f, r0	; 63
    16ce:	0f 90       	pop	r0
    16d0:	1f 90       	pop	r1
    16d2:	18 95       	reti

000016d4 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    16d4:	1f 92       	push	r1
    16d6:	0f 92       	push	r0
    16d8:	0f b6       	in	r0, 0x3f	; 63
    16da:	0f 92       	push	r0
    16dc:	11 24       	eor	r1, r1
    16de:	0f 93       	push	r16
    16e0:	1f 93       	push	r17
    16e2:	2f 93       	push	r18
    16e4:	3f 93       	push	r19
    16e6:	4f 93       	push	r20
    16e8:	5f 93       	push	r21
    16ea:	6f 93       	push	r22
    16ec:	7f 93       	push	r23
    16ee:	8f 93       	push	r24
    16f0:	9f 93       	push	r25
    16f2:	af 93       	push	r26
    16f4:	bf 93       	push	r27
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	ef 93       	push	r30
    16fc:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    16fe:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    1702:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    1706:	83 ff       	sbrs	r24, 3
    1708:	51 c1       	rjmp	.+674    	; 0x19ac <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    170a:	e1 ef       	ldi	r30, 0xF1	; 241
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    1710:	40 81       	ld	r20, Z
                wValue = UEDATX;
    1712:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    1714:	30 81       	ld	r19, Z
    1716:	93 2f       	mov	r25, r19
    1718:	80 e0       	ldi	r24, 0x00	; 0
    171a:	dc 01       	movw	r26, r24
    171c:	a2 2b       	or	r26, r18
    171e:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    1720:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    1722:	60 81       	ld	r22, Z
    1724:	96 2f       	mov	r25, r22
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	85 2b       	or	r24, r21
                wLength = UEDATX;
    172a:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    172c:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    172e:	52 ef       	ldi	r21, 0xF2	; 242
    1730:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    1734:	46 30       	cpi	r20, 0x06	; 6
    1736:	09 f0       	breq	.+2      	; 0x173a <__vector_11+0x66>
    1738:	5c c0       	rjmp	.+184    	; 0x17f2 <__vector_11+0x11e>
    173a:	04 c0       	rjmp	.+8      	; 0x1744 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    173c:	81 e2       	ldi	r24, 0x21	; 33
    173e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    1742:	3b c1       	rjmp	.+630    	; 0x19ba <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    1744:	c6 e0       	ldi	r28, 0x06	; 6
    1746:	47 ef       	ldi	r20, 0xF7	; 247
    1748:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    174a:	fa 01       	movw	r30, r20
    174c:	65 91       	lpm	r22, Z+
    174e:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    1750:	26 17       	cp	r18, r22
    1752:	37 07       	cpc	r19, r23
    1754:	19 f0       	breq	.+6      	; 0x175c <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    1756:	49 5f       	subi	r20, 0xF9	; 249
    1758:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    175a:	20 c0       	rjmp	.+64     	; 0x179c <__vector_11+0xc8>
				}
				list += 2;
    175c:	fa 01       	movw	r30, r20
    175e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    1760:	65 91       	lpm	r22, Z+
    1762:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    1764:	86 17       	cp	r24, r22
    1766:	97 07       	cpc	r25, r23
    1768:	19 f0       	breq	.+6      	; 0x1770 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    176a:	49 5f       	subi	r20, 0xF9	; 249
    176c:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    176e:	16 c0       	rjmp	.+44     	; 0x179c <__vector_11+0xc8>
				}
				list += 2;
    1770:	fa 01       	movw	r30, r20
    1772:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    1774:	85 91       	lpm	r24, Z+
    1776:	94 91       	lpm	r25, Z
    1778:	28 2f       	mov	r18, r24
    177a:	39 2f       	mov	r19, r25
				list += 2;
    177c:	fa 01       	movw	r30, r20
    177e:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    1780:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    1782:	9b 2f       	mov	r25, r27
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    1788:	8f 3f       	cpi	r24, 0xFF	; 255
    178a:	91 05       	cpc	r25, r1
    178c:	19 f0       	breq	.+6      	; 0x1794 <__vector_11+0xc0>
    178e:	10 f0       	brcs	.+4      	; 0x1794 <__vector_11+0xc0>
    1790:	8f ef       	ldi	r24, 0xFF	; 255
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	84 17       	cp	r24, r20
    1796:	28 f4       	brcc	.+10     	; 0x17a2 <__vector_11+0xce>
    1798:	48 2f       	mov	r20, r24
    179a:	03 c0       	rjmp	.+6      	; 0x17a2 <__vector_11+0xce>
    179c:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    179e:	a9 f6       	brne	.-86     	; 0x174a <__vector_11+0x76>
    17a0:	cd cf       	rjmp	.-102    	; 0x173c <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17a2:	c8 ee       	ldi	r28, 0xE8	; 232
    17a4:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17a6:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    17a8:	a1 ef       	ldi	r26, 0xF1	; 241
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17ac:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    17ae:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    17b0:	98 2f       	mov	r25, r24
    17b2:	95 70       	andi	r25, 0x05	; 5
    17b4:	e1 f3       	breq	.-8      	; 0x17ae <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    17b6:	82 fd       	sbrc	r24, 2
    17b8:	00 c1       	rjmp	.+512    	; 0x19ba <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    17ba:	64 2f       	mov	r22, r20
    17bc:	41 31       	cpi	r20, 0x11	; 17
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <__vector_11+0xee>
    17c0:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    17c2:	66 23       	and	r22, r22
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <__vector_11+0xf4>
    17c6:	f6 c0       	rjmp	.+492    	; 0x19b4 <__vector_11+0x2e0>
    17c8:	c9 01       	movw	r24, r18
    17ca:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    17cc:	fc 01       	movw	r30, r24
    17ce:	01 96       	adiw	r24, 0x01	; 1
    17d0:	e4 91       	lpm	r30, Z
    17d2:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    17d4:	51 50       	subi	r21, 0x01	; 1
    17d6:	d1 f7       	brne	.-12     	; 0x17cc <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    17d8:	86 2f       	mov	r24, r22
    17da:	81 50       	subi	r24, 0x01	; 1
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	28 0f       	add	r18, r24
    17e2:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    17e4:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17e6:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    17e8:	41 11       	cpse	r20, r1
    17ea:	e1 cf       	rjmp	.-62     	; 0x17ae <__vector_11+0xda>
    17ec:	60 31       	cpi	r22, 0x10	; 16
    17ee:	f9 f2       	breq	.-66     	; 0x17ae <__vector_11+0xda>
    17f0:	e4 c0       	rjmp	.+456    	; 0x19ba <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    17f2:	45 30       	cpi	r20, 0x05	; 5
    17f4:	61 f4       	brne	.+24     	; 0x180e <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    17f6:	8e ef       	ldi	r24, 0xFE	; 254
    17f8:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    17fc:	e8 ee       	ldi	r30, 0xE8	; 232
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	80 ff       	sbrs	r24, 0
    1804:	fd cf       	rjmp	.-6      	; 0x1800 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    1806:	20 68       	ori	r18, 0x80	; 128
    1808:	20 93 e3 00 	sts	0x00E3, r18
			return;
    180c:	d6 c0       	rjmp	.+428    	; 0x19ba <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    180e:	49 30       	cpi	r20, 0x09	; 9
    1810:	a1 f5       	brne	.+104    	; 0x187a <__vector_11+0x1a6>
    1812:	71 11       	cpse	r23, r1
    1814:	5b c0       	rjmp	.+182    	; 0x18cc <__vector_11+0x1f8>
			usb_configuration = wValue;
    1816:	20 93 35 01 	sts	0x0135, r18
			cdc_line_rtsdtr = 0;
    181a:	10 92 36 01 	sts	0x0136, r1
			transmit_flush_timer = 0;
    181e:	10 92 34 01 	sts	0x0134, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1822:	8e ef       	ldi	r24, 0xFE	; 254
    1824:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1828:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    182a:	81 e2       	ldi	r24, 0x21	; 33
    182c:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    182e:	c9 ee       	ldi	r28, 0xE9	; 233
    1830:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    1832:	ab ee       	ldi	r26, 0xEB	; 235
    1834:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    1836:	6c ee       	ldi	r22, 0xEC	; 236
    1838:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    183a:	4d ee       	ldi	r20, 0xED	; 237
    183c:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    183e:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    1840:	9c 01       	movw	r18, r24
    1842:	2f 5f       	subi	r18, 0xFF	; 255
    1844:	3f 4f       	sbci	r19, 0xFF	; 255
    1846:	fc 01       	movw	r30, r24
    1848:	04 91       	lpm	r16, Z
				UECONX = en;
    184a:	0c 93       	st	X, r16
				if (en) {
    184c:	00 23       	and	r16, r16
    184e:	59 f0       	breq	.+22     	; 0x1866 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    1850:	f9 01       	movw	r30, r18
    1852:	24 91       	lpm	r18, Z
    1854:	fb 01       	movw	r30, r22
    1856:	20 83       	st	Z, r18
    1858:	fc 01       	movw	r30, r24
    185a:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    185c:	03 96       	adiw	r24, 0x03	; 3
    185e:	24 91       	lpm	r18, Z
    1860:	fa 01       	movw	r30, r20
    1862:	20 83       	st	Z, r18
    1864:	01 c0       	rjmp	.+2      	; 0x1868 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    1866:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    1868:	1f 5f       	subi	r17, 0xFF	; 255
    186a:	15 30       	cpi	r17, 0x05	; 5
    186c:	41 f7       	brne	.-48     	; 0x183e <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    186e:	ea ee       	ldi	r30, 0xEA	; 234
    1870:	f0 e0       	ldi	r31, 0x00	; 0
    1872:	8e e1       	ldi	r24, 0x1E	; 30
    1874:	80 83       	st	Z, r24
        		UERST = 0;
    1876:	10 82       	st	Z, r1
			return;
    1878:	a0 c0       	rjmp	.+320    	; 0x19ba <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    187a:	48 30       	cpi	r20, 0x08	; 8
    187c:	81 f4       	brne	.+32     	; 0x189e <__vector_11+0x1ca>
    187e:	70 38       	cpi	r23, 0x80	; 128
    1880:	09 f0       	breq	.+2      	; 0x1884 <__vector_11+0x1b0>
    1882:	3f c0       	rjmp	.+126    	; 0x1902 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1884:	e8 ee       	ldi	r30, 0xE8	; 232
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	80 ff       	sbrs	r24, 0
    188c:	fd cf       	rjmp	.-6      	; 0x1888 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    188e:	80 91 35 01 	lds	r24, 0x0135
    1892:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1896:	8e ef       	ldi	r24, 0xFE	; 254
    1898:	80 93 e8 00 	sts	0x00E8, r24
    189c:	8e c0       	rjmp	.+284    	; 0x19ba <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    189e:	41 32       	cpi	r20, 0x21	; 33
    18a0:	a9 f4       	brne	.+42     	; 0x18cc <__vector_11+0x1f8>
    18a2:	71 3a       	cpi	r23, 0xA1	; 161
    18a4:	f1 f5       	brne	.+124    	; 0x1922 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    18a6:	e8 ee       	ldi	r30, 0xE8	; 232
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	80 ff       	sbrs	r24, 0
    18ae:	fd cf       	rjmp	.-6      	; 0x18aa <__vector_11+0x1d6>
    18b0:	e2 e0       	ldi	r30, 0x02	; 2
    18b2:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    18b4:	a1 ef       	ldi	r26, 0xF1	; 241
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	81 91       	ld	r24, Z+
    18ba:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    18bc:	41 e0       	ldi	r20, 0x01	; 1
    18be:	e9 30       	cpi	r30, 0x09	; 9
    18c0:	f4 07       	cpc	r31, r20
    18c2:	d1 f7       	brne	.-12     	; 0x18b8 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18c4:	8e ef       	ldi	r24, 0xFE	; 254
    18c6:	80 93 e8 00 	sts	0x00E8, r24
    18ca:	77 c0       	rjmp	.+238    	; 0x19ba <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    18cc:	40 32       	cpi	r20, 0x20	; 32
    18ce:	c9 f4       	brne	.+50     	; 0x1902 <__vector_11+0x22e>
    18d0:	71 32       	cpi	r23, 0x21	; 33
    18d2:	09 f0       	breq	.+2      	; 0x18d6 <__vector_11+0x202>
    18d4:	6b c0       	rjmp	.+214    	; 0x19ac <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    18d6:	e8 ee       	ldi	r30, 0xE8	; 232
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	82 ff       	sbrs	r24, 2
    18de:	fd cf       	rjmp	.-6      	; 0x18da <__vector_11+0x206>
    18e0:	e2 e0       	ldi	r30, 0x02	; 2
    18e2:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    18e4:	a1 ef       	ldi	r26, 0xF1	; 241
    18e6:	b0 e0       	ldi	r27, 0x00	; 0
    18e8:	8c 91       	ld	r24, X
    18ea:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    18ec:	51 e0       	ldi	r21, 0x01	; 1
    18ee:	e9 30       	cpi	r30, 0x09	; 9
    18f0:	f5 07       	cpc	r31, r21
    18f2:	d1 f7       	brne	.-12     	; 0x18e8 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    18f4:	e8 ee       	ldi	r30, 0xE8	; 232
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	8b ef       	ldi	r24, 0xFB	; 251
    18fa:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    18fc:	8e ef       	ldi	r24, 0xFE	; 254
    18fe:	80 83       	st	Z, r24
    1900:	5c c0       	rjmp	.+184    	; 0x19ba <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    1902:	42 32       	cpi	r20, 0x22	; 34
    1904:	71 f4       	brne	.+28     	; 0x1922 <__vector_11+0x24e>
    1906:	71 32       	cpi	r23, 0x21	; 33
    1908:	09 f0       	breq	.+2      	; 0x190c <__vector_11+0x238>
    190a:	50 c0       	rjmp	.+160    	; 0x19ac <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    190c:	20 93 36 01 	sts	0x0136, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1910:	e8 ee       	ldi	r30, 0xE8	; 232
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	80 ff       	sbrs	r24, 0
    1918:	fd cf       	rjmp	.-6      	; 0x1914 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    191a:	8e ef       	ldi	r24, 0xFE	; 254
    191c:	80 93 e8 00 	sts	0x00E8, r24
    1920:	4c c0       	rjmp	.+152    	; 0x19ba <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    1922:	41 11       	cpse	r20, r1
    1924:	1a c0       	rjmp	.+52     	; 0x195a <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    1926:	e8 ee       	ldi	r30, 0xE8	; 232
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	20 81       	ld	r18, Z
    192c:	20 ff       	sbrs	r18, 0
    192e:	fd cf       	rjmp	.-6      	; 0x192a <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    1930:	72 38       	cpi	r23, 0x82	; 130
    1932:	51 f4       	brne	.+20     	; 0x1948 <__vector_11+0x274>
				UENUM = wIndex;
    1934:	e9 ee       	ldi	r30, 0xE9	; 233
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    193a:	80 91 eb 00 	lds	r24, 0x00EB
    193e:	85 fb       	bst	r24, 5
    1940:	88 27       	eor	r24, r24
    1942:	80 f9       	bld	r24, 0
				UENUM = 0;
    1944:	10 82       	st	Z, r1
    1946:	01 c0       	rjmp	.+2      	; 0x194a <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    1948:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    194a:	e1 ef       	ldi	r30, 0xF1	; 241
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 83       	st	Z, r24
			UEDATX = 0;
    1950:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1952:	8e ef       	ldi	r24, 0xFE	; 254
    1954:	80 93 e8 00 	sts	0x00E8, r24
    1958:	30 c0       	rjmp	.+96     	; 0x19ba <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    195a:	41 30       	cpi	r20, 0x01	; 1
    195c:	11 f0       	breq	.+4      	; 0x1962 <__vector_11+0x28e>
    195e:	43 30       	cpi	r20, 0x03	; 3
    1960:	29 f5       	brne	.+74     	; 0x19ac <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    1962:	72 30       	cpi	r23, 0x02	; 2
    1964:	19 f5       	brne	.+70     	; 0x19ac <__vector_11+0x2d8>
    1966:	23 2b       	or	r18, r19
    1968:	09 f5       	brne	.+66     	; 0x19ac <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    196a:	8f 77       	andi	r24, 0x7F	; 127
    196c:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    196e:	38 2f       	mov	r19, r24
    1970:	31 50       	subi	r19, 0x01	; 1
    1972:	34 30       	cpi	r19, 0x04	; 4
    1974:	d8 f4       	brcc	.+54     	; 0x19ac <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    1976:	3e ef       	ldi	r19, 0xFE	; 254
    1978:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    197c:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    1980:	43 30       	cpi	r20, 0x03	; 3
    1982:	21 f4       	brne	.+8      	; 0x198c <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    1984:	81 e2       	ldi	r24, 0x21	; 33
    1986:	80 93 eb 00 	sts	0x00EB, r24
    198a:	17 c0       	rjmp	.+46     	; 0x19ba <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    198c:	99 e1       	ldi	r25, 0x19	; 25
    198e:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    1992:	21 e0       	ldi	r18, 0x01	; 1
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	d9 01       	movw	r26, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <__vector_11+0x2ca>
    199a:	aa 0f       	add	r26, r26
    199c:	bb 1f       	adc	r27, r27
    199e:	8a 95       	dec	r24
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <__vector_11+0x2c6>
    19a2:	ea ee       	ldi	r30, 0xEA	; 234
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	a0 83       	st	Z, r26
					UERST = 0;
    19a8:	10 82       	st	Z, r1
    19aa:	07 c0       	rjmp	.+14     	; 0x19ba <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    19ac:	81 e2       	ldi	r24, 0x21	; 33
    19ae:	80 93 eb 00 	sts	0x00EB, r24
    19b2:	03 c0       	rjmp	.+6      	; 0x19ba <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    19b4:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    19b6:	41 11       	cpse	r20, r1
    19b8:	fa ce       	rjmp	.-524    	; 0x17ae <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	bf 91       	pop	r27
    19c4:	af 91       	pop	r26
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	7f 91       	pop	r23
    19cc:	6f 91       	pop	r22
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	3f 91       	pop	r19
    19d4:	2f 91       	pop	r18
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	0f 90       	pop	r0
    19dc:	0f be       	out	0x3f, r0	; 63
    19de:	0f 90       	pop	r0
    19e0:	1f 90       	pop	r1
    19e2:	18 95       	reti

000019e4 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    19e8:	ec eb       	ldi	r30, 0xBC	; 188
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	80 81       	ld	r24, Z
    19ee:	88 23       	and	r24, r24
    19f0:	34 f0       	brlt	.+12     	; 0x19fe <twi_wait+0x1a>
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	29 3e       	cpi	r18, 0xE9	; 233
    19f8:	83 e0       	ldi	r24, 0x03	; 3
    19fa:	38 07       	cpc	r19, r24
    19fc:	b9 f7       	brne	.-18     	; 0x19ec <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    19fe:	81 e0       	ldi	r24, 0x01	; 1
    1a00:	28 3e       	cpi	r18, 0xE8	; 232
    1a02:	33 40       	sbci	r19, 0x03	; 3
    1a04:	09 f4       	brne	.+2      	; 0x1a08 <twi_wait+0x24>
    1a06:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    1a08:	08 95       	ret

00001a0a <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    1a0a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    1a0e:	84 e8       	ldi	r24, 0x84	; 132
    1a10:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    1a14:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <twi_wait>
    1a18:	88 23       	and	r24, r24
    1a1a:	21 f0       	breq	.+8      	; 0x1a24 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1a1c:	80 91 b9 00 	lds	r24, 0x00B9
    1a20:	88 7f       	andi	r24, 0xF8	; 248
    1a22:	08 95       	ret
	} else {
		return 0;					// comm failure
    1a24:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    1a26:	08 95       	ret

00001a28 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    1a28:	cf 93       	push	r28
    1a2a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1a2c:	94 ea       	ldi	r25, 0xA4	; 164
    1a2e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1a32:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <twi_wait>
    1a36:	88 23       	and	r24, r24
    1a38:	61 f0       	breq	.+24     	; 0x1a52 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    1a3a:	8c 2f       	mov	r24, r28
    1a3c:	88 0f       	add	r24, r24
    1a3e:	8f 5f       	subi	r24, 0xFF	; 255
    1a40:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1a44:	88 34       	cpi	r24, 0x48	; 72
    1a46:	39 f4       	brne	.+14     	; 0x1a56 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1a48:	84 e9       	ldi	r24, 0x94	; 148
    1a4a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	01 c0       	rjmp	.+2      	; 0x1a58 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1a56:	81 e0       	ldi	r24, 0x01	; 1
}	
    1a58:	cf 91       	pop	r28
    1a5a:	08 95       	ret

00001a5c <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1a5c:	cf 93       	push	r28
    1a5e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1a60:	94 ea       	ldi	r25, 0xA4	; 164
    1a62:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1a66:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <twi_wait>
    1a6a:	88 23       	and	r24, r24
    1a6c:	59 f0       	breq	.+22     	; 0x1a84 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1a6e:	8c 2f       	mov	r24, r28
    1a70:	88 0f       	add	r24, r24
    1a72:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    1a76:	80 32       	cpi	r24, 0x20	; 32
    1a78:	39 f4       	brne	.+14     	; 0x1a88 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1a7a:	84 e9       	ldi	r24, 0x94	; 148
    1a7c:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	03 c0       	rjmp	.+6      	; 0x1a8a <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	01 c0       	rjmp	.+2      	; 0x1a8a <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    1a88:	81 e0       	ldi	r24, 0x01	; 1
}	
    1a8a:	cf 91       	pop	r28
    1a8c:	08 95       	ret

00001a8e <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1a8e:	84 e9       	ldi	r24, 0x94	; 148
    1a90:	80 93 bc 00 	sts	0x00BC, r24
    1a94:	08 95       	ret

00001a96 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    1a96:	ef 92       	push	r14
    1a98:	ff 92       	push	r15
    1a9a:	0f 93       	push	r16
    1a9c:	1f 93       	push	r17
    1a9e:	cf 93       	push	r28
    1aa0:	df 93       	push	r29
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	60 97       	sbiw	r28, 0x10	; 16
    1aa8:	0f b6       	in	r0, 0x3f	; 63
    1aaa:	f8 94       	cli
    1aac:	de bf       	out	0x3e, r29	; 62
    1aae:	0f be       	out	0x3f, r0	; 63
    1ab0:	cd bf       	out	0x3d, r28	; 61
    1ab2:	e8 2e       	mov	r14, r24
    1ab4:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	80 e1       	ldi	r24, 0x10	; 16
    1abc:	df 01       	movw	r26, r30
    1abe:	1d 92       	st	X+, r1
    1ac0:	8a 95       	dec	r24
    1ac2:	e9 f7       	brne	.-6      	; 0x1abe <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1ac4:	88 e5       	ldi	r24, 0x58	; 88
    1ac6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1aca:	88 23       	and	r24, r24
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <m_wii_read+0x3a>
    1ace:	66 c0       	rjmp	.+204    	; 0x1b9c <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    1ad0:	86 e3       	ldi	r24, 0x36	; 54
    1ad2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1ad6:	88 23       	and	r24, r24
    1ad8:	09 f4       	brne	.+2      	; 0x1adc <m_wii_read+0x46>
    1ada:	62 c0       	rjmp	.+196    	; 0x1ba0 <m_wii_read+0x10a>
	end();
    1adc:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1ae0:	b8 e0       	ldi	r27, 0x08	; 8
    1ae2:	ba 95       	dec	r27
    1ae4:	f1 f7       	brne	.-4      	; 0x1ae2 <m_wii_read+0x4c>
    1ae6:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1ae8:	88 e5       	ldi	r24, 0x58	; 88
    1aea:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <start_read>
    1aee:	88 23       	and	r24, r24
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <m_wii_read+0x5e>
    1af2:	58 c0       	rjmp	.+176    	; 0x1ba4 <m_wii_read+0x10e>
    1af4:	ae 01       	movw	r20, r28
    1af6:	4f 5f       	subi	r20, 0xFF	; 255
    1af8:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1afa:	8e 01       	movw	r16, r28
    1afc:	00 5f       	subi	r16, 0xF0	; 240
    1afe:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b00:	ec eb       	ldi	r30, 0xBC	; 188
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    1b06:	2b eb       	ldi	r18, 0xBB	; 187
    1b08:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    1b0a:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b0c:	80 81       	ld	r24, Z
    1b0e:	88 23       	and	r24, r24
    1b10:	ec f7       	brge	.-6      	; 0x1b0c <m_wii_read+0x76>
		temp[i] = TWDR;
    1b12:	d9 01       	movw	r26, r18
    1b14:	8c 91       	ld	r24, X
    1b16:	da 01       	movw	r26, r20
    1b18:	8d 93       	st	X+, r24
    1b1a:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1b1c:	a0 17       	cp	r26, r16
    1b1e:	b1 07       	cpc	r27, r17
    1b20:	a1 f7       	brne	.-24     	; 0x1b0a <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1b22:	84 e8       	ldi	r24, 0x84	; 132
    1b24:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    1b28:	ec eb       	ldi	r30, 0xBC	; 188
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	88 23       	and	r24, r24
    1b30:	ec f7       	brge	.-6      	; 0x1b2c <m_wii_read+0x96>
	temp[15] = TWDR;
    1b32:	80 91 bb 00 	lds	r24, 0x00BB
    1b36:	88 8b       	std	Y+16, r24	; 0x10
	end();
    1b38:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
    1b3c:	de 01       	movw	r26, r28
    1b3e:	14 96       	adiw	r26, 0x04	; 4
    1b40:	6e 2d       	mov	r22, r14
    1b42:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1b44:	4c 91       	ld	r20, X
    1b46:	24 2f       	mov	r18, r20
    1b48:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1b4a:	cd 01       	movw	r24, r26
    1b4c:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1b4e:	fc 01       	movw	r30, r24
    1b50:	80 81       	ld	r24, Z
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	f0 e1       	ldi	r31, 0x10	; 16
    1b56:	2f 9f       	mul	r18, r31
    1b58:	80 0d       	add	r24, r0
    1b5a:	91 1d       	adc	r25, r1
    1b5c:	11 24       	eor	r1, r1
    1b5e:	fb 01       	movw	r30, r22
    1b60:	91 83       	std	Z+1, r25	; 0x01
    1b62:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1b64:	84 2f       	mov	r24, r20
    1b66:	80 7c       	andi	r24, 0xC0	; 192
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	88 0f       	add	r24, r24
    1b6c:	99 1f       	adc	r25, r25
    1b6e:	88 0f       	add	r24, r24
    1b70:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1b72:	9d 01       	movw	r18, r26
    1b74:	21 50       	subi	r18, 0x01	; 1
    1b76:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1b78:	f9 01       	movw	r30, r18
    1b7a:	20 81       	ld	r18, Z
    1b7c:	82 0f       	add	r24, r18
    1b7e:	91 1d       	adc	r25, r1
    1b80:	fb 01       	movw	r30, r22
    1b82:	93 83       	std	Z+3, r25	; 0x03
    1b84:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    1b86:	4f 70       	andi	r20, 0x0F	; 15
    1b88:	44 83       	std	Z+4, r20	; 0x04
    1b8a:	15 82       	std	Z+5, r1	; 0x05
    1b8c:	13 96       	adiw	r26, 0x03	; 3
    1b8e:	6a 5f       	subi	r22, 0xFA	; 250
    1b90:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1b92:	0a 17       	cp	r16, r26
    1b94:	1b 07       	cpc	r17, r27
    1b96:	b1 f6       	brne	.-84     	; 0x1b44 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	05 c0       	rjmp	.+10     	; 0x1ba6 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	01 c0       	rjmp	.+2      	; 0x1ba6 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    1ba6:	60 96       	adiw	r28, 0x10	; 16
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	df 91       	pop	r29
    1bb4:	cf 91       	pop	r28
    1bb6:	1f 91       	pop	r17
    1bb8:	0f 91       	pop	r16
    1bba:	ff 90       	pop	r15
    1bbc:	ef 90       	pop	r14
    1bbe:	08 95       	ret

00001bc0 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    1bc0:	0e 94 64 0a 	call	0x14c8	; 0x14c8 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1bc4:	88 e5       	ldi	r24, 0x58	; 88
    1bc6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1bca:	88 23       	and	r24, r24
    1bcc:	09 f4       	brne	.+2      	; 0x1bd0 <m_wii_open+0x10>
    1bce:	c7 c0       	rjmp	.+398    	; 0x1d5e <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    1bd0:	80 e3       	ldi	r24, 0x30	; 48
    1bd2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1bd6:	88 23       	and	r24, r24
    1bd8:	09 f4       	brne	.+2      	; 0x1bdc <m_wii_open+0x1c>
    1bda:	c3 c0       	rjmp	.+390    	; 0x1d62 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    1bdc:	81 e0       	ldi	r24, 0x01	; 1
    1bde:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1be2:	88 23       	and	r24, r24
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <m_wii_open+0x28>
    1be6:	bf c0       	rjmp	.+382    	; 0x1d66 <m_wii_open+0x1a6>
	end();
    1be8:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1bec:	83 ec       	ldi	r24, 0xC3	; 195
    1bee:	99 e0       	ldi	r25, 0x09	; 9
    1bf0:	01 97       	sbiw	r24, 0x01	; 1
    1bf2:	f1 f7       	brne	.-4      	; 0x1bf0 <m_wii_open+0x30>
    1bf4:	00 c0       	rjmp	.+0      	; 0x1bf6 <m_wii_open+0x36>
    1bf6:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1bf8:	88 e5       	ldi	r24, 0x58	; 88
    1bfa:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1bfe:	88 23       	and	r24, r24
    1c00:	09 f4       	brne	.+2      	; 0x1c04 <m_wii_open+0x44>
    1c02:	b3 c0       	rjmp	.+358    	; 0x1d6a <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    1c04:	80 e0       	ldi	r24, 0x00	; 0
    1c06:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <m_wii_open+0x50>
    1c0e:	af c0       	rjmp	.+350    	; 0x1d6e <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c16:	88 23       	and	r24, r24
    1c18:	09 f4       	brne	.+2      	; 0x1c1c <m_wii_open+0x5c>
    1c1a:	ab c0       	rjmp	.+342    	; 0x1d72 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c22:	88 23       	and	r24, r24
    1c24:	09 f4       	brne	.+2      	; 0x1c28 <m_wii_open+0x68>
    1c26:	a7 c0       	rjmp	.+334    	; 0x1d76 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    1c28:	80 e0       	ldi	r24, 0x00	; 0
    1c2a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c2e:	88 23       	and	r24, r24
    1c30:	09 f4       	brne	.+2      	; 0x1c34 <m_wii_open+0x74>
    1c32:	a3 c0       	rjmp	.+326    	; 0x1d7a <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c3a:	88 23       	and	r24, r24
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <m_wii_open+0x80>
    1c3e:	9f c0       	rjmp	.+318    	; 0x1d7e <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c46:	88 23       	and	r24, r24
    1c48:	09 f4       	brne	.+2      	; 0x1c4c <m_wii_open+0x8c>
    1c4a:	9b c0       	rjmp	.+310    	; 0x1d82 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c52:	88 23       	and	r24, r24
    1c54:	09 f4       	brne	.+2      	; 0x1c58 <m_wii_open+0x98>
    1c56:	97 c0       	rjmp	.+302    	; 0x1d86 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    1c58:	80 e9       	ldi	r24, 0x90	; 144
    1c5a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c5e:	88 23       	and	r24, r24
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <m_wii_open+0xa4>
    1c62:	93 c0       	rjmp	.+294    	; 0x1d8a <m_wii_open+0x1ca>
	end();
    1c64:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
    1c68:	83 ec       	ldi	r24, 0xC3	; 195
    1c6a:	99 e0       	ldi	r25, 0x09	; 9
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <m_wii_open+0xac>
    1c70:	00 c0       	rjmp	.+0      	; 0x1c72 <m_wii_open+0xb2>
    1c72:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1c74:	88 e5       	ldi	r24, 0x58	; 88
    1c76:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1c7a:	88 23       	and	r24, r24
    1c7c:	09 f4       	brne	.+2      	; 0x1c80 <m_wii_open+0xc0>
    1c7e:	87 c0       	rjmp	.+270    	; 0x1d8e <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    1c80:	87 e0       	ldi	r24, 0x07	; 7
    1c82:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c86:	88 23       	and	r24, r24
    1c88:	09 f4       	brne	.+2      	; 0x1c8c <m_wii_open+0xcc>
    1c8a:	83 c0       	rjmp	.+262    	; 0x1d92 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c92:	88 23       	and	r24, r24
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <m_wii_open+0xd8>
    1c96:	7f c0       	rjmp	.+254    	; 0x1d96 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    1c98:	81 e4       	ldi	r24, 0x41	; 65
    1c9a:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1c9e:	88 23       	and	r24, r24
    1ca0:	09 f4       	brne	.+2      	; 0x1ca4 <m_wii_open+0xe4>
    1ca2:	7b c0       	rjmp	.+246    	; 0x1d9a <m_wii_open+0x1da>
	end();
    1ca4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
    1ca8:	83 ec       	ldi	r24, 0xC3	; 195
    1caa:	99 e0       	ldi	r25, 0x09	; 9
    1cac:	01 97       	sbiw	r24, 0x01	; 1
    1cae:	f1 f7       	brne	.-4      	; 0x1cac <m_wii_open+0xec>
    1cb0:	00 c0       	rjmp	.+0      	; 0x1cb2 <m_wii_open+0xf2>
    1cb2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1cb4:	88 e5       	ldi	r24, 0x58	; 88
    1cb6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1cba:	88 23       	and	r24, r24
    1cbc:	09 f4       	brne	.+2      	; 0x1cc0 <m_wii_open+0x100>
    1cbe:	6f c0       	rjmp	.+222    	; 0x1d9e <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    1cc0:	8a e1       	ldi	r24, 0x1A	; 26
    1cc2:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1cc6:	88 23       	and	r24, r24
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <m_wii_open+0x10c>
    1cca:	6b c0       	rjmp	.+214    	; 0x1da2 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    1ccc:	80 e4       	ldi	r24, 0x40	; 64
    1cce:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1cd2:	88 23       	and	r24, r24
    1cd4:	09 f4       	brne	.+2      	; 0x1cd8 <m_wii_open+0x118>
    1cd6:	67 c0       	rjmp	.+206    	; 0x1da6 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1cde:	88 23       	and	r24, r24
    1ce0:	09 f4       	brne	.+2      	; 0x1ce4 <m_wii_open+0x124>
    1ce2:	63 c0       	rjmp	.+198    	; 0x1daa <m_wii_open+0x1ea>
	end();
    1ce4:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
    1ce8:	83 ec       	ldi	r24, 0xC3	; 195
    1cea:	99 e0       	ldi	r25, 0x09	; 9
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <m_wii_open+0x12c>
    1cf0:	00 c0       	rjmp	.+0      	; 0x1cf2 <m_wii_open+0x132>
    1cf2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1cf4:	88 e5       	ldi	r24, 0x58	; 88
    1cf6:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1cfa:	88 23       	and	r24, r24
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <m_wii_open+0x140>
    1cfe:	57 c0       	rjmp	.+174    	; 0x1dae <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    1d00:	83 e3       	ldi	r24, 0x33	; 51
    1d02:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1d06:	88 23       	and	r24, r24
    1d08:	09 f4       	brne	.+2      	; 0x1d0c <m_wii_open+0x14c>
    1d0a:	53 c0       	rjmp	.+166    	; 0x1db2 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1d12:	88 23       	and	r24, r24
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <m_wii_open+0x158>
    1d16:	4f c0       	rjmp	.+158    	; 0x1db6 <m_wii_open+0x1f6>
	end();
    1d18:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
    1d1c:	83 ec       	ldi	r24, 0xC3	; 195
    1d1e:	99 e0       	ldi	r25, 0x09	; 9
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	f1 f7       	brne	.-4      	; 0x1d20 <m_wii_open+0x160>
    1d24:	00 c0       	rjmp	.+0      	; 0x1d26 <m_wii_open+0x166>
    1d26:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1d28:	88 e5       	ldi	r24, 0x58	; 88
    1d2a:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <start_write>
    1d2e:	88 23       	and	r24, r24
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <m_wii_open+0x174>
    1d32:	43 c0       	rjmp	.+134    	; 0x1dba <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    1d34:	80 e3       	ldi	r24, 0x30	; 48
    1d36:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <m_wii_open+0x180>
    1d3e:	3f c0       	rjmp	.+126    	; 0x1dbe <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    1d40:	88 e0       	ldi	r24, 0x08	; 8
    1d42:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <send_byte>
    1d46:	88 23       	and	r24, r24
    1d48:	e1 f1       	breq	.+120    	; 0x1dc2 <m_wii_open+0x202>
	end();
    1d4a:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <end>
    1d4e:	83 ec       	ldi	r24, 0xC3	; 195
    1d50:	99 e0       	ldi	r25, 0x09	; 9
    1d52:	01 97       	sbiw	r24, 0x01	; 1
    1d54:	f1 f7       	brne	.-4      	; 0x1d52 <m_wii_open+0x192>
    1d56:	00 c0       	rjmp	.+0      	; 0x1d58 <m_wii_open+0x198>
    1d58:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d86:	80 e0       	ldi	r24, 0x00	; 0
    1d88:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    1d8e:	80 e0       	ldi	r24, 0x00	; 0
    1d90:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    1d92:	80 e0       	ldi	r24, 0x00	; 0
    1d94:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    1d96:	80 e0       	ldi	r24, 0x00	; 0
    1d98:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    1d9e:	80 e0       	ldi	r24, 0x00	; 0
    1da0:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    1da2:	80 e0       	ldi	r24, 0x00	; 0
    1da4:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    1dba:	80 e0       	ldi	r24, 0x00	; 0
    1dbc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    1dc4:	08 95       	ret

00001dc6 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    1dc6:	2f 92       	push	r2
    1dc8:	3f 92       	push	r3
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	28 97       	sbiw	r28, 0x08	; 8
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	98 86       	std	Y+8, r9	; 0x08
    1dfc:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
    1dfe:	10 92 38 01 	sts	0x0138, r1
    1e02:	10 92 37 01 	sts	0x0137, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
    1e06:	8f 3f       	cpi	r24, 0xFF	; 255
    1e08:	e3 e0       	ldi	r30, 0x03	; 3
    1e0a:	9e 07       	cpc	r25, r30
    1e0c:	01 f1       	breq	.+64     	; 0x1e4e <localize+0x88>
    1e0e:	6f 3f       	cpi	r22, 0xFF	; 255
    1e10:	f3 e0       	ldi	r31, 0x03	; 3
    1e12:	7f 07       	cpc	r23, r31
    1e14:	e1 f0       	breq	.+56     	; 0x1e4e <localize+0x88>
    1e16:	4f 3f       	cpi	r20, 0xFF	; 255
    1e18:	e3 e0       	ldi	r30, 0x03	; 3
    1e1a:	5e 07       	cpc	r21, r30
    1e1c:	c1 f0       	breq	.+48     	; 0x1e4e <localize+0x88>
    1e1e:	2f 3f       	cpi	r18, 0xFF	; 255
    1e20:	f3 e0       	ldi	r31, 0x03	; 3
    1e22:	3f 07       	cpc	r19, r31
    1e24:	a1 f0       	breq	.+40     	; 0x1e4e <localize+0x88>
    1e26:	0f 3f       	cpi	r16, 0xFF	; 255
    1e28:	e3 e0       	ldi	r30, 0x03	; 3
    1e2a:	1e 07       	cpc	r17, r30
    1e2c:	81 f0       	breq	.+32     	; 0x1e4e <localize+0x88>
    1e2e:	ff ef       	ldi	r31, 0xFF	; 255
    1e30:	ef 16       	cp	r14, r31
    1e32:	f3 e0       	ldi	r31, 0x03	; 3
    1e34:	ff 06       	cpc	r15, r31
    1e36:	59 f0       	breq	.+22     	; 0x1e4e <localize+0x88>
    1e38:	ef ef       	ldi	r30, 0xFF	; 255
    1e3a:	ce 16       	cp	r12, r30
    1e3c:	e3 e0       	ldi	r30, 0x03	; 3
    1e3e:	de 06       	cpc	r13, r30
    1e40:	31 f0       	breq	.+12     	; 0x1e4e <localize+0x88>
    1e42:	ff ef       	ldi	r31, 0xFF	; 255
    1e44:	af 16       	cp	r10, r31
    1e46:	f3 e0       	ldi	r31, 0x03	; 3
    1e48:	bf 06       	cpc	r11, r31
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <localize+0x88>
    1e4c:	af c6       	rjmp	.+3422   	; 0x2bac <localize+0xde6>
        flag_no_good_stars = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	90 e0       	ldi	r25, 0x00	; 0
    1e52:	90 93 38 01 	sts	0x0138, r25
    1e56:	80 93 37 01 	sts	0x0137, r24
    1e5a:	d1 c3       	rjmp	.+1954   	; 0x25fe <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
    1e5c:	f8 01       	movw	r30, r16
    1e5e:	a0 80       	ld	r10, Z
    1e60:	b1 80       	ldd	r11, Z+1	; 0x01
    1e62:	c2 80       	ldd	r12, Z+2	; 0x02
    1e64:	d3 80       	ldd	r13, Z+3	; 0x03
    1e66:	0c 5f       	subi	r16, 0xFC	; 252
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	26 2d       	mov	r18, r6
    1e6c:	37 2d       	mov	r19, r7
    1e6e:	48 2d       	mov	r20, r8
    1e70:	59 2d       	mov	r21, r9
    1e72:	6a 2d       	mov	r22, r10
    1e74:	7b 2d       	mov	r23, r11
    1e76:	8c 2d       	mov	r24, r12
    1e78:	9d 2d       	mov	r25, r13
    1e7a:	0e 94 92 19 	call	0x3324	; 0x3324 <__gesf2>
    1e7e:	18 16       	cp	r1, r24
    1e80:	34 f4       	brge	.+12     	; 0x1e8e <localize+0xc8>
    1e82:	fa 82       	std	Y+2, r15	; 0x02
    1e84:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
    1e86:	6a 2c       	mov	r6, r10
    1e88:	7b 2c       	mov	r7, r11
    1e8a:	8c 2c       	mov	r8, r12
    1e8c:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
    1e8e:	22 2d       	mov	r18, r2
    1e90:	33 2d       	mov	r19, r3
    1e92:	44 2d       	mov	r20, r4
    1e94:	55 2d       	mov	r21, r5
    1e96:	6a 2d       	mov	r22, r10
    1e98:	7b 2d       	mov	r23, r11
    1e9a:	8c 2d       	mov	r24, r12
    1e9c:	9d 2d       	mov	r25, r13
    1e9e:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__cmpsf2>
    1ea2:	88 23       	and	r24, r24
    1ea4:	34 f4       	brge	.+12     	; 0x1eb2 <localize+0xec>
    1ea6:	fe 82       	std	Y+6, r15	; 0x06
    1ea8:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
    1eaa:	2a 2c       	mov	r2, r10
    1eac:	3b 2c       	mov	r3, r11
    1eae:	4c 2c       	mov	r4, r12
    1eb0:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
    1eb2:	ff ef       	ldi	r31, 0xFF	; 255
    1eb4:	ef 1a       	sub	r14, r31
    1eb6:	ff 0a       	sbc	r15, r31
    1eb8:	86 e0       	ldi	r24, 0x06	; 6
    1eba:	e8 16       	cp	r14, r24
    1ebc:	f1 04       	cpc	r15, r1
    1ebe:	71 f6       	brne	.-100    	; 0x1e5c <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
    1ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ec4:	e2 30       	cpi	r30, 0x02	; 2
    1ec6:	f1 05       	cpc	r31, r1
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <localize+0x106>
    1eca:	3e c1       	rjmp	.+636    	; 0x2148 <localize+0x382>
    1ecc:	34 f4       	brge	.+12     	; 0x1eda <localize+0x114>
    1ece:	30 97       	sbiw	r30, 0x00	; 0
    1ed0:	81 f0       	breq	.+32     	; 0x1ef2 <localize+0x12c>
    1ed2:	31 97       	sbiw	r30, 0x01	; 1
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <localize+0x112>
    1ed6:	8d c3       	rjmp	.+1818   	; 0x25f2 <localize+0x82c>
    1ed8:	a2 c0       	rjmp	.+324    	; 0x201e <localize+0x258>
    1eda:	89 81       	ldd	r24, Y+1	; 0x01
    1edc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ede:	84 30       	cpi	r24, 0x04	; 4
    1ee0:	91 05       	cpc	r25, r1
    1ee2:	09 f4       	brne	.+2      	; 0x1ee6 <localize+0x120>
    1ee4:	5b c2       	rjmp	.+1206   	; 0x239c <localize+0x5d6>
    1ee6:	0c f4       	brge	.+2      	; 0x1eea <localize+0x124>
    1ee8:	c4 c1       	rjmp	.+904    	; 0x2272 <localize+0x4ac>
    1eea:	05 97       	sbiw	r24, 0x05	; 5
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <localize+0x12a>
    1eee:	81 c3       	rjmp	.+1794   	; 0x25f2 <localize+0x82c>
    1ef0:	ea c2       	rjmp	.+1492   	; 0x24c6 <localize+0x700>
            case 0:
                switch (min_id) {
    1ef2:	ed 81       	ldd	r30, Y+5	; 0x05
    1ef4:	fe 81       	ldd	r31, Y+6	; 0x06
    1ef6:	e2 30       	cpi	r30, 0x02	; 2
    1ef8:	f1 05       	cpc	r31, r1
    1efa:	39 f1       	breq	.+78     	; 0x1f4a <localize+0x184>
    1efc:	24 f4       	brge	.+8      	; 0x1f06 <localize+0x140>
    1efe:	31 97       	sbiw	r30, 0x01	; 1
    1f00:	09 f0       	breq	.+2      	; 0x1f04 <localize+0x13e>
    1f02:	6e c0       	rjmp	.+220    	; 0x1fe0 <localize+0x21a>
    1f04:	09 c0       	rjmp	.+18     	; 0x1f18 <localize+0x152>
    1f06:	8d 81       	ldd	r24, Y+5	; 0x05
    1f08:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0a:	83 30       	cpi	r24, 0x03	; 3
    1f0c:	91 05       	cpc	r25, r1
    1f0e:	b1 f1       	breq	.+108    	; 0x1f7c <localize+0x1b6>
    1f10:	04 97       	sbiw	r24, 0x04	; 4
    1f12:	09 f0       	breq	.+2      	; 0x1f16 <localize+0x150>
    1f14:	65 c0       	rjmp	.+202    	; 0x1fe0 <localize+0x21a>
    1f16:	4b c0       	rjmp	.+150    	; 0x1fae <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
    1f18:	8d e6       	ldi	r24, 0x6D	; 109
    1f1a:	91 e0       	ldi	r25, 0x01	; 1
    1f1c:	90 93 90 01 	sts	0x0190, r25
    1f20:	80 93 8f 01 	sts	0x018F, r24
    1f24:	85 e6       	ldi	r24, 0x65	; 101
    1f26:	91 e0       	ldi	r25, 0x01	; 1
    1f28:	90 93 76 01 	sts	0x0176, r25
    1f2c:	80 93 75 01 	sts	0x0175, r24
    1f30:	89 e6       	ldi	r24, 0x69	; 105
    1f32:	91 e0       	ldi	r25, 0x01	; 1
    1f34:	90 93 78 01 	sts	0x0178, r25
    1f38:	80 93 77 01 	sts	0x0177, r24
    1f3c:	81 e6       	ldi	r24, 0x61	; 97
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	90 93 8a 01 	sts	0x018A, r25
    1f44:	80 93 89 01 	sts	0x0189, r24
                        break;
    1f48:	54 c3       	rjmp	.+1704   	; 0x25f2 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
    1f4a:	8d e6       	ldi	r24, 0x6D	; 109
    1f4c:	91 e0       	ldi	r25, 0x01	; 1
    1f4e:	90 93 90 01 	sts	0x0190, r25
    1f52:	80 93 8f 01 	sts	0x018F, r24
    1f56:	81 e6       	ldi	r24, 0x61	; 97
    1f58:	91 e0       	ldi	r25, 0x01	; 1
    1f5a:	90 93 76 01 	sts	0x0176, r25
    1f5e:	80 93 75 01 	sts	0x0175, r24
    1f62:	89 e6       	ldi	r24, 0x69	; 105
    1f64:	91 e0       	ldi	r25, 0x01	; 1
    1f66:	90 93 78 01 	sts	0x0178, r25
    1f6a:	80 93 77 01 	sts	0x0177, r24
    1f6e:	85 e6       	ldi	r24, 0x65	; 101
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	90 93 8a 01 	sts	0x018A, r25
    1f76:	80 93 89 01 	sts	0x0189, r24
                        break;
    1f7a:	3b c3       	rjmp	.+1654   	; 0x25f2 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
    1f7c:	89 e6       	ldi	r24, 0x69	; 105
    1f7e:	91 e0       	ldi	r25, 0x01	; 1
    1f80:	90 93 90 01 	sts	0x0190, r25
    1f84:	80 93 8f 01 	sts	0x018F, r24
    1f88:	85 e6       	ldi	r24, 0x65	; 101
    1f8a:	91 e0       	ldi	r25, 0x01	; 1
    1f8c:	90 93 76 01 	sts	0x0176, r25
    1f90:	80 93 75 01 	sts	0x0175, r24
    1f94:	8d e6       	ldi	r24, 0x6D	; 109
    1f96:	91 e0       	ldi	r25, 0x01	; 1
    1f98:	90 93 78 01 	sts	0x0178, r25
    1f9c:	80 93 77 01 	sts	0x0177, r24
    1fa0:	81 e6       	ldi	r24, 0x61	; 97
    1fa2:	91 e0       	ldi	r25, 0x01	; 1
    1fa4:	90 93 8a 01 	sts	0x018A, r25
    1fa8:	80 93 89 01 	sts	0x0189, r24
                        break;
    1fac:	22 c3       	rjmp	.+1604   	; 0x25f2 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
    1fae:	89 e6       	ldi	r24, 0x69	; 105
    1fb0:	91 e0       	ldi	r25, 0x01	; 1
    1fb2:	90 93 90 01 	sts	0x0190, r25
    1fb6:	80 93 8f 01 	sts	0x018F, r24
    1fba:	81 e6       	ldi	r24, 0x61	; 97
    1fbc:	91 e0       	ldi	r25, 0x01	; 1
    1fbe:	90 93 76 01 	sts	0x0176, r25
    1fc2:	80 93 75 01 	sts	0x0175, r24
    1fc6:	8d e6       	ldi	r24, 0x6D	; 109
    1fc8:	91 e0       	ldi	r25, 0x01	; 1
    1fca:	90 93 78 01 	sts	0x0178, r25
    1fce:	80 93 77 01 	sts	0x0177, r24
    1fd2:	85 e6       	ldi	r24, 0x65	; 101
    1fd4:	91 e0       	ldi	r25, 0x01	; 1
    1fd6:	90 93 8a 01 	sts	0x018A, r25
    1fda:	80 93 89 01 	sts	0x0189, r24
                        break;
    1fde:	09 c3       	rjmp	.+1554   	; 0x25f2 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    1fe0:	8d e6       	ldi	r24, 0x6D	; 109
    1fe2:	91 e0       	ldi	r25, 0x01	; 1
    1fe4:	90 93 90 01 	sts	0x0190, r25
    1fe8:	80 93 8f 01 	sts	0x018F, r24
    1fec:	89 e6       	ldi	r24, 0x69	; 105
    1fee:	91 e0       	ldi	r25, 0x01	; 1
    1ff0:	90 93 76 01 	sts	0x0176, r25
    1ff4:	80 93 75 01 	sts	0x0175, r24
    1ff8:	85 e6       	ldi	r24, 0x65	; 101
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	90 93 78 01 	sts	0x0178, r25
    2000:	80 93 77 01 	sts	0x0177, r24
    2004:	81 e6       	ldi	r24, 0x61	; 97
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	90 93 8a 01 	sts	0x018A, r25
    200c:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
    2010:	81 e0       	ldi	r24, 0x01	; 1
    2012:	90 e0       	ldi	r25, 0x00	; 0
    2014:	90 93 38 01 	sts	0x0138, r25
    2018:	80 93 37 01 	sts	0x0137, r24
                        break;
    201c:	f0 c2       	rjmp	.+1504   	; 0x25fe <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
    201e:	ed 81       	ldd	r30, Y+5	; 0x05
    2020:	fe 81       	ldd	r31, Y+6	; 0x06
    2022:	e2 30       	cpi	r30, 0x02	; 2
    2024:	f1 05       	cpc	r31, r1
    2026:	31 f1       	breq	.+76     	; 0x2074 <localize+0x2ae>
    2028:	1c f4       	brge	.+6      	; 0x2030 <localize+0x26a>
    202a:	ef 2b       	or	r30, r31
    202c:	51 f0       	breq	.+20     	; 0x2042 <localize+0x27c>
    202e:	6d c0       	rjmp	.+218    	; 0x210a <localize+0x344>
    2030:	8d 81       	ldd	r24, Y+5	; 0x05
    2032:	9e 81       	ldd	r25, Y+6	; 0x06
    2034:	83 30       	cpi	r24, 0x03	; 3
    2036:	91 05       	cpc	r25, r1
    2038:	b1 f1       	breq	.+108    	; 0x20a6 <localize+0x2e0>
    203a:	05 97       	sbiw	r24, 0x05	; 5
    203c:	09 f0       	breq	.+2      	; 0x2040 <localize+0x27a>
    203e:	65 c0       	rjmp	.+202    	; 0x210a <localize+0x344>
    2040:	4b c0       	rjmp	.+150    	; 0x20d8 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2042:	8d e6       	ldi	r24, 0x6D	; 109
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	90 93 90 01 	sts	0x0190, r25
    204a:	80 93 8f 01 	sts	0x018F, r24
    204e:	89 e6       	ldi	r24, 0x69	; 105
    2050:	91 e0       	ldi	r25, 0x01	; 1
    2052:	90 93 76 01 	sts	0x0176, r25
    2056:	80 93 75 01 	sts	0x0175, r24
    205a:	85 e6       	ldi	r24, 0x65	; 101
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	90 93 78 01 	sts	0x0178, r25
    2062:	80 93 77 01 	sts	0x0177, r24
    2066:	81 e6       	ldi	r24, 0x61	; 97
    2068:	91 e0       	ldi	r25, 0x01	; 1
    206a:	90 93 8a 01 	sts	0x018A, r25
    206e:	80 93 89 01 	sts	0x0189, r24
                        break;
    2072:	bf c2       	rjmp	.+1406   	; 0x25f2 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
    2074:	8d e6       	ldi	r24, 0x6D	; 109
    2076:	91 e0       	ldi	r25, 0x01	; 1
    2078:	90 93 90 01 	sts	0x0190, r25
    207c:	80 93 8f 01 	sts	0x018F, r24
    2080:	81 e6       	ldi	r24, 0x61	; 97
    2082:	91 e0       	ldi	r25, 0x01	; 1
    2084:	90 93 76 01 	sts	0x0176, r25
    2088:	80 93 75 01 	sts	0x0175, r24
    208c:	85 e6       	ldi	r24, 0x65	; 101
    208e:	91 e0       	ldi	r25, 0x01	; 1
    2090:	90 93 78 01 	sts	0x0178, r25
    2094:	80 93 77 01 	sts	0x0177, r24
    2098:	89 e6       	ldi	r24, 0x69	; 105
    209a:	91 e0       	ldi	r25, 0x01	; 1
    209c:	90 93 8a 01 	sts	0x018A, r25
    20a0:	80 93 89 01 	sts	0x0189, r24
                        break;
    20a4:	a6 c2       	rjmp	.+1356   	; 0x25f2 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
    20a6:	85 e6       	ldi	r24, 0x65	; 101
    20a8:	91 e0       	ldi	r25, 0x01	; 1
    20aa:	90 93 90 01 	sts	0x0190, r25
    20ae:	80 93 8f 01 	sts	0x018F, r24
    20b2:	89 e6       	ldi	r24, 0x69	; 105
    20b4:	91 e0       	ldi	r25, 0x01	; 1
    20b6:	90 93 76 01 	sts	0x0176, r25
    20ba:	80 93 75 01 	sts	0x0175, r24
    20be:	8d e6       	ldi	r24, 0x6D	; 109
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	90 93 78 01 	sts	0x0178, r25
    20c6:	80 93 77 01 	sts	0x0177, r24
    20ca:	81 e6       	ldi	r24, 0x61	; 97
    20cc:	91 e0       	ldi	r25, 0x01	; 1
    20ce:	90 93 8a 01 	sts	0x018A, r25
    20d2:	80 93 89 01 	sts	0x0189, r24
                        break;
    20d6:	8d c2       	rjmp	.+1306   	; 0x25f2 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
    20d8:	85 e6       	ldi	r24, 0x65	; 101
    20da:	91 e0       	ldi	r25, 0x01	; 1
    20dc:	90 93 90 01 	sts	0x0190, r25
    20e0:	80 93 8f 01 	sts	0x018F, r24
    20e4:	81 e6       	ldi	r24, 0x61	; 97
    20e6:	91 e0       	ldi	r25, 0x01	; 1
    20e8:	90 93 76 01 	sts	0x0176, r25
    20ec:	80 93 75 01 	sts	0x0175, r24
    20f0:	8d e6       	ldi	r24, 0x6D	; 109
    20f2:	91 e0       	ldi	r25, 0x01	; 1
    20f4:	90 93 78 01 	sts	0x0178, r25
    20f8:	80 93 77 01 	sts	0x0177, r24
    20fc:	89 e6       	ldi	r24, 0x69	; 105
    20fe:	91 e0       	ldi	r25, 0x01	; 1
    2100:	90 93 8a 01 	sts	0x018A, r25
    2104:	80 93 89 01 	sts	0x0189, r24
                        break;
    2108:	74 c2       	rjmp	.+1256   	; 0x25f2 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    210a:	8d e6       	ldi	r24, 0x6D	; 109
    210c:	91 e0       	ldi	r25, 0x01	; 1
    210e:	90 93 90 01 	sts	0x0190, r25
    2112:	80 93 8f 01 	sts	0x018F, r24
    2116:	89 e6       	ldi	r24, 0x69	; 105
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	90 93 76 01 	sts	0x0176, r25
    211e:	80 93 75 01 	sts	0x0175, r24
    2122:	85 e6       	ldi	r24, 0x65	; 101
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	90 93 78 01 	sts	0x0178, r25
    212a:	80 93 77 01 	sts	0x0177, r24
    212e:	81 e6       	ldi	r24, 0x61	; 97
    2130:	91 e0       	ldi	r25, 0x01	; 1
    2132:	90 93 8a 01 	sts	0x018A, r25
    2136:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	90 e0       	ldi	r25, 0x00	; 0
    213e:	90 93 38 01 	sts	0x0138, r25
    2142:	80 93 37 01 	sts	0x0137, r24
                        break;
    2146:	5b c2       	rjmp	.+1206   	; 0x25fe <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
    2148:	ed 81       	ldd	r30, Y+5	; 0x05
    214a:	fe 81       	ldd	r31, Y+6	; 0x06
    214c:	e1 30       	cpi	r30, 0x01	; 1
    214e:	f1 05       	cpc	r31, r1
    2150:	31 f1       	breq	.+76     	; 0x219e <localize+0x3d8>
    2152:	1c f4       	brge	.+6      	; 0x215a <localize+0x394>
    2154:	ef 2b       	or	r30, r31
    2156:	51 f0       	breq	.+20     	; 0x216c <localize+0x3a6>
    2158:	6d c0       	rjmp	.+218    	; 0x2234 <localize+0x46e>
    215a:	8d 81       	ldd	r24, Y+5	; 0x05
    215c:	9e 81       	ldd	r25, Y+6	; 0x06
    215e:	84 30       	cpi	r24, 0x04	; 4
    2160:	91 05       	cpc	r25, r1
    2162:	b1 f1       	breq	.+108    	; 0x21d0 <localize+0x40a>
    2164:	05 97       	sbiw	r24, 0x05	; 5
    2166:	09 f0       	breq	.+2      	; 0x216a <localize+0x3a4>
    2168:	65 c0       	rjmp	.+202    	; 0x2234 <localize+0x46e>
    216a:	4b c0       	rjmp	.+150    	; 0x2202 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
    216c:	8d e6       	ldi	r24, 0x6D	; 109
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	90 93 90 01 	sts	0x0190, r25
    2174:	80 93 8f 01 	sts	0x018F, r24
    2178:	89 e6       	ldi	r24, 0x69	; 105
    217a:	91 e0       	ldi	r25, 0x01	; 1
    217c:	90 93 76 01 	sts	0x0176, r25
    2180:	80 93 75 01 	sts	0x0175, r24
    2184:	81 e6       	ldi	r24, 0x61	; 97
    2186:	91 e0       	ldi	r25, 0x01	; 1
    2188:	90 93 78 01 	sts	0x0178, r25
    218c:	80 93 77 01 	sts	0x0177, r24
    2190:	85 e6       	ldi	r24, 0x65	; 101
    2192:	91 e0       	ldi	r25, 0x01	; 1
    2194:	90 93 8a 01 	sts	0x018A, r25
    2198:	80 93 89 01 	sts	0x0189, r24
                        break;
    219c:	2a c2       	rjmp	.+1108   	; 0x25f2 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
    219e:	8d e6       	ldi	r24, 0x6D	; 109
    21a0:	91 e0       	ldi	r25, 0x01	; 1
    21a2:	90 93 90 01 	sts	0x0190, r25
    21a6:	80 93 8f 01 	sts	0x018F, r24
    21aa:	85 e6       	ldi	r24, 0x65	; 101
    21ac:	91 e0       	ldi	r25, 0x01	; 1
    21ae:	90 93 76 01 	sts	0x0176, r25
    21b2:	80 93 75 01 	sts	0x0175, r24
    21b6:	81 e6       	ldi	r24, 0x61	; 97
    21b8:	91 e0       	ldi	r25, 0x01	; 1
    21ba:	90 93 78 01 	sts	0x0178, r25
    21be:	80 93 77 01 	sts	0x0177, r24
    21c2:	89 e6       	ldi	r24, 0x69	; 105
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	90 93 8a 01 	sts	0x018A, r25
    21ca:	80 93 89 01 	sts	0x0189, r24
                        break;
    21ce:	11 c2       	rjmp	.+1058   	; 0x25f2 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
    21d0:	81 e6       	ldi	r24, 0x61	; 97
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	90 93 90 01 	sts	0x0190, r25
    21d8:	80 93 8f 01 	sts	0x018F, r24
    21dc:	89 e6       	ldi	r24, 0x69	; 105
    21de:	91 e0       	ldi	r25, 0x01	; 1
    21e0:	90 93 76 01 	sts	0x0176, r25
    21e4:	80 93 75 01 	sts	0x0175, r24
    21e8:	8d e6       	ldi	r24, 0x6D	; 109
    21ea:	91 e0       	ldi	r25, 0x01	; 1
    21ec:	90 93 78 01 	sts	0x0178, r25
    21f0:	80 93 77 01 	sts	0x0177, r24
    21f4:	85 e6       	ldi	r24, 0x65	; 101
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	90 93 8a 01 	sts	0x018A, r25
    21fc:	80 93 89 01 	sts	0x0189, r24
                        break;
    2200:	f8 c1       	rjmp	.+1008   	; 0x25f2 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
    2202:	81 e6       	ldi	r24, 0x61	; 97
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	90 93 90 01 	sts	0x0190, r25
    220a:	80 93 8f 01 	sts	0x018F, r24
    220e:	85 e6       	ldi	r24, 0x65	; 101
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	90 93 76 01 	sts	0x0176, r25
    2216:	80 93 75 01 	sts	0x0175, r24
    221a:	8d e6       	ldi	r24, 0x6D	; 109
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	90 93 78 01 	sts	0x0178, r25
    2222:	80 93 77 01 	sts	0x0177, r24
    2226:	89 e6       	ldi	r24, 0x69	; 105
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	90 93 8a 01 	sts	0x018A, r25
    222e:	80 93 89 01 	sts	0x0189, r24
                        break;
    2232:	df c1       	rjmp	.+958    	; 0x25f2 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2234:	8d e6       	ldi	r24, 0x6D	; 109
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	90 93 90 01 	sts	0x0190, r25
    223c:	80 93 8f 01 	sts	0x018F, r24
    2240:	89 e6       	ldi	r24, 0x69	; 105
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	90 93 76 01 	sts	0x0176, r25
    2248:	80 93 75 01 	sts	0x0175, r24
    224c:	85 e6       	ldi	r24, 0x65	; 101
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	90 93 78 01 	sts	0x0178, r25
    2254:	80 93 77 01 	sts	0x0177, r24
    2258:	81 e6       	ldi	r24, 0x61	; 97
    225a:	91 e0       	ldi	r25, 0x01	; 1
    225c:	90 93 8a 01 	sts	0x018A, r25
    2260:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
    2264:	81 e0       	ldi	r24, 0x01	; 1
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	90 93 38 01 	sts	0x0138, r25
    226c:	80 93 37 01 	sts	0x0137, r24
                        break;
    2270:	c6 c1       	rjmp	.+908    	; 0x25fe <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
    2272:	ed 81       	ldd	r30, Y+5	; 0x05
    2274:	fe 81       	ldd	r31, Y+6	; 0x06
    2276:	e1 30       	cpi	r30, 0x01	; 1
    2278:	f1 05       	cpc	r31, r1
    227a:	31 f1       	breq	.+76     	; 0x22c8 <localize+0x502>
    227c:	1c f4       	brge	.+6      	; 0x2284 <localize+0x4be>
    227e:	ef 2b       	or	r30, r31
    2280:	51 f0       	breq	.+20     	; 0x2296 <localize+0x4d0>
    2282:	6d c0       	rjmp	.+218    	; 0x235e <localize+0x598>
    2284:	8d 81       	ldd	r24, Y+5	; 0x05
    2286:	9e 81       	ldd	r25, Y+6	; 0x06
    2288:	84 30       	cpi	r24, 0x04	; 4
    228a:	91 05       	cpc	r25, r1
    228c:	b1 f1       	breq	.+108    	; 0x22fa <localize+0x534>
    228e:	05 97       	sbiw	r24, 0x05	; 5
    2290:	09 f0       	breq	.+2      	; 0x2294 <localize+0x4ce>
    2292:	65 c0       	rjmp	.+202    	; 0x235e <localize+0x598>
    2294:	4b c0       	rjmp	.+150    	; 0x232c <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
    2296:	89 e6       	ldi	r24, 0x69	; 105
    2298:	91 e0       	ldi	r25, 0x01	; 1
    229a:	90 93 90 01 	sts	0x0190, r25
    229e:	80 93 8f 01 	sts	0x018F, r24
    22a2:	8d e6       	ldi	r24, 0x6D	; 109
    22a4:	91 e0       	ldi	r25, 0x01	; 1
    22a6:	90 93 76 01 	sts	0x0176, r25
    22aa:	80 93 75 01 	sts	0x0175, r24
    22ae:	85 e6       	ldi	r24, 0x65	; 101
    22b0:	91 e0       	ldi	r25, 0x01	; 1
    22b2:	90 93 78 01 	sts	0x0178, r25
    22b6:	80 93 77 01 	sts	0x0177, r24
    22ba:	81 e6       	ldi	r24, 0x61	; 97
    22bc:	91 e0       	ldi	r25, 0x01	; 1
    22be:	90 93 8a 01 	sts	0x018A, r25
    22c2:	80 93 89 01 	sts	0x0189, r24
                        break;
    22c6:	95 c1       	rjmp	.+810    	; 0x25f2 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
    22c8:	85 e6       	ldi	r24, 0x65	; 101
    22ca:	91 e0       	ldi	r25, 0x01	; 1
    22cc:	90 93 90 01 	sts	0x0190, r25
    22d0:	80 93 8f 01 	sts	0x018F, r24
    22d4:	8d e6       	ldi	r24, 0x6D	; 109
    22d6:	91 e0       	ldi	r25, 0x01	; 1
    22d8:	90 93 76 01 	sts	0x0176, r25
    22dc:	80 93 75 01 	sts	0x0175, r24
    22e0:	89 e6       	ldi	r24, 0x69	; 105
    22e2:	91 e0       	ldi	r25, 0x01	; 1
    22e4:	90 93 78 01 	sts	0x0178, r25
    22e8:	80 93 77 01 	sts	0x0177, r24
    22ec:	81 e6       	ldi	r24, 0x61	; 97
    22ee:	91 e0       	ldi	r25, 0x01	; 1
    22f0:	90 93 8a 01 	sts	0x018A, r25
    22f4:	80 93 89 01 	sts	0x0189, r24
                        break;
    22f8:	7c c1       	rjmp	.+760    	; 0x25f2 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
    22fa:	89 e6       	ldi	r24, 0x69	; 105
    22fc:	91 e0       	ldi	r25, 0x01	; 1
    22fe:	90 93 90 01 	sts	0x0190, r25
    2302:	80 93 8f 01 	sts	0x018F, r24
    2306:	81 e6       	ldi	r24, 0x61	; 97
    2308:	91 e0       	ldi	r25, 0x01	; 1
    230a:	90 93 76 01 	sts	0x0176, r25
    230e:	80 93 75 01 	sts	0x0175, r24
    2312:	85 e6       	ldi	r24, 0x65	; 101
    2314:	91 e0       	ldi	r25, 0x01	; 1
    2316:	90 93 78 01 	sts	0x0178, r25
    231a:	80 93 77 01 	sts	0x0177, r24
    231e:	8d e6       	ldi	r24, 0x6D	; 109
    2320:	91 e0       	ldi	r25, 0x01	; 1
    2322:	90 93 8a 01 	sts	0x018A, r25
    2326:	80 93 89 01 	sts	0x0189, r24
                        break;
    232a:	63 c1       	rjmp	.+710    	; 0x25f2 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
    232c:	85 e6       	ldi	r24, 0x65	; 101
    232e:	91 e0       	ldi	r25, 0x01	; 1
    2330:	90 93 90 01 	sts	0x0190, r25
    2334:	80 93 8f 01 	sts	0x018F, r24
    2338:	81 e6       	ldi	r24, 0x61	; 97
    233a:	91 e0       	ldi	r25, 0x01	; 1
    233c:	90 93 76 01 	sts	0x0176, r25
    2340:	80 93 75 01 	sts	0x0175, r24
    2344:	89 e6       	ldi	r24, 0x69	; 105
    2346:	91 e0       	ldi	r25, 0x01	; 1
    2348:	90 93 78 01 	sts	0x0178, r25
    234c:	80 93 77 01 	sts	0x0177, r24
    2350:	8d e6       	ldi	r24, 0x6D	; 109
    2352:	91 e0       	ldi	r25, 0x01	; 1
    2354:	90 93 8a 01 	sts	0x018A, r25
    2358:	80 93 89 01 	sts	0x0189, r24
                        break;
    235c:	4a c1       	rjmp	.+660    	; 0x25f2 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    235e:	8d e6       	ldi	r24, 0x6D	; 109
    2360:	91 e0       	ldi	r25, 0x01	; 1
    2362:	90 93 90 01 	sts	0x0190, r25
    2366:	80 93 8f 01 	sts	0x018F, r24
    236a:	89 e6       	ldi	r24, 0x69	; 105
    236c:	91 e0       	ldi	r25, 0x01	; 1
    236e:	90 93 76 01 	sts	0x0176, r25
    2372:	80 93 75 01 	sts	0x0175, r24
    2376:	85 e6       	ldi	r24, 0x65	; 101
    2378:	91 e0       	ldi	r25, 0x01	; 1
    237a:	90 93 78 01 	sts	0x0178, r25
    237e:	80 93 77 01 	sts	0x0177, r24
    2382:	81 e6       	ldi	r24, 0x61	; 97
    2384:	91 e0       	ldi	r25, 0x01	; 1
    2386:	90 93 8a 01 	sts	0x018A, r25
    238a:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	90 e0       	ldi	r25, 0x00	; 0
    2392:	90 93 38 01 	sts	0x0138, r25
    2396:	80 93 37 01 	sts	0x0137, r24
                        break;
    239a:	31 c1       	rjmp	.+610    	; 0x25fe <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
    239c:	ed 81       	ldd	r30, Y+5	; 0x05
    239e:	fe 81       	ldd	r31, Y+6	; 0x06
    23a0:	e2 30       	cpi	r30, 0x02	; 2
    23a2:	f1 05       	cpc	r31, r1
    23a4:	31 f1       	breq	.+76     	; 0x23f2 <localize+0x62c>
    23a6:	1c f4       	brge	.+6      	; 0x23ae <localize+0x5e8>
    23a8:	ef 2b       	or	r30, r31
    23aa:	51 f0       	breq	.+20     	; 0x23c0 <localize+0x5fa>
    23ac:	6d c0       	rjmp	.+218    	; 0x2488 <localize+0x6c2>
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	83 30       	cpi	r24, 0x03	; 3
    23b4:	91 05       	cpc	r25, r1
    23b6:	b1 f1       	breq	.+108    	; 0x2424 <localize+0x65e>
    23b8:	05 97       	sbiw	r24, 0x05	; 5
    23ba:	09 f0       	breq	.+2      	; 0x23be <localize+0x5f8>
    23bc:	65 c0       	rjmp	.+202    	; 0x2488 <localize+0x6c2>
    23be:	4b c0       	rjmp	.+150    	; 0x2456 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
    23c0:	89 e6       	ldi	r24, 0x69	; 105
    23c2:	91 e0       	ldi	r25, 0x01	; 1
    23c4:	90 93 90 01 	sts	0x0190, r25
    23c8:	80 93 8f 01 	sts	0x018F, r24
    23cc:	8d e6       	ldi	r24, 0x6D	; 109
    23ce:	91 e0       	ldi	r25, 0x01	; 1
    23d0:	90 93 76 01 	sts	0x0176, r25
    23d4:	80 93 75 01 	sts	0x0175, r24
    23d8:	81 e6       	ldi	r24, 0x61	; 97
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	90 93 78 01 	sts	0x0178, r25
    23e0:	80 93 77 01 	sts	0x0177, r24
    23e4:	85 e6       	ldi	r24, 0x65	; 101
    23e6:	91 e0       	ldi	r25, 0x01	; 1
    23e8:	90 93 8a 01 	sts	0x018A, r25
    23ec:	80 93 89 01 	sts	0x0189, r24
                        break;
    23f0:	00 c1       	rjmp	.+512    	; 0x25f2 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
    23f2:	81 e6       	ldi	r24, 0x61	; 97
    23f4:	91 e0       	ldi	r25, 0x01	; 1
    23f6:	90 93 90 01 	sts	0x0190, r25
    23fa:	80 93 8f 01 	sts	0x018F, r24
    23fe:	8d e6       	ldi	r24, 0x6D	; 109
    2400:	91 e0       	ldi	r25, 0x01	; 1
    2402:	90 93 76 01 	sts	0x0176, r25
    2406:	80 93 75 01 	sts	0x0175, r24
    240a:	89 e6       	ldi	r24, 0x69	; 105
    240c:	91 e0       	ldi	r25, 0x01	; 1
    240e:	90 93 78 01 	sts	0x0178, r25
    2412:	80 93 77 01 	sts	0x0177, r24
    2416:	85 e6       	ldi	r24, 0x65	; 101
    2418:	91 e0       	ldi	r25, 0x01	; 1
    241a:	90 93 8a 01 	sts	0x018A, r25
    241e:	80 93 89 01 	sts	0x0189, r24
                        break;
    2422:	e7 c0       	rjmp	.+462    	; 0x25f2 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
    2424:	89 e6       	ldi	r24, 0x69	; 105
    2426:	91 e0       	ldi	r25, 0x01	; 1
    2428:	90 93 90 01 	sts	0x0190, r25
    242c:	80 93 8f 01 	sts	0x018F, r24
    2430:	85 e6       	ldi	r24, 0x65	; 101
    2432:	91 e0       	ldi	r25, 0x01	; 1
    2434:	90 93 76 01 	sts	0x0176, r25
    2438:	80 93 75 01 	sts	0x0175, r24
    243c:	81 e6       	ldi	r24, 0x61	; 97
    243e:	91 e0       	ldi	r25, 0x01	; 1
    2440:	90 93 78 01 	sts	0x0178, r25
    2444:	80 93 77 01 	sts	0x0177, r24
    2448:	8d e6       	ldi	r24, 0x6D	; 109
    244a:	91 e0       	ldi	r25, 0x01	; 1
    244c:	90 93 8a 01 	sts	0x018A, r25
    2450:	80 93 89 01 	sts	0x0189, r24
                        break;
    2454:	ce c0       	rjmp	.+412    	; 0x25f2 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
    2456:	81 e6       	ldi	r24, 0x61	; 97
    2458:	91 e0       	ldi	r25, 0x01	; 1
    245a:	90 93 90 01 	sts	0x0190, r25
    245e:	80 93 8f 01 	sts	0x018F, r24
    2462:	85 e6       	ldi	r24, 0x65	; 101
    2464:	91 e0       	ldi	r25, 0x01	; 1
    2466:	90 93 76 01 	sts	0x0176, r25
    246a:	80 93 75 01 	sts	0x0175, r24
    246e:	89 e6       	ldi	r24, 0x69	; 105
    2470:	91 e0       	ldi	r25, 0x01	; 1
    2472:	90 93 78 01 	sts	0x0178, r25
    2476:	80 93 77 01 	sts	0x0177, r24
    247a:	8d e6       	ldi	r24, 0x6D	; 109
    247c:	91 e0       	ldi	r25, 0x01	; 1
    247e:	90 93 8a 01 	sts	0x018A, r25
    2482:	80 93 89 01 	sts	0x0189, r24
                        break;
    2486:	b5 c0       	rjmp	.+362    	; 0x25f2 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    2488:	8d e6       	ldi	r24, 0x6D	; 109
    248a:	91 e0       	ldi	r25, 0x01	; 1
    248c:	90 93 90 01 	sts	0x0190, r25
    2490:	80 93 8f 01 	sts	0x018F, r24
    2494:	89 e6       	ldi	r24, 0x69	; 105
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	90 93 76 01 	sts	0x0176, r25
    249c:	80 93 75 01 	sts	0x0175, r24
    24a0:	85 e6       	ldi	r24, 0x65	; 101
    24a2:	91 e0       	ldi	r25, 0x01	; 1
    24a4:	90 93 78 01 	sts	0x0178, r25
    24a8:	80 93 77 01 	sts	0x0177, r24
    24ac:	81 e6       	ldi	r24, 0x61	; 97
    24ae:	91 e0       	ldi	r25, 0x01	; 1
    24b0:	90 93 8a 01 	sts	0x018A, r25
    24b4:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	90 93 38 01 	sts	0x0138, r25
    24c0:	80 93 37 01 	sts	0x0137, r24
                        break;
    24c4:	9c c0       	rjmp	.+312    	; 0x25fe <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
    24c6:	ed 81       	ldd	r30, Y+5	; 0x05
    24c8:	fe 81       	ldd	r31, Y+6	; 0x06
    24ca:	e2 30       	cpi	r30, 0x02	; 2
    24cc:	f1 05       	cpc	r31, r1
    24ce:	39 f1       	breq	.+78     	; 0x251e <localize+0x758>
    24d0:	24 f4       	brge	.+8      	; 0x24da <localize+0x714>
    24d2:	31 97       	sbiw	r30, 0x01	; 1
    24d4:	09 f0       	breq	.+2      	; 0x24d8 <localize+0x712>
    24d6:	6e c0       	rjmp	.+220    	; 0x25b4 <localize+0x7ee>
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <localize+0x726>
    24da:	8d 81       	ldd	r24, Y+5	; 0x05
    24dc:	9e 81       	ldd	r25, Y+6	; 0x06
    24de:	83 30       	cpi	r24, 0x03	; 3
    24e0:	91 05       	cpc	r25, r1
    24e2:	b1 f1       	breq	.+108    	; 0x2550 <localize+0x78a>
    24e4:	04 97       	sbiw	r24, 0x04	; 4
    24e6:	09 f0       	breq	.+2      	; 0x24ea <localize+0x724>
    24e8:	65 c0       	rjmp	.+202    	; 0x25b4 <localize+0x7ee>
    24ea:	4b c0       	rjmp	.+150    	; 0x2582 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
    24ec:	85 e6       	ldi	r24, 0x65	; 101
    24ee:	91 e0       	ldi	r25, 0x01	; 1
    24f0:	90 93 90 01 	sts	0x0190, r25
    24f4:	80 93 8f 01 	sts	0x018F, r24
    24f8:	8d e6       	ldi	r24, 0x6D	; 109
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	90 93 76 01 	sts	0x0176, r25
    2500:	80 93 75 01 	sts	0x0175, r24
    2504:	81 e6       	ldi	r24, 0x61	; 97
    2506:	91 e0       	ldi	r25, 0x01	; 1
    2508:	90 93 78 01 	sts	0x0178, r25
    250c:	80 93 77 01 	sts	0x0177, r24
    2510:	89 e6       	ldi	r24, 0x69	; 105
    2512:	91 e0       	ldi	r25, 0x01	; 1
    2514:	90 93 8a 01 	sts	0x018A, r25
    2518:	80 93 89 01 	sts	0x0189, r24
                        break;
    251c:	6a c0       	rjmp	.+212    	; 0x25f2 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
    251e:	81 e6       	ldi	r24, 0x61	; 97
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	90 93 90 01 	sts	0x0190, r25
    2526:	80 93 8f 01 	sts	0x018F, r24
    252a:	8d e6       	ldi	r24, 0x6D	; 109
    252c:	91 e0       	ldi	r25, 0x01	; 1
    252e:	90 93 76 01 	sts	0x0176, r25
    2532:	80 93 75 01 	sts	0x0175, r24
    2536:	85 e6       	ldi	r24, 0x65	; 101
    2538:	91 e0       	ldi	r25, 0x01	; 1
    253a:	90 93 78 01 	sts	0x0178, r25
    253e:	80 93 77 01 	sts	0x0177, r24
    2542:	89 e6       	ldi	r24, 0x69	; 105
    2544:	91 e0       	ldi	r25, 0x01	; 1
    2546:	90 93 8a 01 	sts	0x018A, r25
    254a:	80 93 89 01 	sts	0x0189, r24
                        break;
    254e:	51 c0       	rjmp	.+162    	; 0x25f2 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
    2550:	85 e6       	ldi	r24, 0x65	; 101
    2552:	91 e0       	ldi	r25, 0x01	; 1
    2554:	90 93 90 01 	sts	0x0190, r25
    2558:	80 93 8f 01 	sts	0x018F, r24
    255c:	89 e6       	ldi	r24, 0x69	; 105
    255e:	91 e0       	ldi	r25, 0x01	; 1
    2560:	90 93 76 01 	sts	0x0176, r25
    2564:	80 93 75 01 	sts	0x0175, r24
    2568:	81 e6       	ldi	r24, 0x61	; 97
    256a:	91 e0       	ldi	r25, 0x01	; 1
    256c:	90 93 78 01 	sts	0x0178, r25
    2570:	80 93 77 01 	sts	0x0177, r24
    2574:	8d e6       	ldi	r24, 0x6D	; 109
    2576:	91 e0       	ldi	r25, 0x01	; 1
    2578:	90 93 8a 01 	sts	0x018A, r25
    257c:	80 93 89 01 	sts	0x0189, r24
                        break;
    2580:	38 c0       	rjmp	.+112    	; 0x25f2 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
    2582:	81 e6       	ldi	r24, 0x61	; 97
    2584:	91 e0       	ldi	r25, 0x01	; 1
    2586:	90 93 90 01 	sts	0x0190, r25
    258a:	80 93 8f 01 	sts	0x018F, r24
    258e:	89 e6       	ldi	r24, 0x69	; 105
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	90 93 76 01 	sts	0x0176, r25
    2596:	80 93 75 01 	sts	0x0175, r24
    259a:	85 e6       	ldi	r24, 0x65	; 101
    259c:	91 e0       	ldi	r25, 0x01	; 1
    259e:	90 93 78 01 	sts	0x0178, r25
    25a2:	80 93 77 01 	sts	0x0177, r24
    25a6:	8d e6       	ldi	r24, 0x6D	; 109
    25a8:	91 e0       	ldi	r25, 0x01	; 1
    25aa:	90 93 8a 01 	sts	0x018A, r25
    25ae:	80 93 89 01 	sts	0x0189, r24
                        break;
    25b2:	1f c0       	rjmp	.+62     	; 0x25f2 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
    25b4:	8d e6       	ldi	r24, 0x6D	; 109
    25b6:	91 e0       	ldi	r25, 0x01	; 1
    25b8:	90 93 90 01 	sts	0x0190, r25
    25bc:	80 93 8f 01 	sts	0x018F, r24
    25c0:	89 e6       	ldi	r24, 0x69	; 105
    25c2:	91 e0       	ldi	r25, 0x01	; 1
    25c4:	90 93 76 01 	sts	0x0176, r25
    25c8:	80 93 75 01 	sts	0x0175, r24
    25cc:	85 e6       	ldi	r24, 0x65	; 101
    25ce:	91 e0       	ldi	r25, 0x01	; 1
    25d0:	90 93 78 01 	sts	0x0178, r25
    25d4:	80 93 77 01 	sts	0x0177, r24
    25d8:	81 e6       	ldi	r24, 0x61	; 97
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	90 93 8a 01 	sts	0x018A, r25
    25e0:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	90 93 38 01 	sts	0x0138, r25
    25ec:	80 93 37 01 	sts	0x0137, r24
                        break;
    25f0:	06 c0       	rjmp	.+12     	; 0x25fe <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
    25f2:	80 91 37 01 	lds	r24, 0x0137
    25f6:	90 91 38 01 	lds	r25, 0x0138
    25fa:	89 2b       	or	r24, r25
    25fc:	d1 f0       	breq	.+52     	; 0x2632 <localize+0x86c>
        *orientation = orientation_prev;
    25fe:	80 91 47 01 	lds	r24, 0x0147
    2602:	90 91 48 01 	lds	r25, 0x0148
    2606:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2608:	f8 a1       	ldd	r31, Y+32	; 0x20
    260a:	91 83       	std	Z+1, r25	; 0x01
    260c:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
    260e:	80 91 45 01 	lds	r24, 0x0145
    2612:	90 91 46 01 	lds	r25, 0x0146
    2616:	ef 81       	ldd	r30, Y+7	; 0x07
    2618:	f8 85       	ldd	r31, Y+8	; 0x08
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
    261e:	80 91 43 01 	lds	r24, 0x0143
    2622:	90 91 44 01 	lds	r25, 0x0144
    2626:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2628:	fe 8d       	ldd	r31, Y+30	; 0x1e
    262a:	91 83       	std	Z+1, r25	; 0x01
    262c:	80 83       	st	Z, r24
        return 0;
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	e9 c3       	rjmp	.+2002   	; 0x2e04 <localize+0x103e>
    }
    
    
    float scale = P_vertical/max_distance;
    2632:	26 2d       	mov	r18, r6
    2634:	37 2d       	mov	r19, r7
    2636:	48 2d       	mov	r20, r8
    2638:	59 2d       	mov	r21, r9
    263a:	60 e0       	ldi	r22, 0x00	; 0
    263c:	70 e0       	ldi	r23, 0x00	; 0
    263e:	88 ee       	ldi	r24, 0xE8	; 232
    2640:	91 e4       	ldi	r25, 0x41	; 65
    2642:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__divsf3>
    2646:	26 2e       	mov	r2, r22
    2648:	37 2e       	mov	r3, r23
    264a:	48 2e       	mov	r4, r24
    264c:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
    264e:	e0 90 8f 01 	lds	r14, 0x018F
    2652:	f0 90 90 01 	lds	r15, 0x0190
    2656:	0f 2e       	mov	r0, r31
    2658:	f1 e8       	ldi	r31, 0x81	; 129
    265a:	8f 2e       	mov	r8, r31
    265c:	f1 e0       	ldi	r31, 0x01	; 1
    265e:	9f 2e       	mov	r9, r31
    2660:	f0 2d       	mov	r31, r0
    2662:	f7 01       	movw	r30, r14
    2664:	60 81       	ld	r22, Z
    2666:	71 81       	ldd	r23, Z+1	; 0x01
    2668:	88 27       	eor	r24, r24
    266a:	77 fd       	sbrc	r23, 7
    266c:	80 95       	com	r24
    266e:	98 2f       	mov	r25, r24
    2670:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2674:	22 2d       	mov	r18, r2
    2676:	33 2d       	mov	r19, r3
    2678:	44 2d       	mov	r20, r4
    267a:	55 2d       	mov	r21, r5
    267c:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2680:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2684:	f4 01       	movw	r30, r8
    2686:	71 83       	std	Z+1, r23	; 0x01
    2688:	60 83       	st	Z, r22
    268a:	0f 2e       	mov	r0, r31
    268c:	f3 e8       	ldi	r31, 0x83	; 131
    268e:	6f 2e       	mov	r6, r31
    2690:	f1 e0       	ldi	r31, 0x01	; 1
    2692:	7f 2e       	mov	r7, r31
    2694:	f0 2d       	mov	r31, r0
    2696:	f7 01       	movw	r30, r14
    2698:	62 81       	ldd	r22, Z+2	; 0x02
    269a:	73 81       	ldd	r23, Z+3	; 0x03
    269c:	88 27       	eor	r24, r24
    269e:	77 fd       	sbrc	r23, 7
    26a0:	80 95       	com	r24
    26a2:	98 2f       	mov	r25, r24
    26a4:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    26a8:	22 2d       	mov	r18, r2
    26aa:	33 2d       	mov	r19, r3
    26ac:	44 2d       	mov	r20, r4
    26ae:	55 2d       	mov	r21, r5
    26b0:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    26b4:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    26b8:	f3 01       	movw	r30, r6
    26ba:	71 83       	std	Z+1, r23	; 0x01
    26bc:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
    26be:	00 91 77 01 	lds	r16, 0x0177
    26c2:	10 91 78 01 	lds	r17, 0x0178
    26c6:	0f 2e       	mov	r0, r31
    26c8:	f1 e7       	ldi	r31, 0x71	; 113
    26ca:	af 2e       	mov	r10, r31
    26cc:	f1 e0       	ldi	r31, 0x01	; 1
    26ce:	bf 2e       	mov	r11, r31
    26d0:	f0 2d       	mov	r31, r0
    26d2:	f8 01       	movw	r30, r16
    26d4:	60 81       	ld	r22, Z
    26d6:	71 81       	ldd	r23, Z+1	; 0x01
    26d8:	88 27       	eor	r24, r24
    26da:	77 fd       	sbrc	r23, 7
    26dc:	80 95       	com	r24
    26de:	98 2f       	mov	r25, r24
    26e0:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    26e4:	22 2d       	mov	r18, r2
    26e6:	33 2d       	mov	r19, r3
    26e8:	44 2d       	mov	r20, r4
    26ea:	55 2d       	mov	r21, r5
    26ec:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    26f0:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    26f4:	f5 01       	movw	r30, r10
    26f6:	71 83       	std	Z+1, r23	; 0x01
    26f8:	60 83       	st	Z, r22
    26fa:	0f 2e       	mov	r0, r31
    26fc:	f3 e7       	ldi	r31, 0x73	; 115
    26fe:	cf 2e       	mov	r12, r31
    2700:	f1 e0       	ldi	r31, 0x01	; 1
    2702:	df 2e       	mov	r13, r31
    2704:	f0 2d       	mov	r31, r0
    2706:	f8 01       	movw	r30, r16
    2708:	62 81       	ldd	r22, Z+2	; 0x02
    270a:	73 81       	ldd	r23, Z+3	; 0x03
    270c:	88 27       	eor	r24, r24
    270e:	77 fd       	sbrc	r23, 7
    2710:	80 95       	com	r24
    2712:	98 2f       	mov	r25, r24
    2714:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2718:	22 2d       	mov	r18, r2
    271a:	33 2d       	mov	r19, r3
    271c:	44 2d       	mov	r20, r4
    271e:	55 2d       	mov	r21, r5
    2720:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2724:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2728:	f6 01       	movw	r30, r12
    272a:	71 83       	std	Z+1, r23	; 0x01
    272c:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
    272e:	f7 01       	movw	r30, r14
    2730:	60 81       	ld	r22, Z
    2732:	71 81       	ldd	r23, Z+1	; 0x01
    2734:	f8 01       	movw	r30, r16
    2736:	80 81       	ld	r24, Z
    2738:	91 81       	ldd	r25, Z+1	; 0x01
    273a:	68 0f       	add	r22, r24
    273c:	79 1f       	adc	r23, r25
    273e:	88 27       	eor	r24, r24
    2740:	77 fd       	sbrc	r23, 7
    2742:	80 95       	com	r24
    2744:	98 2f       	mov	r25, r24
    2746:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    274a:	20 e0       	ldi	r18, 0x00	; 0
    274c:	30 e0       	ldi	r19, 0x00	; 0
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	5f e3       	ldi	r21, 0x3F	; 63
    2752:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2756:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    275a:	e9 a1       	ldd	r30, Y+33	; 0x21
    275c:	fa a1       	ldd	r31, Y+34	; 0x22
    275e:	71 83       	std	Z+1, r23	; 0x01
    2760:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
    2762:	a0 91 8f 01 	lds	r26, 0x018F
    2766:	b0 91 90 01 	lds	r27, 0x0190
    276a:	e0 91 77 01 	lds	r30, 0x0177
    276e:	f0 91 78 01 	lds	r31, 0x0178
    2772:	12 96       	adiw	r26, 0x02	; 2
    2774:	6d 91       	ld	r22, X+
    2776:	7c 91       	ld	r23, X
    2778:	13 97       	sbiw	r26, 0x03	; 3
    277a:	82 81       	ldd	r24, Z+2	; 0x02
    277c:	93 81       	ldd	r25, Z+3	; 0x03
    277e:	68 0f       	add	r22, r24
    2780:	79 1f       	adc	r23, r25
    2782:	88 27       	eor	r24, r24
    2784:	77 fd       	sbrc	r23, 7
    2786:	80 95       	com	r24
    2788:	98 2f       	mov	r25, r24
    278a:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	5f e3       	ldi	r21, 0x3F	; 63
    2796:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    279a:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    279e:	eb a1       	ldd	r30, Y+35	; 0x23
    27a0:	fc a1       	ldd	r31, Y+36	; 0x24
    27a2:	71 83       	std	Z+1, r23	; 0x01
    27a4:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
    27a6:	f4 01       	movw	r30, r8
    27a8:	60 81       	ld	r22, Z
    27aa:	71 81       	ldd	r23, Z+1	; 0x01
    27ac:	f5 01       	movw	r30, r10
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	68 0f       	add	r22, r24
    27b4:	79 1f       	adc	r23, r25
    27b6:	88 27       	eor	r24, r24
    27b8:	77 fd       	sbrc	r23, 7
    27ba:	80 95       	com	r24
    27bc:	98 2f       	mov	r25, r24
    27be:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    27c2:	20 e0       	ldi	r18, 0x00	; 0
    27c4:	30 e0       	ldi	r19, 0x00	; 0
    27c6:	40 e0       	ldi	r20, 0x00	; 0
    27c8:	5f e3       	ldi	r21, 0x3F	; 63
    27ca:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    27ce:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    27d2:	1b 01       	movw	r2, r22
    27d4:	70 93 96 01 	sts	0x0196, r23
    27d8:	60 93 95 01 	sts	0x0195, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
    27dc:	f3 01       	movw	r30, r6
    27de:	60 81       	ld	r22, Z
    27e0:	71 81       	ldd	r23, Z+1	; 0x01
    27e2:	f6 01       	movw	r30, r12
    27e4:	80 81       	ld	r24, Z
    27e6:	91 81       	ldd	r25, Z+1	; 0x01
    27e8:	68 0f       	add	r22, r24
    27ea:	79 1f       	adc	r23, r25
    27ec:	88 27       	eor	r24, r24
    27ee:	77 fd       	sbrc	r23, 7
    27f0:	80 95       	com	r24
    27f2:	98 2f       	mov	r25, r24
    27f4:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	5f e3       	ldi	r21, 0x3F	; 63
    2800:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2804:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2808:	8b 01       	movw	r16, r22
    280a:	70 93 98 01 	sts	0x0198, r23
    280e:	60 93 97 01 	sts	0x0197, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
    2812:	22 9c       	mul	r2, r2
    2814:	b0 01       	movw	r22, r0
    2816:	23 9c       	mul	r2, r3
    2818:	70 0d       	add	r23, r0
    281a:	70 0d       	add	r23, r0
    281c:	11 24       	eor	r1, r1
    281e:	00 9f       	mul	r16, r16
    2820:	c0 01       	movw	r24, r0
    2822:	01 9f       	mul	r16, r17
    2824:	90 0d       	add	r25, r0
    2826:	90 0d       	add	r25, r0
    2828:	11 24       	eor	r1, r1
    282a:	68 0f       	add	r22, r24
    282c:	79 1f       	adc	r23, r25
    282e:	88 27       	eor	r24, r24
    2830:	77 fd       	sbrc	r23, 7
    2832:	80 95       	com	r24
    2834:	98 2f       	mov	r25, r24
    2836:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    283a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    283e:	2b 01       	movw	r4, r22
    2840:	3c 01       	movw	r6, r24
    2842:	60 93 79 01 	sts	0x0179, r22
    2846:	70 93 7a 01 	sts	0x017A, r23
    284a:	80 93 7b 01 	sts	0x017B, r24
    284e:	90 93 7c 01 	sts	0x017C, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
    2852:	80 91 77 01 	lds	r24, 0x0177
    2856:	90 91 78 01 	lds	r25, 0x0178
    285a:	9a 83       	std	Y+2, r25	; 0x02
    285c:	89 83       	std	Y+1, r24	; 0x01
    285e:	e0 91 8f 01 	lds	r30, 0x018F
    2862:	f0 91 90 01 	lds	r31, 0x0190
    2866:	fe 83       	std	Y+6, r31	; 0x06
    2868:	ed 83       	std	Y+5, r30	; 0x05
    286a:	fc 01       	movw	r30, r24
    286c:	60 81       	ld	r22, Z
    286e:	71 81       	ldd	r23, Z+1	; 0x01
    2870:	ed 81       	ldd	r30, Y+5	; 0x05
    2872:	fe 81       	ldd	r31, Y+6	; 0x06
    2874:	80 81       	ld	r24, Z
    2876:	91 81       	ldd	r25, Z+1	; 0x01
    2878:	68 1b       	sub	r22, r24
    287a:	79 0b       	sbc	r23, r25
    287c:	88 27       	eor	r24, r24
    287e:	77 fd       	sbrc	r23, 7
    2880:	80 95       	com	r24
    2882:	98 2f       	mov	r25, r24
    2884:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2888:	6b 01       	movw	r12, r22
    288a:	7c 01       	movw	r14, r24
    288c:	e9 81       	ldd	r30, Y+1	; 0x01
    288e:	fa 81       	ldd	r31, Y+2	; 0x02
    2890:	62 81       	ldd	r22, Z+2	; 0x02
    2892:	73 81       	ldd	r23, Z+3	; 0x03
    2894:	ed 81       	ldd	r30, Y+5	; 0x05
    2896:	fe 81       	ldd	r31, Y+6	; 0x06
    2898:	82 81       	ldd	r24, Z+2	; 0x02
    289a:	93 81       	ldd	r25, Z+3	; 0x03
    289c:	68 1b       	sub	r22, r24
    289e:	79 0b       	sbc	r23, r25
    28a0:	88 27       	eor	r24, r24
    28a2:	77 fd       	sbrc	r23, 7
    28a4:	80 95       	com	r24
    28a6:	98 2f       	mov	r25, r24
    28a8:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    28ac:	a7 01       	movw	r20, r14
    28ae:	96 01       	movw	r18, r12
    28b0:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <atan2>
    28b4:	4b 01       	movw	r8, r22
    28b6:	5c 01       	movw	r10, r24
    28b8:	60 93 85 01 	sts	0x0185, r22
    28bc:	70 93 86 01 	sts	0x0186, r23
    28c0:	80 93 87 01 	sts	0x0187, r24
    28c4:	90 93 88 01 	sts	0x0188, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
    28c8:	ed 81       	ldd	r30, Y+5	; 0x05
    28ca:	fe 81       	ldd	r31, Y+6	; 0x06
    28cc:	60 81       	ld	r22, Z
    28ce:	71 81       	ldd	r23, Z+1	; 0x01
    28d0:	e9 81       	ldd	r30, Y+1	; 0x01
    28d2:	fa 81       	ldd	r31, Y+2	; 0x02
    28d4:	80 81       	ld	r24, Z
    28d6:	91 81       	ldd	r25, Z+1	; 0x01
    28d8:	68 1b       	sub	r22, r24
    28da:	79 0b       	sbc	r23, r25
    28dc:	88 27       	eor	r24, r24
    28de:	77 fd       	sbrc	r23, 7
    28e0:	80 95       	com	r24
    28e2:	98 2f       	mov	r25, r24
    28e4:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    28e8:	6b 01       	movw	r12, r22
    28ea:	7c 01       	movw	r14, r24
    28ec:	ed 81       	ldd	r30, Y+5	; 0x05
    28ee:	fe 81       	ldd	r31, Y+6	; 0x06
    28f0:	62 81       	ldd	r22, Z+2	; 0x02
    28f2:	73 81       	ldd	r23, Z+3	; 0x03
    28f4:	e9 81       	ldd	r30, Y+1	; 0x01
    28f6:	fa 81       	ldd	r31, Y+2	; 0x02
    28f8:	82 81       	ldd	r24, Z+2	; 0x02
    28fa:	93 81       	ldd	r25, Z+3	; 0x03
    28fc:	68 1b       	sub	r22, r24
    28fe:	79 0b       	sbc	r23, r25
    2900:	88 27       	eor	r24, r24
    2902:	77 fd       	sbrc	r23, 7
    2904:	80 95       	com	r24
    2906:	98 2f       	mov	r25, r24
    2908:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    290c:	a7 01       	movw	r20, r14
    290e:	96 01       	movw	r18, r12
    2910:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <atan2>
    2914:	6b 01       	movw	r12, r22
    2916:	7c 01       	movw	r14, r24
    2918:	60 93 7d 01 	sts	0x017D, r22
    291c:	70 93 7e 01 	sts	0x017E, r23
    2920:	80 93 7f 01 	sts	0x017F, r24
    2924:	90 93 80 01 	sts	0x0180, r25
    alpha = -atan2(S0[0],S0[1]);
    2928:	b8 01       	movw	r22, r16
    292a:	88 27       	eor	r24, r24
    292c:	77 fd       	sbrc	r23, 7
    292e:	80 95       	com	r24
    2930:	98 2f       	mov	r25, r24
    2932:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2936:	69 83       	std	Y+1, r22	; 0x01
    2938:	7a 83       	std	Y+2, r23	; 0x02
    293a:	8b 83       	std	Y+3, r24	; 0x03
    293c:	9c 83       	std	Y+4, r25	; 0x04
    293e:	b1 01       	movw	r22, r2
    2940:	88 27       	eor	r24, r24
    2942:	77 fd       	sbrc	r23, 7
    2944:	80 95       	com	r24
    2946:	98 2f       	mov	r25, r24
    2948:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    294c:	29 81       	ldd	r18, Y+1	; 0x01
    294e:	3a 81       	ldd	r19, Y+2	; 0x02
    2950:	4b 81       	ldd	r20, Y+3	; 0x03
    2952:	5c 81       	ldd	r21, Y+4	; 0x04
    2954:	0e 94 8f 17 	call	0x2f1e	; 0x2f1e <atan2>
    2958:	9b 01       	movw	r18, r22
    295a:	ac 01       	movw	r20, r24
    295c:	dc 01       	movw	r26, r24
    295e:	cb 01       	movw	r24, r22
    2960:	b0 58       	subi	r27, 0x80	; 128
    2962:	80 93 99 01 	sts	0x0199, r24
    2966:	90 93 9a 01 	sts	0x019A, r25
    296a:	a0 93 9b 01 	sts	0x019B, r26
    296e:	b0 93 9c 01 	sts	0x019C, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    2972:	77 fa       	bst	r7, 7
    2974:	70 94       	com	r7
    2976:	77 f8       	bld	r7, 7
    2978:	70 94       	com	r7
    297a:	c5 01       	movw	r24, r10
    297c:	b4 01       	movw	r22, r8
    297e:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
    2982:	86 2e       	mov	r8, r22
    2984:	97 2e       	mov	r9, r23
    2986:	a8 2e       	mov	r10, r24
    2988:	b9 2e       	mov	r11, r25
    298a:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <cos>
    298e:	9b 01       	movw	r18, r22
    2990:	ac 01       	movw	r20, r24
    2992:	c3 01       	movw	r24, r6
    2994:	b2 01       	movw	r22, r4
    2996:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    299a:	20 e0       	ldi	r18, 0x00	; 0
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	a9 01       	movw	r20, r18
    29a0:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
    29a4:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    29a8:	8b 01       	movw	r16, r22
    29aa:	70 93 40 01 	sts	0x0140, r23
    29ae:	60 93 3f 01 	sts	0x013F, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    29b2:	68 2d       	mov	r22, r8
    29b4:	79 2d       	mov	r23, r9
    29b6:	8a 2d       	mov	r24, r10
    29b8:	9b 2d       	mov	r25, r11
    29ba:	0e 94 00 1a 	call	0x3400	; 0x3400 <sin>
    29be:	9b 01       	movw	r18, r22
    29c0:	ac 01       	movw	r20, r24
    29c2:	c3 01       	movw	r24, r6
    29c4:	b2 01       	movw	r22, r4
    29c6:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	40 e2       	ldi	r20, 0x20	; 32
    29d0:	51 e4       	ldi	r21, 0x41	; 65
    29d2:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
    29d6:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    29da:	70 93 3e 01 	sts	0x013E, r23
    29de:	60 93 3d 01 	sts	0x013D, r22
    orientation_current = (theta2) * 180/M_PI;
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	44 e3       	ldi	r20, 0x34	; 52
    29e8:	53 e4       	ldi	r21, 0x43	; 67
    29ea:	c7 01       	movw	r24, r14
    29ec:	b6 01       	movw	r22, r12
    29ee:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    29f2:	2b ed       	ldi	r18, 0xDB	; 219
    29f4:	3f e0       	ldi	r19, 0x0F	; 15
    29f6:	49 e4       	ldi	r20, 0x49	; 73
    29f8:	50 e4       	ldi	r21, 0x40	; 64
    29fa:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <__divsf3>
    29fe:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2a02:	70 93 42 01 	sts	0x0142, r23
    2a06:	60 93 41 01 	sts	0x0141, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    2a0a:	c0 90 39 01 	lds	r12, 0x0139
    2a0e:	d0 90 3a 01 	lds	r13, 0x013A
    2a12:	e0 90 3b 01 	lds	r14, 0x013B
    2a16:	f0 90 3c 01 	lds	r15, 0x013C
    2a1a:	60 91 45 01 	lds	r22, 0x0145
    2a1e:	70 91 46 01 	lds	r23, 0x0146
    2a22:	88 27       	eor	r24, r24
    2a24:	77 fd       	sbrc	r23, 7
    2a26:	80 95       	com	r24
    2a28:	98 2f       	mov	r25, r24
    2a2a:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2a2e:	a7 01       	movw	r20, r14
    2a30:	96 01       	movw	r18, r12
    2a32:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2a36:	4b 01       	movw	r8, r22
    2a38:	5c 01       	movw	r10, r24
    2a3a:	a7 01       	movw	r20, r14
    2a3c:	96 01       	movw	r18, r12
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	80 e8       	ldi	r24, 0x80	; 128
    2a44:	9f e3       	ldi	r25, 0x3F	; 63
    2a46:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
    2a4a:	6b 01       	movw	r12, r22
    2a4c:	7c 01       	movw	r14, r24
    2a4e:	b8 01       	movw	r22, r16
    2a50:	88 27       	eor	r24, r24
    2a52:	77 fd       	sbrc	r23, 7
    2a54:	80 95       	com	r24
    2a56:	98 2f       	mov	r25, r24
    2a58:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2a5c:	9b 01       	movw	r18, r22
    2a5e:	ac 01       	movw	r20, r24
    2a60:	c7 01       	movw	r24, r14
    2a62:	b6 01       	movw	r22, r12
    2a64:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2a68:	9b 01       	movw	r18, r22
    2a6a:	ac 01       	movw	r20, r24
    2a6c:	c5 01       	movw	r24, r10
    2a6e:	b4 01       	movw	r22, r8
    2a70:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
    2a74:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2a78:	ef 81       	ldd	r30, Y+7	; 0x07
    2a7a:	f8 85       	ldd	r31, Y+8	; 0x08
    2a7c:	71 83       	std	Z+1, r23	; 0x01
    2a7e:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    2a80:	c0 90 39 01 	lds	r12, 0x0139
    2a84:	d0 90 3a 01 	lds	r13, 0x013A
    2a88:	e0 90 3b 01 	lds	r14, 0x013B
    2a8c:	f0 90 3c 01 	lds	r15, 0x013C
    2a90:	60 91 43 01 	lds	r22, 0x0143
    2a94:	70 91 44 01 	lds	r23, 0x0144
    2a98:	88 27       	eor	r24, r24
    2a9a:	77 fd       	sbrc	r23, 7
    2a9c:	80 95       	com	r24
    2a9e:	98 2f       	mov	r25, r24
    2aa0:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2aa4:	a7 01       	movw	r20, r14
    2aa6:	96 01       	movw	r18, r12
    2aa8:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2aac:	4b 01       	movw	r8, r22
    2aae:	5c 01       	movw	r10, r24
    2ab0:	a7 01       	movw	r20, r14
    2ab2:	96 01       	movw	r18, r12
    2ab4:	60 e0       	ldi	r22, 0x00	; 0
    2ab6:	70 e0       	ldi	r23, 0x00	; 0
    2ab8:	80 e8       	ldi	r24, 0x80	; 128
    2aba:	9f e3       	ldi	r25, 0x3F	; 63
    2abc:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
    2ac0:	6b 01       	movw	r12, r22
    2ac2:	7c 01       	movw	r14, r24
    2ac4:	60 91 3d 01 	lds	r22, 0x013D
    2ac8:	70 91 3e 01 	lds	r23, 0x013E
    2acc:	88 27       	eor	r24, r24
    2ace:	77 fd       	sbrc	r23, 7
    2ad0:	80 95       	com	r24
    2ad2:	98 2f       	mov	r25, r24
    2ad4:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2ad8:	9b 01       	movw	r18, r22
    2ada:	ac 01       	movw	r20, r24
    2adc:	c7 01       	movw	r24, r14
    2ade:	b6 01       	movw	r22, r12
    2ae0:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2ae4:	9b 01       	movw	r18, r22
    2ae6:	ac 01       	movw	r20, r24
    2ae8:	c5 01       	movw	r24, r10
    2aea:	b4 01       	movw	r22, r8
    2aec:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
    2af0:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2af4:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2af6:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2af8:	71 83       	std	Z+1, r23	; 0x01
    2afa:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    2afc:	c0 90 39 01 	lds	r12, 0x0139
    2b00:	d0 90 3a 01 	lds	r13, 0x013A
    2b04:	e0 90 3b 01 	lds	r14, 0x013B
    2b08:	f0 90 3c 01 	lds	r15, 0x013C
    2b0c:	60 91 47 01 	lds	r22, 0x0147
    2b10:	70 91 48 01 	lds	r23, 0x0148
    2b14:	88 27       	eor	r24, r24
    2b16:	77 fd       	sbrc	r23, 7
    2b18:	80 95       	com	r24
    2b1a:	98 2f       	mov	r25, r24
    2b1c:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2b20:	a7 01       	movw	r20, r14
    2b22:	96 01       	movw	r18, r12
    2b24:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2b28:	4b 01       	movw	r8, r22
    2b2a:	5c 01       	movw	r10, r24
    2b2c:	a7 01       	movw	r20, r14
    2b2e:	96 01       	movw	r18, r12
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	80 e8       	ldi	r24, 0x80	; 128
    2b36:	9f e3       	ldi	r25, 0x3F	; 63
    2b38:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <__subsf3>
    2b3c:	6b 01       	movw	r12, r22
    2b3e:	7c 01       	movw	r14, r24
    2b40:	60 91 41 01 	lds	r22, 0x0141
    2b44:	70 91 42 01 	lds	r23, 0x0142
    2b48:	88 27       	eor	r24, r24
    2b4a:	77 fd       	sbrc	r23, 7
    2b4c:	80 95       	com	r24
    2b4e:	98 2f       	mov	r25, r24
    2b50:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2b54:	9b 01       	movw	r18, r22
    2b56:	ac 01       	movw	r20, r24
    2b58:	c7 01       	movw	r24, r14
    2b5a:	b6 01       	movw	r22, r12
    2b5c:	0e 94 9d 19 	call	0x333a	; 0x333a <__mulsf3>
    2b60:	9b 01       	movw	r18, r22
    2b62:	ac 01       	movw	r20, r24
    2b64:	c5 01       	movw	r24, r10
    2b66:	b4 01       	movw	r22, r8
    2b68:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <__addsf3>
    2b6c:	0e 94 51 18 	call	0x30a2	; 0x30a2 <__fixsfsi>
    2b70:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2b72:	f8 a1       	ldd	r31, Y+32	; 0x20
    2b74:	71 83       	std	Z+1, r23	; 0x01
    2b76:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    2b78:	ef 81       	ldd	r30, Y+7	; 0x07
    2b7a:	f8 85       	ldd	r31, Y+8	; 0x08
    2b7c:	80 81       	ld	r24, Z
    2b7e:	91 81       	ldd	r25, Z+1	; 0x01
    2b80:	90 93 46 01 	sts	0x0146, r25
    2b84:	80 93 45 01 	sts	0x0145, r24
    y_robot_prev     = *y_robot;
    2b88:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2b8a:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	90 93 44 01 	sts	0x0144, r25
    2b94:	80 93 43 01 	sts	0x0143, r24
    orientation_prev = *orientation;
    2b98:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2b9a:	f8 a1       	ldd	r31, Y+32	; 0x20
    2b9c:	80 81       	ld	r24, Z
    2b9e:	91 81       	ldd	r25, Z+1	; 0x01
    2ba0:	90 93 48 01 	sts	0x0148, r25
    2ba4:	80 93 47 01 	sts	0x0147, r24
    
    return 1;
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	2c c1       	rjmp	.+600    	; 0x2e04 <localize+0x103e>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    2bac:	e0 91 0b 01 	lds	r30, 0x010B
    2bb0:	f0 91 0c 01 	lds	r31, 0x010C
    2bb4:	4c 01       	movw	r8, r24
    2bb6:	8e 1a       	sub	r8, r30
    2bb8:	9f 0a       	sbc	r9, r31
    2bba:	90 92 6e 01 	sts	0x016E, r9
    2bbe:	80 92 6d 01 	sts	0x016D, r8
    2bc2:	80 91 09 01 	lds	r24, 0x0109
    2bc6:	90 91 0a 01 	lds	r25, 0x010A
    2bca:	08 1b       	sub	r16, r24
    2bcc:	19 0b       	sbc	r17, r25
    2bce:	10 93 70 01 	sts	0x0170, r17
    2bd2:	00 93 6f 01 	sts	0x016F, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    2bd6:	3b 01       	movw	r6, r22
    2bd8:	6e 1a       	sub	r6, r30
    2bda:	7f 0a       	sbc	r7, r31
    2bdc:	70 92 6a 01 	sts	0x016A, r7
    2be0:	60 92 69 01 	sts	0x0169, r6
    2be4:	e8 1a       	sub	r14, r24
    2be6:	f9 0a       	sbc	r15, r25
    2be8:	f0 92 6c 01 	sts	0x016C, r15
    2bec:	e0 92 6b 01 	sts	0x016B, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    2bf0:	2a 01       	movw	r4, r20
    2bf2:	4e 1a       	sub	r4, r30
    2bf4:	5f 0a       	sbc	r5, r31
    2bf6:	50 92 66 01 	sts	0x0166, r5
    2bfa:	40 92 65 01 	sts	0x0165, r4
    2bfe:	16 01       	movw	r2, r12
    2c00:	28 1a       	sub	r2, r24
    2c02:	39 0a       	sbc	r3, r25
    2c04:	30 92 68 01 	sts	0x0168, r3
    2c08:	20 92 67 01 	sts	0x0167, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    2c0c:	69 01       	movw	r12, r18
    2c0e:	ce 1a       	sub	r12, r30
    2c10:	df 0a       	sbc	r13, r31
    2c12:	d0 92 62 01 	sts	0x0162, r13
    2c16:	c0 92 61 01 	sts	0x0161, r12
    2c1a:	a8 1a       	sub	r10, r24
    2c1c:	b9 0a       	sbc	r11, r25
    2c1e:	b0 92 64 01 	sts	0x0164, r11
    2c22:	a0 92 63 01 	sts	0x0163, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    2c26:	93 01       	movw	r18, r6
    2c28:	28 19       	sub	r18, r8
    2c2a:	39 09       	sbc	r19, r9
    2c2c:	c7 01       	movw	r24, r14
    2c2e:	80 1b       	sub	r24, r16
    2c30:	91 0b       	sbc	r25, r17
    2c32:	22 9f       	mul	r18, r18
    2c34:	b0 01       	movw	r22, r0
    2c36:	23 9f       	mul	r18, r19
    2c38:	70 0d       	add	r23, r0
    2c3a:	70 0d       	add	r23, r0
    2c3c:	11 24       	eor	r1, r1
    2c3e:	88 9f       	mul	r24, r24
    2c40:	90 01       	movw	r18, r0
    2c42:	89 9f       	mul	r24, r25
    2c44:	30 0d       	add	r19, r0
    2c46:	30 0d       	add	r19, r0
    2c48:	11 24       	eor	r1, r1
    2c4a:	62 0f       	add	r22, r18
    2c4c:	73 1f       	adc	r23, r19
    2c4e:	88 27       	eor	r24, r24
    2c50:	77 fd       	sbrc	r23, 7
    2c52:	80 95       	com	r24
    2c54:	98 2f       	mov	r25, r24
    2c56:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2c5a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    2c5e:	60 93 49 01 	sts	0x0149, r22
    2c62:	70 93 4a 01 	sts	0x014A, r23
    2c66:	80 93 4b 01 	sts	0x014B, r24
    2c6a:	90 93 4c 01 	sts	0x014C, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    2c6e:	92 01       	movw	r18, r4
    2c70:	28 19       	sub	r18, r8
    2c72:	39 09       	sbc	r19, r9
    2c74:	c1 01       	movw	r24, r2
    2c76:	80 1b       	sub	r24, r16
    2c78:	91 0b       	sbc	r25, r17
    2c7a:	22 9f       	mul	r18, r18
    2c7c:	b0 01       	movw	r22, r0
    2c7e:	23 9f       	mul	r18, r19
    2c80:	70 0d       	add	r23, r0
    2c82:	70 0d       	add	r23, r0
    2c84:	11 24       	eor	r1, r1
    2c86:	88 9f       	mul	r24, r24
    2c88:	90 01       	movw	r18, r0
    2c8a:	89 9f       	mul	r24, r25
    2c8c:	30 0d       	add	r19, r0
    2c8e:	30 0d       	add	r19, r0
    2c90:	11 24       	eor	r1, r1
    2c92:	62 0f       	add	r22, r18
    2c94:	73 1f       	adc	r23, r19
    2c96:	88 27       	eor	r24, r24
    2c98:	77 fd       	sbrc	r23, 7
    2c9a:	80 95       	com	r24
    2c9c:	98 2f       	mov	r25, r24
    2c9e:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2ca2:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    2ca6:	60 93 4d 01 	sts	0x014D, r22
    2caa:	70 93 4e 01 	sts	0x014E, r23
    2cae:	80 93 4f 01 	sts	0x014F, r24
    2cb2:	90 93 50 01 	sts	0x0150, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    2cb6:	96 01       	movw	r18, r12
    2cb8:	28 19       	sub	r18, r8
    2cba:	39 09       	sbc	r19, r9
    2cbc:	c5 01       	movw	r24, r10
    2cbe:	80 1b       	sub	r24, r16
    2cc0:	91 0b       	sbc	r25, r17
    2cc2:	22 9f       	mul	r18, r18
    2cc4:	b0 01       	movw	r22, r0
    2cc6:	23 9f       	mul	r18, r19
    2cc8:	70 0d       	add	r23, r0
    2cca:	70 0d       	add	r23, r0
    2ccc:	11 24       	eor	r1, r1
    2cce:	88 9f       	mul	r24, r24
    2cd0:	90 01       	movw	r18, r0
    2cd2:	89 9f       	mul	r24, r25
    2cd4:	30 0d       	add	r19, r0
    2cd6:	30 0d       	add	r19, r0
    2cd8:	11 24       	eor	r1, r1
    2cda:	62 0f       	add	r22, r18
    2cdc:	73 1f       	adc	r23, r19
    2cde:	88 27       	eor	r24, r24
    2ce0:	77 fd       	sbrc	r23, 7
    2ce2:	80 95       	com	r24
    2ce4:	98 2f       	mov	r25, r24
    2ce6:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2cea:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    2cee:	60 93 51 01 	sts	0x0151, r22
    2cf2:	70 93 52 01 	sts	0x0152, r23
    2cf6:	80 93 53 01 	sts	0x0153, r24
    2cfa:	90 93 54 01 	sts	0x0154, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    2cfe:	92 01       	movw	r18, r4
    2d00:	26 19       	sub	r18, r6
    2d02:	37 09       	sbc	r19, r7
    2d04:	c1 01       	movw	r24, r2
    2d06:	8e 19       	sub	r24, r14
    2d08:	9f 09       	sbc	r25, r15
    2d0a:	22 9f       	mul	r18, r18
    2d0c:	b0 01       	movw	r22, r0
    2d0e:	23 9f       	mul	r18, r19
    2d10:	70 0d       	add	r23, r0
    2d12:	70 0d       	add	r23, r0
    2d14:	11 24       	eor	r1, r1
    2d16:	88 9f       	mul	r24, r24
    2d18:	90 01       	movw	r18, r0
    2d1a:	89 9f       	mul	r24, r25
    2d1c:	30 0d       	add	r19, r0
    2d1e:	30 0d       	add	r19, r0
    2d20:	11 24       	eor	r1, r1
    2d22:	62 0f       	add	r22, r18
    2d24:	73 1f       	adc	r23, r19
    2d26:	88 27       	eor	r24, r24
    2d28:	77 fd       	sbrc	r23, 7
    2d2a:	80 95       	com	r24
    2d2c:	98 2f       	mov	r25, r24
    2d2e:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2d32:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    2d36:	60 93 55 01 	sts	0x0155, r22
    2d3a:	70 93 56 01 	sts	0x0156, r23
    2d3e:	80 93 57 01 	sts	0x0157, r24
    2d42:	90 93 58 01 	sts	0x0158, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    2d46:	96 01       	movw	r18, r12
    2d48:	26 19       	sub	r18, r6
    2d4a:	37 09       	sbc	r19, r7
    2d4c:	c5 01       	movw	r24, r10
    2d4e:	8e 19       	sub	r24, r14
    2d50:	9f 09       	sbc	r25, r15
    2d52:	22 9f       	mul	r18, r18
    2d54:	b0 01       	movw	r22, r0
    2d56:	23 9f       	mul	r18, r19
    2d58:	70 0d       	add	r23, r0
    2d5a:	70 0d       	add	r23, r0
    2d5c:	11 24       	eor	r1, r1
    2d5e:	88 9f       	mul	r24, r24
    2d60:	90 01       	movw	r18, r0
    2d62:	89 9f       	mul	r24, r25
    2d64:	30 0d       	add	r19, r0
    2d66:	30 0d       	add	r19, r0
    2d68:	11 24       	eor	r1, r1
    2d6a:	62 0f       	add	r22, r18
    2d6c:	73 1f       	adc	r23, r19
    2d6e:	88 27       	eor	r24, r24
    2d70:	77 fd       	sbrc	r23, 7
    2d72:	80 95       	com	r24
    2d74:	98 2f       	mov	r25, r24
    2d76:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2d7a:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    2d7e:	60 93 59 01 	sts	0x0159, r22
    2d82:	70 93 5a 01 	sts	0x015A, r23
    2d86:	80 93 5b 01 	sts	0x015B, r24
    2d8a:	90 93 5c 01 	sts	0x015C, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    2d8e:	c4 18       	sub	r12, r4
    2d90:	d5 08       	sbc	r13, r5
    2d92:	a2 18       	sub	r10, r2
    2d94:	b3 08       	sbc	r11, r3
    2d96:	cc 9c       	mul	r12, r12
    2d98:	b0 01       	movw	r22, r0
    2d9a:	cd 9c       	mul	r12, r13
    2d9c:	70 0d       	add	r23, r0
    2d9e:	70 0d       	add	r23, r0
    2da0:	11 24       	eor	r1, r1
    2da2:	aa 9c       	mul	r10, r10
    2da4:	c0 01       	movw	r24, r0
    2da6:	ab 9c       	mul	r10, r11
    2da8:	90 0d       	add	r25, r0
    2daa:	90 0d       	add	r25, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	68 0f       	add	r22, r24
    2db0:	79 1f       	adc	r23, r25
    2db2:	88 27       	eor	r24, r24
    2db4:	77 fd       	sbrc	r23, 7
    2db6:	80 95       	com	r24
    2db8:	98 2f       	mov	r25, r24
    2dba:	0e 94 84 18 	call	0x3108	; 0x3108 <__floatsisf>
    2dbe:	0e 94 0a 1a 	call	0x3414	; 0x3414 <sqrt>
    2dc2:	60 93 5d 01 	sts	0x015D, r22
    2dc6:	70 93 5e 01 	sts	0x015E, r23
    2dca:	80 93 5f 01 	sts	0x015F, r24
    2dce:	90 93 60 01 	sts	0x0160, r25
    2dd2:	09 e4       	ldi	r16, 0x49	; 73
    2dd4:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    2dd6:	e1 2c       	mov	r14, r1
    2dd8:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    2dda:	1e 82       	std	Y+6, r1	; 0x06
    2ddc:	1d 82       	std	Y+5, r1	; 0x05
    2dde:	1a 82       	std	Y+2, r1	; 0x02
    2de0:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    2de2:	21 2c       	mov	r2, r1
    2de4:	68 94       	set
    2de6:	33 24       	eor	r3, r3
    2de8:	36 f8       	bld	r3, 6
    2dea:	0f 2e       	mov	r0, r31
    2dec:	fc e1       	ldi	r31, 0x1C	; 28
    2dee:	4f 2e       	mov	r4, r31
    2df0:	f0 2d       	mov	r31, r0
    2df2:	0f 2e       	mov	r0, r31
    2df4:	f6 e4       	ldi	r31, 0x46	; 70
    2df6:	5f 2e       	mov	r5, r31
    2df8:	f0 2d       	mov	r31, r0
    2dfa:	61 2c       	mov	r6, r1
    2dfc:	71 2c       	mov	r7, r1
    2dfe:	81 2c       	mov	r8, r1
    2e00:	91 2c       	mov	r9, r1
    2e02:	2c c8       	rjmp	.-4008   	; 0x1e5c <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    2e04:	28 96       	adiw	r28, 0x08	; 8
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	f8 94       	cli
    2e0a:	de bf       	out	0x3e, r29	; 62
    2e0c:	0f be       	out	0x3f, r0	; 63
    2e0e:	cd bf       	out	0x3d, r28	; 61
    2e10:	df 91       	pop	r29
    2e12:	cf 91       	pop	r28
    2e14:	1f 91       	pop	r17
    2e16:	0f 91       	pop	r16
    2e18:	ff 90       	pop	r15
    2e1a:	ef 90       	pop	r14
    2e1c:	df 90       	pop	r13
    2e1e:	cf 90       	pop	r12
    2e20:	bf 90       	pop	r11
    2e22:	af 90       	pop	r10
    2e24:	9f 90       	pop	r9
    2e26:	8f 90       	pop	r8
    2e28:	7f 90       	pop	r7
    2e2a:	6f 90       	pop	r6
    2e2c:	5f 90       	pop	r5
    2e2e:	4f 90       	pop	r4
    2e30:	3f 90       	pop	r3
    2e32:	2f 90       	pop	r2
    2e34:	08 95       	ret

00002e36 <__subsf3>:
    2e36:	50 58       	subi	r21, 0x80	; 128

00002e38 <__addsf3>:
    2e38:	bb 27       	eor	r27, r27
    2e3a:	aa 27       	eor	r26, r26
    2e3c:	0e d0       	rcall	.+28     	; 0x2e5a <__addsf3x>
    2e3e:	27 c2       	rjmp	.+1102   	; 0x328e <__fp_round>
    2e40:	f0 d1       	rcall	.+992    	; 0x3222 <__fp_pscA>
    2e42:	30 f0       	brcs	.+12     	; 0x2e50 <__addsf3+0x18>
    2e44:	f5 d1       	rcall	.+1002   	; 0x3230 <__fp_pscB>
    2e46:	20 f0       	brcs	.+8      	; 0x2e50 <__addsf3+0x18>
    2e48:	31 f4       	brne	.+12     	; 0x2e56 <__addsf3+0x1e>
    2e4a:	9f 3f       	cpi	r25, 0xFF	; 255
    2e4c:	11 f4       	brne	.+4      	; 0x2e52 <__addsf3+0x1a>
    2e4e:	1e f4       	brtc	.+6      	; 0x2e56 <__addsf3+0x1e>
    2e50:	c0 c1       	rjmp	.+896    	; 0x31d2 <__fp_nan>
    2e52:	0e f4       	brtc	.+2      	; 0x2e56 <__addsf3+0x1e>
    2e54:	e0 95       	com	r30
    2e56:	e7 fb       	bst	r30, 7
    2e58:	b6 c1       	rjmp	.+876    	; 0x31c6 <__fp_inf>

00002e5a <__addsf3x>:
    2e5a:	e9 2f       	mov	r30, r25
    2e5c:	3a d2       	rcall	.+1140   	; 0x32d2 <__fp_split3>
    2e5e:	80 f3       	brcs	.-32     	; 0x2e40 <__addsf3+0x8>
    2e60:	ba 17       	cp	r27, r26
    2e62:	62 07       	cpc	r22, r18
    2e64:	73 07       	cpc	r23, r19
    2e66:	84 07       	cpc	r24, r20
    2e68:	95 07       	cpc	r25, r21
    2e6a:	18 f0       	brcs	.+6      	; 0x2e72 <__addsf3x+0x18>
    2e6c:	71 f4       	brne	.+28     	; 0x2e8a <__addsf3x+0x30>
    2e6e:	9e f5       	brtc	.+102    	; 0x2ed6 <__addsf3x+0x7c>
    2e70:	52 c2       	rjmp	.+1188   	; 0x3316 <__fp_zero>
    2e72:	0e f4       	brtc	.+2      	; 0x2e76 <__addsf3x+0x1c>
    2e74:	e0 95       	com	r30
    2e76:	0b 2e       	mov	r0, r27
    2e78:	ba 2f       	mov	r27, r26
    2e7a:	a0 2d       	mov	r26, r0
    2e7c:	0b 01       	movw	r0, r22
    2e7e:	b9 01       	movw	r22, r18
    2e80:	90 01       	movw	r18, r0
    2e82:	0c 01       	movw	r0, r24
    2e84:	ca 01       	movw	r24, r20
    2e86:	a0 01       	movw	r20, r0
    2e88:	11 24       	eor	r1, r1
    2e8a:	ff 27       	eor	r31, r31
    2e8c:	59 1b       	sub	r21, r25
    2e8e:	99 f0       	breq	.+38     	; 0x2eb6 <__addsf3x+0x5c>
    2e90:	59 3f       	cpi	r21, 0xF9	; 249
    2e92:	50 f4       	brcc	.+20     	; 0x2ea8 <__addsf3x+0x4e>
    2e94:	50 3e       	cpi	r21, 0xE0	; 224
    2e96:	68 f1       	brcs	.+90     	; 0x2ef2 <__addsf3x+0x98>
    2e98:	1a 16       	cp	r1, r26
    2e9a:	f0 40       	sbci	r31, 0x00	; 0
    2e9c:	a2 2f       	mov	r26, r18
    2e9e:	23 2f       	mov	r18, r19
    2ea0:	34 2f       	mov	r19, r20
    2ea2:	44 27       	eor	r20, r20
    2ea4:	58 5f       	subi	r21, 0xF8	; 248
    2ea6:	f3 cf       	rjmp	.-26     	; 0x2e8e <__addsf3x+0x34>
    2ea8:	46 95       	lsr	r20
    2eaa:	37 95       	ror	r19
    2eac:	27 95       	ror	r18
    2eae:	a7 95       	ror	r26
    2eb0:	f0 40       	sbci	r31, 0x00	; 0
    2eb2:	53 95       	inc	r21
    2eb4:	c9 f7       	brne	.-14     	; 0x2ea8 <__addsf3x+0x4e>
    2eb6:	7e f4       	brtc	.+30     	; 0x2ed6 <__addsf3x+0x7c>
    2eb8:	1f 16       	cp	r1, r31
    2eba:	ba 0b       	sbc	r27, r26
    2ebc:	62 0b       	sbc	r22, r18
    2ebe:	73 0b       	sbc	r23, r19
    2ec0:	84 0b       	sbc	r24, r20
    2ec2:	ba f0       	brmi	.+46     	; 0x2ef2 <__addsf3x+0x98>
    2ec4:	91 50       	subi	r25, 0x01	; 1
    2ec6:	a1 f0       	breq	.+40     	; 0x2ef0 <__addsf3x+0x96>
    2ec8:	ff 0f       	add	r31, r31
    2eca:	bb 1f       	adc	r27, r27
    2ecc:	66 1f       	adc	r22, r22
    2ece:	77 1f       	adc	r23, r23
    2ed0:	88 1f       	adc	r24, r24
    2ed2:	c2 f7       	brpl	.-16     	; 0x2ec4 <__addsf3x+0x6a>
    2ed4:	0e c0       	rjmp	.+28     	; 0x2ef2 <__addsf3x+0x98>
    2ed6:	ba 0f       	add	r27, r26
    2ed8:	62 1f       	adc	r22, r18
    2eda:	73 1f       	adc	r23, r19
    2edc:	84 1f       	adc	r24, r20
    2ede:	48 f4       	brcc	.+18     	; 0x2ef2 <__addsf3x+0x98>
    2ee0:	87 95       	ror	r24
    2ee2:	77 95       	ror	r23
    2ee4:	67 95       	ror	r22
    2ee6:	b7 95       	ror	r27
    2ee8:	f7 95       	ror	r31
    2eea:	9e 3f       	cpi	r25, 0xFE	; 254
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <__addsf3x+0x96>
    2eee:	b3 cf       	rjmp	.-154    	; 0x2e56 <__addsf3+0x1e>
    2ef0:	93 95       	inc	r25
    2ef2:	88 0f       	add	r24, r24
    2ef4:	08 f0       	brcs	.+2      	; 0x2ef8 <__addsf3x+0x9e>
    2ef6:	99 27       	eor	r25, r25
    2ef8:	ee 0f       	add	r30, r30
    2efa:	97 95       	ror	r25
    2efc:	87 95       	ror	r24
    2efe:	08 95       	ret
    2f00:	90 d1       	rcall	.+800    	; 0x3222 <__fp_pscA>
    2f02:	58 f0       	brcs	.+22     	; 0x2f1a <__addsf3x+0xc0>
    2f04:	80 e8       	ldi	r24, 0x80	; 128
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <__addsf3x+0xb2>
    2f0a:	9e ef       	ldi	r25, 0xFE	; 254
    2f0c:	91 d1       	rcall	.+802    	; 0x3230 <__fp_pscB>
    2f0e:	28 f0       	brcs	.+10     	; 0x2f1a <__addsf3x+0xc0>
    2f10:	40 e8       	ldi	r20, 0x80	; 128
    2f12:	51 e0       	ldi	r21, 0x01	; 1
    2f14:	59 f4       	brne	.+22     	; 0x2f2c <atan2+0xe>
    2f16:	5e ef       	ldi	r21, 0xFE	; 254
    2f18:	09 c0       	rjmp	.+18     	; 0x2f2c <atan2+0xe>
    2f1a:	5b c1       	rjmp	.+694    	; 0x31d2 <__fp_nan>
    2f1c:	fc c1       	rjmp	.+1016   	; 0x3316 <__fp_zero>

00002f1e <atan2>:
    2f1e:	e9 2f       	mov	r30, r25
    2f20:	e0 78       	andi	r30, 0x80	; 128
    2f22:	d7 d1       	rcall	.+942    	; 0x32d2 <__fp_split3>
    2f24:	68 f3       	brcs	.-38     	; 0x2f00 <__addsf3x+0xa6>
    2f26:	09 2e       	mov	r0, r25
    2f28:	05 2a       	or	r0, r21
    2f2a:	c1 f3       	breq	.-16     	; 0x2f1c <__addsf3x+0xc2>
    2f2c:	26 17       	cp	r18, r22
    2f2e:	37 07       	cpc	r19, r23
    2f30:	48 07       	cpc	r20, r24
    2f32:	59 07       	cpc	r21, r25
    2f34:	38 f0       	brcs	.+14     	; 0x2f44 <atan2+0x26>
    2f36:	0e 2e       	mov	r0, r30
    2f38:	07 f8       	bld	r0, 7
    2f3a:	e0 25       	eor	r30, r0
    2f3c:	69 f0       	breq	.+26     	; 0x2f58 <atan2+0x3a>
    2f3e:	e0 25       	eor	r30, r0
    2f40:	e0 64       	ori	r30, 0x40	; 64
    2f42:	0a c0       	rjmp	.+20     	; 0x2f58 <atan2+0x3a>
    2f44:	ef 63       	ori	r30, 0x3F	; 63
    2f46:	07 f8       	bld	r0, 7
    2f48:	00 94       	com	r0
    2f4a:	07 fa       	bst	r0, 7
    2f4c:	db 01       	movw	r26, r22
    2f4e:	b9 01       	movw	r22, r18
    2f50:	9d 01       	movw	r18, r26
    2f52:	dc 01       	movw	r26, r24
    2f54:	ca 01       	movw	r24, r20
    2f56:	ad 01       	movw	r20, r26
    2f58:	ef 93       	push	r30
    2f5a:	4a d0       	rcall	.+148    	; 0x2ff0 <__divsf3_pse>
    2f5c:	98 d1       	rcall	.+816    	; 0x328e <__fp_round>
    2f5e:	0a d0       	rcall	.+20     	; 0x2f74 <atan>
    2f60:	5f 91       	pop	r21
    2f62:	55 23       	and	r21, r21
    2f64:	31 f0       	breq	.+12     	; 0x2f72 <atan2+0x54>
    2f66:	2b ed       	ldi	r18, 0xDB	; 219
    2f68:	3f e0       	ldi	r19, 0x0F	; 15
    2f6a:	49 e4       	ldi	r20, 0x49	; 73
    2f6c:	50 fd       	sbrc	r21, 0
    2f6e:	49 ec       	ldi	r20, 0xC9	; 201
    2f70:	63 cf       	rjmp	.-314    	; 0x2e38 <__addsf3>
    2f72:	08 95       	ret

00002f74 <atan>:
    2f74:	df 93       	push	r29
    2f76:	dd 27       	eor	r29, r29
    2f78:	b9 2f       	mov	r27, r25
    2f7a:	bf 77       	andi	r27, 0x7F	; 127
    2f7c:	40 e8       	ldi	r20, 0x80	; 128
    2f7e:	5f e3       	ldi	r21, 0x3F	; 63
    2f80:	16 16       	cp	r1, r22
    2f82:	17 06       	cpc	r1, r23
    2f84:	48 07       	cpc	r20, r24
    2f86:	5b 07       	cpc	r21, r27
    2f88:	10 f4       	brcc	.+4      	; 0x2f8e <atan+0x1a>
    2f8a:	d9 2f       	mov	r29, r25
    2f8c:	cf d1       	rcall	.+926    	; 0x332c <inverse>
    2f8e:	9f 93       	push	r25
    2f90:	8f 93       	push	r24
    2f92:	7f 93       	push	r23
    2f94:	6f 93       	push	r22
    2f96:	7c d2       	rcall	.+1272   	; 0x3490 <square>
    2f98:	ec ea       	ldi	r30, 0xAC	; 172
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	1d d1       	rcall	.+570    	; 0x31d8 <__fp_powser>
    2f9e:	77 d1       	rcall	.+750    	; 0x328e <__fp_round>
    2fa0:	2f 91       	pop	r18
    2fa2:	3f 91       	pop	r19
    2fa4:	4f 91       	pop	r20
    2fa6:	5f 91       	pop	r21
    2fa8:	d4 d1       	rcall	.+936    	; 0x3352 <__mulsf3x>
    2faa:	dd 23       	and	r29, r29
    2fac:	49 f0       	breq	.+18     	; 0x2fc0 <atan+0x4c>
    2fae:	90 58       	subi	r25, 0x80	; 128
    2fb0:	a2 ea       	ldi	r26, 0xA2	; 162
    2fb2:	2a ed       	ldi	r18, 0xDA	; 218
    2fb4:	3f e0       	ldi	r19, 0x0F	; 15
    2fb6:	49 ec       	ldi	r20, 0xC9	; 201
    2fb8:	5f e3       	ldi	r21, 0x3F	; 63
    2fba:	d0 78       	andi	r29, 0x80	; 128
    2fbc:	5d 27       	eor	r21, r29
    2fbe:	4d df       	rcall	.-358    	; 0x2e5a <__addsf3x>
    2fc0:	df 91       	pop	r29
    2fc2:	65 c1       	rjmp	.+714    	; 0x328e <__fp_round>

00002fc4 <__cmpsf2>:
    2fc4:	dc d0       	rcall	.+440    	; 0x317e <__fp_cmp>
    2fc6:	08 f4       	brcc	.+2      	; 0x2fca <__cmpsf2+0x6>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	08 95       	ret

00002fcc <cos>:
    2fcc:	39 d1       	rcall	.+626    	; 0x3240 <__fp_rempio2>
    2fce:	e3 95       	inc	r30
    2fd0:	6f c1       	rjmp	.+734    	; 0x32b0 <__fp_sinus>

00002fd2 <__divsf3>:
    2fd2:	0c d0       	rcall	.+24     	; 0x2fec <__divsf3x>
    2fd4:	5c c1       	rjmp	.+696    	; 0x328e <__fp_round>
    2fd6:	2c d1       	rcall	.+600    	; 0x3230 <__fp_pscB>
    2fd8:	40 f0       	brcs	.+16     	; 0x2fea <__divsf3+0x18>
    2fda:	23 d1       	rcall	.+582    	; 0x3222 <__fp_pscA>
    2fdc:	30 f0       	brcs	.+12     	; 0x2fea <__divsf3+0x18>
    2fde:	21 f4       	brne	.+8      	; 0x2fe8 <__divsf3+0x16>
    2fe0:	5f 3f       	cpi	r21, 0xFF	; 255
    2fe2:	19 f0       	breq	.+6      	; 0x2fea <__divsf3+0x18>
    2fe4:	f0 c0       	rjmp	.+480    	; 0x31c6 <__fp_inf>
    2fe6:	51 11       	cpse	r21, r1
    2fe8:	97 c1       	rjmp	.+814    	; 0x3318 <__fp_szero>
    2fea:	f3 c0       	rjmp	.+486    	; 0x31d2 <__fp_nan>

00002fec <__divsf3x>:
    2fec:	72 d1       	rcall	.+740    	; 0x32d2 <__fp_split3>
    2fee:	98 f3       	brcs	.-26     	; 0x2fd6 <__divsf3+0x4>

00002ff0 <__divsf3_pse>:
    2ff0:	99 23       	and	r25, r25
    2ff2:	c9 f3       	breq	.-14     	; 0x2fe6 <__divsf3+0x14>
    2ff4:	55 23       	and	r21, r21
    2ff6:	b1 f3       	breq	.-20     	; 0x2fe4 <__divsf3+0x12>
    2ff8:	95 1b       	sub	r25, r21
    2ffa:	55 0b       	sbc	r21, r21
    2ffc:	bb 27       	eor	r27, r27
    2ffe:	aa 27       	eor	r26, r26
    3000:	62 17       	cp	r22, r18
    3002:	73 07       	cpc	r23, r19
    3004:	84 07       	cpc	r24, r20
    3006:	38 f0       	brcs	.+14     	; 0x3016 <__divsf3_pse+0x26>
    3008:	9f 5f       	subi	r25, 0xFF	; 255
    300a:	5f 4f       	sbci	r21, 0xFF	; 255
    300c:	22 0f       	add	r18, r18
    300e:	33 1f       	adc	r19, r19
    3010:	44 1f       	adc	r20, r20
    3012:	aa 1f       	adc	r26, r26
    3014:	a9 f3       	breq	.-22     	; 0x3000 <__divsf3_pse+0x10>
    3016:	33 d0       	rcall	.+102    	; 0x307e <__divsf3_pse+0x8e>
    3018:	0e 2e       	mov	r0, r30
    301a:	3a f0       	brmi	.+14     	; 0x302a <__divsf3_pse+0x3a>
    301c:	e0 e8       	ldi	r30, 0x80	; 128
    301e:	30 d0       	rcall	.+96     	; 0x3080 <__divsf3_pse+0x90>
    3020:	91 50       	subi	r25, 0x01	; 1
    3022:	50 40       	sbci	r21, 0x00	; 0
    3024:	e6 95       	lsr	r30
    3026:	00 1c       	adc	r0, r0
    3028:	ca f7       	brpl	.-14     	; 0x301c <__divsf3_pse+0x2c>
    302a:	29 d0       	rcall	.+82     	; 0x307e <__divsf3_pse+0x8e>
    302c:	fe 2f       	mov	r31, r30
    302e:	27 d0       	rcall	.+78     	; 0x307e <__divsf3_pse+0x8e>
    3030:	66 0f       	add	r22, r22
    3032:	77 1f       	adc	r23, r23
    3034:	88 1f       	adc	r24, r24
    3036:	bb 1f       	adc	r27, r27
    3038:	26 17       	cp	r18, r22
    303a:	37 07       	cpc	r19, r23
    303c:	48 07       	cpc	r20, r24
    303e:	ab 07       	cpc	r26, r27
    3040:	b0 e8       	ldi	r27, 0x80	; 128
    3042:	09 f0       	breq	.+2      	; 0x3046 <__divsf3_pse+0x56>
    3044:	bb 0b       	sbc	r27, r27
    3046:	80 2d       	mov	r24, r0
    3048:	bf 01       	movw	r22, r30
    304a:	ff 27       	eor	r31, r31
    304c:	93 58       	subi	r25, 0x83	; 131
    304e:	5f 4f       	sbci	r21, 0xFF	; 255
    3050:	2a f0       	brmi	.+10     	; 0x305c <__divsf3_pse+0x6c>
    3052:	9e 3f       	cpi	r25, 0xFE	; 254
    3054:	51 05       	cpc	r21, r1
    3056:	68 f0       	brcs	.+26     	; 0x3072 <__divsf3_pse+0x82>
    3058:	b6 c0       	rjmp	.+364    	; 0x31c6 <__fp_inf>
    305a:	5e c1       	rjmp	.+700    	; 0x3318 <__fp_szero>
    305c:	5f 3f       	cpi	r21, 0xFF	; 255
    305e:	ec f3       	brlt	.-6      	; 0x305a <__divsf3_pse+0x6a>
    3060:	98 3e       	cpi	r25, 0xE8	; 232
    3062:	dc f3       	brlt	.-10     	; 0x305a <__divsf3_pse+0x6a>
    3064:	86 95       	lsr	r24
    3066:	77 95       	ror	r23
    3068:	67 95       	ror	r22
    306a:	b7 95       	ror	r27
    306c:	f7 95       	ror	r31
    306e:	9f 5f       	subi	r25, 0xFF	; 255
    3070:	c9 f7       	brne	.-14     	; 0x3064 <__divsf3_pse+0x74>
    3072:	88 0f       	add	r24, r24
    3074:	91 1d       	adc	r25, r1
    3076:	96 95       	lsr	r25
    3078:	87 95       	ror	r24
    307a:	97 f9       	bld	r25, 7
    307c:	08 95       	ret
    307e:	e1 e0       	ldi	r30, 0x01	; 1
    3080:	66 0f       	add	r22, r22
    3082:	77 1f       	adc	r23, r23
    3084:	88 1f       	adc	r24, r24
    3086:	bb 1f       	adc	r27, r27
    3088:	62 17       	cp	r22, r18
    308a:	73 07       	cpc	r23, r19
    308c:	84 07       	cpc	r24, r20
    308e:	ba 07       	cpc	r27, r26
    3090:	20 f0       	brcs	.+8      	; 0x309a <__divsf3_pse+0xaa>
    3092:	62 1b       	sub	r22, r18
    3094:	73 0b       	sbc	r23, r19
    3096:	84 0b       	sbc	r24, r20
    3098:	ba 0b       	sbc	r27, r26
    309a:	ee 1f       	adc	r30, r30
    309c:	88 f7       	brcc	.-30     	; 0x3080 <__divsf3_pse+0x90>
    309e:	e0 95       	com	r30
    30a0:	08 95       	ret

000030a2 <__fixsfsi>:
    30a2:	04 d0       	rcall	.+8      	; 0x30ac <__fixunssfsi>
    30a4:	68 94       	set
    30a6:	b1 11       	cpse	r27, r1
    30a8:	37 c1       	rjmp	.+622    	; 0x3318 <__fp_szero>
    30aa:	08 95       	ret

000030ac <__fixunssfsi>:
    30ac:	1a d1       	rcall	.+564    	; 0x32e2 <__fp_splitA>
    30ae:	88 f0       	brcs	.+34     	; 0x30d2 <__fixunssfsi+0x26>
    30b0:	9f 57       	subi	r25, 0x7F	; 127
    30b2:	90 f0       	brcs	.+36     	; 0x30d8 <__fixunssfsi+0x2c>
    30b4:	b9 2f       	mov	r27, r25
    30b6:	99 27       	eor	r25, r25
    30b8:	b7 51       	subi	r27, 0x17	; 23
    30ba:	a0 f0       	brcs	.+40     	; 0x30e4 <__fixunssfsi+0x38>
    30bc:	d1 f0       	breq	.+52     	; 0x30f2 <__fixunssfsi+0x46>
    30be:	66 0f       	add	r22, r22
    30c0:	77 1f       	adc	r23, r23
    30c2:	88 1f       	adc	r24, r24
    30c4:	99 1f       	adc	r25, r25
    30c6:	1a f0       	brmi	.+6      	; 0x30ce <__fixunssfsi+0x22>
    30c8:	ba 95       	dec	r27
    30ca:	c9 f7       	brne	.-14     	; 0x30be <__fixunssfsi+0x12>
    30cc:	12 c0       	rjmp	.+36     	; 0x30f2 <__fixunssfsi+0x46>
    30ce:	b1 30       	cpi	r27, 0x01	; 1
    30d0:	81 f0       	breq	.+32     	; 0x30f2 <__fixunssfsi+0x46>
    30d2:	21 d1       	rcall	.+578    	; 0x3316 <__fp_zero>
    30d4:	b1 e0       	ldi	r27, 0x01	; 1
    30d6:	08 95       	ret
    30d8:	1e c1       	rjmp	.+572    	; 0x3316 <__fp_zero>
    30da:	67 2f       	mov	r22, r23
    30dc:	78 2f       	mov	r23, r24
    30de:	88 27       	eor	r24, r24
    30e0:	b8 5f       	subi	r27, 0xF8	; 248
    30e2:	39 f0       	breq	.+14     	; 0x30f2 <__fixunssfsi+0x46>
    30e4:	b9 3f       	cpi	r27, 0xF9	; 249
    30e6:	cc f3       	brlt	.-14     	; 0x30da <__fixunssfsi+0x2e>
    30e8:	86 95       	lsr	r24
    30ea:	77 95       	ror	r23
    30ec:	67 95       	ror	r22
    30ee:	b3 95       	inc	r27
    30f0:	d9 f7       	brne	.-10     	; 0x30e8 <__fixunssfsi+0x3c>
    30f2:	3e f4       	brtc	.+14     	; 0x3102 <__fixunssfsi+0x56>
    30f4:	90 95       	com	r25
    30f6:	80 95       	com	r24
    30f8:	70 95       	com	r23
    30fa:	61 95       	neg	r22
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3100:	9f 4f       	sbci	r25, 0xFF	; 255
    3102:	08 95       	ret

00003104 <__floatunsisf>:
    3104:	e8 94       	clt
    3106:	09 c0       	rjmp	.+18     	; 0x311a <__floatsisf+0x12>

00003108 <__floatsisf>:
    3108:	97 fb       	bst	r25, 7
    310a:	3e f4       	brtc	.+14     	; 0x311a <__floatsisf+0x12>
    310c:	90 95       	com	r25
    310e:	80 95       	com	r24
    3110:	70 95       	com	r23
    3112:	61 95       	neg	r22
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	8f 4f       	sbci	r24, 0xFF	; 255
    3118:	9f 4f       	sbci	r25, 0xFF	; 255
    311a:	99 23       	and	r25, r25
    311c:	a9 f0       	breq	.+42     	; 0x3148 <__floatsisf+0x40>
    311e:	f9 2f       	mov	r31, r25
    3120:	96 e9       	ldi	r25, 0x96	; 150
    3122:	bb 27       	eor	r27, r27
    3124:	93 95       	inc	r25
    3126:	f6 95       	lsr	r31
    3128:	87 95       	ror	r24
    312a:	77 95       	ror	r23
    312c:	67 95       	ror	r22
    312e:	b7 95       	ror	r27
    3130:	f1 11       	cpse	r31, r1
    3132:	f8 cf       	rjmp	.-16     	; 0x3124 <__floatsisf+0x1c>
    3134:	fa f4       	brpl	.+62     	; 0x3174 <__floatsisf+0x6c>
    3136:	bb 0f       	add	r27, r27
    3138:	11 f4       	brne	.+4      	; 0x313e <__floatsisf+0x36>
    313a:	60 ff       	sbrs	r22, 0
    313c:	1b c0       	rjmp	.+54     	; 0x3174 <__floatsisf+0x6c>
    313e:	6f 5f       	subi	r22, 0xFF	; 255
    3140:	7f 4f       	sbci	r23, 0xFF	; 255
    3142:	8f 4f       	sbci	r24, 0xFF	; 255
    3144:	9f 4f       	sbci	r25, 0xFF	; 255
    3146:	16 c0       	rjmp	.+44     	; 0x3174 <__floatsisf+0x6c>
    3148:	88 23       	and	r24, r24
    314a:	11 f0       	breq	.+4      	; 0x3150 <__floatsisf+0x48>
    314c:	96 e9       	ldi	r25, 0x96	; 150
    314e:	11 c0       	rjmp	.+34     	; 0x3172 <__floatsisf+0x6a>
    3150:	77 23       	and	r23, r23
    3152:	21 f0       	breq	.+8      	; 0x315c <__floatsisf+0x54>
    3154:	9e e8       	ldi	r25, 0x8E	; 142
    3156:	87 2f       	mov	r24, r23
    3158:	76 2f       	mov	r23, r22
    315a:	05 c0       	rjmp	.+10     	; 0x3166 <__floatsisf+0x5e>
    315c:	66 23       	and	r22, r22
    315e:	71 f0       	breq	.+28     	; 0x317c <__floatsisf+0x74>
    3160:	96 e8       	ldi	r25, 0x86	; 134
    3162:	86 2f       	mov	r24, r22
    3164:	70 e0       	ldi	r23, 0x00	; 0
    3166:	60 e0       	ldi	r22, 0x00	; 0
    3168:	2a f0       	brmi	.+10     	; 0x3174 <__floatsisf+0x6c>
    316a:	9a 95       	dec	r25
    316c:	66 0f       	add	r22, r22
    316e:	77 1f       	adc	r23, r23
    3170:	88 1f       	adc	r24, r24
    3172:	da f7       	brpl	.-10     	; 0x316a <__floatsisf+0x62>
    3174:	88 0f       	add	r24, r24
    3176:	96 95       	lsr	r25
    3178:	87 95       	ror	r24
    317a:	97 f9       	bld	r25, 7
    317c:	08 95       	ret

0000317e <__fp_cmp>:
    317e:	99 0f       	add	r25, r25
    3180:	00 08       	sbc	r0, r0
    3182:	55 0f       	add	r21, r21
    3184:	aa 0b       	sbc	r26, r26
    3186:	e0 e8       	ldi	r30, 0x80	; 128
    3188:	fe ef       	ldi	r31, 0xFE	; 254
    318a:	16 16       	cp	r1, r22
    318c:	17 06       	cpc	r1, r23
    318e:	e8 07       	cpc	r30, r24
    3190:	f9 07       	cpc	r31, r25
    3192:	c0 f0       	brcs	.+48     	; 0x31c4 <__fp_cmp+0x46>
    3194:	12 16       	cp	r1, r18
    3196:	13 06       	cpc	r1, r19
    3198:	e4 07       	cpc	r30, r20
    319a:	f5 07       	cpc	r31, r21
    319c:	98 f0       	brcs	.+38     	; 0x31c4 <__fp_cmp+0x46>
    319e:	62 1b       	sub	r22, r18
    31a0:	73 0b       	sbc	r23, r19
    31a2:	84 0b       	sbc	r24, r20
    31a4:	95 0b       	sbc	r25, r21
    31a6:	39 f4       	brne	.+14     	; 0x31b6 <__fp_cmp+0x38>
    31a8:	0a 26       	eor	r0, r26
    31aa:	61 f0       	breq	.+24     	; 0x31c4 <__fp_cmp+0x46>
    31ac:	23 2b       	or	r18, r19
    31ae:	24 2b       	or	r18, r20
    31b0:	25 2b       	or	r18, r21
    31b2:	21 f4       	brne	.+8      	; 0x31bc <__fp_cmp+0x3e>
    31b4:	08 95       	ret
    31b6:	0a 26       	eor	r0, r26
    31b8:	09 f4       	brne	.+2      	; 0x31bc <__fp_cmp+0x3e>
    31ba:	a1 40       	sbci	r26, 0x01	; 1
    31bc:	a6 95       	lsr	r26
    31be:	8f ef       	ldi	r24, 0xFF	; 255
    31c0:	81 1d       	adc	r24, r1
    31c2:	81 1d       	adc	r24, r1
    31c4:	08 95       	ret

000031c6 <__fp_inf>:
    31c6:	97 f9       	bld	r25, 7
    31c8:	9f 67       	ori	r25, 0x7F	; 127
    31ca:	80 e8       	ldi	r24, 0x80	; 128
    31cc:	70 e0       	ldi	r23, 0x00	; 0
    31ce:	60 e0       	ldi	r22, 0x00	; 0
    31d0:	08 95       	ret

000031d2 <__fp_nan>:
    31d2:	9f ef       	ldi	r25, 0xFF	; 255
    31d4:	80 ec       	ldi	r24, 0xC0	; 192
    31d6:	08 95       	ret

000031d8 <__fp_powser>:
    31d8:	df 93       	push	r29
    31da:	cf 93       	push	r28
    31dc:	1f 93       	push	r17
    31de:	0f 93       	push	r16
    31e0:	ff 92       	push	r15
    31e2:	ef 92       	push	r14
    31e4:	df 92       	push	r13
    31e6:	7b 01       	movw	r14, r22
    31e8:	8c 01       	movw	r16, r24
    31ea:	68 94       	set
    31ec:	05 c0       	rjmp	.+10     	; 0x31f8 <__fp_powser+0x20>
    31ee:	da 2e       	mov	r13, r26
    31f0:	ef 01       	movw	r28, r30
    31f2:	af d0       	rcall	.+350    	; 0x3352 <__mulsf3x>
    31f4:	fe 01       	movw	r30, r28
    31f6:	e8 94       	clt
    31f8:	a5 91       	lpm	r26, Z+
    31fa:	25 91       	lpm	r18, Z+
    31fc:	35 91       	lpm	r19, Z+
    31fe:	45 91       	lpm	r20, Z+
    3200:	55 91       	lpm	r21, Z+
    3202:	ae f3       	brts	.-22     	; 0x31ee <__fp_powser+0x16>
    3204:	ef 01       	movw	r28, r30
    3206:	29 de       	rcall	.-942    	; 0x2e5a <__addsf3x>
    3208:	fe 01       	movw	r30, r28
    320a:	97 01       	movw	r18, r14
    320c:	a8 01       	movw	r20, r16
    320e:	da 94       	dec	r13
    3210:	79 f7       	brne	.-34     	; 0x31f0 <__fp_powser+0x18>
    3212:	df 90       	pop	r13
    3214:	ef 90       	pop	r14
    3216:	ff 90       	pop	r15
    3218:	0f 91       	pop	r16
    321a:	1f 91       	pop	r17
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <__fp_pscA>:
    3222:	00 24       	eor	r0, r0
    3224:	0a 94       	dec	r0
    3226:	16 16       	cp	r1, r22
    3228:	17 06       	cpc	r1, r23
    322a:	18 06       	cpc	r1, r24
    322c:	09 06       	cpc	r0, r25
    322e:	08 95       	ret

00003230 <__fp_pscB>:
    3230:	00 24       	eor	r0, r0
    3232:	0a 94       	dec	r0
    3234:	12 16       	cp	r1, r18
    3236:	13 06       	cpc	r1, r19
    3238:	14 06       	cpc	r1, r20
    323a:	05 06       	cpc	r0, r21
    323c:	08 95       	ret
    323e:	c9 cf       	rjmp	.-110    	; 0x31d2 <__fp_nan>

00003240 <__fp_rempio2>:
    3240:	50 d0       	rcall	.+160    	; 0x32e2 <__fp_splitA>
    3242:	e8 f3       	brcs	.-6      	; 0x323e <__fp_pscB+0xe>
    3244:	e8 94       	clt
    3246:	e0 e0       	ldi	r30, 0x00	; 0
    3248:	bb 27       	eor	r27, r27
    324a:	9f 57       	subi	r25, 0x7F	; 127
    324c:	f0 f0       	brcs	.+60     	; 0x328a <__fp_rempio2+0x4a>
    324e:	2a ed       	ldi	r18, 0xDA	; 218
    3250:	3f e0       	ldi	r19, 0x0F	; 15
    3252:	49 ec       	ldi	r20, 0xC9	; 201
    3254:	06 c0       	rjmp	.+12     	; 0x3262 <__fp_rempio2+0x22>
    3256:	ee 0f       	add	r30, r30
    3258:	bb 0f       	add	r27, r27
    325a:	66 1f       	adc	r22, r22
    325c:	77 1f       	adc	r23, r23
    325e:	88 1f       	adc	r24, r24
    3260:	28 f0       	brcs	.+10     	; 0x326c <__fp_rempio2+0x2c>
    3262:	b2 3a       	cpi	r27, 0xA2	; 162
    3264:	62 07       	cpc	r22, r18
    3266:	73 07       	cpc	r23, r19
    3268:	84 07       	cpc	r24, r20
    326a:	28 f0       	brcs	.+10     	; 0x3276 <__fp_rempio2+0x36>
    326c:	b2 5a       	subi	r27, 0xA2	; 162
    326e:	62 0b       	sbc	r22, r18
    3270:	73 0b       	sbc	r23, r19
    3272:	84 0b       	sbc	r24, r20
    3274:	e3 95       	inc	r30
    3276:	9a 95       	dec	r25
    3278:	72 f7       	brpl	.-36     	; 0x3256 <__fp_rempio2+0x16>
    327a:	80 38       	cpi	r24, 0x80	; 128
    327c:	30 f4       	brcc	.+12     	; 0x328a <__fp_rempio2+0x4a>
    327e:	9a 95       	dec	r25
    3280:	bb 0f       	add	r27, r27
    3282:	66 1f       	adc	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	d2 f7       	brpl	.-12     	; 0x327e <__fp_rempio2+0x3e>
    328a:	90 48       	sbci	r25, 0x80	; 128
    328c:	06 c1       	rjmp	.+524    	; 0x349a <__fp_mpack_finite>

0000328e <__fp_round>:
    328e:	09 2e       	mov	r0, r25
    3290:	03 94       	inc	r0
    3292:	00 0c       	add	r0, r0
    3294:	11 f4       	brne	.+4      	; 0x329a <__fp_round+0xc>
    3296:	88 23       	and	r24, r24
    3298:	52 f0       	brmi	.+20     	; 0x32ae <__fp_round+0x20>
    329a:	bb 0f       	add	r27, r27
    329c:	40 f4       	brcc	.+16     	; 0x32ae <__fp_round+0x20>
    329e:	bf 2b       	or	r27, r31
    32a0:	11 f4       	brne	.+4      	; 0x32a6 <__fp_round+0x18>
    32a2:	60 ff       	sbrs	r22, 0
    32a4:	04 c0       	rjmp	.+8      	; 0x32ae <__fp_round+0x20>
    32a6:	6f 5f       	subi	r22, 0xFF	; 255
    32a8:	7f 4f       	sbci	r23, 0xFF	; 255
    32aa:	8f 4f       	sbci	r24, 0xFF	; 255
    32ac:	9f 4f       	sbci	r25, 0xFF	; 255
    32ae:	08 95       	ret

000032b0 <__fp_sinus>:
    32b0:	ef 93       	push	r30
    32b2:	e0 ff       	sbrs	r30, 0
    32b4:	06 c0       	rjmp	.+12     	; 0x32c2 <__fp_sinus+0x12>
    32b6:	a2 ea       	ldi	r26, 0xA2	; 162
    32b8:	2a ed       	ldi	r18, 0xDA	; 218
    32ba:	3f e0       	ldi	r19, 0x0F	; 15
    32bc:	49 ec       	ldi	r20, 0xC9	; 201
    32be:	5f eb       	ldi	r21, 0xBF	; 191
    32c0:	cc dd       	rcall	.-1128   	; 0x2e5a <__addsf3x>
    32c2:	e5 df       	rcall	.-54     	; 0x328e <__fp_round>
    32c4:	0f 90       	pop	r0
    32c6:	03 94       	inc	r0
    32c8:	01 fc       	sbrc	r0, 1
    32ca:	90 58       	subi	r25, 0x80	; 128
    32cc:	e9 ed       	ldi	r30, 0xD9	; 217
    32ce:	f0 e0       	ldi	r31, 0x00	; 0
    32d0:	f7 c0       	rjmp	.+494    	; 0x34c0 <__fp_powsodd>

000032d2 <__fp_split3>:
    32d2:	57 fd       	sbrc	r21, 7
    32d4:	90 58       	subi	r25, 0x80	; 128
    32d6:	44 0f       	add	r20, r20
    32d8:	55 1f       	adc	r21, r21
    32da:	59 f0       	breq	.+22     	; 0x32f2 <__fp_splitA+0x10>
    32dc:	5f 3f       	cpi	r21, 0xFF	; 255
    32de:	71 f0       	breq	.+28     	; 0x32fc <__fp_splitA+0x1a>
    32e0:	47 95       	ror	r20

000032e2 <__fp_splitA>:
    32e2:	88 0f       	add	r24, r24
    32e4:	97 fb       	bst	r25, 7
    32e6:	99 1f       	adc	r25, r25
    32e8:	61 f0       	breq	.+24     	; 0x3302 <__fp_splitA+0x20>
    32ea:	9f 3f       	cpi	r25, 0xFF	; 255
    32ec:	79 f0       	breq	.+30     	; 0x330c <__fp_splitA+0x2a>
    32ee:	87 95       	ror	r24
    32f0:	08 95       	ret
    32f2:	12 16       	cp	r1, r18
    32f4:	13 06       	cpc	r1, r19
    32f6:	14 06       	cpc	r1, r20
    32f8:	55 1f       	adc	r21, r21
    32fa:	f2 cf       	rjmp	.-28     	; 0x32e0 <__fp_split3+0xe>
    32fc:	46 95       	lsr	r20
    32fe:	f1 df       	rcall	.-30     	; 0x32e2 <__fp_splitA>
    3300:	08 c0       	rjmp	.+16     	; 0x3312 <__fp_splitA+0x30>
    3302:	16 16       	cp	r1, r22
    3304:	17 06       	cpc	r1, r23
    3306:	18 06       	cpc	r1, r24
    3308:	99 1f       	adc	r25, r25
    330a:	f1 cf       	rjmp	.-30     	; 0x32ee <__fp_splitA+0xc>
    330c:	86 95       	lsr	r24
    330e:	71 05       	cpc	r23, r1
    3310:	61 05       	cpc	r22, r1
    3312:	08 94       	sec
    3314:	08 95       	ret

00003316 <__fp_zero>:
    3316:	e8 94       	clt

00003318 <__fp_szero>:
    3318:	bb 27       	eor	r27, r27
    331a:	66 27       	eor	r22, r22
    331c:	77 27       	eor	r23, r23
    331e:	cb 01       	movw	r24, r22
    3320:	97 f9       	bld	r25, 7
    3322:	08 95       	ret

00003324 <__gesf2>:
    3324:	2c df       	rcall	.-424    	; 0x317e <__fp_cmp>
    3326:	08 f4       	brcc	.+2      	; 0x332a <__gesf2+0x6>
    3328:	8f ef       	ldi	r24, 0xFF	; 255
    332a:	08 95       	ret

0000332c <inverse>:
    332c:	9b 01       	movw	r18, r22
    332e:	ac 01       	movw	r20, r24
    3330:	60 e0       	ldi	r22, 0x00	; 0
    3332:	70 e0       	ldi	r23, 0x00	; 0
    3334:	80 e8       	ldi	r24, 0x80	; 128
    3336:	9f e3       	ldi	r25, 0x3F	; 63
    3338:	4c ce       	rjmp	.-872    	; 0x2fd2 <__divsf3>

0000333a <__mulsf3>:
    333a:	0b d0       	rcall	.+22     	; 0x3352 <__mulsf3x>
    333c:	a8 cf       	rjmp	.-176    	; 0x328e <__fp_round>
    333e:	71 df       	rcall	.-286    	; 0x3222 <__fp_pscA>
    3340:	28 f0       	brcs	.+10     	; 0x334c <__mulsf3+0x12>
    3342:	76 df       	rcall	.-276    	; 0x3230 <__fp_pscB>
    3344:	18 f0       	brcs	.+6      	; 0x334c <__mulsf3+0x12>
    3346:	95 23       	and	r25, r21
    3348:	09 f0       	breq	.+2      	; 0x334c <__mulsf3+0x12>
    334a:	3d cf       	rjmp	.-390    	; 0x31c6 <__fp_inf>
    334c:	42 cf       	rjmp	.-380    	; 0x31d2 <__fp_nan>
    334e:	11 24       	eor	r1, r1
    3350:	e3 cf       	rjmp	.-58     	; 0x3318 <__fp_szero>

00003352 <__mulsf3x>:
    3352:	bf df       	rcall	.-130    	; 0x32d2 <__fp_split3>
    3354:	a0 f3       	brcs	.-24     	; 0x333e <__mulsf3+0x4>

00003356 <__mulsf3_pse>:
    3356:	95 9f       	mul	r25, r21
    3358:	d1 f3       	breq	.-12     	; 0x334e <__mulsf3+0x14>
    335a:	95 0f       	add	r25, r21
    335c:	50 e0       	ldi	r21, 0x00	; 0
    335e:	55 1f       	adc	r21, r21
    3360:	62 9f       	mul	r22, r18
    3362:	f0 01       	movw	r30, r0
    3364:	72 9f       	mul	r23, r18
    3366:	bb 27       	eor	r27, r27
    3368:	f0 0d       	add	r31, r0
    336a:	b1 1d       	adc	r27, r1
    336c:	63 9f       	mul	r22, r19
    336e:	aa 27       	eor	r26, r26
    3370:	f0 0d       	add	r31, r0
    3372:	b1 1d       	adc	r27, r1
    3374:	aa 1f       	adc	r26, r26
    3376:	64 9f       	mul	r22, r20
    3378:	66 27       	eor	r22, r22
    337a:	b0 0d       	add	r27, r0
    337c:	a1 1d       	adc	r26, r1
    337e:	66 1f       	adc	r22, r22
    3380:	82 9f       	mul	r24, r18
    3382:	22 27       	eor	r18, r18
    3384:	b0 0d       	add	r27, r0
    3386:	a1 1d       	adc	r26, r1
    3388:	62 1f       	adc	r22, r18
    338a:	73 9f       	mul	r23, r19
    338c:	b0 0d       	add	r27, r0
    338e:	a1 1d       	adc	r26, r1
    3390:	62 1f       	adc	r22, r18
    3392:	83 9f       	mul	r24, r19
    3394:	a0 0d       	add	r26, r0
    3396:	61 1d       	adc	r22, r1
    3398:	22 1f       	adc	r18, r18
    339a:	74 9f       	mul	r23, r20
    339c:	33 27       	eor	r19, r19
    339e:	a0 0d       	add	r26, r0
    33a0:	61 1d       	adc	r22, r1
    33a2:	23 1f       	adc	r18, r19
    33a4:	84 9f       	mul	r24, r20
    33a6:	60 0d       	add	r22, r0
    33a8:	21 1d       	adc	r18, r1
    33aa:	82 2f       	mov	r24, r18
    33ac:	76 2f       	mov	r23, r22
    33ae:	6a 2f       	mov	r22, r26
    33b0:	11 24       	eor	r1, r1
    33b2:	9f 57       	subi	r25, 0x7F	; 127
    33b4:	50 40       	sbci	r21, 0x00	; 0
    33b6:	8a f0       	brmi	.+34     	; 0x33da <__mulsf3_pse+0x84>
    33b8:	e1 f0       	breq	.+56     	; 0x33f2 <__mulsf3_pse+0x9c>
    33ba:	88 23       	and	r24, r24
    33bc:	4a f0       	brmi	.+18     	; 0x33d0 <__mulsf3_pse+0x7a>
    33be:	ee 0f       	add	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	bb 1f       	adc	r27, r27
    33c4:	66 1f       	adc	r22, r22
    33c6:	77 1f       	adc	r23, r23
    33c8:	88 1f       	adc	r24, r24
    33ca:	91 50       	subi	r25, 0x01	; 1
    33cc:	50 40       	sbci	r21, 0x00	; 0
    33ce:	a9 f7       	brne	.-22     	; 0x33ba <__mulsf3_pse+0x64>
    33d0:	9e 3f       	cpi	r25, 0xFE	; 254
    33d2:	51 05       	cpc	r21, r1
    33d4:	70 f0       	brcs	.+28     	; 0x33f2 <__mulsf3_pse+0x9c>
    33d6:	f7 ce       	rjmp	.-530    	; 0x31c6 <__fp_inf>
    33d8:	9f cf       	rjmp	.-194    	; 0x3318 <__fp_szero>
    33da:	5f 3f       	cpi	r21, 0xFF	; 255
    33dc:	ec f3       	brlt	.-6      	; 0x33d8 <__mulsf3_pse+0x82>
    33de:	98 3e       	cpi	r25, 0xE8	; 232
    33e0:	dc f3       	brlt	.-10     	; 0x33d8 <__mulsf3_pse+0x82>
    33e2:	86 95       	lsr	r24
    33e4:	77 95       	ror	r23
    33e6:	67 95       	ror	r22
    33e8:	b7 95       	ror	r27
    33ea:	f7 95       	ror	r31
    33ec:	e7 95       	ror	r30
    33ee:	9f 5f       	subi	r25, 0xFF	; 255
    33f0:	c1 f7       	brne	.-16     	; 0x33e2 <__mulsf3_pse+0x8c>
    33f2:	fe 2b       	or	r31, r30
    33f4:	88 0f       	add	r24, r24
    33f6:	91 1d       	adc	r25, r1
    33f8:	96 95       	lsr	r25
    33fa:	87 95       	ror	r24
    33fc:	97 f9       	bld	r25, 7
    33fe:	08 95       	ret

00003400 <sin>:
    3400:	9f 93       	push	r25
    3402:	1e df       	rcall	.-452    	; 0x3240 <__fp_rempio2>
    3404:	0f 90       	pop	r0
    3406:	07 fc       	sbrc	r0, 7
    3408:	ee 5f       	subi	r30, 0xFE	; 254
    340a:	52 cf       	rjmp	.-348    	; 0x32b0 <__fp_sinus>
    340c:	11 f4       	brne	.+4      	; 0x3412 <sin+0x12>
    340e:	0e f4       	brtc	.+2      	; 0x3412 <sin+0x12>
    3410:	e0 ce       	rjmp	.-576    	; 0x31d2 <__fp_nan>
    3412:	41 c0       	rjmp	.+130    	; 0x3496 <__fp_mpack>

00003414 <sqrt>:
    3414:	66 df       	rcall	.-308    	; 0x32e2 <__fp_splitA>
    3416:	d0 f3       	brcs	.-12     	; 0x340c <sin+0xc>
    3418:	99 23       	and	r25, r25
    341a:	d9 f3       	breq	.-10     	; 0x3412 <sin+0x12>
    341c:	ce f3       	brts	.-14     	; 0x3410 <sin+0x10>
    341e:	9f 57       	subi	r25, 0x7F	; 127
    3420:	55 0b       	sbc	r21, r21
    3422:	87 ff       	sbrs	r24, 7
    3424:	46 d0       	rcall	.+140    	; 0x34b2 <__fp_norm2>
    3426:	00 24       	eor	r0, r0
    3428:	a0 e6       	ldi	r26, 0x60	; 96
    342a:	40 ea       	ldi	r20, 0xA0	; 160
    342c:	90 01       	movw	r18, r0
    342e:	80 58       	subi	r24, 0x80	; 128
    3430:	56 95       	lsr	r21
    3432:	97 95       	ror	r25
    3434:	28 f4       	brcc	.+10     	; 0x3440 <sqrt+0x2c>
    3436:	80 5c       	subi	r24, 0xC0	; 192
    3438:	66 0f       	add	r22, r22
    343a:	77 1f       	adc	r23, r23
    343c:	88 1f       	adc	r24, r24
    343e:	20 f0       	brcs	.+8      	; 0x3448 <sqrt+0x34>
    3440:	26 17       	cp	r18, r22
    3442:	37 07       	cpc	r19, r23
    3444:	48 07       	cpc	r20, r24
    3446:	30 f4       	brcc	.+12     	; 0x3454 <sqrt+0x40>
    3448:	62 1b       	sub	r22, r18
    344a:	73 0b       	sbc	r23, r19
    344c:	84 0b       	sbc	r24, r20
    344e:	20 29       	or	r18, r0
    3450:	31 29       	or	r19, r1
    3452:	4a 2b       	or	r20, r26
    3454:	a6 95       	lsr	r26
    3456:	17 94       	ror	r1
    3458:	07 94       	ror	r0
    345a:	20 25       	eor	r18, r0
    345c:	31 25       	eor	r19, r1
    345e:	4a 27       	eor	r20, r26
    3460:	58 f7       	brcc	.-42     	; 0x3438 <sqrt+0x24>
    3462:	66 0f       	add	r22, r22
    3464:	77 1f       	adc	r23, r23
    3466:	88 1f       	adc	r24, r24
    3468:	20 f0       	brcs	.+8      	; 0x3472 <sqrt+0x5e>
    346a:	26 17       	cp	r18, r22
    346c:	37 07       	cpc	r19, r23
    346e:	48 07       	cpc	r20, r24
    3470:	30 f4       	brcc	.+12     	; 0x347e <sqrt+0x6a>
    3472:	62 0b       	sbc	r22, r18
    3474:	73 0b       	sbc	r23, r19
    3476:	84 0b       	sbc	r24, r20
    3478:	20 0d       	add	r18, r0
    347a:	31 1d       	adc	r19, r1
    347c:	41 1d       	adc	r20, r1
    347e:	a0 95       	com	r26
    3480:	81 f7       	brne	.-32     	; 0x3462 <sqrt+0x4e>
    3482:	b9 01       	movw	r22, r18
    3484:	84 2f       	mov	r24, r20
    3486:	91 58       	subi	r25, 0x81	; 129
    3488:	88 0f       	add	r24, r24
    348a:	96 95       	lsr	r25
    348c:	87 95       	ror	r24
    348e:	08 95       	ret

00003490 <square>:
    3490:	9b 01       	movw	r18, r22
    3492:	ac 01       	movw	r20, r24
    3494:	52 cf       	rjmp	.-348    	; 0x333a <__mulsf3>

00003496 <__fp_mpack>:
    3496:	9f 3f       	cpi	r25, 0xFF	; 255
    3498:	31 f0       	breq	.+12     	; 0x34a6 <__fp_mpack_finite+0xc>

0000349a <__fp_mpack_finite>:
    349a:	91 50       	subi	r25, 0x01	; 1
    349c:	20 f4       	brcc	.+8      	; 0x34a6 <__fp_mpack_finite+0xc>
    349e:	87 95       	ror	r24
    34a0:	77 95       	ror	r23
    34a2:	67 95       	ror	r22
    34a4:	b7 95       	ror	r27
    34a6:	88 0f       	add	r24, r24
    34a8:	91 1d       	adc	r25, r1
    34aa:	96 95       	lsr	r25
    34ac:	87 95       	ror	r24
    34ae:	97 f9       	bld	r25, 7
    34b0:	08 95       	ret

000034b2 <__fp_norm2>:
    34b2:	91 50       	subi	r25, 0x01	; 1
    34b4:	50 40       	sbci	r21, 0x00	; 0
    34b6:	66 0f       	add	r22, r22
    34b8:	77 1f       	adc	r23, r23
    34ba:	88 1f       	adc	r24, r24
    34bc:	d2 f7       	brpl	.-12     	; 0x34b2 <__fp_norm2>
    34be:	08 95       	ret

000034c0 <__fp_powsodd>:
    34c0:	9f 93       	push	r25
    34c2:	8f 93       	push	r24
    34c4:	7f 93       	push	r23
    34c6:	6f 93       	push	r22
    34c8:	ff 93       	push	r31
    34ca:	ef 93       	push	r30
    34cc:	9b 01       	movw	r18, r22
    34ce:	ac 01       	movw	r20, r24
    34d0:	34 df       	rcall	.-408    	; 0x333a <__mulsf3>
    34d2:	ef 91       	pop	r30
    34d4:	ff 91       	pop	r31
    34d6:	80 de       	rcall	.-768    	; 0x31d8 <__fp_powser>
    34d8:	2f 91       	pop	r18
    34da:	3f 91       	pop	r19
    34dc:	4f 91       	pop	r20
    34de:	5f 91       	pop	r21
    34e0:	2c cf       	rjmp	.-424    	; 0x333a <__mulsf3>

000034e2 <_exit>:
    34e2:	f8 94       	cli

000034e4 <__stop_program>:
    34e4:	ff cf       	rjmp	.-2      	; 0x34e4 <__stop_program>
