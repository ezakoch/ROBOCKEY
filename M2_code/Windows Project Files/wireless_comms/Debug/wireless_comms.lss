
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  00003a06  00003a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008b  0080010c  0080010c  00003aa6  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00003aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  0000718c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000082f2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00008321  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00003235  00000000  00000000  00008629  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000bdc  00000000  00000000  0000b85e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000016d1  00000000  00000000  0000c43a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000928  00000000  00000000  0000db0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bfa  00000000  00000000  0000e434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004303  00000000  00000000  0000f02e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000358  00000000  00000000  00013331  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <__vector_3>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 0a 16 	jmp	0x2c14	; 0x2c14 <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 68 14 	jmp	0x28d0	; 0x28d0 <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	e6 e0       	ldi	r30, 0x06	; 6
     1be:	fa e3       	ldi	r31, 0x3A	; 58
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ac 30       	cpi	r26, 0x0C	; 12
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ac e0       	ldi	r26, 0x0C	; 12
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	a7 39       	cpi	r26, 0x97	; 151
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 85 0b 	call	0x170a	; 0x170a <main>
     1e0:	0c 94 01 1d 	jmp	0x3a02	; 0x3a02 <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <turnOnBlueLED>:



void turnOnBlueLED(void)
{
	set(PORTD,5);
     1e8:	5d 9a       	sbi	0x0b, 5	; 11
     1ea:	08 95       	ret

000001ec <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
     1ec:	5d 98       	cbi	0x0b, 5	; 11
     1ee:	08 95       	ret

000001f0 <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
     1f0:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
     1f2:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
     1f4:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
     1f6:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
     1f8:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
     1fa:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
     1fc:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
     1fe:	5d 98       	cbi	0x0b, 5	; 11
     200:	08 95       	ret

00000202 <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
     202:	ea e7       	ldi	r30, 0x7A	; 122
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	20 81       	ld	r18, Z
     208:	2f 77       	andi	r18, 0x7F	; 127
     20a:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
     20c:	83 30       	cpi	r24, 0x03	; 3
     20e:	91 05       	cpc	r25, r1
     210:	09 f4       	brne	.+2      	; 0x214 <get_analog_val+0x12>
     212:	49 c0       	rjmp	.+146    	; 0x2a6 <get_analog_val+0xa4>
     214:	3c f4       	brge	.+14     	; 0x224 <get_analog_val+0x22>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	19 f1       	breq	.+70     	; 0x262 <get_analog_val+0x60>
     21c:	9c f5       	brge	.+102    	; 0x284 <get_analog_val+0x82>
     21e:	89 2b       	or	r24, r25
     220:	79 f0       	breq	.+30     	; 0x240 <get_analog_val+0x3e>
     222:	95 c0       	rjmp	.+298    	; 0x34e <get_analog_val+0x14c>
     224:	85 30       	cpi	r24, 0x05	; 5
     226:	91 05       	cpc	r25, r1
     228:	09 f4       	brne	.+2      	; 0x22c <get_analog_val+0x2a>
     22a:	5f c0       	rjmp	.+190    	; 0x2ea <get_analog_val+0xe8>
     22c:	0c f4       	brge	.+2      	; 0x230 <get_analog_val+0x2e>
     22e:	4c c0       	rjmp	.+152    	; 0x2c8 <get_analog_val+0xc6>
     230:	86 30       	cpi	r24, 0x06	; 6
     232:	91 05       	cpc	r25, r1
     234:	09 f4       	brne	.+2      	; 0x238 <get_analog_val+0x36>
     236:	6a c0       	rjmp	.+212    	; 0x30c <get_analog_val+0x10a>
     238:	07 97       	sbiw	r24, 0x07	; 7
     23a:	09 f0       	breq	.+2      	; 0x23e <get_analog_val+0x3c>
     23c:	88 c0       	rjmp	.+272    	; 0x34e <get_analog_val+0x14c>
     23e:	77 c0       	rjmp	.+238    	; 0x32e <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
     240:	eb e7       	ldi	r30, 0x7B	; 123
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8f 7d       	andi	r24, 0xDF	; 223
     248:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8b 7f       	andi	r24, 0xFB	; 251
     252:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     254:	80 81       	ld	r24, Z
     256:	8d 7f       	andi	r24, 0xFD	; 253
     258:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     25a:	80 81       	ld	r24, Z
     25c:	8e 7f       	andi	r24, 0xFE	; 254
     25e:	80 83       	st	Z, r24
            break;
     260:	76 c0       	rjmp	.+236    	; 0x34e <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
     262:	eb e7       	ldi	r30, 0x7B	; 123
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	8b 7f       	andi	r24, 0xFB	; 251
     274:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     276:	80 81       	ld	r24, Z
     278:	8d 7f       	andi	r24, 0xFD	; 253
     27a:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     27c:	80 81       	ld	r24, Z
     27e:	81 60       	ori	r24, 0x01	; 1
     280:	80 83       	st	Z, r24
            break;
     282:	65 c0       	rjmp	.+202    	; 0x34e <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
     284:	eb e7       	ldi	r30, 0x7B	; 123
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	8f 7d       	andi	r24, 0xDF	; 223
     28c:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     28e:	ec e7       	ldi	r30, 0x7C	; 124
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	84 60       	ori	r24, 0x04	; 4
     296:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     298:	80 81       	ld	r24, Z
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     29e:	80 81       	ld	r24, Z
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	80 83       	st	Z, r24
            break;
     2a4:	54 c0       	rjmp	.+168    	; 0x34e <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
     2a6:	eb e7       	ldi	r30, 0x7B	; 123
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 7d       	andi	r24, 0xDF	; 223
     2ae:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2b0:	ec e7       	ldi	r30, 0x7C	; 124
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	84 60       	ori	r24, 0x04	; 4
     2b8:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     2ba:	80 81       	ld	r24, Z
     2bc:	8d 7f       	andi	r24, 0xFD	; 253
     2be:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     2c0:	80 81       	ld	r24, Z
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
            break;
     2c6:	43 c0       	rjmp	.+134    	; 0x34e <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
     2c8:	eb e7       	ldi	r30, 0x7B	; 123
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2d2:	ec e7       	ldi	r30, 0x7C	; 124
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2dc:	80 81       	ld	r24, Z
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     2e2:	80 81       	ld	r24, Z
     2e4:	8e 7f       	andi	r24, 0xFE	; 254
     2e6:	80 83       	st	Z, r24
            break;
     2e8:	32 c0       	rjmp	.+100    	; 0x34e <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
     2ea:	eb e7       	ldi	r30, 0x7B	; 123
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8f 7d       	andi	r24, 0xDF	; 223
     2f2:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2f4:	ec e7       	ldi	r30, 0x7C	; 124
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	84 60       	ori	r24, 0x04	; 4
     2fc:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2fe:	80 81       	ld	r24, Z
     300:	82 60       	ori	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     304:	80 81       	ld	r24, Z
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 83       	st	Z, r24
            break;
     30a:	21 c0       	rjmp	.+66     	; 0x34e <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
     30c:	eb e7       	ldi	r30, 0x7B	; 123
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	80 62       	ori	r24, 0x20	; 32
     314:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     316:	ec e7       	ldi	r30, 0x7C	; 124
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	8b 7f       	andi	r24, 0xFB	; 251
     31e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     320:	80 81       	ld	r24, Z
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     326:	80 81       	ld	r24, Z
     328:	8e 7f       	andi	r24, 0xFE	; 254
     32a:	80 83       	st	Z, r24
            break;
     32c:	10 c0       	rjmp	.+32     	; 0x34e <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
     32e:	eb e7       	ldi	r30, 0x7B	; 123
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	80 62       	ori	r24, 0x20	; 32
     336:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     338:	ec e7       	ldi	r30, 0x7C	; 124
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 7f       	andi	r24, 0xFB	; 251
     340:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     348:	80 81       	ld	r24, Z
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
     34e:	ea e7       	ldi	r30, 0x7A	; 122
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	80 68       	ori	r24, 0x80	; 128
     356:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
     358:	80 81       	ld	r24, Z
     35a:	80 64       	ori	r24, 0x40	; 64
     35c:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
     35e:	80 81       	ld	r24, Z
     360:	80 61       	ori	r24, 0x10	; 16
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
     366:	83 ec       	ldi	r24, 0xC3	; 195
     368:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
     36c:	e3 ec       	ldi	r30, 0xC3	; 195
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8d 7f       	andi	r24, 0xFD	; 253
     374:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
     376:	80 81       	ld	r24, Z
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
     37c:	e2 e7       	ldi	r30, 0x72	; 114
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	84 60       	ori	r24, 0x04	; 4
     384:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
     386:	e1 ec       	ldi	r30, 0xC1	; 193
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 60       	ori	r24, 0x08	; 8
     38e:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
     390:	80 81       	ld	r24, Z
     392:	84 60       	ori	r24, 0x04	; 4
     394:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
     396:	80 81       	ld	r24, Z
     398:	8d 7f       	andi	r24, 0xFD	; 253
     39a:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
     39c:	80 81       	ld	r24, Z
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	80 83       	st	Z, r24
     3a2:	08 95       	ret

000003a4 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
     3a4:	ec e7       	ldi	r30, 0x7C	; 124
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
     3ae:	80 81       	ld	r24, Z
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
     3b4:	aa e7       	ldi	r26, 0x7A	; 122
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	8c 91       	ld	r24, X
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
     3be:	8c 91       	ld	r24, X
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
     3c4:	8c 91       	ld	r24, X
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
     3ca:	ee e7       	ldi	r30, 0x7E	; 126
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
     3d4:	80 81       	ld	r24, Z
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
     3da:	80 81       	ld	r24, Z
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
     3e0:	80 81       	ld	r24, Z
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
     3e6:	80 81       	ld	r24, Z
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
     3ec:	80 81       	ld	r24, Z
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
     3f2:	ed e7       	ldi	r30, 0x7D	; 125
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
     3fc:	80 81       	ld	r24, Z
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
     402:	8c 91       	ld	r24, X
     404:	80 62       	ori	r24, 0x20	; 32
     406:	8c 93       	st	X, r24
     408:	08 95       	ret

0000040a <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
     40a:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
     40c:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
     40e:	88 e8       	ldi	r24, 0x88	; 136
     410:	93 e1       	ldi	r25, 0x13	; 19
     412:	90 93 89 00 	sts	0x0089, r25
     416:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
     41a:	10 92 8b 00 	sts	0x008B, r1
     41e:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
     422:	10 92 8d 00 	sts	0x008D, r1
     426:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
     42a:	a1 e8       	ldi	r26, 0x81	; 129
     42c:	b0 e0       	ldi	r27, 0x00	; 0
     42e:	8c 91       	ld	r24, X
     430:	80 61       	ori	r24, 0x10	; 16
     432:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
     434:	8c 91       	ld	r24, X
     436:	88 60       	ori	r24, 0x08	; 8
     438:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
     43a:	e0 e8       	ldi	r30, 0x80	; 128
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	80 81       	ld	r24, Z
     440:	82 60       	ori	r24, 0x02	; 2
     442:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
     444:	80 81       	ld	r24, Z
     446:	81 60       	ori	r24, 0x01	; 1
     448:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
     44a:	80 81       	ld	r24, Z
     44c:	80 62       	ori	r24, 0x20	; 32
     44e:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
     450:	80 81       	ld	r24, Z
     452:	8f 7e       	andi	r24, 0xEF	; 239
     454:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
     456:	80 81       	ld	r24, Z
     458:	88 60       	ori	r24, 0x08	; 8
     45a:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
     45c:	80 81       	ld	r24, Z
     45e:	8b 7f       	andi	r24, 0xFB	; 251
     460:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
     462:	8c 91       	ld	r24, X
     464:	8b 7f       	andi	r24, 0xFB	; 251
     466:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
     468:	8c 91       	ld	r24, X
     46a:	8d 7f       	andi	r24, 0xFD	; 253
     46c:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
     46e:	8c 91       	ld	r24, X
     470:	81 60       	ori	r24, 0x01	; 1
     472:	8c 93       	st	X, r24
     474:	08 95       	ret

00000476 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     476:	2f 92       	push	r2
     478:	3f 92       	push	r3
     47a:	4f 92       	push	r4
     47c:	5f 92       	push	r5
     47e:	6f 92       	push	r6
     480:	7f 92       	push	r7
     482:	8f 92       	push	r8
     484:	9f 92       	push	r9
     486:	af 92       	push	r10
     488:	bf 92       	push	r11
     48a:	cf 92       	push	r12
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	cd b7       	in	r28, 0x3d	; 61
     49c:	de b7       	in	r29, 0x3e	; 62
     49e:	28 97       	sbiw	r28, 0x08	; 8
     4a0:	0f b6       	in	r0, 0x3f	; 63
     4a2:	f8 94       	cli
     4a4:	de bf       	out	0x3e, r29	; 62
     4a6:	0f be       	out	0x3f, r0	; 63
     4a8:	cd bf       	out	0x3d, r28	; 61
     4aa:	98 86       	std	Y+8, r9	; 0x08
     4ac:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     4ae:	10 92 0d 01 	sts	0x010D, r1
     4b2:	10 92 0c 01 	sts	0x010C, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     4b6:	8f 3f       	cpi	r24, 0xFF	; 255
     4b8:	e3 e0       	ldi	r30, 0x03	; 3
     4ba:	9e 07       	cpc	r25, r30
     4bc:	01 f1       	breq	.+64     	; 0x4fe <localize+0x88>
     4be:	6f 3f       	cpi	r22, 0xFF	; 255
     4c0:	f3 e0       	ldi	r31, 0x03	; 3
     4c2:	7f 07       	cpc	r23, r31
     4c4:	e1 f0       	breq	.+56     	; 0x4fe <localize+0x88>
     4c6:	4f 3f       	cpi	r20, 0xFF	; 255
     4c8:	e3 e0       	ldi	r30, 0x03	; 3
     4ca:	5e 07       	cpc	r21, r30
     4cc:	c1 f0       	breq	.+48     	; 0x4fe <localize+0x88>
     4ce:	2f 3f       	cpi	r18, 0xFF	; 255
     4d0:	f3 e0       	ldi	r31, 0x03	; 3
     4d2:	3f 07       	cpc	r19, r31
     4d4:	a1 f0       	breq	.+40     	; 0x4fe <localize+0x88>
     4d6:	0f 3f       	cpi	r16, 0xFF	; 255
     4d8:	e3 e0       	ldi	r30, 0x03	; 3
     4da:	1e 07       	cpc	r17, r30
     4dc:	81 f0       	breq	.+32     	; 0x4fe <localize+0x88>
     4de:	ff ef       	ldi	r31, 0xFF	; 255
     4e0:	ef 16       	cp	r14, r31
     4e2:	f3 e0       	ldi	r31, 0x03	; 3
     4e4:	ff 06       	cpc	r15, r31
     4e6:	59 f0       	breq	.+22     	; 0x4fe <localize+0x88>
     4e8:	ef ef       	ldi	r30, 0xFF	; 255
     4ea:	ce 16       	cp	r12, r30
     4ec:	e3 e0       	ldi	r30, 0x03	; 3
     4ee:	de 06       	cpc	r13, r30
     4f0:	31 f0       	breq	.+12     	; 0x4fe <localize+0x88>
     4f2:	ff ef       	ldi	r31, 0xFF	; 255
     4f4:	af 16       	cp	r10, r31
     4f6:	f3 e0       	ldi	r31, 0x03	; 3
     4f8:	bf 06       	cpc	r11, r31
     4fa:	09 f0       	breq	.+2      	; 0x4fe <localize+0x88>
     4fc:	ae c6       	rjmp	.+3420   	; 0x125a <__stack+0x75b>
        flag_no_good_stars = 1;
     4fe:	81 e0       	ldi	r24, 0x01	; 1
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	90 93 0d 01 	sts	0x010D, r25
     506:	80 93 0c 01 	sts	0x010C, r24
     50a:	d1 c3       	rjmp	.+1954   	; 0xcae <__stack+0x1af>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     50c:	f8 01       	movw	r30, r16
     50e:	a0 80       	ld	r10, Z
     510:	b1 80       	ldd	r11, Z+1	; 0x01
     512:	c2 80       	ldd	r12, Z+2	; 0x02
     514:	d3 80       	ldd	r13, Z+3	; 0x03
     516:	0c 5f       	subi	r16, 0xFC	; 252
     518:	1f 4f       	sbci	r17, 0xFF	; 255
     51a:	26 2d       	mov	r18, r6
     51c:	37 2d       	mov	r19, r7
     51e:	48 2d       	mov	r20, r8
     520:	59 2d       	mov	r21, r9
     522:	6a 2d       	mov	r22, r10
     524:	7b 2d       	mov	r23, r11
     526:	8c 2d       	mov	r24, r12
     528:	9d 2d       	mov	r25, r13
     52a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
     52e:	18 16       	cp	r1, r24
     530:	34 f4       	brge	.+12     	; 0x53e <localize+0xc8>
     532:	fa 82       	std	Y+2, r15	; 0x02
     534:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     536:	6a 2c       	mov	r6, r10
     538:	7b 2c       	mov	r7, r11
     53a:	8c 2c       	mov	r8, r12
     53c:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     53e:	22 2d       	mov	r18, r2
     540:	33 2d       	mov	r19, r3
     542:	44 2d       	mov	r20, r4
     544:	55 2d       	mov	r21, r5
     546:	6a 2d       	mov	r22, r10
     548:	7b 2d       	mov	r23, r11
     54a:	8c 2d       	mov	r24, r12
     54c:	9d 2d       	mov	r25, r13
     54e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
     552:	88 23       	and	r24, r24
     554:	34 f4       	brge	.+12     	; 0x562 <localize+0xec>
     556:	fe 82       	std	Y+6, r15	; 0x06
     558:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     55a:	2a 2c       	mov	r2, r10
     55c:	3b 2c       	mov	r3, r11
     55e:	4c 2c       	mov	r4, r12
     560:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     562:	ff ef       	ldi	r31, 0xFF	; 255
     564:	ef 1a       	sub	r14, r31
     566:	ff 0a       	sbc	r15, r31
     568:	86 e0       	ldi	r24, 0x06	; 6
     56a:	e8 16       	cp	r14, r24
     56c:	f1 04       	cpc	r15, r1
     56e:	71 f6       	brne	.-100    	; 0x50c <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     570:	e9 81       	ldd	r30, Y+1	; 0x01
     572:	fa 81       	ldd	r31, Y+2	; 0x02
     574:	e2 30       	cpi	r30, 0x02	; 2
     576:	f1 05       	cpc	r31, r1
     578:	09 f4       	brne	.+2      	; 0x57c <localize+0x106>
     57a:	3e c1       	rjmp	.+636    	; 0x7f8 <localize+0x382>
     57c:	34 f4       	brge	.+12     	; 0x58a <localize+0x114>
     57e:	30 97       	sbiw	r30, 0x00	; 0
     580:	81 f0       	breq	.+32     	; 0x5a2 <localize+0x12c>
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	09 f0       	breq	.+2      	; 0x588 <localize+0x112>
     586:	8d c3       	rjmp	.+1818   	; 0xca2 <__stack+0x1a3>
     588:	a2 c0       	rjmp	.+324    	; 0x6ce <localize+0x258>
     58a:	89 81       	ldd	r24, Y+1	; 0x01
     58c:	9a 81       	ldd	r25, Y+2	; 0x02
     58e:	84 30       	cpi	r24, 0x04	; 4
     590:	91 05       	cpc	r25, r1
     592:	09 f4       	brne	.+2      	; 0x596 <localize+0x120>
     594:	5b c2       	rjmp	.+1206   	; 0xa4c <localize+0x5d6>
     596:	0c f4       	brge	.+2      	; 0x59a <localize+0x124>
     598:	c4 c1       	rjmp	.+904    	; 0x922 <localize+0x4ac>
     59a:	05 97       	sbiw	r24, 0x05	; 5
     59c:	09 f0       	breq	.+2      	; 0x5a0 <localize+0x12a>
     59e:	81 c3       	rjmp	.+1794   	; 0xca2 <__stack+0x1a3>
     5a0:	ea c2       	rjmp	.+1492   	; 0xb76 <__stack+0x77>
            case 0:
                switch (min_id) {
     5a2:	ed 81       	ldd	r30, Y+5	; 0x05
     5a4:	fe 81       	ldd	r31, Y+6	; 0x06
     5a6:	e2 30       	cpi	r30, 0x02	; 2
     5a8:	f1 05       	cpc	r31, r1
     5aa:	39 f1       	breq	.+78     	; 0x5fa <localize+0x184>
     5ac:	24 f4       	brge	.+8      	; 0x5b6 <localize+0x140>
     5ae:	31 97       	sbiw	r30, 0x01	; 1
     5b0:	09 f0       	breq	.+2      	; 0x5b4 <localize+0x13e>
     5b2:	6e c0       	rjmp	.+220    	; 0x690 <localize+0x21a>
     5b4:	09 c0       	rjmp	.+18     	; 0x5c8 <localize+0x152>
     5b6:	8d 81       	ldd	r24, Y+5	; 0x05
     5b8:	9e 81       	ldd	r25, Y+6	; 0x06
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	91 05       	cpc	r25, r1
     5be:	b1 f1       	breq	.+108    	; 0x62c <localize+0x1b6>
     5c0:	04 97       	sbiw	r24, 0x04	; 4
     5c2:	09 f0       	breq	.+2      	; 0x5c6 <localize+0x150>
     5c4:	65 c0       	rjmp	.+202    	; 0x690 <localize+0x21a>
     5c6:	4b c0       	rjmp	.+150    	; 0x65e <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     5c8:	82 e4       	ldi	r24, 0x42	; 66
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 8a 01 	sts	0x018A, r25
     5d0:	80 93 89 01 	sts	0x0189, r24
     5d4:	8a e3       	ldi	r24, 0x3A	; 58
     5d6:	91 e0       	ldi	r25, 0x01	; 1
     5d8:	90 93 70 01 	sts	0x0170, r25
     5dc:	80 93 6f 01 	sts	0x016F, r24
     5e0:	8e e3       	ldi	r24, 0x3E	; 62
     5e2:	91 e0       	ldi	r25, 0x01	; 1
     5e4:	90 93 72 01 	sts	0x0172, r25
     5e8:	80 93 71 01 	sts	0x0171, r24
     5ec:	86 e3       	ldi	r24, 0x36	; 54
     5ee:	91 e0       	ldi	r25, 0x01	; 1
     5f0:	90 93 84 01 	sts	0x0184, r25
     5f4:	80 93 83 01 	sts	0x0183, r24
                        break;
     5f8:	54 c3       	rjmp	.+1704   	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     5fa:	82 e4       	ldi	r24, 0x42	; 66
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	90 93 8a 01 	sts	0x018A, r25
     602:	80 93 89 01 	sts	0x0189, r24
     606:	86 e3       	ldi	r24, 0x36	; 54
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 70 01 	sts	0x0170, r25
     60e:	80 93 6f 01 	sts	0x016F, r24
     612:	8e e3       	ldi	r24, 0x3E	; 62
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 72 01 	sts	0x0172, r25
     61a:	80 93 71 01 	sts	0x0171, r24
     61e:	8a e3       	ldi	r24, 0x3A	; 58
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 84 01 	sts	0x0184, r25
     626:	80 93 83 01 	sts	0x0183, r24
                        break;
     62a:	3b c3       	rjmp	.+1654   	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     62c:	8e e3       	ldi	r24, 0x3E	; 62
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	90 93 8a 01 	sts	0x018A, r25
     634:	80 93 89 01 	sts	0x0189, r24
     638:	8a e3       	ldi	r24, 0x3A	; 58
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 70 01 	sts	0x0170, r25
     640:	80 93 6f 01 	sts	0x016F, r24
     644:	82 e4       	ldi	r24, 0x42	; 66
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 72 01 	sts	0x0172, r25
     64c:	80 93 71 01 	sts	0x0171, r24
     650:	86 e3       	ldi	r24, 0x36	; 54
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 84 01 	sts	0x0184, r25
     658:	80 93 83 01 	sts	0x0183, r24
                        break;
     65c:	22 c3       	rjmp	.+1604   	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     65e:	8e e3       	ldi	r24, 0x3E	; 62
     660:	91 e0       	ldi	r25, 0x01	; 1
     662:	90 93 8a 01 	sts	0x018A, r25
     666:	80 93 89 01 	sts	0x0189, r24
     66a:	86 e3       	ldi	r24, 0x36	; 54
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 70 01 	sts	0x0170, r25
     672:	80 93 6f 01 	sts	0x016F, r24
     676:	82 e4       	ldi	r24, 0x42	; 66
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 72 01 	sts	0x0172, r25
     67e:	80 93 71 01 	sts	0x0171, r24
     682:	8a e3       	ldi	r24, 0x3A	; 58
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 84 01 	sts	0x0184, r25
     68a:	80 93 83 01 	sts	0x0183, r24
                        break;
     68e:	09 c3       	rjmp	.+1554   	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     690:	82 e4       	ldi	r24, 0x42	; 66
     692:	91 e0       	ldi	r25, 0x01	; 1
     694:	90 93 8a 01 	sts	0x018A, r25
     698:	80 93 89 01 	sts	0x0189, r24
     69c:	8e e3       	ldi	r24, 0x3E	; 62
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 70 01 	sts	0x0170, r25
     6a4:	80 93 6f 01 	sts	0x016F, r24
     6a8:	8a e3       	ldi	r24, 0x3A	; 58
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 72 01 	sts	0x0172, r25
     6b0:	80 93 71 01 	sts	0x0171, r24
     6b4:	86 e3       	ldi	r24, 0x36	; 54
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 84 01 	sts	0x0184, r25
     6bc:	80 93 83 01 	sts	0x0183, r24
                        flag_no_good_stars = 1;
     6c0:	81 e0       	ldi	r24, 0x01	; 1
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	90 93 0d 01 	sts	0x010D, r25
     6c8:	80 93 0c 01 	sts	0x010C, r24
                        break;
     6cc:	f0 c2       	rjmp	.+1504   	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 1:
                switch (min_id) {
     6ce:	ed 81       	ldd	r30, Y+5	; 0x05
     6d0:	fe 81       	ldd	r31, Y+6	; 0x06
     6d2:	e2 30       	cpi	r30, 0x02	; 2
     6d4:	f1 05       	cpc	r31, r1
     6d6:	31 f1       	breq	.+76     	; 0x724 <localize+0x2ae>
     6d8:	1c f4       	brge	.+6      	; 0x6e0 <localize+0x26a>
     6da:	ef 2b       	or	r30, r31
     6dc:	51 f0       	breq	.+20     	; 0x6f2 <localize+0x27c>
     6de:	6d c0       	rjmp	.+218    	; 0x7ba <localize+0x344>
     6e0:	8d 81       	ldd	r24, Y+5	; 0x05
     6e2:	9e 81       	ldd	r25, Y+6	; 0x06
     6e4:	83 30       	cpi	r24, 0x03	; 3
     6e6:	91 05       	cpc	r25, r1
     6e8:	b1 f1       	breq	.+108    	; 0x756 <localize+0x2e0>
     6ea:	05 97       	sbiw	r24, 0x05	; 5
     6ec:	09 f0       	breq	.+2      	; 0x6f0 <localize+0x27a>
     6ee:	65 c0       	rjmp	.+202    	; 0x7ba <localize+0x344>
     6f0:	4b c0       	rjmp	.+150    	; 0x788 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6f2:	82 e4       	ldi	r24, 0x42	; 66
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	90 93 8a 01 	sts	0x018A, r25
     6fa:	80 93 89 01 	sts	0x0189, r24
     6fe:	8e e3       	ldi	r24, 0x3E	; 62
     700:	91 e0       	ldi	r25, 0x01	; 1
     702:	90 93 70 01 	sts	0x0170, r25
     706:	80 93 6f 01 	sts	0x016F, r24
     70a:	8a e3       	ldi	r24, 0x3A	; 58
     70c:	91 e0       	ldi	r25, 0x01	; 1
     70e:	90 93 72 01 	sts	0x0172, r25
     712:	80 93 71 01 	sts	0x0171, r24
     716:	86 e3       	ldi	r24, 0x36	; 54
     718:	91 e0       	ldi	r25, 0x01	; 1
     71a:	90 93 84 01 	sts	0x0184, r25
     71e:	80 93 83 01 	sts	0x0183, r24
                        break;
     722:	bf c2       	rjmp	.+1406   	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     724:	82 e4       	ldi	r24, 0x42	; 66
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	90 93 8a 01 	sts	0x018A, r25
     72c:	80 93 89 01 	sts	0x0189, r24
     730:	86 e3       	ldi	r24, 0x36	; 54
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	90 93 70 01 	sts	0x0170, r25
     738:	80 93 6f 01 	sts	0x016F, r24
     73c:	8a e3       	ldi	r24, 0x3A	; 58
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 72 01 	sts	0x0172, r25
     744:	80 93 71 01 	sts	0x0171, r24
     748:	8e e3       	ldi	r24, 0x3E	; 62
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	90 93 84 01 	sts	0x0184, r25
     750:	80 93 83 01 	sts	0x0183, r24
                        break;
     754:	a6 c2       	rjmp	.+1356   	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     756:	8a e3       	ldi	r24, 0x3A	; 58
     758:	91 e0       	ldi	r25, 0x01	; 1
     75a:	90 93 8a 01 	sts	0x018A, r25
     75e:	80 93 89 01 	sts	0x0189, r24
     762:	8e e3       	ldi	r24, 0x3E	; 62
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	90 93 70 01 	sts	0x0170, r25
     76a:	80 93 6f 01 	sts	0x016F, r24
     76e:	82 e4       	ldi	r24, 0x42	; 66
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 72 01 	sts	0x0172, r25
     776:	80 93 71 01 	sts	0x0171, r24
     77a:	86 e3       	ldi	r24, 0x36	; 54
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	90 93 84 01 	sts	0x0184, r25
     782:	80 93 83 01 	sts	0x0183, r24
                        break;
     786:	8d c2       	rjmp	.+1306   	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     788:	8a e3       	ldi	r24, 0x3A	; 58
     78a:	91 e0       	ldi	r25, 0x01	; 1
     78c:	90 93 8a 01 	sts	0x018A, r25
     790:	80 93 89 01 	sts	0x0189, r24
     794:	86 e3       	ldi	r24, 0x36	; 54
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 70 01 	sts	0x0170, r25
     79c:	80 93 6f 01 	sts	0x016F, r24
     7a0:	82 e4       	ldi	r24, 0x42	; 66
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 72 01 	sts	0x0172, r25
     7a8:	80 93 71 01 	sts	0x0171, r24
     7ac:	8e e3       	ldi	r24, 0x3E	; 62
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 84 01 	sts	0x0184, r25
     7b4:	80 93 83 01 	sts	0x0183, r24
                        break;
     7b8:	74 c2       	rjmp	.+1256   	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7ba:	82 e4       	ldi	r24, 0x42	; 66
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	90 93 8a 01 	sts	0x018A, r25
     7c2:	80 93 89 01 	sts	0x0189, r24
     7c6:	8e e3       	ldi	r24, 0x3E	; 62
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 70 01 	sts	0x0170, r25
     7ce:	80 93 6f 01 	sts	0x016F, r24
     7d2:	8a e3       	ldi	r24, 0x3A	; 58
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	90 93 72 01 	sts	0x0172, r25
     7da:	80 93 71 01 	sts	0x0171, r24
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 84 01 	sts	0x0184, r25
     7e6:	80 93 83 01 	sts	0x0183, r24
                        flag_no_good_stars = 1;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	90 93 0d 01 	sts	0x010D, r25
     7f2:	80 93 0c 01 	sts	0x010C, r24
                        break;
     7f6:	5b c2       	rjmp	.+1206   	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 2:
                switch (min_id) {
     7f8:	ed 81       	ldd	r30, Y+5	; 0x05
     7fa:	fe 81       	ldd	r31, Y+6	; 0x06
     7fc:	e1 30       	cpi	r30, 0x01	; 1
     7fe:	f1 05       	cpc	r31, r1
     800:	31 f1       	breq	.+76     	; 0x84e <localize+0x3d8>
     802:	1c f4       	brge	.+6      	; 0x80a <localize+0x394>
     804:	ef 2b       	or	r30, r31
     806:	51 f0       	breq	.+20     	; 0x81c <localize+0x3a6>
     808:	6d c0       	rjmp	.+218    	; 0x8e4 <localize+0x46e>
     80a:	8d 81       	ldd	r24, Y+5	; 0x05
     80c:	9e 81       	ldd	r25, Y+6	; 0x06
     80e:	84 30       	cpi	r24, 0x04	; 4
     810:	91 05       	cpc	r25, r1
     812:	b1 f1       	breq	.+108    	; 0x880 <localize+0x40a>
     814:	05 97       	sbiw	r24, 0x05	; 5
     816:	09 f0       	breq	.+2      	; 0x81a <localize+0x3a4>
     818:	65 c0       	rjmp	.+202    	; 0x8e4 <localize+0x46e>
     81a:	4b c0       	rjmp	.+150    	; 0x8b2 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     81c:	82 e4       	ldi	r24, 0x42	; 66
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 8a 01 	sts	0x018A, r25
     824:	80 93 89 01 	sts	0x0189, r24
     828:	8e e3       	ldi	r24, 0x3E	; 62
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	90 93 70 01 	sts	0x0170, r25
     830:	80 93 6f 01 	sts	0x016F, r24
     834:	86 e3       	ldi	r24, 0x36	; 54
     836:	91 e0       	ldi	r25, 0x01	; 1
     838:	90 93 72 01 	sts	0x0172, r25
     83c:	80 93 71 01 	sts	0x0171, r24
     840:	8a e3       	ldi	r24, 0x3A	; 58
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	90 93 84 01 	sts	0x0184, r25
     848:	80 93 83 01 	sts	0x0183, r24
                        break;
     84c:	2a c2       	rjmp	.+1108   	; 0xca2 <__stack+0x1a3>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     84e:	82 e4       	ldi	r24, 0x42	; 66
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	90 93 8a 01 	sts	0x018A, r25
     856:	80 93 89 01 	sts	0x0189, r24
     85a:	8a e3       	ldi	r24, 0x3A	; 58
     85c:	91 e0       	ldi	r25, 0x01	; 1
     85e:	90 93 70 01 	sts	0x0170, r25
     862:	80 93 6f 01 	sts	0x016F, r24
     866:	86 e3       	ldi	r24, 0x36	; 54
     868:	91 e0       	ldi	r25, 0x01	; 1
     86a:	90 93 72 01 	sts	0x0172, r25
     86e:	80 93 71 01 	sts	0x0171, r24
     872:	8e e3       	ldi	r24, 0x3E	; 62
     874:	91 e0       	ldi	r25, 0x01	; 1
     876:	90 93 84 01 	sts	0x0184, r25
     87a:	80 93 83 01 	sts	0x0183, r24
                        break;
     87e:	11 c2       	rjmp	.+1058   	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     880:	86 e3       	ldi	r24, 0x36	; 54
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 8a 01 	sts	0x018A, r25
     888:	80 93 89 01 	sts	0x0189, r24
     88c:	8e e3       	ldi	r24, 0x3E	; 62
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	90 93 70 01 	sts	0x0170, r25
     894:	80 93 6f 01 	sts	0x016F, r24
     898:	82 e4       	ldi	r24, 0x42	; 66
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	90 93 72 01 	sts	0x0172, r25
     8a0:	80 93 71 01 	sts	0x0171, r24
     8a4:	8a e3       	ldi	r24, 0x3A	; 58
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	90 93 84 01 	sts	0x0184, r25
     8ac:	80 93 83 01 	sts	0x0183, r24
                        break;
     8b0:	f8 c1       	rjmp	.+1008   	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     8b2:	86 e3       	ldi	r24, 0x36	; 54
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 8a 01 	sts	0x018A, r25
     8ba:	80 93 89 01 	sts	0x0189, r24
     8be:	8a e3       	ldi	r24, 0x3A	; 58
     8c0:	91 e0       	ldi	r25, 0x01	; 1
     8c2:	90 93 70 01 	sts	0x0170, r25
     8c6:	80 93 6f 01 	sts	0x016F, r24
     8ca:	82 e4       	ldi	r24, 0x42	; 66
     8cc:	91 e0       	ldi	r25, 0x01	; 1
     8ce:	90 93 72 01 	sts	0x0172, r25
     8d2:	80 93 71 01 	sts	0x0171, r24
     8d6:	8e e3       	ldi	r24, 0x3E	; 62
     8d8:	91 e0       	ldi	r25, 0x01	; 1
     8da:	90 93 84 01 	sts	0x0184, r25
     8de:	80 93 83 01 	sts	0x0183, r24
                        break;
     8e2:	df c1       	rjmp	.+958    	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     8e4:	82 e4       	ldi	r24, 0x42	; 66
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	90 93 8a 01 	sts	0x018A, r25
     8ec:	80 93 89 01 	sts	0x0189, r24
     8f0:	8e e3       	ldi	r24, 0x3E	; 62
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	90 93 70 01 	sts	0x0170, r25
     8f8:	80 93 6f 01 	sts	0x016F, r24
     8fc:	8a e3       	ldi	r24, 0x3A	; 58
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	90 93 72 01 	sts	0x0172, r25
     904:	80 93 71 01 	sts	0x0171, r24
     908:	86 e3       	ldi	r24, 0x36	; 54
     90a:	91 e0       	ldi	r25, 0x01	; 1
     90c:	90 93 84 01 	sts	0x0184, r25
     910:	80 93 83 01 	sts	0x0183, r24
                        flag_no_good_stars = 1;
     914:	81 e0       	ldi	r24, 0x01	; 1
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	90 93 0d 01 	sts	0x010D, r25
     91c:	80 93 0c 01 	sts	0x010C, r24
                        break;
     920:	c6 c1       	rjmp	.+908    	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 3:
                switch (min_id) {
     922:	ed 81       	ldd	r30, Y+5	; 0x05
     924:	fe 81       	ldd	r31, Y+6	; 0x06
     926:	e1 30       	cpi	r30, 0x01	; 1
     928:	f1 05       	cpc	r31, r1
     92a:	31 f1       	breq	.+76     	; 0x978 <localize+0x502>
     92c:	1c f4       	brge	.+6      	; 0x934 <localize+0x4be>
     92e:	ef 2b       	or	r30, r31
     930:	51 f0       	breq	.+20     	; 0x946 <localize+0x4d0>
     932:	6d c0       	rjmp	.+218    	; 0xa0e <localize+0x598>
     934:	8d 81       	ldd	r24, Y+5	; 0x05
     936:	9e 81       	ldd	r25, Y+6	; 0x06
     938:	84 30       	cpi	r24, 0x04	; 4
     93a:	91 05       	cpc	r25, r1
     93c:	b1 f1       	breq	.+108    	; 0x9aa <localize+0x534>
     93e:	05 97       	sbiw	r24, 0x05	; 5
     940:	09 f0       	breq	.+2      	; 0x944 <localize+0x4ce>
     942:	65 c0       	rjmp	.+202    	; 0xa0e <localize+0x598>
     944:	4b c0       	rjmp	.+150    	; 0x9dc <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     946:	8e e3       	ldi	r24, 0x3E	; 62
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	90 93 8a 01 	sts	0x018A, r25
     94e:	80 93 89 01 	sts	0x0189, r24
     952:	82 e4       	ldi	r24, 0x42	; 66
     954:	91 e0       	ldi	r25, 0x01	; 1
     956:	90 93 70 01 	sts	0x0170, r25
     95a:	80 93 6f 01 	sts	0x016F, r24
     95e:	8a e3       	ldi	r24, 0x3A	; 58
     960:	91 e0       	ldi	r25, 0x01	; 1
     962:	90 93 72 01 	sts	0x0172, r25
     966:	80 93 71 01 	sts	0x0171, r24
     96a:	86 e3       	ldi	r24, 0x36	; 54
     96c:	91 e0       	ldi	r25, 0x01	; 1
     96e:	90 93 84 01 	sts	0x0184, r25
     972:	80 93 83 01 	sts	0x0183, r24
                        break;
     976:	95 c1       	rjmp	.+810    	; 0xca2 <__stack+0x1a3>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     978:	8a e3       	ldi	r24, 0x3A	; 58
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	90 93 8a 01 	sts	0x018A, r25
     980:	80 93 89 01 	sts	0x0189, r24
     984:	82 e4       	ldi	r24, 0x42	; 66
     986:	91 e0       	ldi	r25, 0x01	; 1
     988:	90 93 70 01 	sts	0x0170, r25
     98c:	80 93 6f 01 	sts	0x016F, r24
     990:	8e e3       	ldi	r24, 0x3E	; 62
     992:	91 e0       	ldi	r25, 0x01	; 1
     994:	90 93 72 01 	sts	0x0172, r25
     998:	80 93 71 01 	sts	0x0171, r24
     99c:	86 e3       	ldi	r24, 0x36	; 54
     99e:	91 e0       	ldi	r25, 0x01	; 1
     9a0:	90 93 84 01 	sts	0x0184, r25
     9a4:	80 93 83 01 	sts	0x0183, r24
                        break;
     9a8:	7c c1       	rjmp	.+760    	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     9aa:	8e e3       	ldi	r24, 0x3E	; 62
     9ac:	91 e0       	ldi	r25, 0x01	; 1
     9ae:	90 93 8a 01 	sts	0x018A, r25
     9b2:	80 93 89 01 	sts	0x0189, r24
     9b6:	86 e3       	ldi	r24, 0x36	; 54
     9b8:	91 e0       	ldi	r25, 0x01	; 1
     9ba:	90 93 70 01 	sts	0x0170, r25
     9be:	80 93 6f 01 	sts	0x016F, r24
     9c2:	8a e3       	ldi	r24, 0x3A	; 58
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	90 93 72 01 	sts	0x0172, r25
     9ca:	80 93 71 01 	sts	0x0171, r24
     9ce:	82 e4       	ldi	r24, 0x42	; 66
     9d0:	91 e0       	ldi	r25, 0x01	; 1
     9d2:	90 93 84 01 	sts	0x0184, r25
     9d6:	80 93 83 01 	sts	0x0183, r24
                        break;
     9da:	63 c1       	rjmp	.+710    	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     9dc:	8a e3       	ldi	r24, 0x3A	; 58
     9de:	91 e0       	ldi	r25, 0x01	; 1
     9e0:	90 93 8a 01 	sts	0x018A, r25
     9e4:	80 93 89 01 	sts	0x0189, r24
     9e8:	86 e3       	ldi	r24, 0x36	; 54
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	90 93 70 01 	sts	0x0170, r25
     9f0:	80 93 6f 01 	sts	0x016F, r24
     9f4:	8e e3       	ldi	r24, 0x3E	; 62
     9f6:	91 e0       	ldi	r25, 0x01	; 1
     9f8:	90 93 72 01 	sts	0x0172, r25
     9fc:	80 93 71 01 	sts	0x0171, r24
     a00:	82 e4       	ldi	r24, 0x42	; 66
     a02:	91 e0       	ldi	r25, 0x01	; 1
     a04:	90 93 84 01 	sts	0x0184, r25
     a08:	80 93 83 01 	sts	0x0183, r24
                        break;
     a0c:	4a c1       	rjmp	.+660    	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     a0e:	82 e4       	ldi	r24, 0x42	; 66
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	90 93 8a 01 	sts	0x018A, r25
     a16:	80 93 89 01 	sts	0x0189, r24
     a1a:	8e e3       	ldi	r24, 0x3E	; 62
     a1c:	91 e0       	ldi	r25, 0x01	; 1
     a1e:	90 93 70 01 	sts	0x0170, r25
     a22:	80 93 6f 01 	sts	0x016F, r24
     a26:	8a e3       	ldi	r24, 0x3A	; 58
     a28:	91 e0       	ldi	r25, 0x01	; 1
     a2a:	90 93 72 01 	sts	0x0172, r25
     a2e:	80 93 71 01 	sts	0x0171, r24
     a32:	86 e3       	ldi	r24, 0x36	; 54
     a34:	91 e0       	ldi	r25, 0x01	; 1
     a36:	90 93 84 01 	sts	0x0184, r25
     a3a:	80 93 83 01 	sts	0x0183, r24
                        flag_no_good_stars = 1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 0d 01 	sts	0x010D, r25
     a46:	80 93 0c 01 	sts	0x010C, r24
                        break;
     a4a:	31 c1       	rjmp	.+610    	; 0xcae <__stack+0x1af>
                }
                break;
                
            case 4:
                switch (min_id) {
     a4c:	ed 81       	ldd	r30, Y+5	; 0x05
     a4e:	fe 81       	ldd	r31, Y+6	; 0x06
     a50:	e2 30       	cpi	r30, 0x02	; 2
     a52:	f1 05       	cpc	r31, r1
     a54:	31 f1       	breq	.+76     	; 0xaa2 <localize+0x62c>
     a56:	1c f4       	brge	.+6      	; 0xa5e <localize+0x5e8>
     a58:	ef 2b       	or	r30, r31
     a5a:	51 f0       	breq	.+20     	; 0xa70 <localize+0x5fa>
     a5c:	6d c0       	rjmp	.+218    	; 0xb38 <__stack+0x39>
     a5e:	8d 81       	ldd	r24, Y+5	; 0x05
     a60:	9e 81       	ldd	r25, Y+6	; 0x06
     a62:	83 30       	cpi	r24, 0x03	; 3
     a64:	91 05       	cpc	r25, r1
     a66:	b1 f1       	breq	.+108    	; 0xad4 <localize+0x65e>
     a68:	05 97       	sbiw	r24, 0x05	; 5
     a6a:	09 f0       	breq	.+2      	; 0xa6e <localize+0x5f8>
     a6c:	65 c0       	rjmp	.+202    	; 0xb38 <__stack+0x39>
     a6e:	4b c0       	rjmp	.+150    	; 0xb06 <__stack+0x7>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     a70:	8e e3       	ldi	r24, 0x3E	; 62
     a72:	91 e0       	ldi	r25, 0x01	; 1
     a74:	90 93 8a 01 	sts	0x018A, r25
     a78:	80 93 89 01 	sts	0x0189, r24
     a7c:	82 e4       	ldi	r24, 0x42	; 66
     a7e:	91 e0       	ldi	r25, 0x01	; 1
     a80:	90 93 70 01 	sts	0x0170, r25
     a84:	80 93 6f 01 	sts	0x016F, r24
     a88:	86 e3       	ldi	r24, 0x36	; 54
     a8a:	91 e0       	ldi	r25, 0x01	; 1
     a8c:	90 93 72 01 	sts	0x0172, r25
     a90:	80 93 71 01 	sts	0x0171, r24
     a94:	8a e3       	ldi	r24, 0x3A	; 58
     a96:	91 e0       	ldi	r25, 0x01	; 1
     a98:	90 93 84 01 	sts	0x0184, r25
     a9c:	80 93 83 01 	sts	0x0183, r24
                        break;
     aa0:	00 c1       	rjmp	.+512    	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     aa2:	86 e3       	ldi	r24, 0x36	; 54
     aa4:	91 e0       	ldi	r25, 0x01	; 1
     aa6:	90 93 8a 01 	sts	0x018A, r25
     aaa:	80 93 89 01 	sts	0x0189, r24
     aae:	82 e4       	ldi	r24, 0x42	; 66
     ab0:	91 e0       	ldi	r25, 0x01	; 1
     ab2:	90 93 70 01 	sts	0x0170, r25
     ab6:	80 93 6f 01 	sts	0x016F, r24
     aba:	8e e3       	ldi	r24, 0x3E	; 62
     abc:	91 e0       	ldi	r25, 0x01	; 1
     abe:	90 93 72 01 	sts	0x0172, r25
     ac2:	80 93 71 01 	sts	0x0171, r24
     ac6:	8a e3       	ldi	r24, 0x3A	; 58
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	90 93 84 01 	sts	0x0184, r25
     ace:	80 93 83 01 	sts	0x0183, r24
                        break;
     ad2:	e7 c0       	rjmp	.+462    	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     ad4:	8e e3       	ldi	r24, 0x3E	; 62
     ad6:	91 e0       	ldi	r25, 0x01	; 1
     ad8:	90 93 8a 01 	sts	0x018A, r25
     adc:	80 93 89 01 	sts	0x0189, r24
     ae0:	8a e3       	ldi	r24, 0x3A	; 58
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	90 93 70 01 	sts	0x0170, r25
     ae8:	80 93 6f 01 	sts	0x016F, r24
     aec:	86 e3       	ldi	r24, 0x36	; 54
     aee:	91 e0       	ldi	r25, 0x01	; 1
     af0:	90 93 72 01 	sts	0x0172, r25
     af4:	80 93 71 01 	sts	0x0171, r24
     af8:	82 e4       	ldi	r24, 0x42	; 66
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	90 93 84 01 	sts	0x0184, r25
     b00:	80 93 83 01 	sts	0x0183, r24
                        break;
     b04:	ce c0       	rjmp	.+412    	; 0xca2 <__stack+0x1a3>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     b06:	86 e3       	ldi	r24, 0x36	; 54
     b08:	91 e0       	ldi	r25, 0x01	; 1
     b0a:	90 93 8a 01 	sts	0x018A, r25
     b0e:	80 93 89 01 	sts	0x0189, r24
     b12:	8a e3       	ldi	r24, 0x3A	; 58
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	90 93 70 01 	sts	0x0170, r25
     b1a:	80 93 6f 01 	sts	0x016F, r24
     b1e:	8e e3       	ldi	r24, 0x3E	; 62
     b20:	91 e0       	ldi	r25, 0x01	; 1
     b22:	90 93 72 01 	sts	0x0172, r25
     b26:	80 93 71 01 	sts	0x0171, r24
     b2a:	82 e4       	ldi	r24, 0x42	; 66
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	90 93 84 01 	sts	0x0184, r25
     b32:	80 93 83 01 	sts	0x0183, r24
                        break;
     b36:	b5 c0       	rjmp	.+362    	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     b38:	82 e4       	ldi	r24, 0x42	; 66
     b3a:	91 e0       	ldi	r25, 0x01	; 1
     b3c:	90 93 8a 01 	sts	0x018A, r25
     b40:	80 93 89 01 	sts	0x0189, r24
     b44:	8e e3       	ldi	r24, 0x3E	; 62
     b46:	91 e0       	ldi	r25, 0x01	; 1
     b48:	90 93 70 01 	sts	0x0170, r25
     b4c:	80 93 6f 01 	sts	0x016F, r24
     b50:	8a e3       	ldi	r24, 0x3A	; 58
     b52:	91 e0       	ldi	r25, 0x01	; 1
     b54:	90 93 72 01 	sts	0x0172, r25
     b58:	80 93 71 01 	sts	0x0171, r24
     b5c:	86 e3       	ldi	r24, 0x36	; 54
     b5e:	91 e0       	ldi	r25, 0x01	; 1
     b60:	90 93 84 01 	sts	0x0184, r25
     b64:	80 93 83 01 	sts	0x0183, r24
                        flag_no_good_stars = 1;
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	90 93 0d 01 	sts	0x010D, r25
     b70:	80 93 0c 01 	sts	0x010C, r24
                        break;
     b74:	9c c0       	rjmp	.+312    	; 0xcae <__stack+0x1af>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     b76:	ed 81       	ldd	r30, Y+5	; 0x05
     b78:	fe 81       	ldd	r31, Y+6	; 0x06
     b7a:	e2 30       	cpi	r30, 0x02	; 2
     b7c:	f1 05       	cpc	r31, r1
     b7e:	39 f1       	breq	.+78     	; 0xbce <__stack+0xcf>
     b80:	24 f4       	brge	.+8      	; 0xb8a <__stack+0x8b>
     b82:	31 97       	sbiw	r30, 0x01	; 1
     b84:	09 f0       	breq	.+2      	; 0xb88 <__stack+0x89>
     b86:	6e c0       	rjmp	.+220    	; 0xc64 <__stack+0x165>
     b88:	09 c0       	rjmp	.+18     	; 0xb9c <__stack+0x9d>
     b8a:	8d 81       	ldd	r24, Y+5	; 0x05
     b8c:	9e 81       	ldd	r25, Y+6	; 0x06
     b8e:	83 30       	cpi	r24, 0x03	; 3
     b90:	91 05       	cpc	r25, r1
     b92:	b1 f1       	breq	.+108    	; 0xc00 <__stack+0x101>
     b94:	04 97       	sbiw	r24, 0x04	; 4
     b96:	09 f0       	breq	.+2      	; 0xb9a <__stack+0x9b>
     b98:	65 c0       	rjmp	.+202    	; 0xc64 <__stack+0x165>
     b9a:	4b c0       	rjmp	.+150    	; 0xc32 <__stack+0x133>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     b9c:	8a e3       	ldi	r24, 0x3A	; 58
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	90 93 8a 01 	sts	0x018A, r25
     ba4:	80 93 89 01 	sts	0x0189, r24
     ba8:	82 e4       	ldi	r24, 0x42	; 66
     baa:	91 e0       	ldi	r25, 0x01	; 1
     bac:	90 93 70 01 	sts	0x0170, r25
     bb0:	80 93 6f 01 	sts	0x016F, r24
     bb4:	86 e3       	ldi	r24, 0x36	; 54
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	90 93 72 01 	sts	0x0172, r25
     bbc:	80 93 71 01 	sts	0x0171, r24
     bc0:	8e e3       	ldi	r24, 0x3E	; 62
     bc2:	91 e0       	ldi	r25, 0x01	; 1
     bc4:	90 93 84 01 	sts	0x0184, r25
     bc8:	80 93 83 01 	sts	0x0183, r24
                        break;
     bcc:	6a c0       	rjmp	.+212    	; 0xca2 <__stack+0x1a3>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     bce:	86 e3       	ldi	r24, 0x36	; 54
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	90 93 8a 01 	sts	0x018A, r25
     bd6:	80 93 89 01 	sts	0x0189, r24
     bda:	82 e4       	ldi	r24, 0x42	; 66
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	90 93 70 01 	sts	0x0170, r25
     be2:	80 93 6f 01 	sts	0x016F, r24
     be6:	8a e3       	ldi	r24, 0x3A	; 58
     be8:	91 e0       	ldi	r25, 0x01	; 1
     bea:	90 93 72 01 	sts	0x0172, r25
     bee:	80 93 71 01 	sts	0x0171, r24
     bf2:	8e e3       	ldi	r24, 0x3E	; 62
     bf4:	91 e0       	ldi	r25, 0x01	; 1
     bf6:	90 93 84 01 	sts	0x0184, r25
     bfa:	80 93 83 01 	sts	0x0183, r24
                        break;
     bfe:	51 c0       	rjmp	.+162    	; 0xca2 <__stack+0x1a3>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     c00:	8a e3       	ldi	r24, 0x3A	; 58
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	90 93 8a 01 	sts	0x018A, r25
     c08:	80 93 89 01 	sts	0x0189, r24
     c0c:	8e e3       	ldi	r24, 0x3E	; 62
     c0e:	91 e0       	ldi	r25, 0x01	; 1
     c10:	90 93 70 01 	sts	0x0170, r25
     c14:	80 93 6f 01 	sts	0x016F, r24
     c18:	86 e3       	ldi	r24, 0x36	; 54
     c1a:	91 e0       	ldi	r25, 0x01	; 1
     c1c:	90 93 72 01 	sts	0x0172, r25
     c20:	80 93 71 01 	sts	0x0171, r24
     c24:	82 e4       	ldi	r24, 0x42	; 66
     c26:	91 e0       	ldi	r25, 0x01	; 1
     c28:	90 93 84 01 	sts	0x0184, r25
     c2c:	80 93 83 01 	sts	0x0183, r24
                        break;
     c30:	38 c0       	rjmp	.+112    	; 0xca2 <__stack+0x1a3>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     c32:	86 e3       	ldi	r24, 0x36	; 54
     c34:	91 e0       	ldi	r25, 0x01	; 1
     c36:	90 93 8a 01 	sts	0x018A, r25
     c3a:	80 93 89 01 	sts	0x0189, r24
     c3e:	8e e3       	ldi	r24, 0x3E	; 62
     c40:	91 e0       	ldi	r25, 0x01	; 1
     c42:	90 93 70 01 	sts	0x0170, r25
     c46:	80 93 6f 01 	sts	0x016F, r24
     c4a:	8a e3       	ldi	r24, 0x3A	; 58
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	90 93 72 01 	sts	0x0172, r25
     c52:	80 93 71 01 	sts	0x0171, r24
     c56:	82 e4       	ldi	r24, 0x42	; 66
     c58:	91 e0       	ldi	r25, 0x01	; 1
     c5a:	90 93 84 01 	sts	0x0184, r25
     c5e:	80 93 83 01 	sts	0x0183, r24
                        break;
     c62:	1f c0       	rjmp	.+62     	; 0xca2 <__stack+0x1a3>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     c64:	82 e4       	ldi	r24, 0x42	; 66
     c66:	91 e0       	ldi	r25, 0x01	; 1
     c68:	90 93 8a 01 	sts	0x018A, r25
     c6c:	80 93 89 01 	sts	0x0189, r24
     c70:	8e e3       	ldi	r24, 0x3E	; 62
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	90 93 70 01 	sts	0x0170, r25
     c78:	80 93 6f 01 	sts	0x016F, r24
     c7c:	8a e3       	ldi	r24, 0x3A	; 58
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	90 93 72 01 	sts	0x0172, r25
     c84:	80 93 71 01 	sts	0x0171, r24
     c88:	86 e3       	ldi	r24, 0x36	; 54
     c8a:	91 e0       	ldi	r25, 0x01	; 1
     c8c:	90 93 84 01 	sts	0x0184, r25
     c90:	80 93 83 01 	sts	0x0183, r24
                        flag_no_good_stars = 1;
     c94:	81 e0       	ldi	r24, 0x01	; 1
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	90 93 0d 01 	sts	0x010D, r25
     c9c:	80 93 0c 01 	sts	0x010C, r24
                        break;
     ca0:	06 c0       	rjmp	.+12     	; 0xcae <__stack+0x1af>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     ca2:	80 91 0c 01 	lds	r24, 0x010C
     ca6:	90 91 0d 01 	lds	r25, 0x010D
     caa:	89 2b       	or	r24, r25
     cac:	d1 f0       	breq	.+52     	; 0xce2 <__stack+0x1e3>
        *orientation = orientation_prev;
     cae:	80 91 1c 01 	lds	r24, 0x011C
     cb2:	90 91 1d 01 	lds	r25, 0x011D
     cb6:	ef 8d       	ldd	r30, Y+31	; 0x1f
     cb8:	f8 a1       	ldd	r31, Y+32	; 0x20
     cba:	91 83       	std	Z+1, r25	; 0x01
     cbc:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     cbe:	80 91 1a 01 	lds	r24, 0x011A
     cc2:	90 91 1b 01 	lds	r25, 0x011B
     cc6:	ef 81       	ldd	r30, Y+7	; 0x07
     cc8:	f8 85       	ldd	r31, Y+8	; 0x08
     cca:	91 83       	std	Z+1, r25	; 0x01
     ccc:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     cce:	80 91 18 01 	lds	r24, 0x0118
     cd2:	90 91 19 01 	lds	r25, 0x0119
     cd6:	ed 8d       	ldd	r30, Y+29	; 0x1d
     cd8:	fe 8d       	ldd	r31, Y+30	; 0x1e
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
        return 0;
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	e8 c3       	rjmp	.+2000   	; 0x14b2 <__stack+0x9b3>
    }
    
    
    float scale = P_vertical/max_distance;
     ce2:	26 2d       	mov	r18, r6
     ce4:	37 2d       	mov	r19, r7
     ce6:	48 2d       	mov	r20, r8
     ce8:	59 2d       	mov	r21, r9
     cea:	60 e0       	ldi	r22, 0x00	; 0
     cec:	70 e0       	ldi	r23, 0x00	; 0
     cee:	88 ee       	ldi	r24, 0xE8	; 232
     cf0:	91 e4       	ldi	r25, 0x41	; 65
     cf2:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divsf3>
     cf6:	26 2e       	mov	r2, r22
     cf8:	37 2e       	mov	r3, r23
     cfa:	48 2e       	mov	r4, r24
     cfc:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     cfe:	e0 90 89 01 	lds	r14, 0x0189
     d02:	f0 90 8a 01 	lds	r15, 0x018A
     d06:	0f 2e       	mov	r0, r31
     d08:	fb e7       	ldi	r31, 0x7B	; 123
     d0a:	8f 2e       	mov	r8, r31
     d0c:	f1 e0       	ldi	r31, 0x01	; 1
     d0e:	9f 2e       	mov	r9, r31
     d10:	f0 2d       	mov	r31, r0
     d12:	f7 01       	movw	r30, r14
     d14:	60 81       	ld	r22, Z
     d16:	71 81       	ldd	r23, Z+1	; 0x01
     d18:	88 27       	eor	r24, r24
     d1a:	77 fd       	sbrc	r23, 7
     d1c:	80 95       	com	r24
     d1e:	98 2f       	mov	r25, r24
     d20:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     d24:	22 2d       	mov	r18, r2
     d26:	33 2d       	mov	r19, r3
     d28:	44 2d       	mov	r20, r4
     d2a:	55 2d       	mov	r21, r5
     d2c:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     d30:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     d34:	f4 01       	movw	r30, r8
     d36:	71 83       	std	Z+1, r23	; 0x01
     d38:	60 83       	st	Z, r22
     d3a:	0f 2e       	mov	r0, r31
     d3c:	fd e7       	ldi	r31, 0x7D	; 125
     d3e:	6f 2e       	mov	r6, r31
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	7f 2e       	mov	r7, r31
     d44:	f0 2d       	mov	r31, r0
     d46:	f7 01       	movw	r30, r14
     d48:	62 81       	ldd	r22, Z+2	; 0x02
     d4a:	73 81       	ldd	r23, Z+3	; 0x03
     d4c:	88 27       	eor	r24, r24
     d4e:	77 fd       	sbrc	r23, 7
     d50:	80 95       	com	r24
     d52:	98 2f       	mov	r25, r24
     d54:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     d58:	22 2d       	mov	r18, r2
     d5a:	33 2d       	mov	r19, r3
     d5c:	44 2d       	mov	r20, r4
     d5e:	55 2d       	mov	r21, r5
     d60:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     d64:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     d68:	f3 01       	movw	r30, r6
     d6a:	71 83       	std	Z+1, r23	; 0x01
     d6c:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     d6e:	00 91 71 01 	lds	r16, 0x0171
     d72:	10 91 72 01 	lds	r17, 0x0172
     d76:	0f 2e       	mov	r0, r31
     d78:	fb e6       	ldi	r31, 0x6B	; 107
     d7a:	af 2e       	mov	r10, r31
     d7c:	f1 e0       	ldi	r31, 0x01	; 1
     d7e:	bf 2e       	mov	r11, r31
     d80:	f0 2d       	mov	r31, r0
     d82:	f8 01       	movw	r30, r16
     d84:	60 81       	ld	r22, Z
     d86:	71 81       	ldd	r23, Z+1	; 0x01
     d88:	88 27       	eor	r24, r24
     d8a:	77 fd       	sbrc	r23, 7
     d8c:	80 95       	com	r24
     d8e:	98 2f       	mov	r25, r24
     d90:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     d94:	22 2d       	mov	r18, r2
     d96:	33 2d       	mov	r19, r3
     d98:	44 2d       	mov	r20, r4
     d9a:	55 2d       	mov	r21, r5
     d9c:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     da0:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     da4:	f5 01       	movw	r30, r10
     da6:	71 83       	std	Z+1, r23	; 0x01
     da8:	60 83       	st	Z, r22
     daa:	0f 2e       	mov	r0, r31
     dac:	fd e6       	ldi	r31, 0x6D	; 109
     dae:	cf 2e       	mov	r12, r31
     db0:	f1 e0       	ldi	r31, 0x01	; 1
     db2:	df 2e       	mov	r13, r31
     db4:	f0 2d       	mov	r31, r0
     db6:	f8 01       	movw	r30, r16
     db8:	62 81       	ldd	r22, Z+2	; 0x02
     dba:	73 81       	ldd	r23, Z+3	; 0x03
     dbc:	88 27       	eor	r24, r24
     dbe:	77 fd       	sbrc	r23, 7
     dc0:	80 95       	com	r24
     dc2:	98 2f       	mov	r25, r24
     dc4:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     dc8:	22 2d       	mov	r18, r2
     dca:	33 2d       	mov	r19, r3
     dcc:	44 2d       	mov	r20, r4
     dce:	55 2d       	mov	r21, r5
     dd0:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     dd4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     dd8:	f6 01       	movw	r30, r12
     dda:	71 83       	std	Z+1, r23	; 0x01
     ddc:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     dde:	f7 01       	movw	r30, r14
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	f8 01       	movw	r30, r16
     de6:	80 81       	ld	r24, Z
     de8:	91 81       	ldd	r25, Z+1	; 0x01
     dea:	68 0f       	add	r22, r24
     dec:	79 1f       	adc	r23, r25
     dee:	88 27       	eor	r24, r24
     df0:	77 fd       	sbrc	r23, 7
     df2:	80 95       	com	r24
     df4:	98 2f       	mov	r25, r24
     df6:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	5f e3       	ldi	r21, 0x3F	; 63
     e02:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     e06:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     e0a:	e9 a1       	ldd	r30, Y+33	; 0x21
     e0c:	fa a1       	ldd	r31, Y+34	; 0x22
     e0e:	71 83       	std	Z+1, r23	; 0x01
     e10:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     e12:	a0 91 89 01 	lds	r26, 0x0189
     e16:	b0 91 8a 01 	lds	r27, 0x018A
     e1a:	e0 91 71 01 	lds	r30, 0x0171
     e1e:	f0 91 72 01 	lds	r31, 0x0172
     e22:	12 96       	adiw	r26, 0x02	; 2
     e24:	6d 91       	ld	r22, X+
     e26:	7c 91       	ld	r23, X
     e28:	13 97       	sbiw	r26, 0x03	; 3
     e2a:	82 81       	ldd	r24, Z+2	; 0x02
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	68 0f       	add	r22, r24
     e30:	79 1f       	adc	r23, r25
     e32:	88 27       	eor	r24, r24
     e34:	77 fd       	sbrc	r23, 7
     e36:	80 95       	com	r24
     e38:	98 2f       	mov	r25, r24
     e3a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	30 e0       	ldi	r19, 0x00	; 0
     e42:	40 e0       	ldi	r20, 0x00	; 0
     e44:	5f e3       	ldi	r21, 0x3F	; 63
     e46:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     e4a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     e4e:	eb a1       	ldd	r30, Y+35	; 0x23
     e50:	fc a1       	ldd	r31, Y+36	; 0x24
     e52:	71 83       	std	Z+1, r23	; 0x01
     e54:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     e56:	f4 01       	movw	r30, r8
     e58:	60 81       	ld	r22, Z
     e5a:	71 81       	ldd	r23, Z+1	; 0x01
     e5c:	f5 01       	movw	r30, r10
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	68 0f       	add	r22, r24
     e64:	79 1f       	adc	r23, r25
     e66:	88 27       	eor	r24, r24
     e68:	77 fd       	sbrc	r23, 7
     e6a:	80 95       	com	r24
     e6c:	98 2f       	mov	r25, r24
     e6e:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	5f e3       	ldi	r21, 0x3F	; 63
     e7a:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     e7e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     e82:	1b 01       	movw	r2, r22
     e84:	70 93 90 01 	sts	0x0190, r23
     e88:	60 93 8f 01 	sts	0x018F, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     e8c:	f3 01       	movw	r30, r6
     e8e:	60 81       	ld	r22, Z
     e90:	71 81       	ldd	r23, Z+1	; 0x01
     e92:	f6 01       	movw	r30, r12
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	68 0f       	add	r22, r24
     e9a:	79 1f       	adc	r23, r25
     e9c:	88 27       	eor	r24, r24
     e9e:	77 fd       	sbrc	r23, 7
     ea0:	80 95       	com	r24
     ea2:	98 2f       	mov	r25, r24
     ea4:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	5f e3       	ldi	r21, 0x3F	; 63
     eb0:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
     eb4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
     eb8:	8b 01       	movw	r16, r22
     eba:	70 93 92 01 	sts	0x0192, r23
     ebe:	60 93 91 01 	sts	0x0191, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     ec2:	22 9c       	mul	r2, r2
     ec4:	b0 01       	movw	r22, r0
     ec6:	23 9c       	mul	r2, r3
     ec8:	70 0d       	add	r23, r0
     eca:	70 0d       	add	r23, r0
     ecc:	11 24       	eor	r1, r1
     ece:	00 9f       	mul	r16, r16
     ed0:	c0 01       	movw	r24, r0
     ed2:	01 9f       	mul	r16, r17
     ed4:	90 0d       	add	r25, r0
     ed6:	90 0d       	add	r25, r0
     ed8:	11 24       	eor	r1, r1
     eda:	68 0f       	add	r22, r24
     edc:	79 1f       	adc	r23, r25
     ede:	88 27       	eor	r24, r24
     ee0:	77 fd       	sbrc	r23, 7
     ee2:	80 95       	com	r24
     ee4:	98 2f       	mov	r25, r24
     ee6:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     eea:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
     eee:	2b 01       	movw	r4, r22
     ef0:	3c 01       	movw	r6, r24
     ef2:	60 93 73 01 	sts	0x0173, r22
     ef6:	70 93 74 01 	sts	0x0174, r23
     efa:	80 93 75 01 	sts	0x0175, r24
     efe:	90 93 76 01 	sts	0x0176, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     f02:	80 91 71 01 	lds	r24, 0x0171
     f06:	90 91 72 01 	lds	r25, 0x0172
     f0a:	9a 83       	std	Y+2, r25	; 0x02
     f0c:	89 83       	std	Y+1, r24	; 0x01
     f0e:	e0 91 89 01 	lds	r30, 0x0189
     f12:	f0 91 8a 01 	lds	r31, 0x018A
     f16:	fe 83       	std	Y+6, r31	; 0x06
     f18:	ed 83       	std	Y+5, r30	; 0x05
     f1a:	fc 01       	movw	r30, r24
     f1c:	60 81       	ld	r22, Z
     f1e:	71 81       	ldd	r23, Z+1	; 0x01
     f20:	ed 81       	ldd	r30, Y+5	; 0x05
     f22:	fe 81       	ldd	r31, Y+6	; 0x06
     f24:	80 81       	ld	r24, Z
     f26:	91 81       	ldd	r25, Z+1	; 0x01
     f28:	68 1b       	sub	r22, r24
     f2a:	79 0b       	sbc	r23, r25
     f2c:	88 27       	eor	r24, r24
     f2e:	77 fd       	sbrc	r23, 7
     f30:	80 95       	com	r24
     f32:	98 2f       	mov	r25, r24
     f34:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     f38:	6b 01       	movw	r12, r22
     f3a:	7c 01       	movw	r14, r24
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	62 81       	ldd	r22, Z+2	; 0x02
     f42:	73 81       	ldd	r23, Z+3	; 0x03
     f44:	ed 81       	ldd	r30, Y+5	; 0x05
     f46:	fe 81       	ldd	r31, Y+6	; 0x06
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	68 1b       	sub	r22, r24
     f4e:	79 0b       	sbc	r23, r25
     f50:	88 27       	eor	r24, r24
     f52:	77 fd       	sbrc	r23, 7
     f54:	80 95       	com	r24
     f56:	98 2f       	mov	r25, r24
     f58:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     f5c:	a7 01       	movw	r20, r14
     f5e:	96 01       	movw	r18, r12
     f60:	0e 94 f7 19 	call	0x33ee	; 0x33ee <atan2>
     f64:	4b 01       	movw	r8, r22
     f66:	5c 01       	movw	r10, r24
     f68:	60 93 7f 01 	sts	0x017F, r22
     f6c:	70 93 80 01 	sts	0x0180, r23
     f70:	80 93 81 01 	sts	0x0181, r24
     f74:	90 93 82 01 	sts	0x0182, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     f78:	ed 81       	ldd	r30, Y+5	; 0x05
     f7a:	fe 81       	ldd	r31, Y+6	; 0x06
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	e9 81       	ldd	r30, Y+1	; 0x01
     f82:	fa 81       	ldd	r31, Y+2	; 0x02
     f84:	80 81       	ld	r24, Z
     f86:	91 81       	ldd	r25, Z+1	; 0x01
     f88:	68 1b       	sub	r22, r24
     f8a:	79 0b       	sbc	r23, r25
     f8c:	88 27       	eor	r24, r24
     f8e:	77 fd       	sbrc	r23, 7
     f90:	80 95       	com	r24
     f92:	98 2f       	mov	r25, r24
     f94:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     f98:	6b 01       	movw	r12, r22
     f9a:	7c 01       	movw	r14, r24
     f9c:	ed 81       	ldd	r30, Y+5	; 0x05
     f9e:	fe 81       	ldd	r31, Y+6	; 0x06
     fa0:	62 81       	ldd	r22, Z+2	; 0x02
     fa2:	73 81       	ldd	r23, Z+3	; 0x03
     fa4:	e9 81       	ldd	r30, Y+1	; 0x01
     fa6:	fa 81       	ldd	r31, Y+2	; 0x02
     fa8:	82 81       	ldd	r24, Z+2	; 0x02
     faa:	93 81       	ldd	r25, Z+3	; 0x03
     fac:	68 1b       	sub	r22, r24
     fae:	79 0b       	sbc	r23, r25
     fb0:	88 27       	eor	r24, r24
     fb2:	77 fd       	sbrc	r23, 7
     fb4:	80 95       	com	r24
     fb6:	98 2f       	mov	r25, r24
     fb8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     fbc:	a7 01       	movw	r20, r14
     fbe:	96 01       	movw	r18, r12
     fc0:	0e 94 f7 19 	call	0x33ee	; 0x33ee <atan2>
     fc4:	6b 01       	movw	r12, r22
     fc6:	7c 01       	movw	r14, r24
     fc8:	60 93 77 01 	sts	0x0177, r22
     fcc:	70 93 78 01 	sts	0x0178, r23
     fd0:	80 93 79 01 	sts	0x0179, r24
     fd4:	90 93 7a 01 	sts	0x017A, r25
    alpha = -atan2(S0[0],S0[1]);
     fd8:	b8 01       	movw	r22, r16
     fda:	88 27       	eor	r24, r24
     fdc:	77 fd       	sbrc	r23, 7
     fde:	80 95       	com	r24
     fe0:	98 2f       	mov	r25, r24
     fe2:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     fe6:	69 83       	std	Y+1, r22	; 0x01
     fe8:	7a 83       	std	Y+2, r23	; 0x02
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	9c 83       	std	Y+4, r25	; 0x04
     fee:	b1 01       	movw	r22, r2
     ff0:	88 27       	eor	r24, r24
     ff2:	77 fd       	sbrc	r23, 7
     ff4:	80 95       	com	r24
     ff6:	98 2f       	mov	r25, r24
     ff8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
     ffc:	29 81       	ldd	r18, Y+1	; 0x01
     ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    1000:	4b 81       	ldd	r20, Y+3	; 0x03
    1002:	5c 81       	ldd	r21, Y+4	; 0x04
    1004:	0e 94 f7 19 	call	0x33ee	; 0x33ee <atan2>
    1008:	9b 01       	movw	r18, r22
    100a:	ac 01       	movw	r20, r24
    100c:	dc 01       	movw	r26, r24
    100e:	cb 01       	movw	r24, r22
    1010:	b0 58       	subi	r27, 0x80	; 128
    1012:	80 93 93 01 	sts	0x0193, r24
    1016:	90 93 94 01 	sts	0x0194, r25
    101a:	a0 93 95 01 	sts	0x0195, r26
    101e:	b0 93 96 01 	sts	0x0196, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    1022:	77 fa       	bst	r7, 7
    1024:	70 94       	com	r7
    1026:	77 f8       	bld	r7, 7
    1028:	70 94       	com	r7
    102a:	c5 01       	movw	r24, r10
    102c:	b4 01       	movw	r22, r8
    102e:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1032:	86 2e       	mov	r8, r22
    1034:	97 2e       	mov	r9, r23
    1036:	a8 2e       	mov	r10, r24
    1038:	b9 2e       	mov	r11, r25
    103a:	0e 94 4e 1a 	call	0x349c	; 0x349c <cos>
    103e:	9b 01       	movw	r18, r22
    1040:	ac 01       	movw	r20, r24
    1042:	c3 01       	movw	r24, r6
    1044:	b2 01       	movw	r22, r4
    1046:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	a9 01       	movw	r20, r18
    1050:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1054:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    1058:	8b 01       	movw	r16, r22
    105a:	70 93 15 01 	sts	0x0115, r23
    105e:	60 93 14 01 	sts	0x0114, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    1062:	68 2d       	mov	r22, r8
    1064:	79 2d       	mov	r23, r9
    1066:	8a 2d       	mov	r24, r10
    1068:	9b 2d       	mov	r25, r11
    106a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <sin>
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	c3 01       	movw	r24, r6
    1074:	b2 01       	movw	r22, r4
    1076:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    107a:	20 e0       	ldi	r18, 0x00	; 0
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	a9 01       	movw	r20, r18
    1080:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1084:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    1088:	70 93 13 01 	sts	0x0113, r23
    108c:	60 93 12 01 	sts	0x0112, r22
    orientation_current = (theta2) * 180/M_PI;
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
    1094:	44 e3       	ldi	r20, 0x34	; 52
    1096:	53 e4       	ldi	r21, 0x43	; 67
    1098:	c7 01       	movw	r24, r14
    109a:	b6 01       	movw	r22, r12
    109c:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    10a0:	2b ed       	ldi	r18, 0xDB	; 219
    10a2:	3f e0       	ldi	r19, 0x0F	; 15
    10a4:	49 e4       	ldi	r20, 0x49	; 73
    10a6:	50 e4       	ldi	r21, 0x40	; 64
    10a8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divsf3>
    10ac:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    10b0:	70 93 17 01 	sts	0x0117, r23
    10b4:	60 93 16 01 	sts	0x0116, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    10b8:	c0 90 0e 01 	lds	r12, 0x010E
    10bc:	d0 90 0f 01 	lds	r13, 0x010F
    10c0:	e0 90 10 01 	lds	r14, 0x0110
    10c4:	f0 90 11 01 	lds	r15, 0x0111
    10c8:	60 91 1a 01 	lds	r22, 0x011A
    10cc:	70 91 1b 01 	lds	r23, 0x011B
    10d0:	88 27       	eor	r24, r24
    10d2:	77 fd       	sbrc	r23, 7
    10d4:	80 95       	com	r24
    10d6:	98 2f       	mov	r25, r24
    10d8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    10dc:	a7 01       	movw	r20, r14
    10de:	96 01       	movw	r18, r12
    10e0:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    10e4:	4b 01       	movw	r8, r22
    10e6:	5c 01       	movw	r10, r24
    10e8:	a7 01       	movw	r20, r14
    10ea:	96 01       	movw	r18, r12
    10ec:	60 e0       	ldi	r22, 0x00	; 0
    10ee:	70 e0       	ldi	r23, 0x00	; 0
    10f0:	80 e8       	ldi	r24, 0x80	; 128
    10f2:	9f e3       	ldi	r25, 0x3F	; 63
    10f4:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    10f8:	6b 01       	movw	r12, r22
    10fa:	7c 01       	movw	r14, r24
    10fc:	b8 01       	movw	r22, r16
    10fe:	88 27       	eor	r24, r24
    1100:	77 fd       	sbrc	r23, 7
    1102:	80 95       	com	r24
    1104:	98 2f       	mov	r25, r24
    1106:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	c7 01       	movw	r24, r14
    1110:	b6 01       	movw	r22, r12
    1112:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    1116:	9b 01       	movw	r18, r22
    1118:	ac 01       	movw	r20, r24
    111a:	c5 01       	movw	r24, r10
    111c:	b4 01       	movw	r22, r8
    111e:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1122:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    1126:	ef 81       	ldd	r30, Y+7	; 0x07
    1128:	f8 85       	ldd	r31, Y+8	; 0x08
    112a:	71 83       	std	Z+1, r23	; 0x01
    112c:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    112e:	c0 90 0e 01 	lds	r12, 0x010E
    1132:	d0 90 0f 01 	lds	r13, 0x010F
    1136:	e0 90 10 01 	lds	r14, 0x0110
    113a:	f0 90 11 01 	lds	r15, 0x0111
    113e:	60 91 18 01 	lds	r22, 0x0118
    1142:	70 91 19 01 	lds	r23, 0x0119
    1146:	88 27       	eor	r24, r24
    1148:	77 fd       	sbrc	r23, 7
    114a:	80 95       	com	r24
    114c:	98 2f       	mov	r25, r24
    114e:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1152:	a7 01       	movw	r20, r14
    1154:	96 01       	movw	r18, r12
    1156:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    115a:	4b 01       	movw	r8, r22
    115c:	5c 01       	movw	r10, r24
    115e:	a7 01       	movw	r20, r14
    1160:	96 01       	movw	r18, r12
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	80 e8       	ldi	r24, 0x80	; 128
    1168:	9f e3       	ldi	r25, 0x3F	; 63
    116a:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    116e:	6b 01       	movw	r12, r22
    1170:	7c 01       	movw	r14, r24
    1172:	60 91 12 01 	lds	r22, 0x0112
    1176:	70 91 13 01 	lds	r23, 0x0113
    117a:	88 27       	eor	r24, r24
    117c:	77 fd       	sbrc	r23, 7
    117e:	80 95       	com	r24
    1180:	98 2f       	mov	r25, r24
    1182:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1186:	9b 01       	movw	r18, r22
    1188:	ac 01       	movw	r20, r24
    118a:	c7 01       	movw	r24, r14
    118c:	b6 01       	movw	r22, r12
    118e:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    1192:	9b 01       	movw	r18, r22
    1194:	ac 01       	movw	r20, r24
    1196:	c5 01       	movw	r24, r10
    1198:	b4 01       	movw	r22, r8
    119a:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    119e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    11a2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    11a4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    11a6:	71 83       	std	Z+1, r23	; 0x01
    11a8:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    11aa:	c0 90 0e 01 	lds	r12, 0x010E
    11ae:	d0 90 0f 01 	lds	r13, 0x010F
    11b2:	e0 90 10 01 	lds	r14, 0x0110
    11b6:	f0 90 11 01 	lds	r15, 0x0111
    11ba:	60 91 1c 01 	lds	r22, 0x011C
    11be:	70 91 1d 01 	lds	r23, 0x011D
    11c2:	88 27       	eor	r24, r24
    11c4:	77 fd       	sbrc	r23, 7
    11c6:	80 95       	com	r24
    11c8:	98 2f       	mov	r25, r24
    11ca:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    11ce:	a7 01       	movw	r20, r14
    11d0:	96 01       	movw	r18, r12
    11d2:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    11d6:	4b 01       	movw	r8, r22
    11d8:	5c 01       	movw	r10, r24
    11da:	a7 01       	movw	r20, r14
    11dc:	96 01       	movw	r18, r12
    11de:	60 e0       	ldi	r22, 0x00	; 0
    11e0:	70 e0       	ldi	r23, 0x00	; 0
    11e2:	80 e8       	ldi	r24, 0x80	; 128
    11e4:	9f e3       	ldi	r25, 0x3F	; 63
    11e6:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    11ea:	6b 01       	movw	r12, r22
    11ec:	7c 01       	movw	r14, r24
    11ee:	60 91 16 01 	lds	r22, 0x0116
    11f2:	70 91 17 01 	lds	r23, 0x0117
    11f6:	88 27       	eor	r24, r24
    11f8:	77 fd       	sbrc	r23, 7
    11fa:	80 95       	com	r24
    11fc:	98 2f       	mov	r25, r24
    11fe:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1202:	9b 01       	movw	r18, r22
    1204:	ac 01       	movw	r20, r24
    1206:	c7 01       	movw	r24, r14
    1208:	b6 01       	movw	r22, r12
    120a:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    120e:	9b 01       	movw	r18, r22
    1210:	ac 01       	movw	r20, r24
    1212:	c5 01       	movw	r24, r10
    1214:	b4 01       	movw	r22, r8
    1216:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    121a:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    121e:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1220:	f8 a1       	ldd	r31, Y+32	; 0x20
    1222:	71 83       	std	Z+1, r23	; 0x01
    1224:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    1226:	ef 81       	ldd	r30, Y+7	; 0x07
    1228:	f8 85       	ldd	r31, Y+8	; 0x08
    122a:	80 81       	ld	r24, Z
    122c:	91 81       	ldd	r25, Z+1	; 0x01
    122e:	90 93 1b 01 	sts	0x011B, r25
    1232:	80 93 1a 01 	sts	0x011A, r24
    y_robot_prev     = *y_robot;
    1236:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1238:	fe 8d       	ldd	r31, Y+30	; 0x1e
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	90 93 19 01 	sts	0x0119, r25
    1242:	80 93 18 01 	sts	0x0118, r24
    orientation_prev = *orientation;
    1246:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1248:	f8 a1       	ldd	r31, Y+32	; 0x20
    124a:	80 81       	ld	r24, Z
    124c:	91 81       	ldd	r25, Z+1	; 0x01
    124e:	90 93 1d 01 	sts	0x011D, r25
    1252:	80 93 1c 01 	sts	0x011C, r24
    
    return 1;
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	2c c1       	rjmp	.+600    	; 0x14b2 <__stack+0x9b3>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    125a:	e0 91 02 01 	lds	r30, 0x0102
    125e:	f0 91 03 01 	lds	r31, 0x0103
    1262:	4c 01       	movw	r8, r24
    1264:	8e 1a       	sub	r8, r30
    1266:	9f 0a       	sbc	r9, r31
    1268:	90 92 43 01 	sts	0x0143, r9
    126c:	80 92 42 01 	sts	0x0142, r8
    1270:	80 91 00 01 	lds	r24, 0x0100
    1274:	90 91 01 01 	lds	r25, 0x0101
    1278:	08 1b       	sub	r16, r24
    127a:	19 0b       	sbc	r17, r25
    127c:	10 93 45 01 	sts	0x0145, r17
    1280:	00 93 44 01 	sts	0x0144, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    1284:	3b 01       	movw	r6, r22
    1286:	6e 1a       	sub	r6, r30
    1288:	7f 0a       	sbc	r7, r31
    128a:	70 92 3f 01 	sts	0x013F, r7
    128e:	60 92 3e 01 	sts	0x013E, r6
    1292:	e8 1a       	sub	r14, r24
    1294:	f9 0a       	sbc	r15, r25
    1296:	f0 92 41 01 	sts	0x0141, r15
    129a:	e0 92 40 01 	sts	0x0140, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    129e:	2a 01       	movw	r4, r20
    12a0:	4e 1a       	sub	r4, r30
    12a2:	5f 0a       	sbc	r5, r31
    12a4:	50 92 3b 01 	sts	0x013B, r5
    12a8:	40 92 3a 01 	sts	0x013A, r4
    12ac:	16 01       	movw	r2, r12
    12ae:	28 1a       	sub	r2, r24
    12b0:	39 0a       	sbc	r3, r25
    12b2:	30 92 3d 01 	sts	0x013D, r3
    12b6:	20 92 3c 01 	sts	0x013C, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    12ba:	69 01       	movw	r12, r18
    12bc:	ce 1a       	sub	r12, r30
    12be:	df 0a       	sbc	r13, r31
    12c0:	d0 92 37 01 	sts	0x0137, r13
    12c4:	c0 92 36 01 	sts	0x0136, r12
    12c8:	a8 1a       	sub	r10, r24
    12ca:	b9 0a       	sbc	r11, r25
    12cc:	b0 92 39 01 	sts	0x0139, r11
    12d0:	a0 92 38 01 	sts	0x0138, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    12d4:	93 01       	movw	r18, r6
    12d6:	28 19       	sub	r18, r8
    12d8:	39 09       	sbc	r19, r9
    12da:	c7 01       	movw	r24, r14
    12dc:	80 1b       	sub	r24, r16
    12de:	91 0b       	sbc	r25, r17
    12e0:	22 9f       	mul	r18, r18
    12e2:	b0 01       	movw	r22, r0
    12e4:	23 9f       	mul	r18, r19
    12e6:	70 0d       	add	r23, r0
    12e8:	70 0d       	add	r23, r0
    12ea:	11 24       	eor	r1, r1
    12ec:	88 9f       	mul	r24, r24
    12ee:	90 01       	movw	r18, r0
    12f0:	89 9f       	mul	r24, r25
    12f2:	30 0d       	add	r19, r0
    12f4:	30 0d       	add	r19, r0
    12f6:	11 24       	eor	r1, r1
    12f8:	62 0f       	add	r22, r18
    12fa:	73 1f       	adc	r23, r19
    12fc:	88 27       	eor	r24, r24
    12fe:	77 fd       	sbrc	r23, 7
    1300:	80 95       	com	r24
    1302:	98 2f       	mov	r25, r24
    1304:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1308:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    130c:	60 93 1e 01 	sts	0x011E, r22
    1310:	70 93 1f 01 	sts	0x011F, r23
    1314:	80 93 20 01 	sts	0x0120, r24
    1318:	90 93 21 01 	sts	0x0121, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    131c:	92 01       	movw	r18, r4
    131e:	28 19       	sub	r18, r8
    1320:	39 09       	sbc	r19, r9
    1322:	c1 01       	movw	r24, r2
    1324:	80 1b       	sub	r24, r16
    1326:	91 0b       	sbc	r25, r17
    1328:	22 9f       	mul	r18, r18
    132a:	b0 01       	movw	r22, r0
    132c:	23 9f       	mul	r18, r19
    132e:	70 0d       	add	r23, r0
    1330:	70 0d       	add	r23, r0
    1332:	11 24       	eor	r1, r1
    1334:	88 9f       	mul	r24, r24
    1336:	90 01       	movw	r18, r0
    1338:	89 9f       	mul	r24, r25
    133a:	30 0d       	add	r19, r0
    133c:	30 0d       	add	r19, r0
    133e:	11 24       	eor	r1, r1
    1340:	62 0f       	add	r22, r18
    1342:	73 1f       	adc	r23, r19
    1344:	88 27       	eor	r24, r24
    1346:	77 fd       	sbrc	r23, 7
    1348:	80 95       	com	r24
    134a:	98 2f       	mov	r25, r24
    134c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1350:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    1354:	60 93 22 01 	sts	0x0122, r22
    1358:	70 93 23 01 	sts	0x0123, r23
    135c:	80 93 24 01 	sts	0x0124, r24
    1360:	90 93 25 01 	sts	0x0125, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    1364:	96 01       	movw	r18, r12
    1366:	28 19       	sub	r18, r8
    1368:	39 09       	sbc	r19, r9
    136a:	c5 01       	movw	r24, r10
    136c:	80 1b       	sub	r24, r16
    136e:	91 0b       	sbc	r25, r17
    1370:	22 9f       	mul	r18, r18
    1372:	b0 01       	movw	r22, r0
    1374:	23 9f       	mul	r18, r19
    1376:	70 0d       	add	r23, r0
    1378:	70 0d       	add	r23, r0
    137a:	11 24       	eor	r1, r1
    137c:	88 9f       	mul	r24, r24
    137e:	90 01       	movw	r18, r0
    1380:	89 9f       	mul	r24, r25
    1382:	30 0d       	add	r19, r0
    1384:	30 0d       	add	r19, r0
    1386:	11 24       	eor	r1, r1
    1388:	62 0f       	add	r22, r18
    138a:	73 1f       	adc	r23, r19
    138c:	88 27       	eor	r24, r24
    138e:	77 fd       	sbrc	r23, 7
    1390:	80 95       	com	r24
    1392:	98 2f       	mov	r25, r24
    1394:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1398:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    139c:	60 93 26 01 	sts	0x0126, r22
    13a0:	70 93 27 01 	sts	0x0127, r23
    13a4:	80 93 28 01 	sts	0x0128, r24
    13a8:	90 93 29 01 	sts	0x0129, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    13ac:	92 01       	movw	r18, r4
    13ae:	26 19       	sub	r18, r6
    13b0:	37 09       	sbc	r19, r7
    13b2:	c1 01       	movw	r24, r2
    13b4:	8e 19       	sub	r24, r14
    13b6:	9f 09       	sbc	r25, r15
    13b8:	22 9f       	mul	r18, r18
    13ba:	b0 01       	movw	r22, r0
    13bc:	23 9f       	mul	r18, r19
    13be:	70 0d       	add	r23, r0
    13c0:	70 0d       	add	r23, r0
    13c2:	11 24       	eor	r1, r1
    13c4:	88 9f       	mul	r24, r24
    13c6:	90 01       	movw	r18, r0
    13c8:	89 9f       	mul	r24, r25
    13ca:	30 0d       	add	r19, r0
    13cc:	30 0d       	add	r19, r0
    13ce:	11 24       	eor	r1, r1
    13d0:	62 0f       	add	r22, r18
    13d2:	73 1f       	adc	r23, r19
    13d4:	88 27       	eor	r24, r24
    13d6:	77 fd       	sbrc	r23, 7
    13d8:	80 95       	com	r24
    13da:	98 2f       	mov	r25, r24
    13dc:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    13e0:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    13e4:	60 93 2a 01 	sts	0x012A, r22
    13e8:	70 93 2b 01 	sts	0x012B, r23
    13ec:	80 93 2c 01 	sts	0x012C, r24
    13f0:	90 93 2d 01 	sts	0x012D, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    13f4:	96 01       	movw	r18, r12
    13f6:	26 19       	sub	r18, r6
    13f8:	37 09       	sbc	r19, r7
    13fa:	c5 01       	movw	r24, r10
    13fc:	8e 19       	sub	r24, r14
    13fe:	9f 09       	sbc	r25, r15
    1400:	22 9f       	mul	r18, r18
    1402:	b0 01       	movw	r22, r0
    1404:	23 9f       	mul	r18, r19
    1406:	70 0d       	add	r23, r0
    1408:	70 0d       	add	r23, r0
    140a:	11 24       	eor	r1, r1
    140c:	88 9f       	mul	r24, r24
    140e:	90 01       	movw	r18, r0
    1410:	89 9f       	mul	r24, r25
    1412:	30 0d       	add	r19, r0
    1414:	30 0d       	add	r19, r0
    1416:	11 24       	eor	r1, r1
    1418:	62 0f       	add	r22, r18
    141a:	73 1f       	adc	r23, r19
    141c:	88 27       	eor	r24, r24
    141e:	77 fd       	sbrc	r23, 7
    1420:	80 95       	com	r24
    1422:	98 2f       	mov	r25, r24
    1424:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1428:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    142c:	60 93 2e 01 	sts	0x012E, r22
    1430:	70 93 2f 01 	sts	0x012F, r23
    1434:	80 93 30 01 	sts	0x0130, r24
    1438:	90 93 31 01 	sts	0x0131, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    143c:	c4 18       	sub	r12, r4
    143e:	d5 08       	sbc	r13, r5
    1440:	a2 18       	sub	r10, r2
    1442:	b3 08       	sbc	r11, r3
    1444:	cc 9c       	mul	r12, r12
    1446:	b0 01       	movw	r22, r0
    1448:	cd 9c       	mul	r12, r13
    144a:	70 0d       	add	r23, r0
    144c:	70 0d       	add	r23, r0
    144e:	11 24       	eor	r1, r1
    1450:	aa 9c       	mul	r10, r10
    1452:	c0 01       	movw	r24, r0
    1454:	ab 9c       	mul	r10, r11
    1456:	90 0d       	add	r25, r0
    1458:	90 0d       	add	r25, r0
    145a:	11 24       	eor	r1, r1
    145c:	68 0f       	add	r22, r24
    145e:	79 1f       	adc	r23, r25
    1460:	88 27       	eor	r24, r24
    1462:	77 fd       	sbrc	r23, 7
    1464:	80 95       	com	r24
    1466:	98 2f       	mov	r25, r24
    1468:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    146c:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    1470:	60 93 32 01 	sts	0x0132, r22
    1474:	70 93 33 01 	sts	0x0133, r23
    1478:	80 93 34 01 	sts	0x0134, r24
    147c:	90 93 35 01 	sts	0x0135, r25
    1480:	0e e1       	ldi	r16, 0x1E	; 30
    1482:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    1484:	e1 2c       	mov	r14, r1
    1486:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    1488:	1e 82       	std	Y+6, r1	; 0x06
    148a:	1d 82       	std	Y+5, r1	; 0x05
    148c:	1a 82       	std	Y+2, r1	; 0x02
    148e:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    1490:	21 2c       	mov	r2, r1
    1492:	68 94       	set
    1494:	33 24       	eor	r3, r3
    1496:	36 f8       	bld	r3, 6
    1498:	0f 2e       	mov	r0, r31
    149a:	fc e1       	ldi	r31, 0x1C	; 28
    149c:	4f 2e       	mov	r4, r31
    149e:	f0 2d       	mov	r31, r0
    14a0:	0f 2e       	mov	r0, r31
    14a2:	f6 e4       	ldi	r31, 0x46	; 70
    14a4:	5f 2e       	mov	r5, r31
    14a6:	f0 2d       	mov	r31, r0
    14a8:	61 2c       	mov	r6, r1
    14aa:	71 2c       	mov	r7, r1
    14ac:	81 2c       	mov	r8, r1
    14ae:	91 2c       	mov	r9, r1
    14b0:	2d c8       	rjmp	.-4006   	; 0x50c <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    14b2:	28 96       	adiw	r28, 0x08	; 8
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	0f 91       	pop	r16
    14c6:	ff 90       	pop	r15
    14c8:	ef 90       	pop	r14
    14ca:	df 90       	pop	r13
    14cc:	cf 90       	pop	r12
    14ce:	bf 90       	pop	r11
    14d0:	af 90       	pop	r10
    14d2:	9f 90       	pop	r9
    14d4:	8f 90       	pop	r8
    14d6:	7f 90       	pop	r7
    14d8:	6f 90       	pop	r6
    14da:	5f 90       	pop	r5
    14dc:	4f 90       	pop	r4
    14de:	3f 90       	pop	r3
    14e0:	2f 90       	pop	r2
    14e2:	08 95       	ret

000014e4 <move_robot>:


// --------------------------------------------------------------
// ORIENTATION CONTROLLER TO MOVE ROBOT FORWARD
// --------------------------------------------------------------
void move_robot(float theta, int dir){
    14e4:	cf 92       	push	r12
    14e6:	df 92       	push	r13
    14e8:	ef 92       	push	r14
    14ea:	ff 92       	push	r15
    14ec:	6b 01       	movw	r12, r22
    14ee:	7c 01       	movw	r14, r24
	if (dir == 1) {             // Move with a right curve
    14f0:	41 30       	cpi	r20, 0x01	; 1
    14f2:	51 05       	cpc	r21, r1
    14f4:	c1 f5       	brne	.+112    	; 0x1566 <move_robot+0x82>
		OCR1C = PWM_SPEED_FWD_LFT;
    14f6:	88 eb       	ldi	r24, 0xB8	; 184
    14f8:	9b e0       	ldi	r25, 0x0B	; 11
    14fa:	90 93 8d 00 	sts	0x008D, r25
    14fe:	80 93 8c 00 	sts	0x008C, r24
		if (theta> TURNING_ANGLE)
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	44 e3       	ldi	r20, 0x34	; 52
    1508:	53 e4       	ldi	r21, 0x43	; 67
    150a:	c7 01       	movw	r24, r14
    150c:	b6 01       	movw	r22, r12
    150e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    1512:	18 16       	cp	r1, r24
    1514:	3c f4       	brge	.+14     	; 0x1524 <move_robot+0x40>
		OCR1B = PWM_MIN_RGHT;
    1516:	88 e0       	ldi	r24, 0x08	; 8
    1518:	97 e0       	ldi	r25, 0x07	; 7
    151a:	90 93 8b 00 	sts	0x008B, r25
    151e:	80 93 8a 00 	sts	0x008A, r24
    1522:	58 c0       	rjmp	.+176    	; 0x15d4 <move_robot+0xf0>
		else
		OCR1B = PWM_MIN_RGHT+((TURNING_ANGLE - theta)/TURNING_ANGLE)*(PWM_SPEED_FWD_RGHT-PWM_MIN_RGHT);
    1524:	a7 01       	movw	r20, r14
    1526:	96 01       	movw	r18, r12
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	70 e0       	ldi	r23, 0x00	; 0
    152c:	84 e3       	ldi	r24, 0x34	; 52
    152e:	93 e4       	ldi	r25, 0x43	; 67
    1530:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    1534:	20 e0       	ldi	r18, 0x00	; 0
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	44 e3       	ldi	r20, 0x34	; 52
    153a:	53 e4       	ldi	r21, 0x43	; 67
    153c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divsf3>
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e8       	ldi	r19, 0x80	; 128
    1544:	49 e8       	ldi	r20, 0x89	; 137
    1546:	54 e4       	ldi	r21, 0x44	; 68
    1548:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    154c:	20 e0       	ldi	r18, 0x00	; 0
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	41 ee       	ldi	r20, 0xE1	; 225
    1552:	54 e4       	ldi	r21, 0x44	; 68
    1554:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1558:	0e 94 be 1a 	call	0x357c	; 0x357c <__fixunssfsi>
    155c:	70 93 8b 00 	sts	0x008B, r23
    1560:	60 93 8a 00 	sts	0x008A, r22
    1564:	37 c0       	rjmp	.+110    	; 0x15d4 <move_robot+0xf0>
	}
	else
	{
		// Move with a left curve
		OCR1B = PWM_SPEED_FWD_RGHT;
    1566:	84 e5       	ldi	r24, 0x54	; 84
    1568:	9b e0       	ldi	r25, 0x0B	; 11
    156a:	90 93 8b 00 	sts	0x008B, r25
    156e:	80 93 8a 00 	sts	0x008A, r24
		if (theta> TURNING_ANGLE)
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	44 e3       	ldi	r20, 0x34	; 52
    1578:	53 e4       	ldi	r21, 0x43	; 67
    157a:	c7 01       	movw	r24, r14
    157c:	b6 01       	movw	r22, r12
    157e:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    1582:	18 16       	cp	r1, r24
    1584:	3c f4       	brge	.+14     	; 0x1594 <move_robot+0xb0>
		OCR1C = PWM_MIN_LEFT;
    1586:	88 e0       	ldi	r24, 0x08	; 8
    1588:	97 e0       	ldi	r25, 0x07	; 7
    158a:	90 93 8d 00 	sts	0x008D, r25
    158e:	80 93 8c 00 	sts	0x008C, r24
    1592:	20 c0       	rjmp	.+64     	; 0x15d4 <move_robot+0xf0>
		else
		OCR1C = PWM_MIN_LEFT+((TURNING_ANGLE - theta)/TURNING_ANGLE)*(PWM_SPEED_FWD_LFT-PWM_MIN_LEFT);
    1594:	a7 01       	movw	r20, r14
    1596:	96 01       	movw	r18, r12
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	84 e3       	ldi	r24, 0x34	; 52
    159e:	93 e4       	ldi	r25, 0x43	; 67
    15a0:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	44 e3       	ldi	r20, 0x34	; 52
    15aa:	53 e4       	ldi	r21, 0x43	; 67
    15ac:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divsf3>
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	46 e9       	ldi	r20, 0x96	; 150
    15b6:	54 e4       	ldi	r21, 0x44	; 68
    15b8:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	41 ee       	ldi	r20, 0xE1	; 225
    15c2:	54 e4       	ldi	r21, 0x44	; 68
    15c4:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    15c8:	0e 94 be 1a 	call	0x357c	; 0x357c <__fixunssfsi>
    15cc:	70 93 8d 00 	sts	0x008D, r23
    15d0:	60 93 8c 00 	sts	0x008C, r22
		
	}
	
	clear(PORTB,3);
    15d4:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    15d6:	5b 98       	cbi	0x0b, 3	; 11
}
    15d8:	ff 90       	pop	r15
    15da:	ef 90       	pop	r14
    15dc:	df 90       	pop	r13
    15de:	cf 90       	pop	r12
    15e0:	08 95       	ret

000015e2 <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a right curve
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	09 f5       	brne	.+66     	; 0x1628 <move_robot_to_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
    15e6:	88 eb       	ldi	r24, 0xB8	; 184
    15e8:	9b e0       	ldi	r25, 0x0B	; 11
    15ea:	90 93 8b 00 	sts	0x008B, r25
    15ee:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
    15f2:	88 27       	eor	r24, r24
    15f4:	77 fd       	sbrc	r23, 7
    15f6:	80 95       	com	r24
    15f8:	98 2f       	mov	r25, r24
    15fa:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    15fe:	2d ec       	ldi	r18, 0xCD	; 205
    1600:	3c ec       	ldi	r19, 0xCC	; 204
    1602:	4c ec       	ldi	r20, 0xCC	; 204
    1604:	5d e3       	ldi	r21, 0x3D	; 61
    1606:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    160a:	20 e0       	ldi	r18, 0x00	; 0
    160c:	30 e4       	ldi	r19, 0x40	; 64
    160e:	45 e3       	ldi	r20, 0x35	; 53
    1610:	55 e4       	ldi	r21, 0x45	; 69
    1612:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1616:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    161a:	70 93 8d 00 	sts	0x008D, r23
    161e:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
    1622:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1624:	5b 98       	cbi	0x0b, 3	; 11
    1626:	08 95       	ret
	}
	else
	{                      // Move with a left curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
    1628:	88 27       	eor	r24, r24
    162a:	77 fd       	sbrc	r23, 7
    162c:	80 95       	com	r24
    162e:	98 2f       	mov	r25, r24
    1630:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1634:	2d ec       	ldi	r18, 0xCD	; 205
    1636:	3c ec       	ldi	r19, 0xCC	; 204
    1638:	4c ec       	ldi	r20, 0xCC	; 204
    163a:	5d e3       	ldi	r21, 0x3D	; 61
    163c:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e8       	ldi	r19, 0x80	; 128
    1644:	4b e3       	ldi	r20, 0x3B	; 59
    1646:	55 e4       	ldi	r21, 0x45	; 69
    1648:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    164c:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    1650:	70 93 8b 00 	sts	0x008B, r23
    1654:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
    1658:	84 e5       	ldi	r24, 0x54	; 84
    165a:	9b e0       	ldi	r25, 0x0B	; 11
    165c:	90 93 8d 00 	sts	0x008D, r25
    1660:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
    1664:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1666:	5b 98       	cbi	0x0b, 3	; 11
    1668:	08 95       	ret

0000166a <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
    166a:	10 92 8b 00 	sts	0x008B, r1
    166e:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    1672:	10 92 8d 00 	sts	0x008D, r1
    1676:	10 92 8c 00 	sts	0x008C, r1
    167a:	08 95       	ret

0000167c <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
    167c:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
    167e:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
    1680:	8c ef       	ldi	r24, 0xFC	; 252
    1682:	98 e0       	ldi	r25, 0x08	; 8
    1684:	90 93 8d 00 	sts	0x008D, r25
    1688:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    168c:	10 92 8b 00 	sts	0x008B, r1
    1690:	10 92 8a 00 	sts	0x008A, r1
    1694:	08 95       	ret

00001696 <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
    1696:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
    1698:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
    169a:	8c ef       	ldi	r24, 0xFC	; 252
    169c:	98 e0       	ldi	r25, 0x08	; 8
    169e:	90 93 8d 00 	sts	0x008D, r25
    16a2:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    16a6:	10 92 8b 00 	sts	0x008B, r1
    16aa:	10 92 8a 00 	sts	0x008A, r1
    16ae:	08 95       	ret

000016b0 <go_bwd>:
// --------------------------------------------------------------
// GO BACKWARDS
// --------------------------------------------------------------
void go_bwd(void)
{
    set(PORTB,3);
    16b0:	2b 9a       	sbi	0x05, 3	; 5
    set(PORTD,3);
    16b2:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_FWD_LFT;
    16b4:	88 eb       	ldi	r24, 0xB8	; 184
    16b6:	9b e0       	ldi	r25, 0x0B	; 11
    16b8:	90 93 8d 00 	sts	0x008D, r25
    16bc:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_FWD_RGHT;
    16c0:	84 e5       	ldi	r24, 0x54	; 84
    16c2:	9b e0       	ldi	r25, 0x0B	; 11
    16c4:	90 93 8b 00 	sts	0x008B, r25
    16c8:	80 93 8a 00 	sts	0x008A, r24
    16cc:	08 95       	ret

000016ce <circle_left>:
// --------------------------------------------------------------
// CIRCLE_LEFT
// --------------------------------------------------------------
void circle_left()
{
	clear(PORTB,3);
    16ce:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    16d0:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
    16d2:	8e e2       	ldi	r24, 0x2E	; 46
    16d4:	99 e0       	ldi	r25, 0x09	; 9
    16d6:	90 93 8b 00 	sts	0x008B, r25
    16da:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
    16de:	8e e9       	ldi	r24, 0x9E	; 158
    16e0:	97 e0       	ldi	r25, 0x07	; 7
    16e2:	90 93 8d 00 	sts	0x008D, r25
    16e6:	80 93 8c 00 	sts	0x008C, r24
    16ea:	08 95       	ret

000016ec <circle_right>:
// --------------------------------------------------------------
// CIRCLE_RIGHT
// --------------------------------------------------------------
void circle_right()
{
	clear(PORTB,3);
    16ec:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    16ee:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
    16f0:	87 e9       	ldi	r24, 0x97	; 151
    16f2:	97 e0       	ldi	r25, 0x07	; 7
    16f4:	90 93 8b 00 	sts	0x008B, r25
    16f8:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
    16fc:	8c ef       	ldi	r24, 0xFC	; 252
    16fe:	98 e0       	ldi	r25, 0x08	; 8
    1700:	90 93 8d 00 	sts	0x008D, r25
    1704:	80 93 8c 00 	sts	0x008C, r24
    1708:	08 95       	ret

0000170a <main>:
//Variable for receiving data
char buffer_rec[PACKET_LENGTH_SYSTEM] = {0};

//Main function
int main(void)
{
    170a:	cf 93       	push	r28
    170c:	df 93       	push	r29
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62
    1712:	c8 56       	subi	r28, 0x68	; 104
    1714:	d1 09       	sbc	r29, r1
    1716:	0f b6       	in	r0, 0x3f	; 63
    1718:	f8 94       	cli
    171a:	de bf       	out	0x3e, r29	; 62
    171c:	0f be       	out	0x3f, r0	; 63
    171e:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
    1720:	80 e8       	ldi	r24, 0x80	; 128
    1722:	85 bf       	out	0x35, r24	; 53
    1724:	85 bf       	out	0x35, r24	; 53
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1726:	1a 82       	std	Y+2, r1	; 0x02
    1728:	19 82       	std	Y+1, r1	; 0x01
    172a:	1c 82       	std	Y+4, r1	; 0x04
    172c:	1b 82       	std	Y+3, r1	; 0x03
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
    
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
    172e:	fe 01       	movw	r30, r28
    1730:	35 96       	adiw	r30, 0x05	; 5
    1732:	90 e2       	ldi	r25, 0x20	; 32
    1734:	df 01       	movw	r26, r30
    1736:	1d 92       	st	X+, r1
    1738:	9a 95       	dec	r25
    173a:	e9 f7       	brne	.-6      	; 0x1736 <main+0x2c>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
    173c:	1e ae       	std	Y+62, r1	; 0x3e
    173e:	1d ae       	std	Y+61, r1	; 0x3d
    1740:	21 96       	adiw	r28, 0x01	; 1
    1742:	1f ae       	std	Y+63, r1	; 0x3f
    1744:	1e ae       	std	Y+62, r1	; 0x3e
    1746:	21 97       	sbiw	r28, 0x01	; 1
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
    1748:	e1 e6       	ldi	r30, 0x61	; 97
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 83       	st	Z, r24
    174e:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
    1750:	6a 9a       	sbi	0x0d, 2	; 13
    1752:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
    1754:	6e 9a       	sbi	0x0d, 6	; 13
    1756:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
    1758:	6e 9a       	sbi	0x0d, 6	; 13
    175a:	76 98       	cbi	0x0e, 6	; 14
    
    m_bus_init();                       // Initialize bus
    175c:	0e 94 ae 14 	call	0x295c	; 0x295c <m_bus_init>
    init_ports();                       // Initialize ports
    1760:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_ports>
    set_timer1();                       // Set timer 1 for motor
    1764:	0e 94 05 02 	call	0x40a	; 0x40a <set_timer1>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    1768:	0e 94 b3 01 	call	0x366	; 0x366 <set_timer4>
    init_analog();                      // Set the ADC System
    176c:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
    1770:	0e 94 80 18 	call	0x3100	; 0x3100 <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    1774:	88 23       	and	r24, r24
    1776:	e1 f3       	breq	.-8      	; 0x1770 <main+0x66>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
    //m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);       // Open the RF channel
	m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    1778:	40 e2       	ldi	r20, 0x20	; 32
    177a:	65 ef       	ldi	r22, 0xF5	; 245
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	0e 94 bf 14 	call	0x297e	; 0x297e <m_rf_open>
    
    sei();                              // Enable interruptions
    1782:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
    1784:	6e 9a       	sbi	0x0d, 6	; 13
    1786:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
    1788:	10 92 60 01 	sts	0x0160, r1
    178c:	10 92 61 01 	sts	0x0161, r1
    1790:	10 92 62 01 	sts	0x0162, r1
    1794:	10 92 63 01 	sts	0x0163, r1
    TARGETS_Y[0] = 0;
    1798:	10 92 58 01 	sts	0x0158, r1
    179c:	10 92 59 01 	sts	0x0159, r1
    17a0:	10 92 5a 01 	sts	0x015A, r1
    17a4:	10 92 5b 01 	sts	0x015B, r1
    TARGETS_X[1] = 0;
    17a8:	10 92 64 01 	sts	0x0164, r1
    17ac:	10 92 65 01 	sts	0x0165, r1
    17b0:	10 92 66 01 	sts	0x0166, r1
    17b4:	10 92 67 01 	sts	0x0167, r1
    TARGETS_Y[1] = 0;
    17b8:	10 92 5c 01 	sts	0x015C, r1
    17bc:	10 92 5d 01 	sts	0x015D, r1
    17c0:	10 92 5e 01 	sts	0x015E, r1
    17c4:	10 92 5f 01 	sts	0x015F, r1
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
	int timer_switch = 0;
	
	int circle_started_before = 0;
    17c8:	6d 96       	adiw	r28, 0x1d	; 29
    17ca:	1f ae       	std	Y+63, r1	; 0x3f
    17cc:	1e ae       	std	Y+62, r1	; 0x3e
    17ce:	6d 97       	sbiw	r28, 0x1d	; 29
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    17d0:	a9 96       	adiw	r28, 0x29	; 41
    17d2:	1f ae       	std	Y+63, r1	; 0x3f
    17d4:	1e ae       	std	Y+62, r1	; 0x3e
    17d6:	a9 97       	sbiw	r28, 0x29	; 41
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    17d8:	28 96       	adiw	r28, 0x08	; 8
    17da:	1f ae       	std	Y+63, r1	; 0x3f
    17dc:	28 97       	sbiw	r28, 0x08	; 8
    17de:	29 96       	adiw	r28, 0x09	; 9
    17e0:	1f ae       	std	Y+63, r1	; 0x3f
    17e2:	29 97       	sbiw	r28, 0x09	; 9
    17e4:	66 96       	adiw	r28, 0x16	; 22
    17e6:	1f ae       	std	Y+63, r1	; 0x3f
    17e8:	66 97       	sbiw	r28, 0x16	; 22
    17ea:	67 96       	adiw	r28, 0x17	; 23
    17ec:	1f ae       	std	Y+63, r1	; 0x3f
    17ee:	67 97       	sbiw	r28, 0x17	; 23
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    17f0:	a3 96       	adiw	r28, 0x23	; 35
    17f2:	1c ae       	std	Y+60, r1	; 0x3c
    17f4:	1d ae       	std	Y+61, r1	; 0x3d
    17f6:	1e ae       	std	Y+62, r1	; 0x3e
    17f8:	1f ae       	std	Y+63, r1	; 0x3f
    17fa:	a3 97       	sbiw	r28, 0x23	; 35
	int have_puck = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    17fc:	a4 96       	adiw	r28, 0x24	; 36
    17fe:	1f ae       	std	Y+63, r1	; 0x3f
    1800:	a4 97       	sbiw	r28, 0x24	; 36
    1802:	a5 96       	adiw	r28, 0x25	; 37
    1804:	1f ae       	std	Y+63, r1	; 0x3f
    1806:	a5 97       	sbiw	r28, 0x25	; 37
    1808:	a6 96       	adiw	r28, 0x26	; 38
    180a:	1f ae       	std	Y+63, r1	; 0x3f
    180c:	a6 97       	sbiw	r28, 0x26	; 38
    180e:	a7 96       	adiw	r28, 0x27	; 39
    1810:	1f ae       	std	Y+63, r1	; 0x3f
    1812:	a7 97       	sbiw	r28, 0x27	; 39
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
    1814:	6b 96       	adiw	r28, 0x1b	; 27
    1816:	1f ae       	std	Y+63, r1	; 0x3f
    1818:	1e ae       	std	Y+62, r1	; 0x3e
    181a:	6b 97       	sbiw	r28, 0x1b	; 27
    181c:	2b 96       	adiw	r28, 0x0b	; 11
    181e:	1f ae       	std	Y+63, r1	; 0x3f
    1820:	1e ae       	std	Y+62, r1	; 0x3e
    1822:	2b 97       	sbiw	r28, 0x0b	; 11
    1824:	2d 96       	adiw	r28, 0x0d	; 13
    1826:	1f ae       	std	Y+63, r1	; 0x3f
    1828:	1e ae       	std	Y+62, r1	; 0x3e
    182a:	2d 97       	sbiw	r28, 0x0d	; 13
    182c:	2f 96       	adiw	r28, 0x0f	; 15
    182e:	1f ae       	std	Y+63, r1	; 0x3f
    1830:	1e ae       	std	Y+62, r1	; 0x3e
    1832:	2f 97       	sbiw	r28, 0x0f	; 15
    1834:	61 96       	adiw	r28, 0x11	; 17
    1836:	1f ae       	std	Y+63, r1	; 0x3f
    1838:	1e ae       	std	Y+62, r1	; 0x3e
    183a:	61 97       	sbiw	r28, 0x11	; 17
    183c:	63 96       	adiw	r28, 0x13	; 19
    183e:	1f ae       	std	Y+63, r1	; 0x3f
    1840:	1e ae       	std	Y+62, r1	; 0x3e
    1842:	63 97       	sbiw	r28, 0x13	; 19
    1844:	65 96       	adiw	r28, 0x15	; 21
    1846:	1f ae       	std	Y+63, r1	; 0x3f
    1848:	1e ae       	std	Y+62, r1	; 0x3e
    184a:	65 97       	sbiw	r28, 0x15	; 21
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    184c:	6f 96       	adiw	r28, 0x1f	; 31
    184e:	1f ae       	std	Y+63, r1	; 0x3f
    1850:	1e ae       	std	Y+62, r1	; 0x3e
    1852:	6f 97       	sbiw	r28, 0x1f	; 31
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    1854:	69 96       	adiw	r28, 0x19	; 25
    1856:	1f ae       	std	Y+63, r1	; 0x3f
    1858:	1e ae       	std	Y+62, r1	; 0x3e
    185a:	69 97       	sbiw	r28, 0x19	; 25
            
        // If data received correctly
        if (wii_OK)
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    185c:	fe 01       	movw	r30, r28
    185e:	33 96       	adiw	r30, 0x03	; 3
    1860:	23 96       	adiw	r28, 0x03	; 3
    1862:	ff af       	std	Y+63, r31	; 0x3f
    1864:	ee af       	std	Y+62, r30	; 0x3e
    1866:	23 97       	sbiw	r28, 0x03	; 3
    1868:	9e 01       	movw	r18, r28
    186a:	2f 5f       	subi	r18, 0xFF	; 255
    186c:	3f 4f       	sbci	r19, 0xFF	; 255
    186e:	25 96       	adiw	r28, 0x05	; 5
    1870:	3f af       	std	Y+63, r19	; 0x3f
    1872:	2e af       	std	Y+62, r18	; 0x3e
    1874:	25 97       	sbiw	r28, 0x05	; 5
    1876:	ce 01       	movw	r24, r28
    1878:	cf 96       	adiw	r24, 0x3f	; 63
    187a:	27 96       	adiw	r28, 0x07	; 7
    187c:	9f af       	std	Y+63, r25	; 0x3f
    187e:	8e af       	std	Y+62, r24	; 0x3e
    1880:	27 97       	sbiw	r28, 0x07	; 7
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1882:	0f 2e       	mov	r0, r31
    1884:	fa e7       	ldi	r31, 0x7A	; 122
    1886:	2f 2e       	mov	r2, r31
    1888:	31 2c       	mov	r3, r1
    188a:	f0 2d       	mov	r31, r0
                    break;
                case(2):
                    PT3_right_inside = ADC;
                    break;
                case(3):
					PT4_right_outside = ADC;
    188c:	0f 2e       	mov	r0, r31
    188e:	f8 e7       	ldi	r31, 0x78	; 120
    1890:	4f 2e       	mov	r4, r31
    1892:	51 2c       	mov	r5, r1
    1894:	f0 2d       	mov	r31, r0
    1896:	0d c0       	rjmp	.+26     	; 0x18b2 <main+0x1a8>
				
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					status_go_to_goal = 1;
    1898:	a1 e0       	ldi	r26, 0x01	; 1
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	69 96       	adiw	r28, 0x19	; 25
    189e:	bf af       	std	Y+63, r27	; 0x3f
    18a0:	ae af       	std	Y+62, r26	; 0x3e
    18a2:	69 97       	sbiw	r28, 0x19	; 25
    18a4:	06 c0       	rjmp	.+12     	; 0x18b2 <main+0x1a8>
					
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
						status_go_to_goal = 1;
    18a6:	e1 e0       	ldi	r30, 0x01	; 1
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	69 96       	adiw	r28, 0x19	; 25
    18ac:	ff af       	std	Y+63, r31	; 0x3f
    18ae:	ee af       	std	Y+62, r30	; 0x3e
    18b0:	69 97       	sbiw	r28, 0x19	; 25
		}*/
		
		// --------------------------------------------------------------
		// SYSTEM COMMAND CHECK
		// --------------------------------------------------------------
		if (flag_system == 1)
    18b2:	80 91 52 01 	lds	r24, 0x0152
    18b6:	90 91 53 01 	lds	r25, 0x0153
    18ba:	01 97       	sbiw	r24, 0x01	; 1
    18bc:	51 f4       	brne	.+20     	; 0x18d2 <main+0x1c8>
		{
			state = SYSTEM_STATE;
    18be:	23 e6       	ldi	r18, 0x63	; 99
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	30 93 51 01 	sts	0x0151, r19
    18c6:	20 93 50 01 	sts	0x0150, r18
			flag_system = 0;
    18ca:	10 92 53 01 	sts	0x0153, r1
    18ce:	10 92 52 01 	sts	0x0152, r1
		}
		
		// --------------------------------------------------------------
        // SEND COMMANDS
        // --------------------------------------------------------------
        if (flag_timer == 1)
    18d2:	80 91 54 01 	lds	r24, 0x0154
    18d6:	90 91 55 01 	lds	r25, 0x0155
    18da:	01 97       	sbiw	r24, 0x01	; 1
    18dc:	09 f0       	breq	.+2      	; 0x18e0 <main+0x1d6>
    18de:	c6 c0       	rjmp	.+396    	; 0x1a6c <main+0x362>

				//// SEND DATA TO THE M2 CONNECTED TO MATLAB
				////Open the channel
				//m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
                
				output_buffer[0] = 1;
    18e0:	31 e0       	ldi	r19, 0x01	; 1
    18e2:	3d 83       	std	Y+5, r19	; 0x05
				output_buffer[1] = state;
    18e4:	a0 e5       	ldi	r26, 0x50	; 80
    18e6:	b1 e0       	ldi	r27, 0x01	; 1
    18e8:	8c 91       	ld	r24, X
    18ea:	8e 83       	std	Y+6, r24	; 0x06
				output_buffer[2] = x_robot;
    18ec:	8d ad       	ldd	r24, Y+61	; 0x3d
    18ee:	8f 83       	std	Y+7, r24	; 0x07
				output_buffer[3] = y_robot;
    18f0:	8f ad       	ldd	r24, Y+63	; 0x3f
    18f2:	88 87       	std	Y+8, r24	; 0x08
                
				aux_conversion = div(theta_robot,128);
    18f4:	60 e8       	ldi	r22, 0x80	; 128
    18f6:	70 e0       	ldi	r23, 0x00	; 0
    18f8:	80 91 56 01 	lds	r24, 0x0156
    18fc:	90 91 57 01 	lds	r25, 0x0157
    1900:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[4] = (signed char)aux_conversion.quot;
    1904:	69 87       	std	Y+9, r22	; 0x09
				output_buffer[5] = (signed char)aux_conversion.rem;
    1906:	8a 87       	std	Y+10, r24	; 0x0a
                
				output_buffer[6] = (signed char)status_go_to_goal;
    1908:	68 96       	adiw	r28, 0x18	; 24
    190a:	bf ad       	ldd	r27, Y+63	; 0x3f
    190c:	68 97       	sbiw	r28, 0x18	; 24
    190e:	bb 87       	std	Y+11, r27	; 0x0b
                
				aux_conversion = div((int)dir_angle,128);
    1910:	a4 96       	adiw	r28, 0x24	; 36
    1912:	5f ad       	ldd	r21, Y+63	; 0x3f
    1914:	a4 97       	sbiw	r28, 0x24	; 36
    1916:	a5 96       	adiw	r28, 0x25	; 37
    1918:	4f ad       	ldd	r20, Y+63	; 0x3f
    191a:	a5 97       	sbiw	r28, 0x25	; 37
    191c:	a6 96       	adiw	r28, 0x26	; 38
    191e:	3f ad       	ldd	r19, Y+63	; 0x3f
    1920:	a6 97       	sbiw	r28, 0x26	; 38
    1922:	a7 96       	adiw	r28, 0x27	; 39
    1924:	2f ad       	ldd	r18, Y+63	; 0x3f
    1926:	a7 97       	sbiw	r28, 0x27	; 39
    1928:	65 2f       	mov	r22, r21
    192a:	74 2f       	mov	r23, r20
    192c:	83 2f       	mov	r24, r19
    192e:	92 2f       	mov	r25, r18
    1930:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    1934:	dc 01       	movw	r26, r24
    1936:	cb 01       	movw	r24, r22
    1938:	60 e8       	ldi	r22, 0x80	; 128
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[7] = (signed char)aux_conversion.quot;
    1940:	6c 87       	std	Y+12, r22	; 0x0c
				output_buffer[8] = (signed char)aux_conversion.rem;
    1942:	8d 87       	std	Y+13, r24	; 0x0d
                
				aux_conversion = div((int)dist_goal,128);
    1944:	a3 96       	adiw	r28, 0x23	; 35
    1946:	6c ad       	ldd	r22, Y+60	; 0x3c
    1948:	7d ad       	ldd	r23, Y+61	; 0x3d
    194a:	8e ad       	ldd	r24, Y+62	; 0x3e
    194c:	9f ad       	ldd	r25, Y+63	; 0x3f
    194e:	a3 97       	sbiw	r28, 0x23	; 35
    1950:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    1954:	dc 01       	movw	r26, r24
    1956:	cb 01       	movw	r24, r22
    1958:	60 e8       	ldi	r22, 0x80	; 128
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[9] = (signed char)aux_conversion.quot;
    1960:	6e 87       	std	Y+14, r22	; 0x0e
				output_buffer[10] = (signed char)aux_conversion.rem;
    1962:	8f 87       	std	Y+15, r24	; 0x0f
                
				aux_conversion = div(cam_X,128);
    1964:	60 e8       	ldi	r22, 0x80	; 128
    1966:	70 e0       	ldi	r23, 0x00	; 0
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[11] = (signed char)aux_conversion.quot;
    1970:	68 8b       	std	Y+16, r22	; 0x10
				output_buffer[12] = (signed char)aux_conversion.rem;
    1972:	89 8b       	std	Y+17, r24	; 0x11
                
				aux_conversion = div(cam_Y,128);
    1974:	60 e8       	ldi	r22, 0x80	; 128
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[13] = (signed char)aux_conversion.quot;
    1980:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[14] = (signed char)aux_conversion.rem;
    1982:	8b 8b       	std	Y+19, r24	; 0x13
                
				output_buffer[15] = (signed char)commands_var;
    1984:	a8 96       	adiw	r28, 0x28	; 40
    1986:	ef ad       	ldd	r30, Y+63	; 0x3f
    1988:	a8 97       	sbiw	r28, 0x28	; 40
    198a:	ec 8b       	std	Y+20, r30	; 0x14
                
				aux_conversion = div((int)diff_theta,128);
    198c:	28 96       	adiw	r28, 0x08	; 8
    198e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1990:	28 97       	sbiw	r28, 0x08	; 8
    1992:	29 96       	adiw	r28, 0x09	; 9
    1994:	4f ad       	ldd	r20, Y+63	; 0x3f
    1996:	29 97       	sbiw	r28, 0x09	; 9
    1998:	66 96       	adiw	r28, 0x16	; 22
    199a:	3f ad       	ldd	r19, Y+63	; 0x3f
    199c:	66 97       	sbiw	r28, 0x16	; 22
    199e:	67 96       	adiw	r28, 0x17	; 23
    19a0:	2f ad       	ldd	r18, Y+63	; 0x3f
    19a2:	67 97       	sbiw	r28, 0x17	; 23
    19a4:	65 2f       	mov	r22, r21
    19a6:	74 2f       	mov	r23, r20
    19a8:	83 2f       	mov	r24, r19
    19aa:	92 2f       	mov	r25, r18
    19ac:	0e 94 b9 1a 	call	0x3572	; 0x3572 <__fixsfsi>
    19b0:	dc 01       	movw	r26, r24
    19b2:	cb 01       	movw	r24, r22
    19b4:	60 e8       	ldi	r22, 0x80	; 128
    19b6:	70 e0       	ldi	r23, 0x00	; 0
    19b8:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[16] = (signed char)aux_conversion.quot;
    19bc:	6d 8b       	std	Y+21, r22	; 0x15
				output_buffer[17] = (signed char)aux_conversion.rem;
    19be:	8e 8b       	std	Y+22, r24	; 0x16
                
				aux_conversion = div(PT1_left_outside,128);
    19c0:	60 e8       	ldi	r22, 0x80	; 128
    19c2:	70 e0       	ldi	r23, 0x00	; 0
    19c4:	65 96       	adiw	r28, 0x15	; 21
    19c6:	8e ad       	ldd	r24, Y+62	; 0x3e
    19c8:	9f ad       	ldd	r25, Y+63	; 0x3f
    19ca:	65 97       	sbiw	r28, 0x15	; 21
    19cc:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[18] = (signed char)aux_conversion.quot;
    19d0:	6f 8b       	std	Y+23, r22	; 0x17
				output_buffer[19] = (signed char)aux_conversion.rem;
    19d2:	88 8f       	std	Y+24, r24	; 0x18
                
				aux_conversion = div(PT2_left_inside,128);
    19d4:	60 e8       	ldi	r22, 0x80	; 128
    19d6:	70 e0       	ldi	r23, 0x00	; 0
    19d8:	63 96       	adiw	r28, 0x13	; 19
    19da:	8e ad       	ldd	r24, Y+62	; 0x3e
    19dc:	9f ad       	ldd	r25, Y+63	; 0x3f
    19de:	63 97       	sbiw	r28, 0x13	; 19
    19e0:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[20] = (signed char)aux_conversion.quot;
    19e4:	69 8f       	std	Y+25, r22	; 0x19
				output_buffer[21] = (signed char)aux_conversion.rem;
    19e6:	8a 8f       	std	Y+26, r24	; 0x1a
                
				aux_conversion = div(PT3_right_inside,128);
    19e8:	60 e8       	ldi	r22, 0x80	; 128
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	61 96       	adiw	r28, 0x11	; 17
    19ee:	8e ad       	ldd	r24, Y+62	; 0x3e
    19f0:	9f ad       	ldd	r25, Y+63	; 0x3f
    19f2:	61 97       	sbiw	r28, 0x11	; 17
    19f4:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[22] = (signed char)aux_conversion.quot;
    19f8:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[23] = (signed char)aux_conversion.rem;
    19fa:	8c 8f       	std	Y+28, r24	; 0x1c
                
				aux_conversion = div(PT4_right_outside,128);
    19fc:	60 e8       	ldi	r22, 0x80	; 128
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	2f 96       	adiw	r28, 0x0f	; 15
    1a02:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a04:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a06:	2f 97       	sbiw	r28, 0x0f	; 15
    1a08:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[24] = (signed char)aux_conversion.quot;
    1a0c:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[25] = (signed char)aux_conversion.rem;
    1a0e:	8e 8f       	std	Y+30, r24	; 0x1e
                
				aux_conversion = div(PT5_back_right,128);
    1a10:	60 e8       	ldi	r22, 0x80	; 128
    1a12:	70 e0       	ldi	r23, 0x00	; 0
    1a14:	2d 96       	adiw	r28, 0x0d	; 13
    1a16:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a18:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a1a:	2d 97       	sbiw	r28, 0x0d	; 13
    1a1c:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[26] = (signed char)aux_conversion.quot;
    1a20:	6f 8f       	std	Y+31, r22	; 0x1f
				output_buffer[27] = (signed char)aux_conversion.rem;
    1a22:	88 a3       	std	Y+32, r24	; 0x20
                
				aux_conversion = div(PT6_back_left,128);
    1a24:	60 e8       	ldi	r22, 0x80	; 128
    1a26:	70 e0       	ldi	r23, 0x00	; 0
    1a28:	2b 96       	adiw	r28, 0x0b	; 11
    1a2a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a2c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a2e:	2b 97       	sbiw	r28, 0x0b	; 11
    1a30:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[28] = (signed char)aux_conversion.quot;
    1a34:	69 a3       	std	Y+33, r22	; 0x21
				output_buffer[29] = (signed char)aux_conversion.rem;
    1a36:	8a a3       	std	Y+34, r24	; 0x22
                
				aux_conversion = div(PT7_have_puck,128);
    1a38:	60 e8       	ldi	r22, 0x80	; 128
    1a3a:	70 e0       	ldi	r23, 0x00	; 0
    1a3c:	6b 96       	adiw	r28, 0x1b	; 27
    1a3e:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a40:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a42:	6b 97       	sbiw	r28, 0x1b	; 27
    1a44:	0e 94 d9 1c 	call	0x39b2	; 0x39b2 <__divmodhi4>
				output_buffer[30] = (signed char)aux_conversion.quot;
    1a48:	6b a3       	std	Y+35, r22	; 0x23
				output_buffer[31] = (signed char)aux_conversion.rem;
    1a4a:	8c a3       	std	Y+36, r24	; 0x24
                
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
    1a4c:	40 e2       	ldi	r20, 0x20	; 32
    1a4e:	be 01       	movw	r22, r28
    1a50:	6b 5f       	subi	r22, 0xFB	; 251
    1a52:	7f 4f       	sbci	r23, 0xFF	; 255
    1a54:	80 e6       	ldi	r24, 0x60	; 96
    1a56:	0e 94 76 15 	call	0x2aec	; 0x2aec <m_rf_send>
				m_red(TOGGLE);
    1a5a:	6e 9a       	sbi	0x0d, 6	; 13
    1a5c:	9e b1       	in	r25, 0x0e	; 14
    1a5e:	80 e4       	ldi	r24, 0x40	; 64
    1a60:	89 27       	eor	r24, r25
    1a62:	8e b9       	out	0x0e, r24	; 14
				////Open again the system channel
				//m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
				//timer_switch = 0;
			//}
                
			flag_timer = 0;         //Reset flag
    1a64:	10 92 55 01 	sts	0x0155, r1
    1a68:	10 92 54 01 	sts	0x0154, r1
        
           
        // --------------------------------------------------------------
        // LOCALIZATION CODE
        // --------------------------------------------------------------
        cli();                                          // Clear Interupts to not interfere with the mWii
    1a6c:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
    1a6e:	ce 01       	movw	r24, r28
    1a70:	85 96       	adiw	r24, 0x25	; 37
    1a72:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <m_wii_read>
        sei();                                          // Enable back the interupts
    1a76:	78 94       	sei
            
        // If data received correctly
        if (wii_OK)
    1a78:	88 23       	and	r24, r24
    1a7a:	09 f4       	brne	.+2      	; 0x1a7e <main+0x374>
    1a7c:	dc c6       	rjmp	.+3512   	; 0x2836 <main+0x112c>
        {
            // Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1a7e:	a9 ac       	ldd	r10, Y+57	; 0x39
    1a80:	ba ac       	ldd	r11, Y+58	; 0x3a
    1a82:	cb a8       	ldd	r12, Y+51	; 0x33
    1a84:	dc a8       	ldd	r13, Y+52	; 0x34
    1a86:	ed a4       	ldd	r14, Y+45	; 0x2d
    1a88:	fe a4       	ldd	r15, Y+46	; 0x2e
    1a8a:	0f a1       	ldd	r16, Y+39	; 0x27
    1a8c:	18 a5       	ldd	r17, Y+40	; 0x28
    1a8e:	2f a9       	ldd	r18, Y+55	; 0x37
    1a90:	38 ad       	ldd	r19, Y+56	; 0x38
    1a92:	49 a9       	ldd	r20, Y+49	; 0x31
    1a94:	5a a9       	ldd	r21, Y+50	; 0x32
    1a96:	6b a5       	ldd	r22, Y+43	; 0x2b
    1a98:	7c a5       	ldd	r23, Y+44	; 0x2c
    1a9a:	23 96       	adiw	r28, 0x03	; 3
    1a9c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1a9e:	23 97       	sbiw	r28, 0x03	; 3
    1aa0:	ff 93       	push	r31
    1aa2:	22 96       	adiw	r28, 0x02	; 2
    1aa4:	8f ad       	ldd	r24, Y+63	; 0x3f
    1aa6:	22 97       	sbiw	r28, 0x02	; 2
    1aa8:	8f 93       	push	r24
    1aaa:	25 96       	adiw	r28, 0x05	; 5
    1aac:	9f ad       	ldd	r25, Y+63	; 0x3f
    1aae:	25 97       	sbiw	r28, 0x05	; 5
    1ab0:	9f 93       	push	r25
    1ab2:	24 96       	adiw	r28, 0x04	; 4
    1ab4:	af ad       	ldd	r26, Y+63	; 0x3f
    1ab6:	24 97       	sbiw	r28, 0x04	; 4
    1ab8:	af 93       	push	r26
    1aba:	86 e5       	ldi	r24, 0x56	; 86
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	9f 93       	push	r25
    1ac0:	8f 93       	push	r24
    1ac2:	27 96       	adiw	r28, 0x07	; 7
    1ac4:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ac6:	27 97       	sbiw	r28, 0x07	; 7
    1ac8:	bf 93       	push	r27
    1aca:	26 96       	adiw	r28, 0x06	; 6
    1acc:	ef ad       	ldd	r30, Y+63	; 0x3f
    1ace:	26 97       	sbiw	r28, 0x06	; 6
    1ad0:	ef 93       	push	r30
    1ad2:	0f 2e       	mov	r0, r31
    1ad4:	fd e3       	ldi	r31, 0x3D	; 61
    1ad6:	8f 2e       	mov	r8, r31
    1ad8:	91 2c       	mov	r9, r1
    1ada:	f0 2d       	mov	r31, r0
    1adc:	8c 0e       	add	r8, r28
    1ade:	9d 1e       	adc	r9, r29
    1ae0:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae2:	9e a1       	ldd	r25, Y+38	; 0x26
    1ae4:	0e 94 3b 02 	call	0x476	; 0x476 <localize>
    1ae8:	0f b6       	in	r0, 0x3f	; 63
    1aea:	f8 94       	cli
    1aec:	de bf       	out	0x3e, r29	; 62
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	cd bf       	out	0x3d, r28	; 61
    1af2:	a1 c6       	rjmp	.+3394   	; 0x2836 <main+0x112c>
    1af4:	3f ef       	ldi	r19, 0xFF	; 255
    1af6:	e3 1a       	sub	r14, r19
    1af8:	f3 0a       	sbc	r15, r19

//Variable for receiving data
char buffer_rec[PACKET_LENGTH_SYSTEM] = {0};

//Main function
int main(void)
    1afa:	87 01       	movw	r16, r14
    1afc:	01 50       	subi	r16, 0x01	; 1
    1afe:	11 09       	sbc	r17, r1
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
        {
            get_analog_val(i);              // Get the values for each ADC pin
    1b00:	c8 01       	movw	r24, r16
    1b02:	0e 94 01 01 	call	0x202	; 0x202 <get_analog_val>
            while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1b06:	d1 01       	movw	r26, r2
    1b08:	8c 91       	ld	r24, X
    1b0a:	84 ff       	sbrs	r24, 4
    1b0c:	fc cf       	rjmp	.-8      	; 0x1b06 <main+0x3fc>
            switch(i)
    1b0e:	03 30       	cpi	r16, 0x03	; 3
    1b10:	11 05       	cpc	r17, r1
    1b12:	61 f1       	breq	.+88     	; 0x1b6c <main+0x462>
    1b14:	3c f4       	brge	.+14     	; 0x1b24 <main+0x41a>
    1b16:	01 30       	cpi	r16, 0x01	; 1
    1b18:	11 05       	cpc	r17, r1
    1b1a:	b1 f0       	breq	.+44     	; 0x1b48 <main+0x43e>
    1b1c:	f4 f4       	brge	.+60     	; 0x1b5a <main+0x450>
    1b1e:	01 2b       	or	r16, r17
    1b20:	51 f0       	breq	.+20     	; 0x1b36 <main+0x42c>
    1b22:	64 c0       	rjmp	.+200    	; 0x1bec <main+0x4e2>
    1b24:	05 30       	cpi	r16, 0x05	; 5
    1b26:	11 05       	cpc	r17, r1
    1b28:	99 f1       	breq	.+102    	; 0x1b90 <main+0x486>
    1b2a:	4c f1       	brlt	.+82     	; 0x1b7e <main+0x474>
    1b2c:	06 30       	cpi	r16, 0x06	; 6
    1b2e:	11 05       	cpc	r17, r1
    1b30:	09 f0       	breq	.+2      	; 0x1b34 <main+0x42a>
    1b32:	5c c0       	rjmp	.+184    	; 0x1bec <main+0x4e2>
    1b34:	36 c0       	rjmp	.+108    	; 0x1ba2 <main+0x498>
            {
                case(0):
                    PT1_left_outside = ADC;
    1b36:	f2 01       	movw	r30, r4
    1b38:	01 90       	ld	r0, Z+
    1b3a:	f0 81       	ld	r31, Z
    1b3c:	e0 2d       	mov	r30, r0
    1b3e:	65 96       	adiw	r28, 0x15	; 21
    1b40:	ff af       	std	Y+63, r31	; 0x3f
    1b42:	ee af       	std	Y+62, r30	; 0x3e
    1b44:	65 97       	sbiw	r28, 0x15	; 21
                    break;
    1b46:	7b c6       	rjmp	.+3318   	; 0x283e <main+0x1134>
                case(1):
                    PT2_left_inside = ADC;
    1b48:	d2 01       	movw	r26, r4
    1b4a:	0d 90       	ld	r0, X+
    1b4c:	bc 91       	ld	r27, X
    1b4e:	a0 2d       	mov	r26, r0
    1b50:	63 96       	adiw	r28, 0x13	; 19
    1b52:	bf af       	std	Y+63, r27	; 0x3f
    1b54:	ae af       	std	Y+62, r26	; 0x3e
    1b56:	63 97       	sbiw	r28, 0x13	; 19
                    break;
    1b58:	72 c6       	rjmp	.+3300   	; 0x283e <main+0x1134>
                case(2):
                    PT3_right_inside = ADC;
    1b5a:	f2 01       	movw	r30, r4
    1b5c:	01 90       	ld	r0, Z+
    1b5e:	f0 81       	ld	r31, Z
    1b60:	e0 2d       	mov	r30, r0
    1b62:	61 96       	adiw	r28, 0x11	; 17
    1b64:	ff af       	std	Y+63, r31	; 0x3f
    1b66:	ee af       	std	Y+62, r30	; 0x3e
    1b68:	61 97       	sbiw	r28, 0x11	; 17
                    break;
    1b6a:	69 c6       	rjmp	.+3282   	; 0x283e <main+0x1134>
                case(3):
					PT4_right_outside = ADC;
    1b6c:	d2 01       	movw	r26, r4
    1b6e:	0d 90       	ld	r0, X+
    1b70:	bc 91       	ld	r27, X
    1b72:	a0 2d       	mov	r26, r0
    1b74:	2f 96       	adiw	r28, 0x0f	; 15
    1b76:	bf af       	std	Y+63, r27	; 0x3f
    1b78:	ae af       	std	Y+62, r26	; 0x3e
    1b7a:	2f 97       	sbiw	r28, 0x0f	; 15
                    break;
    1b7c:	60 c6       	rjmp	.+3264   	; 0x283e <main+0x1134>
                case(4):
                    PT5_back_right = ADC;
    1b7e:	f2 01       	movw	r30, r4
    1b80:	01 90       	ld	r0, Z+
    1b82:	f0 81       	ld	r31, Z
    1b84:	e0 2d       	mov	r30, r0
    1b86:	2d 96       	adiw	r28, 0x0d	; 13
    1b88:	ff af       	std	Y+63, r31	; 0x3f
    1b8a:	ee af       	std	Y+62, r30	; 0x3e
    1b8c:	2d 97       	sbiw	r28, 0x0d	; 13
                    break;
    1b8e:	57 c6       	rjmp	.+3246   	; 0x283e <main+0x1134>
                case(5):
                    PT6_back_left = ADC;
    1b90:	d2 01       	movw	r26, r4
    1b92:	0d 90       	ld	r0, X+
    1b94:	bc 91       	ld	r27, X
    1b96:	a0 2d       	mov	r26, r0
    1b98:	2b 96       	adiw	r28, 0x0b	; 11
    1b9a:	bf af       	std	Y+63, r27	; 0x3f
    1b9c:	ae af       	std	Y+62, r26	; 0x3e
    1b9e:	2b 97       	sbiw	r28, 0x0b	; 11
                    break;
    1ba0:	4e c6       	rjmp	.+3228   	; 0x283e <main+0x1134>
                case(6):
                    PT7_have_puck = ADC;
    1ba2:	f2 01       	movw	r30, r4
    1ba4:	01 90       	ld	r0, Z+
    1ba6:	f0 81       	ld	r31, Z
    1ba8:	e0 2d       	mov	r30, r0
    1baa:	6b 96       	adiw	r28, 0x1b	; 27
    1bac:	ff af       	std	Y+63, r31	; 0x3f
    1bae:	ee af       	std	Y+62, r30	; 0x3e
    1bb0:	6b 97       	sbiw	r28, 0x1b	; 27
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
    1bb2:	d1 01       	movw	r26, r2
    1bb4:	8c 91       	ld	r24, X
    1bb6:	80 61       	ori	r24, 0x10	; 16
    1bb8:	8c 93       	st	X, r24
    1bba:	2b 96       	adiw	r28, 0x0b	; 11
    1bbc:	8e ac       	ldd	r8, Y+62	; 0x3e
    1bbe:	9f ac       	ldd	r9, Y+63	; 0x3f
    1bc0:	2b 97       	sbiw	r28, 0x0b	; 11
    1bc2:	2d 96       	adiw	r28, 0x0d	; 13
    1bc4:	6e ac       	ldd	r6, Y+62	; 0x3e
    1bc6:	7f ac       	ldd	r7, Y+63	; 0x3f
    1bc8:	2d 97       	sbiw	r28, 0x0d	; 13
    1bca:	2f 96       	adiw	r28, 0x0f	; 15
    1bcc:	ce ac       	ldd	r12, Y+62	; 0x3e
    1bce:	df ac       	ldd	r13, Y+63	; 0x3f
    1bd0:	2f 97       	sbiw	r28, 0x0f	; 15
    1bd2:	61 96       	adiw	r28, 0x11	; 17
    1bd4:	ee ac       	ldd	r14, Y+62	; 0x3e
    1bd6:	ff ac       	ldd	r15, Y+63	; 0x3f
    1bd8:	61 97       	sbiw	r28, 0x11	; 17
    1bda:	63 96       	adiw	r28, 0x13	; 19
    1bdc:	0e ad       	ldd	r16, Y+62	; 0x3e
    1bde:	1f ad       	ldd	r17, Y+63	; 0x3f
    1be0:	63 97       	sbiw	r28, 0x13	; 19
    1be2:	65 96       	adiw	r28, 0x15	; 21
    1be4:	ae ac       	ldd	r10, Y+62	; 0x3e
    1be6:	bf ac       	ldd	r11, Y+63	; 0x3f
    1be8:	65 97       	sbiw	r28, 0x15	; 21
    1bea:	21 c0       	rjmp	.+66     	; 0x1c2e <main+0x524>
    1bec:	f1 01       	movw	r30, r2
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 61       	ori	r24, 0x10	; 16
    1bf2:	80 83       	st	Z, r24
            
        // --------------------------------------------------------------
        // ANALOG CODE
        // --------------------------------------------------------------
        int i;
        for (i=0;i<NUM_LEDS;i++)
    1bf4:	f7 e0       	ldi	r31, 0x07	; 7
    1bf6:	ef 16       	cp	r14, r31
    1bf8:	f1 04       	cpc	r15, r1
    1bfa:	0c f4       	brge	.+2      	; 0x1bfe <main+0x4f4>
    1bfc:	7b cf       	rjmp	.-266    	; 0x1af4 <main+0x3ea>
    1bfe:	2b 96       	adiw	r28, 0x0b	; 11
    1c00:	8e ac       	ldd	r8, Y+62	; 0x3e
    1c02:	9f ac       	ldd	r9, Y+63	; 0x3f
    1c04:	2b 97       	sbiw	r28, 0x0b	; 11
    1c06:	2d 96       	adiw	r28, 0x0d	; 13
    1c08:	6e ac       	ldd	r6, Y+62	; 0x3e
    1c0a:	7f ac       	ldd	r7, Y+63	; 0x3f
    1c0c:	2d 97       	sbiw	r28, 0x0d	; 13
    1c0e:	2f 96       	adiw	r28, 0x0f	; 15
    1c10:	ce ac       	ldd	r12, Y+62	; 0x3e
    1c12:	df ac       	ldd	r13, Y+63	; 0x3f
    1c14:	2f 97       	sbiw	r28, 0x0f	; 15
    1c16:	61 96       	adiw	r28, 0x11	; 17
    1c18:	ee ac       	ldd	r14, Y+62	; 0x3e
    1c1a:	ff ac       	ldd	r15, Y+63	; 0x3f
    1c1c:	61 97       	sbiw	r28, 0x11	; 17
    1c1e:	63 96       	adiw	r28, 0x13	; 19
    1c20:	0e ad       	ldd	r16, Y+62	; 0x3e
    1c22:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c24:	63 97       	sbiw	r28, 0x13	; 19
    1c26:	65 96       	adiw	r28, 0x15	; 21
    1c28:	ae ac       	ldd	r10, Y+62	; 0x3e
    1c2a:	bf ac       	ldd	r11, Y+63	; 0x3f
    1c2c:	65 97       	sbiw	r28, 0x15	; 21
            
            
        // --------------------------------------------------------------
        // STATE COMMANDS
        // --------------------------------------------------------------
        switch (state)
    1c2e:	80 91 50 01 	lds	r24, 0x0150
    1c32:	90 91 51 01 	lds	r25, 0x0151
    1c36:	85 30       	cpi	r24, 0x05	; 5
    1c38:	91 05       	cpc	r25, r1
    1c3a:	09 f4       	brne	.+2      	; 0x1c3e <main+0x534>
    1c3c:	ea c2       	rjmp	.+1492   	; 0x2212 <main+0xb08>
    1c3e:	5c f4       	brge	.+22     	; 0x1c56 <main+0x54c>
    1c40:	82 30       	cpi	r24, 0x02	; 2
    1c42:	91 05       	cpc	r25, r1
    1c44:	09 f4       	brne	.+2      	; 0x1c48 <main+0x53e>
    1c46:	c6 c0       	rjmp	.+396    	; 0x1dd4 <main+0x6ca>
    1c48:	83 30       	cpi	r24, 0x03	; 3
    1c4a:	91 05       	cpc	r25, r1
    1c4c:	81 f0       	breq	.+32     	; 0x1c6e <main+0x564>
    1c4e:	89 2b       	or	r24, r25
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <main+0x54a>
    1c52:	a6 c0       	rjmp	.+332    	; 0x1da0 <main+0x696>
    1c54:	ed c5       	rjmp	.+3034   	; 0x2830 <main+0x1126>
    1c56:	86 31       	cpi	r24, 0x16	; 22
    1c58:	91 05       	cpc	r25, r1
    1c5a:	09 f4       	brne	.+2      	; 0x1c5e <main+0x554>
    1c5c:	ce c5       	rjmp	.+2972   	; 0x27fa <main+0x10f0>
    1c5e:	83 36       	cpi	r24, 0x63	; 99
    1c60:	91 05       	cpc	r25, r1
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <main+0x55c>
    1c64:	5d c5       	rjmp	.+2746   	; 0x2720 <main+0x1016>
    1c66:	45 97       	sbiw	r24, 0x15	; 21
    1c68:	09 f0       	breq	.+2      	; 0x1c6c <main+0x562>
    1c6a:	e2 c5       	rjmp	.+3012   	; 0x2830 <main+0x1126>
    1c6c:	dc c5       	rjmp	.+3000   	; 0x2826 <main+0x111c>
                //}
                //
                    
                    
                    //Check if we have the puck
                    if (PT2_left_inside > 1000 &&  PT3_right_inside > 1000)
    1c6e:	09 3e       	cpi	r16, 0xE9	; 233
    1c70:	23 e0       	ldi	r18, 0x03	; 3
    1c72:	12 07       	cpc	r17, r18
    1c74:	84 f0       	brlt	.+32     	; 0x1c96 <main+0x58c>
    1c76:	39 ee       	ldi	r19, 0xE9	; 233
    1c78:	e3 16       	cp	r14, r19
    1c7a:	33 e0       	ldi	r19, 0x03	; 3
    1c7c:	f3 06       	cpc	r15, r19
    1c7e:	5c f0       	brlt	.+22     	; 0x1c96 <main+0x58c>
                    {
                    state = GO_TO_GOAL_WITH_PUCK;
    1c80:	85 e0       	ldi	r24, 0x05	; 5
    1c82:	90 e0       	ldi	r25, 0x00	; 0
    1c84:	90 93 51 01 	sts	0x0151, r25
    1c88:	80 93 50 01 	sts	0x0150, r24
                    //turnOnBlueLED();
                     
                    status_go_to_goal = 0;
    1c8c:	69 96       	adiw	r28, 0x19	; 25
    1c8e:	1f ae       	std	Y+63, r1	; 0x3f
    1c90:	1e ae       	std	Y+62, r1	; 0x3e
    1c92:	69 97       	sbiw	r28, 0x19	; 25
                    break;
    1c94:	0e ce       	rjmp	.-996    	; 0x18b2 <main+0x1a8>
                    max_lr = 0;
                else
                    max_lr = 1;
                    
                //Check if the puck is up or down
                if (max_lr == 0)
    1c96:	ca 14       	cp	r12, r10
    1c98:	db 04       	cpc	r13, r11
    1c9a:	64 f4       	brge	.+24     	; 0x1cb4 <main+0x5aa>
                {
                    if (PT1_left_outside >= PT6_back_left)
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	a8 14       	cp	r10, r8
    1ca2:	b9 04       	cpc	r11, r9
    1ca4:	14 f0       	brlt	.+4      	; 0x1caa <main+0x5a0>
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
                        half_range = 0;
                    else
                        half_range = 1;
    1caa:	69 96       	adiw	r28, 0x19	; 25
    1cac:	9f af       	std	Y+63, r25	; 0x3f
    1cae:	8e af       	std	Y+62, r24	; 0x3e
    1cb0:	69 97       	sbiw	r28, 0x19	; 25
    1cb2:	0b c0       	rjmp	.+22     	; 0x1cca <main+0x5c0>
                }
                else
                {
                    if (PT4_right_outside >= PT5_back_right)
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	c6 14       	cp	r12, r6
    1cba:	d7 04       	cpc	r13, r7
    1cbc:	14 f0       	brlt	.+4      	; 0x1cc2 <main+0x5b8>
    1cbe:	80 e0       	ldi	r24, 0x00	; 0
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
                if (max_lr == 0)
                {
                    if (PT1_left_outside >= PT6_back_left)
                        half_range = 0;
                    else
                        half_range = 1;
    1cc2:	69 96       	adiw	r28, 0x19	; 25
    1cc4:	9f af       	std	Y+63, r25	; 0x3f
    1cc6:	8e af       	std	Y+62, r24	; 0x3e
    1cc8:	69 97       	sbiw	r28, 0x19	; 25
                    max_pt_backs = PT6_back_left;
                    
                    
                    
                // If Insides see the puck
                if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 250)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) {
    1cca:	b8 01       	movw	r22, r16
    1ccc:	6e 0d       	add	r22, r14
    1cce:	7f 1d       	adc	r23, r15
    1cd0:	88 27       	eor	r24, r24
    1cd2:	77 fd       	sbrc	r23, 7
    1cd4:	80 95       	com	r24
    1cd6:	98 2f       	mov	r25, r24
    1cd8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e0       	ldi	r20, 0x00	; 0
    1ce2:	5f e3       	ldi	r21, 0x3F	; 63
    1ce4:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    1ce8:	20 e0       	ldi	r18, 0x00	; 0
    1cea:	30 e0       	ldi	r19, 0x00	; 0
    1cec:	4a e7       	ldi	r20, 0x7A	; 122
    1cee:	53 e4       	ldi	r21, 0x43	; 67
    1cf0:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    1cf4:	88 23       	and	r24, r24
    1cf6:	64 f1       	brlt	.+88     	; 0x1d50 <main+0x646>
    1cf8:	8d eb       	ldi	r24, 0xBD	; 189
    1cfa:	a8 16       	cp	r10, r24
    1cfc:	82 e0       	ldi	r24, 0x02	; 2
    1cfe:	b8 06       	cpc	r11, r24
    1d00:	3c f5       	brge	.+78     	; 0x1d50 <main+0x646>
    1d02:	9d eb       	ldi	r25, 0xBD	; 189
    1d04:	c9 16       	cp	r12, r25
    1d06:	92 e0       	ldi	r25, 0x02	; 2
    1d08:	d9 06       	cpc	r13, r25
    1d0a:	14 f5       	brge	.+68     	; 0x1d50 <main+0x646>
                    //turnOnBlueLED();
                    status_go_to_goal = 1;
                    int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
    1d0c:	c8 01       	movw	r24, r16
    1d0e:	8e 19       	sub	r24, r14
    1d10:	9f 09       	sbc	r25, r15
    1d12:	1a f4       	brpl	.+6      	; 0x1d1a <main+0x610>
    1d14:	91 95       	neg	r25
    1d16:	81 95       	neg	r24
    1d18:	91 09       	sbc	r25, r1
    1d1a:	68 2f       	mov	r22, r24
    1d1c:	79 2f       	mov	r23, r25
                    if (PT2_left_inside >= PT3_right_inside) {
    1d1e:	0e 15       	cp	r16, r14
    1d20:	1f 05       	cpc	r17, r15
    1d22:	5c f0       	brlt	.+22     	; 0x1d3a <main+0x630>
                        move_robot_to_puck(1,diff_PT_inside);
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <move_robot_to_puck>
                    
                    
                // If Insides see the puck
                if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 250)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) {
                    //turnOnBlueLED();
                    status_go_to_goal = 1;
    1d2c:	a1 e0       	ldi	r26, 0x01	; 1
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	69 96       	adiw	r28, 0x19	; 25
    1d32:	bf af       	std	Y+63, r27	; 0x3f
    1d34:	ae af       	std	Y+62, r26	; 0x3e
    1d36:	69 97       	sbiw	r28, 0x19	; 25
    1d38:	bc cd       	rjmp	.-1160   	; 0x18b2 <main+0x1a8>
                    if (PT2_left_inside >= PT3_right_inside) {
                        move_robot_to_puck(1,diff_PT_inside);
                            
                    }
                    else{
                        move_robot_to_puck(0,diff_PT_inside);
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 f1 0a 	call	0x15e2	; 0x15e2 <move_robot_to_puck>
                    
                    
                // If Insides see the puck
                if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 250)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700))) {
                    //turnOnBlueLED();
                    status_go_to_goal = 1;
    1d42:	e1 e0       	ldi	r30, 0x01	; 1
    1d44:	f0 e0       	ldi	r31, 0x00	; 0
    1d46:	69 96       	adiw	r28, 0x19	; 25
    1d48:	ff af       	std	Y+63, r31	; 0x3f
    1d4a:	ee af       	std	Y+62, r30	; 0x3e
    1d4c:	69 97       	sbiw	r28, 0x19	; 25
    1d4e:	b1 cd       	rjmp	.-1182   	; 0x18b2 <main+0x1a8>
                // If Insides do not see the puck
                else {
                    //turnOffBlueLED();
                    status_go_to_goal = 0;
                    //Case where the puck is in front
                    if (half_range == 0)
    1d50:	69 96       	adiw	r28, 0x19	; 25
    1d52:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d54:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d56:	69 97       	sbiw	r28, 0x19	; 25
    1d58:	23 2b       	or	r18, r19
    1d5a:	89 f4       	brne	.+34     	; 0x1d7e <main+0x674>
                    {
                        if (PT1_left_outside >= PT4_right_outside) {
    1d5c:	ac 14       	cp	r10, r12
    1d5e:	bd 04       	cpc	r11, r13
    1d60:	3c f0       	brlt	.+14     	; 0x1d70 <main+0x666>
                            turn_left();
    1d62:	0e 94 3e 0b 	call	0x167c	; 0x167c <turn_left>
                    }
                }
                // If Insides do not see the puck
                else {
                    //turnOffBlueLED();
                    status_go_to_goal = 0;
    1d66:	69 96       	adiw	r28, 0x19	; 25
    1d68:	1f ae       	std	Y+63, r1	; 0x3f
    1d6a:	1e ae       	std	Y+62, r1	; 0x3e
    1d6c:	69 97       	sbiw	r28, 0x19	; 25
    1d6e:	a1 cd       	rjmp	.-1214   	; 0x18b2 <main+0x1a8>
                    {
                        if (PT1_left_outside >= PT4_right_outside) {
                            turn_left();
                        }
                        else
                            turn_right();
    1d70:	0e 94 4b 0b 	call	0x1696	; 0x1696 <turn_right>
                    }
                }
                // If Insides do not see the puck
                else {
                    //turnOffBlueLED();
                    status_go_to_goal = 0;
    1d74:	69 96       	adiw	r28, 0x19	; 25
    1d76:	1f ae       	std	Y+63, r1	; 0x3f
    1d78:	1e ae       	std	Y+62, r1	; 0x3e
    1d7a:	69 97       	sbiw	r28, 0x19	; 25
    1d7c:	9a cd       	rjmp	.-1228   	; 0x18b2 <main+0x1a8>
                        }
                        else
                            turn_right();
                    }
                    else{
                        if (PT6_back_left >= PT5_back_right) {
    1d7e:	86 14       	cp	r8, r6
    1d80:	97 04       	cpc	r9, r7
    1d82:	3c f0       	brlt	.+14     	; 0x1d92 <main+0x688>
                            turn_left();
    1d84:	0e 94 3e 0b 	call	0x167c	; 0x167c <turn_left>
                    }
                }
                // If Insides do not see the puck
                else {
                    //turnOffBlueLED();
                    status_go_to_goal = 0;
    1d88:	69 96       	adiw	r28, 0x19	; 25
    1d8a:	1f ae       	std	Y+63, r1	; 0x3f
    1d8c:	1e ae       	std	Y+62, r1	; 0x3e
    1d8e:	69 97       	sbiw	r28, 0x19	; 25
    1d90:	90 cd       	rjmp	.-1248   	; 0x18b2 <main+0x1a8>
                    else{
                        if (PT6_back_left >= PT5_back_right) {
                            turn_left();
                        }
                        else
                            turn_right();
    1d92:	0e 94 4b 0b 	call	0x1696	; 0x1696 <turn_right>
                    }
                }
                // If Insides do not see the puck
                else {
                    //turnOffBlueLED();
                    status_go_to_goal = 0;
    1d96:	69 96       	adiw	r28, 0x19	; 25
    1d98:	1f ae       	std	Y+63, r1	; 0x3f
    1d9a:	1e ae       	std	Y+62, r1	; 0x3e
    1d9c:	69 97       	sbiw	r28, 0x19	; 25
    1d9e:	89 cd       	rjmp	.-1262   	; 0x18b2 <main+0x1a8>
                    
                // --------------------------------------------------------------
                // INITIAL STATE
                // --------------------------------------------------------------
            case INITIAL_STATE:
                if (check(PINB,2))
    1da0:	1a 9b       	sbis	0x03, 2	; 3
    1da2:	07 c0       	rjmp	.+14     	; 0x1db2 <main+0x6a8>
                {
                    goal_pos_x = GOAL_A_POS_X;
    1da4:	8c e9       	ldi	r24, 0x9C	; 156
    1da6:	9f ef       	ldi	r25, 0xFF	; 255
    1da8:	6f 96       	adiw	r28, 0x1f	; 31
    1daa:	9f af       	std	Y+63, r25	; 0x3f
    1dac:	8e af       	std	Y+62, r24	; 0x3e
    1dae:	6f 97       	sbiw	r28, 0x1f	; 31
    1db0:	06 c0       	rjmp	.+12     	; 0x1dbe <main+0x6b4>
                    //                        goal_pos_x = TARGETS_X[TARGET_NUM];
                    //                        goal_pos_y = TARGETS_Y[TARGET_NUM];
                    //
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
    1db2:	a3 e7       	ldi	r26, 0x73	; 115
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	6f 96       	adiw	r28, 0x1f	; 31
    1db8:	bf af       	std	Y+63, r27	; 0x3f
    1dba:	ae af       	std	Y+62, r26	; 0x3e
    1dbc:	6f 97       	sbiw	r28, 0x1f	; 31
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
    1dbe:	83 e0       	ldi	r24, 0x03	; 3
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	90 93 51 01 	sts	0x0151, r25
    1dc6:	80 93 50 01 	sts	0x0150, r24
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    1dca:	69 96       	adiw	r28, 0x19	; 25
    1dcc:	1f ae       	std	Y+63, r1	; 0x3f
    1dce:	1e ae       	std	Y+62, r1	; 0x3e
    1dd0:	69 97       	sbiw	r28, 0x19	; 25
                //                    state = GO_TO_GOAL_CURVED;
                state = FIND_PUCK;
                break;
    1dd2:	6f cd       	rjmp	.-1314   	; 0x18b2 <main+0x1a8>
                // --------------------------------------------------------------
				case GO_TO_GOAL_CURVED:
				//m_green(ON);
				//turnOnBlueLED();
				
				if ( PT2_left_inside < 750 || PT3_right_inside < 750 )
    1dd4:	0e 3e       	cpi	r16, 0xEE	; 238
    1dd6:	12 40       	sbci	r17, 0x02	; 2
    1dd8:	2c f0       	brlt	.+10     	; 0x1de4 <main+0x6da>
    1dda:	ee ee       	ldi	r30, 0xEE	; 238
    1ddc:	ee 16       	cp	r14, r30
    1dde:	e2 e0       	ldi	r30, 0x02	; 2
    1de0:	fe 06       	cpc	r15, r30
    1de2:	5c f4       	brge	.+22     	; 0x1dfa <main+0x6f0>
				{
					state = FIND_PUCK;
    1de4:	83 e0       	ldi	r24, 0x03	; 3
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	90 93 51 01 	sts	0x0151, r25
    1dec:	80 93 50 01 	sts	0x0150, r24
					status_go_to_goal = 0;
    1df0:	69 96       	adiw	r28, 0x19	; 25
    1df2:	1f ae       	std	Y+63, r1	; 0x3f
    1df4:	1e ae       	std	Y+62, r1	; 0x3e
    1df6:	69 97       	sbiw	r28, 0x19	; 25
					break;
    1df8:	5c cd       	rjmp	.-1352   	; 0x18b2 <main+0x1a8>
				}
				
				if (status_go_to_goal == 0)
    1dfa:	69 96       	adiw	r28, 0x19	; 25
    1dfc:	2e ad       	ldd	r18, Y+62	; 0x3e
    1dfe:	3f ad       	ldd	r19, Y+63	; 0x3f
    1e00:	69 97       	sbiw	r28, 0x19	; 25
    1e02:	23 2b       	or	r18, r19
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <main+0x6fe>
    1e06:	e8 c1       	rjmp	.+976    	; 0x21d8 <main+0xace>
				{
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1e08:	ed ac       	ldd	r14, Y+61	; 0x3d
    1e0a:	fe ac       	ldd	r15, Y+62	; 0x3e
    1e0c:	c7 01       	movw	r24, r14
    1e0e:	6f 96       	adiw	r28, 0x1f	; 31
    1e10:	ae ad       	ldd	r26, Y+62	; 0x3e
    1e12:	bf ad       	ldd	r27, Y+63	; 0x3f
    1e14:	6f 97       	sbiw	r28, 0x1f	; 31
    1e16:	8a 1b       	sub	r24, r26
    1e18:	9b 0b       	sbc	r25, r27
    1e1a:	21 96       	adiw	r28, 0x01	; 1
    1e1c:	0e ad       	ldd	r16, Y+62	; 0x3e
    1e1e:	1f ad       	ldd	r17, Y+63	; 0x3f
    1e20:	21 97       	sbiw	r28, 0x01	; 1
    1e22:	88 9f       	mul	r24, r24
    1e24:	b0 01       	movw	r22, r0
    1e26:	89 9f       	mul	r24, r25
    1e28:	70 0d       	add	r23, r0
    1e2a:	70 0d       	add	r23, r0
    1e2c:	11 24       	eor	r1, r1
    1e2e:	00 9f       	mul	r16, r16
    1e30:	c0 01       	movw	r24, r0
    1e32:	01 9f       	mul	r16, r17
    1e34:	90 0d       	add	r25, r0
    1e36:	90 0d       	add	r25, r0
    1e38:	11 24       	eor	r1, r1
    1e3a:	68 0f       	add	r22, r24
    1e3c:	79 1f       	adc	r23, r25
    1e3e:	88 27       	eor	r24, r24
    1e40:	77 fd       	sbrc	r23, 7
    1e42:	80 95       	com	r24
    1e44:	98 2f       	mov	r25, r24
    1e46:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1e4a:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    1e4e:	a3 96       	adiw	r28, 0x23	; 35
    1e50:	6c af       	std	Y+60, r22	; 0x3c
    1e52:	7d af       	std	Y+61, r23	; 0x3d
    1e54:	8e af       	std	Y+62, r24	; 0x3e
    1e56:	9f af       	std	Y+63, r25	; 0x3f
    1e58:	a3 97       	sbiw	r28, 0x23	; 35
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	40 ea       	ldi	r20, 0xA0	; 160
    1e60:	50 e4       	ldi	r21, 0x40	; 64
    1e62:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    1e66:	88 23       	and	r24, r24
    1e68:	0c f4       	brge	.+2      	; 0x1e6c <main+0x762>
    1e6a:	16 cd       	rjmp	.-1492   	; 0x1898 <main+0x18e>
					status_go_to_goal = 1;
					else
					{
		            
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    1e6c:	66 27       	eor	r22, r22
    1e6e:	77 27       	eor	r23, r23
    1e70:	60 1b       	sub	r22, r16
    1e72:	71 0b       	sbc	r23, r17
    1e74:	88 27       	eor	r24, r24
    1e76:	77 fd       	sbrc	r23, 7
    1e78:	80 95       	com	r24
    1e7a:	98 2f       	mov	r25, r24
    1e7c:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1e80:	4b 01       	movw	r8, r22
    1e82:	5c 01       	movw	r10, r24
					if (dist_goal < THRESHOLD_DIST_GOAL)
					status_go_to_goal = 1;
					else
					{
		            
						dir_x = goal_pos_x-x_robot;
    1e84:	6f 96       	adiw	r28, 0x1f	; 31
    1e86:	6e ad       	ldd	r22, Y+62	; 0x3e
    1e88:	7f ad       	ldd	r23, Y+63	; 0x3f
    1e8a:	6f 97       	sbiw	r28, 0x1f	; 31
    1e8c:	6e 19       	sub	r22, r14
    1e8e:	7f 09       	sbc	r23, r15
    1e90:	88 27       	eor	r24, r24
    1e92:	77 fd       	sbrc	r23, 7
    1e94:	80 95       	com	r24
    1e96:	98 2f       	mov	r25, r24
    1e98:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1e9c:	90 58       	subi	r25, 0x80	; 128
    1e9e:	a5 01       	movw	r20, r10
    1ea0:	94 01       	movw	r18, r8
    1ea2:	0e 94 f7 19 	call	0x33ee	; 0x33ee <atan2>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	44 e3       	ldi	r20, 0x34	; 52
    1eac:	53 e4       	ldi	r21, 0x43	; 67
    1eae:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    1eb2:	2b ed       	ldi	r18, 0xDB	; 219
    1eb4:	3f e0       	ldi	r19, 0x0F	; 15
    1eb6:	49 e4       	ldi	r20, 0x49	; 73
    1eb8:	50 e4       	ldi	r21, 0x40	; 64
    1eba:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divsf3>
    1ebe:	b6 2e       	mov	r11, r22
    1ec0:	a7 2e       	mov	r10, r23
    1ec2:	98 2e       	mov	r9, r24
    1ec4:	89 2e       	mov	r8, r25
    1ec6:	a4 96       	adiw	r28, 0x24	; 36
    1ec8:	6f af       	std	Y+63, r22	; 0x3f
    1eca:	a4 97       	sbiw	r28, 0x24	; 36
    1ecc:	a5 96       	adiw	r28, 0x25	; 37
    1ece:	7f af       	std	Y+63, r23	; 0x3f
    1ed0:	a5 97       	sbiw	r28, 0x25	; 37
    1ed2:	a6 96       	adiw	r28, 0x26	; 38
    1ed4:	8f af       	std	Y+63, r24	; 0x3f
    1ed6:	a6 97       	sbiw	r28, 0x26	; 38
    1ed8:	a7 96       	adiw	r28, 0x27	; 39
    1eda:	9f af       	std	Y+63, r25	; 0x3f
    1edc:	a7 97       	sbiw	r28, 0x27	; 39
		            
		            
						float angle_dir_aux = dir_angle-180;
    1ede:	20 e0       	ldi	r18, 0x00	; 0
    1ee0:	30 e0       	ldi	r19, 0x00	; 0
    1ee2:	44 e3       	ldi	r20, 0x34	; 52
    1ee4:	53 e4       	ldi	r21, 0x43	; 67
    1ee6:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    1eea:	76 2e       	mov	r7, r22
    1eec:	67 2e       	mov	r6, r23
    1eee:	28 96       	adiw	r28, 0x08	; 8
    1ef0:	8f af       	std	Y+63, r24	; 0x3f
    1ef2:	28 97       	sbiw	r28, 0x08	; 8
    1ef4:	29 96       	adiw	r28, 0x09	; 9
    1ef6:	9f af       	std	Y+63, r25	; 0x3f
    1ef8:	29 97       	sbiw	r28, 0x09	; 9
						float add_360 = 0;
						if (angle_dir_aux < -180)
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	44 e3       	ldi	r20, 0x34	; 52
    1f00:	53 ec       	ldi	r21, 0xC3	; 195
    1f02:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    1f06:	88 23       	and	r24, r24
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <main+0x802>
    1f0a:	9e c4       	rjmp	.+2364   	; 0x2848 <main+0x113e>
						{
							angle_dir_aux += 360;
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	44 eb       	ldi	r20, 0xB4	; 180
    1f12:	53 e4       	ldi	r21, 0x43	; 67
    1f14:	28 96       	adiw	r28, 0x08	; 8
    1f16:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f18:	28 97       	sbiw	r28, 0x08	; 8
    1f1a:	29 96       	adiw	r28, 0x09	; 9
    1f1c:	ef ad       	ldd	r30, Y+63	; 0x3f
    1f1e:	29 97       	sbiw	r28, 0x09	; 9
    1f20:	67 2d       	mov	r22, r7
    1f22:	76 2d       	mov	r23, r6
    1f24:	8f 2f       	mov	r24, r31
    1f26:	9e 2f       	mov	r25, r30
    1f28:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    1f2c:	28 96       	adiw	r28, 0x08	; 8
    1f2e:	6f af       	std	Y+63, r22	; 0x3f
    1f30:	28 97       	sbiw	r28, 0x08	; 8
    1f32:	29 96       	adiw	r28, 0x09	; 9
    1f34:	7f af       	std	Y+63, r23	; 0x3f
    1f36:	29 97       	sbiw	r28, 0x09	; 9
    1f38:	68 2e       	mov	r6, r24
    1f3a:	79 2e       	mov	r7, r25
							else
							diff_theta = (theta_robot) - dir_angle;
							bank = 1;
							//commands_var = 2;
						}
						else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1f3c:	00 91 56 01 	lds	r16, 0x0156
    1f40:	10 91 57 01 	lds	r17, 0x0157
    1f44:	b8 01       	movw	r22, r16
    1f46:	88 27       	eor	r24, r24
    1f48:	77 fd       	sbrc	r23, 7
    1f4a:	80 95       	com	r24
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1f52:	6b 01       	movw	r12, r22
    1f54:	7c 01       	movw	r14, r24
    1f56:	9b 01       	movw	r18, r22
    1f58:	ac 01       	movw	r20, r24
    1f5a:	6b 2d       	mov	r22, r11
    1f5c:	7a 2d       	mov	r23, r10
    1f5e:	89 2d       	mov	r24, r9
    1f60:	98 2d       	mov	r25, r8
    1f62:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    1f66:	88 23       	and	r24, r24
    1f68:	0c f0       	brlt	.+2      	; 0x1f6c <main+0x862>
    1f6a:	74 c0       	rjmp	.+232    	; 0x2054 <main+0x94a>
    1f6c:	77 c0       	rjmp	.+238    	; 0x205c <main+0x952>
							angle_dir_aux += 360;
							add_360 = 1;
						}
		            
		            
						if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1f6e:	a7 01       	movw	r20, r14
    1f70:	96 01       	movw	r18, r12
    1f72:	6b 2d       	mov	r22, r11
    1f74:	7a 2d       	mov	r23, r10
    1f76:	89 2d       	mov	r24, r9
    1f78:	98 2d       	mov	r25, r8
    1f7a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    1f7e:	88 23       	and	r24, r24
    1f80:	bc f0       	brlt	.+46     	; 0x1fb0 <main+0x8a6>
						{
							diff_theta = dir_angle - theta_robot;
    1f82:	a7 01       	movw	r20, r14
    1f84:	96 01       	movw	r18, r12
    1f86:	6b 2d       	mov	r22, r11
    1f88:	7a 2d       	mov	r23, r10
    1f8a:	89 2d       	mov	r24, r9
    1f8c:	98 2d       	mov	r25, r8
    1f8e:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    1f92:	28 96       	adiw	r28, 0x08	; 8
    1f94:	6f af       	std	Y+63, r22	; 0x3f
    1f96:	28 97       	sbiw	r28, 0x08	; 8
    1f98:	29 96       	adiw	r28, 0x09	; 9
    1f9a:	7f af       	std	Y+63, r23	; 0x3f
    1f9c:	29 97       	sbiw	r28, 0x09	; 9
    1f9e:	66 96       	adiw	r28, 0x16	; 22
    1fa0:	8f af       	std	Y+63, r24	; 0x3f
    1fa2:	66 97       	sbiw	r28, 0x16	; 22
    1fa4:	67 96       	adiw	r28, 0x17	; 23
    1fa6:	9f af       	std	Y+63, r25	; 0x3f
    1fa8:	67 97       	sbiw	r28, 0x17	; 23
							bank = 0;
    1faa:	00 e0       	ldi	r16, 0x00	; 0
    1fac:	10 e0       	ldi	r17, 0x00	; 0
    1fae:	fc c0       	rjmp	.+504    	; 0x21a8 <main+0xa9e>
							//commands_var = 1;
						}
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    1fb0:	a7 01       	movw	r20, r14
    1fb2:	96 01       	movw	r18, r12
    1fb4:	28 96       	adiw	r28, 0x08	; 8
    1fb6:	af ad       	ldd	r26, Y+63	; 0x3f
    1fb8:	28 97       	sbiw	r28, 0x08	; 8
    1fba:	29 96       	adiw	r28, 0x09	; 9
    1fbc:	ff ad       	ldd	r31, Y+63	; 0x3f
    1fbe:	29 97       	sbiw	r28, 0x09	; 9
    1fc0:	67 2d       	mov	r22, r7
    1fc2:	76 2d       	mov	r23, r6
    1fc4:	8a 2f       	mov	r24, r26
    1fc6:	9f 2f       	mov	r25, r31
    1fc8:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    1fcc:	18 16       	cp	r1, r24
    1fce:	5c f0       	brlt	.+22     	; 0x1fe6 <main+0x8dc>
    1fd0:	a7 01       	movw	r20, r14
    1fd2:	96 01       	movw	r18, r12
    1fd4:	6b 2d       	mov	r22, r11
    1fd6:	7a 2d       	mov	r23, r10
    1fd8:	89 2d       	mov	r24, r9
    1fda:	98 2d       	mov	r25, r8
    1fdc:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    1fe0:	88 23       	and	r24, r24
    1fe2:	0c f0       	brlt	.+2      	; 0x1fe6 <main+0x8dc>
    1fe4:	b5 c0       	rjmp	.+362    	; 0x2150 <main+0xa46>
						{
							if (theta_robot < 0)
    1fe6:	11 23       	and	r17, r17
    1fe8:	f4 f4       	brge	.+60     	; 0x2026 <main+0x91c>
							diff_theta = (theta_robot+360) - dir_angle;
    1fea:	b8 01       	movw	r22, r16
    1fec:	68 59       	subi	r22, 0x98	; 152
    1fee:	7e 4f       	sbci	r23, 0xFE	; 254
    1ff0:	88 27       	eor	r24, r24
    1ff2:	77 fd       	sbrc	r23, 7
    1ff4:	80 95       	com	r24
    1ff6:	98 2f       	mov	r25, r24
    1ff8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    1ffc:	2b 2d       	mov	r18, r11
    1ffe:	3a 2d       	mov	r19, r10
    2000:	49 2d       	mov	r20, r9
    2002:	58 2d       	mov	r21, r8
    2004:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2008:	28 96       	adiw	r28, 0x08	; 8
    200a:	6f af       	std	Y+63, r22	; 0x3f
    200c:	28 97       	sbiw	r28, 0x08	; 8
    200e:	29 96       	adiw	r28, 0x09	; 9
    2010:	7f af       	std	Y+63, r23	; 0x3f
    2012:	29 97       	sbiw	r28, 0x09	; 9
    2014:	66 96       	adiw	r28, 0x16	; 22
    2016:	8f af       	std	Y+63, r24	; 0x3f
    2018:	66 97       	sbiw	r28, 0x16	; 22
    201a:	67 96       	adiw	r28, 0x17	; 23
    201c:	9f af       	std	Y+63, r25	; 0x3f
    201e:	67 97       	sbiw	r28, 0x17	; 23
							else
							diff_theta = (theta_robot) - dir_angle;
							bank = 1;
    2020:	01 e0       	ldi	r16, 0x01	; 1
    2022:	10 e0       	ldi	r17, 0x00	; 0
    2024:	c1 c0       	rjmp	.+386    	; 0x21a8 <main+0xa9e>
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
						{
							if (theta_robot < 0)
							diff_theta = (theta_robot+360) - dir_angle;
							else
							diff_theta = (theta_robot) - dir_angle;
    2026:	2b 2d       	mov	r18, r11
    2028:	3a 2d       	mov	r19, r10
    202a:	49 2d       	mov	r20, r9
    202c:	58 2d       	mov	r21, r8
    202e:	c7 01       	movw	r24, r14
    2030:	b6 01       	movw	r22, r12
    2032:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2036:	28 96       	adiw	r28, 0x08	; 8
    2038:	6f af       	std	Y+63, r22	; 0x3f
    203a:	28 97       	sbiw	r28, 0x08	; 8
    203c:	29 96       	adiw	r28, 0x09	; 9
    203e:	7f af       	std	Y+63, r23	; 0x3f
    2040:	29 97       	sbiw	r28, 0x09	; 9
    2042:	66 96       	adiw	r28, 0x16	; 22
    2044:	8f af       	std	Y+63, r24	; 0x3f
    2046:	66 97       	sbiw	r28, 0x16	; 22
    2048:	67 96       	adiw	r28, 0x17	; 23
    204a:	9f af       	std	Y+63, r25	; 0x3f
    204c:	67 97       	sbiw	r28, 0x17	; 23
							bank = 1;
    204e:	01 e0       	ldi	r16, 0x01	; 1
    2050:	10 e0       	ldi	r17, 0x00	; 0
    2052:	aa c0       	rjmp	.+340    	; 0x21a8 <main+0xa9e>
							//commands_var = 2;
						}
						else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    2054:	0c 34       	cpi	r16, 0x4C	; 76
    2056:	bf ef       	ldi	r27, 0xFF	; 255
    2058:	1b 07       	cpc	r17, r27
    205a:	9c f4       	brge	.+38     	; 0x2082 <main+0x978>
    205c:	a7 01       	movw	r20, r14
    205e:	96 01       	movw	r18, r12
    2060:	28 96       	adiw	r28, 0x08	; 8
    2062:	bf ad       	ldd	r27, Y+63	; 0x3f
    2064:	28 97       	sbiw	r28, 0x08	; 8
    2066:	29 96       	adiw	r28, 0x09	; 9
    2068:	af ad       	ldd	r26, Y+63	; 0x3f
    206a:	29 97       	sbiw	r28, 0x09	; 9
    206c:	6b 2f       	mov	r22, r27
    206e:	7a 2f       	mov	r23, r26
    2070:	86 2d       	mov	r24, r6
    2072:	97 2d       	mov	r25, r7
    2074:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    2078:	18 16       	cp	r1, r24
    207a:	cc f1       	brlt	.+114    	; 0x20ee <main+0x9e4>
    207c:	05 3b       	cpi	r16, 0xB5	; 181
    207e:	11 05       	cpc	r17, r1
    2080:	b4 f5       	brge	.+108    	; 0x20ee <main+0x9e4>
						{
							if (theta_robot < 0)
    2082:	11 23       	and	r17, r17
    2084:	bc f4       	brge	.+46     	; 0x20b4 <main+0x9aa>
							diff_theta = dir_angle - theta_robot;
    2086:	a7 01       	movw	r20, r14
    2088:	96 01       	movw	r18, r12
    208a:	6b 2d       	mov	r22, r11
    208c:	7a 2d       	mov	r23, r10
    208e:	89 2d       	mov	r24, r9
    2090:	98 2d       	mov	r25, r8
    2092:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2096:	28 96       	adiw	r28, 0x08	; 8
    2098:	6f af       	std	Y+63, r22	; 0x3f
    209a:	28 97       	sbiw	r28, 0x08	; 8
    209c:	29 96       	adiw	r28, 0x09	; 9
    209e:	7f af       	std	Y+63, r23	; 0x3f
    20a0:	29 97       	sbiw	r28, 0x09	; 9
    20a2:	66 96       	adiw	r28, 0x16	; 22
    20a4:	8f af       	std	Y+63, r24	; 0x3f
    20a6:	66 97       	sbiw	r28, 0x16	; 22
    20a8:	67 96       	adiw	r28, 0x17	; 23
    20aa:	9f af       	std	Y+63, r25	; 0x3f
    20ac:	67 97       	sbiw	r28, 0x17	; 23
							else
							diff_theta = (dir_angle + 360) - theta_robot;
							bank = 0;
    20ae:	00 e0       	ldi	r16, 0x00	; 0
    20b0:	10 e0       	ldi	r17, 0x00	; 0
    20b2:	7a c0       	rjmp	.+244    	; 0x21a8 <main+0xa9e>
						else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
						{
							if (theta_robot < 0)
							diff_theta = dir_angle - theta_robot;
							else
							diff_theta = (dir_angle + 360) - theta_robot;
    20b4:	20 e0       	ldi	r18, 0x00	; 0
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	44 eb       	ldi	r20, 0xB4	; 180
    20ba:	53 e4       	ldi	r21, 0x43	; 67
    20bc:	6b 2d       	mov	r22, r11
    20be:	7a 2d       	mov	r23, r10
    20c0:	89 2d       	mov	r24, r9
    20c2:	98 2d       	mov	r25, r8
    20c4:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    20c8:	a7 01       	movw	r20, r14
    20ca:	96 01       	movw	r18, r12
    20cc:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    20d0:	28 96       	adiw	r28, 0x08	; 8
    20d2:	6f af       	std	Y+63, r22	; 0x3f
    20d4:	28 97       	sbiw	r28, 0x08	; 8
    20d6:	29 96       	adiw	r28, 0x09	; 9
    20d8:	7f af       	std	Y+63, r23	; 0x3f
    20da:	29 97       	sbiw	r28, 0x09	; 9
    20dc:	66 96       	adiw	r28, 0x16	; 22
    20de:	8f af       	std	Y+63, r24	; 0x3f
    20e0:	66 97       	sbiw	r28, 0x16	; 22
    20e2:	67 96       	adiw	r28, 0x17	; 23
    20e4:	9f af       	std	Y+63, r25	; 0x3f
    20e6:	67 97       	sbiw	r28, 0x17	; 23
							bank = 0;
    20e8:	00 e0       	ldi	r16, 0x00	; 0
    20ea:	10 e0       	ldi	r17, 0x00	; 0
    20ec:	5d c0       	rjmp	.+186    	; 0x21a8 <main+0xa9e>
							//commands_var = 3;
						}
						else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    20ee:	a7 01       	movw	r20, r14
    20f0:	96 01       	movw	r18, r12
    20f2:	6b 2d       	mov	r22, r11
    20f4:	7a 2d       	mov	r23, r10
    20f6:	89 2d       	mov	r24, r9
    20f8:	98 2d       	mov	r25, r8
    20fa:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    20fe:	88 23       	and	r24, r24
    2100:	b4 f5       	brge	.+108    	; 0x216e <main+0xa64>
    2102:	a7 01       	movw	r20, r14
    2104:	96 01       	movw	r18, r12
    2106:	28 96       	adiw	r28, 0x08	; 8
    2108:	bf ad       	ldd	r27, Y+63	; 0x3f
    210a:	28 97       	sbiw	r28, 0x08	; 8
    210c:	29 96       	adiw	r28, 0x09	; 9
    210e:	af ad       	ldd	r26, Y+63	; 0x3f
    2110:	29 97       	sbiw	r28, 0x09	; 9
    2112:	6b 2f       	mov	r22, r27
    2114:	7a 2f       	mov	r23, r26
    2116:	86 2d       	mov	r24, r6
    2118:	97 2d       	mov	r25, r7
    211a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    211e:	18 16       	cp	r1, r24
    2120:	ac f5       	brge	.+106    	; 0x218c <main+0xa82>
						{
							diff_theta = theta_robot - dir_angle;
    2122:	2b 2d       	mov	r18, r11
    2124:	3a 2d       	mov	r19, r10
    2126:	49 2d       	mov	r20, r9
    2128:	58 2d       	mov	r21, r8
    212a:	c7 01       	movw	r24, r14
    212c:	b6 01       	movw	r22, r12
    212e:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2132:	28 96       	adiw	r28, 0x08	; 8
    2134:	6f af       	std	Y+63, r22	; 0x3f
    2136:	28 97       	sbiw	r28, 0x08	; 8
    2138:	29 96       	adiw	r28, 0x09	; 9
    213a:	7f af       	std	Y+63, r23	; 0x3f
    213c:	29 97       	sbiw	r28, 0x09	; 9
    213e:	66 96       	adiw	r28, 0x16	; 22
    2140:	8f af       	std	Y+63, r24	; 0x3f
    2142:	66 97       	sbiw	r28, 0x16	; 22
    2144:	67 96       	adiw	r28, 0x17	; 23
    2146:	9f af       	std	Y+63, r25	; 0x3f
    2148:	67 97       	sbiw	r28, 0x17	; 23
							bank = 1;
    214a:	01 e0       	ldi	r16, 0x01	; 1
    214c:	10 e0       	ldi	r17, 0x00	; 0
    214e:	2c c0       	rjmp	.+88     	; 0x21a8 <main+0xa9e>
							//commands_var = 4;
							}else {
							diff_theta = 0;
							bank = 0;
    2150:	00 e0       	ldi	r16, 0x00	; 0
    2152:	10 e0       	ldi	r17, 0x00	; 0
						{
							diff_theta = theta_robot - dir_angle;
							bank = 1;
							//commands_var = 4;
							}else {
							diff_theta = 0;
    2154:	28 96       	adiw	r28, 0x08	; 8
    2156:	1f ae       	std	Y+63, r1	; 0x3f
    2158:	28 97       	sbiw	r28, 0x08	; 8
    215a:	29 96       	adiw	r28, 0x09	; 9
    215c:	1f ae       	std	Y+63, r1	; 0x3f
    215e:	29 97       	sbiw	r28, 0x09	; 9
    2160:	66 96       	adiw	r28, 0x16	; 22
    2162:	1f ae       	std	Y+63, r1	; 0x3f
    2164:	66 97       	sbiw	r28, 0x16	; 22
    2166:	67 96       	adiw	r28, 0x17	; 23
    2168:	1f ae       	std	Y+63, r1	; 0x3f
    216a:	67 97       	sbiw	r28, 0x17	; 23
    216c:	1d c0       	rjmp	.+58     	; 0x21a8 <main+0xa9e>
							bank = 0;
    216e:	00 e0       	ldi	r16, 0x00	; 0
    2170:	10 e0       	ldi	r17, 0x00	; 0
						{
							diff_theta = theta_robot - dir_angle;
							bank = 1;
							//commands_var = 4;
							}else {
							diff_theta = 0;
    2172:	28 96       	adiw	r28, 0x08	; 8
    2174:	1f ae       	std	Y+63, r1	; 0x3f
    2176:	28 97       	sbiw	r28, 0x08	; 8
    2178:	29 96       	adiw	r28, 0x09	; 9
    217a:	1f ae       	std	Y+63, r1	; 0x3f
    217c:	29 97       	sbiw	r28, 0x09	; 9
    217e:	66 96       	adiw	r28, 0x16	; 22
    2180:	1f ae       	std	Y+63, r1	; 0x3f
    2182:	66 97       	sbiw	r28, 0x16	; 22
    2184:	67 96       	adiw	r28, 0x17	; 23
    2186:	1f ae       	std	Y+63, r1	; 0x3f
    2188:	67 97       	sbiw	r28, 0x17	; 23
    218a:	0e c0       	rjmp	.+28     	; 0x21a8 <main+0xa9e>
							bank = 0;
    218c:	00 e0       	ldi	r16, 0x00	; 0
    218e:	10 e0       	ldi	r17, 0x00	; 0
						{
							diff_theta = theta_robot - dir_angle;
							bank = 1;
							//commands_var = 4;
							}else {
							diff_theta = 0;
    2190:	28 96       	adiw	r28, 0x08	; 8
    2192:	1f ae       	std	Y+63, r1	; 0x3f
    2194:	28 97       	sbiw	r28, 0x08	; 8
    2196:	29 96       	adiw	r28, 0x09	; 9
    2198:	1f ae       	std	Y+63, r1	; 0x3f
    219a:	29 97       	sbiw	r28, 0x09	; 9
    219c:	66 96       	adiw	r28, 0x16	; 22
    219e:	1f ae       	std	Y+63, r1	; 0x3f
    21a0:	66 97       	sbiw	r28, 0x16	; 22
    21a2:	67 96       	adiw	r28, 0x17	; 23
    21a4:	1f ae       	std	Y+63, r1	; 0x3f
    21a6:	67 97       	sbiw	r28, 0x17	; 23
							bank = 0;
							//commands_var = 0;
						}
						commands_var = bank;
		            
						move_robot(diff_theta,bank);
    21a8:	a8 01       	movw	r20, r16
    21aa:	28 96       	adiw	r28, 0x08	; 8
    21ac:	ff ad       	ldd	r31, Y+63	; 0x3f
    21ae:	28 97       	sbiw	r28, 0x08	; 8
    21b0:	29 96       	adiw	r28, 0x09	; 9
    21b2:	ef ad       	ldd	r30, Y+63	; 0x3f
    21b4:	29 97       	sbiw	r28, 0x09	; 9
    21b6:	66 96       	adiw	r28, 0x16	; 22
    21b8:	3f ad       	ldd	r19, Y+63	; 0x3f
    21ba:	66 97       	sbiw	r28, 0x16	; 22
    21bc:	67 96       	adiw	r28, 0x17	; 23
    21be:	2f ad       	ldd	r18, Y+63	; 0x3f
    21c0:	67 97       	sbiw	r28, 0x17	; 23
    21c2:	6f 2f       	mov	r22, r31
    21c4:	7e 2f       	mov	r23, r30
    21c6:	83 2f       	mov	r24, r19
    21c8:	92 2f       	mov	r25, r18
    21ca:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <move_robot>
							}else {
							diff_theta = 0;
							bank = 0;
							//commands_var = 0;
						}
						commands_var = bank;
    21ce:	a9 96       	adiw	r28, 0x29	; 41
    21d0:	1f af       	std	Y+63, r17	; 0x3f
    21d2:	0e af       	std	Y+62, r16	; 0x3e
    21d4:	a9 97       	sbiw	r28, 0x29	; 41
    21d6:	6d cb       	rjmp	.-2342   	; 0x18b2 <main+0x1a8>
						move_robot(diff_theta,bank);
						//move_robot(diff_theta,dist_goal,bank);
					}
	            
				}
				else if (status_go_to_goal == 1)
    21d8:	69 96       	adiw	r28, 0x19	; 25
    21da:	ee ad       	ldd	r30, Y+62	; 0x3e
    21dc:	ff ad       	ldd	r31, Y+63	; 0x3f
    21de:	69 97       	sbiw	r28, 0x19	; 25
    21e0:	31 97       	sbiw	r30, 0x01	; 1
    21e2:	09 f0       	breq	.+2      	; 0x21e6 <main+0xadc>
    21e4:	66 cb       	rjmp	.-2356   	; 0x18b2 <main+0x1a8>
				{
					//stop_motor();
					m_green(ON);
    21e6:	6a 9a       	sbi	0x0d, 2	; 13
    21e8:	72 98       	cbi	0x0e, 2	; 14
					status_go_to_goal = 0;
					stop_counter = 0;
					go_bwd();
    21ea:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_bwd>
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	01 96       	adiw	r24, 0x01	; 1
					while(stop_counter<TIME_STOP)
    21f4:	88 3e       	cpi	r24, 0xE8	; 232
    21f6:	f3 e0       	ldi	r31, 0x03	; 3
    21f8:	9f 07       	cpc	r25, r31
    21fa:	d9 f7       	brne	.-10     	; 0x21f2 <main+0xae8>
					{
						stop_counter++;
					}
					state = STOP_STATE;
    21fc:	85 e1       	ldi	r24, 0x15	; 21
    21fe:	90 e0       	ldi	r25, 0x00	; 0
    2200:	90 93 51 01 	sts	0x0151, r25
    2204:	80 93 50 01 	sts	0x0150, r24
				}
				else if (status_go_to_goal == 1)
				{
					//stop_motor();
					m_green(ON);
					status_go_to_goal = 0;
    2208:	69 96       	adiw	r28, 0x19	; 25
    220a:	1f ae       	std	Y+63, r1	; 0x3f
    220c:	1e ae       	std	Y+62, r1	; 0x3e
    220e:	69 97       	sbiw	r28, 0x19	; 25
    2210:	50 cb       	rjmp	.-2400   	; 0x18b2 <main+0x1a8>
				// GO TO GOAL WITH PUCK
				// --------------------------------------------------------------
                    
                case GO_TO_GOAL_WITH_PUCK:
				 
				if ( PT2_left_inside < 750 || PT3_right_inside < 750 )
    2212:	0e 3e       	cpi	r16, 0xEE	; 238
    2214:	12 40       	sbci	r17, 0x02	; 2
    2216:	2c f0       	brlt	.+10     	; 0x2222 <main+0xb18>
    2218:	3e ee       	ldi	r19, 0xEE	; 238
    221a:	e3 16       	cp	r14, r19
    221c:	32 e0       	ldi	r19, 0x02	; 2
    221e:	f3 06       	cpc	r15, r19
    2220:	5c f4       	brge	.+22     	; 0x2238 <main+0xb2e>
				{
					state = FIND_PUCK;
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	90 93 51 01 	sts	0x0151, r25
    222a:	80 93 50 01 	sts	0x0150, r24
					status_go_to_goal = 0;
    222e:	69 96       	adiw	r28, 0x19	; 25
    2230:	1f ae       	std	Y+63, r1	; 0x3f
    2232:	1e ae       	std	Y+62, r1	; 0x3e
    2234:	69 97       	sbiw	r28, 0x19	; 25
					break;
    2236:	3d cb       	rjmp	.-2438   	; 0x18b2 <main+0x1a8>
				}
					
				if (status_go_to_goal == 0)
    2238:	69 96       	adiw	r28, 0x19	; 25
    223a:	8e ad       	ldd	r24, Y+62	; 0x3e
    223c:	9f ad       	ldd	r25, Y+63	; 0x3f
    223e:	69 97       	sbiw	r28, 0x19	; 25
    2240:	89 2b       	or	r24, r25
    2242:	09 f0       	breq	.+2      	; 0x2246 <main+0xb3c>
    2244:	57 c2       	rjmp	.+1198   	; 0x26f4 <main+0xfea>
				{
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    2246:	ed ac       	ldd	r14, Y+61	; 0x3d
    2248:	fe ac       	ldd	r15, Y+62	; 0x3e
    224a:	c7 01       	movw	r24, r14
    224c:	6f 96       	adiw	r28, 0x1f	; 31
    224e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2250:	bf ad       	ldd	r27, Y+63	; 0x3f
    2252:	6f 97       	sbiw	r28, 0x1f	; 31
    2254:	8a 1b       	sub	r24, r26
    2256:	9b 0b       	sbc	r25, r27
    2258:	21 96       	adiw	r28, 0x01	; 1
    225a:	0e ad       	ldd	r16, Y+62	; 0x3e
    225c:	1f ad       	ldd	r17, Y+63	; 0x3f
    225e:	21 97       	sbiw	r28, 0x01	; 1
    2260:	88 9f       	mul	r24, r24
    2262:	b0 01       	movw	r22, r0
    2264:	89 9f       	mul	r24, r25
    2266:	70 0d       	add	r23, r0
    2268:	70 0d       	add	r23, r0
    226a:	11 24       	eor	r1, r1
    226c:	00 9f       	mul	r16, r16
    226e:	c0 01       	movw	r24, r0
    2270:	01 9f       	mul	r16, r17
    2272:	90 0d       	add	r25, r0
    2274:	90 0d       	add	r25, r0
    2276:	11 24       	eor	r1, r1
    2278:	68 0f       	add	r22, r24
    227a:	79 1f       	adc	r23, r25
    227c:	88 27       	eor	r24, r24
    227e:	77 fd       	sbrc	r23, 7
    2280:	80 95       	com	r24
    2282:	98 2f       	mov	r25, r24
    2284:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    2288:	0e 94 72 1c 	call	0x38e4	; 0x38e4 <sqrt>
    228c:	a3 96       	adiw	r28, 0x23	; 35
    228e:	6c af       	std	Y+60, r22	; 0x3c
    2290:	7d af       	std	Y+61, r23	; 0x3d
    2292:	8e af       	std	Y+62, r24	; 0x3e
    2294:	9f af       	std	Y+63, r25	; 0x3f
    2296:	a3 97       	sbiw	r28, 0x23	; 35
					if (dist_goal < THRESHOLD_DIST_GOAL)
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 ea       	ldi	r20, 0xA0	; 160
    229e:	50 e4       	ldi	r21, 0x40	; 64
    22a0:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    22a4:	88 23       	and	r24, r24
    22a6:	0c f4       	brge	.+2      	; 0x22aa <main+0xba0>
    22a8:	fe ca       	rjmp	.-2564   	; 0x18a6 <main+0x19c>
						status_go_to_goal = 1;
					else
					{
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    22aa:	66 27       	eor	r22, r22
    22ac:	77 27       	eor	r23, r23
    22ae:	60 1b       	sub	r22, r16
    22b0:	71 0b       	sbc	r23, r17
    22b2:	88 27       	eor	r24, r24
    22b4:	77 fd       	sbrc	r23, 7
    22b6:	80 95       	com	r24
    22b8:	98 2f       	mov	r25, r24
    22ba:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    22be:	4b 01       	movw	r8, r22
    22c0:	5c 01       	movw	r10, r24
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
						status_go_to_goal = 1;
					else
					{
						dir_x = goal_pos_x-x_robot;
    22c2:	6f 96       	adiw	r28, 0x1f	; 31
    22c4:	6e ad       	ldd	r22, Y+62	; 0x3e
    22c6:	7f ad       	ldd	r23, Y+63	; 0x3f
    22c8:	6f 97       	sbiw	r28, 0x1f	; 31
    22ca:	6e 19       	sub	r22, r14
    22cc:	7f 09       	sbc	r23, r15
    22ce:	88 27       	eor	r24, r24
    22d0:	77 fd       	sbrc	r23, 7
    22d2:	80 95       	com	r24
    22d4:	98 2f       	mov	r25, r24
    22d6:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    22da:	90 58       	subi	r25, 0x80	; 128
    22dc:	a5 01       	movw	r20, r10
    22de:	94 01       	movw	r18, r8
    22e0:	0e 94 f7 19 	call	0x33ee	; 0x33ee <atan2>
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	44 e3       	ldi	r20, 0x34	; 52
    22ea:	53 e4       	ldi	r21, 0x43	; 67
    22ec:	0e 94 05 1c 	call	0x380a	; 0x380a <__mulsf3>
    22f0:	2b ed       	ldi	r18, 0xDB	; 219
    22f2:	3f e0       	ldi	r19, 0x0F	; 15
    22f4:	49 e4       	ldi	r20, 0x49	; 73
    22f6:	50 e4       	ldi	r21, 0x40	; 64
    22f8:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__divsf3>
    22fc:	d6 2e       	mov	r13, r22
    22fe:	c7 2e       	mov	r12, r23
    2300:	78 2e       	mov	r7, r24
    2302:	69 2e       	mov	r6, r25
    2304:	a4 96       	adiw	r28, 0x24	; 36
    2306:	6f af       	std	Y+63, r22	; 0x3f
    2308:	a4 97       	sbiw	r28, 0x24	; 36
    230a:	a5 96       	adiw	r28, 0x25	; 37
    230c:	7f af       	std	Y+63, r23	; 0x3f
    230e:	a5 97       	sbiw	r28, 0x25	; 37
    2310:	a6 96       	adiw	r28, 0x26	; 38
    2312:	8f af       	std	Y+63, r24	; 0x3f
    2314:	a6 97       	sbiw	r28, 0x26	; 38
    2316:	a7 96       	adiw	r28, 0x27	; 39
    2318:	9f af       	std	Y+63, r25	; 0x3f
    231a:	a7 97       	sbiw	r28, 0x27	; 39
		                 
		                 
						float angle_dir_aux = dir_angle-180;
    231c:	20 e0       	ldi	r18, 0x00	; 0
    231e:	30 e0       	ldi	r19, 0x00	; 0
    2320:	44 e3       	ldi	r20, 0x34	; 52
    2322:	53 e4       	ldi	r21, 0x43	; 67
    2324:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2328:	28 96       	adiw	r28, 0x08	; 8
    232a:	6f af       	std	Y+63, r22	; 0x3f
    232c:	28 97       	sbiw	r28, 0x08	; 8
    232e:	29 96       	adiw	r28, 0x09	; 9
    2330:	7f af       	std	Y+63, r23	; 0x3f
    2332:	29 97       	sbiw	r28, 0x09	; 9
    2334:	66 96       	adiw	r28, 0x16	; 22
    2336:	8f af       	std	Y+63, r24	; 0x3f
    2338:	66 97       	sbiw	r28, 0x16	; 22
    233a:	67 96       	adiw	r28, 0x17	; 23
    233c:	9f af       	std	Y+63, r25	; 0x3f
    233e:	67 97       	sbiw	r28, 0x17	; 23
						float add_360 = 0;
						if (angle_dir_aux < -180)
    2340:	20 e0       	ldi	r18, 0x00	; 0
    2342:	30 e0       	ldi	r19, 0x00	; 0
    2344:	44 e3       	ldi	r20, 0x34	; 52
    2346:	53 ec       	ldi	r21, 0xC3	; 195
    2348:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    234c:	88 23       	and	r24, r24
    234e:	0c f0       	brlt	.+2      	; 0x2352 <main+0xc48>
    2350:	9a c2       	rjmp	.+1332   	; 0x2886 <main+0x117c>
						{
							angle_dir_aux += 360;
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	44 eb       	ldi	r20, 0xB4	; 180
    2358:	53 e4       	ldi	r21, 0x43	; 67
    235a:	28 96       	adiw	r28, 0x08	; 8
    235c:	bf ad       	ldd	r27, Y+63	; 0x3f
    235e:	28 97       	sbiw	r28, 0x08	; 8
    2360:	29 96       	adiw	r28, 0x09	; 9
    2362:	af ad       	ldd	r26, Y+63	; 0x3f
    2364:	29 97       	sbiw	r28, 0x09	; 9
    2366:	66 96       	adiw	r28, 0x16	; 22
    2368:	ff ad       	ldd	r31, Y+63	; 0x3f
    236a:	66 97       	sbiw	r28, 0x16	; 22
    236c:	67 96       	adiw	r28, 0x17	; 23
    236e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2370:	67 97       	sbiw	r28, 0x17	; 23
    2372:	6b 2f       	mov	r22, r27
    2374:	7a 2f       	mov	r23, r26
    2376:	8f 2f       	mov	r24, r31
    2378:	9e 2f       	mov	r25, r30
    237a:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    237e:	28 96       	adiw	r28, 0x08	; 8
    2380:	6f af       	std	Y+63, r22	; 0x3f
    2382:	28 97       	sbiw	r28, 0x08	; 8
    2384:	29 96       	adiw	r28, 0x09	; 9
    2386:	7f af       	std	Y+63, r23	; 0x3f
    2388:	29 97       	sbiw	r28, 0x09	; 9
    238a:	66 96       	adiw	r28, 0x16	; 22
    238c:	8f af       	std	Y+63, r24	; 0x3f
    238e:	66 97       	sbiw	r28, 0x16	; 22
    2390:	67 96       	adiw	r28, 0x17	; 23
    2392:	9f af       	std	Y+63, r25	; 0x3f
    2394:	67 97       	sbiw	r28, 0x17	; 23
								diff_theta = (theta_robot+360) - dir_angle;
							else
								diff_theta = (theta_robot) - dir_angle;

						}
						else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    2396:	e0 90 56 01 	lds	r14, 0x0156
    239a:	f0 90 57 01 	lds	r15, 0x0157
    239e:	b7 01       	movw	r22, r14
    23a0:	88 27       	eor	r24, r24
    23a2:	77 fd       	sbrc	r23, 7
    23a4:	80 95       	com	r24
    23a6:	98 2f       	mov	r25, r24
    23a8:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    23ac:	4b 01       	movw	r8, r22
    23ae:	5c 01       	movw	r10, r24
    23b0:	9b 01       	movw	r18, r22
    23b2:	ac 01       	movw	r20, r24
    23b4:	6d 2d       	mov	r22, r13
    23b6:	7c 2d       	mov	r23, r12
    23b8:	87 2d       	mov	r24, r7
    23ba:	96 2d       	mov	r25, r6
    23bc:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    23c0:	88 23       	and	r24, r24
    23c2:	0c f0       	brlt	.+2      	; 0x23c6 <main+0xcbc>
    23c4:	74 c0       	rjmp	.+232    	; 0x24ae <main+0xda4>
    23c6:	78 c0       	rjmp	.+240    	; 0x24b8 <main+0xdae>
							angle_dir_aux += 360;
							add_360 = 1;
						}
		                 
		                 
						if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    23c8:	a5 01       	movw	r20, r10
    23ca:	94 01       	movw	r18, r8
    23cc:	6d 2d       	mov	r22, r13
    23ce:	7c 2d       	mov	r23, r12
    23d0:	87 2d       	mov	r24, r7
    23d2:	96 2d       	mov	r25, r6
    23d4:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    23d8:	88 23       	and	r24, r24
    23da:	ac f0       	brlt	.+42     	; 0x2406 <main+0xcfc>
						{
							diff_theta = dir_angle - theta_robot;
    23dc:	a5 01       	movw	r20, r10
    23de:	94 01       	movw	r18, r8
    23e0:	6d 2d       	mov	r22, r13
    23e2:	7c 2d       	mov	r23, r12
    23e4:	87 2d       	mov	r24, r7
    23e6:	96 2d       	mov	r25, r6
    23e8:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    23ec:	28 96       	adiw	r28, 0x08	; 8
    23ee:	6f af       	std	Y+63, r22	; 0x3f
    23f0:	28 97       	sbiw	r28, 0x08	; 8
    23f2:	29 96       	adiw	r28, 0x09	; 9
    23f4:	7f af       	std	Y+63, r23	; 0x3f
    23f6:	29 97       	sbiw	r28, 0x09	; 9
    23f8:	66 96       	adiw	r28, 0x16	; 22
    23fa:	8f af       	std	Y+63, r24	; 0x3f
    23fc:	66 97       	sbiw	r28, 0x16	; 22
    23fe:	67 96       	adiw	r28, 0x17	; 23
    2400:	9f af       	std	Y+63, r25	; 0x3f
    2402:	67 97       	sbiw	r28, 0x17	; 23
    2404:	db c0       	rjmp	.+438    	; 0x25bc <main+0xeb2>

						}
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    2406:	a5 01       	movw	r20, r10
    2408:	94 01       	movw	r18, r8
    240a:	28 96       	adiw	r28, 0x08	; 8
    240c:	ef ad       	ldd	r30, Y+63	; 0x3f
    240e:	28 97       	sbiw	r28, 0x08	; 8
    2410:	29 96       	adiw	r28, 0x09	; 9
    2412:	bf ad       	ldd	r27, Y+63	; 0x3f
    2414:	29 97       	sbiw	r28, 0x09	; 9
    2416:	66 96       	adiw	r28, 0x16	; 22
    2418:	af ad       	ldd	r26, Y+63	; 0x3f
    241a:	66 97       	sbiw	r28, 0x16	; 22
    241c:	67 96       	adiw	r28, 0x17	; 23
    241e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2420:	67 97       	sbiw	r28, 0x17	; 23
    2422:	6e 2f       	mov	r22, r30
    2424:	7b 2f       	mov	r23, r27
    2426:	8a 2f       	mov	r24, r26
    2428:	9f 2f       	mov	r25, r31
    242a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    242e:	18 16       	cp	r1, r24
    2430:	5c f0       	brlt	.+22     	; 0x2448 <main+0xd3e>
    2432:	a5 01       	movw	r20, r10
    2434:	94 01       	movw	r18, r8
    2436:	6d 2d       	mov	r22, r13
    2438:	7c 2d       	mov	r23, r12
    243a:	87 2d       	mov	r24, r7
    243c:	96 2d       	mov	r25, r6
    243e:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    2442:	88 23       	and	r24, r24
    2444:	0c f0       	brlt	.+2      	; 0x2448 <main+0xd3e>
    2446:	ec c0       	rjmp	.+472    	; 0x2620 <main+0xf16>
						{
							if (theta_robot < 0)
    2448:	ff 20       	and	r15, r15
    244a:	e4 f4       	brge	.+56     	; 0x2484 <main+0xd7a>
								diff_theta = (theta_robot+360) - dir_angle;
    244c:	b7 01       	movw	r22, r14
    244e:	68 59       	subi	r22, 0x98	; 152
    2450:	7e 4f       	sbci	r23, 0xFE	; 254
    2452:	88 27       	eor	r24, r24
    2454:	77 fd       	sbrc	r23, 7
    2456:	80 95       	com	r24
    2458:	98 2f       	mov	r25, r24
    245a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    245e:	2d 2d       	mov	r18, r13
    2460:	3c 2d       	mov	r19, r12
    2462:	47 2d       	mov	r20, r7
    2464:	56 2d       	mov	r21, r6
    2466:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    246a:	28 96       	adiw	r28, 0x08	; 8
    246c:	6f af       	std	Y+63, r22	; 0x3f
    246e:	28 97       	sbiw	r28, 0x08	; 8
    2470:	29 96       	adiw	r28, 0x09	; 9
    2472:	7f af       	std	Y+63, r23	; 0x3f
    2474:	29 97       	sbiw	r28, 0x09	; 9
    2476:	66 96       	adiw	r28, 0x16	; 22
    2478:	8f af       	std	Y+63, r24	; 0x3f
    247a:	66 97       	sbiw	r28, 0x16	; 22
    247c:	67 96       	adiw	r28, 0x17	; 23
    247e:	9f af       	std	Y+63, r25	; 0x3f
    2480:	67 97       	sbiw	r28, 0x17	; 23
    2482:	9c c0       	rjmp	.+312    	; 0x25bc <main+0xeb2>
							else
								diff_theta = (theta_robot) - dir_angle;
    2484:	2d 2d       	mov	r18, r13
    2486:	3c 2d       	mov	r19, r12
    2488:	47 2d       	mov	r20, r7
    248a:	56 2d       	mov	r21, r6
    248c:	c5 01       	movw	r24, r10
    248e:	b4 01       	movw	r22, r8
    2490:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2494:	28 96       	adiw	r28, 0x08	; 8
    2496:	6f af       	std	Y+63, r22	; 0x3f
    2498:	28 97       	sbiw	r28, 0x08	; 8
    249a:	29 96       	adiw	r28, 0x09	; 9
    249c:	7f af       	std	Y+63, r23	; 0x3f
    249e:	29 97       	sbiw	r28, 0x09	; 9
    24a0:	66 96       	adiw	r28, 0x16	; 22
    24a2:	8f af       	std	Y+63, r24	; 0x3f
    24a4:	66 97       	sbiw	r28, 0x16	; 22
    24a6:	67 96       	adiw	r28, 0x17	; 23
    24a8:	9f af       	std	Y+63, r25	; 0x3f
    24aa:	67 97       	sbiw	r28, 0x17	; 23
    24ac:	87 c0       	rjmp	.+270    	; 0x25bc <main+0xeb2>

						}
						else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    24ae:	bc e4       	ldi	r27, 0x4C	; 76
    24b0:	eb 16       	cp	r14, r27
    24b2:	bf ef       	ldi	r27, 0xFF	; 255
    24b4:	fb 06       	cpc	r15, r27
    24b6:	d4 f4       	brge	.+52     	; 0x24ec <main+0xde2>
    24b8:	a5 01       	movw	r20, r10
    24ba:	94 01       	movw	r18, r8
    24bc:	28 96       	adiw	r28, 0x08	; 8
    24be:	ff ad       	ldd	r31, Y+63	; 0x3f
    24c0:	28 97       	sbiw	r28, 0x08	; 8
    24c2:	29 96       	adiw	r28, 0x09	; 9
    24c4:	ef ad       	ldd	r30, Y+63	; 0x3f
    24c6:	29 97       	sbiw	r28, 0x09	; 9
    24c8:	66 96       	adiw	r28, 0x16	; 22
    24ca:	af ad       	ldd	r26, Y+63	; 0x3f
    24cc:	66 97       	sbiw	r28, 0x16	; 22
    24ce:	67 96       	adiw	r28, 0x17	; 23
    24d0:	bf ad       	ldd	r27, Y+63	; 0x3f
    24d2:	67 97       	sbiw	r28, 0x17	; 23
    24d4:	6f 2f       	mov	r22, r31
    24d6:	7e 2f       	mov	r23, r30
    24d8:	8a 2f       	mov	r24, r26
    24da:	9b 2f       	mov	r25, r27
    24dc:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    24e0:	18 16       	cp	r1, r24
    24e2:	b4 f1       	brlt	.+108    	; 0x2550 <main+0xe46>
    24e4:	e5 eb       	ldi	r30, 0xB5	; 181
    24e6:	ee 16       	cp	r14, r30
    24e8:	f1 04       	cpc	r15, r1
    24ea:	94 f5       	brge	.+100    	; 0x2550 <main+0xe46>
						{
							if (theta_robot < 0)
    24ec:	ff 20       	and	r15, r15
    24ee:	ac f4       	brge	.+42     	; 0x251a <main+0xe10>
								diff_theta = dir_angle - theta_robot;
    24f0:	a5 01       	movw	r20, r10
    24f2:	94 01       	movw	r18, r8
    24f4:	6d 2d       	mov	r22, r13
    24f6:	7c 2d       	mov	r23, r12
    24f8:	87 2d       	mov	r24, r7
    24fa:	96 2d       	mov	r25, r6
    24fc:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2500:	28 96       	adiw	r28, 0x08	; 8
    2502:	6f af       	std	Y+63, r22	; 0x3f
    2504:	28 97       	sbiw	r28, 0x08	; 8
    2506:	29 96       	adiw	r28, 0x09	; 9
    2508:	7f af       	std	Y+63, r23	; 0x3f
    250a:	29 97       	sbiw	r28, 0x09	; 9
    250c:	66 96       	adiw	r28, 0x16	; 22
    250e:	8f af       	std	Y+63, r24	; 0x3f
    2510:	66 97       	sbiw	r28, 0x16	; 22
    2512:	67 96       	adiw	r28, 0x17	; 23
    2514:	9f af       	std	Y+63, r25	; 0x3f
    2516:	67 97       	sbiw	r28, 0x17	; 23
    2518:	51 c0       	rjmp	.+162    	; 0x25bc <main+0xeb2>
							else
								diff_theta = (dir_angle + 360) - theta_robot;
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	44 eb       	ldi	r20, 0xB4	; 180
    2520:	53 e4       	ldi	r21, 0x43	; 67
    2522:	6d 2d       	mov	r22, r13
    2524:	7c 2d       	mov	r23, r12
    2526:	87 2d       	mov	r24, r7
    2528:	96 2d       	mov	r25, r6
    252a:	0e 94 84 19 	call	0x3308	; 0x3308 <__addsf3>
    252e:	a5 01       	movw	r20, r10
    2530:	94 01       	movw	r18, r8
    2532:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    2536:	28 96       	adiw	r28, 0x08	; 8
    2538:	6f af       	std	Y+63, r22	; 0x3f
    253a:	28 97       	sbiw	r28, 0x08	; 8
    253c:	29 96       	adiw	r28, 0x09	; 9
    253e:	7f af       	std	Y+63, r23	; 0x3f
    2540:	29 97       	sbiw	r28, 0x09	; 9
    2542:	66 96       	adiw	r28, 0x16	; 22
    2544:	8f af       	std	Y+63, r24	; 0x3f
    2546:	66 97       	sbiw	r28, 0x16	; 22
    2548:	67 96       	adiw	r28, 0x17	; 23
    254a:	9f af       	std	Y+63, r25	; 0x3f
    254c:	67 97       	sbiw	r28, 0x17	; 23
    254e:	36 c0       	rjmp	.+108    	; 0x25bc <main+0xeb2>
						}
						else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    2550:	a5 01       	movw	r20, r10
    2552:	94 01       	movw	r18, r8
    2554:	6d 2d       	mov	r22, r13
    2556:	7c 2d       	mov	r23, r12
    2558:	87 2d       	mov	r24, r7
    255a:	96 2d       	mov	r25, r6
    255c:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    2560:	88 23       	and	r24, r24
    2562:	0c f0       	brlt	.+2      	; 0x2566 <main+0xe5c>
    2564:	6a c0       	rjmp	.+212    	; 0x263a <main+0xf30>
    2566:	a5 01       	movw	r20, r10
    2568:	94 01       	movw	r18, r8
    256a:	28 96       	adiw	r28, 0x08	; 8
    256c:	ef ad       	ldd	r30, Y+63	; 0x3f
    256e:	28 97       	sbiw	r28, 0x08	; 8
    2570:	29 96       	adiw	r28, 0x09	; 9
    2572:	bf ad       	ldd	r27, Y+63	; 0x3f
    2574:	29 97       	sbiw	r28, 0x09	; 9
    2576:	66 96       	adiw	r28, 0x16	; 22
    2578:	af ad       	ldd	r26, Y+63	; 0x3f
    257a:	66 97       	sbiw	r28, 0x16	; 22
    257c:	67 96       	adiw	r28, 0x17	; 23
    257e:	ff ad       	ldd	r31, Y+63	; 0x3f
    2580:	67 97       	sbiw	r28, 0x17	; 23
    2582:	6e 2f       	mov	r22, r30
    2584:	7b 2f       	mov	r23, r27
    2586:	8a 2f       	mov	r24, r26
    2588:	9f 2f       	mov	r25, r31
    258a:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    258e:	18 16       	cp	r1, r24
    2590:	0c f0       	brlt	.+2      	; 0x2594 <main+0xe8a>
    2592:	60 c0       	rjmp	.+192    	; 0x2654 <main+0xf4a>
						{
							diff_theta = theta_robot - dir_angle;
    2594:	2d 2d       	mov	r18, r13
    2596:	3c 2d       	mov	r19, r12
    2598:	47 2d       	mov	r20, r7
    259a:	56 2d       	mov	r21, r6
    259c:	c5 01       	movw	r24, r10
    259e:	b4 01       	movw	r22, r8
    25a0:	0e 94 83 19 	call	0x3306	; 0x3306 <__subsf3>
    25a4:	28 96       	adiw	r28, 0x08	; 8
    25a6:	6f af       	std	Y+63, r22	; 0x3f
    25a8:	28 97       	sbiw	r28, 0x08	; 8
    25aa:	29 96       	adiw	r28, 0x09	; 9
    25ac:	7f af       	std	Y+63, r23	; 0x3f
    25ae:	29 97       	sbiw	r28, 0x09	; 9
    25b0:	66 96       	adiw	r28, 0x16	; 22
    25b2:	8f af       	std	Y+63, r24	; 0x3f
    25b4:	66 97       	sbiw	r28, 0x16	; 22
    25b6:	67 96       	adiw	r28, 0x17	; 23
    25b8:	9f af       	std	Y+63, r25	; 0x3f
    25ba:	67 97       	sbiw	r28, 0x17	; 23
						}else
						{
							diff_theta = 0;
						}
		                 
						if (diff_theta > -60 && diff_theta <60)
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e7       	ldi	r20, 0x70	; 112
    25c2:	52 ec       	ldi	r21, 0xC2	; 194
    25c4:	28 96       	adiw	r28, 0x08	; 8
    25c6:	bf ad       	ldd	r27, Y+63	; 0x3f
    25c8:	28 97       	sbiw	r28, 0x08	; 8
    25ca:	29 96       	adiw	r28, 0x09	; 9
    25cc:	af ad       	ldd	r26, Y+63	; 0x3f
    25ce:	29 97       	sbiw	r28, 0x09	; 9
    25d0:	66 96       	adiw	r28, 0x16	; 22
    25d2:	ff ad       	ldd	r31, Y+63	; 0x3f
    25d4:	66 97       	sbiw	r28, 0x16	; 22
    25d6:	67 96       	adiw	r28, 0x17	; 23
    25d8:	ef ad       	ldd	r30, Y+63	; 0x3f
    25da:	67 97       	sbiw	r28, 0x17	; 23
    25dc:	6b 2f       	mov	r22, r27
    25de:	7a 2f       	mov	r23, r26
    25e0:	8f 2f       	mov	r24, r31
    25e2:	9e 2f       	mov	r25, r30
    25e4:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__gesf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	0c f0       	brlt	.+2      	; 0x25ee <main+0xee4>
    25ec:	4a c0       	rjmp	.+148    	; 0x2682 <main+0xf78>
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	40 e7       	ldi	r20, 0x70	; 112
    25f4:	52 e4       	ldi	r21, 0x42	; 66
    25f6:	28 96       	adiw	r28, 0x08	; 8
    25f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    25fa:	28 97       	sbiw	r28, 0x08	; 8
    25fc:	29 96       	adiw	r28, 0x09	; 9
    25fe:	af ad       	ldd	r26, Y+63	; 0x3f
    2600:	29 97       	sbiw	r28, 0x09	; 9
    2602:	66 96       	adiw	r28, 0x16	; 22
    2604:	ff ad       	ldd	r31, Y+63	; 0x3f
    2606:	66 97       	sbiw	r28, 0x16	; 22
    2608:	67 96       	adiw	r28, 0x17	; 23
    260a:	ef ad       	ldd	r30, Y+63	; 0x3f
    260c:	67 97       	sbiw	r28, 0x17	; 23
    260e:	6b 2f       	mov	r22, r27
    2610:	7a 2f       	mov	r23, r26
    2612:	8f 2f       	mov	r24, r31
    2614:	9e 2f       	mov	r25, r30
    2616:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    261a:	88 23       	and	r24, r24
    261c:	3c f1       	brlt	.+78     	; 0x266c <main+0xf62>
    261e:	31 c0       	rjmp	.+98     	; 0x2682 <main+0xf78>
						if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
						{
							diff_theta = dir_angle - theta_robot;

						}
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    2620:	28 96       	adiw	r28, 0x08	; 8
    2622:	1f ae       	std	Y+63, r1	; 0x3f
    2624:	28 97       	sbiw	r28, 0x08	; 8
    2626:	29 96       	adiw	r28, 0x09	; 9
    2628:	1f ae       	std	Y+63, r1	; 0x3f
    262a:	29 97       	sbiw	r28, 0x09	; 9
    262c:	66 96       	adiw	r28, 0x16	; 22
    262e:	1f ae       	std	Y+63, r1	; 0x3f
    2630:	66 97       	sbiw	r28, 0x16	; 22
    2632:	67 96       	adiw	r28, 0x17	; 23
    2634:	1f ae       	std	Y+63, r1	; 0x3f
    2636:	67 97       	sbiw	r28, 0x17	; 23
    2638:	19 c0       	rjmp	.+50     	; 0x266c <main+0xf62>
							if (theta_robot < 0)
								diff_theta = dir_angle - theta_robot;
							else
								diff_theta = (dir_angle + 360) - theta_robot;
						}
						else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    263a:	28 96       	adiw	r28, 0x08	; 8
    263c:	1f ae       	std	Y+63, r1	; 0x3f
    263e:	28 97       	sbiw	r28, 0x08	; 8
    2640:	29 96       	adiw	r28, 0x09	; 9
    2642:	1f ae       	std	Y+63, r1	; 0x3f
    2644:	29 97       	sbiw	r28, 0x09	; 9
    2646:	66 96       	adiw	r28, 0x16	; 22
    2648:	1f ae       	std	Y+63, r1	; 0x3f
    264a:	66 97       	sbiw	r28, 0x16	; 22
    264c:	67 96       	adiw	r28, 0x17	; 23
    264e:	1f ae       	std	Y+63, r1	; 0x3f
    2650:	67 97       	sbiw	r28, 0x17	; 23
    2652:	0c c0       	rjmp	.+24     	; 0x266c <main+0xf62>
    2654:	28 96       	adiw	r28, 0x08	; 8
    2656:	1f ae       	std	Y+63, r1	; 0x3f
    2658:	28 97       	sbiw	r28, 0x08	; 8
    265a:	29 96       	adiw	r28, 0x09	; 9
    265c:	1f ae       	std	Y+63, r1	; 0x3f
    265e:	29 97       	sbiw	r28, 0x09	; 9
    2660:	66 96       	adiw	r28, 0x16	; 22
    2662:	1f ae       	std	Y+63, r1	; 0x3f
    2664:	66 97       	sbiw	r28, 0x16	; 22
    2666:	67 96       	adiw	r28, 0x17	; 23
    2668:	1f ae       	std	Y+63, r1	; 0x3f
    266a:	67 97       	sbiw	r28, 0x17	; 23
		                 
						if (diff_theta > -60 && diff_theta <60)
						{
							status_go_to_goal = 0;
							circle_started_before = 0;
							state = GO_TO_GOAL_CURVED;
    266c:	82 e0       	ldi	r24, 0x02	; 2
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	90 93 51 01 	sts	0x0151, r25
    2674:	80 93 50 01 	sts	0x0150, r24
						}
		                 
						if (diff_theta > -60 && diff_theta <60)
						{
							status_go_to_goal = 0;
							circle_started_before = 0;
    2678:	6d 96       	adiw	r28, 0x1d	; 29
    267a:	1f ae       	std	Y+63, r1	; 0x3f
    267c:	1e ae       	std	Y+62, r1	; 0x3e
    267e:	6d 97       	sbiw	r28, 0x1d	; 29
							state = GO_TO_GOAL_CURVED;
							break;
    2680:	18 c9       	rjmp	.-3536   	; 0x18b2 <main+0x1a8>
						}
						else
						{
							if (y_robot <= 0 && circle_started_before == 0)
    2682:	10 16       	cp	r1, r16
    2684:	11 06       	cpc	r1, r17
    2686:	dc f0       	brlt	.+54     	; 0x26be <main+0xfb4>
    2688:	6d 96       	adiw	r28, 0x1d	; 29
    268a:	2e ad       	ldd	r18, Y+62	; 0x3e
    268c:	3f ad       	ldd	r19, Y+63	; 0x3f
    268e:	6d 97       	sbiw	r28, 0x1d	; 29
    2690:	23 2b       	or	r18, r19
    2692:	09 f0       	breq	.+2      	; 0x2696 <main+0xf8c>
    2694:	0e c9       	rjmp	.-3556   	; 0x18b2 <main+0x1a8>
							{
								if (check(PINB,2))
    2696:	1a 9b       	sbis	0x03, 2	; 3
    2698:	09 c0       	rjmp	.+18     	; 0x26ac <main+0xfa2>
									circle_left();
    269a:	0e 94 67 0b 	call	0x16ce	; 0x16ce <circle_left>
								else
									circle_right();
								circle_started_before = 1;
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	6d 96       	adiw	r28, 0x1d	; 29
    26a4:	9f af       	std	Y+63, r25	; 0x3f
    26a6:	8e af       	std	Y+62, r24	; 0x3e
    26a8:	6d 97       	sbiw	r28, 0x1d	; 29
    26aa:	03 c9       	rjmp	.-3578   	; 0x18b2 <main+0x1a8>
							if (y_robot <= 0 && circle_started_before == 0)
							{
								if (check(PINB,2))
									circle_left();
								else
									circle_right();
    26ac:	0e 94 76 0b 	call	0x16ec	; 0x16ec <circle_right>
								circle_started_before = 1;
    26b0:	a1 e0       	ldi	r26, 0x01	; 1
    26b2:	b0 e0       	ldi	r27, 0x00	; 0
    26b4:	6d 96       	adiw	r28, 0x1d	; 29
    26b6:	bf af       	std	Y+63, r27	; 0x3f
    26b8:	ae af       	std	Y+62, r26	; 0x3e
    26ba:	6d 97       	sbiw	r28, 0x1d	; 29
    26bc:	fa c8       	rjmp	.-3596   	; 0x18b2 <main+0x1a8>
							}
							else if (y_robot > 0 && circle_started_before == 0)
    26be:	6d 96       	adiw	r28, 0x1d	; 29
    26c0:	ee ad       	ldd	r30, Y+62	; 0x3e
    26c2:	ff ad       	ldd	r31, Y+63	; 0x3f
    26c4:	6d 97       	sbiw	r28, 0x1d	; 29
    26c6:	ef 2b       	or	r30, r31
    26c8:	09 f0       	breq	.+2      	; 0x26cc <main+0xfc2>
    26ca:	f3 c8       	rjmp	.-3610   	; 0x18b2 <main+0x1a8>
							{
								if (check(PINB,2))
    26cc:	1a 9b       	sbis	0x03, 2	; 3
    26ce:	09 c0       	rjmp	.+18     	; 0x26e2 <main+0xfd8>
									circle_right();
    26d0:	0e 94 76 0b 	call	0x16ec	; 0x16ec <circle_right>
								else
									circle_left();
								circle_started_before = 1;
    26d4:	21 e0       	ldi	r18, 0x01	; 1
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	6d 96       	adiw	r28, 0x1d	; 29
    26da:	3f af       	std	Y+63, r19	; 0x3f
    26dc:	2e af       	std	Y+62, r18	; 0x3e
    26de:	6d 97       	sbiw	r28, 0x1d	; 29
    26e0:	e8 c8       	rjmp	.-3632   	; 0x18b2 <main+0x1a8>
							else if (y_robot > 0 && circle_started_before == 0)
							{
								if (check(PINB,2))
									circle_right();
								else
									circle_left();
    26e2:	0e 94 67 0b 	call	0x16ce	; 0x16ce <circle_left>
								circle_started_before = 1;
    26e6:	81 e0       	ldi	r24, 0x01	; 1
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	6d 96       	adiw	r28, 0x1d	; 29
    26ec:	9f af       	std	Y+63, r25	; 0x3f
    26ee:	8e af       	std	Y+62, r24	; 0x3e
    26f0:	6d 97       	sbiw	r28, 0x1d	; 29
    26f2:	df c8       	rjmp	.-3650   	; 0x18b2 <main+0x1a8>
							}
						}		                 
					}	                 
				}
				else if (status_go_to_goal == 1)
    26f4:	69 96       	adiw	r28, 0x19	; 25
    26f6:	ae ad       	ldd	r26, Y+62	; 0x3e
    26f8:	bf ad       	ldd	r27, Y+63	; 0x3f
    26fa:	69 97       	sbiw	r28, 0x19	; 25
    26fc:	11 97       	sbiw	r26, 0x01	; 1
    26fe:	09 f0       	breq	.+2      	; 0x2702 <main+0xff8>
    2700:	d8 c8       	rjmp	.-3664   	; 0x18b2 <main+0x1a8>
				{
					//stop_motor();
					status_go_to_goal = 0;
					circle_started_before = 0;
					state = STOP_STATE;
    2702:	85 e1       	ldi	r24, 0x15	; 21
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	90 93 51 01 	sts	0x0151, r25
    270a:	80 93 50 01 	sts	0x0150, r24
				}
				else if (status_go_to_goal == 1)
				{
					//stop_motor();
					status_go_to_goal = 0;
					circle_started_before = 0;
    270e:	6d 96       	adiw	r28, 0x1d	; 29
    2710:	1f ae       	std	Y+63, r1	; 0x3f
    2712:	1e ae       	std	Y+62, r1	; 0x3e
    2714:	6d 97       	sbiw	r28, 0x1d	; 29
					}	                 
				}
				else if (status_go_to_goal == 1)
				{
					//stop_motor();
					status_go_to_goal = 0;
    2716:	69 96       	adiw	r28, 0x19	; 25
    2718:	1f ae       	std	Y+63, r1	; 0x3f
    271a:	1e ae       	std	Y+62, r1	; 0x3e
    271c:	69 97       	sbiw	r28, 0x19	; 25
    271e:	c9 c8       	rjmp	.-3694   	; 0x18b2 <main+0x1a8>
                    
                // --------------------------------------------------------------
                // SYSTEM STATE
                // --------------------------------------------------------------
            case SYSTEM_STATE:
				m_red(TOGGLE);
    2720:	6e 9a       	sbi	0x0d, 6	; 13
    2722:	9e b1       	in	r25, 0x0e	; 14
    2724:	80 e4       	ldi	r24, 0x40	; 64
    2726:	89 27       	eor	r24, r25
    2728:	8e b9       	out	0x0e, r24	; 14
                switch (buffer_rec[0])
    272a:	80 91 46 01 	lds	r24, 0x0146
    272e:	83 3a       	cpi	r24, 0xA3	; 163
    2730:	39 f1       	breq	.+78     	; 0x2780 <main+0x1076>
    2732:	38 f4       	brcc	.+14     	; 0x2742 <main+0x1038>
    2734:	81 3a       	cpi	r24, 0xA1	; 161
    2736:	a9 f0       	breq	.+42     	; 0x2762 <main+0x1058>
    2738:	c8 f4       	brcc	.+50     	; 0x276c <main+0x1062>
    273a:	80 3a       	cpi	r24, 0xA0	; 160
    273c:	09 f0       	breq	.+2      	; 0x2740 <main+0x1036>
    273e:	b9 c8       	rjmp	.-3726   	; 0x18b2 <main+0x1a8>
    2740:	09 c0       	rjmp	.+18     	; 0x2754 <main+0x104a>
    2742:	86 3a       	cpi	r24, 0xA6	; 166
    2744:	b9 f1       	breq	.+110    	; 0x27b4 <main+0x10aa>
    2746:	87 3a       	cpi	r24, 0xA7	; 167
    2748:	09 f4       	brne	.+2      	; 0x274c <main+0x1042>
    274a:	44 c0       	rjmp	.+136    	; 0x27d4 <main+0x10ca>
    274c:	84 3a       	cpi	r24, 0xA4	; 164
    274e:	09 f0       	breq	.+2      	; 0x2752 <main+0x1048>
    2750:	b0 c8       	rjmp	.-3744   	; 0x18b2 <main+0x1a8>
    2752:	20 c0       	rjmp	.+64     	; 0x2794 <main+0x108a>
				{
                    //Comm test
					case 0xA0:
						state = BLUE_LED_STATE;
    2754:	86 e1       	ldi	r24, 0x16	; 22
    2756:	90 e0       	ldi	r25, 0x00	; 0
    2758:	90 93 51 01 	sts	0x0151, r25
    275c:	80 93 50 01 	sts	0x0150, r24
						break;
    2760:	a8 c8       	rjmp	.-3760   	; 0x18b2 <main+0x1a8>
						//pause_bool = 0;
						//}else
						//{
						//state = INITIAL_STATE;
						//}
						state = INITIAL_STATE;
    2762:	10 92 51 01 	sts	0x0151, r1
    2766:	10 92 50 01 	sts	0x0150, r1
						//turnOnBlueLED();
						break;
    276a:	a3 c8       	rjmp	.-3770   	; 0x18b2 <main+0x1a8>
                        
						//Goal A
					case 0xA2:
						if (check(PINB,2))
    276c:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();
    276e:	0e 94 35 0b 	call	0x166a	; 0x166a <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    2772:	85 e1       	ldi	r24, 0x15	; 21
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	90 93 51 01 	sts	0x0151, r25
    277a:	80 93 50 01 	sts	0x0150, r24
						break;
    277e:	99 c8       	rjmp	.-3790   	; 0x18b2 <main+0x1a8>
                        
						//Goal B
					case 0xA3:
						if (!check(PINB,2))
    2780:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();
    2782:	0e 94 35 0b 	call	0x166a	; 0x166a <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    2786:	85 e1       	ldi	r24, 0x15	; 21
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	90 93 51 01 	sts	0x0151, r25
    278e:	80 93 50 01 	sts	0x0150, r24
						break;
    2792:	8f c8       	rjmp	.-3810   	; 0x18b2 <main+0x1a8>
                        
						//Pause
					case 0xA4:
						pause_bool = 1;
						stop_counter = 0;
						go_bwd();
    2794:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_bwd>
    2798:	80 e0       	ldi	r24, 0x00	; 0
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    279e:	88 3e       	cpi	r24, 0xE8	; 232
    27a0:	b3 e0       	ldi	r27, 0x03	; 3
    27a2:	9b 07       	cpc	r25, r27
    27a4:	d9 f7       	brne	.-10     	; 0x279c <main+0x1092>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    27a6:	85 e1       	ldi	r24, 0x15	; 21
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	90 93 51 01 	sts	0x0151, r25
    27ae:	80 93 50 01 	sts	0x0150, r24
						break;
    27b2:	7f c8       	rjmp	.-3842   	; 0x18b2 <main+0x1a8>
                        
						//Halftime
					case 0xA6:
						stop_counter = 0;
						go_bwd();
    27b4:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_bwd>
    27b8:	80 e0       	ldi	r24, 0x00	; 0
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    27be:	88 3e       	cpi	r24, 0xE8	; 232
    27c0:	e3 e0       	ldi	r30, 0x03	; 3
    27c2:	9e 07       	cpc	r25, r30
    27c4:	d9 f7       	brne	.-10     	; 0x27bc <main+0x10b2>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    27c6:	85 e1       	ldi	r24, 0x15	; 21
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	90 93 51 01 	sts	0x0151, r25
    27ce:	80 93 50 01 	sts	0x0150, r24
						break;
    27d2:	6f c8       	rjmp	.-3874   	; 0x18b2 <main+0x1a8>
                        
						//Game over
					case 0xA7:
						if (check(PINB,2))
    27d4:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
								celebrate();
						}
						stop_motor();
    27d6:	0e 94 35 0b 	call	0x166a	; 0x166a <stop_motor>
						stop_counter = 0;
						go_bwd();
    27da:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <go_bwd>
    27de:	80 e0       	ldi	r24, 0x00	; 0
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    27e4:	88 3e       	cpi	r24, 0xE8	; 232
    27e6:	f3 e0       	ldi	r31, 0x03	; 3
    27e8:	9f 07       	cpc	r25, r31
    27ea:	d9 f7       	brne	.-10     	; 0x27e2 <main+0x10d8>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    27ec:	85 e1       	ldi	r24, 0x15	; 21
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	90 93 51 01 	sts	0x0151, r25
    27f4:	80 93 50 01 	sts	0x0150, r24
						break;
    27f8:	5c c8       	rjmp	.-3912   	; 0x18b2 <main+0x1a8>
                    
                // --------------------------------------------------------------
                // BLUE LED STATE
                // --------------------------------------------------------------
            case BLUE_LED_STATE:
                stop_motor();
    27fa:	0e 94 35 0b 	call	0x166a	; 0x166a <stop_motor>
                turnOnBlueLED();
    27fe:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
    2802:	2f eb       	ldi	r18, 0xBF	; 191
    2804:	37 e2       	ldi	r19, 0x27	; 39
    2806:	89 e0       	ldi	r24, 0x09	; 9
    2808:	21 50       	subi	r18, 0x01	; 1
    280a:	30 40       	sbci	r19, 0x00	; 0
    280c:	80 40       	sbci	r24, 0x00	; 0
    280e:	e1 f7       	brne	.-8      	; 0x2808 <main+0x10fe>
    2810:	00 c0       	rjmp	.+0      	; 0x2812 <main+0x1108>
    2812:	00 00       	nop
				m_wait(3000);
				turnOffBlueLED();
    2814:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
                state = STOP_STATE;
    2818:	85 e1       	ldi	r24, 0x15	; 21
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	90 93 51 01 	sts	0x0151, r25
    2820:	80 93 50 01 	sts	0x0150, r24
                break;
    2824:	46 c8       	rjmp	.-3956   	; 0x18b2 <main+0x1a8>
                // --------------------------------------------------------------
                // STOP STATE
                // --------------------------------------------------------------
            case STOP_STATE:
                //m_green(ON);
				turnOffBlueLED();
    2826:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
                stop_motor();
    282a:	0e 94 35 0b 	call	0x166a	; 0x166a <stop_motor>
                break;
    282e:	41 c8       	rjmp	.-3966   	; 0x18b2 <main+0x1a8>
                    
                // --------------------------------------------------------------
                // DEFAULT STATE
                // --------------------------------------------------------------
            default:
                stop_motor();
    2830:	0e 94 35 0b 	call	0x166a	; 0x166a <stop_motor>
				break;
    2834:	3e c8       	rjmp	.-3972   	; 0x18b2 <main+0x1a8>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    2836:	ee 24       	eor	r14, r14
    2838:	e3 94       	inc	r14
    283a:	f1 2c       	mov	r15, r1
    283c:	5e c9       	rjmp	.-3396   	; 0x1afa <main+0x3f0>
                case(6):
                    PT7_have_puck = ADC;
                    break;
            }
                
            set(ADCSRA,ADIF);               // After doing the conversion reset flag
    283e:	d1 01       	movw	r26, r2
    2840:	8c 91       	ld	r24, X
    2842:	80 61       	ori	r24, 0x10	; 16
    2844:	8c 93       	st	X, r24
    2846:	56 c9       	rjmp	.-3412   	; 0x1af4 <main+0x3ea>
							angle_dir_aux += 360;
							add_360 = 1;
						}
		            
		            
						if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    2848:	00 91 56 01 	lds	r16, 0x0156
    284c:	10 91 57 01 	lds	r17, 0x0157
    2850:	b8 01       	movw	r22, r16
    2852:	88 27       	eor	r24, r24
    2854:	77 fd       	sbrc	r23, 7
    2856:	80 95       	com	r24
    2858:	98 2f       	mov	r25, r24
    285a:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    285e:	6b 01       	movw	r12, r22
    2860:	7c 01       	movw	r14, r24
    2862:	9b 01       	movw	r18, r22
    2864:	ac 01       	movw	r20, r24
    2866:	28 96       	adiw	r28, 0x08	; 8
    2868:	ff ad       	ldd	r31, Y+63	; 0x3f
    286a:	28 97       	sbiw	r28, 0x08	; 8
    286c:	29 96       	adiw	r28, 0x09	; 9
    286e:	ef ad       	ldd	r30, Y+63	; 0x3f
    2870:	29 97       	sbiw	r28, 0x09	; 9
    2872:	67 2d       	mov	r22, r7
    2874:	76 2d       	mov	r23, r6
    2876:	8f 2f       	mov	r24, r31
    2878:	9e 2f       	mov	r25, r30
    287a:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    287e:	18 16       	cp	r1, r24
    2880:	0c f0       	brlt	.+2      	; 0x2884 <main+0x117a>
    2882:	75 cb       	rjmp	.-2326   	; 0x1f6e <main+0x864>
    2884:	95 cb       	rjmp	.-2262   	; 0x1fb0 <main+0x8a6>
							angle_dir_aux += 360;
							add_360 = 1;
						}
		                 
		                 
						if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    2886:	e0 90 56 01 	lds	r14, 0x0156
    288a:	f0 90 57 01 	lds	r15, 0x0157
    288e:	b7 01       	movw	r22, r14
    2890:	88 27       	eor	r24, r24
    2892:	77 fd       	sbrc	r23, 7
    2894:	80 95       	com	r24
    2896:	98 2f       	mov	r25, r24
    2898:	0e 94 ec 1a 	call	0x35d8	; 0x35d8 <__floatsisf>
    289c:	4b 01       	movw	r8, r22
    289e:	5c 01       	movw	r10, r24
    28a0:	9b 01       	movw	r18, r22
    28a2:	ac 01       	movw	r20, r24
    28a4:	28 96       	adiw	r28, 0x08	; 8
    28a6:	ff ad       	ldd	r31, Y+63	; 0x3f
    28a8:	28 97       	sbiw	r28, 0x08	; 8
    28aa:	29 96       	adiw	r28, 0x09	; 9
    28ac:	ef ad       	ldd	r30, Y+63	; 0x3f
    28ae:	29 97       	sbiw	r28, 0x09	; 9
    28b0:	66 96       	adiw	r28, 0x16	; 22
    28b2:	af ad       	ldd	r26, Y+63	; 0x3f
    28b4:	66 97       	sbiw	r28, 0x16	; 22
    28b6:	67 96       	adiw	r28, 0x17	; 23
    28b8:	bf ad       	ldd	r27, Y+63	; 0x3f
    28ba:	67 97       	sbiw	r28, 0x17	; 23
    28bc:	6f 2f       	mov	r22, r31
    28be:	7e 2f       	mov	r23, r30
    28c0:	8a 2f       	mov	r24, r26
    28c2:	9b 2f       	mov	r25, r27
    28c4:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__cmpsf2>
    28c8:	18 16       	cp	r1, r24
    28ca:	0c f0       	brlt	.+2      	; 0x28ce <main+0x11c4>
    28cc:	7d cd       	rjmp	.-1286   	; 0x23c8 <main+0xcbe>
    28ce:	9b cd       	rjmp	.-1226   	; 0x2406 <main+0xcfc>

000028d0 <__vector_41>:

// --------------------------------------------------------------
// INTERRUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    28d0:	1f 92       	push	r1
    28d2:	0f 92       	push	r0
    28d4:	0f b6       	in	r0, 0x3f	; 63
    28d6:	0f 92       	push	r0
    28d8:	11 24       	eor	r1, r1
    28da:	8f 93       	push	r24
    28dc:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	90 93 55 01 	sts	0x0155, r25
    28e6:	80 93 54 01 	sts	0x0154, r24
}
    28ea:	9f 91       	pop	r25
    28ec:	8f 91       	pop	r24
    28ee:	0f 90       	pop	r0
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	0f 90       	pop	r0
    28f4:	1f 90       	pop	r1
    28f6:	18 95       	reti

000028f8 <__vector_3>:

ISR(INT2_vect)
{
    28f8:	1f 92       	push	r1
    28fa:	0f 92       	push	r0
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	0f 92       	push	r0
    2900:	11 24       	eor	r1, r1
    2902:	2f 93       	push	r18
    2904:	3f 93       	push	r19
    2906:	4f 93       	push	r20
    2908:	5f 93       	push	r21
    290a:	6f 93       	push	r22
    290c:	7f 93       	push	r23
    290e:	8f 93       	push	r24
    2910:	9f 93       	push	r25
    2912:	af 93       	push	r26
    2914:	bf 93       	push	r27
    2916:	ef 93       	push	r30
    2918:	ff 93       	push	r31
	//Read
	m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    291a:	6a e0       	ldi	r22, 0x0A	; 10
    291c:	86 e4       	ldi	r24, 0x46	; 70
    291e:	91 e0       	ldi	r25, 0x01	; 1
    2920:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <m_rf_read>
	//past_state = state;
	//state = SYSTEM_STATE;
	flag_system = 1;
    2924:	81 e0       	ldi	r24, 0x01	; 1
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	90 93 53 01 	sts	0x0153, r25
    292c:	80 93 52 01 	sts	0x0152, r24
	m_green(TOGGLE); // Indicator receiving from RF
    2930:	6a 9a       	sbi	0x0d, 2	; 13
    2932:	9e b1       	in	r25, 0x0e	; 14
    2934:	84 e0       	ldi	r24, 0x04	; 4
    2936:	89 27       	eor	r24, r25
    2938:	8e b9       	out	0x0e, r24	; 14
}
    293a:	ff 91       	pop	r31
    293c:	ef 91       	pop	r30
    293e:	bf 91       	pop	r27
    2940:	af 91       	pop	r26
    2942:	9f 91       	pop	r25
    2944:	8f 91       	pop	r24
    2946:	7f 91       	pop	r23
    2948:	6f 91       	pop	r22
    294a:	5f 91       	pop	r21
    294c:	4f 91       	pop	r20
    294e:	3f 91       	pop	r19
    2950:	2f 91       	pop	r18
    2952:	0f 90       	pop	r0
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	0f 90       	pop	r0
    2958:	1f 90       	pop	r1
    295a:	18 95       	reti

0000295c <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    295c:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    295e:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2960:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2962:	8c e0       	ldi	r24, 0x0C	; 12
    2964:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    2968:	e9 e6       	ldi	r30, 0x69	; 105
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	80 62       	ori	r24, 0x20	; 32
    2970:	80 83       	st	Z, r24
    2972:	80 81       	ld	r24, Z
    2974:	8f 7e       	andi	r24, 0xEF	; 239
    2976:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    2978:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    297a:	78 94       	sei
    297c:	08 95       	ret

0000297e <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	18 2f       	mov	r17, r24
    2986:	d6 2f       	mov	r29, r22
    2988:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    298a:	0e 94 ae 14 	call	0x295c	; 0x295c <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    298e:	94 ea       	ldi	r25, 0xA4	; 164
    2990:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2994:	ec eb       	ldi	r30, 0xBC	; 188
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	90 81       	ld	r25, Z
    299a:	99 23       	and	r25, r25
    299c:	ec f7       	brge	.-6      	; 0x2998 <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    299e:	90 e5       	ldi	r25, 0x50	; 80
    29a0:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    29a4:	94 e8       	ldi	r25, 0x84	; 132
    29a6:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    29aa:	ec eb       	ldi	r30, 0xBC	; 188
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	90 81       	ld	r25, Z
    29b0:	99 23       	and	r25, r25
    29b2:	ec f7       	brge	.-6      	; 0x29ae <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    29b4:	90 91 b9 00 	lds	r25, 0x00B9
    29b8:	98 7f       	andi	r25, 0xF8	; 248
    29ba:	90 32       	cpi	r25, 0x20	; 32
    29bc:	29 f4       	brne	.+10     	; 0x29c8 <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    29be:	84 e9       	ldi	r24, 0x94	; 148
    29c0:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    29c4:	80 e0       	ldi	r24, 0x00	; 0
    29c6:	2d c0       	rjmp	.+90     	; 0x2a22 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    29ce:	84 e8       	ldi	r24, 0x84	; 132
    29d0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29d4:	ec eb       	ldi	r30, 0xBC	; 188
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	90 81       	ld	r25, Z
    29da:	99 23       	and	r25, r25
    29dc:	ec f7       	brge	.-6      	; 0x29d8 <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    29de:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    29e2:	84 e8       	ldi	r24, 0x84	; 132
    29e4:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29e8:	ec eb       	ldi	r30, 0xBC	; 188
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	88 23       	and	r24, r24
    29f0:	ec f7       	brge	.-6      	; 0x29ec <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    29f2:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    29f6:	84 e8       	ldi	r24, 0x84	; 132
    29f8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    29fc:	ec eb       	ldi	r30, 0xBC	; 188
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	88 23       	and	r24, r24
    2a04:	ec f7       	brge	.-6      	; 0x2a00 <m_rf_open+0x82>
	
	TWDR = packet_length;
    2a06:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a0a:	84 e8       	ldi	r24, 0x84	; 132
    2a0c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2a10:	ec eb       	ldi	r30, 0xBC	; 188
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	88 23       	and	r24, r24
    2a18:	ec f7       	brge	.-6      	; 0x2a14 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2a1a:	84 e9       	ldi	r24, 0x94	; 148
    2a1c:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2a20:	81 e0       	ldi	r24, 0x01	; 1
}
    2a22:	df 91       	pop	r29
    2a24:	cf 91       	pop	r28
    2a26:	1f 91       	pop	r17
    2a28:	08 95       	ret

00002a2a <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2a2a:	cf 93       	push	r28
    2a2c:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2a2e:	24 ea       	ldi	r18, 0xA4	; 164
    2a30:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    2a34:	ec eb       	ldi	r30, 0xBC	; 188
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	20 81       	ld	r18, Z
    2a3a:	22 23       	and	r18, r18
    2a3c:	ec f7       	brge	.-6      	; 0x2a38 <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2a3e:	21 e5       	ldi	r18, 0x51	; 81
    2a40:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2a44:	24 e8       	ldi	r18, 0x84	; 132
    2a46:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2a4a:	ec eb       	ldi	r30, 0xBC	; 188
    2a4c:	f0 e0       	ldi	r31, 0x00	; 0
    2a4e:	20 81       	ld	r18, Z
    2a50:	22 23       	and	r18, r18
    2a52:	ec f7       	brge	.-6      	; 0x2a4e <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2a54:	20 91 b9 00 	lds	r18, 0x00B9
    2a58:	28 7f       	andi	r18, 0xF8	; 248
    2a5a:	28 34       	cpi	r18, 0x48	; 72
    2a5c:	29 f4       	brne	.+10     	; 0x2a68 <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2a5e:	84 e9       	ldi	r24, 0x94	; 148
    2a60:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	3f c0       	rjmp	.+126    	; 0x2ae6 <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2a68:	24 ec       	ldi	r18, 0xC4	; 196
    2a6a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2a6e:	ec eb       	ldi	r30, 0xBC	; 188
    2a70:	f0 e0       	ldi	r31, 0x00	; 0
    2a72:	20 81       	ld	r18, Z
    2a74:	22 23       	and	r18, r18
    2a76:	ec f7       	brge	.-6      	; 0x2a72 <m_rf_read+0x48>
	bytes = TWDR;
    2a78:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    2a7c:	46 13       	cpse	r20, r22
    2a7e:	09 c0       	rjmp	.+18     	; 0x2a92 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2a80:	50 e0       	ldi	r21, 0x00	; 0
    2a82:	41 50       	subi	r20, 0x01	; 1
    2a84:	51 09       	sbc	r21, r1
    2a86:	14 16       	cp	r1, r20
    2a88:	15 06       	cpc	r1, r21
    2a8a:	44 f0       	brlt	.+16     	; 0x2a9c <m_rf_read+0x72>
    2a8c:	40 e0       	ldi	r20, 0x00	; 0
    2a8e:	50 e0       	ldi	r21, 0x00	; 0
    2a90:	18 c0       	rjmp	.+48     	; 0x2ac2 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2a92:	84 e9       	ldi	r24, 0x94	; 148
    2a94:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    2a98:	80 e0       	ldi	r24, 0x00	; 0
    2a9a:	25 c0       	rjmp	.+74     	; 0x2ae6 <m_rf_read+0xbc>
    2a9c:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2aa2:	ec eb       	ldi	r30, 0xBC	; 188
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    2aa8:	cb eb       	ldi	r28, 0xBB	; 187
    2aaa:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2aac:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2aae:	60 81       	ld	r22, Z
    2ab0:	66 23       	and	r22, r22
    2ab2:	ec f7       	brge	.-6      	; 0x2aae <m_rf_read+0x84>
		buffer[i] = TWDR;
    2ab4:	68 81       	ld	r22, Y
    2ab6:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2ab8:	2f 5f       	subi	r18, 0xFF	; 255
    2aba:	3f 4f       	sbci	r19, 0xFF	; 255
    2abc:	24 17       	cp	r18, r20
    2abe:	35 07       	cpc	r19, r21
    2ac0:	ac f3       	brlt	.-22     	; 0x2aac <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2ac2:	24 e8       	ldi	r18, 0x84	; 132
    2ac4:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2ac8:	ec eb       	ldi	r30, 0xBC	; 188
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	20 81       	ld	r18, Z
    2ace:	22 23       	and	r18, r18
    2ad0:	ec f7       	brge	.-6      	; 0x2acc <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    2ad2:	20 91 bb 00 	lds	r18, 0x00BB
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	e4 0f       	add	r30, r20
    2ada:	f5 1f       	adc	r31, r21
    2adc:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ade:	84 e9       	ldi	r24, 0x94	; 148
    2ae0:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
}
    2ae6:	df 91       	pop	r29
    2ae8:	cf 91       	pop	r28
    2aea:	08 95       	ret

00002aec <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    2aec:	cf 93       	push	r28
    2aee:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    2af0:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2af2:	94 ea       	ldi	r25, 0xA4	; 164
    2af4:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2af8:	ec eb       	ldi	r30, 0xBC	; 188
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	90 81       	ld	r25, Z
    2afe:	99 23       	and	r25, r25
    2b00:	ec f7       	brge	.-6      	; 0x2afc <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2b02:	90 e5       	ldi	r25, 0x50	; 80
    2b04:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b08:	94 e8       	ldi	r25, 0x84	; 132
    2b0a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b0e:	ec eb       	ldi	r30, 0xBC	; 188
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	90 81       	ld	r25, Z
    2b14:	99 23       	and	r25, r25
    2b16:	ec f7       	brge	.-6      	; 0x2b12 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2b18:	90 91 b9 00 	lds	r25, 0x00B9
    2b1c:	98 7f       	andi	r25, 0xF8	; 248
    2b1e:	90 32       	cpi	r25, 0x20	; 32
    2b20:	31 f4       	brne	.+12     	; 0x2b2e <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2b22:	84 e9       	ldi	r24, 0x94	; 148
    2b24:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    2b28:	78 94       	sei
		return 0;
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	32 c0       	rjmp	.+100    	; 0x2b92 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    2b2e:	93 e0       	ldi	r25, 0x03	; 3
    2b30:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b34:	94 e8       	ldi	r25, 0x84	; 132
    2b36:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2b3a:	ec eb       	ldi	r30, 0xBC	; 188
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	90 81       	ld	r25, Z
    2b40:	99 23       	and	r25, r25
    2b42:	ec f7       	brge	.-6      	; 0x2b3e <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    2b44:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2b48:	84 e8       	ldi	r24, 0x84	; 132
    2b4a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2b4e:	ec eb       	ldi	r30, 0xBC	; 188
    2b50:	f0 e0       	ldi	r31, 0x00	; 0
    2b52:	80 81       	ld	r24, Z
    2b54:	88 23       	and	r24, r24
    2b56:	ec f7       	brge	.-6      	; 0x2b52 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2b58:	24 2f       	mov	r18, r20
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	12 16       	cp	r1, r18
    2b5e:	13 06       	cpc	r1, r19
    2b60:	9c f4       	brge	.+38     	; 0x2b88 <m_rf_send+0x9c>
    2b62:	a6 2f       	mov	r26, r22
    2b64:	b7 2f       	mov	r27, r23
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    2b6a:	cb eb       	ldi	r28, 0xBB	; 187
    2b6c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    2b6e:	ec eb       	ldi	r30, 0xBC	; 188
    2b70:	f0 e0       	ldi	r31, 0x00	; 0
    2b72:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    2b74:	4d 91       	ld	r20, X+
    2b76:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    2b78:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    2b7a:	40 81       	ld	r20, Z
    2b7c:	44 23       	and	r20, r20
    2b7e:	ec f7       	brge	.-6      	; 0x2b7a <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	82 17       	cp	r24, r18
    2b84:	93 07       	cpc	r25, r19
    2b86:	b4 f3       	brlt	.-20     	; 0x2b74 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2b88:	84 e9       	ldi	r24, 0x94	; 148
    2b8a:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    2b8e:	78 94       	sei
	
	return 1;
    2b90:	81 e0       	ldi	r24, 0x01	; 1
}
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	08 95       	ret

00002b98 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    2b98:	1f 92       	push	r1
    2b9a:	0f 92       	push	r0
    2b9c:	0f b6       	in	r0, 0x3f	; 63
    2b9e:	0f 92       	push	r0
    2ba0:	11 24       	eor	r1, r1
    2ba2:	8f 93       	push	r24
    2ba4:	9f 93       	push	r25
    2ba6:	ef 93       	push	r30
    2ba8:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    2baa:	e1 ee       	ldi	r30, 0xE1	; 225
    2bac:	f0 e0       	ldi	r31, 0x00	; 0
    2bae:	80 81       	ld	r24, Z
        UDINT = 0;
    2bb0:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    2bb2:	83 ff       	sbrs	r24, 3
    2bb4:	11 c0       	rjmp	.+34     	; 0x2bd8 <__vector_10+0x40>
		UENUM = 0;
    2bb6:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    2bba:	91 e0       	ldi	r25, 0x01	; 1
    2bbc:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    2bc0:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    2bc4:	92 e1       	ldi	r25, 0x12	; 18
    2bc6:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    2bca:	98 e0       	ldi	r25, 0x08	; 8
    2bcc:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    2bd0:	10 92 69 01 	sts	0x0169, r1
		cdc_line_rtsdtr = 0;
    2bd4:	10 92 6a 01 	sts	0x016A, r1
        }
	if (intbits & (1<<SOFI)) {
    2bd8:	82 ff       	sbrs	r24, 2
    2bda:	13 c0       	rjmp	.+38     	; 0x2c02 <__vector_10+0x6a>
		if (usb_configuration) {
    2bdc:	80 91 69 01 	lds	r24, 0x0169
    2be0:	88 23       	and	r24, r24
    2be2:	79 f0       	breq	.+30     	; 0x2c02 <__vector_10+0x6a>
			t = transmit_flush_timer;
    2be4:	80 91 68 01 	lds	r24, 0x0168
			if (t) {
    2be8:	88 23       	and	r24, r24
    2bea:	59 f0       	breq	.+22     	; 0x2c02 <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2bec:	81 50       	subi	r24, 0x01	; 1
    2bee:	80 93 68 01 	sts	0x0168, r24
				if (!t) {
    2bf2:	81 11       	cpse	r24, r1
    2bf4:	06 c0       	rjmp	.+12     	; 0x2c02 <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    2bf6:	84 e0       	ldi	r24, 0x04	; 4
    2bf8:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2bfc:	8a e3       	ldi	r24, 0x3A	; 58
    2bfe:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    2c02:	ff 91       	pop	r31
    2c04:	ef 91       	pop	r30
    2c06:	9f 91       	pop	r25
    2c08:	8f 91       	pop	r24
    2c0a:	0f 90       	pop	r0
    2c0c:	0f be       	out	0x3f, r0	; 63
    2c0e:	0f 90       	pop	r0
    2c10:	1f 90       	pop	r1
    2c12:	18 95       	reti

00002c14 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    2c14:	1f 92       	push	r1
    2c16:	0f 92       	push	r0
    2c18:	0f b6       	in	r0, 0x3f	; 63
    2c1a:	0f 92       	push	r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	0f 93       	push	r16
    2c20:	1f 93       	push	r17
    2c22:	2f 93       	push	r18
    2c24:	3f 93       	push	r19
    2c26:	4f 93       	push	r20
    2c28:	5f 93       	push	r21
    2c2a:	6f 93       	push	r22
    2c2c:	7f 93       	push	r23
    2c2e:	8f 93       	push	r24
    2c30:	9f 93       	push	r25
    2c32:	af 93       	push	r26
    2c34:	bf 93       	push	r27
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	ef 93       	push	r30
    2c3c:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2c3e:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    2c42:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    2c46:	83 ff       	sbrs	r24, 3
    2c48:	51 c1       	rjmp	.+674    	; 0x2eec <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    2c4a:	e1 ef       	ldi	r30, 0xF1	; 241
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    2c50:	40 81       	ld	r20, Z
                wValue = UEDATX;
    2c52:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    2c54:	30 81       	ld	r19, Z
    2c56:	93 2f       	mov	r25, r19
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	a2 2b       	or	r26, r18
    2c5e:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    2c60:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    2c62:	60 81       	ld	r22, Z
    2c64:	96 2f       	mov	r25, r22
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	85 2b       	or	r24, r21
                wLength = UEDATX;
    2c6a:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    2c6c:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2c6e:	52 ef       	ldi	r21, 0xF2	; 242
    2c70:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    2c74:	46 30       	cpi	r20, 0x06	; 6
    2c76:	09 f0       	breq	.+2      	; 0x2c7a <__vector_11+0x66>
    2c78:	5c c0       	rjmp	.+184    	; 0x2d32 <__vector_11+0x11e>
    2c7a:	04 c0       	rjmp	.+8      	; 0x2c84 <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2c7c:	81 e2       	ldi	r24, 0x21	; 33
    2c7e:	80 93 eb 00 	sts	0x00EB, r24
					return;
    2c82:	3b c1       	rjmp	.+630    	; 0x2efa <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    2c84:	c6 e0       	ldi	r28, 0x06	; 6
    2c86:	47 ef       	ldi	r20, 0xF7	; 247
    2c88:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    2c8a:	fa 01       	movw	r30, r20
    2c8c:	65 91       	lpm	r22, Z+
    2c8e:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    2c90:	26 17       	cp	r18, r22
    2c92:	37 07       	cpc	r19, r23
    2c94:	19 f0       	breq	.+6      	; 0x2c9c <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    2c96:	49 5f       	subi	r20, 0xF9	; 249
    2c98:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    2c9a:	20 c0       	rjmp	.+64     	; 0x2cdc <__vector_11+0xc8>
				}
				list += 2;
    2c9c:	fa 01       	movw	r30, r20
    2c9e:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    2ca0:	65 91       	lpm	r22, Z+
    2ca2:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    2ca4:	86 17       	cp	r24, r22
    2ca6:	97 07       	cpc	r25, r23
    2ca8:	19 f0       	breq	.+6      	; 0x2cb0 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    2caa:	49 5f       	subi	r20, 0xF9	; 249
    2cac:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    2cae:	16 c0       	rjmp	.+44     	; 0x2cdc <__vector_11+0xc8>
				}
				list += 2;
    2cb0:	fa 01       	movw	r30, r20
    2cb2:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    2cb4:	85 91       	lpm	r24, Z+
    2cb6:	94 91       	lpm	r25, Z
    2cb8:	28 2f       	mov	r18, r24
    2cba:	39 2f       	mov	r19, r25
				list += 2;
    2cbc:	fa 01       	movw	r30, r20
    2cbe:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    2cc0:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    2cc2:	9b 2f       	mov	r25, r27
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    2cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    2cca:	91 05       	cpc	r25, r1
    2ccc:	19 f0       	breq	.+6      	; 0x2cd4 <__vector_11+0xc0>
    2cce:	10 f0       	brcs	.+4      	; 0x2cd4 <__vector_11+0xc0>
    2cd0:	8f ef       	ldi	r24, 0xFF	; 255
    2cd2:	90 e0       	ldi	r25, 0x00	; 0
    2cd4:	84 17       	cp	r24, r20
    2cd6:	28 f4       	brcc	.+10     	; 0x2ce2 <__vector_11+0xce>
    2cd8:	48 2f       	mov	r20, r24
    2cda:	03 c0       	rjmp	.+6      	; 0x2ce2 <__vector_11+0xce>
    2cdc:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    2cde:	a9 f6       	brne	.-86     	; 0x2c8a <__vector_11+0x76>
    2ce0:	cd cf       	rjmp	.-102    	; 0x2c7c <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2ce2:	c8 ee       	ldi	r28, 0xE8	; 232
    2ce4:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ce6:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2ce8:	a1 ef       	ldi	r26, 0xF1	; 241
    2cea:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2cec:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2cee:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2cf0:	98 2f       	mov	r25, r24
    2cf2:	95 70       	andi	r25, 0x05	; 5
    2cf4:	e1 f3       	breq	.-8      	; 0x2cee <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    2cf6:	82 fd       	sbrc	r24, 2
    2cf8:	00 c1       	rjmp	.+512    	; 0x2efa <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2cfa:	64 2f       	mov	r22, r20
    2cfc:	41 31       	cpi	r20, 0x11	; 17
    2cfe:	08 f0       	brcs	.+2      	; 0x2d02 <__vector_11+0xee>
    2d00:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    2d02:	66 23       	and	r22, r22
    2d04:	09 f4       	brne	.+2      	; 0x2d08 <__vector_11+0xf4>
    2d06:	f6 c0       	rjmp	.+492    	; 0x2ef4 <__vector_11+0x2e0>
    2d08:	c9 01       	movw	r24, r18
    2d0a:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    2d0c:	fc 01       	movw	r30, r24
    2d0e:	01 96       	adiw	r24, 0x01	; 1
    2d10:	e4 91       	lpm	r30, Z
    2d12:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    2d14:	51 50       	subi	r21, 0x01	; 1
    2d16:	d1 f7       	brne	.-12     	; 0x2d0c <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2d18:	86 2f       	mov	r24, r22
    2d1a:	81 50       	subi	r24, 0x01	; 1
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	01 96       	adiw	r24, 0x01	; 1
    2d20:	28 0f       	add	r18, r24
    2d22:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    2d24:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d26:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2d28:	41 11       	cpse	r20, r1
    2d2a:	e1 cf       	rjmp	.-62     	; 0x2cee <__vector_11+0xda>
    2d2c:	60 31       	cpi	r22, 0x10	; 16
    2d2e:	f9 f2       	breq	.-66     	; 0x2cee <__vector_11+0xda>
    2d30:	e4 c0       	rjmp	.+456    	; 0x2efa <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    2d32:	45 30       	cpi	r20, 0x05	; 5
    2d34:	61 f4       	brne	.+24     	; 0x2d4e <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d36:	8e ef       	ldi	r24, 0xFE	; 254
    2d38:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2d3c:	e8 ee       	ldi	r30, 0xE8	; 232
    2d3e:	f0 e0       	ldi	r31, 0x00	; 0
    2d40:	80 81       	ld	r24, Z
    2d42:	80 ff       	sbrs	r24, 0
    2d44:	fd cf       	rjmp	.-6      	; 0x2d40 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    2d46:	20 68       	ori	r18, 0x80	; 128
    2d48:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2d4c:	d6 c0       	rjmp	.+428    	; 0x2efa <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2d4e:	49 30       	cpi	r20, 0x09	; 9
    2d50:	a1 f5       	brne	.+104    	; 0x2dba <__vector_11+0x1a6>
    2d52:	71 11       	cpse	r23, r1
    2d54:	5b c0       	rjmp	.+182    	; 0x2e0c <__vector_11+0x1f8>
			usb_configuration = wValue;
    2d56:	20 93 69 01 	sts	0x0169, r18
			cdc_line_rtsdtr = 0;
    2d5a:	10 92 6a 01 	sts	0x016A, r1
			transmit_flush_timer = 0;
    2d5e:	10 92 68 01 	sts	0x0168, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2d62:	8e ef       	ldi	r24, 0xFE	; 254
    2d64:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2d68:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2d6a:	81 e2       	ldi	r24, 0x21	; 33
    2d6c:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    2d6e:	c9 ee       	ldi	r28, 0xE9	; 233
    2d70:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    2d72:	ab ee       	ldi	r26, 0xEB	; 235
    2d74:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    2d76:	6c ee       	ldi	r22, 0xEC	; 236
    2d78:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2d7a:	4d ee       	ldi	r20, 0xED	; 237
    2d7c:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2d7e:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2d80:	9c 01       	movw	r18, r24
    2d82:	2f 5f       	subi	r18, 0xFF	; 255
    2d84:	3f 4f       	sbci	r19, 0xFF	; 255
    2d86:	fc 01       	movw	r30, r24
    2d88:	04 91       	lpm	r16, Z
				UECONX = en;
    2d8a:	0c 93       	st	X, r16
				if (en) {
    2d8c:	00 23       	and	r16, r16
    2d8e:	59 f0       	breq	.+22     	; 0x2da6 <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    2d90:	f9 01       	movw	r30, r18
    2d92:	24 91       	lpm	r18, Z
    2d94:	fb 01       	movw	r30, r22
    2d96:	20 83       	st	Z, r18
    2d98:	fc 01       	movw	r30, r24
    2d9a:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    2d9c:	03 96       	adiw	r24, 0x03	; 3
    2d9e:	24 91       	lpm	r18, Z
    2da0:	fa 01       	movw	r30, r20
    2da2:	20 83       	st	Z, r18
    2da4:	01 c0       	rjmp	.+2      	; 0x2da8 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    2da6:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2da8:	1f 5f       	subi	r17, 0xFF	; 255
    2daa:	15 30       	cpi	r17, 0x05	; 5
    2dac:	41 f7       	brne	.-48     	; 0x2d7e <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    2dae:	ea ee       	ldi	r30, 0xEA	; 234
    2db0:	f0 e0       	ldi	r31, 0x00	; 0
    2db2:	8e e1       	ldi	r24, 0x1E	; 30
    2db4:	80 83       	st	Z, r24
        		UERST = 0;
    2db6:	10 82       	st	Z, r1
			return;
    2db8:	a0 c0       	rjmp	.+320    	; 0x2efa <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    2dba:	48 30       	cpi	r20, 0x08	; 8
    2dbc:	81 f4       	brne	.+32     	; 0x2dde <__vector_11+0x1ca>
    2dbe:	70 38       	cpi	r23, 0x80	; 128
    2dc0:	09 f0       	breq	.+2      	; 0x2dc4 <__vector_11+0x1b0>
    2dc2:	3f c0       	rjmp	.+126    	; 0x2e42 <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2dc4:	e8 ee       	ldi	r30, 0xE8	; 232
    2dc6:	f0 e0       	ldi	r31, 0x00	; 0
    2dc8:	80 81       	ld	r24, Z
    2dca:	80 ff       	sbrs	r24, 0
    2dcc:	fd cf       	rjmp	.-6      	; 0x2dc8 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    2dce:	80 91 69 01 	lds	r24, 0x0169
    2dd2:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2dd6:	8e ef       	ldi	r24, 0xFE	; 254
    2dd8:	80 93 e8 00 	sts	0x00E8, r24
    2ddc:	8e c0       	rjmp	.+284    	; 0x2efa <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    2dde:	41 32       	cpi	r20, 0x21	; 33
    2de0:	a9 f4       	brne	.+42     	; 0x2e0c <__vector_11+0x1f8>
    2de2:	71 3a       	cpi	r23, 0xA1	; 161
    2de4:	f1 f5       	brne	.+124    	; 0x2e62 <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2de6:	e8 ee       	ldi	r30, 0xE8	; 232
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	80 81       	ld	r24, Z
    2dec:	80 ff       	sbrs	r24, 0
    2dee:	fd cf       	rjmp	.-6      	; 0x2dea <__vector_11+0x1d6>
    2df0:	e4 e0       	ldi	r30, 0x04	; 4
    2df2:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    2df4:	a1 ef       	ldi	r26, 0xF1	; 241
    2df6:	b0 e0       	ldi	r27, 0x00	; 0
    2df8:	81 91       	ld	r24, Z+
    2dfa:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2dfc:	41 e0       	ldi	r20, 0x01	; 1
    2dfe:	eb 30       	cpi	r30, 0x0B	; 11
    2e00:	f4 07       	cpc	r31, r20
    2e02:	d1 f7       	brne	.-12     	; 0x2df8 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e04:	8e ef       	ldi	r24, 0xFE	; 254
    2e06:	80 93 e8 00 	sts	0x00E8, r24
    2e0a:	77 c0       	rjmp	.+238    	; 0x2efa <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2e0c:	40 32       	cpi	r20, 0x20	; 32
    2e0e:	c9 f4       	brne	.+50     	; 0x2e42 <__vector_11+0x22e>
    2e10:	71 32       	cpi	r23, 0x21	; 33
    2e12:	09 f0       	breq	.+2      	; 0x2e16 <__vector_11+0x202>
    2e14:	6b c0       	rjmp	.+214    	; 0x2eec <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    2e16:	e8 ee       	ldi	r30, 0xE8	; 232
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	80 81       	ld	r24, Z
    2e1c:	82 ff       	sbrs	r24, 2
    2e1e:	fd cf       	rjmp	.-6      	; 0x2e1a <__vector_11+0x206>
    2e20:	e4 e0       	ldi	r30, 0x04	; 4
    2e22:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    2e24:	a1 ef       	ldi	r26, 0xF1	; 241
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	8c 91       	ld	r24, X
    2e2a:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2e2c:	51 e0       	ldi	r21, 0x01	; 1
    2e2e:	eb 30       	cpi	r30, 0x0B	; 11
    2e30:	f5 07       	cpc	r31, r21
    2e32:	d1 f7       	brne	.-12     	; 0x2e28 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    2e34:	e8 ee       	ldi	r30, 0xE8	; 232
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	8b ef       	ldi	r24, 0xFB	; 251
    2e3a:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e3c:	8e ef       	ldi	r24, 0xFE	; 254
    2e3e:	80 83       	st	Z, r24
    2e40:	5c c0       	rjmp	.+184    	; 0x2efa <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    2e42:	42 32       	cpi	r20, 0x22	; 34
    2e44:	71 f4       	brne	.+28     	; 0x2e62 <__vector_11+0x24e>
    2e46:	71 32       	cpi	r23, 0x21	; 33
    2e48:	09 f0       	breq	.+2      	; 0x2e4c <__vector_11+0x238>
    2e4a:	50 c0       	rjmp	.+160    	; 0x2eec <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    2e4c:	20 93 6a 01 	sts	0x016A, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2e50:	e8 ee       	ldi	r30, 0xE8	; 232
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	80 ff       	sbrs	r24, 0
    2e58:	fd cf       	rjmp	.-6      	; 0x2e54 <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e5a:	8e ef       	ldi	r24, 0xFE	; 254
    2e5c:	80 93 e8 00 	sts	0x00E8, r24
    2e60:	4c c0       	rjmp	.+152    	; 0x2efa <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    2e62:	41 11       	cpse	r20, r1
    2e64:	1a c0       	rjmp	.+52     	; 0x2e9a <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2e66:	e8 ee       	ldi	r30, 0xE8	; 232
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	20 81       	ld	r18, Z
    2e6c:	20 ff       	sbrs	r18, 0
    2e6e:	fd cf       	rjmp	.-6      	; 0x2e6a <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2e70:	72 38       	cpi	r23, 0x82	; 130
    2e72:	51 f4       	brne	.+20     	; 0x2e88 <__vector_11+0x274>
				UENUM = wIndex;
    2e74:	e9 ee       	ldi	r30, 0xE9	; 233
    2e76:	f0 e0       	ldi	r31, 0x00	; 0
    2e78:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    2e7a:	80 91 eb 00 	lds	r24, 0x00EB
    2e7e:	85 fb       	bst	r24, 5
    2e80:	88 27       	eor	r24, r24
    2e82:	80 f9       	bld	r24, 0
				UENUM = 0;
    2e84:	10 82       	st	Z, r1
    2e86:	01 c0       	rjmp	.+2      	; 0x2e8a <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    2e88:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    2e8a:	e1 ef       	ldi	r30, 0xF1	; 241
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 83       	st	Z, r24
			UEDATX = 0;
    2e90:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2e92:	8e ef       	ldi	r24, 0xFE	; 254
    2e94:	80 93 e8 00 	sts	0x00E8, r24
    2e98:	30 c0       	rjmp	.+96     	; 0x2efa <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    2e9a:	41 30       	cpi	r20, 0x01	; 1
    2e9c:	11 f0       	breq	.+4      	; 0x2ea2 <__vector_11+0x28e>
    2e9e:	43 30       	cpi	r20, 0x03	; 3
    2ea0:	29 f5       	brne	.+74     	; 0x2eec <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    2ea2:	72 30       	cpi	r23, 0x02	; 2
    2ea4:	19 f5       	brne	.+70     	; 0x2eec <__vector_11+0x2d8>
    2ea6:	23 2b       	or	r18, r19
    2ea8:	09 f5       	brne	.+66     	; 0x2eec <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    2eaa:	8f 77       	andi	r24, 0x7F	; 127
    2eac:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    2eae:	38 2f       	mov	r19, r24
    2eb0:	31 50       	subi	r19, 0x01	; 1
    2eb2:	34 30       	cpi	r19, 0x04	; 4
    2eb4:	d8 f4       	brcc	.+54     	; 0x2eec <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2eb6:	3e ef       	ldi	r19, 0xFE	; 254
    2eb8:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    2ebc:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    2ec0:	43 30       	cpi	r20, 0x03	; 3
    2ec2:	21 f4       	brne	.+8      	; 0x2ecc <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    2ec4:	81 e2       	ldi	r24, 0x21	; 33
    2ec6:	80 93 eb 00 	sts	0x00EB, r24
    2eca:	17 c0       	rjmp	.+46     	; 0x2efa <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    2ecc:	99 e1       	ldi	r25, 0x19	; 25
    2ece:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    2ed2:	21 e0       	ldi	r18, 0x01	; 1
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	d9 01       	movw	r26, r18
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <__vector_11+0x2ca>
    2eda:	aa 0f       	add	r26, r26
    2edc:	bb 1f       	adc	r27, r27
    2ede:	8a 95       	dec	r24
    2ee0:	e2 f7       	brpl	.-8      	; 0x2eda <__vector_11+0x2c6>
    2ee2:	ea ee       	ldi	r30, 0xEA	; 234
    2ee4:	f0 e0       	ldi	r31, 0x00	; 0
    2ee6:	a0 83       	st	Z, r26
					UERST = 0;
    2ee8:	10 82       	st	Z, r1
    2eea:	07 c0       	rjmp	.+14     	; 0x2efa <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2eec:	81 e2       	ldi	r24, 0x21	; 33
    2eee:	80 93 eb 00 	sts	0x00EB, r24
    2ef2:	03 c0       	rjmp	.+6      	; 0x2efa <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2ef4:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2ef6:	41 11       	cpse	r20, r1
    2ef8:	fa ce       	rjmp	.-524    	; 0x2cee <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2efa:	ff 91       	pop	r31
    2efc:	ef 91       	pop	r30
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	bf 91       	pop	r27
    2f04:	af 91       	pop	r26
    2f06:	9f 91       	pop	r25
    2f08:	8f 91       	pop	r24
    2f0a:	7f 91       	pop	r23
    2f0c:	6f 91       	pop	r22
    2f0e:	5f 91       	pop	r21
    2f10:	4f 91       	pop	r20
    2f12:	3f 91       	pop	r19
    2f14:	2f 91       	pop	r18
    2f16:	1f 91       	pop	r17
    2f18:	0f 91       	pop	r16
    2f1a:	0f 90       	pop	r0
    2f1c:	0f be       	out	0x3f, r0	; 63
    2f1e:	0f 90       	pop	r0
    2f20:	1f 90       	pop	r1
    2f22:	18 95       	reti

00002f24 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2f24:	20 e0       	ldi	r18, 0x00	; 0
    2f26:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2f28:	ec eb       	ldi	r30, 0xBC	; 188
    2f2a:	f0 e0       	ldi	r31, 0x00	; 0
    2f2c:	80 81       	ld	r24, Z
    2f2e:	88 23       	and	r24, r24
    2f30:	34 f0       	brlt	.+12     	; 0x2f3e <twi_wait+0x1a>
    2f32:	2f 5f       	subi	r18, 0xFF	; 255
    2f34:	3f 4f       	sbci	r19, 0xFF	; 255
    2f36:	29 3e       	cpi	r18, 0xE9	; 233
    2f38:	83 e0       	ldi	r24, 0x03	; 3
    2f3a:	38 07       	cpc	r19, r24
    2f3c:	b9 f7       	brne	.-18     	; 0x2f2c <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2f3e:	81 e0       	ldi	r24, 0x01	; 1
    2f40:	28 3e       	cpi	r18, 0xE8	; 232
    2f42:	33 40       	sbci	r19, 0x03	; 3
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <twi_wait+0x24>
    2f46:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2f48:	08 95       	ret

00002f4a <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2f4a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2f4e:	84 e8       	ldi	r24, 0x84	; 132
    2f50:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2f54:	0e 94 92 17 	call	0x2f24	; 0x2f24 <twi_wait>
    2f58:	88 23       	and	r24, r24
    2f5a:	21 f0       	breq	.+8      	; 0x2f64 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2f5c:	80 91 b9 00 	lds	r24, 0x00B9
    2f60:	88 7f       	andi	r24, 0xF8	; 248
    2f62:	08 95       	ret
	} else {
		return 0;					// comm failure
    2f64:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2f66:	08 95       	ret

00002f68 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2f68:	cf 93       	push	r28
    2f6a:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2f6c:	94 ea       	ldi	r25, 0xA4	; 164
    2f6e:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2f72:	0e 94 92 17 	call	0x2f24	; 0x2f24 <twi_wait>
    2f76:	88 23       	and	r24, r24
    2f78:	61 f0       	breq	.+24     	; 0x2f92 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2f7a:	8c 2f       	mov	r24, r28
    2f7c:	88 0f       	add	r24, r24
    2f7e:	8f 5f       	subi	r24, 0xFF	; 255
    2f80:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2f84:	88 34       	cpi	r24, 0x48	; 72
    2f86:	39 f4       	brne	.+14     	; 0x2f96 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2f88:	84 e9       	ldi	r24, 0x94	; 148
    2f8a:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	03 c0       	rjmp	.+6      	; 0x2f98 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2f92:	80 e0       	ldi	r24, 0x00	; 0
    2f94:	01 c0       	rjmp	.+2      	; 0x2f98 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2f96:	81 e0       	ldi	r24, 0x01	; 1
}	
    2f98:	cf 91       	pop	r28
    2f9a:	08 95       	ret

00002f9c <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2f9c:	cf 93       	push	r28
    2f9e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2fa0:	94 ea       	ldi	r25, 0xA4	; 164
    2fa2:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2fa6:	0e 94 92 17 	call	0x2f24	; 0x2f24 <twi_wait>
    2faa:	88 23       	and	r24, r24
    2fac:	59 f0       	breq	.+22     	; 0x2fc4 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2fae:	8c 2f       	mov	r24, r28
    2fb0:	88 0f       	add	r24, r24
    2fb2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2fb6:	80 32       	cpi	r24, 0x20	; 32
    2fb8:	39 f4       	brne	.+14     	; 0x2fc8 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2fba:	84 e9       	ldi	r24, 0x94	; 148
    2fbc:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	03 c0       	rjmp	.+6      	; 0x2fca <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
}	
    2fca:	cf 91       	pop	r28
    2fcc:	08 95       	ret

00002fce <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2fce:	84 e9       	ldi	r24, 0x94	; 148
    2fd0:	80 93 bc 00 	sts	0x00BC, r24
    2fd4:	08 95       	ret

00002fd6 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	60 97       	sbiw	r28, 0x10	; 16
    2fe8:	0f b6       	in	r0, 0x3f	; 63
    2fea:	f8 94       	cli
    2fec:	de bf       	out	0x3e, r29	; 62
    2fee:	0f be       	out	0x3f, r0	; 63
    2ff0:	cd bf       	out	0x3d, r28	; 61
    2ff2:	e8 2e       	mov	r14, r24
    2ff4:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2ff6:	fe 01       	movw	r30, r28
    2ff8:	31 96       	adiw	r30, 0x01	; 1
    2ffa:	80 e1       	ldi	r24, 0x10	; 16
    2ffc:	df 01       	movw	r26, r30
    2ffe:	1d 92       	st	X+, r1
    3000:	8a 95       	dec	r24
    3002:	e9 f7       	brne	.-6      	; 0x2ffe <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    3004:	88 e5       	ldi	r24, 0x58	; 88
    3006:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    300a:	88 23       	and	r24, r24
    300c:	09 f4       	brne	.+2      	; 0x3010 <m_wii_read+0x3a>
    300e:	66 c0       	rjmp	.+204    	; 0x30dc <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    3010:	86 e3       	ldi	r24, 0x36	; 54
    3012:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3016:	88 23       	and	r24, r24
    3018:	09 f4       	brne	.+2      	; 0x301c <m_wii_read+0x46>
    301a:	62 c0       	rjmp	.+196    	; 0x30e0 <m_wii_read+0x10a>
	end();
    301c:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3020:	b8 e0       	ldi	r27, 0x08	; 8
    3022:	ba 95       	dec	r27
    3024:	f1 f7       	brne	.-4      	; 0x3022 <m_wii_read+0x4c>
    3026:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    3028:	88 e5       	ldi	r24, 0x58	; 88
    302a:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <start_read>
    302e:	88 23       	and	r24, r24
    3030:	09 f4       	brne	.+2      	; 0x3034 <m_wii_read+0x5e>
    3032:	58 c0       	rjmp	.+176    	; 0x30e4 <m_wii_read+0x10e>
    3034:	ae 01       	movw	r20, r28
    3036:	4f 5f       	subi	r20, 0xFF	; 255
    3038:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    303a:	8e 01       	movw	r16, r28
    303c:	00 5f       	subi	r16, 0xF0	; 240
    303e:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    3040:	ec eb       	ldi	r30, 0xBC	; 188
    3042:	f0 e0       	ldi	r31, 0x00	; 0
    3044:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    3046:	2b eb       	ldi	r18, 0xBB	; 187
    3048:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    304a:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    304c:	80 81       	ld	r24, Z
    304e:	88 23       	and	r24, r24
    3050:	ec f7       	brge	.-6      	; 0x304c <m_wii_read+0x76>
		temp[i] = TWDR;
    3052:	d9 01       	movw	r26, r18
    3054:	8c 91       	ld	r24, X
    3056:	da 01       	movw	r26, r20
    3058:	8d 93       	st	X+, r24
    305a:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    305c:	a0 17       	cp	r26, r16
    305e:	b1 07       	cpc	r27, r17
    3060:	a1 f7       	brne	.-24     	; 0x304a <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    3062:	84 e8       	ldi	r24, 0x84	; 132
    3064:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    3068:	ec eb       	ldi	r30, 0xBC	; 188
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
    306e:	88 23       	and	r24, r24
    3070:	ec f7       	brge	.-6      	; 0x306c <m_wii_read+0x96>
	temp[15] = TWDR;
    3072:	80 91 bb 00 	lds	r24, 0x00BB
    3076:	88 8b       	std	Y+16, r24	; 0x10
	end();
    3078:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
    307c:	de 01       	movw	r26, r28
    307e:	14 96       	adiw	r26, 0x04	; 4
    3080:	6e 2d       	mov	r22, r14
    3082:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    3084:	4c 91       	ld	r20, X
    3086:	24 2f       	mov	r18, r20
    3088:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    308a:	cd 01       	movw	r24, r26
    308c:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    308e:	fc 01       	movw	r30, r24
    3090:	80 81       	ld	r24, Z
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	f0 e1       	ldi	r31, 0x10	; 16
    3096:	2f 9f       	mul	r18, r31
    3098:	80 0d       	add	r24, r0
    309a:	91 1d       	adc	r25, r1
    309c:	11 24       	eor	r1, r1
    309e:	fb 01       	movw	r30, r22
    30a0:	91 83       	std	Z+1, r25	; 0x01
    30a2:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    30a4:	84 2f       	mov	r24, r20
    30a6:	80 7c       	andi	r24, 0xC0	; 192
    30a8:	90 e0       	ldi	r25, 0x00	; 0
    30aa:	88 0f       	add	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	88 0f       	add	r24, r24
    30b0:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    30b2:	9d 01       	movw	r18, r26
    30b4:	21 50       	subi	r18, 0x01	; 1
    30b6:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    30b8:	f9 01       	movw	r30, r18
    30ba:	20 81       	ld	r18, Z
    30bc:	82 0f       	add	r24, r18
    30be:	91 1d       	adc	r25, r1
    30c0:	fb 01       	movw	r30, r22
    30c2:	93 83       	std	Z+3, r25	; 0x03
    30c4:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    30c6:	4f 70       	andi	r20, 0x0F	; 15
    30c8:	44 83       	std	Z+4, r20	; 0x04
    30ca:	15 82       	std	Z+5, r1	; 0x05
    30cc:	13 96       	adiw	r26, 0x03	; 3
    30ce:	6a 5f       	subi	r22, 0xFA	; 250
    30d0:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    30d2:	0a 17       	cp	r16, r26
    30d4:	1b 07       	cpc	r17, r27
    30d6:	b1 f6       	brne	.-84     	; 0x3084 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	05 c0       	rjmp	.+10     	; 0x30e6 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    30dc:	80 e0       	ldi	r24, 0x00	; 0
    30de:	03 c0       	rjmp	.+6      	; 0x30e6 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    30e0:	80 e0       	ldi	r24, 0x00	; 0
    30e2:	01 c0       	rjmp	.+2      	; 0x30e6 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    30e4:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    30e6:	60 96       	adiw	r28, 0x10	; 16
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	ff 90       	pop	r15
    30fc:	ef 90       	pop	r14
    30fe:	08 95       	ret

00003100 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    3100:	0e 94 ae 14 	call	0x295c	; 0x295c <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    3104:	88 e5       	ldi	r24, 0x58	; 88
    3106:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    310a:	88 23       	and	r24, r24
    310c:	09 f4       	brne	.+2      	; 0x3110 <m_wii_open+0x10>
    310e:	c7 c0       	rjmp	.+398    	; 0x329e <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    3110:	80 e3       	ldi	r24, 0x30	; 48
    3112:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3116:	88 23       	and	r24, r24
    3118:	09 f4       	brne	.+2      	; 0x311c <m_wii_open+0x1c>
    311a:	c3 c0       	rjmp	.+390    	; 0x32a2 <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3122:	88 23       	and	r24, r24
    3124:	09 f4       	brne	.+2      	; 0x3128 <m_wii_open+0x28>
    3126:	bf c0       	rjmp	.+382    	; 0x32a6 <m_wii_open+0x1a6>
	end();
    3128:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    312c:	83 ec       	ldi	r24, 0xC3	; 195
    312e:	99 e0       	ldi	r25, 0x09	; 9
    3130:	01 97       	sbiw	r24, 0x01	; 1
    3132:	f1 f7       	brne	.-4      	; 0x3130 <m_wii_open+0x30>
    3134:	00 c0       	rjmp	.+0      	; 0x3136 <m_wii_open+0x36>
    3136:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    3138:	88 e5       	ldi	r24, 0x58	; 88
    313a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    313e:	88 23       	and	r24, r24
    3140:	09 f4       	brne	.+2      	; 0x3144 <m_wii_open+0x44>
    3142:	b3 c0       	rjmp	.+358    	; 0x32aa <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    3144:	80 e0       	ldi	r24, 0x00	; 0
    3146:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    314a:	88 23       	and	r24, r24
    314c:	09 f4       	brne	.+2      	; 0x3150 <m_wii_open+0x50>
    314e:	af c0       	rjmp	.+350    	; 0x32ae <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    3150:	80 e0       	ldi	r24, 0x00	; 0
    3152:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3156:	88 23       	and	r24, r24
    3158:	09 f4       	brne	.+2      	; 0x315c <m_wii_open+0x5c>
    315a:	ab c0       	rjmp	.+342    	; 0x32b2 <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    315c:	80 e0       	ldi	r24, 0x00	; 0
    315e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3162:	88 23       	and	r24, r24
    3164:	09 f4       	brne	.+2      	; 0x3168 <m_wii_open+0x68>
    3166:	a7 c0       	rjmp	.+334    	; 0x32b6 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    3168:	80 e0       	ldi	r24, 0x00	; 0
    316a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    316e:	88 23       	and	r24, r24
    3170:	09 f4       	brne	.+2      	; 0x3174 <m_wii_open+0x74>
    3172:	a3 c0       	rjmp	.+326    	; 0x32ba <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    3174:	80 e0       	ldi	r24, 0x00	; 0
    3176:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    317a:	88 23       	and	r24, r24
    317c:	09 f4       	brne	.+2      	; 0x3180 <m_wii_open+0x80>
    317e:	9f c0       	rjmp	.+318    	; 0x32be <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    3180:	80 e0       	ldi	r24, 0x00	; 0
    3182:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3186:	88 23       	and	r24, r24
    3188:	09 f4       	brne	.+2      	; 0x318c <m_wii_open+0x8c>
    318a:	9b c0       	rjmp	.+310    	; 0x32c2 <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    318c:	80 e0       	ldi	r24, 0x00	; 0
    318e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3192:	88 23       	and	r24, r24
    3194:	09 f4       	brne	.+2      	; 0x3198 <m_wii_open+0x98>
    3196:	97 c0       	rjmp	.+302    	; 0x32c6 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    3198:	80 e9       	ldi	r24, 0x90	; 144
    319a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    319e:	88 23       	and	r24, r24
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <m_wii_open+0xa4>
    31a2:	93 c0       	rjmp	.+294    	; 0x32ca <m_wii_open+0x1ca>
	end();
    31a4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
    31a8:	83 ec       	ldi	r24, 0xC3	; 195
    31aa:	99 e0       	ldi	r25, 0x09	; 9
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <m_wii_open+0xac>
    31b0:	00 c0       	rjmp	.+0      	; 0x31b2 <m_wii_open+0xb2>
    31b2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    31b4:	88 e5       	ldi	r24, 0x58	; 88
    31b6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    31ba:	88 23       	and	r24, r24
    31bc:	09 f4       	brne	.+2      	; 0x31c0 <m_wii_open+0xc0>
    31be:	87 c0       	rjmp	.+270    	; 0x32ce <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    31c0:	87 e0       	ldi	r24, 0x07	; 7
    31c2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    31c6:	88 23       	and	r24, r24
    31c8:	09 f4       	brne	.+2      	; 0x31cc <m_wii_open+0xcc>
    31ca:	83 c0       	rjmp	.+262    	; 0x32d2 <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    31cc:	80 e0       	ldi	r24, 0x00	; 0
    31ce:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    31d2:	88 23       	and	r24, r24
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <m_wii_open+0xd8>
    31d6:	7f c0       	rjmp	.+254    	; 0x32d6 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    31d8:	81 e4       	ldi	r24, 0x41	; 65
    31da:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    31de:	88 23       	and	r24, r24
    31e0:	09 f4       	brne	.+2      	; 0x31e4 <m_wii_open+0xe4>
    31e2:	7b c0       	rjmp	.+246    	; 0x32da <m_wii_open+0x1da>
	end();
    31e4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
    31e8:	83 ec       	ldi	r24, 0xC3	; 195
    31ea:	99 e0       	ldi	r25, 0x09	; 9
    31ec:	01 97       	sbiw	r24, 0x01	; 1
    31ee:	f1 f7       	brne	.-4      	; 0x31ec <m_wii_open+0xec>
    31f0:	00 c0       	rjmp	.+0      	; 0x31f2 <m_wii_open+0xf2>
    31f2:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    31f4:	88 e5       	ldi	r24, 0x58	; 88
    31f6:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    31fa:	88 23       	and	r24, r24
    31fc:	09 f4       	brne	.+2      	; 0x3200 <m_wii_open+0x100>
    31fe:	6f c0       	rjmp	.+222    	; 0x32de <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    3200:	8a e1       	ldi	r24, 0x1A	; 26
    3202:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3206:	88 23       	and	r24, r24
    3208:	09 f4       	brne	.+2      	; 0x320c <m_wii_open+0x10c>
    320a:	6b c0       	rjmp	.+214    	; 0x32e2 <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    320c:	80 e4       	ldi	r24, 0x40	; 64
    320e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3212:	88 23       	and	r24, r24
    3214:	09 f4       	brne	.+2      	; 0x3218 <m_wii_open+0x118>
    3216:	67 c0       	rjmp	.+206    	; 0x32e6 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    3218:	80 e0       	ldi	r24, 0x00	; 0
    321a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    321e:	88 23       	and	r24, r24
    3220:	09 f4       	brne	.+2      	; 0x3224 <m_wii_open+0x124>
    3222:	63 c0       	rjmp	.+198    	; 0x32ea <m_wii_open+0x1ea>
	end();
    3224:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
    3228:	83 ec       	ldi	r24, 0xC3	; 195
    322a:	99 e0       	ldi	r25, 0x09	; 9
    322c:	01 97       	sbiw	r24, 0x01	; 1
    322e:	f1 f7       	brne	.-4      	; 0x322c <m_wii_open+0x12c>
    3230:	00 c0       	rjmp	.+0      	; 0x3232 <m_wii_open+0x132>
    3232:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3234:	88 e5       	ldi	r24, 0x58	; 88
    3236:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    323a:	88 23       	and	r24, r24
    323c:	09 f4       	brne	.+2      	; 0x3240 <m_wii_open+0x140>
    323e:	57 c0       	rjmp	.+174    	; 0x32ee <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    3240:	83 e3       	ldi	r24, 0x33	; 51
    3242:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3246:	88 23       	and	r24, r24
    3248:	09 f4       	brne	.+2      	; 0x324c <m_wii_open+0x14c>
    324a:	53 c0       	rjmp	.+166    	; 0x32f2 <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    324c:	83 e0       	ldi	r24, 0x03	; 3
    324e:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3252:	88 23       	and	r24, r24
    3254:	09 f4       	brne	.+2      	; 0x3258 <m_wii_open+0x158>
    3256:	4f c0       	rjmp	.+158    	; 0x32f6 <m_wii_open+0x1f6>
	end();
    3258:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
    325c:	83 ec       	ldi	r24, 0xC3	; 195
    325e:	99 e0       	ldi	r25, 0x09	; 9
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	f1 f7       	brne	.-4      	; 0x3260 <m_wii_open+0x160>
    3264:	00 c0       	rjmp	.+0      	; 0x3266 <m_wii_open+0x166>
    3266:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    3268:	88 e5       	ldi	r24, 0x58	; 88
    326a:	0e 94 ce 17 	call	0x2f9c	; 0x2f9c <start_write>
    326e:	88 23       	and	r24, r24
    3270:	09 f4       	brne	.+2      	; 0x3274 <m_wii_open+0x174>
    3272:	43 c0       	rjmp	.+134    	; 0x32fa <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    3274:	80 e3       	ldi	r24, 0x30	; 48
    3276:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    327a:	88 23       	and	r24, r24
    327c:	09 f4       	brne	.+2      	; 0x3280 <m_wii_open+0x180>
    327e:	3f c0       	rjmp	.+126    	; 0x32fe <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    3280:	88 e0       	ldi	r24, 0x08	; 8
    3282:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <send_byte>
    3286:	88 23       	and	r24, r24
    3288:	e1 f1       	breq	.+120    	; 0x3302 <m_wii_open+0x202>
	end();
    328a:	0e 94 e7 17 	call	0x2fce	; 0x2fce <end>
    328e:	83 ec       	ldi	r24, 0xC3	; 195
    3290:	99 e0       	ldi	r25, 0x09	; 9
    3292:	01 97       	sbiw	r24, 0x01	; 1
    3294:	f1 f7       	brne	.-4      	; 0x3292 <m_wii_open+0x192>
    3296:	00 c0       	rjmp	.+0      	; 0x3298 <m_wii_open+0x198>
    3298:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    329a:	81 e0       	ldi	r24, 0x01	; 1
    329c:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    329e:	80 e0       	ldi	r24, 0x00	; 0
    32a0:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    32a2:	80 e0       	ldi	r24, 0x00	; 0
    32a4:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    32a6:	80 e0       	ldi	r24, 0x00	; 0
    32a8:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    32aa:	80 e0       	ldi	r24, 0x00	; 0
    32ac:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32ae:	80 e0       	ldi	r24, 0x00	; 0
    32b0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32b2:	80 e0       	ldi	r24, 0x00	; 0
    32b4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32b6:	80 e0       	ldi	r24, 0x00	; 0
    32b8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32be:	80 e0       	ldi	r24, 0x00	; 0
    32c0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    32ce:	80 e0       	ldi	r24, 0x00	; 0
    32d0:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    32d6:	80 e0       	ldi	r24, 0x00	; 0
    32d8:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    32e6:	80 e0       	ldi	r24, 0x00	; 0
    32e8:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    32ea:	80 e0       	ldi	r24, 0x00	; 0
    32ec:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    32f2:	80 e0       	ldi	r24, 0x00	; 0
    32f4:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    32fe:	80 e0       	ldi	r24, 0x00	; 0
    3300:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    3302:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    3304:	08 95       	ret

00003306 <__subsf3>:
    3306:	50 58       	subi	r21, 0x80	; 128

00003308 <__addsf3>:
    3308:	bb 27       	eor	r27, r27
    330a:	aa 27       	eor	r26, r26
    330c:	0e d0       	rcall	.+28     	; 0x332a <__addsf3x>
    330e:	27 c2       	rjmp	.+1102   	; 0x375e <__fp_round>
    3310:	f0 d1       	rcall	.+992    	; 0x36f2 <__fp_pscA>
    3312:	30 f0       	brcs	.+12     	; 0x3320 <__addsf3+0x18>
    3314:	f5 d1       	rcall	.+1002   	; 0x3700 <__fp_pscB>
    3316:	20 f0       	brcs	.+8      	; 0x3320 <__addsf3+0x18>
    3318:	31 f4       	brne	.+12     	; 0x3326 <__addsf3+0x1e>
    331a:	9f 3f       	cpi	r25, 0xFF	; 255
    331c:	11 f4       	brne	.+4      	; 0x3322 <__addsf3+0x1a>
    331e:	1e f4       	brtc	.+6      	; 0x3326 <__addsf3+0x1e>
    3320:	c0 c1       	rjmp	.+896    	; 0x36a2 <__fp_nan>
    3322:	0e f4       	brtc	.+2      	; 0x3326 <__addsf3+0x1e>
    3324:	e0 95       	com	r30
    3326:	e7 fb       	bst	r30, 7
    3328:	b6 c1       	rjmp	.+876    	; 0x3696 <__fp_inf>

0000332a <__addsf3x>:
    332a:	e9 2f       	mov	r30, r25
    332c:	3a d2       	rcall	.+1140   	; 0x37a2 <__fp_split3>
    332e:	80 f3       	brcs	.-32     	; 0x3310 <__addsf3+0x8>
    3330:	ba 17       	cp	r27, r26
    3332:	62 07       	cpc	r22, r18
    3334:	73 07       	cpc	r23, r19
    3336:	84 07       	cpc	r24, r20
    3338:	95 07       	cpc	r25, r21
    333a:	18 f0       	brcs	.+6      	; 0x3342 <__addsf3x+0x18>
    333c:	71 f4       	brne	.+28     	; 0x335a <__addsf3x+0x30>
    333e:	9e f5       	brtc	.+102    	; 0x33a6 <__addsf3x+0x7c>
    3340:	52 c2       	rjmp	.+1188   	; 0x37e6 <__fp_zero>
    3342:	0e f4       	brtc	.+2      	; 0x3346 <__addsf3x+0x1c>
    3344:	e0 95       	com	r30
    3346:	0b 2e       	mov	r0, r27
    3348:	ba 2f       	mov	r27, r26
    334a:	a0 2d       	mov	r26, r0
    334c:	0b 01       	movw	r0, r22
    334e:	b9 01       	movw	r22, r18
    3350:	90 01       	movw	r18, r0
    3352:	0c 01       	movw	r0, r24
    3354:	ca 01       	movw	r24, r20
    3356:	a0 01       	movw	r20, r0
    3358:	11 24       	eor	r1, r1
    335a:	ff 27       	eor	r31, r31
    335c:	59 1b       	sub	r21, r25
    335e:	99 f0       	breq	.+38     	; 0x3386 <__addsf3x+0x5c>
    3360:	59 3f       	cpi	r21, 0xF9	; 249
    3362:	50 f4       	brcc	.+20     	; 0x3378 <__addsf3x+0x4e>
    3364:	50 3e       	cpi	r21, 0xE0	; 224
    3366:	68 f1       	brcs	.+90     	; 0x33c2 <__addsf3x+0x98>
    3368:	1a 16       	cp	r1, r26
    336a:	f0 40       	sbci	r31, 0x00	; 0
    336c:	a2 2f       	mov	r26, r18
    336e:	23 2f       	mov	r18, r19
    3370:	34 2f       	mov	r19, r20
    3372:	44 27       	eor	r20, r20
    3374:	58 5f       	subi	r21, 0xF8	; 248
    3376:	f3 cf       	rjmp	.-26     	; 0x335e <__addsf3x+0x34>
    3378:	46 95       	lsr	r20
    337a:	37 95       	ror	r19
    337c:	27 95       	ror	r18
    337e:	a7 95       	ror	r26
    3380:	f0 40       	sbci	r31, 0x00	; 0
    3382:	53 95       	inc	r21
    3384:	c9 f7       	brne	.-14     	; 0x3378 <__addsf3x+0x4e>
    3386:	7e f4       	brtc	.+30     	; 0x33a6 <__addsf3x+0x7c>
    3388:	1f 16       	cp	r1, r31
    338a:	ba 0b       	sbc	r27, r26
    338c:	62 0b       	sbc	r22, r18
    338e:	73 0b       	sbc	r23, r19
    3390:	84 0b       	sbc	r24, r20
    3392:	ba f0       	brmi	.+46     	; 0x33c2 <__addsf3x+0x98>
    3394:	91 50       	subi	r25, 0x01	; 1
    3396:	a1 f0       	breq	.+40     	; 0x33c0 <__addsf3x+0x96>
    3398:	ff 0f       	add	r31, r31
    339a:	bb 1f       	adc	r27, r27
    339c:	66 1f       	adc	r22, r22
    339e:	77 1f       	adc	r23, r23
    33a0:	88 1f       	adc	r24, r24
    33a2:	c2 f7       	brpl	.-16     	; 0x3394 <__addsf3x+0x6a>
    33a4:	0e c0       	rjmp	.+28     	; 0x33c2 <__addsf3x+0x98>
    33a6:	ba 0f       	add	r27, r26
    33a8:	62 1f       	adc	r22, r18
    33aa:	73 1f       	adc	r23, r19
    33ac:	84 1f       	adc	r24, r20
    33ae:	48 f4       	brcc	.+18     	; 0x33c2 <__addsf3x+0x98>
    33b0:	87 95       	ror	r24
    33b2:	77 95       	ror	r23
    33b4:	67 95       	ror	r22
    33b6:	b7 95       	ror	r27
    33b8:	f7 95       	ror	r31
    33ba:	9e 3f       	cpi	r25, 0xFE	; 254
    33bc:	08 f0       	brcs	.+2      	; 0x33c0 <__addsf3x+0x96>
    33be:	b3 cf       	rjmp	.-154    	; 0x3326 <__addsf3+0x1e>
    33c0:	93 95       	inc	r25
    33c2:	88 0f       	add	r24, r24
    33c4:	08 f0       	brcs	.+2      	; 0x33c8 <__addsf3x+0x9e>
    33c6:	99 27       	eor	r25, r25
    33c8:	ee 0f       	add	r30, r30
    33ca:	97 95       	ror	r25
    33cc:	87 95       	ror	r24
    33ce:	08 95       	ret
    33d0:	90 d1       	rcall	.+800    	; 0x36f2 <__fp_pscA>
    33d2:	58 f0       	brcs	.+22     	; 0x33ea <__addsf3x+0xc0>
    33d4:	80 e8       	ldi	r24, 0x80	; 128
    33d6:	91 e0       	ldi	r25, 0x01	; 1
    33d8:	09 f4       	brne	.+2      	; 0x33dc <__addsf3x+0xb2>
    33da:	9e ef       	ldi	r25, 0xFE	; 254
    33dc:	91 d1       	rcall	.+802    	; 0x3700 <__fp_pscB>
    33de:	28 f0       	brcs	.+10     	; 0x33ea <__addsf3x+0xc0>
    33e0:	40 e8       	ldi	r20, 0x80	; 128
    33e2:	51 e0       	ldi	r21, 0x01	; 1
    33e4:	59 f4       	brne	.+22     	; 0x33fc <atan2+0xe>
    33e6:	5e ef       	ldi	r21, 0xFE	; 254
    33e8:	09 c0       	rjmp	.+18     	; 0x33fc <atan2+0xe>
    33ea:	5b c1       	rjmp	.+694    	; 0x36a2 <__fp_nan>
    33ec:	fc c1       	rjmp	.+1016   	; 0x37e6 <__fp_zero>

000033ee <atan2>:
    33ee:	e9 2f       	mov	r30, r25
    33f0:	e0 78       	andi	r30, 0x80	; 128
    33f2:	d7 d1       	rcall	.+942    	; 0x37a2 <__fp_split3>
    33f4:	68 f3       	brcs	.-38     	; 0x33d0 <__addsf3x+0xa6>
    33f6:	09 2e       	mov	r0, r25
    33f8:	05 2a       	or	r0, r21
    33fa:	c1 f3       	breq	.-16     	; 0x33ec <__addsf3x+0xc2>
    33fc:	26 17       	cp	r18, r22
    33fe:	37 07       	cpc	r19, r23
    3400:	48 07       	cpc	r20, r24
    3402:	59 07       	cpc	r21, r25
    3404:	38 f0       	brcs	.+14     	; 0x3414 <atan2+0x26>
    3406:	0e 2e       	mov	r0, r30
    3408:	07 f8       	bld	r0, 7
    340a:	e0 25       	eor	r30, r0
    340c:	69 f0       	breq	.+26     	; 0x3428 <atan2+0x3a>
    340e:	e0 25       	eor	r30, r0
    3410:	e0 64       	ori	r30, 0x40	; 64
    3412:	0a c0       	rjmp	.+20     	; 0x3428 <atan2+0x3a>
    3414:	ef 63       	ori	r30, 0x3F	; 63
    3416:	07 f8       	bld	r0, 7
    3418:	00 94       	com	r0
    341a:	07 fa       	bst	r0, 7
    341c:	db 01       	movw	r26, r22
    341e:	b9 01       	movw	r22, r18
    3420:	9d 01       	movw	r18, r26
    3422:	dc 01       	movw	r26, r24
    3424:	ca 01       	movw	r24, r20
    3426:	ad 01       	movw	r20, r26
    3428:	ef 93       	push	r30
    342a:	4a d0       	rcall	.+148    	; 0x34c0 <__divsf3_pse>
    342c:	98 d1       	rcall	.+816    	; 0x375e <__fp_round>
    342e:	0a d0       	rcall	.+20     	; 0x3444 <atan>
    3430:	5f 91       	pop	r21
    3432:	55 23       	and	r21, r21
    3434:	31 f0       	breq	.+12     	; 0x3442 <atan2+0x54>
    3436:	2b ed       	ldi	r18, 0xDB	; 219
    3438:	3f e0       	ldi	r19, 0x0F	; 15
    343a:	49 e4       	ldi	r20, 0x49	; 73
    343c:	50 fd       	sbrc	r21, 0
    343e:	49 ec       	ldi	r20, 0xC9	; 201
    3440:	63 cf       	rjmp	.-314    	; 0x3308 <__addsf3>
    3442:	08 95       	ret

00003444 <atan>:
    3444:	df 93       	push	r29
    3446:	dd 27       	eor	r29, r29
    3448:	b9 2f       	mov	r27, r25
    344a:	bf 77       	andi	r27, 0x7F	; 127
    344c:	40 e8       	ldi	r20, 0x80	; 128
    344e:	5f e3       	ldi	r21, 0x3F	; 63
    3450:	16 16       	cp	r1, r22
    3452:	17 06       	cpc	r1, r23
    3454:	48 07       	cpc	r20, r24
    3456:	5b 07       	cpc	r21, r27
    3458:	10 f4       	brcc	.+4      	; 0x345e <atan+0x1a>
    345a:	d9 2f       	mov	r29, r25
    345c:	cf d1       	rcall	.+926    	; 0x37fc <inverse>
    345e:	9f 93       	push	r25
    3460:	8f 93       	push	r24
    3462:	7f 93       	push	r23
    3464:	6f 93       	push	r22
    3466:	7c d2       	rcall	.+1272   	; 0x3960 <square>
    3468:	ec ea       	ldi	r30, 0xAC	; 172
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	1d d1       	rcall	.+570    	; 0x36a8 <__fp_powser>
    346e:	77 d1       	rcall	.+750    	; 0x375e <__fp_round>
    3470:	2f 91       	pop	r18
    3472:	3f 91       	pop	r19
    3474:	4f 91       	pop	r20
    3476:	5f 91       	pop	r21
    3478:	d4 d1       	rcall	.+936    	; 0x3822 <__mulsf3x>
    347a:	dd 23       	and	r29, r29
    347c:	49 f0       	breq	.+18     	; 0x3490 <atan+0x4c>
    347e:	90 58       	subi	r25, 0x80	; 128
    3480:	a2 ea       	ldi	r26, 0xA2	; 162
    3482:	2a ed       	ldi	r18, 0xDA	; 218
    3484:	3f e0       	ldi	r19, 0x0F	; 15
    3486:	49 ec       	ldi	r20, 0xC9	; 201
    3488:	5f e3       	ldi	r21, 0x3F	; 63
    348a:	d0 78       	andi	r29, 0x80	; 128
    348c:	5d 27       	eor	r21, r29
    348e:	4d df       	rcall	.-358    	; 0x332a <__addsf3x>
    3490:	df 91       	pop	r29
    3492:	65 c1       	rjmp	.+714    	; 0x375e <__fp_round>

00003494 <__cmpsf2>:
    3494:	dc d0       	rcall	.+440    	; 0x364e <__fp_cmp>
    3496:	08 f4       	brcc	.+2      	; 0x349a <__cmpsf2+0x6>
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	08 95       	ret

0000349c <cos>:
    349c:	39 d1       	rcall	.+626    	; 0x3710 <__fp_rempio2>
    349e:	e3 95       	inc	r30
    34a0:	6f c1       	rjmp	.+734    	; 0x3780 <__fp_sinus>

000034a2 <__divsf3>:
    34a2:	0c d0       	rcall	.+24     	; 0x34bc <__divsf3x>
    34a4:	5c c1       	rjmp	.+696    	; 0x375e <__fp_round>
    34a6:	2c d1       	rcall	.+600    	; 0x3700 <__fp_pscB>
    34a8:	40 f0       	brcs	.+16     	; 0x34ba <__divsf3+0x18>
    34aa:	23 d1       	rcall	.+582    	; 0x36f2 <__fp_pscA>
    34ac:	30 f0       	brcs	.+12     	; 0x34ba <__divsf3+0x18>
    34ae:	21 f4       	brne	.+8      	; 0x34b8 <__divsf3+0x16>
    34b0:	5f 3f       	cpi	r21, 0xFF	; 255
    34b2:	19 f0       	breq	.+6      	; 0x34ba <__divsf3+0x18>
    34b4:	f0 c0       	rjmp	.+480    	; 0x3696 <__fp_inf>
    34b6:	51 11       	cpse	r21, r1
    34b8:	97 c1       	rjmp	.+814    	; 0x37e8 <__fp_szero>
    34ba:	f3 c0       	rjmp	.+486    	; 0x36a2 <__fp_nan>

000034bc <__divsf3x>:
    34bc:	72 d1       	rcall	.+740    	; 0x37a2 <__fp_split3>
    34be:	98 f3       	brcs	.-26     	; 0x34a6 <__divsf3+0x4>

000034c0 <__divsf3_pse>:
    34c0:	99 23       	and	r25, r25
    34c2:	c9 f3       	breq	.-14     	; 0x34b6 <__divsf3+0x14>
    34c4:	55 23       	and	r21, r21
    34c6:	b1 f3       	breq	.-20     	; 0x34b4 <__divsf3+0x12>
    34c8:	95 1b       	sub	r25, r21
    34ca:	55 0b       	sbc	r21, r21
    34cc:	bb 27       	eor	r27, r27
    34ce:	aa 27       	eor	r26, r26
    34d0:	62 17       	cp	r22, r18
    34d2:	73 07       	cpc	r23, r19
    34d4:	84 07       	cpc	r24, r20
    34d6:	38 f0       	brcs	.+14     	; 0x34e6 <__divsf3_pse+0x26>
    34d8:	9f 5f       	subi	r25, 0xFF	; 255
    34da:	5f 4f       	sbci	r21, 0xFF	; 255
    34dc:	22 0f       	add	r18, r18
    34de:	33 1f       	adc	r19, r19
    34e0:	44 1f       	adc	r20, r20
    34e2:	aa 1f       	adc	r26, r26
    34e4:	a9 f3       	breq	.-22     	; 0x34d0 <__divsf3_pse+0x10>
    34e6:	33 d0       	rcall	.+102    	; 0x354e <__divsf3_pse+0x8e>
    34e8:	0e 2e       	mov	r0, r30
    34ea:	3a f0       	brmi	.+14     	; 0x34fa <__divsf3_pse+0x3a>
    34ec:	e0 e8       	ldi	r30, 0x80	; 128
    34ee:	30 d0       	rcall	.+96     	; 0x3550 <__divsf3_pse+0x90>
    34f0:	91 50       	subi	r25, 0x01	; 1
    34f2:	50 40       	sbci	r21, 0x00	; 0
    34f4:	e6 95       	lsr	r30
    34f6:	00 1c       	adc	r0, r0
    34f8:	ca f7       	brpl	.-14     	; 0x34ec <__divsf3_pse+0x2c>
    34fa:	29 d0       	rcall	.+82     	; 0x354e <__divsf3_pse+0x8e>
    34fc:	fe 2f       	mov	r31, r30
    34fe:	27 d0       	rcall	.+78     	; 0x354e <__divsf3_pse+0x8e>
    3500:	66 0f       	add	r22, r22
    3502:	77 1f       	adc	r23, r23
    3504:	88 1f       	adc	r24, r24
    3506:	bb 1f       	adc	r27, r27
    3508:	26 17       	cp	r18, r22
    350a:	37 07       	cpc	r19, r23
    350c:	48 07       	cpc	r20, r24
    350e:	ab 07       	cpc	r26, r27
    3510:	b0 e8       	ldi	r27, 0x80	; 128
    3512:	09 f0       	breq	.+2      	; 0x3516 <__divsf3_pse+0x56>
    3514:	bb 0b       	sbc	r27, r27
    3516:	80 2d       	mov	r24, r0
    3518:	bf 01       	movw	r22, r30
    351a:	ff 27       	eor	r31, r31
    351c:	93 58       	subi	r25, 0x83	; 131
    351e:	5f 4f       	sbci	r21, 0xFF	; 255
    3520:	2a f0       	brmi	.+10     	; 0x352c <__divsf3_pse+0x6c>
    3522:	9e 3f       	cpi	r25, 0xFE	; 254
    3524:	51 05       	cpc	r21, r1
    3526:	68 f0       	brcs	.+26     	; 0x3542 <__divsf3_pse+0x82>
    3528:	b6 c0       	rjmp	.+364    	; 0x3696 <__fp_inf>
    352a:	5e c1       	rjmp	.+700    	; 0x37e8 <__fp_szero>
    352c:	5f 3f       	cpi	r21, 0xFF	; 255
    352e:	ec f3       	brlt	.-6      	; 0x352a <__divsf3_pse+0x6a>
    3530:	98 3e       	cpi	r25, 0xE8	; 232
    3532:	dc f3       	brlt	.-10     	; 0x352a <__divsf3_pse+0x6a>
    3534:	86 95       	lsr	r24
    3536:	77 95       	ror	r23
    3538:	67 95       	ror	r22
    353a:	b7 95       	ror	r27
    353c:	f7 95       	ror	r31
    353e:	9f 5f       	subi	r25, 0xFF	; 255
    3540:	c9 f7       	brne	.-14     	; 0x3534 <__divsf3_pse+0x74>
    3542:	88 0f       	add	r24, r24
    3544:	91 1d       	adc	r25, r1
    3546:	96 95       	lsr	r25
    3548:	87 95       	ror	r24
    354a:	97 f9       	bld	r25, 7
    354c:	08 95       	ret
    354e:	e1 e0       	ldi	r30, 0x01	; 1
    3550:	66 0f       	add	r22, r22
    3552:	77 1f       	adc	r23, r23
    3554:	88 1f       	adc	r24, r24
    3556:	bb 1f       	adc	r27, r27
    3558:	62 17       	cp	r22, r18
    355a:	73 07       	cpc	r23, r19
    355c:	84 07       	cpc	r24, r20
    355e:	ba 07       	cpc	r27, r26
    3560:	20 f0       	brcs	.+8      	; 0x356a <__divsf3_pse+0xaa>
    3562:	62 1b       	sub	r22, r18
    3564:	73 0b       	sbc	r23, r19
    3566:	84 0b       	sbc	r24, r20
    3568:	ba 0b       	sbc	r27, r26
    356a:	ee 1f       	adc	r30, r30
    356c:	88 f7       	brcc	.-30     	; 0x3550 <__divsf3_pse+0x90>
    356e:	e0 95       	com	r30
    3570:	08 95       	ret

00003572 <__fixsfsi>:
    3572:	04 d0       	rcall	.+8      	; 0x357c <__fixunssfsi>
    3574:	68 94       	set
    3576:	b1 11       	cpse	r27, r1
    3578:	37 c1       	rjmp	.+622    	; 0x37e8 <__fp_szero>
    357a:	08 95       	ret

0000357c <__fixunssfsi>:
    357c:	1a d1       	rcall	.+564    	; 0x37b2 <__fp_splitA>
    357e:	88 f0       	brcs	.+34     	; 0x35a2 <__fixunssfsi+0x26>
    3580:	9f 57       	subi	r25, 0x7F	; 127
    3582:	90 f0       	brcs	.+36     	; 0x35a8 <__fixunssfsi+0x2c>
    3584:	b9 2f       	mov	r27, r25
    3586:	99 27       	eor	r25, r25
    3588:	b7 51       	subi	r27, 0x17	; 23
    358a:	a0 f0       	brcs	.+40     	; 0x35b4 <__fixunssfsi+0x38>
    358c:	d1 f0       	breq	.+52     	; 0x35c2 <__fixunssfsi+0x46>
    358e:	66 0f       	add	r22, r22
    3590:	77 1f       	adc	r23, r23
    3592:	88 1f       	adc	r24, r24
    3594:	99 1f       	adc	r25, r25
    3596:	1a f0       	brmi	.+6      	; 0x359e <__fixunssfsi+0x22>
    3598:	ba 95       	dec	r27
    359a:	c9 f7       	brne	.-14     	; 0x358e <__fixunssfsi+0x12>
    359c:	12 c0       	rjmp	.+36     	; 0x35c2 <__fixunssfsi+0x46>
    359e:	b1 30       	cpi	r27, 0x01	; 1
    35a0:	81 f0       	breq	.+32     	; 0x35c2 <__fixunssfsi+0x46>
    35a2:	21 d1       	rcall	.+578    	; 0x37e6 <__fp_zero>
    35a4:	b1 e0       	ldi	r27, 0x01	; 1
    35a6:	08 95       	ret
    35a8:	1e c1       	rjmp	.+572    	; 0x37e6 <__fp_zero>
    35aa:	67 2f       	mov	r22, r23
    35ac:	78 2f       	mov	r23, r24
    35ae:	88 27       	eor	r24, r24
    35b0:	b8 5f       	subi	r27, 0xF8	; 248
    35b2:	39 f0       	breq	.+14     	; 0x35c2 <__fixunssfsi+0x46>
    35b4:	b9 3f       	cpi	r27, 0xF9	; 249
    35b6:	cc f3       	brlt	.-14     	; 0x35aa <__fixunssfsi+0x2e>
    35b8:	86 95       	lsr	r24
    35ba:	77 95       	ror	r23
    35bc:	67 95       	ror	r22
    35be:	b3 95       	inc	r27
    35c0:	d9 f7       	brne	.-10     	; 0x35b8 <__fixunssfsi+0x3c>
    35c2:	3e f4       	brtc	.+14     	; 0x35d2 <__fixunssfsi+0x56>
    35c4:	90 95       	com	r25
    35c6:	80 95       	com	r24
    35c8:	70 95       	com	r23
    35ca:	61 95       	neg	r22
    35cc:	7f 4f       	sbci	r23, 0xFF	; 255
    35ce:	8f 4f       	sbci	r24, 0xFF	; 255
    35d0:	9f 4f       	sbci	r25, 0xFF	; 255
    35d2:	08 95       	ret

000035d4 <__floatunsisf>:
    35d4:	e8 94       	clt
    35d6:	09 c0       	rjmp	.+18     	; 0x35ea <__floatsisf+0x12>

000035d8 <__floatsisf>:
    35d8:	97 fb       	bst	r25, 7
    35da:	3e f4       	brtc	.+14     	; 0x35ea <__floatsisf+0x12>
    35dc:	90 95       	com	r25
    35de:	80 95       	com	r24
    35e0:	70 95       	com	r23
    35e2:	61 95       	neg	r22
    35e4:	7f 4f       	sbci	r23, 0xFF	; 255
    35e6:	8f 4f       	sbci	r24, 0xFF	; 255
    35e8:	9f 4f       	sbci	r25, 0xFF	; 255
    35ea:	99 23       	and	r25, r25
    35ec:	a9 f0       	breq	.+42     	; 0x3618 <__floatsisf+0x40>
    35ee:	f9 2f       	mov	r31, r25
    35f0:	96 e9       	ldi	r25, 0x96	; 150
    35f2:	bb 27       	eor	r27, r27
    35f4:	93 95       	inc	r25
    35f6:	f6 95       	lsr	r31
    35f8:	87 95       	ror	r24
    35fa:	77 95       	ror	r23
    35fc:	67 95       	ror	r22
    35fe:	b7 95       	ror	r27
    3600:	f1 11       	cpse	r31, r1
    3602:	f8 cf       	rjmp	.-16     	; 0x35f4 <__floatsisf+0x1c>
    3604:	fa f4       	brpl	.+62     	; 0x3644 <__floatsisf+0x6c>
    3606:	bb 0f       	add	r27, r27
    3608:	11 f4       	brne	.+4      	; 0x360e <__floatsisf+0x36>
    360a:	60 ff       	sbrs	r22, 0
    360c:	1b c0       	rjmp	.+54     	; 0x3644 <__floatsisf+0x6c>
    360e:	6f 5f       	subi	r22, 0xFF	; 255
    3610:	7f 4f       	sbci	r23, 0xFF	; 255
    3612:	8f 4f       	sbci	r24, 0xFF	; 255
    3614:	9f 4f       	sbci	r25, 0xFF	; 255
    3616:	16 c0       	rjmp	.+44     	; 0x3644 <__floatsisf+0x6c>
    3618:	88 23       	and	r24, r24
    361a:	11 f0       	breq	.+4      	; 0x3620 <__floatsisf+0x48>
    361c:	96 e9       	ldi	r25, 0x96	; 150
    361e:	11 c0       	rjmp	.+34     	; 0x3642 <__floatsisf+0x6a>
    3620:	77 23       	and	r23, r23
    3622:	21 f0       	breq	.+8      	; 0x362c <__floatsisf+0x54>
    3624:	9e e8       	ldi	r25, 0x8E	; 142
    3626:	87 2f       	mov	r24, r23
    3628:	76 2f       	mov	r23, r22
    362a:	05 c0       	rjmp	.+10     	; 0x3636 <__floatsisf+0x5e>
    362c:	66 23       	and	r22, r22
    362e:	71 f0       	breq	.+28     	; 0x364c <__floatsisf+0x74>
    3630:	96 e8       	ldi	r25, 0x86	; 134
    3632:	86 2f       	mov	r24, r22
    3634:	70 e0       	ldi	r23, 0x00	; 0
    3636:	60 e0       	ldi	r22, 0x00	; 0
    3638:	2a f0       	brmi	.+10     	; 0x3644 <__floatsisf+0x6c>
    363a:	9a 95       	dec	r25
    363c:	66 0f       	add	r22, r22
    363e:	77 1f       	adc	r23, r23
    3640:	88 1f       	adc	r24, r24
    3642:	da f7       	brpl	.-10     	; 0x363a <__floatsisf+0x62>
    3644:	88 0f       	add	r24, r24
    3646:	96 95       	lsr	r25
    3648:	87 95       	ror	r24
    364a:	97 f9       	bld	r25, 7
    364c:	08 95       	ret

0000364e <__fp_cmp>:
    364e:	99 0f       	add	r25, r25
    3650:	00 08       	sbc	r0, r0
    3652:	55 0f       	add	r21, r21
    3654:	aa 0b       	sbc	r26, r26
    3656:	e0 e8       	ldi	r30, 0x80	; 128
    3658:	fe ef       	ldi	r31, 0xFE	; 254
    365a:	16 16       	cp	r1, r22
    365c:	17 06       	cpc	r1, r23
    365e:	e8 07       	cpc	r30, r24
    3660:	f9 07       	cpc	r31, r25
    3662:	c0 f0       	brcs	.+48     	; 0x3694 <__fp_cmp+0x46>
    3664:	12 16       	cp	r1, r18
    3666:	13 06       	cpc	r1, r19
    3668:	e4 07       	cpc	r30, r20
    366a:	f5 07       	cpc	r31, r21
    366c:	98 f0       	brcs	.+38     	; 0x3694 <__fp_cmp+0x46>
    366e:	62 1b       	sub	r22, r18
    3670:	73 0b       	sbc	r23, r19
    3672:	84 0b       	sbc	r24, r20
    3674:	95 0b       	sbc	r25, r21
    3676:	39 f4       	brne	.+14     	; 0x3686 <__fp_cmp+0x38>
    3678:	0a 26       	eor	r0, r26
    367a:	61 f0       	breq	.+24     	; 0x3694 <__fp_cmp+0x46>
    367c:	23 2b       	or	r18, r19
    367e:	24 2b       	or	r18, r20
    3680:	25 2b       	or	r18, r21
    3682:	21 f4       	brne	.+8      	; 0x368c <__fp_cmp+0x3e>
    3684:	08 95       	ret
    3686:	0a 26       	eor	r0, r26
    3688:	09 f4       	brne	.+2      	; 0x368c <__fp_cmp+0x3e>
    368a:	a1 40       	sbci	r26, 0x01	; 1
    368c:	a6 95       	lsr	r26
    368e:	8f ef       	ldi	r24, 0xFF	; 255
    3690:	81 1d       	adc	r24, r1
    3692:	81 1d       	adc	r24, r1
    3694:	08 95       	ret

00003696 <__fp_inf>:
    3696:	97 f9       	bld	r25, 7
    3698:	9f 67       	ori	r25, 0x7F	; 127
    369a:	80 e8       	ldi	r24, 0x80	; 128
    369c:	70 e0       	ldi	r23, 0x00	; 0
    369e:	60 e0       	ldi	r22, 0x00	; 0
    36a0:	08 95       	ret

000036a2 <__fp_nan>:
    36a2:	9f ef       	ldi	r25, 0xFF	; 255
    36a4:	80 ec       	ldi	r24, 0xC0	; 192
    36a6:	08 95       	ret

000036a8 <__fp_powser>:
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	1f 93       	push	r17
    36ae:	0f 93       	push	r16
    36b0:	ff 92       	push	r15
    36b2:	ef 92       	push	r14
    36b4:	df 92       	push	r13
    36b6:	7b 01       	movw	r14, r22
    36b8:	8c 01       	movw	r16, r24
    36ba:	68 94       	set
    36bc:	05 c0       	rjmp	.+10     	; 0x36c8 <__fp_powser+0x20>
    36be:	da 2e       	mov	r13, r26
    36c0:	ef 01       	movw	r28, r30
    36c2:	af d0       	rcall	.+350    	; 0x3822 <__mulsf3x>
    36c4:	fe 01       	movw	r30, r28
    36c6:	e8 94       	clt
    36c8:	a5 91       	lpm	r26, Z+
    36ca:	25 91       	lpm	r18, Z+
    36cc:	35 91       	lpm	r19, Z+
    36ce:	45 91       	lpm	r20, Z+
    36d0:	55 91       	lpm	r21, Z+
    36d2:	ae f3       	brts	.-22     	; 0x36be <__fp_powser+0x16>
    36d4:	ef 01       	movw	r28, r30
    36d6:	29 de       	rcall	.-942    	; 0x332a <__addsf3x>
    36d8:	fe 01       	movw	r30, r28
    36da:	97 01       	movw	r18, r14
    36dc:	a8 01       	movw	r20, r16
    36de:	da 94       	dec	r13
    36e0:	79 f7       	brne	.-34     	; 0x36c0 <__fp_powser+0x18>
    36e2:	df 90       	pop	r13
    36e4:	ef 90       	pop	r14
    36e6:	ff 90       	pop	r15
    36e8:	0f 91       	pop	r16
    36ea:	1f 91       	pop	r17
    36ec:	cf 91       	pop	r28
    36ee:	df 91       	pop	r29
    36f0:	08 95       	ret

000036f2 <__fp_pscA>:
    36f2:	00 24       	eor	r0, r0
    36f4:	0a 94       	dec	r0
    36f6:	16 16       	cp	r1, r22
    36f8:	17 06       	cpc	r1, r23
    36fa:	18 06       	cpc	r1, r24
    36fc:	09 06       	cpc	r0, r25
    36fe:	08 95       	ret

00003700 <__fp_pscB>:
    3700:	00 24       	eor	r0, r0
    3702:	0a 94       	dec	r0
    3704:	12 16       	cp	r1, r18
    3706:	13 06       	cpc	r1, r19
    3708:	14 06       	cpc	r1, r20
    370a:	05 06       	cpc	r0, r21
    370c:	08 95       	ret
    370e:	c9 cf       	rjmp	.-110    	; 0x36a2 <__fp_nan>

00003710 <__fp_rempio2>:
    3710:	50 d0       	rcall	.+160    	; 0x37b2 <__fp_splitA>
    3712:	e8 f3       	brcs	.-6      	; 0x370e <__fp_pscB+0xe>
    3714:	e8 94       	clt
    3716:	e0 e0       	ldi	r30, 0x00	; 0
    3718:	bb 27       	eor	r27, r27
    371a:	9f 57       	subi	r25, 0x7F	; 127
    371c:	f0 f0       	brcs	.+60     	; 0x375a <__fp_rempio2+0x4a>
    371e:	2a ed       	ldi	r18, 0xDA	; 218
    3720:	3f e0       	ldi	r19, 0x0F	; 15
    3722:	49 ec       	ldi	r20, 0xC9	; 201
    3724:	06 c0       	rjmp	.+12     	; 0x3732 <__fp_rempio2+0x22>
    3726:	ee 0f       	add	r30, r30
    3728:	bb 0f       	add	r27, r27
    372a:	66 1f       	adc	r22, r22
    372c:	77 1f       	adc	r23, r23
    372e:	88 1f       	adc	r24, r24
    3730:	28 f0       	brcs	.+10     	; 0x373c <__fp_rempio2+0x2c>
    3732:	b2 3a       	cpi	r27, 0xA2	; 162
    3734:	62 07       	cpc	r22, r18
    3736:	73 07       	cpc	r23, r19
    3738:	84 07       	cpc	r24, r20
    373a:	28 f0       	brcs	.+10     	; 0x3746 <__fp_rempio2+0x36>
    373c:	b2 5a       	subi	r27, 0xA2	; 162
    373e:	62 0b       	sbc	r22, r18
    3740:	73 0b       	sbc	r23, r19
    3742:	84 0b       	sbc	r24, r20
    3744:	e3 95       	inc	r30
    3746:	9a 95       	dec	r25
    3748:	72 f7       	brpl	.-36     	; 0x3726 <__fp_rempio2+0x16>
    374a:	80 38       	cpi	r24, 0x80	; 128
    374c:	30 f4       	brcc	.+12     	; 0x375a <__fp_rempio2+0x4a>
    374e:	9a 95       	dec	r25
    3750:	bb 0f       	add	r27, r27
    3752:	66 1f       	adc	r22, r22
    3754:	77 1f       	adc	r23, r23
    3756:	88 1f       	adc	r24, r24
    3758:	d2 f7       	brpl	.-12     	; 0x374e <__fp_rempio2+0x3e>
    375a:	90 48       	sbci	r25, 0x80	; 128
    375c:	06 c1       	rjmp	.+524    	; 0x396a <__fp_mpack_finite>

0000375e <__fp_round>:
    375e:	09 2e       	mov	r0, r25
    3760:	03 94       	inc	r0
    3762:	00 0c       	add	r0, r0
    3764:	11 f4       	brne	.+4      	; 0x376a <__fp_round+0xc>
    3766:	88 23       	and	r24, r24
    3768:	52 f0       	brmi	.+20     	; 0x377e <__fp_round+0x20>
    376a:	bb 0f       	add	r27, r27
    376c:	40 f4       	brcc	.+16     	; 0x377e <__fp_round+0x20>
    376e:	bf 2b       	or	r27, r31
    3770:	11 f4       	brne	.+4      	; 0x3776 <__fp_round+0x18>
    3772:	60 ff       	sbrs	r22, 0
    3774:	04 c0       	rjmp	.+8      	; 0x377e <__fp_round+0x20>
    3776:	6f 5f       	subi	r22, 0xFF	; 255
    3778:	7f 4f       	sbci	r23, 0xFF	; 255
    377a:	8f 4f       	sbci	r24, 0xFF	; 255
    377c:	9f 4f       	sbci	r25, 0xFF	; 255
    377e:	08 95       	ret

00003780 <__fp_sinus>:
    3780:	ef 93       	push	r30
    3782:	e0 ff       	sbrs	r30, 0
    3784:	06 c0       	rjmp	.+12     	; 0x3792 <__fp_sinus+0x12>
    3786:	a2 ea       	ldi	r26, 0xA2	; 162
    3788:	2a ed       	ldi	r18, 0xDA	; 218
    378a:	3f e0       	ldi	r19, 0x0F	; 15
    378c:	49 ec       	ldi	r20, 0xC9	; 201
    378e:	5f eb       	ldi	r21, 0xBF	; 191
    3790:	cc dd       	rcall	.-1128   	; 0x332a <__addsf3x>
    3792:	e5 df       	rcall	.-54     	; 0x375e <__fp_round>
    3794:	0f 90       	pop	r0
    3796:	03 94       	inc	r0
    3798:	01 fc       	sbrc	r0, 1
    379a:	90 58       	subi	r25, 0x80	; 128
    379c:	e9 ed       	ldi	r30, 0xD9	; 217
    379e:	f0 e0       	ldi	r31, 0x00	; 0
    37a0:	f7 c0       	rjmp	.+494    	; 0x3990 <__fp_powsodd>

000037a2 <__fp_split3>:
    37a2:	57 fd       	sbrc	r21, 7
    37a4:	90 58       	subi	r25, 0x80	; 128
    37a6:	44 0f       	add	r20, r20
    37a8:	55 1f       	adc	r21, r21
    37aa:	59 f0       	breq	.+22     	; 0x37c2 <__fp_splitA+0x10>
    37ac:	5f 3f       	cpi	r21, 0xFF	; 255
    37ae:	71 f0       	breq	.+28     	; 0x37cc <__fp_splitA+0x1a>
    37b0:	47 95       	ror	r20

000037b2 <__fp_splitA>:
    37b2:	88 0f       	add	r24, r24
    37b4:	97 fb       	bst	r25, 7
    37b6:	99 1f       	adc	r25, r25
    37b8:	61 f0       	breq	.+24     	; 0x37d2 <__fp_splitA+0x20>
    37ba:	9f 3f       	cpi	r25, 0xFF	; 255
    37bc:	79 f0       	breq	.+30     	; 0x37dc <__fp_splitA+0x2a>
    37be:	87 95       	ror	r24
    37c0:	08 95       	ret
    37c2:	12 16       	cp	r1, r18
    37c4:	13 06       	cpc	r1, r19
    37c6:	14 06       	cpc	r1, r20
    37c8:	55 1f       	adc	r21, r21
    37ca:	f2 cf       	rjmp	.-28     	; 0x37b0 <__fp_split3+0xe>
    37cc:	46 95       	lsr	r20
    37ce:	f1 df       	rcall	.-30     	; 0x37b2 <__fp_splitA>
    37d0:	08 c0       	rjmp	.+16     	; 0x37e2 <__fp_splitA+0x30>
    37d2:	16 16       	cp	r1, r22
    37d4:	17 06       	cpc	r1, r23
    37d6:	18 06       	cpc	r1, r24
    37d8:	99 1f       	adc	r25, r25
    37da:	f1 cf       	rjmp	.-30     	; 0x37be <__fp_splitA+0xc>
    37dc:	86 95       	lsr	r24
    37de:	71 05       	cpc	r23, r1
    37e0:	61 05       	cpc	r22, r1
    37e2:	08 94       	sec
    37e4:	08 95       	ret

000037e6 <__fp_zero>:
    37e6:	e8 94       	clt

000037e8 <__fp_szero>:
    37e8:	bb 27       	eor	r27, r27
    37ea:	66 27       	eor	r22, r22
    37ec:	77 27       	eor	r23, r23
    37ee:	cb 01       	movw	r24, r22
    37f0:	97 f9       	bld	r25, 7
    37f2:	08 95       	ret

000037f4 <__gesf2>:
    37f4:	2c df       	rcall	.-424    	; 0x364e <__fp_cmp>
    37f6:	08 f4       	brcc	.+2      	; 0x37fa <__gesf2+0x6>
    37f8:	8f ef       	ldi	r24, 0xFF	; 255
    37fa:	08 95       	ret

000037fc <inverse>:
    37fc:	9b 01       	movw	r18, r22
    37fe:	ac 01       	movw	r20, r24
    3800:	60 e0       	ldi	r22, 0x00	; 0
    3802:	70 e0       	ldi	r23, 0x00	; 0
    3804:	80 e8       	ldi	r24, 0x80	; 128
    3806:	9f e3       	ldi	r25, 0x3F	; 63
    3808:	4c ce       	rjmp	.-872    	; 0x34a2 <__divsf3>

0000380a <__mulsf3>:
    380a:	0b d0       	rcall	.+22     	; 0x3822 <__mulsf3x>
    380c:	a8 cf       	rjmp	.-176    	; 0x375e <__fp_round>
    380e:	71 df       	rcall	.-286    	; 0x36f2 <__fp_pscA>
    3810:	28 f0       	brcs	.+10     	; 0x381c <__mulsf3+0x12>
    3812:	76 df       	rcall	.-276    	; 0x3700 <__fp_pscB>
    3814:	18 f0       	brcs	.+6      	; 0x381c <__mulsf3+0x12>
    3816:	95 23       	and	r25, r21
    3818:	09 f0       	breq	.+2      	; 0x381c <__mulsf3+0x12>
    381a:	3d cf       	rjmp	.-390    	; 0x3696 <__fp_inf>
    381c:	42 cf       	rjmp	.-380    	; 0x36a2 <__fp_nan>
    381e:	11 24       	eor	r1, r1
    3820:	e3 cf       	rjmp	.-58     	; 0x37e8 <__fp_szero>

00003822 <__mulsf3x>:
    3822:	bf df       	rcall	.-130    	; 0x37a2 <__fp_split3>
    3824:	a0 f3       	brcs	.-24     	; 0x380e <__mulsf3+0x4>

00003826 <__mulsf3_pse>:
    3826:	95 9f       	mul	r25, r21
    3828:	d1 f3       	breq	.-12     	; 0x381e <__mulsf3+0x14>
    382a:	95 0f       	add	r25, r21
    382c:	50 e0       	ldi	r21, 0x00	; 0
    382e:	55 1f       	adc	r21, r21
    3830:	62 9f       	mul	r22, r18
    3832:	f0 01       	movw	r30, r0
    3834:	72 9f       	mul	r23, r18
    3836:	bb 27       	eor	r27, r27
    3838:	f0 0d       	add	r31, r0
    383a:	b1 1d       	adc	r27, r1
    383c:	63 9f       	mul	r22, r19
    383e:	aa 27       	eor	r26, r26
    3840:	f0 0d       	add	r31, r0
    3842:	b1 1d       	adc	r27, r1
    3844:	aa 1f       	adc	r26, r26
    3846:	64 9f       	mul	r22, r20
    3848:	66 27       	eor	r22, r22
    384a:	b0 0d       	add	r27, r0
    384c:	a1 1d       	adc	r26, r1
    384e:	66 1f       	adc	r22, r22
    3850:	82 9f       	mul	r24, r18
    3852:	22 27       	eor	r18, r18
    3854:	b0 0d       	add	r27, r0
    3856:	a1 1d       	adc	r26, r1
    3858:	62 1f       	adc	r22, r18
    385a:	73 9f       	mul	r23, r19
    385c:	b0 0d       	add	r27, r0
    385e:	a1 1d       	adc	r26, r1
    3860:	62 1f       	adc	r22, r18
    3862:	83 9f       	mul	r24, r19
    3864:	a0 0d       	add	r26, r0
    3866:	61 1d       	adc	r22, r1
    3868:	22 1f       	adc	r18, r18
    386a:	74 9f       	mul	r23, r20
    386c:	33 27       	eor	r19, r19
    386e:	a0 0d       	add	r26, r0
    3870:	61 1d       	adc	r22, r1
    3872:	23 1f       	adc	r18, r19
    3874:	84 9f       	mul	r24, r20
    3876:	60 0d       	add	r22, r0
    3878:	21 1d       	adc	r18, r1
    387a:	82 2f       	mov	r24, r18
    387c:	76 2f       	mov	r23, r22
    387e:	6a 2f       	mov	r22, r26
    3880:	11 24       	eor	r1, r1
    3882:	9f 57       	subi	r25, 0x7F	; 127
    3884:	50 40       	sbci	r21, 0x00	; 0
    3886:	8a f0       	brmi	.+34     	; 0x38aa <__mulsf3_pse+0x84>
    3888:	e1 f0       	breq	.+56     	; 0x38c2 <__mulsf3_pse+0x9c>
    388a:	88 23       	and	r24, r24
    388c:	4a f0       	brmi	.+18     	; 0x38a0 <__mulsf3_pse+0x7a>
    388e:	ee 0f       	add	r30, r30
    3890:	ff 1f       	adc	r31, r31
    3892:	bb 1f       	adc	r27, r27
    3894:	66 1f       	adc	r22, r22
    3896:	77 1f       	adc	r23, r23
    3898:	88 1f       	adc	r24, r24
    389a:	91 50       	subi	r25, 0x01	; 1
    389c:	50 40       	sbci	r21, 0x00	; 0
    389e:	a9 f7       	brne	.-22     	; 0x388a <__mulsf3_pse+0x64>
    38a0:	9e 3f       	cpi	r25, 0xFE	; 254
    38a2:	51 05       	cpc	r21, r1
    38a4:	70 f0       	brcs	.+28     	; 0x38c2 <__mulsf3_pse+0x9c>
    38a6:	f7 ce       	rjmp	.-530    	; 0x3696 <__fp_inf>
    38a8:	9f cf       	rjmp	.-194    	; 0x37e8 <__fp_szero>
    38aa:	5f 3f       	cpi	r21, 0xFF	; 255
    38ac:	ec f3       	brlt	.-6      	; 0x38a8 <__mulsf3_pse+0x82>
    38ae:	98 3e       	cpi	r25, 0xE8	; 232
    38b0:	dc f3       	brlt	.-10     	; 0x38a8 <__mulsf3_pse+0x82>
    38b2:	86 95       	lsr	r24
    38b4:	77 95       	ror	r23
    38b6:	67 95       	ror	r22
    38b8:	b7 95       	ror	r27
    38ba:	f7 95       	ror	r31
    38bc:	e7 95       	ror	r30
    38be:	9f 5f       	subi	r25, 0xFF	; 255
    38c0:	c1 f7       	brne	.-16     	; 0x38b2 <__mulsf3_pse+0x8c>
    38c2:	fe 2b       	or	r31, r30
    38c4:	88 0f       	add	r24, r24
    38c6:	91 1d       	adc	r25, r1
    38c8:	96 95       	lsr	r25
    38ca:	87 95       	ror	r24
    38cc:	97 f9       	bld	r25, 7
    38ce:	08 95       	ret

000038d0 <sin>:
    38d0:	9f 93       	push	r25
    38d2:	1e df       	rcall	.-452    	; 0x3710 <__fp_rempio2>
    38d4:	0f 90       	pop	r0
    38d6:	07 fc       	sbrc	r0, 7
    38d8:	ee 5f       	subi	r30, 0xFE	; 254
    38da:	52 cf       	rjmp	.-348    	; 0x3780 <__fp_sinus>
    38dc:	11 f4       	brne	.+4      	; 0x38e2 <sin+0x12>
    38de:	0e f4       	brtc	.+2      	; 0x38e2 <sin+0x12>
    38e0:	e0 ce       	rjmp	.-576    	; 0x36a2 <__fp_nan>
    38e2:	41 c0       	rjmp	.+130    	; 0x3966 <__fp_mpack>

000038e4 <sqrt>:
    38e4:	66 df       	rcall	.-308    	; 0x37b2 <__fp_splitA>
    38e6:	d0 f3       	brcs	.-12     	; 0x38dc <sin+0xc>
    38e8:	99 23       	and	r25, r25
    38ea:	d9 f3       	breq	.-10     	; 0x38e2 <sin+0x12>
    38ec:	ce f3       	brts	.-14     	; 0x38e0 <sin+0x10>
    38ee:	9f 57       	subi	r25, 0x7F	; 127
    38f0:	55 0b       	sbc	r21, r21
    38f2:	87 ff       	sbrs	r24, 7
    38f4:	46 d0       	rcall	.+140    	; 0x3982 <__fp_norm2>
    38f6:	00 24       	eor	r0, r0
    38f8:	a0 e6       	ldi	r26, 0x60	; 96
    38fa:	40 ea       	ldi	r20, 0xA0	; 160
    38fc:	90 01       	movw	r18, r0
    38fe:	80 58       	subi	r24, 0x80	; 128
    3900:	56 95       	lsr	r21
    3902:	97 95       	ror	r25
    3904:	28 f4       	brcc	.+10     	; 0x3910 <sqrt+0x2c>
    3906:	80 5c       	subi	r24, 0xC0	; 192
    3908:	66 0f       	add	r22, r22
    390a:	77 1f       	adc	r23, r23
    390c:	88 1f       	adc	r24, r24
    390e:	20 f0       	brcs	.+8      	; 0x3918 <sqrt+0x34>
    3910:	26 17       	cp	r18, r22
    3912:	37 07       	cpc	r19, r23
    3914:	48 07       	cpc	r20, r24
    3916:	30 f4       	brcc	.+12     	; 0x3924 <sqrt+0x40>
    3918:	62 1b       	sub	r22, r18
    391a:	73 0b       	sbc	r23, r19
    391c:	84 0b       	sbc	r24, r20
    391e:	20 29       	or	r18, r0
    3920:	31 29       	or	r19, r1
    3922:	4a 2b       	or	r20, r26
    3924:	a6 95       	lsr	r26
    3926:	17 94       	ror	r1
    3928:	07 94       	ror	r0
    392a:	20 25       	eor	r18, r0
    392c:	31 25       	eor	r19, r1
    392e:	4a 27       	eor	r20, r26
    3930:	58 f7       	brcc	.-42     	; 0x3908 <sqrt+0x24>
    3932:	66 0f       	add	r22, r22
    3934:	77 1f       	adc	r23, r23
    3936:	88 1f       	adc	r24, r24
    3938:	20 f0       	brcs	.+8      	; 0x3942 <sqrt+0x5e>
    393a:	26 17       	cp	r18, r22
    393c:	37 07       	cpc	r19, r23
    393e:	48 07       	cpc	r20, r24
    3940:	30 f4       	brcc	.+12     	; 0x394e <sqrt+0x6a>
    3942:	62 0b       	sbc	r22, r18
    3944:	73 0b       	sbc	r23, r19
    3946:	84 0b       	sbc	r24, r20
    3948:	20 0d       	add	r18, r0
    394a:	31 1d       	adc	r19, r1
    394c:	41 1d       	adc	r20, r1
    394e:	a0 95       	com	r26
    3950:	81 f7       	brne	.-32     	; 0x3932 <sqrt+0x4e>
    3952:	b9 01       	movw	r22, r18
    3954:	84 2f       	mov	r24, r20
    3956:	91 58       	subi	r25, 0x81	; 129
    3958:	88 0f       	add	r24, r24
    395a:	96 95       	lsr	r25
    395c:	87 95       	ror	r24
    395e:	08 95       	ret

00003960 <square>:
    3960:	9b 01       	movw	r18, r22
    3962:	ac 01       	movw	r20, r24
    3964:	52 cf       	rjmp	.-348    	; 0x380a <__mulsf3>

00003966 <__fp_mpack>:
    3966:	9f 3f       	cpi	r25, 0xFF	; 255
    3968:	31 f0       	breq	.+12     	; 0x3976 <__fp_mpack_finite+0xc>

0000396a <__fp_mpack_finite>:
    396a:	91 50       	subi	r25, 0x01	; 1
    396c:	20 f4       	brcc	.+8      	; 0x3976 <__fp_mpack_finite+0xc>
    396e:	87 95       	ror	r24
    3970:	77 95       	ror	r23
    3972:	67 95       	ror	r22
    3974:	b7 95       	ror	r27
    3976:	88 0f       	add	r24, r24
    3978:	91 1d       	adc	r25, r1
    397a:	96 95       	lsr	r25
    397c:	87 95       	ror	r24
    397e:	97 f9       	bld	r25, 7
    3980:	08 95       	ret

00003982 <__fp_norm2>:
    3982:	91 50       	subi	r25, 0x01	; 1
    3984:	50 40       	sbci	r21, 0x00	; 0
    3986:	66 0f       	add	r22, r22
    3988:	77 1f       	adc	r23, r23
    398a:	88 1f       	adc	r24, r24
    398c:	d2 f7       	brpl	.-12     	; 0x3982 <__fp_norm2>
    398e:	08 95       	ret

00003990 <__fp_powsodd>:
    3990:	9f 93       	push	r25
    3992:	8f 93       	push	r24
    3994:	7f 93       	push	r23
    3996:	6f 93       	push	r22
    3998:	ff 93       	push	r31
    399a:	ef 93       	push	r30
    399c:	9b 01       	movw	r18, r22
    399e:	ac 01       	movw	r20, r24
    39a0:	34 df       	rcall	.-408    	; 0x380a <__mulsf3>
    39a2:	ef 91       	pop	r30
    39a4:	ff 91       	pop	r31
    39a6:	80 de       	rcall	.-768    	; 0x36a8 <__fp_powser>
    39a8:	2f 91       	pop	r18
    39aa:	3f 91       	pop	r19
    39ac:	4f 91       	pop	r20
    39ae:	5f 91       	pop	r21
    39b0:	2c cf       	rjmp	.-424    	; 0x380a <__mulsf3>

000039b2 <__divmodhi4>:
    39b2:	97 fb       	bst	r25, 7
    39b4:	07 2e       	mov	r0, r23
    39b6:	16 f4       	brtc	.+4      	; 0x39bc <__divmodhi4+0xa>
    39b8:	00 94       	com	r0
    39ba:	07 d0       	rcall	.+14     	; 0x39ca <__divmodhi4_neg1>
    39bc:	77 fd       	sbrc	r23, 7
    39be:	09 d0       	rcall	.+18     	; 0x39d2 <__divmodhi4_neg2>
    39c0:	0e 94 ed 1c 	call	0x39da	; 0x39da <__udivmodhi4>
    39c4:	07 fc       	sbrc	r0, 7
    39c6:	05 d0       	rcall	.+10     	; 0x39d2 <__divmodhi4_neg2>
    39c8:	3e f4       	brtc	.+14     	; 0x39d8 <__divmodhi4_exit>

000039ca <__divmodhi4_neg1>:
    39ca:	90 95       	com	r25
    39cc:	81 95       	neg	r24
    39ce:	9f 4f       	sbci	r25, 0xFF	; 255
    39d0:	08 95       	ret

000039d2 <__divmodhi4_neg2>:
    39d2:	70 95       	com	r23
    39d4:	61 95       	neg	r22
    39d6:	7f 4f       	sbci	r23, 0xFF	; 255

000039d8 <__divmodhi4_exit>:
    39d8:	08 95       	ret

000039da <__udivmodhi4>:
    39da:	aa 1b       	sub	r26, r26
    39dc:	bb 1b       	sub	r27, r27
    39de:	51 e1       	ldi	r21, 0x11	; 17
    39e0:	07 c0       	rjmp	.+14     	; 0x39f0 <__udivmodhi4_ep>

000039e2 <__udivmodhi4_loop>:
    39e2:	aa 1f       	adc	r26, r26
    39e4:	bb 1f       	adc	r27, r27
    39e6:	a6 17       	cp	r26, r22
    39e8:	b7 07       	cpc	r27, r23
    39ea:	10 f0       	brcs	.+4      	; 0x39f0 <__udivmodhi4_ep>
    39ec:	a6 1b       	sub	r26, r22
    39ee:	b7 0b       	sbc	r27, r23

000039f0 <__udivmodhi4_ep>:
    39f0:	88 1f       	adc	r24, r24
    39f2:	99 1f       	adc	r25, r25
    39f4:	5a 95       	dec	r21
    39f6:	a9 f7       	brne	.-22     	; 0x39e2 <__udivmodhi4_loop>
    39f8:	80 95       	com	r24
    39fa:	90 95       	com	r25
    39fc:	bc 01       	movw	r22, r24
    39fe:	cd 01       	movw	r24, r26
    3a00:	08 95       	ret

00003a02 <_exit>:
    3a02:	f8 94       	cli

00003a04 <__stop_program>:
    3a04:	ff cf       	rjmp	.-2      	; 0x3a04 <__stop_program>
