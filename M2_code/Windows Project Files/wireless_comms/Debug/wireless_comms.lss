
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00800100  000034ce  00003562  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000091  0080010c  0080010c  0000356e  2**0
                  ALLOC
  3 .stab         000036e4  00000000  00000000  00003570  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001166  00000000  00000000  00006c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00007dba  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000308  00000000  00000000  00007de9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000030e0  00000000  00000000  000080f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ba6  00000000  00000000  0000b1d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001630  00000000  00000000  0000bd77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000008e0  00000000  00000000  0000d3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000bfb  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003d7f  00000000  00000000  0000e883  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000310  00000000  00000000  00012602  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#define MIMU            0x69

// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
       0:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <__ctors_end>
       4:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
       8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
       c:	0c 94 73 12 	jmp	0x24e6	; 0x24e6 <__vector_3>
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      10:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

	m_bus_init();
      14:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      18:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      1c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      24:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      28:	0c 94 58 13 	jmp	0x26b0	; 0x26b0 <__vector_10>
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      2c:	0c 94 96 13 	jmp	0x272c	; 0x272c <__vector_11>
      30:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      34:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE CLOCK SOURCE TO X-AXIS GYRO
    // reg: 0x68 (PWR_MGMT_1)
    // bits 0-2 control clock source
    // value: 0x01 (clock to PLL on X-axis gyro reference)
    m_write_register(MIMU,0x6B,0x01);
      38:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      3c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      40:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE ACCEL FULL-SCALE +/- RANGE (0=2G, 1=4G, 2=8G, 3=16G)
    // reg: 0x1C (ACCEL_CONFIG)
    // bits: 3-4 set +/- full-scale range
    m_write_register(MIMU,0x1C,accel_scale<<3);
      44:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      48:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      4c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      50:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE GYRO FULL-SCALE +/- RANGE (0=250, 1=500, 2=1000, 3=2000 DEG/SEC)
    // reg: 0x1B (GYRO_CONFIG)
    // bits: 3-4 set +/- full-scale range
    // value: 0x00
    m_write_register(MIMU,0x1B,gyro_scale<<3); // this shouldn't be doing anything
      54:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      58:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      5c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      60:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      
    // SET THE MPU INTO I2C BYPASS MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 1 (1=bypass, 0=normal op)
    m_write_register(MIMU,0x37,0x02); // switch the MPU into bypass mode
      64:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      68:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // CONFIGURE THE MAGNETOMETER
    // address: 0x1E (for the magnetometer)
    // reg: 2 (mode register)
    // val: 0 (continuous output)
    m_write_register(0x1E,2,0); // set the mag. to continuous output mode
      6c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      70:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      74:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    
    // SET THE MPU TO NORMAL I2C MODE
    // reg: 0x37 (INT_PIN_CFG)
    // bit: 5 (1=master, 0=passthrough)
    m_write_register(MIMU,0x37,0);    // switch the MPU out of bypass mode
      78:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      7c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // SET THE AUXILLIARY I2C SAMPLE RATE
    // reg: 0x34 (I2C_SLC4_CTRL) 
    // value: 0x1E (30 > 8000/30 = 266.6Hz)
    // reg: 0x67 (MST_DELAY_CTRL)
    // bit: 0 (1=slowed down, 0=full speed)
    m_write_register(MIMU,0x34,0x1E);
      80:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      84:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      88:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    m_write_register(MIMU,0x67,0x01);
      8c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      90:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
    // ADJUST the auxilliary I2C port clock speed, etc.
    // reg: 0x24 (MST_CTRL)
    // bit: 4 = 1 (stop then start), 2 (restart)
    // bit: 0-3 = clock prescaler (0x0D = 400kHz)
    // not necessary, perhaps.  We shall see?
    m_write_register(MIMU,0x24,0x1D);
      94:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      98:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      9c:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>

    // SET THE MAGNETOMETER ADDRESS
    // reg: 0x25 (I2C_SLC0_ADDR)
    // value: 0x1E (from the magnetometer datasheet)
    // notes: for read from slave, set bit 7 to 1; to write, set bit 7 to 0
    m_write_register(MIMU,0x25,0x9E);
      a0:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      a4:	0c 94 5f 12 	jmp	0x24be	; 0x24be <__vector_41>

    // SET THE MAGNETOMETER DATA START ADDRESS
    // reg: 0x26 (I2C_SLV0_REG)
    // val: 3 (X high byte)
    m_write_register(MIMU,0x26,3);
      a8:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
    // reg: 0x27 (I2C_SLV0_CTRL
    // bit: 0-3 (# of bytes to ingest) = 6
    //      4: byte/word grouping control
    //      6: swap bytes
    //      7: enable slave (1=on, 0=off)
    m_write_register(MIMU,0x27,0x96);
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
    
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
    
    return 1;   // SUCCESS!
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
// private function prototypes

unsigned char m_imu_init(unsigned char accel_scale, unsigned char gyro_scale)
{	    
    // ensure that scales are within range
    if( (accel_scale < 0) || (accel_scale > 3) ) return 0;
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
    if( (gyro_scale < 0) || (gyro_scale > 3) ) return 0;
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33

	m_bus_init();
    m_wait(300);

	// confirm device is connected
    if(m_read_register(MIMU,0x75) != 0x68) return 0;
      d2:	aa be       	out	0x3a, r10	; 58
    // START THE AUXILLIARY I2C PORT
    // reg: 0x6A (USER_CTRL)
    m_write_register(MIMU,0x6A,0x20); // enable master mode
    
    return 1;   // SUCCESS!
}
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f7 <descriptor_list>:
      f7:	00 01 00 00 2b 01 12 00 02 00 00 3d 01 43 00 03     ....+......=.C..
     107:	00 00 80 01 04 01 03 09 04 84 01 12 02 03 09 04     ................
     117:	98 01 06 03 03 09 04 a0 01 08                       ..........

00000121 <endpoint_config_table>:
     121:	00 01 c1 12 01 80 36 01 81 36                       ......6..6

0000012b <device_descriptor>:
     12b:	12 01 00 02 02 00 00 10 c0 16 7a 04 00 01 01 02     ..........z.....
     13b:	03 01                                               ..

0000013d <config1_descriptor>:
     13d:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     14d:	01 00 05 24 00 10 01 05 24 01 01 01 04 24 02 06     ...$....$....$..
     15d:	05 24 06 00 01 07 05 82 03 10 00 40 09 04 01 00     .$.........@....
     16d:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     17d:	40 00 00                                            @..

00000180 <string0>:
     180:	04 03 09 04                                         ....

00000184 <string1>:
     184:	12 03 4a 00 2e 00 20 00 46 00 69 00 65 00 6e 00     ..J... .F.i.e.n.
     194:	65 00 00 00                                         e...

00000198 <string2>:
     198:	06 03 4d 00 32 00 00 00                             ..M.2...

000001a0 <string3>:
     1a0:	08 03 34 00 31 00 30 00 00 00                       ..4.1.0...

000001aa <__ctors_end>:
     1aa:	11 24       	eor	r1, r1
     1ac:	1f be       	out	0x3f, r1	; 63
     1ae:	cf ef       	ldi	r28, 0xFF	; 255
     1b0:	da e0       	ldi	r29, 0x0A	; 10
     1b2:	de bf       	out	0x3e, r29	; 62
     1b4:	cd bf       	out	0x3d, r28	; 61

000001b6 <__do_copy_data>:
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	a0 e0       	ldi	r26, 0x00	; 0
     1ba:	b1 e0       	ldi	r27, 0x01	; 1
     1bc:	ee ec       	ldi	r30, 0xCE	; 206
     1be:	f4 e3       	ldi	r31, 0x34	; 52
     1c0:	02 c0       	rjmp	.+4      	; 0x1c6 <__do_copy_data+0x10>
     1c2:	05 90       	lpm	r0, Z+
     1c4:	0d 92       	st	X+, r0
     1c6:	ac 30       	cpi	r26, 0x0C	; 12
     1c8:	b1 07       	cpc	r27, r17
     1ca:	d9 f7       	brne	.-10     	; 0x1c2 <__do_copy_data+0xc>

000001cc <__do_clear_bss>:
     1cc:	21 e0       	ldi	r18, 0x01	; 1
     1ce:	ac e0       	ldi	r26, 0x0C	; 12
     1d0:	b1 e0       	ldi	r27, 0x01	; 1
     1d2:	01 c0       	rjmp	.+2      	; 0x1d6 <.do_clear_bss_start>

000001d4 <.do_clear_bss_loop>:
     1d4:	1d 92       	st	X+, r1

000001d6 <.do_clear_bss_start>:
     1d6:	ad 39       	cpi	r26, 0x9D	; 157
     1d8:	b2 07       	cpc	r27, r18
     1da:	e1 f7       	brne	.-8      	; 0x1d4 <.do_clear_bss_loop>
     1dc:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <main>
     1e0:	0c 94 65 1a 	jmp	0x34ca	; 0x34ca <_exit>

000001e4 <__bad_interrupt>:
     1e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001e8 <turnOnBlueLED>:
#include "Init_functions.h"
#include "m_general.h"

void turnOnBlueLED(void)
{
	set(PORTD,5);
     1e8:	5d 9a       	sbi	0x0b, 5	; 11
     1ea:	08 95       	ret

000001ec <turnOffBlueLED>:
}

void turnOffBlueLED(void)
{
	clear(PORTD,5);
     1ec:	5d 98       	cbi	0x0b, 5	; 11
     1ee:	08 95       	ret

000001f0 <init_ports>:


void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
     1f0:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
     1f2:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
     1f4:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
     1f6:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
     1f8:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
     1fa:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set D5 as output
	set(DDRD,5);
     1fc:	55 9a       	sbi	0x0a, 5	; 10
	clear(PORTD,5);
     1fe:	5d 98       	cbi	0x0b, 5	; 11
     200:	08 95       	ret

00000202 <get_analog_val>:


void get_analog_val(int id)
{
    //Disable ADC
    clear(ADCSRA,ADEN);
     202:	ea e7       	ldi	r30, 0x7A	; 122
     204:	f0 e0       	ldi	r31, 0x00	; 0
     206:	20 81       	ld	r18, Z
     208:	2f 77       	andi	r18, 0x7F	; 127
     20a:	20 83       	st	Z, r18
    
    //Check which analog device we want to get the values from and select it
    switch (id)
     20c:	83 30       	cpi	r24, 0x03	; 3
     20e:	91 05       	cpc	r25, r1
     210:	09 f4       	brne	.+2      	; 0x214 <get_analog_val+0x12>
     212:	49 c0       	rjmp	.+146    	; 0x2a6 <get_analog_val+0xa4>
     214:	3c f4       	brge	.+14     	; 0x224 <get_analog_val+0x22>
     216:	81 30       	cpi	r24, 0x01	; 1
     218:	91 05       	cpc	r25, r1
     21a:	19 f1       	breq	.+70     	; 0x262 <get_analog_val+0x60>
     21c:	9c f5       	brge	.+102    	; 0x284 <get_analog_val+0x82>
     21e:	89 2b       	or	r24, r25
     220:	79 f0       	breq	.+30     	; 0x240 <get_analog_val+0x3e>
     222:	95 c0       	rjmp	.+298    	; 0x34e <get_analog_val+0x14c>
     224:	85 30       	cpi	r24, 0x05	; 5
     226:	91 05       	cpc	r25, r1
     228:	09 f4       	brne	.+2      	; 0x22c <get_analog_val+0x2a>
     22a:	5f c0       	rjmp	.+190    	; 0x2ea <get_analog_val+0xe8>
     22c:	0c f4       	brge	.+2      	; 0x230 <get_analog_val+0x2e>
     22e:	4c c0       	rjmp	.+152    	; 0x2c8 <get_analog_val+0xc6>
     230:	86 30       	cpi	r24, 0x06	; 6
     232:	91 05       	cpc	r25, r1
     234:	09 f4       	brne	.+2      	; 0x238 <get_analog_val+0x36>
     236:	6a c0       	rjmp	.+212    	; 0x30c <get_analog_val+0x10a>
     238:	07 97       	sbiw	r24, 0x07	; 7
     23a:	09 f0       	breq	.+2      	; 0x23e <get_analog_val+0x3c>
     23c:	88 c0       	rjmp	.+272    	; 0x34e <get_analog_val+0x14c>
     23e:	77 c0       	rjmp	.+238    	; 0x32e <get_analog_val+0x12c>
    {
        case 0:
            //Single-Ended Channel Selection (F0)
            clear(ADCSRB,MUX5);
     240:	eb e7       	ldi	r30, 0x7B	; 123
     242:	f0 e0       	ldi	r31, 0x00	; 0
     244:	80 81       	ld	r24, Z
     246:	8f 7d       	andi	r24, 0xDF	; 223
     248:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     24a:	ec e7       	ldi	r30, 0x7C	; 124
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	8b 7f       	andi	r24, 0xFB	; 251
     252:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     254:	80 81       	ld	r24, Z
     256:	8d 7f       	andi	r24, 0xFD	; 253
     258:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     25a:	80 81       	ld	r24, Z
     25c:	8e 7f       	andi	r24, 0xFE	; 254
     25e:	80 83       	st	Z, r24
            break;
     260:	76 c0       	rjmp	.+236    	; 0x34e <get_analog_val+0x14c>
            
        case 1:
            //Single-Ended Channel Selection (F1)
            clear(ADCSRB,MUX5);
     262:	eb e7       	ldi	r30, 0x7B	; 123
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 7d       	andi	r24, 0xDF	; 223
     26a:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     26c:	ec e7       	ldi	r30, 0x7C	; 124
     26e:	f0 e0       	ldi	r31, 0x00	; 0
     270:	80 81       	ld	r24, Z
     272:	8b 7f       	andi	r24, 0xFB	; 251
     274:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     276:	80 81       	ld	r24, Z
     278:	8d 7f       	andi	r24, 0xFD	; 253
     27a:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     27c:	80 81       	ld	r24, Z
     27e:	81 60       	ori	r24, 0x01	; 1
     280:	80 83       	st	Z, r24
            break;
     282:	65 c0       	rjmp	.+202    	; 0x34e <get_analog_val+0x14c>
            
        case 2:
            //Single-Ended Channel Selection (F4)
            clear(ADCSRB,MUX5);
     284:	eb e7       	ldi	r30, 0x7B	; 123
     286:	f0 e0       	ldi	r31, 0x00	; 0
     288:	80 81       	ld	r24, Z
     28a:	8f 7d       	andi	r24, 0xDF	; 223
     28c:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     28e:	ec e7       	ldi	r30, 0x7C	; 124
     290:	f0 e0       	ldi	r31, 0x00	; 0
     292:	80 81       	ld	r24, Z
     294:	84 60       	ori	r24, 0x04	; 4
     296:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     298:	80 81       	ld	r24, Z
     29a:	8d 7f       	andi	r24, 0xFD	; 253
     29c:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     29e:	80 81       	ld	r24, Z
     2a0:	8e 7f       	andi	r24, 0xFE	; 254
     2a2:	80 83       	st	Z, r24
            break;
     2a4:	54 c0       	rjmp	.+168    	; 0x34e <get_analog_val+0x14c>
            
        case 3:
            //Single-Ended Channel Selection (F5)
            clear(ADCSRB,MUX5);
     2a6:	eb e7       	ldi	r30, 0x7B	; 123
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	8f 7d       	andi	r24, 0xDF	; 223
     2ae:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2b0:	ec e7       	ldi	r30, 0x7C	; 124
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	80 81       	ld	r24, Z
     2b6:	84 60       	ori	r24, 0x04	; 4
     2b8:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     2ba:	80 81       	ld	r24, Z
     2bc:	8d 7f       	andi	r24, 0xFD	; 253
     2be:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     2c0:	80 81       	ld	r24, Z
     2c2:	81 60       	ori	r24, 0x01	; 1
     2c4:	80 83       	st	Z, r24
            break;
     2c6:	43 c0       	rjmp	.+134    	; 0x34e <get_analog_val+0x14c>
            
        case 4:
            //Single-Ended Channel Selection (F6)
            clear(ADCSRB,MUX5);
     2c8:	eb e7       	ldi	r30, 0x7B	; 123
     2ca:	f0 e0       	ldi	r31, 0x00	; 0
     2cc:	80 81       	ld	r24, Z
     2ce:	8f 7d       	andi	r24, 0xDF	; 223
     2d0:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2d2:	ec e7       	ldi	r30, 0x7C	; 124
     2d4:	f0 e0       	ldi	r31, 0x00	; 0
     2d6:	80 81       	ld	r24, Z
     2d8:	84 60       	ori	r24, 0x04	; 4
     2da:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2dc:	80 81       	ld	r24, Z
     2de:	82 60       	ori	r24, 0x02	; 2
     2e0:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     2e2:	80 81       	ld	r24, Z
     2e4:	8e 7f       	andi	r24, 0xFE	; 254
     2e6:	80 83       	st	Z, r24
            break;
     2e8:	32 c0       	rjmp	.+100    	; 0x34e <get_analog_val+0x14c>
            
        case 5:
            //Single-Ended Channel Selection (F7)
            clear(ADCSRB,MUX5);
     2ea:	eb e7       	ldi	r30, 0x7B	; 123
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
     2f0:	8f 7d       	andi	r24, 0xDF	; 223
     2f2:	80 83       	st	Z, r24
            set(ADMUX,MUX2);
     2f4:	ec e7       	ldi	r30, 0x7C	; 124
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	80 81       	ld	r24, Z
     2fa:	84 60       	ori	r24, 0x04	; 4
     2fc:	80 83       	st	Z, r24
            set(ADMUX,MUX1);
     2fe:	80 81       	ld	r24, Z
     300:	82 60       	ori	r24, 0x02	; 2
     302:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     304:	80 81       	ld	r24, Z
     306:	81 60       	ori	r24, 0x01	; 1
     308:	80 83       	st	Z, r24
            break;
     30a:	21 c0       	rjmp	.+66     	; 0x34e <get_analog_val+0x14c>
            
        case 6:
            //Single-Ended Channel Selection (D4)
            set(ADCSRB,MUX5);
     30c:	eb e7       	ldi	r30, 0x7B	; 123
     30e:	f0 e0       	ldi	r31, 0x00	; 0
     310:	80 81       	ld	r24, Z
     312:	80 62       	ori	r24, 0x20	; 32
     314:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     316:	ec e7       	ldi	r30, 0x7C	; 124
     318:	f0 e0       	ldi	r31, 0x00	; 0
     31a:	80 81       	ld	r24, Z
     31c:	8b 7f       	andi	r24, 0xFB	; 251
     31e:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     320:	80 81       	ld	r24, Z
     322:	8d 7f       	andi	r24, 0xFD	; 253
     324:	80 83       	st	Z, r24
            clear(ADMUX,MUX0);
     326:	80 81       	ld	r24, Z
     328:	8e 7f       	andi	r24, 0xFE	; 254
     32a:	80 83       	st	Z, r24
            break;
     32c:	10 c0       	rjmp	.+32     	; 0x34e <get_analog_val+0x14c>
            
        case 7:
            //Single-Ended Channel Selection (D6)
            set(ADCSRB,MUX5);
     32e:	eb e7       	ldi	r30, 0x7B	; 123
     330:	f0 e0       	ldi	r31, 0x00	; 0
     332:	80 81       	ld	r24, Z
     334:	80 62       	ori	r24, 0x20	; 32
     336:	80 83       	st	Z, r24
            clear(ADMUX,MUX2);
     338:	ec e7       	ldi	r30, 0x7C	; 124
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8b 7f       	andi	r24, 0xFB	; 251
     340:	80 83       	st	Z, r24
            clear(ADMUX,MUX1);
     342:	80 81       	ld	r24, Z
     344:	8d 7f       	andi	r24, 0xFD	; 253
     346:	80 83       	st	Z, r24
            set(ADMUX,MUX0);
     348:	80 81       	ld	r24, Z
     34a:	81 60       	ori	r24, 0x01	; 1
     34c:	80 83       	st	Z, r24
            break;
            
    }
    
    //Enable ADC Subsystem & Begin Conversion
    set(ADCSRA,ADEN);
     34e:	ea e7       	ldi	r30, 0x7A	; 122
     350:	f0 e0       	ldi	r31, 0x00	; 0
     352:	80 81       	ld	r24, Z
     354:	80 68       	ori	r24, 0x80	; 128
     356:	80 83       	st	Z, r24
    set(ADCSRA,ADSC);
     358:	80 81       	ld	r24, Z
     35a:	80 64       	ori	r24, 0x40	; 64
     35c:	80 83       	st	Z, r24
    set(ADCSRA,ADIF);
     35e:	80 81       	ld	r24, Z
     360:	80 61       	ori	r24, 0x10	; 16
     362:	80 83       	st	Z, r24
     364:	08 95       	ret

00000366 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 125;
     366:	8d e7       	ldi	r24, 0x7D	; 125
     368:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
     36c:	e3 ec       	ldi	r30, 0xC3	; 195
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	80 81       	ld	r24, Z
     372:	8d 7f       	andi	r24, 0xFD	; 253
     374:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
     376:	80 81       	ld	r24, Z
     378:	8e 7f       	andi	r24, 0xFE	; 254
     37a:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
     37c:	e2 e7       	ldi	r30, 0x72	; 114
     37e:	f0 e0       	ldi	r31, 0x00	; 0
     380:	80 81       	ld	r24, Z
     382:	84 60       	ori	r24, 0x04	; 4
     384:	80 83       	st	Z, r24
    
    //Set prescaler to /256
    set(TCCR4B,CS43);
     386:	e1 ec       	ldi	r30, 0xC1	; 193
     388:	f0 e0       	ldi	r31, 0x00	; 0
     38a:	80 81       	ld	r24, Z
     38c:	88 60       	ori	r24, 0x08	; 8
     38e:	80 83       	st	Z, r24
    clear(TCCR4B,CS42);
     390:	80 81       	ld	r24, Z
     392:	8b 7f       	andi	r24, 0xFB	; 251
     394:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
     396:	80 81       	ld	r24, Z
     398:	8d 7f       	andi	r24, 0xFD	; 253
     39a:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
     39c:	80 81       	ld	r24, Z
     39e:	81 60       	ori	r24, 0x01	; 1
     3a0:	80 83       	st	Z, r24
     3a2:	08 95       	ret

000003a4 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
     3a4:	ec e7       	ldi	r30, 0x7C	; 124
     3a6:	f0 e0       	ldi	r31, 0x00	; 0
     3a8:	80 81       	ld	r24, Z
     3aa:	8f 77       	andi	r24, 0x7F	; 127
     3ac:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
     3ae:	80 81       	ld	r24, Z
     3b0:	80 64       	ori	r24, 0x40	; 64
     3b2:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
     3b4:	aa e7       	ldi	r26, 0x7A	; 122
     3b6:	b0 e0       	ldi	r27, 0x00	; 0
     3b8:	8c 91       	ld	r24, X
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
     3be:	8c 91       	ld	r24, X
     3c0:	82 60       	ori	r24, 0x02	; 2
     3c2:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
     3c4:	8c 91       	ld	r24, X
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
     3ca:	ee e7       	ldi	r30, 0x7E	; 126
     3cc:	f0 e0       	ldi	r31, 0x00	; 0
     3ce:	80 81       	ld	r24, Z
     3d0:	81 60       	ori	r24, 0x01	; 1
     3d2:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
     3d4:	80 81       	ld	r24, Z
     3d6:	82 60       	ori	r24, 0x02	; 2
     3d8:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
     3da:	80 81       	ld	r24, Z
     3dc:	80 61       	ori	r24, 0x10	; 16
     3de:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
     3e0:	80 81       	ld	r24, Z
     3e2:	80 62       	ori	r24, 0x20	; 32
     3e4:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
     3e6:	80 81       	ld	r24, Z
     3e8:	80 64       	ori	r24, 0x40	; 64
     3ea:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
     3ec:	80 81       	ld	r24, Z
     3ee:	80 68       	ori	r24, 0x80	; 128
     3f0:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
     3f2:	ed e7       	ldi	r30, 0x7D	; 125
     3f4:	f0 e0       	ldi	r31, 0x00	; 0
     3f6:	80 81       	ld	r24, Z
     3f8:	81 60       	ori	r24, 0x01	; 1
     3fa:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
     3fc:	80 81       	ld	r24, Z
     3fe:	82 60       	ori	r24, 0x02	; 2
     400:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
     402:	8c 91       	ld	r24, X
     404:	80 62       	ori	r24, 0x20	; 32
     406:	8c 93       	st	X, r24
     408:	08 95       	ret

0000040a <set_timer1>:


void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
     40a:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
     40c:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
     40e:	88 e8       	ldi	r24, 0x88	; 136
     410:	93 e1       	ldi	r25, 0x13	; 19
     412:	90 93 89 00 	sts	0x0089, r25
     416:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 4000;
     41a:	80 ea       	ldi	r24, 0xA0	; 160
     41c:	9f e0       	ldi	r25, 0x0F	; 15
     41e:	90 93 8b 00 	sts	0x008B, r25
     422:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = 4000;
     426:	90 93 8d 00 	sts	0x008D, r25
     42a:	80 93 8c 00 	sts	0x008C, r24
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
     42e:	a1 e8       	ldi	r26, 0x81	; 129
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	8c 91       	ld	r24, X
     434:	80 61       	ori	r24, 0x10	; 16
     436:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
     438:	8c 91       	ld	r24, X
     43a:	88 60       	ori	r24, 0x08	; 8
     43c:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
     43e:	e0 e8       	ldi	r30, 0x80	; 128
     440:	f0 e0       	ldi	r31, 0x00	; 0
     442:	80 81       	ld	r24, Z
     444:	82 60       	ori	r24, 0x02	; 2
     446:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
     448:	80 81       	ld	r24, Z
     44a:	81 60       	ori	r24, 0x01	; 1
     44c:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
     44e:	80 81       	ld	r24, Z
     450:	80 62       	ori	r24, 0x20	; 32
     452:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
     454:	80 81       	ld	r24, Z
     456:	8f 7e       	andi	r24, 0xEF	; 239
     458:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
     45a:	80 81       	ld	r24, Z
     45c:	88 60       	ori	r24, 0x08	; 8
     45e:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
     460:	80 81       	ld	r24, Z
     462:	8b 7f       	andi	r24, 0xFB	; 251
     464:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
     466:	8c 91       	ld	r24, X
     468:	8b 7f       	andi	r24, 0xFB	; 251
     46a:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
     46c:	8c 91       	ld	r24, X
     46e:	8d 7f       	andi	r24, 0xFD	; 253
     470:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
     472:	8c 91       	ld	r24, X
     474:	81 60       	ori	r24, 0x01	; 1
     476:	8c 93       	st	X, r24
     478:	08 95       	ret

0000047a <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     47a:	2f 92       	push	r2
     47c:	3f 92       	push	r3
     47e:	4f 92       	push	r4
     480:	5f 92       	push	r5
     482:	6f 92       	push	r6
     484:	7f 92       	push	r7
     486:	8f 92       	push	r8
     488:	9f 92       	push	r9
     48a:	af 92       	push	r10
     48c:	bf 92       	push	r11
     48e:	cf 92       	push	r12
     490:	df 92       	push	r13
     492:	ef 92       	push	r14
     494:	ff 92       	push	r15
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
     4a2:	28 97       	sbiw	r28, 0x08	; 8
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	f8 94       	cli
     4a8:	de bf       	out	0x3e, r29	; 62
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	cd bf       	out	0x3d, r28	; 61
     4ae:	98 86       	std	Y+8, r9	; 0x08
     4b0:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     4b2:	10 92 0d 01 	sts	0x010D, r1
     4b6:	10 92 0c 01 	sts	0x010C, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     4ba:	8f 3f       	cpi	r24, 0xFF	; 255
     4bc:	e3 e0       	ldi	r30, 0x03	; 3
     4be:	9e 07       	cpc	r25, r30
     4c0:	01 f1       	breq	.+64     	; 0x502 <localize+0x88>
     4c2:	6f 3f       	cpi	r22, 0xFF	; 255
     4c4:	f3 e0       	ldi	r31, 0x03	; 3
     4c6:	7f 07       	cpc	r23, r31
     4c8:	e1 f0       	breq	.+56     	; 0x502 <localize+0x88>
     4ca:	4f 3f       	cpi	r20, 0xFF	; 255
     4cc:	e3 e0       	ldi	r30, 0x03	; 3
     4ce:	5e 07       	cpc	r21, r30
     4d0:	c1 f0       	breq	.+48     	; 0x502 <localize+0x88>
     4d2:	2f 3f       	cpi	r18, 0xFF	; 255
     4d4:	f3 e0       	ldi	r31, 0x03	; 3
     4d6:	3f 07       	cpc	r19, r31
     4d8:	a1 f0       	breq	.+40     	; 0x502 <localize+0x88>
     4da:	0f 3f       	cpi	r16, 0xFF	; 255
     4dc:	e3 e0       	ldi	r30, 0x03	; 3
     4de:	1e 07       	cpc	r17, r30
     4e0:	81 f0       	breq	.+32     	; 0x502 <localize+0x88>
     4e2:	ff ef       	ldi	r31, 0xFF	; 255
     4e4:	ef 16       	cp	r14, r31
     4e6:	f3 e0       	ldi	r31, 0x03	; 3
     4e8:	ff 06       	cpc	r15, r31
     4ea:	59 f0       	breq	.+22     	; 0x502 <localize+0x88>
     4ec:	ef ef       	ldi	r30, 0xFF	; 255
     4ee:	ce 16       	cp	r12, r30
     4f0:	e3 e0       	ldi	r30, 0x03	; 3
     4f2:	de 06       	cpc	r13, r30
     4f4:	31 f0       	breq	.+12     	; 0x502 <localize+0x88>
     4f6:	ff ef       	ldi	r31, 0xFF	; 255
     4f8:	af 16       	cp	r10, r31
     4fa:	f3 e0       	ldi	r31, 0x03	; 3
     4fc:	bf 06       	cpc	r11, r31
     4fe:	09 f0       	breq	.+2      	; 0x502 <localize+0x88>
     500:	af c6       	rjmp	.+3422   	; 0x1260 <__stack+0x761>
        flag_no_good_stars = 1;
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	90 93 0d 01 	sts	0x010D, r25
     50a:	80 93 0c 01 	sts	0x010C, r24
     50e:	d1 c3       	rjmp	.+1954   	; 0xcb2 <__stack+0x1b3>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     510:	f8 01       	movw	r30, r16
     512:	a0 80       	ld	r10, Z
     514:	b1 80       	ldd	r11, Z+1	; 0x01
     516:	c2 80       	ldd	r12, Z+2	; 0x02
     518:	d3 80       	ldd	r13, Z+3	; 0x03
     51a:	0c 5f       	subi	r16, 0xFC	; 252
     51c:	1f 4f       	sbci	r17, 0xFF	; 255
     51e:	26 2d       	mov	r18, r6
     520:	37 2d       	mov	r19, r7
     522:	48 2d       	mov	r20, r8
     524:	59 2d       	mov	r21, r9
     526:	6a 2d       	mov	r22, r10
     528:	7b 2d       	mov	r23, r11
     52a:	8c 2d       	mov	r24, r12
     52c:	9d 2d       	mov	r25, r13
     52e:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
     532:	18 16       	cp	r1, r24
     534:	34 f4       	brge	.+12     	; 0x542 <localize+0xc8>
     536:	fa 82       	std	Y+2, r15	; 0x02
     538:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     53a:	6a 2c       	mov	r6, r10
     53c:	7b 2c       	mov	r7, r11
     53e:	8c 2c       	mov	r8, r12
     540:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     542:	22 2d       	mov	r18, r2
     544:	33 2d       	mov	r19, r3
     546:	44 2d       	mov	r20, r4
     548:	55 2d       	mov	r21, r5
     54a:	6a 2d       	mov	r22, r10
     54c:	7b 2d       	mov	r23, r11
     54e:	8c 2d       	mov	r24, r12
     550:	9d 2d       	mov	r25, r13
     552:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
     556:	88 23       	and	r24, r24
     558:	34 f4       	brge	.+12     	; 0x566 <localize+0xec>
     55a:	fe 82       	std	Y+6, r15	; 0x06
     55c:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     55e:	2a 2c       	mov	r2, r10
     560:	3b 2c       	mov	r3, r11
     562:	4c 2c       	mov	r4, r12
     564:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     566:	ff ef       	ldi	r31, 0xFF	; 255
     568:	ef 1a       	sub	r14, r31
     56a:	ff 0a       	sbc	r15, r31
     56c:	86 e0       	ldi	r24, 0x06	; 6
     56e:	e8 16       	cp	r14, r24
     570:	f1 04       	cpc	r15, r1
     572:	71 f6       	brne	.-100    	; 0x510 <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     574:	e9 81       	ldd	r30, Y+1	; 0x01
     576:	fa 81       	ldd	r31, Y+2	; 0x02
     578:	e2 30       	cpi	r30, 0x02	; 2
     57a:	f1 05       	cpc	r31, r1
     57c:	09 f4       	brne	.+2      	; 0x580 <localize+0x106>
     57e:	3e c1       	rjmp	.+636    	; 0x7fc <localize+0x382>
     580:	34 f4       	brge	.+12     	; 0x58e <localize+0x114>
     582:	30 97       	sbiw	r30, 0x00	; 0
     584:	81 f0       	breq	.+32     	; 0x5a6 <localize+0x12c>
     586:	31 97       	sbiw	r30, 0x01	; 1
     588:	09 f0       	breq	.+2      	; 0x58c <localize+0x112>
     58a:	8d c3       	rjmp	.+1818   	; 0xca6 <__stack+0x1a7>
     58c:	a2 c0       	rjmp	.+324    	; 0x6d2 <localize+0x258>
     58e:	89 81       	ldd	r24, Y+1	; 0x01
     590:	9a 81       	ldd	r25, Y+2	; 0x02
     592:	84 30       	cpi	r24, 0x04	; 4
     594:	91 05       	cpc	r25, r1
     596:	09 f4       	brne	.+2      	; 0x59a <localize+0x120>
     598:	5b c2       	rjmp	.+1206   	; 0xa50 <localize+0x5d6>
     59a:	0c f4       	brge	.+2      	; 0x59e <localize+0x124>
     59c:	c4 c1       	rjmp	.+904    	; 0x926 <localize+0x4ac>
     59e:	05 97       	sbiw	r24, 0x05	; 5
     5a0:	09 f0       	breq	.+2      	; 0x5a4 <localize+0x12a>
     5a2:	81 c3       	rjmp	.+1794   	; 0xca6 <__stack+0x1a7>
     5a4:	ea c2       	rjmp	.+1492   	; 0xb7a <__stack+0x7b>
            case 0:
                switch (min_id) {
     5a6:	ed 81       	ldd	r30, Y+5	; 0x05
     5a8:	fe 81       	ldd	r31, Y+6	; 0x06
     5aa:	e2 30       	cpi	r30, 0x02	; 2
     5ac:	f1 05       	cpc	r31, r1
     5ae:	39 f1       	breq	.+78     	; 0x5fe <localize+0x184>
     5b0:	24 f4       	brge	.+8      	; 0x5ba <localize+0x140>
     5b2:	31 97       	sbiw	r30, 0x01	; 1
     5b4:	09 f0       	breq	.+2      	; 0x5b8 <localize+0x13e>
     5b6:	6e c0       	rjmp	.+220    	; 0x694 <localize+0x21a>
     5b8:	09 c0       	rjmp	.+18     	; 0x5cc <localize+0x152>
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	9e 81       	ldd	r25, Y+6	; 0x06
     5be:	83 30       	cpi	r24, 0x03	; 3
     5c0:	91 05       	cpc	r25, r1
     5c2:	b1 f1       	breq	.+108    	; 0x630 <localize+0x1b6>
     5c4:	04 97       	sbiw	r24, 0x04	; 4
     5c6:	09 f0       	breq	.+2      	; 0x5ca <localize+0x150>
     5c8:	65 c0       	rjmp	.+202    	; 0x694 <localize+0x21a>
     5ca:	4b c0       	rjmp	.+150    	; 0x662 <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     5cc:	82 e4       	ldi	r24, 0x42	; 66
     5ce:	91 e0       	ldi	r25, 0x01	; 1
     5d0:	90 93 90 01 	sts	0x0190, r25
     5d4:	80 93 8f 01 	sts	0x018F, r24
     5d8:	8a e3       	ldi	r24, 0x3A	; 58
     5da:	91 e0       	ldi	r25, 0x01	; 1
     5dc:	90 93 76 01 	sts	0x0176, r25
     5e0:	80 93 75 01 	sts	0x0175, r24
     5e4:	8e e3       	ldi	r24, 0x3E	; 62
     5e6:	91 e0       	ldi	r25, 0x01	; 1
     5e8:	90 93 78 01 	sts	0x0178, r25
     5ec:	80 93 77 01 	sts	0x0177, r24
     5f0:	86 e3       	ldi	r24, 0x36	; 54
     5f2:	91 e0       	ldi	r25, 0x01	; 1
     5f4:	90 93 8a 01 	sts	0x018A, r25
     5f8:	80 93 89 01 	sts	0x0189, r24
                        break;
     5fc:	54 c3       	rjmp	.+1704   	; 0xca6 <__stack+0x1a7>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     5fe:	82 e4       	ldi	r24, 0x42	; 66
     600:	91 e0       	ldi	r25, 0x01	; 1
     602:	90 93 90 01 	sts	0x0190, r25
     606:	80 93 8f 01 	sts	0x018F, r24
     60a:	86 e3       	ldi	r24, 0x36	; 54
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	90 93 76 01 	sts	0x0176, r25
     612:	80 93 75 01 	sts	0x0175, r24
     616:	8e e3       	ldi	r24, 0x3E	; 62
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	90 93 78 01 	sts	0x0178, r25
     61e:	80 93 77 01 	sts	0x0177, r24
     622:	8a e3       	ldi	r24, 0x3A	; 58
     624:	91 e0       	ldi	r25, 0x01	; 1
     626:	90 93 8a 01 	sts	0x018A, r25
     62a:	80 93 89 01 	sts	0x0189, r24
                        break;
     62e:	3b c3       	rjmp	.+1654   	; 0xca6 <__stack+0x1a7>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     630:	8e e3       	ldi	r24, 0x3E	; 62
     632:	91 e0       	ldi	r25, 0x01	; 1
     634:	90 93 90 01 	sts	0x0190, r25
     638:	80 93 8f 01 	sts	0x018F, r24
     63c:	8a e3       	ldi	r24, 0x3A	; 58
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	90 93 76 01 	sts	0x0176, r25
     644:	80 93 75 01 	sts	0x0175, r24
     648:	82 e4       	ldi	r24, 0x42	; 66
     64a:	91 e0       	ldi	r25, 0x01	; 1
     64c:	90 93 78 01 	sts	0x0178, r25
     650:	80 93 77 01 	sts	0x0177, r24
     654:	86 e3       	ldi	r24, 0x36	; 54
     656:	91 e0       	ldi	r25, 0x01	; 1
     658:	90 93 8a 01 	sts	0x018A, r25
     65c:	80 93 89 01 	sts	0x0189, r24
                        break;
     660:	22 c3       	rjmp	.+1604   	; 0xca6 <__stack+0x1a7>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     662:	8e e3       	ldi	r24, 0x3E	; 62
     664:	91 e0       	ldi	r25, 0x01	; 1
     666:	90 93 90 01 	sts	0x0190, r25
     66a:	80 93 8f 01 	sts	0x018F, r24
     66e:	86 e3       	ldi	r24, 0x36	; 54
     670:	91 e0       	ldi	r25, 0x01	; 1
     672:	90 93 76 01 	sts	0x0176, r25
     676:	80 93 75 01 	sts	0x0175, r24
     67a:	82 e4       	ldi	r24, 0x42	; 66
     67c:	91 e0       	ldi	r25, 0x01	; 1
     67e:	90 93 78 01 	sts	0x0178, r25
     682:	80 93 77 01 	sts	0x0177, r24
     686:	8a e3       	ldi	r24, 0x3A	; 58
     688:	91 e0       	ldi	r25, 0x01	; 1
     68a:	90 93 8a 01 	sts	0x018A, r25
     68e:	80 93 89 01 	sts	0x0189, r24
                        break;
     692:	09 c3       	rjmp	.+1554   	; 0xca6 <__stack+0x1a7>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     694:	82 e4       	ldi	r24, 0x42	; 66
     696:	91 e0       	ldi	r25, 0x01	; 1
     698:	90 93 90 01 	sts	0x0190, r25
     69c:	80 93 8f 01 	sts	0x018F, r24
     6a0:	8e e3       	ldi	r24, 0x3E	; 62
     6a2:	91 e0       	ldi	r25, 0x01	; 1
     6a4:	90 93 76 01 	sts	0x0176, r25
     6a8:	80 93 75 01 	sts	0x0175, r24
     6ac:	8a e3       	ldi	r24, 0x3A	; 58
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	90 93 78 01 	sts	0x0178, r25
     6b4:	80 93 77 01 	sts	0x0177, r24
     6b8:	86 e3       	ldi	r24, 0x36	; 54
     6ba:	91 e0       	ldi	r25, 0x01	; 1
     6bc:	90 93 8a 01 	sts	0x018A, r25
     6c0:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	90 93 0d 01 	sts	0x010D, r25
     6cc:	80 93 0c 01 	sts	0x010C, r24
                        break;
     6d0:	f0 c2       	rjmp	.+1504   	; 0xcb2 <__stack+0x1b3>
                }
                break;
                
            case 1:
                switch (min_id) {
     6d2:	ed 81       	ldd	r30, Y+5	; 0x05
     6d4:	fe 81       	ldd	r31, Y+6	; 0x06
     6d6:	e2 30       	cpi	r30, 0x02	; 2
     6d8:	f1 05       	cpc	r31, r1
     6da:	31 f1       	breq	.+76     	; 0x728 <localize+0x2ae>
     6dc:	1c f4       	brge	.+6      	; 0x6e4 <localize+0x26a>
     6de:	ef 2b       	or	r30, r31
     6e0:	51 f0       	breq	.+20     	; 0x6f6 <localize+0x27c>
     6e2:	6d c0       	rjmp	.+218    	; 0x7be <localize+0x344>
     6e4:	8d 81       	ldd	r24, Y+5	; 0x05
     6e6:	9e 81       	ldd	r25, Y+6	; 0x06
     6e8:	83 30       	cpi	r24, 0x03	; 3
     6ea:	91 05       	cpc	r25, r1
     6ec:	b1 f1       	breq	.+108    	; 0x75a <localize+0x2e0>
     6ee:	05 97       	sbiw	r24, 0x05	; 5
     6f0:	09 f0       	breq	.+2      	; 0x6f4 <localize+0x27a>
     6f2:	65 c0       	rjmp	.+202    	; 0x7be <localize+0x344>
     6f4:	4b c0       	rjmp	.+150    	; 0x78c <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6f6:	82 e4       	ldi	r24, 0x42	; 66
     6f8:	91 e0       	ldi	r25, 0x01	; 1
     6fa:	90 93 90 01 	sts	0x0190, r25
     6fe:	80 93 8f 01 	sts	0x018F, r24
     702:	8e e3       	ldi	r24, 0x3E	; 62
     704:	91 e0       	ldi	r25, 0x01	; 1
     706:	90 93 76 01 	sts	0x0176, r25
     70a:	80 93 75 01 	sts	0x0175, r24
     70e:	8a e3       	ldi	r24, 0x3A	; 58
     710:	91 e0       	ldi	r25, 0x01	; 1
     712:	90 93 78 01 	sts	0x0178, r25
     716:	80 93 77 01 	sts	0x0177, r24
     71a:	86 e3       	ldi	r24, 0x36	; 54
     71c:	91 e0       	ldi	r25, 0x01	; 1
     71e:	90 93 8a 01 	sts	0x018A, r25
     722:	80 93 89 01 	sts	0x0189, r24
                        break;
     726:	bf c2       	rjmp	.+1406   	; 0xca6 <__stack+0x1a7>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     728:	82 e4       	ldi	r24, 0x42	; 66
     72a:	91 e0       	ldi	r25, 0x01	; 1
     72c:	90 93 90 01 	sts	0x0190, r25
     730:	80 93 8f 01 	sts	0x018F, r24
     734:	86 e3       	ldi	r24, 0x36	; 54
     736:	91 e0       	ldi	r25, 0x01	; 1
     738:	90 93 76 01 	sts	0x0176, r25
     73c:	80 93 75 01 	sts	0x0175, r24
     740:	8a e3       	ldi	r24, 0x3A	; 58
     742:	91 e0       	ldi	r25, 0x01	; 1
     744:	90 93 78 01 	sts	0x0178, r25
     748:	80 93 77 01 	sts	0x0177, r24
     74c:	8e e3       	ldi	r24, 0x3E	; 62
     74e:	91 e0       	ldi	r25, 0x01	; 1
     750:	90 93 8a 01 	sts	0x018A, r25
     754:	80 93 89 01 	sts	0x0189, r24
                        break;
     758:	a6 c2       	rjmp	.+1356   	; 0xca6 <__stack+0x1a7>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     75a:	8a e3       	ldi	r24, 0x3A	; 58
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	90 93 90 01 	sts	0x0190, r25
     762:	80 93 8f 01 	sts	0x018F, r24
     766:	8e e3       	ldi	r24, 0x3E	; 62
     768:	91 e0       	ldi	r25, 0x01	; 1
     76a:	90 93 76 01 	sts	0x0176, r25
     76e:	80 93 75 01 	sts	0x0175, r24
     772:	82 e4       	ldi	r24, 0x42	; 66
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	90 93 78 01 	sts	0x0178, r25
     77a:	80 93 77 01 	sts	0x0177, r24
     77e:	86 e3       	ldi	r24, 0x36	; 54
     780:	91 e0       	ldi	r25, 0x01	; 1
     782:	90 93 8a 01 	sts	0x018A, r25
     786:	80 93 89 01 	sts	0x0189, r24
                        break;
     78a:	8d c2       	rjmp	.+1306   	; 0xca6 <__stack+0x1a7>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     78c:	8a e3       	ldi	r24, 0x3A	; 58
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	90 93 90 01 	sts	0x0190, r25
     794:	80 93 8f 01 	sts	0x018F, r24
     798:	86 e3       	ldi	r24, 0x36	; 54
     79a:	91 e0       	ldi	r25, 0x01	; 1
     79c:	90 93 76 01 	sts	0x0176, r25
     7a0:	80 93 75 01 	sts	0x0175, r24
     7a4:	82 e4       	ldi	r24, 0x42	; 66
     7a6:	91 e0       	ldi	r25, 0x01	; 1
     7a8:	90 93 78 01 	sts	0x0178, r25
     7ac:	80 93 77 01 	sts	0x0177, r24
     7b0:	8e e3       	ldi	r24, 0x3E	; 62
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	90 93 8a 01 	sts	0x018A, r25
     7b8:	80 93 89 01 	sts	0x0189, r24
                        break;
     7bc:	74 c2       	rjmp	.+1256   	; 0xca6 <__stack+0x1a7>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7be:	82 e4       	ldi	r24, 0x42	; 66
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	90 93 90 01 	sts	0x0190, r25
     7c6:	80 93 8f 01 	sts	0x018F, r24
     7ca:	8e e3       	ldi	r24, 0x3E	; 62
     7cc:	91 e0       	ldi	r25, 0x01	; 1
     7ce:	90 93 76 01 	sts	0x0176, r25
     7d2:	80 93 75 01 	sts	0x0175, r24
     7d6:	8a e3       	ldi	r24, 0x3A	; 58
     7d8:	91 e0       	ldi	r25, 0x01	; 1
     7da:	90 93 78 01 	sts	0x0178, r25
     7de:	80 93 77 01 	sts	0x0177, r24
     7e2:	86 e3       	ldi	r24, 0x36	; 54
     7e4:	91 e0       	ldi	r25, 0x01	; 1
     7e6:	90 93 8a 01 	sts	0x018A, r25
     7ea:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 0d 01 	sts	0x010D, r25
     7f6:	80 93 0c 01 	sts	0x010C, r24
                        break;
     7fa:	5b c2       	rjmp	.+1206   	; 0xcb2 <__stack+0x1b3>
                }
                break;
                
            case 2:
                switch (min_id) {
     7fc:	ed 81       	ldd	r30, Y+5	; 0x05
     7fe:	fe 81       	ldd	r31, Y+6	; 0x06
     800:	e1 30       	cpi	r30, 0x01	; 1
     802:	f1 05       	cpc	r31, r1
     804:	31 f1       	breq	.+76     	; 0x852 <localize+0x3d8>
     806:	1c f4       	brge	.+6      	; 0x80e <localize+0x394>
     808:	ef 2b       	or	r30, r31
     80a:	51 f0       	breq	.+20     	; 0x820 <localize+0x3a6>
     80c:	6d c0       	rjmp	.+218    	; 0x8e8 <localize+0x46e>
     80e:	8d 81       	ldd	r24, Y+5	; 0x05
     810:	9e 81       	ldd	r25, Y+6	; 0x06
     812:	84 30       	cpi	r24, 0x04	; 4
     814:	91 05       	cpc	r25, r1
     816:	b1 f1       	breq	.+108    	; 0x884 <localize+0x40a>
     818:	05 97       	sbiw	r24, 0x05	; 5
     81a:	09 f0       	breq	.+2      	; 0x81e <localize+0x3a4>
     81c:	65 c0       	rjmp	.+202    	; 0x8e8 <localize+0x46e>
     81e:	4b c0       	rjmp	.+150    	; 0x8b6 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     820:	82 e4       	ldi	r24, 0x42	; 66
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	90 93 90 01 	sts	0x0190, r25
     828:	80 93 8f 01 	sts	0x018F, r24
     82c:	8e e3       	ldi	r24, 0x3E	; 62
     82e:	91 e0       	ldi	r25, 0x01	; 1
     830:	90 93 76 01 	sts	0x0176, r25
     834:	80 93 75 01 	sts	0x0175, r24
     838:	86 e3       	ldi	r24, 0x36	; 54
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	90 93 78 01 	sts	0x0178, r25
     840:	80 93 77 01 	sts	0x0177, r24
     844:	8a e3       	ldi	r24, 0x3A	; 58
     846:	91 e0       	ldi	r25, 0x01	; 1
     848:	90 93 8a 01 	sts	0x018A, r25
     84c:	80 93 89 01 	sts	0x0189, r24
                        break;
     850:	2a c2       	rjmp	.+1108   	; 0xca6 <__stack+0x1a7>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     852:	82 e4       	ldi	r24, 0x42	; 66
     854:	91 e0       	ldi	r25, 0x01	; 1
     856:	90 93 90 01 	sts	0x0190, r25
     85a:	80 93 8f 01 	sts	0x018F, r24
     85e:	8a e3       	ldi	r24, 0x3A	; 58
     860:	91 e0       	ldi	r25, 0x01	; 1
     862:	90 93 76 01 	sts	0x0176, r25
     866:	80 93 75 01 	sts	0x0175, r24
     86a:	86 e3       	ldi	r24, 0x36	; 54
     86c:	91 e0       	ldi	r25, 0x01	; 1
     86e:	90 93 78 01 	sts	0x0178, r25
     872:	80 93 77 01 	sts	0x0177, r24
     876:	8e e3       	ldi	r24, 0x3E	; 62
     878:	91 e0       	ldi	r25, 0x01	; 1
     87a:	90 93 8a 01 	sts	0x018A, r25
     87e:	80 93 89 01 	sts	0x0189, r24
                        break;
     882:	11 c2       	rjmp	.+1058   	; 0xca6 <__stack+0x1a7>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     884:	86 e3       	ldi	r24, 0x36	; 54
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	90 93 90 01 	sts	0x0190, r25
     88c:	80 93 8f 01 	sts	0x018F, r24
     890:	8e e3       	ldi	r24, 0x3E	; 62
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	90 93 76 01 	sts	0x0176, r25
     898:	80 93 75 01 	sts	0x0175, r24
     89c:	82 e4       	ldi	r24, 0x42	; 66
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	90 93 78 01 	sts	0x0178, r25
     8a4:	80 93 77 01 	sts	0x0177, r24
     8a8:	8a e3       	ldi	r24, 0x3A	; 58
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	90 93 8a 01 	sts	0x018A, r25
     8b0:	80 93 89 01 	sts	0x0189, r24
                        break;
     8b4:	f8 c1       	rjmp	.+1008   	; 0xca6 <__stack+0x1a7>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     8b6:	86 e3       	ldi	r24, 0x36	; 54
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	90 93 90 01 	sts	0x0190, r25
     8be:	80 93 8f 01 	sts	0x018F, r24
     8c2:	8a e3       	ldi	r24, 0x3A	; 58
     8c4:	91 e0       	ldi	r25, 0x01	; 1
     8c6:	90 93 76 01 	sts	0x0176, r25
     8ca:	80 93 75 01 	sts	0x0175, r24
     8ce:	82 e4       	ldi	r24, 0x42	; 66
     8d0:	91 e0       	ldi	r25, 0x01	; 1
     8d2:	90 93 78 01 	sts	0x0178, r25
     8d6:	80 93 77 01 	sts	0x0177, r24
     8da:	8e e3       	ldi	r24, 0x3E	; 62
     8dc:	91 e0       	ldi	r25, 0x01	; 1
     8de:	90 93 8a 01 	sts	0x018A, r25
     8e2:	80 93 89 01 	sts	0x0189, r24
                        break;
     8e6:	df c1       	rjmp	.+958    	; 0xca6 <__stack+0x1a7>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     8e8:	82 e4       	ldi	r24, 0x42	; 66
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	90 93 90 01 	sts	0x0190, r25
     8f0:	80 93 8f 01 	sts	0x018F, r24
     8f4:	8e e3       	ldi	r24, 0x3E	; 62
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	90 93 76 01 	sts	0x0176, r25
     8fc:	80 93 75 01 	sts	0x0175, r24
     900:	8a e3       	ldi	r24, 0x3A	; 58
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	90 93 78 01 	sts	0x0178, r25
     908:	80 93 77 01 	sts	0x0177, r24
     90c:	86 e3       	ldi	r24, 0x36	; 54
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	90 93 8a 01 	sts	0x018A, r25
     914:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 0d 01 	sts	0x010D, r25
     920:	80 93 0c 01 	sts	0x010C, r24
                        break;
     924:	c6 c1       	rjmp	.+908    	; 0xcb2 <__stack+0x1b3>
                }
                break;
                
            case 3:
                switch (min_id) {
     926:	ed 81       	ldd	r30, Y+5	; 0x05
     928:	fe 81       	ldd	r31, Y+6	; 0x06
     92a:	e1 30       	cpi	r30, 0x01	; 1
     92c:	f1 05       	cpc	r31, r1
     92e:	31 f1       	breq	.+76     	; 0x97c <localize+0x502>
     930:	1c f4       	brge	.+6      	; 0x938 <localize+0x4be>
     932:	ef 2b       	or	r30, r31
     934:	51 f0       	breq	.+20     	; 0x94a <localize+0x4d0>
     936:	6d c0       	rjmp	.+218    	; 0xa12 <localize+0x598>
     938:	8d 81       	ldd	r24, Y+5	; 0x05
     93a:	9e 81       	ldd	r25, Y+6	; 0x06
     93c:	84 30       	cpi	r24, 0x04	; 4
     93e:	91 05       	cpc	r25, r1
     940:	b1 f1       	breq	.+108    	; 0x9ae <localize+0x534>
     942:	05 97       	sbiw	r24, 0x05	; 5
     944:	09 f0       	breq	.+2      	; 0x948 <localize+0x4ce>
     946:	65 c0       	rjmp	.+202    	; 0xa12 <localize+0x598>
     948:	4b c0       	rjmp	.+150    	; 0x9e0 <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     94a:	8e e3       	ldi	r24, 0x3E	; 62
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	90 93 90 01 	sts	0x0190, r25
     952:	80 93 8f 01 	sts	0x018F, r24
     956:	82 e4       	ldi	r24, 0x42	; 66
     958:	91 e0       	ldi	r25, 0x01	; 1
     95a:	90 93 76 01 	sts	0x0176, r25
     95e:	80 93 75 01 	sts	0x0175, r24
     962:	8a e3       	ldi	r24, 0x3A	; 58
     964:	91 e0       	ldi	r25, 0x01	; 1
     966:	90 93 78 01 	sts	0x0178, r25
     96a:	80 93 77 01 	sts	0x0177, r24
     96e:	86 e3       	ldi	r24, 0x36	; 54
     970:	91 e0       	ldi	r25, 0x01	; 1
     972:	90 93 8a 01 	sts	0x018A, r25
     976:	80 93 89 01 	sts	0x0189, r24
                        break;
     97a:	95 c1       	rjmp	.+810    	; 0xca6 <__stack+0x1a7>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     97c:	8a e3       	ldi	r24, 0x3A	; 58
     97e:	91 e0       	ldi	r25, 0x01	; 1
     980:	90 93 90 01 	sts	0x0190, r25
     984:	80 93 8f 01 	sts	0x018F, r24
     988:	82 e4       	ldi	r24, 0x42	; 66
     98a:	91 e0       	ldi	r25, 0x01	; 1
     98c:	90 93 76 01 	sts	0x0176, r25
     990:	80 93 75 01 	sts	0x0175, r24
     994:	8e e3       	ldi	r24, 0x3E	; 62
     996:	91 e0       	ldi	r25, 0x01	; 1
     998:	90 93 78 01 	sts	0x0178, r25
     99c:	80 93 77 01 	sts	0x0177, r24
     9a0:	86 e3       	ldi	r24, 0x36	; 54
     9a2:	91 e0       	ldi	r25, 0x01	; 1
     9a4:	90 93 8a 01 	sts	0x018A, r25
     9a8:	80 93 89 01 	sts	0x0189, r24
                        break;
     9ac:	7c c1       	rjmp	.+760    	; 0xca6 <__stack+0x1a7>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     9ae:	8e e3       	ldi	r24, 0x3E	; 62
     9b0:	91 e0       	ldi	r25, 0x01	; 1
     9b2:	90 93 90 01 	sts	0x0190, r25
     9b6:	80 93 8f 01 	sts	0x018F, r24
     9ba:	86 e3       	ldi	r24, 0x36	; 54
     9bc:	91 e0       	ldi	r25, 0x01	; 1
     9be:	90 93 76 01 	sts	0x0176, r25
     9c2:	80 93 75 01 	sts	0x0175, r24
     9c6:	8a e3       	ldi	r24, 0x3A	; 58
     9c8:	91 e0       	ldi	r25, 0x01	; 1
     9ca:	90 93 78 01 	sts	0x0178, r25
     9ce:	80 93 77 01 	sts	0x0177, r24
     9d2:	82 e4       	ldi	r24, 0x42	; 66
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	90 93 8a 01 	sts	0x018A, r25
     9da:	80 93 89 01 	sts	0x0189, r24
                        break;
     9de:	63 c1       	rjmp	.+710    	; 0xca6 <__stack+0x1a7>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     9e0:	8a e3       	ldi	r24, 0x3A	; 58
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	90 93 90 01 	sts	0x0190, r25
     9e8:	80 93 8f 01 	sts	0x018F, r24
     9ec:	86 e3       	ldi	r24, 0x36	; 54
     9ee:	91 e0       	ldi	r25, 0x01	; 1
     9f0:	90 93 76 01 	sts	0x0176, r25
     9f4:	80 93 75 01 	sts	0x0175, r24
     9f8:	8e e3       	ldi	r24, 0x3E	; 62
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	90 93 78 01 	sts	0x0178, r25
     a00:	80 93 77 01 	sts	0x0177, r24
     a04:	82 e4       	ldi	r24, 0x42	; 66
     a06:	91 e0       	ldi	r25, 0x01	; 1
     a08:	90 93 8a 01 	sts	0x018A, r25
     a0c:	80 93 89 01 	sts	0x0189, r24
                        break;
     a10:	4a c1       	rjmp	.+660    	; 0xca6 <__stack+0x1a7>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     a12:	82 e4       	ldi	r24, 0x42	; 66
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	90 93 90 01 	sts	0x0190, r25
     a1a:	80 93 8f 01 	sts	0x018F, r24
     a1e:	8e e3       	ldi	r24, 0x3E	; 62
     a20:	91 e0       	ldi	r25, 0x01	; 1
     a22:	90 93 76 01 	sts	0x0176, r25
     a26:	80 93 75 01 	sts	0x0175, r24
     a2a:	8a e3       	ldi	r24, 0x3A	; 58
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	90 93 78 01 	sts	0x0178, r25
     a32:	80 93 77 01 	sts	0x0177, r24
     a36:	86 e3       	ldi	r24, 0x36	; 54
     a38:	91 e0       	ldi	r25, 0x01	; 1
     a3a:	90 93 8a 01 	sts	0x018A, r25
     a3e:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     a42:	81 e0       	ldi	r24, 0x01	; 1
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	90 93 0d 01 	sts	0x010D, r25
     a4a:	80 93 0c 01 	sts	0x010C, r24
                        break;
     a4e:	31 c1       	rjmp	.+610    	; 0xcb2 <__stack+0x1b3>
                }
                break;
                
            case 4:
                switch (min_id) {
     a50:	ed 81       	ldd	r30, Y+5	; 0x05
     a52:	fe 81       	ldd	r31, Y+6	; 0x06
     a54:	e2 30       	cpi	r30, 0x02	; 2
     a56:	f1 05       	cpc	r31, r1
     a58:	31 f1       	breq	.+76     	; 0xaa6 <localize+0x62c>
     a5a:	1c f4       	brge	.+6      	; 0xa62 <localize+0x5e8>
     a5c:	ef 2b       	or	r30, r31
     a5e:	51 f0       	breq	.+20     	; 0xa74 <localize+0x5fa>
     a60:	6d c0       	rjmp	.+218    	; 0xb3c <__stack+0x3d>
     a62:	8d 81       	ldd	r24, Y+5	; 0x05
     a64:	9e 81       	ldd	r25, Y+6	; 0x06
     a66:	83 30       	cpi	r24, 0x03	; 3
     a68:	91 05       	cpc	r25, r1
     a6a:	b1 f1       	breq	.+108    	; 0xad8 <localize+0x65e>
     a6c:	05 97       	sbiw	r24, 0x05	; 5
     a6e:	09 f0       	breq	.+2      	; 0xa72 <localize+0x5f8>
     a70:	65 c0       	rjmp	.+202    	; 0xb3c <__stack+0x3d>
     a72:	4b c0       	rjmp	.+150    	; 0xb0a <__stack+0xb>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     a74:	8e e3       	ldi	r24, 0x3E	; 62
     a76:	91 e0       	ldi	r25, 0x01	; 1
     a78:	90 93 90 01 	sts	0x0190, r25
     a7c:	80 93 8f 01 	sts	0x018F, r24
     a80:	82 e4       	ldi	r24, 0x42	; 66
     a82:	91 e0       	ldi	r25, 0x01	; 1
     a84:	90 93 76 01 	sts	0x0176, r25
     a88:	80 93 75 01 	sts	0x0175, r24
     a8c:	86 e3       	ldi	r24, 0x36	; 54
     a8e:	91 e0       	ldi	r25, 0x01	; 1
     a90:	90 93 78 01 	sts	0x0178, r25
     a94:	80 93 77 01 	sts	0x0177, r24
     a98:	8a e3       	ldi	r24, 0x3A	; 58
     a9a:	91 e0       	ldi	r25, 0x01	; 1
     a9c:	90 93 8a 01 	sts	0x018A, r25
     aa0:	80 93 89 01 	sts	0x0189, r24
                        break;
     aa4:	00 c1       	rjmp	.+512    	; 0xca6 <__stack+0x1a7>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     aa6:	86 e3       	ldi	r24, 0x36	; 54
     aa8:	91 e0       	ldi	r25, 0x01	; 1
     aaa:	90 93 90 01 	sts	0x0190, r25
     aae:	80 93 8f 01 	sts	0x018F, r24
     ab2:	82 e4       	ldi	r24, 0x42	; 66
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	90 93 76 01 	sts	0x0176, r25
     aba:	80 93 75 01 	sts	0x0175, r24
     abe:	8e e3       	ldi	r24, 0x3E	; 62
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	90 93 78 01 	sts	0x0178, r25
     ac6:	80 93 77 01 	sts	0x0177, r24
     aca:	8a e3       	ldi	r24, 0x3A	; 58
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	90 93 8a 01 	sts	0x018A, r25
     ad2:	80 93 89 01 	sts	0x0189, r24
                        break;
     ad6:	e7 c0       	rjmp	.+462    	; 0xca6 <__stack+0x1a7>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     ad8:	8e e3       	ldi	r24, 0x3E	; 62
     ada:	91 e0       	ldi	r25, 0x01	; 1
     adc:	90 93 90 01 	sts	0x0190, r25
     ae0:	80 93 8f 01 	sts	0x018F, r24
     ae4:	8a e3       	ldi	r24, 0x3A	; 58
     ae6:	91 e0       	ldi	r25, 0x01	; 1
     ae8:	90 93 76 01 	sts	0x0176, r25
     aec:	80 93 75 01 	sts	0x0175, r24
     af0:	86 e3       	ldi	r24, 0x36	; 54
     af2:	91 e0       	ldi	r25, 0x01	; 1
     af4:	90 93 78 01 	sts	0x0178, r25
     af8:	80 93 77 01 	sts	0x0177, r24
     afc:	82 e4       	ldi	r24, 0x42	; 66
     afe:	91 e0       	ldi	r25, 0x01	; 1
     b00:	90 93 8a 01 	sts	0x018A, r25
     b04:	80 93 89 01 	sts	0x0189, r24
                        break;
     b08:	ce c0       	rjmp	.+412    	; 0xca6 <__stack+0x1a7>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     b0a:	86 e3       	ldi	r24, 0x36	; 54
     b0c:	91 e0       	ldi	r25, 0x01	; 1
     b0e:	90 93 90 01 	sts	0x0190, r25
     b12:	80 93 8f 01 	sts	0x018F, r24
     b16:	8a e3       	ldi	r24, 0x3A	; 58
     b18:	91 e0       	ldi	r25, 0x01	; 1
     b1a:	90 93 76 01 	sts	0x0176, r25
     b1e:	80 93 75 01 	sts	0x0175, r24
     b22:	8e e3       	ldi	r24, 0x3E	; 62
     b24:	91 e0       	ldi	r25, 0x01	; 1
     b26:	90 93 78 01 	sts	0x0178, r25
     b2a:	80 93 77 01 	sts	0x0177, r24
     b2e:	82 e4       	ldi	r24, 0x42	; 66
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	90 93 8a 01 	sts	0x018A, r25
     b36:	80 93 89 01 	sts	0x0189, r24
                        break;
     b3a:	b5 c0       	rjmp	.+362    	; 0xca6 <__stack+0x1a7>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     b3c:	82 e4       	ldi	r24, 0x42	; 66
     b3e:	91 e0       	ldi	r25, 0x01	; 1
     b40:	90 93 90 01 	sts	0x0190, r25
     b44:	80 93 8f 01 	sts	0x018F, r24
     b48:	8e e3       	ldi	r24, 0x3E	; 62
     b4a:	91 e0       	ldi	r25, 0x01	; 1
     b4c:	90 93 76 01 	sts	0x0176, r25
     b50:	80 93 75 01 	sts	0x0175, r24
     b54:	8a e3       	ldi	r24, 0x3A	; 58
     b56:	91 e0       	ldi	r25, 0x01	; 1
     b58:	90 93 78 01 	sts	0x0178, r25
     b5c:	80 93 77 01 	sts	0x0177, r24
     b60:	86 e3       	ldi	r24, 0x36	; 54
     b62:	91 e0       	ldi	r25, 0x01	; 1
     b64:	90 93 8a 01 	sts	0x018A, r25
     b68:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	90 93 0d 01 	sts	0x010D, r25
     b74:	80 93 0c 01 	sts	0x010C, r24
                        break;
     b78:	9c c0       	rjmp	.+312    	; 0xcb2 <__stack+0x1b3>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     b7a:	ed 81       	ldd	r30, Y+5	; 0x05
     b7c:	fe 81       	ldd	r31, Y+6	; 0x06
     b7e:	e2 30       	cpi	r30, 0x02	; 2
     b80:	f1 05       	cpc	r31, r1
     b82:	39 f1       	breq	.+78     	; 0xbd2 <__stack+0xd3>
     b84:	24 f4       	brge	.+8      	; 0xb8e <__stack+0x8f>
     b86:	31 97       	sbiw	r30, 0x01	; 1
     b88:	09 f0       	breq	.+2      	; 0xb8c <__stack+0x8d>
     b8a:	6e c0       	rjmp	.+220    	; 0xc68 <__stack+0x169>
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__stack+0xa1>
     b8e:	8d 81       	ldd	r24, Y+5	; 0x05
     b90:	9e 81       	ldd	r25, Y+6	; 0x06
     b92:	83 30       	cpi	r24, 0x03	; 3
     b94:	91 05       	cpc	r25, r1
     b96:	b1 f1       	breq	.+108    	; 0xc04 <__stack+0x105>
     b98:	04 97       	sbiw	r24, 0x04	; 4
     b9a:	09 f0       	breq	.+2      	; 0xb9e <__stack+0x9f>
     b9c:	65 c0       	rjmp	.+202    	; 0xc68 <__stack+0x169>
     b9e:	4b c0       	rjmp	.+150    	; 0xc36 <__stack+0x137>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     ba0:	8a e3       	ldi	r24, 0x3A	; 58
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	90 93 90 01 	sts	0x0190, r25
     ba8:	80 93 8f 01 	sts	0x018F, r24
     bac:	82 e4       	ldi	r24, 0x42	; 66
     bae:	91 e0       	ldi	r25, 0x01	; 1
     bb0:	90 93 76 01 	sts	0x0176, r25
     bb4:	80 93 75 01 	sts	0x0175, r24
     bb8:	86 e3       	ldi	r24, 0x36	; 54
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	90 93 78 01 	sts	0x0178, r25
     bc0:	80 93 77 01 	sts	0x0177, r24
     bc4:	8e e3       	ldi	r24, 0x3E	; 62
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	90 93 8a 01 	sts	0x018A, r25
     bcc:	80 93 89 01 	sts	0x0189, r24
                        break;
     bd0:	6a c0       	rjmp	.+212    	; 0xca6 <__stack+0x1a7>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     bd2:	86 e3       	ldi	r24, 0x36	; 54
     bd4:	91 e0       	ldi	r25, 0x01	; 1
     bd6:	90 93 90 01 	sts	0x0190, r25
     bda:	80 93 8f 01 	sts	0x018F, r24
     bde:	82 e4       	ldi	r24, 0x42	; 66
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	90 93 76 01 	sts	0x0176, r25
     be6:	80 93 75 01 	sts	0x0175, r24
     bea:	8a e3       	ldi	r24, 0x3A	; 58
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	90 93 78 01 	sts	0x0178, r25
     bf2:	80 93 77 01 	sts	0x0177, r24
     bf6:	8e e3       	ldi	r24, 0x3E	; 62
     bf8:	91 e0       	ldi	r25, 0x01	; 1
     bfa:	90 93 8a 01 	sts	0x018A, r25
     bfe:	80 93 89 01 	sts	0x0189, r24
                        break;
     c02:	51 c0       	rjmp	.+162    	; 0xca6 <__stack+0x1a7>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     c04:	8a e3       	ldi	r24, 0x3A	; 58
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	90 93 90 01 	sts	0x0190, r25
     c0c:	80 93 8f 01 	sts	0x018F, r24
     c10:	8e e3       	ldi	r24, 0x3E	; 62
     c12:	91 e0       	ldi	r25, 0x01	; 1
     c14:	90 93 76 01 	sts	0x0176, r25
     c18:	80 93 75 01 	sts	0x0175, r24
     c1c:	86 e3       	ldi	r24, 0x36	; 54
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	90 93 78 01 	sts	0x0178, r25
     c24:	80 93 77 01 	sts	0x0177, r24
     c28:	82 e4       	ldi	r24, 0x42	; 66
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	90 93 8a 01 	sts	0x018A, r25
     c30:	80 93 89 01 	sts	0x0189, r24
                        break;
     c34:	38 c0       	rjmp	.+112    	; 0xca6 <__stack+0x1a7>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     c36:	86 e3       	ldi	r24, 0x36	; 54
     c38:	91 e0       	ldi	r25, 0x01	; 1
     c3a:	90 93 90 01 	sts	0x0190, r25
     c3e:	80 93 8f 01 	sts	0x018F, r24
     c42:	8e e3       	ldi	r24, 0x3E	; 62
     c44:	91 e0       	ldi	r25, 0x01	; 1
     c46:	90 93 76 01 	sts	0x0176, r25
     c4a:	80 93 75 01 	sts	0x0175, r24
     c4e:	8a e3       	ldi	r24, 0x3A	; 58
     c50:	91 e0       	ldi	r25, 0x01	; 1
     c52:	90 93 78 01 	sts	0x0178, r25
     c56:	80 93 77 01 	sts	0x0177, r24
     c5a:	82 e4       	ldi	r24, 0x42	; 66
     c5c:	91 e0       	ldi	r25, 0x01	; 1
     c5e:	90 93 8a 01 	sts	0x018A, r25
     c62:	80 93 89 01 	sts	0x0189, r24
                        break;
     c66:	1f c0       	rjmp	.+62     	; 0xca6 <__stack+0x1a7>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     c68:	82 e4       	ldi	r24, 0x42	; 66
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	90 93 90 01 	sts	0x0190, r25
     c70:	80 93 8f 01 	sts	0x018F, r24
     c74:	8e e3       	ldi	r24, 0x3E	; 62
     c76:	91 e0       	ldi	r25, 0x01	; 1
     c78:	90 93 76 01 	sts	0x0176, r25
     c7c:	80 93 75 01 	sts	0x0175, r24
     c80:	8a e3       	ldi	r24, 0x3A	; 58
     c82:	91 e0       	ldi	r25, 0x01	; 1
     c84:	90 93 78 01 	sts	0x0178, r25
     c88:	80 93 77 01 	sts	0x0177, r24
     c8c:	86 e3       	ldi	r24, 0x36	; 54
     c8e:	91 e0       	ldi	r25, 0x01	; 1
     c90:	90 93 8a 01 	sts	0x018A, r25
     c94:	80 93 89 01 	sts	0x0189, r24
                        flag_no_good_stars = 1;
     c98:	81 e0       	ldi	r24, 0x01	; 1
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	90 93 0d 01 	sts	0x010D, r25
     ca0:	80 93 0c 01 	sts	0x010C, r24
                        break;
     ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <__stack+0x1b3>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     ca6:	80 91 0c 01 	lds	r24, 0x010C
     caa:	90 91 0d 01 	lds	r25, 0x010D
     cae:	89 2b       	or	r24, r25
     cb0:	d1 f0       	breq	.+52     	; 0xce6 <__stack+0x1e7>
        *orientation = orientation_prev;
     cb2:	80 91 1c 01 	lds	r24, 0x011C
     cb6:	90 91 1d 01 	lds	r25, 0x011D
     cba:	ef 8d       	ldd	r30, Y+31	; 0x1f
     cbc:	f8 a1       	ldd	r31, Y+32	; 0x20
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     cc2:	80 91 1a 01 	lds	r24, 0x011A
     cc6:	90 91 1b 01 	lds	r25, 0x011B
     cca:	ef 81       	ldd	r30, Y+7	; 0x07
     ccc:	f8 85       	ldd	r31, Y+8	; 0x08
     cce:	91 83       	std	Z+1, r25	; 0x01
     cd0:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     cd2:	80 91 18 01 	lds	r24, 0x0118
     cd6:	90 91 19 01 	lds	r25, 0x0119
     cda:	ed 8d       	ldd	r30, Y+29	; 0x1d
     cdc:	fe 8d       	ldd	r31, Y+30	; 0x1e
     cde:	91 83       	std	Z+1, r25	; 0x01
     ce0:	80 83       	st	Z, r24
        return 0;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	e9 c3       	rjmp	.+2002   	; 0x14b8 <__stack+0x9b9>
    }
    
    
    float scale = P_vertical/max_distance;
     ce6:	26 2d       	mov	r18, r6
     ce8:	37 2d       	mov	r19, r7
     cea:	48 2d       	mov	r20, r8
     cec:	59 2d       	mov	r21, r9
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	88 ee       	ldi	r24, 0xE8	; 232
     cf4:	91 e4       	ldi	r25, 0x41	; 65
     cf6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
     cfa:	26 2e       	mov	r2, r22
     cfc:	37 2e       	mov	r3, r23
     cfe:	48 2e       	mov	r4, r24
     d00:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     d02:	e0 90 8f 01 	lds	r14, 0x018F
     d06:	f0 90 90 01 	lds	r15, 0x0190
     d0a:	0f 2e       	mov	r0, r31
     d0c:	f1 e8       	ldi	r31, 0x81	; 129
     d0e:	8f 2e       	mov	r8, r31
     d10:	f1 e0       	ldi	r31, 0x01	; 1
     d12:	9f 2e       	mov	r9, r31
     d14:	f0 2d       	mov	r31, r0
     d16:	f7 01       	movw	r30, r14
     d18:	60 81       	ld	r22, Z
     d1a:	71 81       	ldd	r23, Z+1	; 0x01
     d1c:	88 27       	eor	r24, r24
     d1e:	77 fd       	sbrc	r23, 7
     d20:	80 95       	com	r24
     d22:	98 2f       	mov	r25, r24
     d24:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     d28:	22 2d       	mov	r18, r2
     d2a:	33 2d       	mov	r19, r3
     d2c:	44 2d       	mov	r20, r4
     d2e:	55 2d       	mov	r21, r5
     d30:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     d34:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     d38:	f4 01       	movw	r30, r8
     d3a:	71 83       	std	Z+1, r23	; 0x01
     d3c:	60 83       	st	Z, r22
     d3e:	0f 2e       	mov	r0, r31
     d40:	f3 e8       	ldi	r31, 0x83	; 131
     d42:	6f 2e       	mov	r6, r31
     d44:	f1 e0       	ldi	r31, 0x01	; 1
     d46:	7f 2e       	mov	r7, r31
     d48:	f0 2d       	mov	r31, r0
     d4a:	f7 01       	movw	r30, r14
     d4c:	62 81       	ldd	r22, Z+2	; 0x02
     d4e:	73 81       	ldd	r23, Z+3	; 0x03
     d50:	88 27       	eor	r24, r24
     d52:	77 fd       	sbrc	r23, 7
     d54:	80 95       	com	r24
     d56:	98 2f       	mov	r25, r24
     d58:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     d5c:	22 2d       	mov	r18, r2
     d5e:	33 2d       	mov	r19, r3
     d60:	44 2d       	mov	r20, r4
     d62:	55 2d       	mov	r21, r5
     d64:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     d68:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     d6c:	f3 01       	movw	r30, r6
     d6e:	71 83       	std	Z+1, r23	; 0x01
     d70:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     d72:	00 91 77 01 	lds	r16, 0x0177
     d76:	10 91 78 01 	lds	r17, 0x0178
     d7a:	0f 2e       	mov	r0, r31
     d7c:	f1 e7       	ldi	r31, 0x71	; 113
     d7e:	af 2e       	mov	r10, r31
     d80:	f1 e0       	ldi	r31, 0x01	; 1
     d82:	bf 2e       	mov	r11, r31
     d84:	f0 2d       	mov	r31, r0
     d86:	f8 01       	movw	r30, r16
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	88 27       	eor	r24, r24
     d8e:	77 fd       	sbrc	r23, 7
     d90:	80 95       	com	r24
     d92:	98 2f       	mov	r25, r24
     d94:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     d98:	22 2d       	mov	r18, r2
     d9a:	33 2d       	mov	r19, r3
     d9c:	44 2d       	mov	r20, r4
     d9e:	55 2d       	mov	r21, r5
     da0:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     da4:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     da8:	f5 01       	movw	r30, r10
     daa:	71 83       	std	Z+1, r23	; 0x01
     dac:	60 83       	st	Z, r22
     dae:	0f 2e       	mov	r0, r31
     db0:	f3 e7       	ldi	r31, 0x73	; 115
     db2:	cf 2e       	mov	r12, r31
     db4:	f1 e0       	ldi	r31, 0x01	; 1
     db6:	df 2e       	mov	r13, r31
     db8:	f0 2d       	mov	r31, r0
     dba:	f8 01       	movw	r30, r16
     dbc:	62 81       	ldd	r22, Z+2	; 0x02
     dbe:	73 81       	ldd	r23, Z+3	; 0x03
     dc0:	88 27       	eor	r24, r24
     dc2:	77 fd       	sbrc	r23, 7
     dc4:	80 95       	com	r24
     dc6:	98 2f       	mov	r25, r24
     dc8:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     dcc:	22 2d       	mov	r18, r2
     dce:	33 2d       	mov	r19, r3
     dd0:	44 2d       	mov	r20, r4
     dd2:	55 2d       	mov	r21, r5
     dd4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     dd8:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     ddc:	f6 01       	movw	r30, r12
     dde:	71 83       	std	Z+1, r23	; 0x01
     de0:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     de2:	f7 01       	movw	r30, r14
     de4:	60 81       	ld	r22, Z
     de6:	71 81       	ldd	r23, Z+1	; 0x01
     de8:	f8 01       	movw	r30, r16
     dea:	80 81       	ld	r24, Z
     dec:	91 81       	ldd	r25, Z+1	; 0x01
     dee:	68 0f       	add	r22, r24
     df0:	79 1f       	adc	r23, r25
     df2:	88 27       	eor	r24, r24
     df4:	77 fd       	sbrc	r23, 7
     df6:	80 95       	com	r24
     df8:	98 2f       	mov	r25, r24
     dfa:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     dfe:	20 e0       	ldi	r18, 0x00	; 0
     e00:	30 e0       	ldi	r19, 0x00	; 0
     e02:	40 e0       	ldi	r20, 0x00	; 0
     e04:	5f e3       	ldi	r21, 0x3F	; 63
     e06:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     e0a:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     e0e:	e9 a1       	ldd	r30, Y+33	; 0x21
     e10:	fa a1       	ldd	r31, Y+34	; 0x22
     e12:	71 83       	std	Z+1, r23	; 0x01
     e14:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     e16:	a0 91 8f 01 	lds	r26, 0x018F
     e1a:	b0 91 90 01 	lds	r27, 0x0190
     e1e:	e0 91 77 01 	lds	r30, 0x0177
     e22:	f0 91 78 01 	lds	r31, 0x0178
     e26:	12 96       	adiw	r26, 0x02	; 2
     e28:	6d 91       	ld	r22, X+
     e2a:	7c 91       	ld	r23, X
     e2c:	13 97       	sbiw	r26, 0x03	; 3
     e2e:	82 81       	ldd	r24, Z+2	; 0x02
     e30:	93 81       	ldd	r25, Z+3	; 0x03
     e32:	68 0f       	add	r22, r24
     e34:	79 1f       	adc	r23, r25
     e36:	88 27       	eor	r24, r24
     e38:	77 fd       	sbrc	r23, 7
     e3a:	80 95       	com	r24
     e3c:	98 2f       	mov	r25, r24
     e3e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     e42:	20 e0       	ldi	r18, 0x00	; 0
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	5f e3       	ldi	r21, 0x3F	; 63
     e4a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     e4e:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     e52:	eb a1       	ldd	r30, Y+35	; 0x23
     e54:	fc a1       	ldd	r31, Y+36	; 0x24
     e56:	71 83       	std	Z+1, r23	; 0x01
     e58:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     e5a:	f4 01       	movw	r30, r8
     e5c:	60 81       	ld	r22, Z
     e5e:	71 81       	ldd	r23, Z+1	; 0x01
     e60:	f5 01       	movw	r30, r10
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	68 0f       	add	r22, r24
     e68:	79 1f       	adc	r23, r25
     e6a:	88 27       	eor	r24, r24
     e6c:	77 fd       	sbrc	r23, 7
     e6e:	80 95       	com	r24
     e70:	98 2f       	mov	r25, r24
     e72:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e0       	ldi	r20, 0x00	; 0
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     e82:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     e86:	1b 01       	movw	r2, r22
     e88:	70 93 96 01 	sts	0x0196, r23
     e8c:	60 93 95 01 	sts	0x0195, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     e90:	f3 01       	movw	r30, r6
     e92:	60 81       	ld	r22, Z
     e94:	71 81       	ldd	r23, Z+1	; 0x01
     e96:	f6 01       	movw	r30, r12
     e98:	80 81       	ld	r24, Z
     e9a:	91 81       	ldd	r25, Z+1	; 0x01
     e9c:	68 0f       	add	r22, r24
     e9e:	79 1f       	adc	r23, r25
     ea0:	88 27       	eor	r24, r24
     ea2:	77 fd       	sbrc	r23, 7
     ea4:	80 95       	com	r24
     ea6:	98 2f       	mov	r25, r24
     ea8:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 e0       	ldi	r20, 0x00	; 0
     eb2:	5f e3       	ldi	r21, 0x3F	; 63
     eb4:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
     eb8:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
     ebc:	8b 01       	movw	r16, r22
     ebe:	70 93 98 01 	sts	0x0198, r23
     ec2:	60 93 97 01 	sts	0x0197, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     ec6:	22 9c       	mul	r2, r2
     ec8:	b0 01       	movw	r22, r0
     eca:	23 9c       	mul	r2, r3
     ecc:	70 0d       	add	r23, r0
     ece:	70 0d       	add	r23, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	00 9f       	mul	r16, r16
     ed4:	c0 01       	movw	r24, r0
     ed6:	01 9f       	mul	r16, r17
     ed8:	90 0d       	add	r25, r0
     eda:	90 0d       	add	r25, r0
     edc:	11 24       	eor	r1, r1
     ede:	68 0f       	add	r22, r24
     ee0:	79 1f       	adc	r23, r25
     ee2:	88 27       	eor	r24, r24
     ee4:	77 fd       	sbrc	r23, 7
     ee6:	80 95       	com	r24
     ee8:	98 2f       	mov	r25, r24
     eea:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     eee:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
     ef2:	2b 01       	movw	r4, r22
     ef4:	3c 01       	movw	r6, r24
     ef6:	60 93 79 01 	sts	0x0179, r22
     efa:	70 93 7a 01 	sts	0x017A, r23
     efe:	80 93 7b 01 	sts	0x017B, r24
     f02:	90 93 7c 01 	sts	0x017C, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     f06:	80 91 77 01 	lds	r24, 0x0177
     f0a:	90 91 78 01 	lds	r25, 0x0178
     f0e:	9a 83       	std	Y+2, r25	; 0x02
     f10:	89 83       	std	Y+1, r24	; 0x01
     f12:	e0 91 8f 01 	lds	r30, 0x018F
     f16:	f0 91 90 01 	lds	r31, 0x0190
     f1a:	fe 83       	std	Y+6, r31	; 0x06
     f1c:	ed 83       	std	Y+5, r30	; 0x05
     f1e:	fc 01       	movw	r30, r24
     f20:	60 81       	ld	r22, Z
     f22:	71 81       	ldd	r23, Z+1	; 0x01
     f24:	ed 81       	ldd	r30, Y+5	; 0x05
     f26:	fe 81       	ldd	r31, Y+6	; 0x06
     f28:	80 81       	ld	r24, Z
     f2a:	91 81       	ldd	r25, Z+1	; 0x01
     f2c:	68 1b       	sub	r22, r24
     f2e:	79 0b       	sbc	r23, r25
     f30:	88 27       	eor	r24, r24
     f32:	77 fd       	sbrc	r23, 7
     f34:	80 95       	com	r24
     f36:	98 2f       	mov	r25, r24
     f38:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     f3c:	6b 01       	movw	r12, r22
     f3e:	7c 01       	movw	r14, r24
     f40:	e9 81       	ldd	r30, Y+1	; 0x01
     f42:	fa 81       	ldd	r31, Y+2	; 0x02
     f44:	62 81       	ldd	r22, Z+2	; 0x02
     f46:	73 81       	ldd	r23, Z+3	; 0x03
     f48:	ed 81       	ldd	r30, Y+5	; 0x05
     f4a:	fe 81       	ldd	r31, Y+6	; 0x06
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	68 1b       	sub	r22, r24
     f52:	79 0b       	sbc	r23, r25
     f54:	88 27       	eor	r24, r24
     f56:	77 fd       	sbrc	r23, 7
     f58:	80 95       	com	r24
     f5a:	98 2f       	mov	r25, r24
     f5c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     f60:	a7 01       	movw	r20, r14
     f62:	96 01       	movw	r18, r12
     f64:	0e 94 83 17 	call	0x2f06	; 0x2f06 <atan2>
     f68:	4b 01       	movw	r8, r22
     f6a:	5c 01       	movw	r10, r24
     f6c:	60 93 85 01 	sts	0x0185, r22
     f70:	70 93 86 01 	sts	0x0186, r23
     f74:	80 93 87 01 	sts	0x0187, r24
     f78:	90 93 88 01 	sts	0x0188, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     f7c:	ed 81       	ldd	r30, Y+5	; 0x05
     f7e:	fe 81       	ldd	r31, Y+6	; 0x06
     f80:	60 81       	ld	r22, Z
     f82:	71 81       	ldd	r23, Z+1	; 0x01
     f84:	e9 81       	ldd	r30, Y+1	; 0x01
     f86:	fa 81       	ldd	r31, Y+2	; 0x02
     f88:	80 81       	ld	r24, Z
     f8a:	91 81       	ldd	r25, Z+1	; 0x01
     f8c:	68 1b       	sub	r22, r24
     f8e:	79 0b       	sbc	r23, r25
     f90:	88 27       	eor	r24, r24
     f92:	77 fd       	sbrc	r23, 7
     f94:	80 95       	com	r24
     f96:	98 2f       	mov	r25, r24
     f98:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     f9c:	6b 01       	movw	r12, r22
     f9e:	7c 01       	movw	r14, r24
     fa0:	ed 81       	ldd	r30, Y+5	; 0x05
     fa2:	fe 81       	ldd	r31, Y+6	; 0x06
     fa4:	62 81       	ldd	r22, Z+2	; 0x02
     fa6:	73 81       	ldd	r23, Z+3	; 0x03
     fa8:	e9 81       	ldd	r30, Y+1	; 0x01
     faa:	fa 81       	ldd	r31, Y+2	; 0x02
     fac:	82 81       	ldd	r24, Z+2	; 0x02
     fae:	93 81       	ldd	r25, Z+3	; 0x03
     fb0:	68 1b       	sub	r22, r24
     fb2:	79 0b       	sbc	r23, r25
     fb4:	88 27       	eor	r24, r24
     fb6:	77 fd       	sbrc	r23, 7
     fb8:	80 95       	com	r24
     fba:	98 2f       	mov	r25, r24
     fbc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     fc0:	a7 01       	movw	r20, r14
     fc2:	96 01       	movw	r18, r12
     fc4:	0e 94 83 17 	call	0x2f06	; 0x2f06 <atan2>
     fc8:	6b 01       	movw	r12, r22
     fca:	7c 01       	movw	r14, r24
     fcc:	60 93 7d 01 	sts	0x017D, r22
     fd0:	70 93 7e 01 	sts	0x017E, r23
     fd4:	80 93 7f 01 	sts	0x017F, r24
     fd8:	90 93 80 01 	sts	0x0180, r25
    alpha = -atan2(S0[0],S0[1]);
     fdc:	b8 01       	movw	r22, r16
     fde:	88 27       	eor	r24, r24
     fe0:	77 fd       	sbrc	r23, 7
     fe2:	80 95       	com	r24
     fe4:	98 2f       	mov	r25, r24
     fe6:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
     fea:	69 83       	std	Y+1, r22	; 0x01
     fec:	7a 83       	std	Y+2, r23	; 0x02
     fee:	8b 83       	std	Y+3, r24	; 0x03
     ff0:	9c 83       	std	Y+4, r25	; 0x04
     ff2:	b1 01       	movw	r22, r2
     ff4:	88 27       	eor	r24, r24
     ff6:	77 fd       	sbrc	r23, 7
     ff8:	80 95       	com	r24
     ffa:	98 2f       	mov	r25, r24
     ffc:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1000:	29 81       	ldd	r18, Y+1	; 0x01
    1002:	3a 81       	ldd	r19, Y+2	; 0x02
    1004:	4b 81       	ldd	r20, Y+3	; 0x03
    1006:	5c 81       	ldd	r21, Y+4	; 0x04
    1008:	0e 94 83 17 	call	0x2f06	; 0x2f06 <atan2>
    100c:	9b 01       	movw	r18, r22
    100e:	ac 01       	movw	r20, r24
    1010:	dc 01       	movw	r26, r24
    1012:	cb 01       	movw	r24, r22
    1014:	b0 58       	subi	r27, 0x80	; 128
    1016:	80 93 99 01 	sts	0x0199, r24
    101a:	90 93 9a 01 	sts	0x019A, r25
    101e:	a0 93 9b 01 	sts	0x019B, r26
    1022:	b0 93 9c 01 	sts	0x019C, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
    1026:	77 fa       	bst	r7, 7
    1028:	70 94       	com	r7
    102a:	77 f8       	bld	r7, 7
    102c:	70 94       	com	r7
    102e:	c5 01       	movw	r24, r10
    1030:	b4 01       	movw	r22, r8
    1032:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1036:	86 2e       	mov	r8, r22
    1038:	97 2e       	mov	r9, r23
    103a:	a8 2e       	mov	r10, r24
    103c:	b9 2e       	mov	r11, r25
    103e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <cos>
    1042:	9b 01       	movw	r18, r22
    1044:	ac 01       	movw	r20, r24
    1046:	c3 01       	movw	r24, r6
    1048:	b2 01       	movw	r22, r4
    104a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	a9 01       	movw	r20, r18
    1054:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1058:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    105c:	8b 01       	movw	r16, r22
    105e:	70 93 15 01 	sts	0x0115, r23
    1062:	60 93 14 01 	sts	0x0114, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
    1066:	68 2d       	mov	r22, r8
    1068:	79 2d       	mov	r23, r9
    106a:	8a 2d       	mov	r24, r10
    106c:	9b 2d       	mov	r25, r11
    106e:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <sin>
    1072:	9b 01       	movw	r18, r22
    1074:	ac 01       	movw	r20, r24
    1076:	c3 01       	movw	r24, r6
    1078:	b2 01       	movw	r22, r4
    107a:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 ec       	ldi	r20, 0xC0	; 192
    1084:	50 e4       	ldi	r21, 0x40	; 64
    1086:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    108a:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    108e:	70 93 13 01 	sts	0x0113, r23
    1092:	60 93 12 01 	sts	0x0112, r22
    orientation_current = (theta2) * 180/M_PI;
    1096:	20 e0       	ldi	r18, 0x00	; 0
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	44 e3       	ldi	r20, 0x34	; 52
    109c:	53 e4       	ldi	r21, 0x43	; 67
    109e:	c7 01       	movw	r24, r14
    10a0:	b6 01       	movw	r22, r12
    10a2:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    10a6:	2b ed       	ldi	r18, 0xDB	; 219
    10a8:	3f e0       	ldi	r19, 0x0F	; 15
    10aa:	49 e4       	ldi	r20, 0x49	; 73
    10ac:	50 e4       	ldi	r21, 0x40	; 64
    10ae:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
    10b2:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    10b6:	70 93 17 01 	sts	0x0117, r23
    10ba:	60 93 16 01 	sts	0x0116, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
    10be:	c0 90 0e 01 	lds	r12, 0x010E
    10c2:	d0 90 0f 01 	lds	r13, 0x010F
    10c6:	e0 90 10 01 	lds	r14, 0x0110
    10ca:	f0 90 11 01 	lds	r15, 0x0111
    10ce:	60 91 1a 01 	lds	r22, 0x011A
    10d2:	70 91 1b 01 	lds	r23, 0x011B
    10d6:	88 27       	eor	r24, r24
    10d8:	77 fd       	sbrc	r23, 7
    10da:	80 95       	com	r24
    10dc:	98 2f       	mov	r25, r24
    10de:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    10e2:	a7 01       	movw	r20, r14
    10e4:	96 01       	movw	r18, r12
    10e6:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    10ea:	4b 01       	movw	r8, r22
    10ec:	5c 01       	movw	r10, r24
    10ee:	a7 01       	movw	r20, r14
    10f0:	96 01       	movw	r18, r12
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	70 e0       	ldi	r23, 0x00	; 0
    10f6:	80 e8       	ldi	r24, 0x80	; 128
    10f8:	9f e3       	ldi	r25, 0x3F	; 63
    10fa:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    10fe:	6b 01       	movw	r12, r22
    1100:	7c 01       	movw	r14, r24
    1102:	b8 01       	movw	r22, r16
    1104:	88 27       	eor	r24, r24
    1106:	77 fd       	sbrc	r23, 7
    1108:	80 95       	com	r24
    110a:	98 2f       	mov	r25, r24
    110c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1110:	9b 01       	movw	r18, r22
    1112:	ac 01       	movw	r20, r24
    1114:	c7 01       	movw	r24, r14
    1116:	b6 01       	movw	r22, r12
    1118:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    111c:	9b 01       	movw	r18, r22
    111e:	ac 01       	movw	r20, r24
    1120:	c5 01       	movw	r24, r10
    1122:	b4 01       	movw	r22, r8
    1124:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1128:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    112c:	ef 81       	ldd	r30, Y+7	; 0x07
    112e:	f8 85       	ldd	r31, Y+8	; 0x08
    1130:	71 83       	std	Z+1, r23	; 0x01
    1132:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
    1134:	c0 90 0e 01 	lds	r12, 0x010E
    1138:	d0 90 0f 01 	lds	r13, 0x010F
    113c:	e0 90 10 01 	lds	r14, 0x0110
    1140:	f0 90 11 01 	lds	r15, 0x0111
    1144:	60 91 18 01 	lds	r22, 0x0118
    1148:	70 91 19 01 	lds	r23, 0x0119
    114c:	88 27       	eor	r24, r24
    114e:	77 fd       	sbrc	r23, 7
    1150:	80 95       	com	r24
    1152:	98 2f       	mov	r25, r24
    1154:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1158:	a7 01       	movw	r20, r14
    115a:	96 01       	movw	r18, r12
    115c:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1160:	4b 01       	movw	r8, r22
    1162:	5c 01       	movw	r10, r24
    1164:	a7 01       	movw	r20, r14
    1166:	96 01       	movw	r18, r12
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	80 e8       	ldi	r24, 0x80	; 128
    116e:	9f e3       	ldi	r25, 0x3F	; 63
    1170:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	60 91 12 01 	lds	r22, 0x0112
    117c:	70 91 13 01 	lds	r23, 0x0113
    1180:	88 27       	eor	r24, r24
    1182:	77 fd       	sbrc	r23, 7
    1184:	80 95       	com	r24
    1186:	98 2f       	mov	r25, r24
    1188:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    118c:	9b 01       	movw	r18, r22
    118e:	ac 01       	movw	r20, r24
    1190:	c7 01       	movw	r24, r14
    1192:	b6 01       	movw	r22, r12
    1194:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	c5 01       	movw	r24, r10
    119e:	b4 01       	movw	r22, r8
    11a0:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    11a4:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    11a8:	ed 8d       	ldd	r30, Y+29	; 0x1d
    11aa:	fe 8d       	ldd	r31, Y+30	; 0x1e
    11ac:	71 83       	std	Z+1, r23	; 0x01
    11ae:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
    11b0:	c0 90 0e 01 	lds	r12, 0x010E
    11b4:	d0 90 0f 01 	lds	r13, 0x010F
    11b8:	e0 90 10 01 	lds	r14, 0x0110
    11bc:	f0 90 11 01 	lds	r15, 0x0111
    11c0:	60 91 1c 01 	lds	r22, 0x011C
    11c4:	70 91 1d 01 	lds	r23, 0x011D
    11c8:	88 27       	eor	r24, r24
    11ca:	77 fd       	sbrc	r23, 7
    11cc:	80 95       	com	r24
    11ce:	98 2f       	mov	r25, r24
    11d0:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    11d4:	a7 01       	movw	r20, r14
    11d6:	96 01       	movw	r18, r12
    11d8:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    11dc:	4b 01       	movw	r8, r22
    11de:	5c 01       	movw	r10, r24
    11e0:	a7 01       	movw	r20, r14
    11e2:	96 01       	movw	r18, r12
    11e4:	60 e0       	ldi	r22, 0x00	; 0
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	80 e8       	ldi	r24, 0x80	; 128
    11ea:	9f e3       	ldi	r25, 0x3F	; 63
    11ec:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    11f0:	6b 01       	movw	r12, r22
    11f2:	7c 01       	movw	r14, r24
    11f4:	60 91 16 01 	lds	r22, 0x0116
    11f8:	70 91 17 01 	lds	r23, 0x0117
    11fc:	88 27       	eor	r24, r24
    11fe:	77 fd       	sbrc	r23, 7
    1200:	80 95       	com	r24
    1202:	98 2f       	mov	r25, r24
    1204:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1208:	9b 01       	movw	r18, r22
    120a:	ac 01       	movw	r20, r24
    120c:	c7 01       	movw	r24, r14
    120e:	b6 01       	movw	r22, r12
    1210:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1214:	9b 01       	movw	r18, r22
    1216:	ac 01       	movw	r20, r24
    1218:	c5 01       	movw	r24, r10
    121a:	b4 01       	movw	r22, r8
    121c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1220:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    1224:	ef 8d       	ldd	r30, Y+31	; 0x1f
    1226:	f8 a1       	ldd	r31, Y+32	; 0x20
    1228:	71 83       	std	Z+1, r23	; 0x01
    122a:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
    122c:	ef 81       	ldd	r30, Y+7	; 0x07
    122e:	f8 85       	ldd	r31, Y+8	; 0x08
    1230:	80 81       	ld	r24, Z
    1232:	91 81       	ldd	r25, Z+1	; 0x01
    1234:	90 93 1b 01 	sts	0x011B, r25
    1238:	80 93 1a 01 	sts	0x011A, r24
    y_robot_prev     = *y_robot;
    123c:	ed 8d       	ldd	r30, Y+29	; 0x1d
    123e:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1240:	80 81       	ld	r24, Z
    1242:	91 81       	ldd	r25, Z+1	; 0x01
    1244:	90 93 19 01 	sts	0x0119, r25
    1248:	80 93 18 01 	sts	0x0118, r24
    orientation_prev = *orientation;
    124c:	ef 8d       	ldd	r30, Y+31	; 0x1f
    124e:	f8 a1       	ldd	r31, Y+32	; 0x20
    1250:	80 81       	ld	r24, Z
    1252:	91 81       	ldd	r25, Z+1	; 0x01
    1254:	90 93 1d 01 	sts	0x011D, r25
    1258:	80 93 1c 01 	sts	0x011C, r24
    
    return 1;
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	2c c1       	rjmp	.+600    	; 0x14b8 <__stack+0x9b9>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
    1260:	e0 91 02 01 	lds	r30, 0x0102
    1264:	f0 91 03 01 	lds	r31, 0x0103
    1268:	4c 01       	movw	r8, r24
    126a:	8e 1a       	sub	r8, r30
    126c:	9f 0a       	sbc	r9, r31
    126e:	90 92 43 01 	sts	0x0143, r9
    1272:	80 92 42 01 	sts	0x0142, r8
    1276:	80 91 00 01 	lds	r24, 0x0100
    127a:	90 91 01 01 	lds	r25, 0x0101
    127e:	08 1b       	sub	r16, r24
    1280:	19 0b       	sbc	r17, r25
    1282:	10 93 45 01 	sts	0x0145, r17
    1286:	00 93 44 01 	sts	0x0144, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
    128a:	3b 01       	movw	r6, r22
    128c:	6e 1a       	sub	r6, r30
    128e:	7f 0a       	sbc	r7, r31
    1290:	70 92 3f 01 	sts	0x013F, r7
    1294:	60 92 3e 01 	sts	0x013E, r6
    1298:	e8 1a       	sub	r14, r24
    129a:	f9 0a       	sbc	r15, r25
    129c:	f0 92 41 01 	sts	0x0141, r15
    12a0:	e0 92 40 01 	sts	0x0140, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
    12a4:	2a 01       	movw	r4, r20
    12a6:	4e 1a       	sub	r4, r30
    12a8:	5f 0a       	sbc	r5, r31
    12aa:	50 92 3b 01 	sts	0x013B, r5
    12ae:	40 92 3a 01 	sts	0x013A, r4
    12b2:	16 01       	movw	r2, r12
    12b4:	28 1a       	sub	r2, r24
    12b6:	39 0a       	sbc	r3, r25
    12b8:	30 92 3d 01 	sts	0x013D, r3
    12bc:	20 92 3c 01 	sts	0x013C, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
    12c0:	69 01       	movw	r12, r18
    12c2:	ce 1a       	sub	r12, r30
    12c4:	df 0a       	sbc	r13, r31
    12c6:	d0 92 37 01 	sts	0x0137, r13
    12ca:	c0 92 36 01 	sts	0x0136, r12
    12ce:	a8 1a       	sub	r10, r24
    12d0:	b9 0a       	sbc	r11, r25
    12d2:	b0 92 39 01 	sts	0x0139, r11
    12d6:	a0 92 38 01 	sts	0x0138, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
    12da:	93 01       	movw	r18, r6
    12dc:	28 19       	sub	r18, r8
    12de:	39 09       	sbc	r19, r9
    12e0:	c7 01       	movw	r24, r14
    12e2:	80 1b       	sub	r24, r16
    12e4:	91 0b       	sbc	r25, r17
    12e6:	22 9f       	mul	r18, r18
    12e8:	b0 01       	movw	r22, r0
    12ea:	23 9f       	mul	r18, r19
    12ec:	70 0d       	add	r23, r0
    12ee:	70 0d       	add	r23, r0
    12f0:	11 24       	eor	r1, r1
    12f2:	88 9f       	mul	r24, r24
    12f4:	90 01       	movw	r18, r0
    12f6:	89 9f       	mul	r24, r25
    12f8:	30 0d       	add	r19, r0
    12fa:	30 0d       	add	r19, r0
    12fc:	11 24       	eor	r1, r1
    12fe:	62 0f       	add	r22, r18
    1300:	73 1f       	adc	r23, r19
    1302:	88 27       	eor	r24, r24
    1304:	77 fd       	sbrc	r23, 7
    1306:	80 95       	com	r24
    1308:	98 2f       	mov	r25, r24
    130a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    130e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
    1312:	60 93 1e 01 	sts	0x011E, r22
    1316:	70 93 1f 01 	sts	0x011F, r23
    131a:	80 93 20 01 	sts	0x0120, r24
    131e:	90 93 21 01 	sts	0x0121, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
    1322:	92 01       	movw	r18, r4
    1324:	28 19       	sub	r18, r8
    1326:	39 09       	sbc	r19, r9
    1328:	c1 01       	movw	r24, r2
    132a:	80 1b       	sub	r24, r16
    132c:	91 0b       	sbc	r25, r17
    132e:	22 9f       	mul	r18, r18
    1330:	b0 01       	movw	r22, r0
    1332:	23 9f       	mul	r18, r19
    1334:	70 0d       	add	r23, r0
    1336:	70 0d       	add	r23, r0
    1338:	11 24       	eor	r1, r1
    133a:	88 9f       	mul	r24, r24
    133c:	90 01       	movw	r18, r0
    133e:	89 9f       	mul	r24, r25
    1340:	30 0d       	add	r19, r0
    1342:	30 0d       	add	r19, r0
    1344:	11 24       	eor	r1, r1
    1346:	62 0f       	add	r22, r18
    1348:	73 1f       	adc	r23, r19
    134a:	88 27       	eor	r24, r24
    134c:	77 fd       	sbrc	r23, 7
    134e:	80 95       	com	r24
    1350:	98 2f       	mov	r25, r24
    1352:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1356:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
    135a:	60 93 22 01 	sts	0x0122, r22
    135e:	70 93 23 01 	sts	0x0123, r23
    1362:	80 93 24 01 	sts	0x0124, r24
    1366:	90 93 25 01 	sts	0x0125, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    136a:	96 01       	movw	r18, r12
    136c:	28 19       	sub	r18, r8
    136e:	39 09       	sbc	r19, r9
    1370:	c5 01       	movw	r24, r10
    1372:	80 1b       	sub	r24, r16
    1374:	91 0b       	sbc	r25, r17
    1376:	22 9f       	mul	r18, r18
    1378:	b0 01       	movw	r22, r0
    137a:	23 9f       	mul	r18, r19
    137c:	70 0d       	add	r23, r0
    137e:	70 0d       	add	r23, r0
    1380:	11 24       	eor	r1, r1
    1382:	88 9f       	mul	r24, r24
    1384:	90 01       	movw	r18, r0
    1386:	89 9f       	mul	r24, r25
    1388:	30 0d       	add	r19, r0
    138a:	30 0d       	add	r19, r0
    138c:	11 24       	eor	r1, r1
    138e:	62 0f       	add	r22, r18
    1390:	73 1f       	adc	r23, r19
    1392:	88 27       	eor	r24, r24
    1394:	77 fd       	sbrc	r23, 7
    1396:	80 95       	com	r24
    1398:	98 2f       	mov	r25, r24
    139a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    139e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
    13a2:	60 93 26 01 	sts	0x0126, r22
    13a6:	70 93 27 01 	sts	0x0127, r23
    13aa:	80 93 28 01 	sts	0x0128, r24
    13ae:	90 93 29 01 	sts	0x0129, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    13b2:	92 01       	movw	r18, r4
    13b4:	26 19       	sub	r18, r6
    13b6:	37 09       	sbc	r19, r7
    13b8:	c1 01       	movw	r24, r2
    13ba:	8e 19       	sub	r24, r14
    13bc:	9f 09       	sbc	r25, r15
    13be:	22 9f       	mul	r18, r18
    13c0:	b0 01       	movw	r22, r0
    13c2:	23 9f       	mul	r18, r19
    13c4:	70 0d       	add	r23, r0
    13c6:	70 0d       	add	r23, r0
    13c8:	11 24       	eor	r1, r1
    13ca:	88 9f       	mul	r24, r24
    13cc:	90 01       	movw	r18, r0
    13ce:	89 9f       	mul	r24, r25
    13d0:	30 0d       	add	r19, r0
    13d2:	30 0d       	add	r19, r0
    13d4:	11 24       	eor	r1, r1
    13d6:	62 0f       	add	r22, r18
    13d8:	73 1f       	adc	r23, r19
    13da:	88 27       	eor	r24, r24
    13dc:	77 fd       	sbrc	r23, 7
    13de:	80 95       	com	r24
    13e0:	98 2f       	mov	r25, r24
    13e2:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    13e6:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
    13ea:	60 93 2a 01 	sts	0x012A, r22
    13ee:	70 93 2b 01 	sts	0x012B, r23
    13f2:	80 93 2c 01 	sts	0x012C, r24
    13f6:	90 93 2d 01 	sts	0x012D, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    13fa:	96 01       	movw	r18, r12
    13fc:	26 19       	sub	r18, r6
    13fe:	37 09       	sbc	r19, r7
    1400:	c5 01       	movw	r24, r10
    1402:	8e 19       	sub	r24, r14
    1404:	9f 09       	sbc	r25, r15
    1406:	22 9f       	mul	r18, r18
    1408:	b0 01       	movw	r22, r0
    140a:	23 9f       	mul	r18, r19
    140c:	70 0d       	add	r23, r0
    140e:	70 0d       	add	r23, r0
    1410:	11 24       	eor	r1, r1
    1412:	88 9f       	mul	r24, r24
    1414:	90 01       	movw	r18, r0
    1416:	89 9f       	mul	r24, r25
    1418:	30 0d       	add	r19, r0
    141a:	30 0d       	add	r19, r0
    141c:	11 24       	eor	r1, r1
    141e:	62 0f       	add	r22, r18
    1420:	73 1f       	adc	r23, r19
    1422:	88 27       	eor	r24, r24
    1424:	77 fd       	sbrc	r23, 7
    1426:	80 95       	com	r24
    1428:	98 2f       	mov	r25, r24
    142a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    142e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
    1432:	60 93 2e 01 	sts	0x012E, r22
    1436:	70 93 2f 01 	sts	0x012F, r23
    143a:	80 93 30 01 	sts	0x0130, r24
    143e:	90 93 31 01 	sts	0x0131, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    1442:	c4 18       	sub	r12, r4
    1444:	d5 08       	sbc	r13, r5
    1446:	a2 18       	sub	r10, r2
    1448:	b3 08       	sbc	r11, r3
    144a:	cc 9c       	mul	r12, r12
    144c:	b0 01       	movw	r22, r0
    144e:	cd 9c       	mul	r12, r13
    1450:	70 0d       	add	r23, r0
    1452:	70 0d       	add	r23, r0
    1454:	11 24       	eor	r1, r1
    1456:	aa 9c       	mul	r10, r10
    1458:	c0 01       	movw	r24, r0
    145a:	ab 9c       	mul	r10, r11
    145c:	90 0d       	add	r25, r0
    145e:	90 0d       	add	r25, r0
    1460:	11 24       	eor	r1, r1
    1462:	68 0f       	add	r22, r24
    1464:	79 1f       	adc	r23, r25
    1466:	88 27       	eor	r24, r24
    1468:	77 fd       	sbrc	r23, 7
    146a:	80 95       	com	r24
    146c:	98 2f       	mov	r25, r24
    146e:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1472:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
    1476:	60 93 32 01 	sts	0x0132, r22
    147a:	70 93 33 01 	sts	0x0133, r23
    147e:	80 93 34 01 	sts	0x0134, r24
    1482:	90 93 35 01 	sts	0x0135, r25
    1486:	0e e1       	ldi	r16, 0x1E	; 30
    1488:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    148a:	e1 2c       	mov	r14, r1
    148c:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    148e:	1e 82       	std	Y+6, r1	; 0x06
    1490:	1d 82       	std	Y+5, r1	; 0x05
    1492:	1a 82       	std	Y+2, r1	; 0x02
    1494:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    1496:	21 2c       	mov	r2, r1
    1498:	68 94       	set
    149a:	33 24       	eor	r3, r3
    149c:	36 f8       	bld	r3, 6
    149e:	0f 2e       	mov	r0, r31
    14a0:	fc e1       	ldi	r31, 0x1C	; 28
    14a2:	4f 2e       	mov	r4, r31
    14a4:	f0 2d       	mov	r31, r0
    14a6:	0f 2e       	mov	r0, r31
    14a8:	f6 e4       	ldi	r31, 0x46	; 70
    14aa:	5f 2e       	mov	r5, r31
    14ac:	f0 2d       	mov	r31, r0
    14ae:	61 2c       	mov	r6, r1
    14b0:	71 2c       	mov	r7, r1
    14b2:	81 2c       	mov	r8, r1
    14b4:	91 2c       	mov	r9, r1
    14b6:	2c c8       	rjmp	.-4008   	; 0x510 <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    14b8:	28 96       	adiw	r28, 0x08	; 8
    14ba:	0f b6       	in	r0, 0x3f	; 63
    14bc:	f8 94       	cli
    14be:	de bf       	out	0x3e, r29	; 62
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	cd bf       	out	0x3d, r28	; 61
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	7f 90       	pop	r7
    14de:	6f 90       	pop	r6
    14e0:	5f 90       	pop	r5
    14e2:	4f 90       	pop	r4
    14e4:	3f 90       	pop	r3
    14e6:	2f 90       	pop	r2
    14e8:	08 95       	ret

000014ea <calculate_diff_theta>:


// --------------------------------------------------------------
// CALCULATE ERROR IN ORIENTATION and OPTIMAL TURNING
// --------------------------------------------------------------
void calculate_diff_theta(float theta_des, float* err_theta, int* dir_to_turn){
    14ea:	2f 92       	push	r2
    14ec:	3f 92       	push	r3
    14ee:	4f 92       	push	r4
    14f0:	5f 92       	push	r5
    14f2:	6f 92       	push	r6
    14f4:	7f 92       	push	r7
    14f6:	8f 92       	push	r8
    14f8:	9f 92       	push	r9
    14fa:	af 92       	push	r10
    14fc:	bf 92       	push	r11
    14fe:	cf 92       	push	r12
    1500:	df 92       	push	r13
    1502:	ef 92       	push	r14
    1504:	ff 92       	push	r15
    1506:	0f 93       	push	r16
    1508:	1f 93       	push	r17
    150a:	cf 93       	push	r28
    150c:	df 93       	push	r29
    150e:	6b 01       	movw	r12, r22
    1510:	7c 01       	movw	r14, r24
    1512:	ea 01       	movw	r28, r20
    1514:	89 01       	movw	r16, r18
    
    float angle_dir_aux = theta_des-180;
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	30 e0       	ldi	r19, 0x00	; 0
    151a:	44 e3       	ldi	r20, 0x34	; 52
    151c:	53 e4       	ldi	r21, 0x43	; 67
    151e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1522:	96 2e       	mov	r9, r22
    1524:	87 2e       	mov	r8, r23
    1526:	38 2e       	mov	r3, r24
    1528:	29 2e       	mov	r2, r25
    float add_360 = 0;
    if (angle_dir_aux < -180)
    152a:	20 e0       	ldi	r18, 0x00	; 0
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	44 e3       	ldi	r20, 0x34	; 52
    1530:	53 ec       	ldi	r21, 0xC3	; 195
    1532:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    1536:	88 23       	and	r24, r24
    1538:	0c f0       	brlt	.+2      	; 0x153c <calculate_diff_theta+0x52>
    153a:	c8 c0       	rjmp	.+400    	; 0x16cc <calculate_diff_theta+0x1e2>
    {
        angle_dir_aux += 360;
    153c:	20 e0       	ldi	r18, 0x00	; 0
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	44 eb       	ldi	r20, 0xB4	; 180
    1542:	53 e4       	ldi	r21, 0x43	; 67
    1544:	69 2d       	mov	r22, r9
    1546:	78 2d       	mov	r23, r8
    1548:	83 2d       	mov	r24, r3
    154a:	92 2d       	mov	r25, r2
    154c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1550:	26 2e       	mov	r2, r22
    1552:	37 2e       	mov	r3, r23
    1554:	88 2e       	mov	r8, r24
    1556:	99 2e       	mov	r9, r25
            *err_theta = (theta_robot+360) - theta_des;
        else
            *err_theta = (theta_robot) - theta_des;
        *dir_to_turn = 1;
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1558:	a0 90 56 01 	lds	r10, 0x0156
    155c:	b0 90 57 01 	lds	r11, 0x0157
    1560:	b5 01       	movw	r22, r10
    1562:	88 27       	eor	r24, r24
    1564:	77 fd       	sbrc	r23, 7
    1566:	80 95       	com	r24
    1568:	98 2f       	mov	r25, r24
    156a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    156e:	2b 01       	movw	r4, r22
    1570:	3c 01       	movw	r6, r24
    1572:	9b 01       	movw	r18, r22
    1574:	ac 01       	movw	r20, r24
    1576:	c7 01       	movw	r24, r14
    1578:	b6 01       	movw	r22, r12
    157a:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
    157e:	88 23       	and	r24, r24
    1580:	0c f0       	brlt	.+2      	; 0x1584 <calculate_diff_theta+0x9a>
    1582:	4e c0       	rjmp	.+156    	; 0x1620 <calculate_diff_theta+0x136>
    1584:	52 c0       	rjmp	.+164    	; 0x162a <calculate_diff_theta+0x140>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
    1586:	a3 01       	movw	r20, r6
    1588:	92 01       	movw	r18, r4
    158a:	c7 01       	movw	r24, r14
    158c:	b6 01       	movw	r22, r12
    158e:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
    1592:	88 23       	and	r24, r24
    1594:	74 f0       	brlt	.+28     	; 0x15b2 <calculate_diff_theta+0xc8>
    {
        *err_theta = theta_des - theta_robot;
    1596:	a3 01       	movw	r20, r6
    1598:	92 01       	movw	r18, r4
    159a:	c7 01       	movw	r24, r14
    159c:	b6 01       	movw	r22, r12
    159e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    15a2:	68 83       	st	Y, r22
    15a4:	79 83       	std	Y+1, r23	; 0x01
    15a6:	8a 83       	std	Y+2, r24	; 0x02
    15a8:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
    15aa:	f8 01       	movw	r30, r16
    15ac:	11 82       	std	Z+1, r1	; 0x01
    15ae:	10 82       	st	Z, r1
    15b0:	a6 c0       	rjmp	.+332    	; 0x16fe <calculate_diff_theta+0x214>
    }
    else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > theta_des))
    15b2:	a3 01       	movw	r20, r6
    15b4:	92 01       	movw	r18, r4
    15b6:	69 2d       	mov	r22, r9
    15b8:	78 2d       	mov	r23, r8
    15ba:	83 2d       	mov	r24, r3
    15bc:	92 2d       	mov	r25, r2
    15be:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
    15c2:	18 16       	cp	r1, r24
    15c4:	4c f0       	brlt	.+18     	; 0x15d8 <calculate_diff_theta+0xee>
    15c6:	a3 01       	movw	r20, r6
    15c8:	92 01       	movw	r18, r4
    15ca:	c7 01       	movw	r24, r14
    15cc:	b6 01       	movw	r22, r12
    15ce:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    15d2:	88 23       	and	r24, r24
    15d4:	0c f0       	brlt	.+2      	; 0x15d8 <calculate_diff_theta+0xee>
    15d6:	93 c0       	rjmp	.+294    	; 0x16fe <calculate_diff_theta+0x214>
    {
        if (theta_robot < 0)
    15d8:	bb 20       	and	r11, r11
    15da:	94 f4       	brge	.+36     	; 0x1600 <calculate_diff_theta+0x116>
            *err_theta = (theta_robot+360) - theta_des;
    15dc:	b5 01       	movw	r22, r10
    15de:	68 59       	subi	r22, 0x98	; 152
    15e0:	7e 4f       	sbci	r23, 0xFE	; 254
    15e2:	88 27       	eor	r24, r24
    15e4:	77 fd       	sbrc	r23, 7
    15e6:	80 95       	com	r24
    15e8:	98 2f       	mov	r25, r24
    15ea:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    15ee:	a7 01       	movw	r20, r14
    15f0:	96 01       	movw	r18, r12
    15f2:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    15f6:	68 83       	st	Y, r22
    15f8:	79 83       	std	Y+1, r23	; 0x01
    15fa:	8a 83       	std	Y+2, r24	; 0x02
    15fc:	9b 83       	std	Y+3, r25	; 0x03
    15fe:	0a c0       	rjmp	.+20     	; 0x1614 <calculate_diff_theta+0x12a>
        else
            *err_theta = (theta_robot) - theta_des;
    1600:	a7 01       	movw	r20, r14
    1602:	96 01       	movw	r18, r12
    1604:	c3 01       	movw	r24, r6
    1606:	b2 01       	movw	r22, r4
    1608:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    160c:	68 83       	st	Y, r22
    160e:	79 83       	std	Y+1, r23	; 0x01
    1610:	8a 83       	std	Y+2, r24	; 0x02
    1612:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	f8 01       	movw	r30, r16
    161a:	91 83       	std	Z+1, r25	; 0x01
    161c:	80 83       	st	Z, r24
    161e:	6f c0       	rjmp	.+222    	; 0x16fe <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && ((theta_robot <=theta_des && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1620:	fc e4       	ldi	r31, 0x4C	; 76
    1622:	af 16       	cp	r10, r31
    1624:	ff ef       	ldi	r31, 0xFF	; 255
    1626:	bf 06       	cpc	r11, r31
    1628:	74 f4       	brge	.+28     	; 0x1646 <calculate_diff_theta+0x15c>
    162a:	a3 01       	movw	r20, r6
    162c:	92 01       	movw	r18, r4
    162e:	62 2d       	mov	r22, r2
    1630:	73 2d       	mov	r23, r3
    1632:	88 2d       	mov	r24, r8
    1634:	99 2d       	mov	r25, r9
    1636:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    163a:	18 16       	cp	r1, r24
    163c:	2c f1       	brlt	.+74     	; 0x1688 <calculate_diff_theta+0x19e>
    163e:	85 eb       	ldi	r24, 0xB5	; 181
    1640:	a8 16       	cp	r10, r24
    1642:	b1 04       	cpc	r11, r1
    1644:	0c f5       	brge	.+66     	; 0x1688 <calculate_diff_theta+0x19e>
    {
        if (theta_robot < 0)
    1646:	bb 20       	and	r11, r11
    1648:	5c f4       	brge	.+22     	; 0x1660 <calculate_diff_theta+0x176>
            *err_theta = theta_des - theta_robot;
    164a:	a3 01       	movw	r20, r6
    164c:	92 01       	movw	r18, r4
    164e:	c7 01       	movw	r24, r14
    1650:	b6 01       	movw	r22, r12
    1652:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1656:	68 83       	st	Y, r22
    1658:	79 83       	std	Y+1, r23	; 0x01
    165a:	8a 83       	std	Y+2, r24	; 0x02
    165c:	9b 83       	std	Y+3, r25	; 0x03
    165e:	10 c0       	rjmp	.+32     	; 0x1680 <calculate_diff_theta+0x196>
        else
            *err_theta = (theta_des + 360) - theta_robot;
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	44 eb       	ldi	r20, 0xB4	; 180
    1666:	53 e4       	ldi	r21, 0x43	; 67
    1668:	c7 01       	movw	r24, r14
    166a:	b6 01       	movw	r22, r12
    166c:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1670:	a3 01       	movw	r20, r6
    1672:	92 01       	movw	r18, r4
    1674:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1678:	68 83       	st	Y, r22
    167a:	79 83       	std	Y+1, r23	; 0x01
    167c:	8a 83       	std	Y+2, r24	; 0x02
    167e:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 0;
    1680:	f8 01       	movw	r30, r16
    1682:	11 82       	std	Z+1, r1	; 0x01
    1684:	10 82       	st	Z, r1
    1686:	3b c0       	rjmp	.+118    	; 0x16fe <calculate_diff_theta+0x214>
    }
    else if (add_360 == 1 && (theta_robot > theta_des && theta_robot < angle_dir_aux))
    1688:	a3 01       	movw	r20, r6
    168a:	92 01       	movw	r18, r4
    168c:	c7 01       	movw	r24, r14
    168e:	b6 01       	movw	r22, r12
    1690:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    1694:	88 23       	and	r24, r24
    1696:	9c f5       	brge	.+102    	; 0x16fe <calculate_diff_theta+0x214>
    1698:	a3 01       	movw	r20, r6
    169a:	92 01       	movw	r18, r4
    169c:	62 2d       	mov	r22, r2
    169e:	73 2d       	mov	r23, r3
    16a0:	88 2d       	mov	r24, r8
    16a2:	99 2d       	mov	r25, r9
    16a4:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	4c f5       	brge	.+82     	; 0x16fe <calculate_diff_theta+0x214>
    {
        *err_theta = theta_robot - theta_des;
    16ac:	a7 01       	movw	r20, r14
    16ae:	96 01       	movw	r18, r12
    16b0:	c3 01       	movw	r24, r6
    16b2:	b2 01       	movw	r22, r4
    16b4:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    16b8:	68 83       	st	Y, r22
    16ba:	79 83       	std	Y+1, r23	; 0x01
    16bc:	8a 83       	std	Y+2, r24	; 0x02
    16be:	9b 83       	std	Y+3, r25	; 0x03
        *dir_to_turn = 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	f8 01       	movw	r30, r16
    16c6:	91 83       	std	Z+1, r25	; 0x01
    16c8:	80 83       	st	Z, r24
    16ca:	19 c0       	rjmp	.+50     	; 0x16fe <calculate_diff_theta+0x214>
        angle_dir_aux += 360;
        add_360 = 1;
    }
    
    
    if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= theta_des))
    16cc:	a0 90 56 01 	lds	r10, 0x0156
    16d0:	b0 90 57 01 	lds	r11, 0x0157
    16d4:	b5 01       	movw	r22, r10
    16d6:	88 27       	eor	r24, r24
    16d8:	77 fd       	sbrc	r23, 7
    16da:	80 95       	com	r24
    16dc:	98 2f       	mov	r25, r24
    16de:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    16e2:	2b 01       	movw	r4, r22
    16e4:	3c 01       	movw	r6, r24
    16e6:	9b 01       	movw	r18, r22
    16e8:	ac 01       	movw	r20, r24
    16ea:	69 2d       	mov	r22, r9
    16ec:	78 2d       	mov	r23, r8
    16ee:	83 2d       	mov	r24, r3
    16f0:	92 2d       	mov	r25, r2
    16f2:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    16f6:	18 16       	cp	r1, r24
    16f8:	0c f0       	brlt	.+2      	; 0x16fc <calculate_diff_theta+0x212>
    16fa:	45 cf       	rjmp	.-374    	; 0x1586 <calculate_diff_theta+0x9c>
    16fc:	5a cf       	rjmp	.-332    	; 0x15b2 <calculate_diff_theta+0xc8>
        *dir_to_turn = 1;
    }else {
        err_theta = 0;
        dir_to_turn = 0;
    }
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	df 90       	pop	r13
    170c:	cf 90       	pop	r12
    170e:	bf 90       	pop	r11
    1710:	af 90       	pop	r10
    1712:	9f 90       	pop	r9
    1714:	8f 90       	pop	r8
    1716:	7f 90       	pop	r7
    1718:	6f 90       	pop	r6
    171a:	5f 90       	pop	r5
    171c:	4f 90       	pop	r4
    171e:	3f 90       	pop	r3
    1720:	2f 90       	pop	r2
    1722:	08 95       	ret

00001724 <move_robot_to_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_to_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	a1 f4       	brne	.+40     	; 0x1750 <move_robot_to_puck+0x2c>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_FWD_LFT);
    1728:	88 eb       	ldi	r24, 0xB8	; 184
    172a:	9b e0       	ldi	r25, 0x0B	; 11
    172c:	90 93 8b 00 	sts	0x008B, r25
    1730:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_FWD_RGHT+diff*Kp_move_puck);
    1734:	cb 01       	movw	r24, r22
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	68 0f       	add	r22, r24
    1740:	79 1f       	adc	r23, r25
    1742:	64 5e       	subi	r22, 0xE4	; 228
    1744:	73 4f       	sbci	r23, 0xF3	; 243
    1746:	70 93 8d 00 	sts	0x008D, r23
    174a:	60 93 8c 00 	sts	0x008C, r22
    174e:	13 c0       	rjmp	.+38     	; 0x1776 <move_robot_to_puck+0x52>
		
	}
	else
	{                      // Move with a right curve
		OCR1B = (int)(PWM_SPEED_FWD_LFT+diff*Kp_move_puck);
    1750:	cb 01       	movw	r24, r22
    1752:	88 0f       	add	r24, r24
    1754:	99 1f       	adc	r25, r25
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	68 0f       	add	r22, r24
    175c:	79 1f       	adc	r23, r25
    175e:	68 54       	subi	r22, 0x48	; 72
    1760:	74 4f       	sbci	r23, 0xF4	; 244
    1762:	70 93 8b 00 	sts	0x008B, r23
    1766:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_FWD_RGHT);
    176a:	8c e1       	ldi	r24, 0x1C	; 28
    176c:	9c e0       	ldi	r25, 0x0C	; 12
    176e:	90 93 8d 00 	sts	0x008D, r25
    1772:	80 93 8c 00 	sts	0x008C, r24
	}
	
	clear(PORTB,3);
    1776:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    1778:	5b 98       	cbi	0x0b, 3	; 11
    177a:	08 95       	ret

0000177c <move_robot_after_get_puck>:

// --------------------------------------------------------------
// POSITION CONTROLLER TO MOVE ROBOT TOWARDS PUCK
// --------------------------------------------------------------
void move_robot_after_get_puck(int dir, int diff){
	if (dir == 1) {             // Move with a left curve
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	09 f5       	brne	.+66     	; 0x17c2 <move_robot_after_get_puck+0x46>
		//OCR1C = PWM_SPEED_FWD_LFT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT);
    1780:	88 ed       	ldi	r24, 0xD8	; 216
    1782:	9e e0       	ldi	r25, 0x0E	; 14
    1784:	90 93 8b 00 	sts	0x008B, r25
    1788:	80 93 8a 00 	sts	0x008A, r24
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT+diff*Kp_move_with_puck);
    178c:	88 27       	eor	r24, r24
    178e:	77 fd       	sbrc	r23, 7
    1790:	80 95       	com	r24
    1792:	98 2f       	mov	r25, r24
    1794:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1798:	2a e0       	ldi	r18, 0x0A	; 10
    179a:	37 ed       	ldi	r19, 0xD7	; 215
    179c:	43 e2       	ldi	r20, 0x23	; 35
    179e:	5c e3       	ldi	r21, 0x3C	; 60
    17a0:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    17a4:	20 e0       	ldi	r18, 0x00	; 0
    17a6:	30 e8       	ldi	r19, 0x80	; 128
    17a8:	4d e6       	ldi	r20, 0x6D	; 109
    17aa:	55 e4       	ldi	r21, 0x45	; 69
    17ac:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    17b0:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    17b4:	70 93 8d 00 	sts	0x008D, r23
    17b8:	60 93 8c 00 	sts	0x008C, r22
		
		clear(PORTB,3);
    17bc:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    17be:	5b 98       	cbi	0x0b, 3	; 11
    17c0:	08 95       	ret
	}
	else
	{                      // Move with a right curve
		//OCR1B = PWM_SPEED_FWD_RGHT;
		OCR1B = (int)(PWM_SPEED_AFTER_GET_PUCK_LEFT+diff*Kp_move_with_puck);
    17c2:	88 27       	eor	r24, r24
    17c4:	77 fd       	sbrc	r23, 7
    17c6:	80 95       	com	r24
    17c8:	98 2f       	mov	r25, r24
    17ca:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    17ce:	2a e0       	ldi	r18, 0x0A	; 10
    17d0:	37 ed       	ldi	r19, 0xD7	; 215
    17d2:	43 e2       	ldi	r20, 0x23	; 35
    17d4:	5c e3       	ldi	r21, 0x3C	; 60
    17d6:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    17da:	20 e0       	ldi	r18, 0x00	; 0
    17dc:	30 e8       	ldi	r19, 0x80	; 128
    17de:	4d e6       	ldi	r20, 0x6D	; 109
    17e0:	55 e4       	ldi	r21, 0x45	; 69
    17e2:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    17e6:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    17ea:	70 93 8b 00 	sts	0x008B, r23
    17ee:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = (int)(PWM_SPEED_AFTER_GET_PUCK_RIGHT);
    17f2:	88 ed       	ldi	r24, 0xD8	; 216
    17f4:	9e e0       	ldi	r25, 0x0E	; 14
    17f6:	90 93 8d 00 	sts	0x008D, r25
    17fa:	80 93 8c 00 	sts	0x008C, r24
		
		clear(PORTB,3);
    17fe:	2b 98       	cbi	0x05, 3	; 5
		clear(PORTD,3);
    1800:	5b 98       	cbi	0x0b, 3	; 11
    1802:	08 95       	ret

00001804 <stop_motor>:
// --------------------------------------------------------------
// STOP MOTORS
// --------------------------------------------------------------
void stop_motor(void)
{
    OCR1B = 0;
    1804:	10 92 8b 00 	sts	0x008B, r1
    1808:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    180c:	10 92 8d 00 	sts	0x008D, r1
    1810:	10 92 8c 00 	sts	0x008C, r1
    1814:	08 95       	ret

00001816 <turn_left>:
// --------------------------------------------------------------
// TURN LEFT
// --------------------------------------------------------------
void turn_left(void)
{
    clear(PORTB,3);
    1816:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
    1818:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = PWM_SPEED_TURN_LFT;
    181a:	8c ef       	ldi	r24, 0xFC	; 252
    181c:	98 e0       	ldi	r25, 0x08	; 8
    181e:	90 93 8d 00 	sts	0x008D, r25
    1822:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    1826:	80 e6       	ldi	r24, 0x60	; 96
    1828:	99 e0       	ldi	r25, 0x09	; 9
    182a:	90 93 8b 00 	sts	0x008B, r25
    182e:	80 93 8a 00 	sts	0x008A, r24
    1832:	08 95       	ret

00001834 <turn_left_puck>:
// --------------------------------------------------------------
// TURN LEFT FOR PUCK
// --------------------------------------------------------------
void turn_left_puck(int scale_turn)
{
    clear(PORTB,3);
    1834:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
    1836:	5b 9a       	sbi	0x0b, 3	; 11
	OCR1C = (int)(PWM_MIN_LEFT+scale_turn*Kp_turn);
    1838:	8d 5e       	subi	r24, 0xED	; 237
    183a:	9e 4f       	sbci	r25, 0xFE	; 254
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	88 0f       	add	r24, r24
    1842:	99 1f       	adc	r25, r25
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	90 93 8d 00 	sts	0x008D, r25
    184c:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = (int)(PWM_MIN_RGHT+scale_turn*Kp_turn);
    1850:	90 93 8b 00 	sts	0x008B, r25
    1854:	80 93 8a 00 	sts	0x008A, r24
    1858:	08 95       	ret

0000185a <turn_right_puck>:
// --------------------------------------------------------------
// TURN RIGHT PUCK
// --------------------------------------------------------------
void turn_right_puck(int scale_turn)
{
    set(PORTB,3);
    185a:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
    185c:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = (int)(PWM_MIN_LEFT+scale_turn*Kp_turn);
    185e:	8d 5e       	subi	r24, 0xED	; 237
    1860:	9e 4f       	sbci	r25, 0xFE	; 254
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	88 0f       	add	r24, r24
    1868:	99 1f       	adc	r25, r25
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	90 93 8d 00 	sts	0x008D, r25
    1872:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = (int)(PWM_MIN_RGHT+scale_turn*Kp_turn);
    1876:	90 93 8b 00 	sts	0x008B, r25
    187a:	80 93 8a 00 	sts	0x008A, r24
    187e:	08 95       	ret

00001880 <turn_right>:
// --------------------------------------------------------------
// TURN RIGHT
// --------------------------------------------------------------
void turn_right(void)
{
    set(PORTB,3);
    1880:	2b 9a       	sbi	0x05, 3	; 5
    clear(PORTD,3);
    1882:	5b 98       	cbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_TURN_LFT;
    1884:	8c ef       	ldi	r24, 0xFC	; 252
    1886:	98 e0       	ldi	r25, 0x08	; 8
    1888:	90 93 8d 00 	sts	0x008D, r25
    188c:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_TURN_RGHT;
    1890:	80 e6       	ldi	r24, 0x60	; 96
    1892:	99 e0       	ldi	r25, 0x09	; 9
    1894:	90 93 8b 00 	sts	0x008B, r25
    1898:	80 93 8a 00 	sts	0x008A, r24
    189c:	08 95       	ret

0000189e <go_bwd>:
// --------------------------------------------------------------
// GO BACKWARDS
// --------------------------------------------------------------
void go_bwd(void)
{
    set(PORTB,3);
    189e:	2b 9a       	sbi	0x05, 3	; 5
    set(PORTD,3);
    18a0:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1C = PWM_SPEED_FWD_LFT;
    18a2:	88 eb       	ldi	r24, 0xB8	; 184
    18a4:	9b e0       	ldi	r25, 0x0B	; 11
    18a6:	90 93 8d 00 	sts	0x008D, r25
    18aa:	80 93 8c 00 	sts	0x008C, r24
    OCR1B = PWM_SPEED_FWD_RGHT;
    18ae:	8c e1       	ldi	r24, 0x1C	; 28
    18b0:	9c e0       	ldi	r25, 0x0C	; 12
    18b2:	90 93 8b 00 	sts	0x008B, r25
    18b6:	80 93 8a 00 	sts	0x008A, r24
    18ba:	08 95       	ret

000018bc <circle_left>:
// --------------------------------------------------------------
// CIRCLE_LEFT
// --------------------------------------------------------------
void circle_left()
{
	clear(PORTB,3);
    18bc:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    18be:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_LFT;
    18c0:	8c ef       	ldi	r24, 0xFC	; 252
    18c2:	98 e0       	ldi	r25, 0x08	; 8
    18c4:	90 93 8b 00 	sts	0x008B, r25
    18c8:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_LFT*RATIO_TURNING_LFT;
    18cc:	85 e7       	ldi	r24, 0x75	; 117
    18ce:	97 e0       	ldi	r25, 0x07	; 7
    18d0:	90 93 8d 00 	sts	0x008D, r25
    18d4:	80 93 8c 00 	sts	0x008C, r24
    18d8:	08 95       	ret

000018da <circle_right>:
// --------------------------------------------------------------
// CIRCLE_RIGHT
// --------------------------------------------------------------
void circle_right()
{
	clear(PORTB,3);
    18da:	2b 98       	cbi	0x05, 3	; 5
	clear(PORTD,3);
    18dc:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_CIRCLE_RGHT*RATIO_TURNING_RGHT;
    18de:	85 e7       	ldi	r24, 0x75	; 117
    18e0:	97 e0       	ldi	r25, 0x07	; 7
    18e2:	90 93 8b 00 	sts	0x008B, r25
    18e6:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_CIRCLE_RGHT;
    18ea:	8c ef       	ldi	r24, 0xFC	; 252
    18ec:	98 e0       	ldi	r25, 0x08	; 8
    18ee:	90 93 8d 00 	sts	0x008D, r25
    18f2:	80 93 8c 00 	sts	0x008C, r24
    18f6:	08 95       	ret

000018f8 <main>:
int state = INITIAL_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	cd b7       	in	r28, 0x3d	; 61
    18fe:	de b7       	in	r29, 0x3e	; 62
    1900:	c6 54       	subi	r28, 0x46	; 70
    1902:	d1 09       	sbc	r29, r1
    1904:	0f b6       	in	r0, 0x3f	; 63
    1906:	f8 94       	cli
    1908:	de bf       	out	0x3e, r29	; 62
    190a:	0f be       	out	0x3f, r0	; 63
    190c:	cd bf       	out	0x3d, r28	; 61
    m_disableJTAG();
    190e:	20 e8       	ldi	r18, 0x80	; 128
    1910:	25 bf       	out	0x35, r18	; 53
    1912:	25 bf       	out	0x35, r18	; 53
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    1914:	19 82       	std	Y+1, r1	; 0x01
    1916:	1a 82       	std	Y+2, r1	; 0x02
    1918:	1b 82       	std	Y+3, r1	; 0x03
    191a:	1c 82       	std	Y+4, r1	; 0x04
    int bank = 22;
    191c:	86 e1       	ldi	r24, 0x16	; 22
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	9e 83       	std	Y+6, r25	; 0x06
    1922:	8d 83       	std	Y+5, r24	; 0x05
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1924:	18 86       	std	Y+8, r1	; 0x08
    1926:	1f 82       	std	Y+7, r1	; 0x07
    1928:	1a 86       	std	Y+10, r1	; 0x0a
    192a:	19 86       	std	Y+9, r1	; 0x09
	int circle_started_before = 0;
    
	//Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0;
    192c:	1c a2       	std	Y+36, r1	; 0x24
    192e:	1b a2       	std	Y+35, r1	; 0x23
    1930:	1e a2       	std	Y+38, r1	; 0x26
    1932:	1d a2       	std	Y+37, r1	; 0x25
    
    
    // --------------------------------------------------------------
    // Initialization
    // --------------------------------------------------------------
    m_clockdivide(N_CLOCK);             // Set the clock system prescaler
    1934:	e1 e6       	ldi	r30, 0x61	; 97
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	20 83       	st	Z, r18
    193a:	10 82       	st	Z, r1
    m_green(OFF);                       // Turn off the LEDs
    193c:	6a 9a       	sbi	0x0d, 2	; 13
    193e:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);                         // ^
    1940:	6e 9a       	sbi	0x0d, 6	; 13
    1942:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);                          // Initialize RED light indicator
    1944:	6e 9a       	sbi	0x0d, 6	; 13
    1946:	76 98       	cbi	0x0e, 6	; 14
    
    m_bus_init();                       // Initialize bus
    1948:	0e 94 90 12 	call	0x2520	; 0x2520 <m_bus_init>
    init_ports();                       // Initialize ports
    194c:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <init_ports>
    set_timer1();                       // Set timer 1 for motor
    1950:	0e 94 05 02 	call	0x40a	; 0x40a <set_timer1>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    1954:	0e 94 b3 01 	call	0x366	; 0x366 <set_timer4>
    init_analog();                      // Set the ADC System
    1958:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <init_analog>
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    {                                   // ^
        aux = m_wii_open();             // ^
    195c:	0e 94 0c 16 	call	0x2c18	; 0x2c18 <m_wii_open>
    //set_timer3();                     // Set timer 3 for solenoid
    set_timer4();                       // Set timer 4 to every 0.1 s (10 Hz) to send data
    init_analog();                      // Set the ADC System
    
    char aux = 0;                       // Initialize wii camera
	while(!aux)                         // ^
    1960:	88 23       	and	r24, r24
    1962:	e1 f3       	breq	.-8      	; 0x195c <main+0x64>
    {                                   // ^
        aux = m_wii_open();             // ^
    };                                  // ^
    
	m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM); 
    1964:	4a e0       	ldi	r20, 0x0A	; 10
    1966:	62 e4       	ldi	r22, 0x42	; 66
    1968:	81 e0       	ldi	r24, 0x01	; 1
    196a:	0e 94 a1 12 	call	0x2542	; 0x2542 <m_rf_open>
    
    sei();                              // Enable interruptions
    196e:	78 94       	sei
    m_red(OFF);                         // Turn off RED light initialize finished indicator
    1970:	6e 9a       	sbi	0x0d, 6	; 13
    1972:	76 9a       	sbi	0x0e, 6	; 14
    //    TARGETS_X[0] = GOAL_A_POS_X;
    //    TARGETS_Y[0] = GOAL_A_POS_Y;
    //    TARGETS_X[1] = GOAL_B_POS_X;
    //    TARGETS_Y[1] = GOAL_B_POS_Y;
    //
    TARGETS_X[0] = 0;
    1974:	10 92 60 01 	sts	0x0160, r1
    1978:	10 92 61 01 	sts	0x0161, r1
    197c:	10 92 62 01 	sts	0x0162, r1
    1980:	10 92 63 01 	sts	0x0163, r1
    TARGETS_Y[0] = 0;
    1984:	10 92 58 01 	sts	0x0158, r1
    1988:	10 92 59 01 	sts	0x0159, r1
    198c:	10 92 5a 01 	sts	0x015A, r1
    1990:	10 92 5b 01 	sts	0x015B, r1
    TARGETS_X[1] = GOAL_A_POS_X - 15;
    1994:	80 e0       	ldi	r24, 0x00	; 0
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	a6 ee       	ldi	r26, 0xE6	; 230
    199a:	b2 ec       	ldi	r27, 0xC2	; 194
    199c:	80 93 64 01 	sts	0x0164, r24
    19a0:	90 93 65 01 	sts	0x0165, r25
    19a4:	a0 93 66 01 	sts	0x0166, r26
    19a8:	b0 93 67 01 	sts	0x0167, r27
    TARGETS_Y[1] = GOAL_A_POS_Y;
    19ac:	10 92 5c 01 	sts	0x015C, r1
    19b0:	10 92 5d 01 	sts	0x015D, r1
    19b4:	10 92 5e 01 	sts	0x015E, r1
    19b8:	10 92 5f 01 	sts	0x015F, r1
    
    int TARGET_NUM = 0;
    19bc:	25 96       	adiw	r28, 0x05	; 5
    19be:	1f ae       	std	Y+63, r1	; 0x3f
    19c0:	1e ae       	std	Y+62, r1	; 0x3e
    19c2:	25 97       	sbiw	r28, 0x05	; 5
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
	int PT1_left_outside = 0, PT2_left_inside = 0, PT3_right_inside = 0, PT4_right_outside = 0, PT5_back_right = 0, PT6_back_left = 0, PT7_have_puck = 0;
    19c4:	1e a6       	std	Y+46, r1	; 0x2e
    19c6:	1d a6       	std	Y+45, r1	; 0x2d
    19c8:	18 aa       	std	Y+48, r1	; 0x30
    19ca:	1f a6       	std	Y+47, r1	; 0x2f
    19cc:	1a aa       	std	Y+50, r1	; 0x32
    19ce:	19 aa       	std	Y+49, r1	; 0x31
    19d0:	1c aa       	std	Y+52, r1	; 0x34
    19d2:	1b aa       	std	Y+51, r1	; 0x33
    19d4:	1e aa       	std	Y+54, r1	; 0x36
    19d6:	1d aa       	std	Y+53, r1	; 0x35
    19d8:	61 2c       	mov	r6, r1
    19da:	71 2c       	mov	r7, r1
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    19dc:	23 96       	adiw	r28, 0x03	; 3
    19de:	1f ae       	std	Y+63, r1	; 0x3f
    19e0:	1e ae       	std	Y+62, r1	; 0x3e
    19e2:	23 97       	sbiw	r28, 0x03	; 3
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    19e4:	1c ae       	std	Y+60, r1	; 0x3c
    19e6:	1b ae       	std	Y+59, r1	; 0x3b
			// --------------------------------------------------------------
			int i;
			for (i=0;i<NUM_LEDS;i++)
			{
				get_analog_val(i);              // Get the values for each ADC pin
				while(!check(ADCSRA,ADIF));     // Wait until flag is on
    19e8:	0f 2e       	mov	r0, r31
    19ea:	fa e7       	ldi	r31, 0x7A	; 122
    19ec:	2f 2e       	mov	r2, r31
    19ee:	31 2c       	mov	r3, r1
    19f0:	f0 2d       	mov	r31, r0
					break;
					case(2):
					PT3_right_inside = ADC;
					break;
					case(3):
					PT4_right_outside = ADC;
    19f2:	0f 2e       	mov	r0, r31
    19f4:	f8 e7       	ldi	r31, 0x78	; 120
    19f6:	4f 2e       	mov	r4, r31
    19f8:	51 2c       	mov	r5, r1
    19fa:	f0 2d       	mov	r31, r0

			// If data received correctly
			if (wii_OK)
			{
				// Get the position and orientation of the robot from the constellation
				localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    19fc:	9e 01       	movw	r18, r28
    19fe:	27 5f       	subi	r18, 0xF7	; 247
    1a00:	3f 4f       	sbci	r19, 0xFF	; 255
    1a02:	38 a7       	std	Y+40, r19	; 0x28
    1a04:	2f a3       	std	Y+39, r18	; 0x27
    1a06:	ae 01       	movw	r20, r28
    1a08:	49 5f       	subi	r20, 0xF9	; 249
    1a0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1a0c:	5a a7       	std	Y+42, r21	; 0x2a
    1a0e:	49 a7       	std	Y+41, r20	; 0x29
    1a10:	ce 01       	movw	r24, r28
    1a12:	85 96       	adiw	r24, 0x25	; 37
    1a14:	9c a7       	std	Y+44, r25	; 0x2c
    1a16:	8b a7       	std	Y+43, r24	; 0x2b
    while (1)
    {
		// --------------------------------------------------------------
		// SYSTEM COMMAND CHECK
		// --------------------------------------------------------------
		if (flag_system == 1)
    1a18:	80 91 48 01 	lds	r24, 0x0148
    1a1c:	90 91 49 01 	lds	r25, 0x0149
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	79 f4       	brne	.+30     	; 0x1a42 <main+0x14a>
		{
			m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    1a24:	6a e0       	ldi	r22, 0x0A	; 10
    1a26:	8c e4       	ldi	r24, 0x4C	; 76
    1a28:	91 e0       	ldi	r25, 0x01	; 1
    1a2a:	0e 94 f7 12 	call	0x25ee	; 0x25ee <m_rf_read>
			state = SYSTEM_STATE;
    1a2e:	e3 e6       	ldi	r30, 0x63	; 99
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	f0 93 47 01 	sts	0x0147, r31
    1a36:	e0 93 46 01 	sts	0x0146, r30
			flag_system = 0;
    1a3a:	10 92 49 01 	sts	0x0149, r1
    1a3e:	10 92 48 01 	sts	0x0148, r1
		}
	
		 //--------------------------------------------------------------
         //SEND COMMANDS
         //--------------------------------------------------------------
        if (flag_timer == 1)
    1a42:	80 91 4a 01 	lds	r24, 0x014A
    1a46:	90 91 4b 01 	lds	r25, 0x014B
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	29 f7       	brne	.-54     	; 0x1a18 <main+0x120>
		{
			m_green(ON);	
    1a4e:	6a 9a       	sbi	0x0d, 2	; 13
    1a50:	72 98       	cbi	0x0e, 2	; 14
			// --------------------------------------------------------------
			// LOCALIZATION CODE
			// --------------------------------------------------------------
			cli();                                          // Clear Interupts to not interfere with the mWii
    1a52:	f8 94       	cli
			wii_OK = m_wii_read(blobs_wii);                 // Get the blobs
    1a54:	ce 01       	movw	r24, r28
    1a56:	0b 96       	adiw	r24, 0x0b	; 11
    1a58:	0e 94 77 15 	call	0x2aee	; 0x2aee <m_wii_read>
			sei();                                          // Enable back the interupts
    1a5c:	78 94       	sei

			// If data received correctly
			if (wii_OK)
    1a5e:	88 23       	and	r24, r24
    1a60:	09 f4       	brne	.+2      	; 0x1a64 <main+0x16c>
    1a62:	24 c5       	rjmp	.+2632   	; 0x24ac <main+0xbb4>
			{
				// Get the position and orientation of the robot from the constellation
				localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1a64:	af 8c       	ldd	r10, Y+31	; 0x1f
    1a66:	b8 a0       	ldd	r11, Y+32	; 0x20
    1a68:	c9 8c       	ldd	r12, Y+25	; 0x19
    1a6a:	da 8c       	ldd	r13, Y+26	; 0x1a
    1a6c:	eb 88       	ldd	r14, Y+19	; 0x13
    1a6e:	fc 88       	ldd	r15, Y+20	; 0x14
    1a70:	0d 85       	ldd	r16, Y+13	; 0x0d
    1a72:	1e 85       	ldd	r17, Y+14	; 0x0e
    1a74:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1a76:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1a78:	4f 89       	ldd	r20, Y+23	; 0x17
    1a7a:	58 8d       	ldd	r21, Y+24	; 0x18
    1a7c:	69 89       	ldd	r22, Y+17	; 0x11
    1a7e:	7a 89       	ldd	r23, Y+18	; 0x12
    1a80:	f8 a5       	ldd	r31, Y+40	; 0x28
    1a82:	ff 93       	push	r31
    1a84:	8f a1       	ldd	r24, Y+39	; 0x27
    1a86:	8f 93       	push	r24
    1a88:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a8a:	9f 93       	push	r25
    1a8c:	e9 a5       	ldd	r30, Y+41	; 0x29
    1a8e:	ef 93       	push	r30
    1a90:	86 e5       	ldi	r24, 0x56	; 86
    1a92:	91 e0       	ldi	r25, 0x01	; 1
    1a94:	9f 93       	push	r25
    1a96:	8f 93       	push	r24
    1a98:	fc a5       	ldd	r31, Y+44	; 0x2c
    1a9a:	ff 93       	push	r31
    1a9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a9e:	8f 93       	push	r24
    1aa0:	0f 2e       	mov	r0, r31
    1aa2:	f3 e2       	ldi	r31, 0x23	; 35
    1aa4:	8f 2e       	mov	r8, r31
    1aa6:	91 2c       	mov	r9, r1
    1aa8:	f0 2d       	mov	r31, r0
    1aaa:	8c 0e       	add	r8, r28
    1aac:	9d 1e       	adc	r9, r29
    1aae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ab0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ab2:	0e 94 3d 02 	call	0x47a	; 0x47a <localize>
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	f5 c4       	rjmp	.+2538   	; 0x24ac <main+0xbb4>
    1ac2:	ff ef       	ldi	r31, 0xFF	; 255
    1ac4:	ef 1a       	sub	r14, r31
    1ac6:	ff 0a       	sbc	r15, r31
//Variable for states
int state = INITIAL_STATE; //CHANGE TO SYSTEM STATE?????????????????????????????
//int past_state = INITIAL_STATE;

//Main function
int main(void)
    1ac8:	87 01       	movw	r16, r14
    1aca:	01 50       	subi	r16, 0x01	; 1
    1acc:	11 09       	sbc	r17, r1
			// ANALOG CODE
			// --------------------------------------------------------------
			int i;
			for (i=0;i<NUM_LEDS;i++)
			{
				get_analog_val(i);              // Get the values for each ADC pin
    1ace:	c8 01       	movw	r24, r16
    1ad0:	0e 94 01 01 	call	0x202	; 0x202 <get_analog_val>
				while(!check(ADCSRA,ADIF));     // Wait until flag is on
    1ad4:	f1 01       	movw	r30, r2
    1ad6:	80 81       	ld	r24, Z
    1ad8:	84 ff       	sbrs	r24, 4
    1ada:	fc cf       	rjmp	.-8      	; 0x1ad4 <main+0x1dc>
				switch(i)
    1adc:	03 30       	cpi	r16, 0x03	; 3
    1ade:	11 05       	cpc	r17, r1
    1ae0:	11 f1       	breq	.+68     	; 0x1b26 <main+0x22e>
    1ae2:	3c f4       	brge	.+14     	; 0x1af2 <main+0x1fa>
    1ae4:	01 30       	cpi	r16, 0x01	; 1
    1ae6:	11 05       	cpc	r17, r1
    1ae8:	81 f0       	breq	.+32     	; 0x1b0a <main+0x212>
    1aea:	b4 f4       	brge	.+44     	; 0x1b18 <main+0x220>
    1aec:	01 2b       	or	r16, r17
    1aee:	49 f0       	breq	.+18     	; 0x1b02 <main+0x20a>
    1af0:	44 c0       	rjmp	.+136    	; 0x1b7a <main+0x282>
    1af2:	05 30       	cpi	r16, 0x05	; 5
    1af4:	11 05       	cpc	r17, r1
    1af6:	29 f1       	breq	.+74     	; 0x1b42 <main+0x24a>
    1af8:	ec f0       	brlt	.+58     	; 0x1b34 <main+0x23c>
    1afa:	06 30       	cpi	r16, 0x06	; 6
    1afc:	11 05       	cpc	r17, r1
    1afe:	e9 f5       	brne	.+122    	; 0x1b7a <main+0x282>
    1b00:	27 c0       	rjmp	.+78     	; 0x1b50 <main+0x258>
				{
					case(0):
					PT1_left_outside = ADC;
    1b02:	f2 01       	movw	r30, r4
    1b04:	60 80       	ld	r6, Z
    1b06:	71 80       	ldd	r7, Z+1	; 0x01
					break;
    1b08:	d5 c4       	rjmp	.+2474   	; 0x24b4 <main+0xbbc>
					case(1):
					PT2_left_inside = ADC;
    1b0a:	f2 01       	movw	r30, r4
    1b0c:	01 90       	ld	r0, Z+
    1b0e:	f0 81       	ld	r31, Z
    1b10:	e0 2d       	mov	r30, r0
    1b12:	fe ab       	std	Y+54, r31	; 0x36
    1b14:	ed ab       	std	Y+53, r30	; 0x35
					break;
    1b16:	ce c4       	rjmp	.+2460   	; 0x24b4 <main+0xbbc>
					case(2):
					PT3_right_inside = ADC;
    1b18:	f2 01       	movw	r30, r4
    1b1a:	01 90       	ld	r0, Z+
    1b1c:	f0 81       	ld	r31, Z
    1b1e:	e0 2d       	mov	r30, r0
    1b20:	fc ab       	std	Y+52, r31	; 0x34
    1b22:	eb ab       	std	Y+51, r30	; 0x33
					break;
    1b24:	c7 c4       	rjmp	.+2446   	; 0x24b4 <main+0xbbc>
					case(3):
					PT4_right_outside = ADC;
    1b26:	f2 01       	movw	r30, r4
    1b28:	01 90       	ld	r0, Z+
    1b2a:	f0 81       	ld	r31, Z
    1b2c:	e0 2d       	mov	r30, r0
    1b2e:	fa ab       	std	Y+50, r31	; 0x32
    1b30:	e9 ab       	std	Y+49, r30	; 0x31
					break;
    1b32:	c0 c4       	rjmp	.+2432   	; 0x24b4 <main+0xbbc>
					case(4):
					PT5_back_right = ADC;
    1b34:	f2 01       	movw	r30, r4
    1b36:	01 90       	ld	r0, Z+
    1b38:	f0 81       	ld	r31, Z
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	f8 ab       	std	Y+48, r31	; 0x30
    1b3e:	ef a7       	std	Y+47, r30	; 0x2f
					break;
    1b40:	b9 c4       	rjmp	.+2418   	; 0x24b4 <main+0xbbc>
					case(5):
					PT6_back_left = ADC;
    1b42:	f2 01       	movw	r30, r4
    1b44:	01 90       	ld	r0, Z+
    1b46:	f0 81       	ld	r31, Z
    1b48:	e0 2d       	mov	r30, r0
    1b4a:	fe a7       	std	Y+46, r31	; 0x2e
    1b4c:	ed a7       	std	Y+45, r30	; 0x2d
					break;
    1b4e:	b2 c4       	rjmp	.+2404   	; 0x24b4 <main+0xbbc>
					case(6):
					PT7_have_puck = ADC;
    1b50:	f2 01       	movw	r30, r4
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
					break;
				}
	
				set(ADCSRA,ADIF);               // After doing the conversion reset flag
    1b56:	f1 01       	movw	r30, r2
    1b58:	80 81       	ld	r24, Z
    1b5a:	80 61       	ori	r24, 0x10	; 16
    1b5c:	80 83       	st	Z, r24
    1b5e:	8d a4       	ldd	r8, Y+45	; 0x2d
    1b60:	9e a4       	ldd	r9, Y+46	; 0x2e
    1b62:	2f a5       	ldd	r18, Y+47	; 0x2f
    1b64:	38 a9       	ldd	r19, Y+48	; 0x30
    1b66:	38 af       	std	Y+56, r19	; 0x38
    1b68:	2f ab       	std	Y+55, r18	; 0x37
    1b6a:	c9 a8       	ldd	r12, Y+49	; 0x31
    1b6c:	da a8       	ldd	r13, Y+50	; 0x32
    1b6e:	ab a8       	ldd	r10, Y+51	; 0x33
    1b70:	bc a8       	ldd	r11, Y+52	; 0x34
    1b72:	0d a9       	ldd	r16, Y+53	; 0x35
    1b74:	1e a9       	ldd	r17, Y+54	; 0x36
    1b76:	73 01       	movw	r14, r6
    1b78:	16 c0       	rjmp	.+44     	; 0x1ba6 <main+0x2ae>
    1b7a:	f1 01       	movw	r30, r2
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 61       	ori	r24, 0x10	; 16
    1b80:	80 83       	st	Z, r24

			// --------------------------------------------------------------
			// ANALOG CODE
			// --------------------------------------------------------------
			int i;
			for (i=0;i<NUM_LEDS;i++)
    1b82:	f7 e0       	ldi	r31, 0x07	; 7
    1b84:	ef 16       	cp	r14, r31
    1b86:	f1 04       	cpc	r15, r1
    1b88:	0c f4       	brge	.+2      	; 0x1b8c <main+0x294>
    1b8a:	9b cf       	rjmp	.-202    	; 0x1ac2 <main+0x1ca>
    1b8c:	8d a4       	ldd	r8, Y+45	; 0x2d
    1b8e:	9e a4       	ldd	r9, Y+46	; 0x2e
    1b90:	2f a5       	ldd	r18, Y+47	; 0x2f
    1b92:	38 a9       	ldd	r19, Y+48	; 0x30
    1b94:	38 af       	std	Y+56, r19	; 0x38
    1b96:	2f ab       	std	Y+55, r18	; 0x37
    1b98:	c9 a8       	ldd	r12, Y+49	; 0x31
    1b9a:	da a8       	ldd	r13, Y+50	; 0x32
    1b9c:	ab a8       	ldd	r10, Y+51	; 0x33
    1b9e:	bc a8       	ldd	r11, Y+52	; 0x34
    1ba0:	0d a9       	ldd	r16, Y+53	; 0x35
    1ba2:	1e a9       	ldd	r17, Y+54	; 0x36
    1ba4:	73 01       	movw	r14, r6


			// --------------------------------------------------------------
			// STATE COMMANDS
			// --------------------------------------------------------------
			switch (state)
    1ba6:	80 91 46 01 	lds	r24, 0x0146
    1baa:	90 91 47 01 	lds	r25, 0x0147
    1bae:	85 31       	cpi	r24, 0x15	; 21
    1bb0:	91 05       	cpc	r25, r1
    1bb2:	09 f4       	brne	.+2      	; 0x1bb6 <main+0x2be>
    1bb4:	53 c4       	rjmp	.+2214   	; 0x245c <main+0xb64>
    1bb6:	64 f4       	brge	.+24     	; 0x1bd0 <main+0x2d8>
    1bb8:	83 30       	cpi	r24, 0x03	; 3
    1bba:	91 05       	cpc	r25, r1
    1bbc:	09 f4       	brne	.+2      	; 0x1bc0 <main+0x2c8>
    1bbe:	f2 c1       	rjmp	.+996    	; 0x1fa4 <main+0x6ac>
    1bc0:	85 30       	cpi	r24, 0x05	; 5
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	09 f4       	brne	.+2      	; 0x1bc8 <main+0x2d0>
    1bc6:	f3 c2       	rjmp	.+1510   	; 0x21ae <main+0x8b6>
    1bc8:	89 2b       	or	r24, r25
    1bca:	09 f4       	brne	.+2      	; 0x1bce <main+0x2d6>
    1bcc:	d8 c2       	rjmp	.+1456   	; 0x217e <main+0x886>
    1bce:	4b c4       	rjmp	.+2198   	; 0x2466 <main+0xb6e>
    1bd0:	80 35       	cpi	r24, 0x50	; 80
    1bd2:	91 05       	cpc	r25, r1
    1bd4:	41 f0       	breq	.+16     	; 0x1be6 <main+0x2ee>
    1bd6:	83 36       	cpi	r24, 0x63	; 99
    1bd8:	91 05       	cpc	r25, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <main+0x2e6>
    1bdc:	bc c3       	rjmp	.+1912   	; 0x2356 <main+0xa5e>
    1bde:	46 97       	sbiw	r24, 0x16	; 22
    1be0:	09 f0       	breq	.+2      	; 0x1be4 <main+0x2ec>
    1be2:	41 c4       	rjmp	.+2178   	; 0x2466 <main+0xb6e>
    1be4:	25 c4       	rjmp	.+2122   	; 0x2430 <main+0xb38>
				case GO_TO_WPT:
	
				//m_green(ON);
	
	
				if (PT1_left_outside > NOT_SEE_PUCK || PT2_left_inside > NOT_SEE_PUCK || PT3_right_inside > NOT_SEE_PUCK || PT4_right_outside > NOT_SEE_PUCK || PT5_back_right > NOT_SEE_PUCK || PT6_back_left > NOT_SEE_PUCK)
    1be6:	3d e2       	ldi	r19, 0x2D	; 45
    1be8:	e3 16       	cp	r14, r19
    1bea:	31 e0       	ldi	r19, 0x01	; 1
    1bec:	f3 06       	cpc	r15, r19
    1bee:	bc f4       	brge	.+46     	; 0x1c1e <main+0x326>
    1bf0:	0d 32       	cpi	r16, 0x2D	; 45
    1bf2:	11 40       	sbci	r17, 0x01	; 1
    1bf4:	a4 f4       	brge	.+40     	; 0x1c1e <main+0x326>
    1bf6:	5d e2       	ldi	r21, 0x2D	; 45
    1bf8:	a5 16       	cp	r10, r21
    1bfa:	51 e0       	ldi	r21, 0x01	; 1
    1bfc:	b5 06       	cpc	r11, r21
    1bfe:	7c f4       	brge	.+30     	; 0x1c1e <main+0x326>
    1c00:	8d e2       	ldi	r24, 0x2D	; 45
    1c02:	c8 16       	cp	r12, r24
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	d8 06       	cpc	r13, r24
    1c08:	54 f4       	brge	.+20     	; 0x1c1e <main+0x326>
    1c0a:	ef a9       	ldd	r30, Y+55	; 0x37
    1c0c:	f8 ad       	ldd	r31, Y+56	; 0x38
    1c0e:	ed 32       	cpi	r30, 0x2D	; 45
    1c10:	f1 40       	sbci	r31, 0x01	; 1
    1c12:	2c f4       	brge	.+10     	; 0x1c1e <main+0x326>
    1c14:	3d e2       	ldi	r19, 0x2D	; 45
    1c16:	83 16       	cp	r8, r19
    1c18:	31 e0       	ldi	r19, 0x01	; 1
    1c1a:	93 06       	cpc	r9, r19
    1c1c:	3c f0       	brlt	.+14     	; 0x1c2c <main+0x334>
				{
					state = FIND_PUCK;
    1c1e:	83 e0       	ldi	r24, 0x03	; 3
    1c20:	90 e0       	ldi	r25, 0x00	; 0
    1c22:	90 93 47 01 	sts	0x0147, r25
    1c26:	80 93 46 01 	sts	0x0146, r24
					break;
    1c2a:	3b c4       	rjmp	.+2166   	; 0x24a2 <main+0xbaa>
				}
	
				dir_x = TARGETS_X[TARGET_NUM]-x_robot;
				dir_y = TARGETS_Y[TARGET_NUM]-y_robot;
    1c2c:	25 96       	adiw	r28, 0x05	; 5
    1c2e:	0e ad       	ldd	r16, Y+62	; 0x3e
    1c30:	1f ad       	ldd	r17, Y+63	; 0x3f
    1c32:	25 97       	sbiw	r28, 0x05	; 5
    1c34:	00 0f       	add	r16, r16
    1c36:	11 1f       	adc	r17, r17
    1c38:	00 0f       	add	r16, r16
    1c3a:	11 1f       	adc	r17, r17
    1c3c:	0f 2e       	mov	r0, r31
    1c3e:	f8 e5       	ldi	r31, 0x58	; 88
    1c40:	ef 2e       	mov	r14, r31
    1c42:	f1 e0       	ldi	r31, 0x01	; 1
    1c44:	ff 2e       	mov	r15, r31
    1c46:	f0 2d       	mov	r31, r0
    1c48:	e0 0e       	add	r14, r16
    1c4a:	f1 1e       	adc	r15, r17
    1c4c:	6d a1       	ldd	r22, Y+37	; 0x25
    1c4e:	7e a1       	ldd	r23, Y+38	; 0x26
    1c50:	88 27       	eor	r24, r24
    1c52:	77 fd       	sbrc	r23, 7
    1c54:	80 95       	com	r24
    1c56:	98 2f       	mov	r25, r24
    1c58:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1c5c:	9b 01       	movw	r18, r22
    1c5e:	ac 01       	movw	r20, r24
    1c60:	f7 01       	movw	r30, r14
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1c6e:	6b 01       	movw	r12, r22
    1c70:	7c 01       	movw	r14, r24
				{
					state = FIND_PUCK;
					break;
				}
	
				dir_x = TARGETS_X[TARGET_NUM]-x_robot;
    1c72:	00 5a       	subi	r16, 0xA0	; 160
    1c74:	1e 4f       	sbci	r17, 0xFE	; 254
    1c76:	6b a1       	ldd	r22, Y+35	; 0x23
    1c78:	7c a1       	ldd	r23, Y+36	; 0x24
    1c7a:	88 27       	eor	r24, r24
    1c7c:	77 fd       	sbrc	r23, 7
    1c7e:	80 95       	com	r24
    1c80:	98 2f       	mov	r25, r24
    1c82:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1c86:	9b 01       	movw	r18, r22
    1c88:	ac 01       	movw	r20, r24
    1c8a:	f8 01       	movw	r30, r16
    1c8c:	60 81       	ld	r22, Z
    1c8e:	71 81       	ldd	r23, Z+1	; 0x01
    1c90:	82 81       	ldd	r24, Z+2	; 0x02
    1c92:	93 81       	ldd	r25, Z+3	; 0x03
    1c94:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
				dir_y = TARGETS_Y[TARGET_NUM]-y_robot;
				dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1c98:	90 58       	subi	r25, 0x80	; 128
    1c9a:	a7 01       	movw	r20, r14
    1c9c:	96 01       	movw	r18, r12
    1c9e:	0e 94 83 17 	call	0x2f06	; 0x2f06 <atan2>
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	44 e3       	ldi	r20, 0x34	; 52
    1ca8:	53 e4       	ldi	r21, 0x43	; 67
    1caa:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1cae:	2b ed       	ldi	r18, 0xDB	; 219
    1cb0:	3f e0       	ldi	r19, 0x0F	; 15
    1cb2:	49 e4       	ldi	r20, 0x49	; 73
    1cb4:	50 e4       	ldi	r21, 0x40	; 64
    1cb6:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
	
				calculate_diff_theta(dir_angle,&diff_theta, &bank);
    1cba:	9e 01       	movw	r18, r28
    1cbc:	2b 5f       	subi	r18, 0xFB	; 251
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	ae 01       	movw	r20, r28
    1cc2:	4f 5f       	subi	r20, 0xFF	; 255
    1cc4:	5f 4f       	sbci	r21, 0xFF	; 255
    1cc6:	0e 94 75 0a 	call	0x14ea	; 0x14ea <calculate_diff_theta>
	
	
				cur_error = diff_theta;
    1cca:	89 80       	ldd	r8, Y+1	; 0x01
    1ccc:	9a 80       	ldd	r9, Y+2	; 0x02
    1cce:	ab 80       	ldd	r10, Y+3	; 0x03
    1cd0:	bc 80       	ldd	r11, Y+4	; 0x04
    1cd2:	c5 01       	movw	r24, r10
    1cd4:	b4 01       	movw	r22, r8
    1cd6:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    1cda:	8b 01       	movw	r16, r22
    1cdc:	70 93 6b 01 	sts	0x016B, r23
    1ce0:	60 93 6a 01 	sts	0x016A, r22
				diff_error = cur_error - prev_error;
    1ce4:	20 91 68 01 	lds	r18, 0x0168
    1ce8:	30 91 69 01 	lds	r19, 0x0169
    1cec:	ab 01       	movw	r20, r22
    1cee:	42 1b       	sub	r20, r18
    1cf0:	53 0b       	sbc	r21, r19
    1cf2:	50 93 6d 01 	sts	0x016D, r21
    1cf6:	40 93 6c 01 	sts	0x016C, r20
				prev_error = cur_error;
    1cfa:	70 93 69 01 	sts	0x0169, r23
    1cfe:	60 93 68 01 	sts	0x0168, r22
	
				if (status_go_to_goal == 0)
    1d02:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d04:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d06:	89 2b       	or	r24, r25
    1d08:	09 f0       	breq	.+2      	; 0x1d0c <main+0x414>
    1d0a:	7b c0       	rjmp	.+246    	; 0x1e02 <main+0x50a>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
    1d0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d10:	88 27       	eor	r24, r24
    1d12:	77 fd       	sbrc	r23, 7
    1d14:	80 95       	com	r24
    1d16:	98 2f       	mov	r25, r24
    1d18:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1d1c:	25 96       	adiw	r28, 0x05	; 5
    1d1e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1d20:	ff ac       	ldd	r15, Y+63	; 0x3f
    1d22:	25 97       	sbiw	r28, 0x05	; 5
    1d24:	ee 0c       	add	r14, r14
    1d26:	ff 1c       	adc	r15, r15
    1d28:	ee 0c       	add	r14, r14
    1d2a:	ff 1c       	adc	r15, r15
    1d2c:	f7 01       	movw	r30, r14
    1d2e:	e0 5a       	subi	r30, 0xA0	; 160
    1d30:	fe 4f       	sbci	r31, 0xFE	; 254
    1d32:	20 81       	ld	r18, Z
    1d34:	31 81       	ldd	r19, Z+1	; 0x01
    1d36:	42 81       	ldd	r20, Z+2	; 0x02
    1d38:	53 81       	ldd	r21, Z+3	; 0x03
    1d3a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1d3e:	6f ab       	std	Y+55, r22	; 0x37
    1d40:	7d af       	std	Y+61, r23	; 0x3d
    1d42:	c8 2e       	mov	r12, r24
    1d44:	d9 2e       	mov	r13, r25
    1d46:	6d a1       	ldd	r22, Y+37	; 0x25
    1d48:	7e a1       	ldd	r23, Y+38	; 0x26
    1d4a:	88 27       	eor	r24, r24
    1d4c:	77 fd       	sbrc	r23, 7
    1d4e:	80 95       	com	r24
    1d50:	98 2f       	mov	r25, r24
    1d52:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1d56:	f7 01       	movw	r30, r14
    1d58:	e8 5a       	subi	r30, 0xA8	; 168
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	20 81       	ld	r18, Z
    1d5e:	31 81       	ldd	r19, Z+1	; 0x01
    1d60:	42 81       	ldd	r20, Z+2	; 0x02
    1d62:	53 81       	ldd	r21, Z+3	; 0x03
    1d64:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1d68:	f6 2e       	mov	r15, r22
    1d6a:	e7 2e       	mov	r14, r23
    1d6c:	8f af       	std	Y+63, r24	; 0x3f
    1d6e:	21 96       	adiw	r28, 0x01	; 1
    1d70:	9f af       	std	Y+63, r25	; 0x3f
    1d72:	21 97       	sbiw	r28, 0x01	; 1
    1d74:	7f a9       	ldd	r23, Y+55	; 0x37
    1d76:	6d ad       	ldd	r22, Y+61	; 0x3d
    1d78:	27 2f       	mov	r18, r23
    1d7a:	36 2f       	mov	r19, r22
    1d7c:	4c 2d       	mov	r20, r12
    1d7e:	5d 2d       	mov	r21, r13
    1d80:	67 2f       	mov	r22, r23
    1d82:	73 2f       	mov	r23, r19
    1d84:	8c 2d       	mov	r24, r12
    1d86:	9d 2d       	mov	r25, r13
    1d88:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1d8c:	6f ab       	std	Y+55, r22	; 0x37
    1d8e:	78 af       	std	Y+56, r23	; 0x38
    1d90:	89 af       	std	Y+57, r24	; 0x39
    1d92:	9a af       	std	Y+58, r25	; 0x3a
    1d94:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d96:	21 96       	adiw	r28, 0x01	; 1
    1d98:	8f ad       	ldd	r24, Y+63	; 0x3f
    1d9a:	21 97       	sbiw	r28, 0x01	; 1
    1d9c:	2f 2d       	mov	r18, r15
    1d9e:	3e 2d       	mov	r19, r14
    1da0:	49 2f       	mov	r20, r25
    1da2:	58 2f       	mov	r21, r24
    1da4:	6f 2d       	mov	r22, r15
    1da6:	7e 2d       	mov	r23, r14
    1da8:	89 2f       	mov	r24, r25
    1daa:	95 2f       	mov	r25, r21
    1dac:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1db0:	9b 01       	movw	r18, r22
    1db2:	ac 01       	movw	r20, r24
    1db4:	6f a9       	ldd	r22, Y+55	; 0x37
    1db6:	78 ad       	ldd	r23, Y+56	; 0x38
    1db8:	89 ad       	ldd	r24, Y+57	; 0x39
    1dba:	9a ad       	ldd	r25, Y+58	; 0x3a
    1dbc:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1dc0:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1dc4:	20 e0       	ldi	r18, 0x00	; 0
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	a9 01       	movw	r20, r18
    1dca:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    1dce:	88 23       	and	r24, r24
    1dd0:	0c f4       	brge	.+2      	; 0x1dd4 <main+0x4dc>
    1dd2:	4c c3       	rjmp	.+1688   	; 0x246c <main+0xb74>
						status_go_to_goal = 2;
					}
		
		
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4c e0       	ldi	r20, 0x0C	; 12
    1dda:	52 e4       	ldi	r21, 0x42	; 66
    1ddc:	c5 01       	movw	r24, r10
    1dde:	b4 01       	movw	r22, r8
    1de0:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    1de4:	88 23       	and	r24, r24
    1de6:	0c f4       	brge	.+2      	; 0x1dea <main+0x4f2>
    1de8:	46 c3       	rjmp	.+1676   	; 0x2476 <main+0xb7e>
						status_go_to_goal = 1;
					}
					else
					if (bank == 0)
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	89 2b       	or	r24, r25
    1df0:	21 f4       	brne	.+8      	; 0x1dfa <main+0x502>
					turn_left_puck(diff_theta);
    1df2:	c8 01       	movw	r24, r16
    1df4:	0e 94 1a 0c 	call	0x1834	; 0x1834 <turn_left_puck>
    1df8:	54 c3       	rjmp	.+1704   	; 0x24a2 <main+0xbaa>
					else
					turn_right_puck(diff_theta);
    1dfa:	c8 01       	movw	r24, r16
    1dfc:	0e 94 2d 0c 	call	0x185a	; 0x185a <turn_right_puck>
    1e00:	50 c3       	rjmp	.+1696   	; 0x24a2 <main+0xbaa>
				}
	
				else if (status_go_to_goal == 1)
    1e02:	eb ad       	ldd	r30, Y+59	; 0x3b
    1e04:	fc ad       	ldd	r31, Y+60	; 0x3c
    1e06:	31 97       	sbiw	r30, 0x01	; 1
    1e08:	09 f0       	breq	.+2      	; 0x1e0c <main+0x514>
    1e0a:	75 c0       	rjmp	.+234    	; 0x1ef6 <main+0x5fe>
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
    1e0c:	6b a1       	ldd	r22, Y+35	; 0x23
    1e0e:	7c a1       	ldd	r23, Y+36	; 0x24
    1e10:	88 27       	eor	r24, r24
    1e12:	77 fd       	sbrc	r23, 7
    1e14:	80 95       	com	r24
    1e16:	98 2f       	mov	r25, r24
    1e18:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1e1c:	25 96       	adiw	r28, 0x05	; 5
    1e1e:	ee ac       	ldd	r14, Y+62	; 0x3e
    1e20:	ff ac       	ldd	r15, Y+63	; 0x3f
    1e22:	25 97       	sbiw	r28, 0x05	; 5
    1e24:	ee 0c       	add	r14, r14
    1e26:	ff 1c       	adc	r15, r15
    1e28:	ee 0c       	add	r14, r14
    1e2a:	ff 1c       	adc	r15, r15
    1e2c:	f7 01       	movw	r30, r14
    1e2e:	e0 5a       	subi	r30, 0xA0	; 160
    1e30:	fe 4f       	sbci	r31, 0xFE	; 254
    1e32:	20 81       	ld	r18, Z
    1e34:	31 81       	ldd	r19, Z+1	; 0x01
    1e36:	42 81       	ldd	r20, Z+2	; 0x02
    1e38:	53 81       	ldd	r21, Z+3	; 0x03
    1e3a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1e3e:	6f ab       	std	Y+55, r22	; 0x37
    1e40:	7d af       	std	Y+61, r23	; 0x3d
    1e42:	c8 2e       	mov	r12, r24
    1e44:	d9 2e       	mov	r13, r25
    1e46:	6d a1       	ldd	r22, Y+37	; 0x25
    1e48:	7e a1       	ldd	r23, Y+38	; 0x26
    1e4a:	88 27       	eor	r24, r24
    1e4c:	77 fd       	sbrc	r23, 7
    1e4e:	80 95       	com	r24
    1e50:	98 2f       	mov	r25, r24
    1e52:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    1e56:	f7 01       	movw	r30, r14
    1e58:	e8 5a       	subi	r30, 0xA8	; 168
    1e5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1e5c:	20 81       	ld	r18, Z
    1e5e:	31 81       	ldd	r19, Z+1	; 0x01
    1e60:	42 81       	ldd	r20, Z+2	; 0x02
    1e62:	53 81       	ldd	r21, Z+3	; 0x03
    1e64:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <__subsf3>
    1e68:	f6 2e       	mov	r15, r22
    1e6a:	e7 2e       	mov	r14, r23
    1e6c:	8f af       	std	Y+63, r24	; 0x3f
    1e6e:	21 96       	adiw	r28, 0x01	; 1
    1e70:	9f af       	std	Y+63, r25	; 0x3f
    1e72:	21 97       	sbiw	r28, 0x01	; 1
    1e74:	7f a9       	ldd	r23, Y+55	; 0x37
    1e76:	6d ad       	ldd	r22, Y+61	; 0x3d
    1e78:	27 2f       	mov	r18, r23
    1e7a:	36 2f       	mov	r19, r22
    1e7c:	4c 2d       	mov	r20, r12
    1e7e:	5d 2d       	mov	r21, r13
    1e80:	67 2f       	mov	r22, r23
    1e82:	73 2f       	mov	r23, r19
    1e84:	8c 2d       	mov	r24, r12
    1e86:	9d 2d       	mov	r25, r13
    1e88:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1e8c:	6f ab       	std	Y+55, r22	; 0x37
    1e8e:	78 af       	std	Y+56, r23	; 0x38
    1e90:	89 af       	std	Y+57, r24	; 0x39
    1e92:	9a af       	std	Y+58, r25	; 0x3a
    1e94:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e96:	21 96       	adiw	r28, 0x01	; 1
    1e98:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e9a:	21 97       	sbiw	r28, 0x01	; 1
    1e9c:	2f 2d       	mov	r18, r15
    1e9e:	3e 2d       	mov	r19, r14
    1ea0:	49 2f       	mov	r20, r25
    1ea2:	58 2f       	mov	r21, r24
    1ea4:	6f 2d       	mov	r22, r15
    1ea6:	7e 2d       	mov	r23, r14
    1ea8:	89 2f       	mov	r24, r25
    1eaa:	95 2f       	mov	r25, r21
    1eac:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    1eb0:	9b 01       	movw	r18, r22
    1eb2:	ac 01       	movw	r20, r24
    1eb4:	6f a9       	ldd	r22, Y+55	; 0x37
    1eb6:	78 ad       	ldd	r23, Y+56	; 0x38
    1eb8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eba:	9a ad       	ldd	r25, Y+58	; 0x3a
    1ebc:	0e 94 10 17 	call	0x2e20	; 0x2e20 <__addsf3>
    1ec0:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	a9 01       	movw	r20, r18
    1eca:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    1ece:	88 23       	and	r24, r24
    1ed0:	0c f4       	brge	.+2      	; 0x1ed4 <main+0x5dc>
    1ed2:	d6 c2       	rjmp	.+1452   	; 0x2480 <main+0xb88>
						//                                stop_counter++;
						//                            }
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	4c e8       	ldi	r20, 0x8C	; 140
    1eda:	52 e4       	ldi	r21, 0x42	; 66
    1edc:	c5 01       	movw	r24, r10
    1ede:	b4 01       	movw	r22, r8
    1ee0:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
    1ee4:	18 16       	cp	r1, r24
    1ee6:	0c f4       	brge	.+2      	; 0x1eea <main+0x5f2>
    1ee8:	d0 c2       	rjmp	.+1440   	; 0x248a <main+0xb92>
						//set(PORTD,5);
					}
					else
					{
						//clear(PORTD,5);
						move_robot_to_puck(diff_theta,bank);
    1eea:	6d 81       	ldd	r22, Y+5	; 0x05
    1eec:	7e 81       	ldd	r23, Y+6	; 0x06
    1eee:	c8 01       	movw	r24, r16
    1ef0:	0e 94 92 0b 	call	0x1724	; 0x1724 <move_robot_to_puck>
    1ef4:	d6 c2       	rjmp	.+1452   	; 0x24a2 <main+0xbaa>
					}
		
				}
				else if (status_go_to_goal == 2){
    1ef6:	2b ad       	ldd	r18, Y+59	; 0x3b
    1ef8:	3c ad       	ldd	r19, Y+60	; 0x3c
    1efa:	22 30       	cpi	r18, 0x02	; 2
    1efc:	31 05       	cpc	r19, r1
    1efe:	b1 f5       	brne	.+108    	; 0x1f6c <main+0x674>
		
					calculate_diff_theta(0,&diff_theta, &bank);
    1f00:	9e 01       	movw	r18, r28
    1f02:	2b 5f       	subi	r18, 0xFB	; 251
    1f04:	3f 4f       	sbci	r19, 0xFF	; 255
    1f06:	ae 01       	movw	r20, r28
    1f08:	4f 5f       	subi	r20, 0xFF	; 255
    1f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f0c:	60 e0       	ldi	r22, 0x00	; 0
    1f0e:	70 e0       	ldi	r23, 0x00	; 0
    1f10:	cb 01       	movw	r24, r22
    1f12:	0e 94 75 0a 	call	0x14ea	; 0x14ea <calculate_diff_theta>
		
					status_go_to_goal = 3;
		
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
    1f16:	c9 80       	ldd	r12, Y+1	; 0x01
    1f18:	da 80       	ldd	r13, Y+2	; 0x02
    1f1a:	eb 80       	ldd	r14, Y+3	; 0x03
    1f1c:	fc 80       	ldd	r15, Y+4	; 0x04
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4c e0       	ldi	r20, 0x0C	; 12
    1f24:	52 e4       	ldi	r21, 0x42	; 66
    1f26:	c7 01       	movw	r24, r14
    1f28:	b6 01       	movw	r22, r12
    1f2a:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    1f2e:	88 23       	and	r24, r24
    1f30:	0c f4       	brge	.+2      	; 0x1f34 <main+0x63c>
    1f32:	ae c2       	rjmp	.+1372   	; 0x2490 <main+0xb98>
						//m_wait(1000);
						//set(PORTD,5);
					}
					else
					{
						if (bank == 0)
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	89 2b       	or	r24, r25
    1f3a:	61 f4       	brne	.+24     	; 0x1f54 <main+0x65c>
						turn_left_puck(diff_theta);
    1f3c:	c7 01       	movw	r24, r14
    1f3e:	b6 01       	movw	r22, r12
    1f40:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    1f44:	cb 01       	movw	r24, r22
    1f46:	0e 94 1a 0c 	call	0x1834	; 0x1834 <turn_left_puck>
				}
				else if (status_go_to_goal == 2){
		
					calculate_diff_theta(0,&diff_theta, &bank);
		
					status_go_to_goal = 3;
    1f4a:	43 e0       	ldi	r20, 0x03	; 3
    1f4c:	50 e0       	ldi	r21, 0x00	; 0
    1f4e:	5c af       	std	Y+60, r21	; 0x3c
    1f50:	4b af       	std	Y+59, r20	; 0x3b
    1f52:	a7 c2       	rjmp	.+1358   	; 0x24a2 <main+0xbaa>
					else
					{
						if (bank == 0)
						turn_left_puck(diff_theta);
						else
						turn_right_puck(diff_theta);
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    1f5c:	cb 01       	movw	r24, r22
    1f5e:	0e 94 2d 0c 	call	0x185a	; 0x185a <turn_right_puck>
				}
				else if (status_go_to_goal == 2){
		
					calculate_diff_theta(0,&diff_theta, &bank);
		
					status_go_to_goal = 3;
    1f62:	83 e0       	ldi	r24, 0x03	; 3
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	9c af       	std	Y+60, r25	; 0x3c
    1f68:	8b af       	std	Y+59, r24	; 0x3b
    1f6a:	9b c2       	rjmp	.+1334   	; 0x24a2 <main+0xbaa>
						else
						turn_right_puck(diff_theta);
					}
		
				}
				else if (status_go_to_goal == 3)
    1f6c:	eb ad       	ldd	r30, Y+59	; 0x3b
    1f6e:	fc ad       	ldd	r31, Y+60	; 0x3c
    1f70:	33 97       	sbiw	r30, 0x03	; 3
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <main+0x67e>
    1f74:	96 c2       	rjmp	.+1324   	; 0x24a2 <main+0xbaa>
				{
					//stop_motor();
					if (TARGET_NUM == 0) {
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	25 96       	adiw	r28, 0x05	; 5
    1f7a:	2e ad       	ldd	r18, Y+62	; 0x3e
    1f7c:	3f ad       	ldd	r19, Y+63	; 0x3f
    1f7e:	25 97       	sbiw	r28, 0x05	; 5
    1f80:	23 2b       	or	r18, r19
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <main+0x68e>
    1f84:	80 e0       	ldi	r24, 0x00	; 0
						TARGET_NUM = 1;
    1f86:	48 2f       	mov	r20, r24
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	25 96       	adiw	r28, 0x05	; 5
    1f8c:	5f af       	std	Y+63, r21	; 0x3f
    1f8e:	4e af       	std	Y+62, r20	; 0x3e
    1f90:	25 97       	sbiw	r28, 0x05	; 5
					}
					else {
						TARGET_NUM = 0;
					}
					status_go_to_goal = 0;
					state = FIND_PUCK;
    1f92:	83 e0       	ldi	r24, 0x03	; 3
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	90 93 47 01 	sts	0x0147, r25
    1f9a:	80 93 46 01 	sts	0x0146, r24
						TARGET_NUM = 1;
					}
					else {
						TARGET_NUM = 0;
					}
					status_go_to_goal = 0;
    1f9e:	1c ae       	std	Y+60, r1	; 0x3c
    1fa0:	1b ae       	std	Y+59, r1	; 0x3b
    1fa2:	7f c2       	rjmp	.+1278   	; 0x24a2 <main+0xbaa>
				//}
				//
	
	
				//Check if we have the puck
				if (PT2_left_inside > 1010 &&  PT3_right_inside > 1010)
    1fa4:	03 3f       	cpi	r16, 0xF3	; 243
    1fa6:	53 e0       	ldi	r21, 0x03	; 3
    1fa8:	15 07       	cpc	r17, r21
    1faa:	74 f0       	brlt	.+28     	; 0x1fc8 <main+0x6d0>
    1fac:	83 ef       	ldi	r24, 0xF3	; 243
    1fae:	a8 16       	cp	r10, r24
    1fb0:	83 e0       	ldi	r24, 0x03	; 3
    1fb2:	b8 06       	cpc	r11, r24
    1fb4:	4c f0       	brlt	.+18     	; 0x1fc8 <main+0x6d0>
				{
					state = GO_TO_GOAL_WITH_PUCK;
    1fb6:	85 e0       	ldi	r24, 0x05	; 5
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	90 93 47 01 	sts	0x0147, r25
    1fbe:	80 93 46 01 	sts	0x0146, r24
					//turnOnBlueLED();
		
					status_go_to_goal = 0;
    1fc2:	1c ae       	std	Y+60, r1	; 0x3c
    1fc4:	1b ae       	std	Y+59, r1	; 0x3b
					break;
    1fc6:	6d c2       	rjmp	.+1242   	; 0x24a2 <main+0xbaa>
				max_lr = 0;
				else
				max_lr = 1;
	
				//Check if the puck is up or down
				if (max_lr == 0)
    1fc8:	ce 14       	cp	r12, r14
    1fca:	df 04       	cpc	r13, r15
    1fcc:	54 f4       	brge	.+20     	; 0x1fe2 <main+0x6ea>
				{
					if (PT1_left_outside >= PT6_back_left)
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	e8 14       	cp	r14, r8
    1fd4:	f9 04       	cpc	r15, r9
    1fd6:	14 f0       	brlt	.+4      	; 0x1fdc <main+0x6e4>
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	90 e0       	ldi	r25, 0x00	; 0
					half_range = 0;
					else
					half_range = 1;
    1fdc:	9e af       	std	Y+62, r25	; 0x3e
    1fde:	8d af       	std	Y+61, r24	; 0x3d
    1fe0:	0b c0       	rjmp	.+22     	; 0x1ff8 <main+0x700>
				}
				else
				{
					if (PT4_right_outside >= PT5_back_right)
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	ef a9       	ldd	r30, Y+55	; 0x37
    1fe8:	f8 ad       	ldd	r31, Y+56	; 0x38
    1fea:	ce 16       	cp	r12, r30
    1fec:	df 06       	cpc	r13, r31
    1fee:	14 f0       	brlt	.+4      	; 0x1ff4 <main+0x6fc>
    1ff0:	80 e0       	ldi	r24, 0x00	; 0
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
				if (max_lr == 0)
				{
					if (PT1_left_outside >= PT6_back_left)
					half_range = 0;
					else
					half_range = 1;
    1ff4:	9e af       	std	Y+62, r25	; 0x3e
    1ff6:	8d af       	std	Y+61, r24	; 0x3d
				max_pt_backs = PT6_back_left;
	
	
	
				//                // If Insides see the puck
				if (PT1_left_outside < NOT_SEE_PUCK && PT2_left_inside < NOT_SEE_PUCK && PT3_right_inside < NOT_SEE_PUCK && PT4_right_outside < NOT_SEE_PUCK && PT5_back_right < NOT_SEE_PUCK && PT6_back_left < NOT_SEE_PUCK)
    1ff8:	fc e2       	ldi	r31, 0x2C	; 44
    1ffa:	ef 16       	cp	r14, r31
    1ffc:	f1 e0       	ldi	r31, 0x01	; 1
    1ffe:	ff 06       	cpc	r15, r31
    2000:	0c f5       	brge	.+66     	; 0x2044 <main+0x74c>
    2002:	0c 32       	cpi	r16, 0x2C	; 44
    2004:	21 e0       	ldi	r18, 0x01	; 1
    2006:	12 07       	cpc	r17, r18
    2008:	ec f4       	brge	.+58     	; 0x2044 <main+0x74c>
    200a:	3c e2       	ldi	r19, 0x2C	; 44
    200c:	a3 16       	cp	r10, r19
    200e:	31 e0       	ldi	r19, 0x01	; 1
    2010:	b3 06       	cpc	r11, r19
    2012:	c4 f4       	brge	.+48     	; 0x2044 <main+0x74c>
    2014:	4c e2       	ldi	r20, 0x2C	; 44
    2016:	c4 16       	cp	r12, r20
    2018:	41 e0       	ldi	r20, 0x01	; 1
    201a:	d4 06       	cpc	r13, r20
    201c:	9c f4       	brge	.+38     	; 0x2044 <main+0x74c>
    201e:	8f a9       	ldd	r24, Y+55	; 0x37
    2020:	98 ad       	ldd	r25, Y+56	; 0x38
    2022:	8c 32       	cpi	r24, 0x2C	; 44
    2024:	91 40       	sbci	r25, 0x01	; 1
    2026:	74 f4       	brge	.+28     	; 0x2044 <main+0x74c>
    2028:	fc e2       	ldi	r31, 0x2C	; 44
    202a:	8f 16       	cp	r8, r31
    202c:	f1 e0       	ldi	r31, 0x01	; 1
    202e:	9f 06       	cpc	r9, r31
    2030:	4c f4       	brge	.+18     	; 0x2044 <main+0x74c>
				{
					turnOffBlueLED();
    2032:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
					state = GO_TO_WPT;
    2036:	80 e5       	ldi	r24, 0x50	; 80
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	90 93 47 01 	sts	0x0147, r25
    203e:	80 93 46 01 	sts	0x0146, r24
					break;
    2042:	2f c2       	rjmp	.+1118   	; 0x24a2 <main+0xbaa>
				}
	
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700)))
    2044:	b8 01       	movw	r22, r16
    2046:	6a 0d       	add	r22, r10
    2048:	7b 1d       	adc	r23, r11
    204a:	88 27       	eor	r24, r24
    204c:	77 fd       	sbrc	r23, 7
    204e:	80 95       	com	r24
    2050:	98 2f       	mov	r25, r24
    2052:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	40 e0       	ldi	r20, 0x00	; 0
    205c:	5f e3       	ldi	r21, 0x3F	; 63
    205e:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2062:	6f af       	std	Y+63, r22	; 0x3f
    2064:	21 96       	adiw	r28, 0x01	; 1
    2066:	7f af       	std	Y+63, r23	; 0x3f
    2068:	21 97       	sbiw	r28, 0x01	; 1
    206a:	26 96       	adiw	r28, 0x06	; 6
    206c:	8f af       	std	Y+63, r24	; 0x3f
    206e:	26 97       	sbiw	r28, 0x06	; 6
    2070:	27 96       	adiw	r28, 0x07	; 7
    2072:	9f af       	std	Y+63, r25	; 0x3f
    2074:	27 97       	sbiw	r28, 0x07	; 7
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	48 e4       	ldi	r20, 0x48	; 72
    207c:	53 e4       	ldi	r21, 0x43	; 67
    207e:	0e 94 86 19 	call	0x330c	; 0x330c <__gesf2>
    2082:	88 23       	and	r24, r24
    2084:	54 f1       	brlt	.+84     	; 0x20da <main+0x7e2>
    2086:	2d eb       	ldi	r18, 0xBD	; 189
    2088:	e2 16       	cp	r14, r18
    208a:	22 e0       	ldi	r18, 0x02	; 2
    208c:	f2 06       	cpc	r15, r18
    208e:	2c f5       	brge	.+74     	; 0x20da <main+0x7e2>
    2090:	3d eb       	ldi	r19, 0xBD	; 189
    2092:	c3 16       	cp	r12, r19
    2094:	32 e0       	ldi	r19, 0x02	; 2
    2096:	d3 06       	cpc	r13, r19
    2098:	04 f5       	brge	.+64     	; 0x20da <main+0x7e2>
				{
					turnOnBlueLED();
    209a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
					status_go_to_goal = 1;
					int diff_PT_inside = abs(PT2_left_inside-PT3_right_inside);
    209e:	c8 01       	movw	r24, r16
    20a0:	8a 19       	sub	r24, r10
    20a2:	9b 09       	sbc	r25, r11
    20a4:	1a f4       	brpl	.+6      	; 0x20ac <main+0x7b4>
    20a6:	91 95       	neg	r25
    20a8:	81 95       	neg	r24
    20aa:	91 09       	sbc	r25, r1
    20ac:	68 2f       	mov	r22, r24
    20ae:	79 2f       	mov	r23, r25
					if (PT2_left_inside >= PT3_right_inside)
    20b0:	0a 15       	cp	r16, r10
    20b2:	1b 05       	cpc	r17, r11
    20b4:	4c f0       	brlt	.+18     	; 0x20c8 <main+0x7d0>
					{
						move_robot_to_puck(1,diff_PT_inside);
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 92 0b 	call	0x1724	; 0x1724 <move_robot_to_puck>
				}
	
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700)))
				{
					turnOnBlueLED();
					status_go_to_goal = 1;
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	50 e0       	ldi	r21, 0x00	; 0
    20c2:	5c af       	std	Y+60, r21	; 0x3c
    20c4:	4b af       	std	Y+59, r20	; 0x3b
    20c6:	ed c1       	rjmp	.+986    	; 0x24a2 <main+0xbaa>
						move_robot_to_puck(1,diff_PT_inside);
			
					}
					else
					{
						move_robot_to_puck(0,diff_PT_inside);
    20c8:	80 e0       	ldi	r24, 0x00	; 0
    20ca:	90 e0       	ldi	r25, 0x00	; 0
    20cc:	0e 94 92 0b 	call	0x1724	; 0x1724 <move_robot_to_puck>
				}
	
				if (((((PT2_left_inside+PT3_right_inside)/2.0) >= 200)) && ((PT1_left_outside <= 700) && (PT4_right_outside <= 700)))
				{
					turnOnBlueLED();
					status_go_to_goal = 1;
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	90 e0       	ldi	r25, 0x00	; 0
    20d4:	9c af       	std	Y+60, r25	; 0x3c
    20d6:	8b af       	std	Y+59, r24	; 0x3b
    20d8:	e4 c1       	rjmp	.+968    	; 0x24a2 <main+0xbaa>
					{
						move_robot_to_puck(0,diff_PT_inside);
					}
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	48 e4       	ldi	r20, 0x48	; 72
    20e0:	53 e4       	ldi	r21, 0x43	; 67
    20e2:	ef ad       	ldd	r30, Y+63	; 0x3f
    20e4:	21 96       	adiw	r28, 0x01	; 1
    20e6:	bf ad       	ldd	r27, Y+63	; 0x3f
    20e8:	21 97       	sbiw	r28, 0x01	; 1
    20ea:	26 96       	adiw	r28, 0x06	; 6
    20ec:	af ad       	ldd	r26, Y+63	; 0x3f
    20ee:	26 97       	sbiw	r28, 0x06	; 6
    20f0:	27 96       	adiw	r28, 0x07	; 7
    20f2:	ff ad       	ldd	r31, Y+63	; 0x3f
    20f4:	27 97       	sbiw	r28, 0x07	; 7
    20f6:	6e 2f       	mov	r22, r30
    20f8:	7b 2f       	mov	r23, r27
    20fa:	8a 2f       	mov	r24, r26
    20fc:	9f 2f       	mov	r25, r31
    20fe:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    2102:	88 23       	and	r24, r24
    2104:	9c f5       	brge	.+102    	; 0x216c <main+0x874>
    2106:	95 e6       	ldi	r25, 0x65	; 101
    2108:	e9 16       	cp	r14, r25
    210a:	f1 04       	cpc	r15, r1
    210c:	6c f4       	brge	.+26     	; 0x2128 <main+0x830>
    210e:	e5 e6       	ldi	r30, 0x65	; 101
    2110:	ce 16       	cp	r12, r30
    2112:	d1 04       	cpc	r13, r1
    2114:	4c f4       	brge	.+18     	; 0x2128 <main+0x830>
    2116:	f5 e6       	ldi	r31, 0x65	; 101
    2118:	8f 16       	cp	r8, r31
    211a:	91 04       	cpc	r9, r1
    211c:	2c f4       	brge	.+10     	; 0x2128 <main+0x830>
    211e:	2f a9       	ldd	r18, Y+55	; 0x37
    2120:	38 ad       	ldd	r19, Y+56	; 0x38
    2122:	25 36       	cpi	r18, 0x65	; 101
    2124:	31 05       	cpc	r19, r1
    2126:	14 f1       	brlt	.+68     	; 0x216c <main+0x874>
				{
					turnOffBlueLED();
    2128:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
					status_go_to_goal = 0;
					//Case where the puck is in front
					if (half_range == 0)
    212c:	4d ad       	ldd	r20, Y+61	; 0x3d
    212e:	5e ad       	ldd	r21, Y+62	; 0x3e
    2130:	45 2b       	or	r20, r21
    2132:	69 f4       	brne	.+26     	; 0x214e <main+0x856>
					{
						if (PT1_left_outside >= PT4_right_outside)
    2134:	ec 14       	cp	r14, r12
    2136:	fd 04       	cpc	r15, r13
    2138:	2c f0       	brlt	.+10     	; 0x2144 <main+0x84c>
						{
							turn_left();
    213a:	0e 94 0b 0c 	call	0x1816	; 0x1816 <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    213e:	1c ae       	std	Y+60, r1	; 0x3c
    2140:	1b ae       	std	Y+59, r1	; 0x3b
    2142:	af c1       	rjmp	.+862    	; 0x24a2 <main+0xbaa>
						if (PT1_left_outside >= PT4_right_outside)
						{
							turn_left();
						}
						else
						turn_right();
    2144:	0e 94 40 0c 	call	0x1880	; 0x1880 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    2148:	1c ae       	std	Y+60, r1	; 0x3c
    214a:	1b ae       	std	Y+59, r1	; 0x3b
    214c:	aa c1       	rjmp	.+852    	; 0x24a2 <main+0xbaa>
						else
						turn_right();
					}
					else
					{
						if (PT6_back_left >= PT5_back_right)
    214e:	8f a9       	ldd	r24, Y+55	; 0x37
    2150:	98 ad       	ldd	r25, Y+56	; 0x38
    2152:	88 16       	cp	r8, r24
    2154:	99 06       	cpc	r9, r25
    2156:	2c f0       	brlt	.+10     	; 0x2162 <main+0x86a>
						{
							turn_left();
    2158:	0e 94 0b 0c 	call	0x1816	; 0x1816 <turn_left>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    215c:	1c ae       	std	Y+60, r1	; 0x3c
    215e:	1b ae       	std	Y+59, r1	; 0x3b
    2160:	a0 c1       	rjmp	.+832    	; 0x24a2 <main+0xbaa>
						if (PT6_back_left >= PT5_back_right)
						{
							turn_left();
						}
						else
						turn_right();
    2162:	0e 94 40 0c 	call	0x1880	; 0x1880 <turn_right>
				}
				// If Insides do not see the puck
				else if ( (( (PT2_left_inside+PT3_right_inside)/2.0) < 200) && ((PT1_left_outside > 100) || (PT4_right_outside > 100) || (PT6_back_left > 100) || (PT5_back_right > 100)) )
				{
					turnOffBlueLED();
					status_go_to_goal = 0;
    2166:	1c ae       	std	Y+60, r1	; 0x3c
    2168:	1b ae       	std	Y+59, r1	; 0x3b
    216a:	9b c1       	rjmp	.+822    	; 0x24a2 <main+0xbaa>
						turn_right();
			
					}
				}
				else{
					state = GO_TO_WPT;
    216c:	80 e5       	ldi	r24, 0x50	; 80
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	90 93 47 01 	sts	0x0147, r25
    2174:	80 93 46 01 	sts	0x0146, r24
					turnOffBlueLED();
    2178:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
    217c:	92 c1       	rjmp	.+804    	; 0x24a2 <main+0xbaa>
	
				// --------------------------------------------------------------
				// INITIAL STATE
				// --------------------------------------------------------------
				case INITIAL_STATE:
				if (check(PINB,2))
    217e:	1a 9b       	sbis	0x03, 2	; 3
    2180:	07 c0       	rjmp	.+14     	; 0x2190 <main+0x898>
				{
					goal_pos_x = GOAL_A_POS_X;
    2182:	ec e9       	ldi	r30, 0x9C	; 156
    2184:	ff ef       	ldi	r31, 0xFF	; 255
    2186:	23 96       	adiw	r28, 0x03	; 3
    2188:	ff af       	std	Y+63, r31	; 0x3f
    218a:	ee af       	std	Y+62, r30	; 0x3e
    218c:	23 97       	sbiw	r28, 0x03	; 3
    218e:	06 c0       	rjmp	.+12     	; 0x219c <main+0x8a4>
					//                        goal_pos_y = TARGETS_Y[TARGET_NUM];
					//
				}
				else
				{
					goal_pos_x = GOAL_B_POS_X;
    2190:	23 e7       	ldi	r18, 0x73	; 115
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	23 96       	adiw	r28, 0x03	; 3
    2196:	3f af       	std	Y+63, r19	; 0x3f
    2198:	2e af       	std	Y+62, r18	; 0x3e
    219a:	23 97       	sbiw	r28, 0x03	; 3
					goal_pos_y = GOAL_B_POS_Y;
				}
				status_go_to_goal = 0;
				//                    state = GO_TO_GOAL_CURVED;
				state = FIND_PUCK;
    219c:	83 e0       	ldi	r24, 0x03	; 3
    219e:	90 e0       	ldi	r25, 0x00	; 0
    21a0:	90 93 47 01 	sts	0x0147, r25
    21a4:	80 93 46 01 	sts	0x0146, r24
				else
				{
					goal_pos_x = GOAL_B_POS_X;
					goal_pos_y = GOAL_B_POS_Y;
				}
				status_go_to_goal = 0;
    21a8:	1c ae       	std	Y+60, r1	; 0x3c
    21aa:	1b ae       	std	Y+59, r1	; 0x3b
				//                    state = GO_TO_GOAL_CURVED;
				state = FIND_PUCK;
				//state = GO_TO_WPT;
				break;
    21ac:	7a c1       	rjmp	.+756    	; 0x24a2 <main+0xbaa>
				// GO TO GOAL WITH PUCK
				// --------------------------------------------------------------
	
				case GO_TO_GOAL_WITH_PUCK:
	
					if ( PT2_left_inside < 900 || PT3_right_inside < 900 )
    21ae:	04 38       	cpi	r16, 0x84	; 132
    21b0:	13 40       	sbci	r17, 0x03	; 3
    21b2:	2c f0       	brlt	.+10     	; 0x21be <main+0x8c6>
    21b4:	44 e8       	ldi	r20, 0x84	; 132
    21b6:	a4 16       	cp	r10, r20
    21b8:	43 e0       	ldi	r20, 0x03	; 3
    21ba:	b4 06       	cpc	r11, r20
    21bc:	4c f4       	brge	.+18     	; 0x21d0 <main+0x8d8>
					{
						state = FIND_PUCK;
    21be:	83 e0       	ldi	r24, 0x03	; 3
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	90 93 47 01 	sts	0x0147, r25
    21c6:	80 93 46 01 	sts	0x0146, r24
						status_go_to_goal = 0;
    21ca:	1c ae       	std	Y+60, r1	; 0x3c
    21cc:	1b ae       	std	Y+59, r1	; 0x3b
						break;
    21ce:	69 c1       	rjmp	.+722    	; 0x24a2 <main+0xbaa>
					}
	
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    21d0:	0b a1       	ldd	r16, Y+35	; 0x23
    21d2:	1c a1       	ldd	r17, Y+36	; 0x24
    21d4:	c8 01       	movw	r24, r16
    21d6:	23 96       	adiw	r28, 0x03	; 3
    21d8:	ee ad       	ldd	r30, Y+62	; 0x3e
    21da:	ff ad       	ldd	r31, Y+63	; 0x3f
    21dc:	23 97       	sbiw	r28, 0x03	; 3
    21de:	8e 1b       	sub	r24, r30
    21e0:	9f 0b       	sbc	r25, r31
    21e2:	ed a0       	ldd	r14, Y+37	; 0x25
    21e4:	fe a0       	ldd	r15, Y+38	; 0x26
    21e6:	88 9f       	mul	r24, r24
    21e8:	b0 01       	movw	r22, r0
    21ea:	89 9f       	mul	r24, r25
    21ec:	70 0d       	add	r23, r0
    21ee:	70 0d       	add	r23, r0
    21f0:	11 24       	eor	r1, r1
    21f2:	ee 9c       	mul	r14, r14
    21f4:	c0 01       	movw	r24, r0
    21f6:	ef 9c       	mul	r14, r15
    21f8:	90 0d       	add	r25, r0
    21fa:	90 0d       	add	r25, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	68 0f       	add	r22, r24
    2200:	79 1f       	adc	r23, r25
    2202:	88 27       	eor	r24, r24
    2204:	77 fd       	sbrc	r23, 7
    2206:	80 95       	com	r24
    2208:	98 2f       	mov	r25, r24
    220a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    220e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <sqrt>
					if (dist_goal < THRESHOLD_DIST_GOAL)
    2212:	20 e0       	ldi	r18, 0x00	; 0
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	a9 01       	movw	r20, r18
    2218:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    221c:	88 23       	and	r24, r24
    221e:	4c f4       	brge	.+18     	; 0x2232 <main+0x93a>
					{
						status_go_to_goal = 0;
						state  = FIND_PUCK;
    2220:	83 e0       	ldi	r24, 0x03	; 3
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	90 93 47 01 	sts	0x0147, r25
    2228:	80 93 46 01 	sts	0x0146, r24
					}
	
					dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 0;
    222c:	1c ae       	std	Y+60, r1	; 0x3c
    222e:	1b ae       	std	Y+59, r1	; 0x3b
						state  = FIND_PUCK;
						break;
    2230:	38 c1       	rjmp	.+624    	; 0x24a2 <main+0xbaa>
					}
	
					if (status_go_to_goal == 0)
    2232:	2b ad       	ldd	r18, Y+59	; 0x3b
    2234:	3c ad       	ldd	r19, Y+60	; 0x3c
    2236:	23 2b       	or	r18, r19
    2238:	09 f0       	breq	.+2      	; 0x223c <main+0x944>
    223a:	4b c0       	rjmp	.+150    	; 0x22d2 <main+0x9da>
					{
		
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    223c:	66 27       	eor	r22, r22
    223e:	77 27       	eor	r23, r23
    2240:	6e 19       	sub	r22, r14
    2242:	7f 09       	sbc	r23, r15
    2244:	88 27       	eor	r24, r24
    2246:	77 fd       	sbrc	r23, 7
    2248:	80 95       	com	r24
    224a:	98 2f       	mov	r25, r24
    224c:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    2250:	6b 01       	movw	r12, r22
    2252:	7c 01       	movw	r14, r24
					}
	
					if (status_go_to_goal == 0)
					{
		
						dir_x = goal_pos_x-x_robot;
    2254:	23 96       	adiw	r28, 0x03	; 3
    2256:	6e ad       	ldd	r22, Y+62	; 0x3e
    2258:	7f ad       	ldd	r23, Y+63	; 0x3f
    225a:	23 97       	sbiw	r28, 0x03	; 3
    225c:	60 1b       	sub	r22, r16
    225e:	71 0b       	sbc	r23, r17
    2260:	88 27       	eor	r24, r24
    2262:	77 fd       	sbrc	r23, 7
    2264:	80 95       	com	r24
    2266:	98 2f       	mov	r25, r24
    2268:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    226c:	90 58       	subi	r25, 0x80	; 128
    226e:	a7 01       	movw	r20, r14
    2270:	96 01       	movw	r18, r12
    2272:	0e 94 83 17 	call	0x2f06	; 0x2f06 <atan2>
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	44 e3       	ldi	r20, 0x34	; 52
    227c:	53 e4       	ldi	r21, 0x43	; 67
    227e:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2282:	2b ed       	ldi	r18, 0xDB	; 219
    2284:	3f e0       	ldi	r19, 0x0F	; 15
    2286:	49 e4       	ldi	r20, 0x49	; 73
    2288:	50 e4       	ldi	r21, 0x40	; 64
    228a:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
		
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    228e:	9e 01       	movw	r18, r28
    2290:	2b 5f       	subi	r18, 0xFB	; 251
    2292:	3f 4f       	sbci	r19, 0xFF	; 255
    2294:	ae 01       	movw	r20, r28
    2296:	4f 5f       	subi	r20, 0xFF	; 255
    2298:	5f 4f       	sbci	r21, 0xFF	; 255
    229a:	0e 94 75 0a 	call	0x14ea	; 0x14ea <calculate_diff_theta>
		
						if (diff_theta <20)
    229e:	20 e0       	ldi	r18, 0x00	; 0
    22a0:	30 e0       	ldi	r19, 0x00	; 0
    22a2:	40 ea       	ldi	r20, 0xA0	; 160
    22a4:	51 e4       	ldi	r21, 0x41	; 65
    22a6:	69 81       	ldd	r22, Y+1	; 0x01
    22a8:	7a 81       	ldd	r23, Y+2	; 0x02
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__cmpsf2>
    22b2:	88 23       	and	r24, r24
    22b4:	0c f4       	brge	.+2      	; 0x22b8 <main+0x9c0>
    22b6:	f1 c0       	rjmp	.+482    	; 0x249a <main+0xba2>
							break;
						}
						else
						{
			
							if (bank == 0)
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	9e 81       	ldd	r25, Y+6	; 0x06
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	19 f4       	brne	.+6      	; 0x22c6 <main+0x9ce>
							{
								//turnOnBlueLED();
								circle_left();
    22c0:	0e 94 5e 0c 	call	0x18bc	; 0x18bc <circle_left>
    22c4:	ee c0       	rjmp	.+476    	; 0x24a2 <main+0xbaa>
								circle_started_before = 1;
							}
							else if (bank == 1)
    22c6:	01 97       	sbiw	r24, 0x01	; 1
    22c8:	09 f0       	breq	.+2      	; 0x22cc <main+0x9d4>
    22ca:	eb c0       	rjmp	.+470    	; 0x24a2 <main+0xbaa>
							{
								//turnOffBlueLED();
								circle_right();
    22cc:	0e 94 6d 0c 	call	0x18da	; 0x18da <circle_right>
    22d0:	e8 c0       	rjmp	.+464    	; 0x24a2 <main+0xbaa>
								circle_started_before = 1;
							}
			
						}
					}
					else if (status_go_to_goal == 1)
    22d2:	4b ad       	ldd	r20, Y+59	; 0x3b
    22d4:	5c ad       	ldd	r21, Y+60	; 0x3c
    22d6:	41 30       	cpi	r20, 0x01	; 1
    22d8:	51 05       	cpc	r21, r1
    22da:	09 f0       	breq	.+2      	; 0x22de <main+0x9e6>
    22dc:	e2 c0       	rjmp	.+452    	; 0x24a2 <main+0xbaa>
					{
						dir_x = goal_pos_x-x_robot;
						dir_y = goal_pos_y-y_robot;
    22de:	66 27       	eor	r22, r22
    22e0:	77 27       	eor	r23, r23
    22e2:	6e 19       	sub	r22, r14
    22e4:	7f 09       	sbc	r23, r15
    22e6:	88 27       	eor	r24, r24
    22e8:	77 fd       	sbrc	r23, 7
    22ea:	80 95       	com	r24
    22ec:	98 2f       	mov	r25, r24
    22ee:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
    22f2:	6b 01       	movw	r12, r22
    22f4:	7c 01       	movw	r14, r24
			
						}
					}
					else if (status_go_to_goal == 1)
					{
						dir_x = goal_pos_x-x_robot;
    22f6:	23 96       	adiw	r28, 0x03	; 3
    22f8:	6e ad       	ldd	r22, Y+62	; 0x3e
    22fa:	7f ad       	ldd	r23, Y+63	; 0x3f
    22fc:	23 97       	sbiw	r28, 0x03	; 3
    22fe:	60 1b       	sub	r22, r16
    2300:	71 0b       	sbc	r23, r17
    2302:	88 27       	eor	r24, r24
    2304:	77 fd       	sbrc	r23, 7
    2306:	80 95       	com	r24
    2308:	98 2f       	mov	r25, r24
    230a:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__floatsisf>
						dir_y = goal_pos_y-y_robot;
						dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    230e:	90 58       	subi	r25, 0x80	; 128
    2310:	a7 01       	movw	r20, r14
    2312:	96 01       	movw	r18, r12
    2314:	0e 94 83 17 	call	0x2f06	; 0x2f06 <atan2>
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	44 e3       	ldi	r20, 0x34	; 52
    231e:	53 e4       	ldi	r21, 0x43	; 67
    2320:	0e 94 91 19 	call	0x3322	; 0x3322 <__mulsf3>
    2324:	2b ed       	ldi	r18, 0xDB	; 219
    2326:	3f e0       	ldi	r19, 0x0F	; 15
    2328:	49 e4       	ldi	r20, 0x49	; 73
    232a:	50 e4       	ldi	r21, 0x40	; 64
    232c:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
		
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
    2330:	9e 01       	movw	r18, r28
    2332:	2b 5f       	subi	r18, 0xFB	; 251
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	ae 01       	movw	r20, r28
    2338:	4f 5f       	subi	r20, 0xFF	; 255
    233a:	5f 4f       	sbci	r21, 0xFF	; 255
    233c:	0e 94 75 0a 	call	0x14ea	; 0x14ea <calculate_diff_theta>
		
						move_robot_after_get_puck(bank,diff_theta);
    2340:	69 81       	ldd	r22, Y+1	; 0x01
    2342:	7a 81       	ldd	r23, Y+2	; 0x02
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	0e 94 45 18 	call	0x308a	; 0x308a <__fixsfsi>
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	9e 81       	ldd	r25, Y+6	; 0x06
    2350:	0e 94 be 0b 	call	0x177c	; 0x177c <move_robot_after_get_puck>
    2354:	a6 c0       	rjmp	.+332    	; 0x24a2 <main+0xbaa>
				
				// --------------------------------------------------------------
				// SYSTEM STATE
				// --------------------------------------------------------------
				case SYSTEM_STATE:
					m_red(TOGGLE);
    2356:	6e 9a       	sbi	0x0d, 6	; 13
    2358:	9e b1       	in	r25, 0x0e	; 14
    235a:	80 e4       	ldi	r24, 0x40	; 64
    235c:	89 27       	eor	r24, r25
    235e:	8e b9       	out	0x0e, r24	; 14
					switch (buffer_rec[0])
    2360:	80 91 4c 01 	lds	r24, 0x014C
    2364:	83 3a       	cpi	r24, 0xA3	; 163
    2366:	39 f1       	breq	.+78     	; 0x23b6 <main+0xabe>
    2368:	38 f4       	brcc	.+14     	; 0x2378 <main+0xa80>
    236a:	81 3a       	cpi	r24, 0xA1	; 161
    236c:	a9 f0       	breq	.+42     	; 0x2398 <main+0xaa0>
    236e:	c8 f4       	brcc	.+50     	; 0x23a2 <main+0xaaa>
    2370:	80 3a       	cpi	r24, 0xA0	; 160
    2372:	09 f0       	breq	.+2      	; 0x2376 <main+0xa7e>
    2374:	96 c0       	rjmp	.+300    	; 0x24a2 <main+0xbaa>
    2376:	09 c0       	rjmp	.+18     	; 0x238a <main+0xa92>
    2378:	86 3a       	cpi	r24, 0xA6	; 166
    237a:	b9 f1       	breq	.+110    	; 0x23ea <main+0xaf2>
    237c:	87 3a       	cpi	r24, 0xA7	; 167
    237e:	09 f4       	brne	.+2      	; 0x2382 <main+0xa8a>
    2380:	44 c0       	rjmp	.+136    	; 0x240a <main+0xb12>
    2382:	84 3a       	cpi	r24, 0xA4	; 164
    2384:	09 f0       	breq	.+2      	; 0x2388 <main+0xa90>
    2386:	8d c0       	rjmp	.+282    	; 0x24a2 <main+0xbaa>
    2388:	20 c0       	rjmp	.+64     	; 0x23ca <main+0xad2>
					{
						//Comm test
						case 0xA0:
						state = BLUE_LED_STATE;
    238a:	86 e1       	ldi	r24, 0x16	; 22
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	90 93 47 01 	sts	0x0147, r25
    2392:	80 93 46 01 	sts	0x0146, r24
						break;
    2396:	85 c0       	rjmp	.+266    	; 0x24a2 <main+0xbaa>
						//pause_bool = 0;
						//}else
						//{
						//state = INITIAL_STATE;
						//}
						state = INITIAL_STATE;
    2398:	10 92 47 01 	sts	0x0147, r1
    239c:	10 92 46 01 	sts	0x0146, r1
						//turnOnBlueLED();
						break;
    23a0:	80 c0       	rjmp	.+256    	; 0x24a2 <main+0xbaa>
					
						//Goal A
						case 0xA2:
						if (check(PINB,2))
    23a2:	83 b1       	in	r24, 0x03	; 3
						celebrate();
						stop_motor();
    23a4:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    23a8:	85 e1       	ldi	r24, 0x15	; 21
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	90 93 47 01 	sts	0x0147, r25
    23b0:	80 93 46 01 	sts	0x0146, r24
						break;
    23b4:	76 c0       	rjmp	.+236    	; 0x24a2 <main+0xbaa>
					
						//Goal B
						case 0xA3:
						if (!check(PINB,2))
    23b6:	83 b1       	in	r24, 0x03	; 3
						celebrate();
						stop_motor();
    23b8:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    23bc:	85 e1       	ldi	r24, 0x15	; 21
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	90 93 47 01 	sts	0x0147, r25
    23c4:	80 93 46 01 	sts	0x0146, r24
						break;
    23c8:	6c c0       	rjmp	.+216    	; 0x24a2 <main+0xbaa>
					
						//Pause
						case 0xA4:
						pause_bool = 1;
						stop_counter = 0;
						go_bwd();
    23ca:	0e 94 4f 0c 	call	0x189e	; 0x189e <go_bwd>
    23ce:	80 e0       	ldi	r24, 0x00	; 0
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    23d4:	88 3e       	cpi	r24, 0xE8	; 232
    23d6:	53 e0       	ldi	r21, 0x03	; 3
    23d8:	95 07       	cpc	r25, r21
    23da:	d9 f7       	brne	.-10     	; 0x23d2 <main+0xada>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    23dc:	85 e1       	ldi	r24, 0x15	; 21
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	90 93 47 01 	sts	0x0147, r25
    23e4:	80 93 46 01 	sts	0x0146, r24
						break;
    23e8:	5c c0       	rjmp	.+184    	; 0x24a2 <main+0xbaa>
					
						//Halftime
						case 0xA6:
						stop_counter = 0;
						go_bwd();
    23ea:	0e 94 4f 0c 	call	0x189e	; 0x189e <go_bwd>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    23f4:	88 3e       	cpi	r24, 0xE8	; 232
    23f6:	e3 e0       	ldi	r30, 0x03	; 3
    23f8:	9e 07       	cpc	r25, r30
    23fa:	d9 f7       	brne	.-10     	; 0x23f2 <main+0xafa>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    23fc:	85 e1       	ldi	r24, 0x15	; 21
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	90 93 47 01 	sts	0x0147, r25
    2404:	80 93 46 01 	sts	0x0146, r24
						break;
    2408:	4c c0       	rjmp	.+152    	; 0x24a2 <main+0xbaa>
					
						//Game over
						case 0xA7:
						if (check(PINB,2))
    240a:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
							celebrate();
						}
						stop_motor();
    240c:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_motor>
						stop_counter = 0;
						go_bwd();
    2410:	0e 94 4f 0c 	call	0x189e	; 0x189e <go_bwd>
    2414:	80 e0       	ldi	r24, 0x00	; 0
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	01 96       	adiw	r24, 0x01	; 1
						while(stop_counter<TIME_STOP)
    241a:	88 3e       	cpi	r24, 0xE8	; 232
    241c:	f3 e0       	ldi	r31, 0x03	; 3
    241e:	9f 07       	cpc	r25, r31
    2420:	d9 f7       	brne	.-10     	; 0x2418 <main+0xb20>
						{
							stop_counter++;
						}
						state = STOP_STATE;
    2422:	85 e1       	ldi	r24, 0x15	; 21
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	90 93 47 01 	sts	0x0147, r25
    242a:	80 93 46 01 	sts	0x0146, r24
						break;
    242e:	39 c0       	rjmp	.+114    	; 0x24a2 <main+0xbaa>
	
				// --------------------------------------------------------------
				// BLUE LED STATE
				// --------------------------------------------------------------
				case BLUE_LED_STATE:
				stop_motor();
    2430:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_motor>
				turnOnBlueLED();
    2434:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <turnOnBlueLED>
    2438:	2f eb       	ldi	r18, 0xBF	; 191
    243a:	37 e2       	ldi	r19, 0x27	; 39
    243c:	49 e0       	ldi	r20, 0x09	; 9
    243e:	21 50       	subi	r18, 0x01	; 1
    2440:	30 40       	sbci	r19, 0x00	; 0
    2442:	40 40       	sbci	r20, 0x00	; 0
    2444:	e1 f7       	brne	.-8      	; 0x243e <main+0xb46>
    2446:	00 c0       	rjmp	.+0      	; 0x2448 <main+0xb50>
    2448:	00 00       	nop
				m_wait(3000);
				turnOffBlueLED();
    244a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
				state = STOP_STATE;
    244e:	85 e1       	ldi	r24, 0x15	; 21
    2450:	90 e0       	ldi	r25, 0x00	; 0
    2452:	90 93 47 01 	sts	0x0147, r25
    2456:	80 93 46 01 	sts	0x0146, r24
				break;
    245a:	23 c0       	rjmp	.+70     	; 0x24a2 <main+0xbaa>
				// --------------------------------------------------------------
				// STOP STATE
				// --------------------------------------------------------------
				case STOP_STATE:
				//m_green(ON);
				turnOffBlueLED();
    245c:	0e 94 f6 00 	call	0x1ec	; 0x1ec <turnOffBlueLED>
				stop_motor();
    2460:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_motor>
				break;
    2464:	1e c0       	rjmp	.+60     	; 0x24a2 <main+0xbaa>
	
				// --------------------------------------------------------------
				// DEFAULT STATE
				// --------------------------------------------------------------
				default:
				stop_motor();
    2466:	0e 94 02 0c 	call	0x1804	; 0x1804 <stop_motor>
				break;
    246a:	1b c0       	rjmp	.+54     	; 0x24a2 <main+0xbaa>
				if (status_go_to_goal == 0)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
    246c:	82 e0       	ldi	r24, 0x02	; 2
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9c af       	std	Y+60, r25	; 0x3c
    2472:	8b af       	std	Y+59, r24	; 0x3b
    2474:	16 c0       	rjmp	.+44     	; 0x24a2 <main+0xbaa>
					}
		
		
					//move_robot(diff_theta,dist_goal,bank);
					else if (diff_theta < THRESHOLD_ANGLE_GOAL) {
						status_go_to_goal = 1;
    2476:	e1 e0       	ldi	r30, 0x01	; 1
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	fc af       	std	Y+60, r31	; 0x3c
    247c:	eb af       	std	Y+59, r30	; 0x3b
    247e:	11 c0       	rjmp	.+34     	; 0x24a2 <main+0xbaa>
				else if (status_go_to_goal == 1)
				{
					dist_goal = sqrt((x_robot-TARGETS_X[TARGET_NUM])*(x_robot-TARGETS_X[TARGET_NUM])+(y_robot-TARGETS_Y[TARGET_NUM])*(y_robot-TARGETS_Y[TARGET_NUM]));
					if (dist_goal < THRESHOLD_DIST_GOAL)
					{
						status_go_to_goal = 2;
    2480:	22 e0       	ldi	r18, 0x02	; 2
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	3c af       	std	Y+60, r19	; 0x3c
    2486:	2b af       	std	Y+59, r18	; 0x3b
    2488:	0c c0       	rjmp	.+24     	; 0x24a2 <main+0xbaa>
						//stop_motor();
						//m_wait(1000);
					}
					else if (diff_theta > 2.0*THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 0;
    248a:	1c ae       	std	Y+60, r1	; 0x3c
    248c:	1b ae       	std	Y+59, r1	; 0x3b
    248e:	09 c0       	rjmp	.+18     	; 0x24a2 <main+0xbaa>
		
					status_go_to_goal = 3;
		
					if (diff_theta < THRESHOLD_ANGLE_GOAL)
					{
						status_go_to_goal = 3;
    2490:	43 e0       	ldi	r20, 0x03	; 3
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	5c af       	std	Y+60, r21	; 0x3c
    2496:	4b af       	std	Y+59, r20	; 0x3b
    2498:	04 c0       	rjmp	.+8      	; 0x24a2 <main+0xbaa>
		
						calculate_diff_theta(dir_angle,&diff_theta,&bank);
		
						if (diff_theta <20)
						{
							status_go_to_goal = 1;
    249a:	81 e0       	ldi	r24, 0x01	; 1
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c af       	std	Y+60, r25	; 0x3c
    24a0:	8b af       	std	Y+59, r24	; 0x3b
				//m_green(TOGGLE);
				//m_wait(250);
				//}
				// --------------------------------------------------------------
			}		
			flag_timer = 0;        
    24a2:	10 92 4b 01 	sts	0x014B, r1
    24a6:	10 92 4a 01 	sts	0x014A, r1
    24aa:	b6 ca       	rjmp	.-2708   	; 0x1a18 <main+0x120>
    m_disableJTAG();
    
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    24ac:	ee 24       	eor	r14, r14
    24ae:	e3 94       	inc	r14
    24b0:	f1 2c       	mov	r15, r1
    24b2:	0a cb       	rjmp	.-2540   	; 0x1ac8 <main+0x1d0>
					case(6):
					PT7_have_puck = ADC;
					break;
				}
	
				set(ADCSRA,ADIF);               // After doing the conversion reset flag
    24b4:	f1 01       	movw	r30, r2
    24b6:	80 81       	ld	r24, Z
    24b8:	80 61       	ori	r24, 0x10	; 16
    24ba:	80 83       	st	Z, r24
    24bc:	02 cb       	rjmp	.-2556   	; 0x1ac2 <main+0x1ca>

000024be <__vector_41>:

// --------------------------------------------------------------
// INTERRUPTS
// --------------------------------------------------------------
ISR(TIMER4_OVF_vect)
{
    24be:	1f 92       	push	r1
    24c0:	0f 92       	push	r0
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	0f 92       	push	r0
    24c6:	11 24       	eor	r1, r1
    24c8:	8f 93       	push	r24
    24ca:	9f 93       	push	r25
	//m_green(ON);
	flag_timer = 1;
    24cc:	81 e0       	ldi	r24, 0x01	; 1
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	90 93 4b 01 	sts	0x014B, r25
    24d4:	80 93 4a 01 	sts	0x014A, r24
}
    24d8:	9f 91       	pop	r25
    24da:	8f 91       	pop	r24
    24dc:	0f 90       	pop	r0
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	0f 90       	pop	r0
    24e2:	1f 90       	pop	r1
    24e4:	18 95       	reti

000024e6 <__vector_3>:

ISR(INT2_vect)
{
    24e6:	1f 92       	push	r1
    24e8:	0f 92       	push	r0
    24ea:	0f b6       	in	r0, 0x3f	; 63
    24ec:	0f 92       	push	r0
    24ee:	11 24       	eor	r1, r1
    24f0:	8f 93       	push	r24
    24f2:	9f 93       	push	r25
	//Read
	//past_state = state;
	//state = SYSTEM_STATE;
	flag_system = 1;
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	90 93 49 01 	sts	0x0149, r25
    24fc:	80 93 48 01 	sts	0x0148, r24
	flag_timer= 1;
    2500:	90 93 4b 01 	sts	0x014B, r25
    2504:	80 93 4a 01 	sts	0x014A, r24
	m_green(TOGGLE); // Indicator receiving from RF
    2508:	6a 9a       	sbi	0x0d, 2	; 13
    250a:	9e b1       	in	r25, 0x0e	; 14
    250c:	84 e0       	ldi	r24, 0x04	; 4
    250e:	89 27       	eor	r24, r25
    2510:	8e b9       	out	0x0e, r24	; 14
}
    2512:	9f 91       	pop	r25
    2514:	8f 91       	pop	r24
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti

00002520 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2520:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2522:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2524:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2526:	8c e0       	ldi	r24, 0x0C	; 12
    2528:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    252c:	e9 e6       	ldi	r30, 0x69	; 105
    252e:	f0 e0       	ldi	r31, 0x00	; 0
    2530:	80 81       	ld	r24, Z
    2532:	80 62       	ori	r24, 0x20	; 32
    2534:	80 83       	st	Z, r24
    2536:	80 81       	ld	r24, Z
    2538:	8f 7e       	andi	r24, 0xEF	; 239
    253a:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    253c:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    253e:	78 94       	sei
    2540:	08 95       	ret

00002542 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	18 2f       	mov	r17, r24
    254a:	d6 2f       	mov	r29, r22
    254c:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    254e:	0e 94 90 12 	call	0x2520	; 0x2520 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2552:	94 ea       	ldi	r25, 0xA4	; 164
    2554:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2558:	ec eb       	ldi	r30, 0xBC	; 188
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	90 81       	ld	r25, Z
    255e:	99 23       	and	r25, r25
    2560:	ec f7       	brge	.-6      	; 0x255c <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2562:	90 e5       	ldi	r25, 0x50	; 80
    2564:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    2568:	94 e8       	ldi	r25, 0x84	; 132
    256a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    256e:	ec eb       	ldi	r30, 0xBC	; 188
    2570:	f0 e0       	ldi	r31, 0x00	; 0
    2572:	90 81       	ld	r25, Z
    2574:	99 23       	and	r25, r25
    2576:	ec f7       	brge	.-6      	; 0x2572 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    2578:	90 91 b9 00 	lds	r25, 0x00B9
    257c:	98 7f       	andi	r25, 0xF8	; 248
    257e:	90 32       	cpi	r25, 0x20	; 32
    2580:	29 f4       	brne	.+10     	; 0x258c <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2582:	84 e9       	ldi	r24, 0x94	; 148
    2584:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    2588:	80 e0       	ldi	r24, 0x00	; 0
    258a:	2d c0       	rjmp	.+90     	; 0x25e6 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    2592:	84 e8       	ldi	r24, 0x84	; 132
    2594:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2598:	ec eb       	ldi	r30, 0xBC	; 188
    259a:	f0 e0       	ldi	r31, 0x00	; 0
    259c:	90 81       	ld	r25, Z
    259e:	99 23       	and	r25, r25
    25a0:	ec f7       	brge	.-6      	; 0x259c <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    25a2:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    25a6:	84 e8       	ldi	r24, 0x84	; 132
    25a8:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    25ac:	ec eb       	ldi	r30, 0xBC	; 188
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	88 23       	and	r24, r24
    25b4:	ec f7       	brge	.-6      	; 0x25b0 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    25b6:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    25ba:	84 e8       	ldi	r24, 0x84	; 132
    25bc:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    25c0:	ec eb       	ldi	r30, 0xBC	; 188
    25c2:	f0 e0       	ldi	r31, 0x00	; 0
    25c4:	80 81       	ld	r24, Z
    25c6:	88 23       	and	r24, r24
    25c8:	ec f7       	brge	.-6      	; 0x25c4 <m_rf_open+0x82>
	
	TWDR = packet_length;
    25ca:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    25ce:	84 e8       	ldi	r24, 0x84	; 132
    25d0:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    25d4:	ec eb       	ldi	r30, 0xBC	; 188
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	88 23       	and	r24, r24
    25dc:	ec f7       	brge	.-6      	; 0x25d8 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    25de:	84 e9       	ldi	r24, 0x94	; 148
    25e0:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    25e4:	81 e0       	ldi	r24, 0x01	; 1
}
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	1f 91       	pop	r17
    25ec:	08 95       	ret

000025ee <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    25ee:	cf 93       	push	r28
    25f0:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    25f2:	24 ea       	ldi	r18, 0xA4	; 164
    25f4:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    25f8:	ec eb       	ldi	r30, 0xBC	; 188
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	20 81       	ld	r18, Z
    25fe:	22 23       	and	r18, r18
    2600:	ec f7       	brge	.-6      	; 0x25fc <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2602:	21 e5       	ldi	r18, 0x51	; 81
    2604:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    2608:	24 e8       	ldi	r18, 0x84	; 132
    260a:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    260e:	ec eb       	ldi	r30, 0xBC	; 188
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	20 81       	ld	r18, Z
    2614:	22 23       	and	r18, r18
    2616:	ec f7       	brge	.-6      	; 0x2612 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    2618:	20 91 b9 00 	lds	r18, 0x00B9
    261c:	28 7f       	andi	r18, 0xF8	; 248
    261e:	28 34       	cpi	r18, 0x48	; 72
    2620:	29 f4       	brne	.+10     	; 0x262c <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2622:	84 e9       	ldi	r24, 0x94	; 148
    2624:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    2628:	80 e0       	ldi	r24, 0x00	; 0
    262a:	3f c0       	rjmp	.+126    	; 0x26aa <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    262c:	24 ec       	ldi	r18, 0xC4	; 196
    262e:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2632:	ec eb       	ldi	r30, 0xBC	; 188
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	20 81       	ld	r18, Z
    2638:	22 23       	and	r18, r18
    263a:	ec f7       	brge	.-6      	; 0x2636 <m_rf_read+0x48>
	bytes = TWDR;
    263c:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    2640:	46 13       	cpse	r20, r22
    2642:	09 c0       	rjmp	.+18     	; 0x2656 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	41 50       	subi	r20, 0x01	; 1
    2648:	51 09       	sbc	r21, r1
    264a:	14 16       	cp	r1, r20
    264c:	15 06       	cpc	r1, r21
    264e:	44 f0       	brlt	.+16     	; 0x2660 <m_rf_read+0x72>
    2650:	40 e0       	ldi	r20, 0x00	; 0
    2652:	50 e0       	ldi	r21, 0x00	; 0
    2654:	18 c0       	rjmp	.+48     	; 0x2686 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2656:	84 e9       	ldi	r24, 0x94	; 148
    2658:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    265c:	80 e0       	ldi	r24, 0x00	; 0
    265e:	25 c0       	rjmp	.+74     	; 0x26aa <m_rf_read+0xbc>
    2660:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2666:	ec eb       	ldi	r30, 0xBC	; 188
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    266c:	cb eb       	ldi	r28, 0xBB	; 187
    266e:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2670:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2672:	60 81       	ld	r22, Z
    2674:	66 23       	and	r22, r22
    2676:	ec f7       	brge	.-6      	; 0x2672 <m_rf_read+0x84>
		buffer[i] = TWDR;
    2678:	68 81       	ld	r22, Y
    267a:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    267c:	2f 5f       	subi	r18, 0xFF	; 255
    267e:	3f 4f       	sbci	r19, 0xFF	; 255
    2680:	24 17       	cp	r18, r20
    2682:	35 07       	cpc	r19, r21
    2684:	ac f3       	brlt	.-22     	; 0x2670 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2686:	24 e8       	ldi	r18, 0x84	; 132
    2688:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    268c:	ec eb       	ldi	r30, 0xBC	; 188
    268e:	f0 e0       	ldi	r31, 0x00	; 0
    2690:	20 81       	ld	r18, Z
    2692:	22 23       	and	r18, r18
    2694:	ec f7       	brge	.-6      	; 0x2690 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    2696:	20 91 bb 00 	lds	r18, 0x00BB
    269a:	fc 01       	movw	r30, r24
    269c:	e4 0f       	add	r30, r20
    269e:	f5 1f       	adc	r31, r21
    26a0:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    26a2:	84 e9       	ldi	r24, 0x94	; 148
    26a4:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
}
    26aa:	df 91       	pop	r29
    26ac:	cf 91       	pop	r28
    26ae:	08 95       	ret

000026b0 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    26b0:	1f 92       	push	r1
    26b2:	0f 92       	push	r0
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	0f 92       	push	r0
    26b8:	11 24       	eor	r1, r1
    26ba:	8f 93       	push	r24
    26bc:	9f 93       	push	r25
    26be:	ef 93       	push	r30
    26c0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    26c2:	e1 ee       	ldi	r30, 0xE1	; 225
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	80 81       	ld	r24, Z
        UDINT = 0;
    26c8:	10 82       	st	Z, r1
        if (intbits & (1<<EORSTI)) {
    26ca:	83 ff       	sbrs	r24, 3
    26cc:	11 c0       	rjmp	.+34     	; 0x26f0 <__vector_10+0x40>
		UENUM = 0;
    26ce:	10 92 e9 00 	sts	0x00E9, r1
		UECONX = 1;
    26d2:	91 e0       	ldi	r25, 0x01	; 1
    26d4:	90 93 eb 00 	sts	0x00EB, r25
		UECFG0X = EP_TYPE_CONTROL;
    26d8:	10 92 ec 00 	sts	0x00EC, r1
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    26dc:	92 e1       	ldi	r25, 0x12	; 18
    26de:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX = (1<<RXSTPE);
    26e2:	98 e0       	ldi	r25, 0x08	; 8
    26e4:	90 93 f0 00 	sts	0x00F0, r25
		usb_configuration = 0;
    26e8:	10 92 6f 01 	sts	0x016F, r1
		cdc_line_rtsdtr = 0;
    26ec:	10 92 70 01 	sts	0x0170, r1
        }
	if (intbits & (1<<SOFI)) {
    26f0:	82 ff       	sbrs	r24, 2
    26f2:	13 c0       	rjmp	.+38     	; 0x271a <__vector_10+0x6a>
		if (usb_configuration) {
    26f4:	80 91 6f 01 	lds	r24, 0x016F
    26f8:	88 23       	and	r24, r24
    26fa:	79 f0       	breq	.+30     	; 0x271a <__vector_10+0x6a>
			t = transmit_flush_timer;
    26fc:	80 91 6e 01 	lds	r24, 0x016E
			if (t) {
    2700:	88 23       	and	r24, r24
    2702:	59 f0       	breq	.+22     	; 0x271a <__vector_10+0x6a>
				transmit_flush_timer = --t;
    2704:	81 50       	subi	r24, 0x01	; 1
    2706:	80 93 6e 01 	sts	0x016E, r24
				if (!t) {
    270a:	81 11       	cpse	r24, r1
    270c:	06 c0       	rjmp	.+12     	; 0x271a <__vector_10+0x6a>
					UENUM = CDC_TX_ENDPOINT;
    270e:	84 e0       	ldi	r24, 0x04	; 4
    2710:	80 93 e9 00 	sts	0x00E9, r24
					UEINTX = 0x3A;
    2714:	8a e3       	ldi	r24, 0x3A	; 58
    2716:	80 93 e8 00 	sts	0x00E8, r24
				}
			}
		}
	}
}
    271a:	ff 91       	pop	r31
    271c:	ef 91       	pop	r30
    271e:	9f 91       	pop	r25
    2720:	8f 91       	pop	r24
    2722:	0f 90       	pop	r0
    2724:	0f be       	out	0x3f, r0	; 63
    2726:	0f 90       	pop	r0
    2728:	1f 90       	pop	r1
    272a:	18 95       	reti

0000272c <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    272c:	1f 92       	push	r1
    272e:	0f 92       	push	r0
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	0f 92       	push	r0
    2734:	11 24       	eor	r1, r1
    2736:	0f 93       	push	r16
    2738:	1f 93       	push	r17
    273a:	2f 93       	push	r18
    273c:	3f 93       	push	r19
    273e:	4f 93       	push	r20
    2740:	5f 93       	push	r21
    2742:	6f 93       	push	r22
    2744:	7f 93       	push	r23
    2746:	8f 93       	push	r24
    2748:	9f 93       	push	r25
    274a:	af 93       	push	r26
    274c:	bf 93       	push	r27
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	ef 93       	push	r30
    2754:	ff 93       	push	r31
	uint16_t wLength;
	uint16_t desc_val;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

        UENUM = 0;
    2756:	10 92 e9 00 	sts	0x00E9, r1
        intbits = UEINTX;
    275a:	80 91 e8 00 	lds	r24, 0x00E8
        if (intbits & (1<<RXSTPI)) {
    275e:	83 ff       	sbrs	r24, 3
    2760:	51 c1       	rjmp	.+674    	; 0x2a04 <__vector_11+0x2d8>
                bmRequestType = UEDATX;
    2762:	e1 ef       	ldi	r30, 0xF1	; 241
    2764:	f0 e0       	ldi	r31, 0x00	; 0
    2766:	70 81       	ld	r23, Z
                bRequest = UEDATX;
    2768:	40 81       	ld	r20, Z
                wValue = UEDATX;
    276a:	20 81       	ld	r18, Z
                wValue |= (UEDATX << 8);
    276c:	30 81       	ld	r19, Z
    276e:	93 2f       	mov	r25, r19
    2770:	80 e0       	ldi	r24, 0x00	; 0
    2772:	dc 01       	movw	r26, r24
    2774:	a2 2b       	or	r26, r18
    2776:	9d 01       	movw	r18, r26
                wIndex = UEDATX;
    2778:	50 81       	ld	r21, Z
                wIndex |= (UEDATX << 8);
    277a:	60 81       	ld	r22, Z
    277c:	96 2f       	mov	r25, r22
    277e:	80 e0       	ldi	r24, 0x00	; 0
    2780:	85 2b       	or	r24, r21
                wLength = UEDATX;
    2782:	a0 81       	ld	r26, Z
                wLength |= (UEDATX << 8);
    2784:	b0 81       	ld	r27, Z
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    2786:	52 ef       	ldi	r21, 0xF2	; 242
    2788:	50 93 e8 00 	sts	0x00E8, r21
                if (bRequest == GET_DESCRIPTOR) {
    278c:	46 30       	cpi	r20, 0x06	; 6
    278e:	09 f0       	breq	.+2      	; 0x2792 <__vector_11+0x66>
    2790:	5c c0       	rjmp	.+184    	; 0x284a <__vector_11+0x11e>
    2792:	04 c0       	rjmp	.+8      	; 0x279c <__vector_11+0x70>
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
    2794:	81 e2       	ldi	r24, 0x21	; 33
    2796:	80 93 eb 00 	sts	0x00EB, r24
					return;
    279a:	3b c1       	rjmp	.+630    	; 0x2a12 <__vector_11+0x2e6>
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
    279c:	c6 e0       	ldi	r28, 0x06	; 6
    279e:	47 ef       	ldi	r20, 0xF7	; 247
    27a0:	50 e0       	ldi	r21, 0x00	; 0
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				desc_val = pgm_read_word(list);
    27a2:	fa 01       	movw	r30, r20
    27a4:	65 91       	lpm	r22, Z+
    27a6:	74 91       	lpm	r23, Z
				if (desc_val != wValue) {
    27a8:	26 17       	cp	r18, r22
    27aa:	37 07       	cpc	r19, r23
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <__vector_11+0x88>
					list += sizeof(struct descriptor_list_struct);
    27ae:	49 5f       	subi	r20, 0xF9	; 249
    27b0:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    27b2:	20 c0       	rjmp	.+64     	; 0x27f4 <__vector_11+0xc8>
				}
				list += 2;
    27b4:	fa 01       	movw	r30, r20
    27b6:	32 96       	adiw	r30, 0x02	; 2
				desc_val = pgm_read_word(list);
    27b8:	65 91       	lpm	r22, Z+
    27ba:	74 91       	lpm	r23, Z
				if (desc_val != wIndex) {
    27bc:	86 17       	cp	r24, r22
    27be:	97 07       	cpc	r25, r23
    27c0:	19 f0       	breq	.+6      	; 0x27c8 <__vector_11+0x9c>
					list += sizeof(struct descriptor_list_struct)-2;
    27c2:	49 5f       	subi	r20, 0xF9	; 249
    27c4:	5f 4f       	sbci	r21, 0xFF	; 255
					continue;
    27c6:	16 c0       	rjmp	.+44     	; 0x27f4 <__vector_11+0xc8>
				}
				list += 2;
    27c8:	fa 01       	movw	r30, r20
    27ca:	34 96       	adiw	r30, 0x04	; 4
				desc_addr = (const uint8_t *)pgm_read_word(list);
    27cc:	85 91       	lpm	r24, Z+
    27ce:	94 91       	lpm	r25, Z
    27d0:	28 2f       	mov	r18, r24
    27d2:	39 2f       	mov	r19, r25
				list += 2;
    27d4:	fa 01       	movw	r30, r20
    27d6:	36 96       	adiw	r30, 0x06	; 6
				desc_length = pgm_read_byte(list);
    27d8:	44 91       	lpm	r20, Z
                wValue = UEDATX;
                wValue |= (UEDATX << 8);
                wIndex = UEDATX;
                wIndex |= (UEDATX << 8);
                wLength = UEDATX;
                wLength |= (UEDATX << 8);
    27da:	9b 2f       	mov	r25, r27
    27dc:	80 e0       	ldi	r24, 0x00	; 0
    27de:	8a 2b       	or	r24, r26
				desc_addr = (const uint8_t *)pgm_read_word(list);
				list += 2;
				desc_length = pgm_read_byte(list);
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    27e0:	8f 3f       	cpi	r24, 0xFF	; 255
    27e2:	91 05       	cpc	r25, r1
    27e4:	19 f0       	breq	.+6      	; 0x27ec <__vector_11+0xc0>
    27e6:	10 f0       	brcs	.+4      	; 0x27ec <__vector_11+0xc0>
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	84 17       	cp	r24, r20
    27ee:	28 f4       	brcc	.+10     	; 0x27fa <__vector_11+0xce>
    27f0:	48 2f       	mov	r20, r24
    27f2:	03 c0       	rjmp	.+6      	; 0x27fa <__vector_11+0xce>
    27f4:	c1 50       	subi	r28, 0x01	; 1
                wLength |= (UEDATX << 8);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    27f6:	a9 f6       	brne	.-86     	; 0x27a2 <__vector_11+0x76>
    27f8:	cd cf       	rjmp	.-102    	; 0x2794 <__vector_11+0x68>
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    27fa:	c8 ee       	ldi	r28, 0xE8	; 232
    27fc:	d0 e0       	ldi	r29, 0x00	; 0
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    27fe:	7e ef       	ldi	r23, 0xFE	; 254
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
    2800:	a1 ef       	ldi	r26, 0xF1	; 241
    2802:	b0 e0       	ldi	r27, 0x00	; 0
				do {
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2804:	10 e1       	ldi	r17, 0x10	; 16
			len = (wLength < 256) ? wLength : 255;
			if (len > desc_length) len = desc_length;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    2806:	88 81       	ld	r24, Y
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    2808:	98 2f       	mov	r25, r24
    280a:	95 70       	andi	r25, 0x05	; 5
    280c:	e1 f3       	breq	.-8      	; 0x2806 <__vector_11+0xda>
				if (i & (1<<RXOUTI)) return;	// abort
    280e:	82 fd       	sbrc	r24, 2
    2810:	00 c1       	rjmp	.+512    	; 0x2a12 <__vector_11+0x2e6>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    2812:	64 2f       	mov	r22, r20
    2814:	41 31       	cpi	r20, 0x11	; 17
    2816:	08 f0       	brcs	.+2      	; 0x281a <__vector_11+0xee>
    2818:	61 2f       	mov	r22, r17
				for (i = n; i; i--) {
    281a:	66 23       	and	r22, r22
    281c:	09 f4       	brne	.+2      	; 0x2820 <__vector_11+0xf4>
    281e:	f6 c0       	rjmp	.+492    	; 0x2a0c <__vector_11+0x2e0>
    2820:	c9 01       	movw	r24, r18
    2822:	56 2f       	mov	r21, r22
					UEDATX = pgm_read_byte(desc_addr++);
    2824:	fc 01       	movw	r30, r24
    2826:	01 96       	adiw	r24, 0x01	; 1
    2828:	e4 91       	lpm	r30, Z
    282a:	ec 93       	st	X, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    282c:	51 50       	subi	r21, 0x01	; 1
    282e:	d1 f7       	brne	.-12     	; 0x2824 <__vector_11+0xf8>

// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
    2830:	86 2f       	mov	r24, r22
    2832:	81 50       	subi	r24, 0x01	; 1
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	01 96       	adiw	r24, 0x01	; 1
    2838:	28 0f       	add	r18, r24
    283a:	39 1f       	adc	r19, r25
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
    283c:	46 1b       	sub	r20, r22
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    283e:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2840:	41 11       	cpse	r20, r1
    2842:	e1 cf       	rjmp	.-62     	; 0x2806 <__vector_11+0xda>
    2844:	60 31       	cpi	r22, 0x10	; 16
    2846:	f9 f2       	breq	.-66     	; 0x2806 <__vector_11+0xda>
    2848:	e4 c0       	rjmp	.+456    	; 0x2a12 <__vector_11+0x2e6>
			return;
                }
		if (bRequest == SET_ADDRESS) {
    284a:	45 30       	cpi	r20, 0x05	; 5
    284c:	61 f4       	brne	.+24     	; 0x2866 <__vector_11+0x13a>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    284e:	8e ef       	ldi	r24, 0xFE	; 254
    2850:	80 93 e8 00 	sts	0x00E8, r24


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2854:	e8 ee       	ldi	r30, 0xE8	; 232
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 ff       	sbrs	r24, 0
    285c:	fd cf       	rjmp	.-6      	; 0x2858 <__vector_11+0x12c>
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
			UDADDR = wValue | (1<<ADDEN);
    285e:	20 68       	ori	r18, 0x80	; 128
    2860:	20 93 e3 00 	sts	0x00E3, r18
			return;
    2864:	d6 c0       	rjmp	.+428    	; 0x2a12 <__vector_11+0x2e6>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    2866:	49 30       	cpi	r20, 0x09	; 9
    2868:	a1 f5       	brne	.+104    	; 0x28d2 <__vector_11+0x1a6>
    286a:	71 11       	cpse	r23, r1
    286c:	5b c0       	rjmp	.+182    	; 0x2924 <__vector_11+0x1f8>
			usb_configuration = wValue;
    286e:	20 93 6f 01 	sts	0x016F, r18
			cdc_line_rtsdtr = 0;
    2872:	10 92 70 01 	sts	0x0170, r1
			transmit_flush_timer = 0;
    2876:	10 92 6e 01 	sts	0x016E, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    287a:	8e ef       	ldi	r24, 0xFE	; 254
    287c:	80 93 e8 00 	sts	0x00E8, r24
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    2880:	11 e0       	ldi	r17, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    2882:	81 e2       	ldi	r24, 0x21	; 33
    2884:	91 e0       	ldi	r25, 0x01	; 1
			for (i=1; i<5; i++) {
				UENUM = i;
    2886:	c9 ee       	ldi	r28, 0xE9	; 233
    2888:	d0 e0       	ldi	r29, 0x00	; 0
				en = pgm_read_byte(cfg++);
				UECONX = en;
    288a:	ab ee       	ldi	r26, 0xEB	; 235
    288c:	b0 e0       	ldi	r27, 0x00	; 0
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
    288e:	6c ee       	ldi	r22, 0xEC	; 236
    2890:	70 e0       	ldi	r23, 0x00	; 0
					UECFG1X = pgm_read_byte(cfg++);
    2892:	4d ee       	ldi	r20, 0xED	; 237
    2894:	50 e0       	ldi	r21, 0x00	; 0
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
    2896:	18 83       	st	Y, r17
				en = pgm_read_byte(cfg++);
    2898:	9c 01       	movw	r18, r24
    289a:	2f 5f       	subi	r18, 0xFF	; 255
    289c:	3f 4f       	sbci	r19, 0xFF	; 255
    289e:	fc 01       	movw	r30, r24
    28a0:	04 91       	lpm	r16, Z
				UECONX = en;
    28a2:	0c 93       	st	X, r16
				if (en) {
    28a4:	00 23       	and	r16, r16
    28a6:	59 f0       	breq	.+22     	; 0x28be <__vector_11+0x192>
					UECFG0X = pgm_read_byte(cfg++);
    28a8:	f9 01       	movw	r30, r18
    28aa:	24 91       	lpm	r18, Z
    28ac:	fb 01       	movw	r30, r22
    28ae:	20 83       	st	Z, r18
    28b0:	fc 01       	movw	r30, r24
    28b2:	32 96       	adiw	r30, 0x02	; 2
					UECFG1X = pgm_read_byte(cfg++);
    28b4:	03 96       	adiw	r24, 0x03	; 3
    28b6:	24 91       	lpm	r18, Z
    28b8:	fa 01       	movw	r30, r20
    28ba:	20 83       	st	Z, r18
    28bc:	01 c0       	rjmp	.+2      	; 0x28c0 <__vector_11+0x194>
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
				UENUM = i;
				en = pgm_read_byte(cfg++);
    28be:	c9 01       	movw	r24, r18
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    28c0:	1f 5f       	subi	r17, 0xFF	; 255
    28c2:	15 30       	cpi	r17, 0x05	; 5
    28c4:	41 f7       	brne	.-48     	; 0x2896 <__vector_11+0x16a>
				if (en) {
					UECFG0X = pgm_read_byte(cfg++);
					UECFG1X = pgm_read_byte(cfg++);
				}
			}
        		UERST = 0x1E;
    28c6:	ea ee       	ldi	r30, 0xEA	; 234
    28c8:	f0 e0       	ldi	r31, 0x00	; 0
    28ca:	8e e1       	ldi	r24, 0x1E	; 30
    28cc:	80 83       	st	Z, r24
        		UERST = 0;
    28ce:	10 82       	st	Z, r1
			return;
    28d0:	a0 c0       	rjmp	.+320    	; 0x2a12 <__vector_11+0x2e6>
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    28d2:	48 30       	cpi	r20, 0x08	; 8
    28d4:	81 f4       	brne	.+32     	; 0x28f6 <__vector_11+0x1ca>
    28d6:	70 38       	cpi	r23, 0x80	; 128
    28d8:	09 f0       	breq	.+2      	; 0x28dc <__vector_11+0x1b0>
    28da:	3f c0       	rjmp	.+126    	; 0x295a <__vector_11+0x22e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    28dc:	e8 ee       	ldi	r30, 0xE8	; 232
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	80 81       	ld	r24, Z
    28e2:	80 ff       	sbrs	r24, 0
    28e4:	fd cf       	rjmp	.-6      	; 0x28e0 <__vector_11+0x1b4>
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
			usb_wait_in_ready();
			UEDATX = usb_configuration;
    28e6:	80 91 6f 01 	lds	r24, 0x016F
    28ea:	80 93 f1 00 	sts	0x00F1, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    28ee:	8e ef       	ldi	r24, 0xFE	; 254
    28f0:	80 93 e8 00 	sts	0x00E8, r24
    28f4:	8e c0       	rjmp	.+284    	; 0x2a12 <__vector_11+0x2e6>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
    28f6:	41 32       	cpi	r20, 0x21	; 33
    28f8:	a9 f4       	brne	.+42     	; 0x2924 <__vector_11+0x1f8>
    28fa:	71 3a       	cpi	r23, 0xA1	; 161
    28fc:	f1 f5       	brne	.+124    	; 0x297a <__vector_11+0x24e>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    28fe:	e8 ee       	ldi	r30, 0xE8	; 232
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	80 ff       	sbrs	r24, 0
    2906:	fd cf       	rjmp	.-6      	; 0x2902 <__vector_11+0x1d6>
    2908:	e4 e0       	ldi	r30, 0x04	; 4
    290a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    290c:	a1 ef       	ldi	r26, 0xF1	; 241
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	81 91       	ld	r24, Z+
    2912:	8c 93       	st	X, r24
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2914:	41 e0       	ldi	r20, 0x01	; 1
    2916:	eb 30       	cpi	r30, 0x0B	; 11
    2918:	f4 07       	cpc	r31, r20
    291a:	d1 f7       	brne	.-12     	; 0x2910 <__vector_11+0x1e4>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    291c:	8e ef       	ldi	r24, 0xFE	; 254
    291e:	80 93 e8 00 	sts	0x00E8, r24
    2922:	77 c0       	rjmp	.+238    	; 0x2a12 <__vector_11+0x2e6>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
    2924:	40 32       	cpi	r20, 0x20	; 32
    2926:	c9 f4       	brne	.+50     	; 0x295a <__vector_11+0x22e>
    2928:	71 32       	cpi	r23, 0x21	; 33
    292a:	09 f0       	breq	.+2      	; 0x292e <__vector_11+0x202>
    292c:	6b c0       	rjmp	.+214    	; 0x2a04 <__vector_11+0x2d8>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    292e:	e8 ee       	ldi	r30, 0xE8	; 232
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	82 ff       	sbrs	r24, 2
    2936:	fd cf       	rjmp	.-6      	; 0x2932 <__vector_11+0x206>
    2938:	e4 e0       	ldi	r30, 0x04	; 4
    293a:	f1 e0       	ldi	r31, 0x01	; 1
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    293c:	a1 ef       	ldi	r26, 0xF1	; 241
    293e:	b0 e0       	ldi	r27, 0x00	; 0
    2940:	8c 91       	ld	r24, X
    2942:	81 93       	st	Z+, r24
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    2944:	51 e0       	ldi	r21, 0x01	; 1
    2946:	eb 30       	cpi	r30, 0x0B	; 11
    2948:	f5 07       	cpc	r31, r21
    294a:	d1 f7       	brne	.-12     	; 0x2940 <__vector_11+0x214>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    294c:	e8 ee       	ldi	r30, 0xE8	; 232
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	8b ef       	ldi	r24, 0xFB	; 251
    2952:	80 83       	st	Z, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2954:	8e ef       	ldi	r24, 0xFE	; 254
    2956:	80 83       	st	Z, r24
    2958:	5c c0       	rjmp	.+184    	; 0x2a12 <__vector_11+0x2e6>
			}
			usb_ack_out();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE && bmRequestType == 0x21) {
    295a:	42 32       	cpi	r20, 0x22	; 34
    295c:	71 f4       	brne	.+28     	; 0x297a <__vector_11+0x24e>
    295e:	71 32       	cpi	r23, 0x21	; 33
    2960:	09 f0       	breq	.+2      	; 0x2964 <__vector_11+0x238>
    2962:	50 c0       	rjmp	.+160    	; 0x2a04 <__vector_11+0x2d8>
			cdc_line_rtsdtr = wValue;
    2964:	20 93 70 01 	sts	0x0170, r18


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    2968:	e8 ee       	ldi	r30, 0xE8	; 232
    296a:	f0 e0       	ldi	r31, 0x00	; 0
    296c:	80 81       	ld	r24, Z
    296e:	80 ff       	sbrs	r24, 0
    2970:	fd cf       	rjmp	.-6      	; 0x296c <__vector_11+0x240>
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2972:	8e ef       	ldi	r24, 0xFE	; 254
    2974:	80 93 e8 00 	sts	0x00E8, r24
    2978:	4c c0       	rjmp	.+152    	; 0x2a12 <__vector_11+0x2e6>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    297a:	41 11       	cpse	r20, r1
    297c:	1a c0       	rjmp	.+52     	; 0x29b2 <__vector_11+0x286>


// Misc functions to wait for ready and send/receive packets
static inline void usb_wait_in_ready(void)
{
	while (!(UEINTX & (1<<TXINI))) ;
    297e:	e8 ee       	ldi	r30, 0xE8	; 232
    2980:	f0 e0       	ldi	r31, 0x00	; 0
    2982:	20 81       	ld	r18, Z
    2984:	20 ff       	sbrs	r18, 0
    2986:	fd cf       	rjmp	.-6      	; 0x2982 <__vector_11+0x256>
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
			#ifdef SUPPORT_ENDPOINT_HALT
			if (bmRequestType == 0x82) {
    2988:	72 38       	cpi	r23, 0x82	; 130
    298a:	51 f4       	brne	.+20     	; 0x29a0 <__vector_11+0x274>
				UENUM = wIndex;
    298c:	e9 ee       	ldi	r30, 0xE9	; 233
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 83       	st	Z, r24
				if (UECONX & (1<<STALLRQ)) i = 1;
    2992:	80 91 eb 00 	lds	r24, 0x00EB
    2996:	85 fb       	bst	r24, 5
    2998:	88 27       	eor	r24, r24
    299a:	80 f9       	bld	r24, 0
				UENUM = 0;
    299c:	10 82       	st	Z, r1
    299e:	01 c0       	rjmp	.+2      	; 0x29a2 <__vector_11+0x276>
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
			usb_wait_in_ready();
			i = 0;
    29a0:	80 e0       	ldi	r24, 0x00	; 0
				UENUM = wIndex;
				if (UECONX & (1<<STALLRQ)) i = 1;
				UENUM = 0;
			}
			#endif
			UEDATX = i;
    29a2:	e1 ef       	ldi	r30, 0xF1	; 241
    29a4:	f0 e0       	ldi	r31, 0x00	; 0
    29a6:	80 83       	st	Z, r24
			UEDATX = 0;
    29a8:	10 82       	st	Z, r1
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29aa:	8e ef       	ldi	r24, 0xFE	; 254
    29ac:	80 93 e8 00 	sts	0x00E8, r24
    29b0:	30 c0       	rjmp	.+96     	; 0x2a12 <__vector_11+0x2e6>
			UEDATX = 0;
			usb_send_in();
			return;
		}
		#ifdef SUPPORT_ENDPOINT_HALT
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    29b2:	41 30       	cpi	r20, 0x01	; 1
    29b4:	11 f0       	breq	.+4      	; 0x29ba <__vector_11+0x28e>
    29b6:	43 30       	cpi	r20, 0x03	; 3
    29b8:	29 f5       	brne	.+74     	; 0x2a04 <__vector_11+0x2d8>
		  && bmRequestType == 0x02 && wValue == 0) {
    29ba:	72 30       	cpi	r23, 0x02	; 2
    29bc:	19 f5       	brne	.+70     	; 0x2a04 <__vector_11+0x2d8>
    29be:	23 2b       	or	r18, r19
    29c0:	09 f5       	brne	.+66     	; 0x2a04 <__vector_11+0x2d8>
			i = wIndex & 0x7F;
    29c2:	8f 77       	andi	r24, 0x7F	; 127
    29c4:	99 27       	eor	r25, r25
			if (i >= 1 && i <= MAX_ENDPOINT) {
    29c6:	38 2f       	mov	r19, r24
    29c8:	31 50       	subi	r19, 0x01	; 1
    29ca:	34 30       	cpi	r19, 0x04	; 4
    29cc:	d8 f4       	brcc	.+54     	; 0x2a04 <__vector_11+0x2d8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    29ce:	3e ef       	ldi	r19, 0xFE	; 254
    29d0:	30 93 e8 00 	sts	0x00E8, r19
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    29d4:	80 93 e9 00 	sts	0x00E9, r24
				if (bRequest == SET_FEATURE) {
    29d8:	43 30       	cpi	r20, 0x03	; 3
    29da:	21 f4       	brne	.+8      	; 0x29e4 <__vector_11+0x2b8>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
    29dc:	81 e2       	ldi	r24, 0x21	; 33
    29de:	80 93 eb 00 	sts	0x00EB, r24
    29e2:	17 c0       	rjmp	.+46     	; 0x2a12 <__vector_11+0x2e6>
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    29e4:	99 e1       	ldi	r25, 0x19	; 25
    29e6:	90 93 eb 00 	sts	0x00EB, r25
					UERST = (1 << i);
    29ea:	21 e0       	ldi	r18, 0x01	; 1
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	d9 01       	movw	r26, r18
    29f0:	02 c0       	rjmp	.+4      	; 0x29f6 <__vector_11+0x2ca>
    29f2:	aa 0f       	add	r26, r26
    29f4:	bb 1f       	adc	r27, r27
    29f6:	8a 95       	dec	r24
    29f8:	e2 f7       	brpl	.-8      	; 0x29f2 <__vector_11+0x2c6>
    29fa:	ea ee       	ldi	r30, 0xEA	; 234
    29fc:	f0 e0       	ldi	r31, 0x00	; 0
    29fe:	a0 83       	st	Z, r26
					UERST = 0;
    2a00:	10 82       	st	Z, r1
    2a02:	07 c0       	rjmp	.+14     	; 0x2a12 <__vector_11+0x2e6>
				return;
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    2a04:	81 e2       	ldi	r24, 0x21	; 33
    2a06:	80 93 eb 00 	sts	0x00EB, r24
    2a0a:	03 c0       	rjmp	.+6      	; 0x2a12 <__vector_11+0x2e6>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    2a0c:	78 83       	st	Y, r23
				for (i = n; i; i--) {
					UEDATX = pgm_read_byte(desc_addr++);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    2a0e:	41 11       	cpse	r20, r1
    2a10:	fa ce       	rjmp	.-524    	; 0x2806 <__vector_11+0xda>
			}
		}
		#endif
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    2a12:	ff 91       	pop	r31
    2a14:	ef 91       	pop	r30
    2a16:	df 91       	pop	r29
    2a18:	cf 91       	pop	r28
    2a1a:	bf 91       	pop	r27
    2a1c:	af 91       	pop	r26
    2a1e:	9f 91       	pop	r25
    2a20:	8f 91       	pop	r24
    2a22:	7f 91       	pop	r23
    2a24:	6f 91       	pop	r22
    2a26:	5f 91       	pop	r21
    2a28:	4f 91       	pop	r20
    2a2a:	3f 91       	pop	r19
    2a2c:	2f 91       	pop	r18
    2a2e:	1f 91       	pop	r17
    2a30:	0f 91       	pop	r16
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    2a3c:	20 e0       	ldi	r18, 0x00	; 0
    2a3e:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    2a40:	ec eb       	ldi	r30, 0xBC	; 188
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	88 23       	and	r24, r24
    2a48:	34 f0       	brlt	.+12     	; 0x2a56 <twi_wait+0x1a>
    2a4a:	2f 5f       	subi	r18, 0xFF	; 255
    2a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4e:	29 3e       	cpi	r18, 0xE9	; 233
    2a50:	83 e0       	ldi	r24, 0x03	; 3
    2a52:	38 07       	cpc	r19, r24
    2a54:	b9 f7       	brne	.-18     	; 0x2a44 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	28 3e       	cpi	r18, 0xE8	; 232
    2a5a:	33 40       	sbci	r19, 0x03	; 3
    2a5c:	09 f4       	brne	.+2      	; 0x2a60 <twi_wait+0x24>
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    2a60:	08 95       	ret

00002a62 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    2a62:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    2a66:	84 e8       	ldi	r24, 0x84	; 132
    2a68:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    2a6c:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <twi_wait>
    2a70:	88 23       	and	r24, r24
    2a72:	21 f0       	breq	.+8      	; 0x2a7c <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    2a74:	80 91 b9 00 	lds	r24, 0x00B9
    2a78:	88 7f       	andi	r24, 0xF8	; 248
    2a7a:	08 95       	ret
	} else {
		return 0;					// comm failure
    2a7c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2a7e:	08 95       	ret

00002a80 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    2a80:	cf 93       	push	r28
    2a82:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2a84:	94 ea       	ldi	r25, 0xA4	; 164
    2a86:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2a8a:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <twi_wait>
    2a8e:	88 23       	and	r24, r24
    2a90:	61 f0       	breq	.+24     	; 0x2aaa <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    2a92:	8c 2f       	mov	r24, r28
    2a94:	88 0f       	add	r24, r24
    2a96:	8f 5f       	subi	r24, 0xFF	; 255
    2a98:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    2a9c:	88 34       	cpi	r24, 0x48	; 72
    2a9e:	39 f4       	brne	.+14     	; 0x2aae <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2aa0:	84 e9       	ldi	r24, 0x94	; 148
    2aa2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2aa6:	80 e0       	ldi	r24, 0x00	; 0
    2aa8:	03 c0       	rjmp	.+6      	; 0x2ab0 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2aaa:	80 e0       	ldi	r24, 0x00	; 0
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2aae:	81 e0       	ldi	r24, 0x01	; 1
}	
    2ab0:	cf 91       	pop	r28
    2ab2:	08 95       	ret

00002ab4 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2ab4:	cf 93       	push	r28
    2ab6:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2ab8:	94 ea       	ldi	r25, 0xA4	; 164
    2aba:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2abe:	0e 94 1e 15 	call	0x2a3c	; 0x2a3c <twi_wait>
    2ac2:	88 23       	and	r24, r24
    2ac4:	59 f0       	breq	.+22     	; 0x2adc <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2ac6:	8c 2f       	mov	r24, r28
    2ac8:	88 0f       	add	r24, r24
    2aca:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2ace:	80 32       	cpi	r24, 0x20	; 32
    2ad0:	39 f4       	brne	.+14     	; 0x2ae0 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2ad2:	84 e9       	ldi	r24, 0x94	; 148
    2ad4:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	03 c0       	rjmp	.+6      	; 0x2ae2 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	01 c0       	rjmp	.+2      	; 0x2ae2 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
}	
    2ae2:	cf 91       	pop	r28
    2ae4:	08 95       	ret

00002ae6 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2ae6:	84 e9       	ldi	r24, 0x94	; 148
    2ae8:	80 93 bc 00 	sts	0x00BC, r24
    2aec:	08 95       	ret

00002aee <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2aee:	ef 92       	push	r14
    2af0:	ff 92       	push	r15
    2af2:	0f 93       	push	r16
    2af4:	1f 93       	push	r17
    2af6:	cf 93       	push	r28
    2af8:	df 93       	push	r29
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	60 97       	sbiw	r28, 0x10	; 16
    2b00:	0f b6       	in	r0, 0x3f	; 63
    2b02:	f8 94       	cli
    2b04:	de bf       	out	0x3e, r29	; 62
    2b06:	0f be       	out	0x3f, r0	; 63
    2b08:	cd bf       	out	0x3d, r28	; 61
    2b0a:	e8 2e       	mov	r14, r24
    2b0c:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2b0e:	fe 01       	movw	r30, r28
    2b10:	31 96       	adiw	r30, 0x01	; 1
    2b12:	80 e1       	ldi	r24, 0x10	; 16
    2b14:	df 01       	movw	r26, r30
    2b16:	1d 92       	st	X+, r1
    2b18:	8a 95       	dec	r24
    2b1a:	e9 f7       	brne	.-6      	; 0x2b16 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2b1c:	88 e5       	ldi	r24, 0x58	; 88
    2b1e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2b22:	88 23       	and	r24, r24
    2b24:	09 f4       	brne	.+2      	; 0x2b28 <m_wii_read+0x3a>
    2b26:	66 c0       	rjmp	.+204    	; 0x2bf4 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    2b28:	86 e3       	ldi	r24, 0x36	; 54
    2b2a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2b2e:	88 23       	and	r24, r24
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <m_wii_read+0x46>
    2b32:	62 c0       	rjmp	.+196    	; 0x2bf8 <m_wii_read+0x10a>
	end();
    2b34:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2b38:	b8 e0       	ldi	r27, 0x08	; 8
    2b3a:	ba 95       	dec	r27
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <m_wii_read+0x4c>
    2b3e:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2b40:	88 e5       	ldi	r24, 0x58	; 88
    2b42:	0e 94 40 15 	call	0x2a80	; 0x2a80 <start_read>
    2b46:	88 23       	and	r24, r24
    2b48:	09 f4       	brne	.+2      	; 0x2b4c <m_wii_read+0x5e>
    2b4a:	58 c0       	rjmp	.+176    	; 0x2bfc <m_wii_read+0x10e>
    2b4c:	ae 01       	movw	r20, r28
    2b4e:	4f 5f       	subi	r20, 0xFF	; 255
    2b50:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2b52:	8e 01       	movw	r16, r28
    2b54:	00 5f       	subi	r16, 0xF0	; 240
    2b56:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2b58:	ec eb       	ldi	r30, 0xBC	; 188
    2b5a:	f0 e0       	ldi	r31, 0x00	; 0
    2b5c:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    2b5e:	2b eb       	ldi	r18, 0xBB	; 187
    2b60:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    2b62:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2b64:	80 81       	ld	r24, Z
    2b66:	88 23       	and	r24, r24
    2b68:	ec f7       	brge	.-6      	; 0x2b64 <m_wii_read+0x76>
		temp[i] = TWDR;
    2b6a:	d9 01       	movw	r26, r18
    2b6c:	8c 91       	ld	r24, X
    2b6e:	da 01       	movw	r26, r20
    2b70:	8d 93       	st	X+, r24
    2b72:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    2b74:	a0 17       	cp	r26, r16
    2b76:	b1 07       	cpc	r27, r17
    2b78:	a1 f7       	brne	.-24     	; 0x2b62 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    2b7a:	84 e8       	ldi	r24, 0x84	; 132
    2b7c:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2b80:	ec eb       	ldi	r30, 0xBC	; 188
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	88 23       	and	r24, r24
    2b88:	ec f7       	brge	.-6      	; 0x2b84 <m_wii_read+0x96>
	temp[15] = TWDR;
    2b8a:	80 91 bb 00 	lds	r24, 0x00BB
    2b8e:	88 8b       	std	Y+16, r24	; 0x10
	end();
    2b90:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
    2b94:	de 01       	movw	r26, r28
    2b96:	14 96       	adiw	r26, 0x04	; 4
    2b98:	6e 2d       	mov	r22, r14
    2b9a:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2b9c:	4c 91       	ld	r20, X
    2b9e:	24 2f       	mov	r18, r20
    2ba0:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2ba2:	cd 01       	movw	r24, r26
    2ba4:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	80 81       	ld	r24, Z
    2baa:	90 e0       	ldi	r25, 0x00	; 0
    2bac:	f0 e1       	ldi	r31, 0x10	; 16
    2bae:	2f 9f       	mul	r18, r31
    2bb0:	80 0d       	add	r24, r0
    2bb2:	91 1d       	adc	r25, r1
    2bb4:	11 24       	eor	r1, r1
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	91 83       	std	Z+1, r25	; 0x01
    2bba:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2bbc:	84 2f       	mov	r24, r20
    2bbe:	80 7c       	andi	r24, 0xC0	; 192
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	88 0f       	add	r24, r24
    2bc4:	99 1f       	adc	r25, r25
    2bc6:	88 0f       	add	r24, r24
    2bc8:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2bca:	9d 01       	movw	r18, r26
    2bcc:	21 50       	subi	r18, 0x01	; 1
    2bce:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2bd0:	f9 01       	movw	r30, r18
    2bd2:	20 81       	ld	r18, Z
    2bd4:	82 0f       	add	r24, r18
    2bd6:	91 1d       	adc	r25, r1
    2bd8:	fb 01       	movw	r30, r22
    2bda:	93 83       	std	Z+3, r25	; 0x03
    2bdc:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2bde:	4f 70       	andi	r20, 0x0F	; 15
    2be0:	44 83       	std	Z+4, r20	; 0x04
    2be2:	15 82       	std	Z+5, r1	; 0x05
    2be4:	13 96       	adiw	r26, 0x03	; 3
    2be6:	6a 5f       	subi	r22, 0xFA	; 250
    2be8:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    2bea:	0a 17       	cp	r16, r26
    2bec:	1b 07       	cpc	r17, r27
    2bee:	b1 f6       	brne	.-84     	; 0x2b9c <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	05 c0       	rjmp	.+10     	; 0x2bfe <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	03 c0       	rjmp	.+6      	; 0x2bfe <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    2bf8:	80 e0       	ldi	r24, 0x00	; 0
    2bfa:	01 c0       	rjmp	.+2      	; 0x2bfe <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2bfe:	60 96       	adiw	r28, 0x10	; 16
    2c00:	0f b6       	in	r0, 0x3f	; 63
    2c02:	f8 94       	cli
    2c04:	de bf       	out	0x3e, r29	; 62
    2c06:	0f be       	out	0x3f, r0	; 63
    2c08:	cd bf       	out	0x3d, r28	; 61
    2c0a:	df 91       	pop	r29
    2c0c:	cf 91       	pop	r28
    2c0e:	1f 91       	pop	r17
    2c10:	0f 91       	pop	r16
    2c12:	ff 90       	pop	r15
    2c14:	ef 90       	pop	r14
    2c16:	08 95       	ret

00002c18 <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    2c18:	0e 94 90 12 	call	0x2520	; 0x2520 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2c1c:	88 e5       	ldi	r24, 0x58	; 88
    2c1e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2c22:	88 23       	and	r24, r24
    2c24:	09 f4       	brne	.+2      	; 0x2c28 <m_wii_open+0x10>
    2c26:	c7 c0       	rjmp	.+398    	; 0x2db6 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    2c28:	80 e3       	ldi	r24, 0x30	; 48
    2c2a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c2e:	88 23       	and	r24, r24
    2c30:	09 f4       	brne	.+2      	; 0x2c34 <m_wii_open+0x1c>
    2c32:	c3 c0       	rjmp	.+390    	; 0x2dba <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c3a:	88 23       	and	r24, r24
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <m_wii_open+0x28>
    2c3e:	bf c0       	rjmp	.+382    	; 0x2dbe <m_wii_open+0x1a6>
	end();
    2c40:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2c44:	83 ec       	ldi	r24, 0xC3	; 195
    2c46:	99 e0       	ldi	r25, 0x09	; 9
    2c48:	01 97       	sbiw	r24, 0x01	; 1
    2c4a:	f1 f7       	brne	.-4      	; 0x2c48 <m_wii_open+0x30>
    2c4c:	00 c0       	rjmp	.+0      	; 0x2c4e <m_wii_open+0x36>
    2c4e:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2c50:	88 e5       	ldi	r24, 0x58	; 88
    2c52:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2c56:	88 23       	and	r24, r24
    2c58:	09 f4       	brne	.+2      	; 0x2c5c <m_wii_open+0x44>
    2c5a:	b3 c0       	rjmp	.+358    	; 0x2dc2 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c62:	88 23       	and	r24, r24
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <m_wii_open+0x50>
    2c66:	af c0       	rjmp	.+350    	; 0x2dc6 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    2c68:	80 e0       	ldi	r24, 0x00	; 0
    2c6a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c6e:	88 23       	and	r24, r24
    2c70:	09 f4       	brne	.+2      	; 0x2c74 <m_wii_open+0x5c>
    2c72:	ab c0       	rjmp	.+342    	; 0x2dca <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    2c74:	80 e0       	ldi	r24, 0x00	; 0
    2c76:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c7a:	88 23       	and	r24, r24
    2c7c:	09 f4       	brne	.+2      	; 0x2c80 <m_wii_open+0x68>
    2c7e:	a7 c0       	rjmp	.+334    	; 0x2dce <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c86:	88 23       	and	r24, r24
    2c88:	09 f4       	brne	.+2      	; 0x2c8c <m_wii_open+0x74>
    2c8a:	a3 c0       	rjmp	.+326    	; 0x2dd2 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c92:	88 23       	and	r24, r24
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <m_wii_open+0x80>
    2c96:	9f c0       	rjmp	.+318    	; 0x2dd6 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    2c98:	80 e0       	ldi	r24, 0x00	; 0
    2c9a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2c9e:	88 23       	and	r24, r24
    2ca0:	09 f4       	brne	.+2      	; 0x2ca4 <m_wii_open+0x8c>
    2ca2:	9b c0       	rjmp	.+310    	; 0x2dda <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2ca4:	80 e0       	ldi	r24, 0x00	; 0
    2ca6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2caa:	88 23       	and	r24, r24
    2cac:	09 f4       	brne	.+2      	; 0x2cb0 <m_wii_open+0x98>
    2cae:	97 c0       	rjmp	.+302    	; 0x2dde <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2cb0:	80 e9       	ldi	r24, 0x90	; 144
    2cb2:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2cb6:	88 23       	and	r24, r24
    2cb8:	09 f4       	brne	.+2      	; 0x2cbc <m_wii_open+0xa4>
    2cba:	93 c0       	rjmp	.+294    	; 0x2de2 <m_wii_open+0x1ca>
	end();
    2cbc:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
    2cc0:	83 ec       	ldi	r24, 0xC3	; 195
    2cc2:	99 e0       	ldi	r25, 0x09	; 9
    2cc4:	01 97       	sbiw	r24, 0x01	; 1
    2cc6:	f1 f7       	brne	.-4      	; 0x2cc4 <m_wii_open+0xac>
    2cc8:	00 c0       	rjmp	.+0      	; 0x2cca <m_wii_open+0xb2>
    2cca:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2ccc:	88 e5       	ldi	r24, 0x58	; 88
    2cce:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2cd2:	88 23       	and	r24, r24
    2cd4:	09 f4       	brne	.+2      	; 0x2cd8 <m_wii_open+0xc0>
    2cd6:	87 c0       	rjmp	.+270    	; 0x2de6 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    2cd8:	87 e0       	ldi	r24, 0x07	; 7
    2cda:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2cde:	88 23       	and	r24, r24
    2ce0:	09 f4       	brne	.+2      	; 0x2ce4 <m_wii_open+0xcc>
    2ce2:	83 c0       	rjmp	.+262    	; 0x2dea <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2cea:	88 23       	and	r24, r24
    2cec:	09 f4       	brne	.+2      	; 0x2cf0 <m_wii_open+0xd8>
    2cee:	7f c0       	rjmp	.+254    	; 0x2dee <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    2cf0:	81 e4       	ldi	r24, 0x41	; 65
    2cf2:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2cf6:	88 23       	and	r24, r24
    2cf8:	09 f4       	brne	.+2      	; 0x2cfc <m_wii_open+0xe4>
    2cfa:	7b c0       	rjmp	.+246    	; 0x2df2 <m_wii_open+0x1da>
	end();
    2cfc:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
    2d00:	83 ec       	ldi	r24, 0xC3	; 195
    2d02:	99 e0       	ldi	r25, 0x09	; 9
    2d04:	01 97       	sbiw	r24, 0x01	; 1
    2d06:	f1 f7       	brne	.-4      	; 0x2d04 <m_wii_open+0xec>
    2d08:	00 c0       	rjmp	.+0      	; 0x2d0a <m_wii_open+0xf2>
    2d0a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2d0c:	88 e5       	ldi	r24, 0x58	; 88
    2d0e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2d12:	88 23       	and	r24, r24
    2d14:	09 f4       	brne	.+2      	; 0x2d18 <m_wii_open+0x100>
    2d16:	6f c0       	rjmp	.+222    	; 0x2df6 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    2d18:	8a e1       	ldi	r24, 0x1A	; 26
    2d1a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d1e:	88 23       	and	r24, r24
    2d20:	09 f4       	brne	.+2      	; 0x2d24 <m_wii_open+0x10c>
    2d22:	6b c0       	rjmp	.+214    	; 0x2dfa <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    2d24:	80 e4       	ldi	r24, 0x40	; 64
    2d26:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d2a:	88 23       	and	r24, r24
    2d2c:	09 f4       	brne	.+2      	; 0x2d30 <m_wii_open+0x118>
    2d2e:	67 c0       	rjmp	.+206    	; 0x2dfe <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d36:	88 23       	and	r24, r24
    2d38:	09 f4       	brne	.+2      	; 0x2d3c <m_wii_open+0x124>
    2d3a:	63 c0       	rjmp	.+198    	; 0x2e02 <m_wii_open+0x1ea>
	end();
    2d3c:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
    2d40:	83 ec       	ldi	r24, 0xC3	; 195
    2d42:	99 e0       	ldi	r25, 0x09	; 9
    2d44:	01 97       	sbiw	r24, 0x01	; 1
    2d46:	f1 f7       	brne	.-4      	; 0x2d44 <m_wii_open+0x12c>
    2d48:	00 c0       	rjmp	.+0      	; 0x2d4a <m_wii_open+0x132>
    2d4a:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2d4c:	88 e5       	ldi	r24, 0x58	; 88
    2d4e:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2d52:	88 23       	and	r24, r24
    2d54:	09 f4       	brne	.+2      	; 0x2d58 <m_wii_open+0x140>
    2d56:	57 c0       	rjmp	.+174    	; 0x2e06 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    2d58:	83 e3       	ldi	r24, 0x33	; 51
    2d5a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d5e:	88 23       	and	r24, r24
    2d60:	09 f4       	brne	.+2      	; 0x2d64 <m_wii_open+0x14c>
    2d62:	53 c0       	rjmp	.+166    	; 0x2e0a <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d6a:	88 23       	and	r24, r24
    2d6c:	09 f4       	brne	.+2      	; 0x2d70 <m_wii_open+0x158>
    2d6e:	4f c0       	rjmp	.+158    	; 0x2e0e <m_wii_open+0x1f6>
	end();
    2d70:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
    2d74:	83 ec       	ldi	r24, 0xC3	; 195
    2d76:	99 e0       	ldi	r25, 0x09	; 9
    2d78:	01 97       	sbiw	r24, 0x01	; 1
    2d7a:	f1 f7       	brne	.-4      	; 0x2d78 <m_wii_open+0x160>
    2d7c:	00 c0       	rjmp	.+0      	; 0x2d7e <m_wii_open+0x166>
    2d7e:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2d80:	88 e5       	ldi	r24, 0x58	; 88
    2d82:	0e 94 5a 15 	call	0x2ab4	; 0x2ab4 <start_write>
    2d86:	88 23       	and	r24, r24
    2d88:	09 f4       	brne	.+2      	; 0x2d8c <m_wii_open+0x174>
    2d8a:	43 c0       	rjmp	.+134    	; 0x2e12 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    2d8c:	80 e3       	ldi	r24, 0x30	; 48
    2d8e:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d92:	88 23       	and	r24, r24
    2d94:	09 f4       	brne	.+2      	; 0x2d98 <m_wii_open+0x180>
    2d96:	3f c0       	rjmp	.+126    	; 0x2e16 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    2d98:	88 e0       	ldi	r24, 0x08	; 8
    2d9a:	0e 94 31 15 	call	0x2a62	; 0x2a62 <send_byte>
    2d9e:	88 23       	and	r24, r24
    2da0:	e1 f1       	breq	.+120    	; 0x2e1a <m_wii_open+0x202>
	end();
    2da2:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <end>
    2da6:	83 ec       	ldi	r24, 0xC3	; 195
    2da8:	99 e0       	ldi	r25, 0x09	; 9
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <m_wii_open+0x192>
    2dae:	00 c0       	rjmp	.+0      	; 0x2db0 <m_wii_open+0x198>
    2db0:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2db6:	80 e0       	ldi	r24, 0x00	; 0
    2db8:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2dc2:	80 e0       	ldi	r24, 0x00	; 0
    2dc4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dc6:	80 e0       	ldi	r24, 0x00	; 0
    2dc8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dd6:	80 e0       	ldi	r24, 0x00	; 0
    2dd8:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2dee:	80 e0       	ldi	r24, 0x00	; 0
    2df0:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2df2:	80 e0       	ldi	r24, 0x00	; 0
    2df4:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2df6:	80 e0       	ldi	r24, 0x00	; 0
    2df8:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    2dfa:	80 e0       	ldi	r24, 0x00	; 0
    2dfc:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2e06:	80 e0       	ldi	r24, 0x00	; 0
    2e08:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    2e0a:	80 e0       	ldi	r24, 0x00	; 0
    2e0c:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2e16:	80 e0       	ldi	r24, 0x00	; 0
    2e18:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    2e1a:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    2e1c:	08 95       	ret

00002e1e <__subsf3>:
    2e1e:	50 58       	subi	r21, 0x80	; 128

00002e20 <__addsf3>:
    2e20:	bb 27       	eor	r27, r27
    2e22:	aa 27       	eor	r26, r26
    2e24:	0e d0       	rcall	.+28     	; 0x2e42 <__addsf3x>
    2e26:	27 c2       	rjmp	.+1102   	; 0x3276 <__fp_round>
    2e28:	f0 d1       	rcall	.+992    	; 0x320a <__fp_pscA>
    2e2a:	30 f0       	brcs	.+12     	; 0x2e38 <__addsf3+0x18>
    2e2c:	f5 d1       	rcall	.+1002   	; 0x3218 <__fp_pscB>
    2e2e:	20 f0       	brcs	.+8      	; 0x2e38 <__addsf3+0x18>
    2e30:	31 f4       	brne	.+12     	; 0x2e3e <__addsf3+0x1e>
    2e32:	9f 3f       	cpi	r25, 0xFF	; 255
    2e34:	11 f4       	brne	.+4      	; 0x2e3a <__addsf3+0x1a>
    2e36:	1e f4       	brtc	.+6      	; 0x2e3e <__addsf3+0x1e>
    2e38:	c0 c1       	rjmp	.+896    	; 0x31ba <__fp_nan>
    2e3a:	0e f4       	brtc	.+2      	; 0x2e3e <__addsf3+0x1e>
    2e3c:	e0 95       	com	r30
    2e3e:	e7 fb       	bst	r30, 7
    2e40:	b6 c1       	rjmp	.+876    	; 0x31ae <__fp_inf>

00002e42 <__addsf3x>:
    2e42:	e9 2f       	mov	r30, r25
    2e44:	3a d2       	rcall	.+1140   	; 0x32ba <__fp_split3>
    2e46:	80 f3       	brcs	.-32     	; 0x2e28 <__addsf3+0x8>
    2e48:	ba 17       	cp	r27, r26
    2e4a:	62 07       	cpc	r22, r18
    2e4c:	73 07       	cpc	r23, r19
    2e4e:	84 07       	cpc	r24, r20
    2e50:	95 07       	cpc	r25, r21
    2e52:	18 f0       	brcs	.+6      	; 0x2e5a <__addsf3x+0x18>
    2e54:	71 f4       	brne	.+28     	; 0x2e72 <__addsf3x+0x30>
    2e56:	9e f5       	brtc	.+102    	; 0x2ebe <__addsf3x+0x7c>
    2e58:	52 c2       	rjmp	.+1188   	; 0x32fe <__fp_zero>
    2e5a:	0e f4       	brtc	.+2      	; 0x2e5e <__addsf3x+0x1c>
    2e5c:	e0 95       	com	r30
    2e5e:	0b 2e       	mov	r0, r27
    2e60:	ba 2f       	mov	r27, r26
    2e62:	a0 2d       	mov	r26, r0
    2e64:	0b 01       	movw	r0, r22
    2e66:	b9 01       	movw	r22, r18
    2e68:	90 01       	movw	r18, r0
    2e6a:	0c 01       	movw	r0, r24
    2e6c:	ca 01       	movw	r24, r20
    2e6e:	a0 01       	movw	r20, r0
    2e70:	11 24       	eor	r1, r1
    2e72:	ff 27       	eor	r31, r31
    2e74:	59 1b       	sub	r21, r25
    2e76:	99 f0       	breq	.+38     	; 0x2e9e <__addsf3x+0x5c>
    2e78:	59 3f       	cpi	r21, 0xF9	; 249
    2e7a:	50 f4       	brcc	.+20     	; 0x2e90 <__addsf3x+0x4e>
    2e7c:	50 3e       	cpi	r21, 0xE0	; 224
    2e7e:	68 f1       	brcs	.+90     	; 0x2eda <__addsf3x+0x98>
    2e80:	1a 16       	cp	r1, r26
    2e82:	f0 40       	sbci	r31, 0x00	; 0
    2e84:	a2 2f       	mov	r26, r18
    2e86:	23 2f       	mov	r18, r19
    2e88:	34 2f       	mov	r19, r20
    2e8a:	44 27       	eor	r20, r20
    2e8c:	58 5f       	subi	r21, 0xF8	; 248
    2e8e:	f3 cf       	rjmp	.-26     	; 0x2e76 <__addsf3x+0x34>
    2e90:	46 95       	lsr	r20
    2e92:	37 95       	ror	r19
    2e94:	27 95       	ror	r18
    2e96:	a7 95       	ror	r26
    2e98:	f0 40       	sbci	r31, 0x00	; 0
    2e9a:	53 95       	inc	r21
    2e9c:	c9 f7       	brne	.-14     	; 0x2e90 <__addsf3x+0x4e>
    2e9e:	7e f4       	brtc	.+30     	; 0x2ebe <__addsf3x+0x7c>
    2ea0:	1f 16       	cp	r1, r31
    2ea2:	ba 0b       	sbc	r27, r26
    2ea4:	62 0b       	sbc	r22, r18
    2ea6:	73 0b       	sbc	r23, r19
    2ea8:	84 0b       	sbc	r24, r20
    2eaa:	ba f0       	brmi	.+46     	; 0x2eda <__addsf3x+0x98>
    2eac:	91 50       	subi	r25, 0x01	; 1
    2eae:	a1 f0       	breq	.+40     	; 0x2ed8 <__addsf3x+0x96>
    2eb0:	ff 0f       	add	r31, r31
    2eb2:	bb 1f       	adc	r27, r27
    2eb4:	66 1f       	adc	r22, r22
    2eb6:	77 1f       	adc	r23, r23
    2eb8:	88 1f       	adc	r24, r24
    2eba:	c2 f7       	brpl	.-16     	; 0x2eac <__addsf3x+0x6a>
    2ebc:	0e c0       	rjmp	.+28     	; 0x2eda <__addsf3x+0x98>
    2ebe:	ba 0f       	add	r27, r26
    2ec0:	62 1f       	adc	r22, r18
    2ec2:	73 1f       	adc	r23, r19
    2ec4:	84 1f       	adc	r24, r20
    2ec6:	48 f4       	brcc	.+18     	; 0x2eda <__addsf3x+0x98>
    2ec8:	87 95       	ror	r24
    2eca:	77 95       	ror	r23
    2ecc:	67 95       	ror	r22
    2ece:	b7 95       	ror	r27
    2ed0:	f7 95       	ror	r31
    2ed2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ed4:	08 f0       	brcs	.+2      	; 0x2ed8 <__addsf3x+0x96>
    2ed6:	b3 cf       	rjmp	.-154    	; 0x2e3e <__addsf3+0x1e>
    2ed8:	93 95       	inc	r25
    2eda:	88 0f       	add	r24, r24
    2edc:	08 f0       	brcs	.+2      	; 0x2ee0 <__addsf3x+0x9e>
    2ede:	99 27       	eor	r25, r25
    2ee0:	ee 0f       	add	r30, r30
    2ee2:	97 95       	ror	r25
    2ee4:	87 95       	ror	r24
    2ee6:	08 95       	ret
    2ee8:	90 d1       	rcall	.+800    	; 0x320a <__fp_pscA>
    2eea:	58 f0       	brcs	.+22     	; 0x2f02 <__addsf3x+0xc0>
    2eec:	80 e8       	ldi	r24, 0x80	; 128
    2eee:	91 e0       	ldi	r25, 0x01	; 1
    2ef0:	09 f4       	brne	.+2      	; 0x2ef4 <__addsf3x+0xb2>
    2ef2:	9e ef       	ldi	r25, 0xFE	; 254
    2ef4:	91 d1       	rcall	.+802    	; 0x3218 <__fp_pscB>
    2ef6:	28 f0       	brcs	.+10     	; 0x2f02 <__addsf3x+0xc0>
    2ef8:	40 e8       	ldi	r20, 0x80	; 128
    2efa:	51 e0       	ldi	r21, 0x01	; 1
    2efc:	59 f4       	brne	.+22     	; 0x2f14 <atan2+0xe>
    2efe:	5e ef       	ldi	r21, 0xFE	; 254
    2f00:	09 c0       	rjmp	.+18     	; 0x2f14 <atan2+0xe>
    2f02:	5b c1       	rjmp	.+694    	; 0x31ba <__fp_nan>
    2f04:	fc c1       	rjmp	.+1016   	; 0x32fe <__fp_zero>

00002f06 <atan2>:
    2f06:	e9 2f       	mov	r30, r25
    2f08:	e0 78       	andi	r30, 0x80	; 128
    2f0a:	d7 d1       	rcall	.+942    	; 0x32ba <__fp_split3>
    2f0c:	68 f3       	brcs	.-38     	; 0x2ee8 <__addsf3x+0xa6>
    2f0e:	09 2e       	mov	r0, r25
    2f10:	05 2a       	or	r0, r21
    2f12:	c1 f3       	breq	.-16     	; 0x2f04 <__addsf3x+0xc2>
    2f14:	26 17       	cp	r18, r22
    2f16:	37 07       	cpc	r19, r23
    2f18:	48 07       	cpc	r20, r24
    2f1a:	59 07       	cpc	r21, r25
    2f1c:	38 f0       	brcs	.+14     	; 0x2f2c <atan2+0x26>
    2f1e:	0e 2e       	mov	r0, r30
    2f20:	07 f8       	bld	r0, 7
    2f22:	e0 25       	eor	r30, r0
    2f24:	69 f0       	breq	.+26     	; 0x2f40 <atan2+0x3a>
    2f26:	e0 25       	eor	r30, r0
    2f28:	e0 64       	ori	r30, 0x40	; 64
    2f2a:	0a c0       	rjmp	.+20     	; 0x2f40 <atan2+0x3a>
    2f2c:	ef 63       	ori	r30, 0x3F	; 63
    2f2e:	07 f8       	bld	r0, 7
    2f30:	00 94       	com	r0
    2f32:	07 fa       	bst	r0, 7
    2f34:	db 01       	movw	r26, r22
    2f36:	b9 01       	movw	r22, r18
    2f38:	9d 01       	movw	r18, r26
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	ca 01       	movw	r24, r20
    2f3e:	ad 01       	movw	r20, r26
    2f40:	ef 93       	push	r30
    2f42:	4a d0       	rcall	.+148    	; 0x2fd8 <__divsf3_pse>
    2f44:	98 d1       	rcall	.+816    	; 0x3276 <__fp_round>
    2f46:	0a d0       	rcall	.+20     	; 0x2f5c <atan>
    2f48:	5f 91       	pop	r21
    2f4a:	55 23       	and	r21, r21
    2f4c:	31 f0       	breq	.+12     	; 0x2f5a <atan2+0x54>
    2f4e:	2b ed       	ldi	r18, 0xDB	; 219
    2f50:	3f e0       	ldi	r19, 0x0F	; 15
    2f52:	49 e4       	ldi	r20, 0x49	; 73
    2f54:	50 fd       	sbrc	r21, 0
    2f56:	49 ec       	ldi	r20, 0xC9	; 201
    2f58:	63 cf       	rjmp	.-314    	; 0x2e20 <__addsf3>
    2f5a:	08 95       	ret

00002f5c <atan>:
    2f5c:	df 93       	push	r29
    2f5e:	dd 27       	eor	r29, r29
    2f60:	b9 2f       	mov	r27, r25
    2f62:	bf 77       	andi	r27, 0x7F	; 127
    2f64:	40 e8       	ldi	r20, 0x80	; 128
    2f66:	5f e3       	ldi	r21, 0x3F	; 63
    2f68:	16 16       	cp	r1, r22
    2f6a:	17 06       	cpc	r1, r23
    2f6c:	48 07       	cpc	r20, r24
    2f6e:	5b 07       	cpc	r21, r27
    2f70:	10 f4       	brcc	.+4      	; 0x2f76 <atan+0x1a>
    2f72:	d9 2f       	mov	r29, r25
    2f74:	cf d1       	rcall	.+926    	; 0x3314 <inverse>
    2f76:	9f 93       	push	r25
    2f78:	8f 93       	push	r24
    2f7a:	7f 93       	push	r23
    2f7c:	6f 93       	push	r22
    2f7e:	7c d2       	rcall	.+1272   	; 0x3478 <square>
    2f80:	ec ea       	ldi	r30, 0xAC	; 172
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	1d d1       	rcall	.+570    	; 0x31c0 <__fp_powser>
    2f86:	77 d1       	rcall	.+750    	; 0x3276 <__fp_round>
    2f88:	2f 91       	pop	r18
    2f8a:	3f 91       	pop	r19
    2f8c:	4f 91       	pop	r20
    2f8e:	5f 91       	pop	r21
    2f90:	d4 d1       	rcall	.+936    	; 0x333a <__mulsf3x>
    2f92:	dd 23       	and	r29, r29
    2f94:	49 f0       	breq	.+18     	; 0x2fa8 <atan+0x4c>
    2f96:	90 58       	subi	r25, 0x80	; 128
    2f98:	a2 ea       	ldi	r26, 0xA2	; 162
    2f9a:	2a ed       	ldi	r18, 0xDA	; 218
    2f9c:	3f e0       	ldi	r19, 0x0F	; 15
    2f9e:	49 ec       	ldi	r20, 0xC9	; 201
    2fa0:	5f e3       	ldi	r21, 0x3F	; 63
    2fa2:	d0 78       	andi	r29, 0x80	; 128
    2fa4:	5d 27       	eor	r21, r29
    2fa6:	4d df       	rcall	.-358    	; 0x2e42 <__addsf3x>
    2fa8:	df 91       	pop	r29
    2faa:	65 c1       	rjmp	.+714    	; 0x3276 <__fp_round>

00002fac <__cmpsf2>:
    2fac:	dc d0       	rcall	.+440    	; 0x3166 <__fp_cmp>
    2fae:	08 f4       	brcc	.+2      	; 0x2fb2 <__cmpsf2+0x6>
    2fb0:	81 e0       	ldi	r24, 0x01	; 1
    2fb2:	08 95       	ret

00002fb4 <cos>:
    2fb4:	39 d1       	rcall	.+626    	; 0x3228 <__fp_rempio2>
    2fb6:	e3 95       	inc	r30
    2fb8:	6f c1       	rjmp	.+734    	; 0x3298 <__fp_sinus>

00002fba <__divsf3>:
    2fba:	0c d0       	rcall	.+24     	; 0x2fd4 <__divsf3x>
    2fbc:	5c c1       	rjmp	.+696    	; 0x3276 <__fp_round>
    2fbe:	2c d1       	rcall	.+600    	; 0x3218 <__fp_pscB>
    2fc0:	40 f0       	brcs	.+16     	; 0x2fd2 <__divsf3+0x18>
    2fc2:	23 d1       	rcall	.+582    	; 0x320a <__fp_pscA>
    2fc4:	30 f0       	brcs	.+12     	; 0x2fd2 <__divsf3+0x18>
    2fc6:	21 f4       	brne	.+8      	; 0x2fd0 <__divsf3+0x16>
    2fc8:	5f 3f       	cpi	r21, 0xFF	; 255
    2fca:	19 f0       	breq	.+6      	; 0x2fd2 <__divsf3+0x18>
    2fcc:	f0 c0       	rjmp	.+480    	; 0x31ae <__fp_inf>
    2fce:	51 11       	cpse	r21, r1
    2fd0:	97 c1       	rjmp	.+814    	; 0x3300 <__fp_szero>
    2fd2:	f3 c0       	rjmp	.+486    	; 0x31ba <__fp_nan>

00002fd4 <__divsf3x>:
    2fd4:	72 d1       	rcall	.+740    	; 0x32ba <__fp_split3>
    2fd6:	98 f3       	brcs	.-26     	; 0x2fbe <__divsf3+0x4>

00002fd8 <__divsf3_pse>:
    2fd8:	99 23       	and	r25, r25
    2fda:	c9 f3       	breq	.-14     	; 0x2fce <__divsf3+0x14>
    2fdc:	55 23       	and	r21, r21
    2fde:	b1 f3       	breq	.-20     	; 0x2fcc <__divsf3+0x12>
    2fe0:	95 1b       	sub	r25, r21
    2fe2:	55 0b       	sbc	r21, r21
    2fe4:	bb 27       	eor	r27, r27
    2fe6:	aa 27       	eor	r26, r26
    2fe8:	62 17       	cp	r22, r18
    2fea:	73 07       	cpc	r23, r19
    2fec:	84 07       	cpc	r24, r20
    2fee:	38 f0       	brcs	.+14     	; 0x2ffe <__divsf3_pse+0x26>
    2ff0:	9f 5f       	subi	r25, 0xFF	; 255
    2ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ff4:	22 0f       	add	r18, r18
    2ff6:	33 1f       	adc	r19, r19
    2ff8:	44 1f       	adc	r20, r20
    2ffa:	aa 1f       	adc	r26, r26
    2ffc:	a9 f3       	breq	.-22     	; 0x2fe8 <__divsf3_pse+0x10>
    2ffe:	33 d0       	rcall	.+102    	; 0x3066 <__divsf3_pse+0x8e>
    3000:	0e 2e       	mov	r0, r30
    3002:	3a f0       	brmi	.+14     	; 0x3012 <__divsf3_pse+0x3a>
    3004:	e0 e8       	ldi	r30, 0x80	; 128
    3006:	30 d0       	rcall	.+96     	; 0x3068 <__divsf3_pse+0x90>
    3008:	91 50       	subi	r25, 0x01	; 1
    300a:	50 40       	sbci	r21, 0x00	; 0
    300c:	e6 95       	lsr	r30
    300e:	00 1c       	adc	r0, r0
    3010:	ca f7       	brpl	.-14     	; 0x3004 <__divsf3_pse+0x2c>
    3012:	29 d0       	rcall	.+82     	; 0x3066 <__divsf3_pse+0x8e>
    3014:	fe 2f       	mov	r31, r30
    3016:	27 d0       	rcall	.+78     	; 0x3066 <__divsf3_pse+0x8e>
    3018:	66 0f       	add	r22, r22
    301a:	77 1f       	adc	r23, r23
    301c:	88 1f       	adc	r24, r24
    301e:	bb 1f       	adc	r27, r27
    3020:	26 17       	cp	r18, r22
    3022:	37 07       	cpc	r19, r23
    3024:	48 07       	cpc	r20, r24
    3026:	ab 07       	cpc	r26, r27
    3028:	b0 e8       	ldi	r27, 0x80	; 128
    302a:	09 f0       	breq	.+2      	; 0x302e <__divsf3_pse+0x56>
    302c:	bb 0b       	sbc	r27, r27
    302e:	80 2d       	mov	r24, r0
    3030:	bf 01       	movw	r22, r30
    3032:	ff 27       	eor	r31, r31
    3034:	93 58       	subi	r25, 0x83	; 131
    3036:	5f 4f       	sbci	r21, 0xFF	; 255
    3038:	2a f0       	brmi	.+10     	; 0x3044 <__divsf3_pse+0x6c>
    303a:	9e 3f       	cpi	r25, 0xFE	; 254
    303c:	51 05       	cpc	r21, r1
    303e:	68 f0       	brcs	.+26     	; 0x305a <__divsf3_pse+0x82>
    3040:	b6 c0       	rjmp	.+364    	; 0x31ae <__fp_inf>
    3042:	5e c1       	rjmp	.+700    	; 0x3300 <__fp_szero>
    3044:	5f 3f       	cpi	r21, 0xFF	; 255
    3046:	ec f3       	brlt	.-6      	; 0x3042 <__divsf3_pse+0x6a>
    3048:	98 3e       	cpi	r25, 0xE8	; 232
    304a:	dc f3       	brlt	.-10     	; 0x3042 <__divsf3_pse+0x6a>
    304c:	86 95       	lsr	r24
    304e:	77 95       	ror	r23
    3050:	67 95       	ror	r22
    3052:	b7 95       	ror	r27
    3054:	f7 95       	ror	r31
    3056:	9f 5f       	subi	r25, 0xFF	; 255
    3058:	c9 f7       	brne	.-14     	; 0x304c <__divsf3_pse+0x74>
    305a:	88 0f       	add	r24, r24
    305c:	91 1d       	adc	r25, r1
    305e:	96 95       	lsr	r25
    3060:	87 95       	ror	r24
    3062:	97 f9       	bld	r25, 7
    3064:	08 95       	ret
    3066:	e1 e0       	ldi	r30, 0x01	; 1
    3068:	66 0f       	add	r22, r22
    306a:	77 1f       	adc	r23, r23
    306c:	88 1f       	adc	r24, r24
    306e:	bb 1f       	adc	r27, r27
    3070:	62 17       	cp	r22, r18
    3072:	73 07       	cpc	r23, r19
    3074:	84 07       	cpc	r24, r20
    3076:	ba 07       	cpc	r27, r26
    3078:	20 f0       	brcs	.+8      	; 0x3082 <__divsf3_pse+0xaa>
    307a:	62 1b       	sub	r22, r18
    307c:	73 0b       	sbc	r23, r19
    307e:	84 0b       	sbc	r24, r20
    3080:	ba 0b       	sbc	r27, r26
    3082:	ee 1f       	adc	r30, r30
    3084:	88 f7       	brcc	.-30     	; 0x3068 <__divsf3_pse+0x90>
    3086:	e0 95       	com	r30
    3088:	08 95       	ret

0000308a <__fixsfsi>:
    308a:	04 d0       	rcall	.+8      	; 0x3094 <__fixunssfsi>
    308c:	68 94       	set
    308e:	b1 11       	cpse	r27, r1
    3090:	37 c1       	rjmp	.+622    	; 0x3300 <__fp_szero>
    3092:	08 95       	ret

00003094 <__fixunssfsi>:
    3094:	1a d1       	rcall	.+564    	; 0x32ca <__fp_splitA>
    3096:	88 f0       	brcs	.+34     	; 0x30ba <__fixunssfsi+0x26>
    3098:	9f 57       	subi	r25, 0x7F	; 127
    309a:	90 f0       	brcs	.+36     	; 0x30c0 <__fixunssfsi+0x2c>
    309c:	b9 2f       	mov	r27, r25
    309e:	99 27       	eor	r25, r25
    30a0:	b7 51       	subi	r27, 0x17	; 23
    30a2:	a0 f0       	brcs	.+40     	; 0x30cc <__fixunssfsi+0x38>
    30a4:	d1 f0       	breq	.+52     	; 0x30da <__fixunssfsi+0x46>
    30a6:	66 0f       	add	r22, r22
    30a8:	77 1f       	adc	r23, r23
    30aa:	88 1f       	adc	r24, r24
    30ac:	99 1f       	adc	r25, r25
    30ae:	1a f0       	brmi	.+6      	; 0x30b6 <__fixunssfsi+0x22>
    30b0:	ba 95       	dec	r27
    30b2:	c9 f7       	brne	.-14     	; 0x30a6 <__fixunssfsi+0x12>
    30b4:	12 c0       	rjmp	.+36     	; 0x30da <__fixunssfsi+0x46>
    30b6:	b1 30       	cpi	r27, 0x01	; 1
    30b8:	81 f0       	breq	.+32     	; 0x30da <__fixunssfsi+0x46>
    30ba:	21 d1       	rcall	.+578    	; 0x32fe <__fp_zero>
    30bc:	b1 e0       	ldi	r27, 0x01	; 1
    30be:	08 95       	ret
    30c0:	1e c1       	rjmp	.+572    	; 0x32fe <__fp_zero>
    30c2:	67 2f       	mov	r22, r23
    30c4:	78 2f       	mov	r23, r24
    30c6:	88 27       	eor	r24, r24
    30c8:	b8 5f       	subi	r27, 0xF8	; 248
    30ca:	39 f0       	breq	.+14     	; 0x30da <__fixunssfsi+0x46>
    30cc:	b9 3f       	cpi	r27, 0xF9	; 249
    30ce:	cc f3       	brlt	.-14     	; 0x30c2 <__fixunssfsi+0x2e>
    30d0:	86 95       	lsr	r24
    30d2:	77 95       	ror	r23
    30d4:	67 95       	ror	r22
    30d6:	b3 95       	inc	r27
    30d8:	d9 f7       	brne	.-10     	; 0x30d0 <__fixunssfsi+0x3c>
    30da:	3e f4       	brtc	.+14     	; 0x30ea <__fixunssfsi+0x56>
    30dc:	90 95       	com	r25
    30de:	80 95       	com	r24
    30e0:	70 95       	com	r23
    30e2:	61 95       	neg	r22
    30e4:	7f 4f       	sbci	r23, 0xFF	; 255
    30e6:	8f 4f       	sbci	r24, 0xFF	; 255
    30e8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ea:	08 95       	ret

000030ec <__floatunsisf>:
    30ec:	e8 94       	clt
    30ee:	09 c0       	rjmp	.+18     	; 0x3102 <__floatsisf+0x12>

000030f0 <__floatsisf>:
    30f0:	97 fb       	bst	r25, 7
    30f2:	3e f4       	brtc	.+14     	; 0x3102 <__floatsisf+0x12>
    30f4:	90 95       	com	r25
    30f6:	80 95       	com	r24
    30f8:	70 95       	com	r23
    30fa:	61 95       	neg	r22
    30fc:	7f 4f       	sbci	r23, 0xFF	; 255
    30fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3100:	9f 4f       	sbci	r25, 0xFF	; 255
    3102:	99 23       	and	r25, r25
    3104:	a9 f0       	breq	.+42     	; 0x3130 <__floatsisf+0x40>
    3106:	f9 2f       	mov	r31, r25
    3108:	96 e9       	ldi	r25, 0x96	; 150
    310a:	bb 27       	eor	r27, r27
    310c:	93 95       	inc	r25
    310e:	f6 95       	lsr	r31
    3110:	87 95       	ror	r24
    3112:	77 95       	ror	r23
    3114:	67 95       	ror	r22
    3116:	b7 95       	ror	r27
    3118:	f1 11       	cpse	r31, r1
    311a:	f8 cf       	rjmp	.-16     	; 0x310c <__floatsisf+0x1c>
    311c:	fa f4       	brpl	.+62     	; 0x315c <__floatsisf+0x6c>
    311e:	bb 0f       	add	r27, r27
    3120:	11 f4       	brne	.+4      	; 0x3126 <__floatsisf+0x36>
    3122:	60 ff       	sbrs	r22, 0
    3124:	1b c0       	rjmp	.+54     	; 0x315c <__floatsisf+0x6c>
    3126:	6f 5f       	subi	r22, 0xFF	; 255
    3128:	7f 4f       	sbci	r23, 0xFF	; 255
    312a:	8f 4f       	sbci	r24, 0xFF	; 255
    312c:	9f 4f       	sbci	r25, 0xFF	; 255
    312e:	16 c0       	rjmp	.+44     	; 0x315c <__floatsisf+0x6c>
    3130:	88 23       	and	r24, r24
    3132:	11 f0       	breq	.+4      	; 0x3138 <__floatsisf+0x48>
    3134:	96 e9       	ldi	r25, 0x96	; 150
    3136:	11 c0       	rjmp	.+34     	; 0x315a <__floatsisf+0x6a>
    3138:	77 23       	and	r23, r23
    313a:	21 f0       	breq	.+8      	; 0x3144 <__floatsisf+0x54>
    313c:	9e e8       	ldi	r25, 0x8E	; 142
    313e:	87 2f       	mov	r24, r23
    3140:	76 2f       	mov	r23, r22
    3142:	05 c0       	rjmp	.+10     	; 0x314e <__floatsisf+0x5e>
    3144:	66 23       	and	r22, r22
    3146:	71 f0       	breq	.+28     	; 0x3164 <__floatsisf+0x74>
    3148:	96 e8       	ldi	r25, 0x86	; 134
    314a:	86 2f       	mov	r24, r22
    314c:	70 e0       	ldi	r23, 0x00	; 0
    314e:	60 e0       	ldi	r22, 0x00	; 0
    3150:	2a f0       	brmi	.+10     	; 0x315c <__floatsisf+0x6c>
    3152:	9a 95       	dec	r25
    3154:	66 0f       	add	r22, r22
    3156:	77 1f       	adc	r23, r23
    3158:	88 1f       	adc	r24, r24
    315a:	da f7       	brpl	.-10     	; 0x3152 <__floatsisf+0x62>
    315c:	88 0f       	add	r24, r24
    315e:	96 95       	lsr	r25
    3160:	87 95       	ror	r24
    3162:	97 f9       	bld	r25, 7
    3164:	08 95       	ret

00003166 <__fp_cmp>:
    3166:	99 0f       	add	r25, r25
    3168:	00 08       	sbc	r0, r0
    316a:	55 0f       	add	r21, r21
    316c:	aa 0b       	sbc	r26, r26
    316e:	e0 e8       	ldi	r30, 0x80	; 128
    3170:	fe ef       	ldi	r31, 0xFE	; 254
    3172:	16 16       	cp	r1, r22
    3174:	17 06       	cpc	r1, r23
    3176:	e8 07       	cpc	r30, r24
    3178:	f9 07       	cpc	r31, r25
    317a:	c0 f0       	brcs	.+48     	; 0x31ac <__fp_cmp+0x46>
    317c:	12 16       	cp	r1, r18
    317e:	13 06       	cpc	r1, r19
    3180:	e4 07       	cpc	r30, r20
    3182:	f5 07       	cpc	r31, r21
    3184:	98 f0       	brcs	.+38     	; 0x31ac <__fp_cmp+0x46>
    3186:	62 1b       	sub	r22, r18
    3188:	73 0b       	sbc	r23, r19
    318a:	84 0b       	sbc	r24, r20
    318c:	95 0b       	sbc	r25, r21
    318e:	39 f4       	brne	.+14     	; 0x319e <__fp_cmp+0x38>
    3190:	0a 26       	eor	r0, r26
    3192:	61 f0       	breq	.+24     	; 0x31ac <__fp_cmp+0x46>
    3194:	23 2b       	or	r18, r19
    3196:	24 2b       	or	r18, r20
    3198:	25 2b       	or	r18, r21
    319a:	21 f4       	brne	.+8      	; 0x31a4 <__fp_cmp+0x3e>
    319c:	08 95       	ret
    319e:	0a 26       	eor	r0, r26
    31a0:	09 f4       	brne	.+2      	; 0x31a4 <__fp_cmp+0x3e>
    31a2:	a1 40       	sbci	r26, 0x01	; 1
    31a4:	a6 95       	lsr	r26
    31a6:	8f ef       	ldi	r24, 0xFF	; 255
    31a8:	81 1d       	adc	r24, r1
    31aa:	81 1d       	adc	r24, r1
    31ac:	08 95       	ret

000031ae <__fp_inf>:
    31ae:	97 f9       	bld	r25, 7
    31b0:	9f 67       	ori	r25, 0x7F	; 127
    31b2:	80 e8       	ldi	r24, 0x80	; 128
    31b4:	70 e0       	ldi	r23, 0x00	; 0
    31b6:	60 e0       	ldi	r22, 0x00	; 0
    31b8:	08 95       	ret

000031ba <__fp_nan>:
    31ba:	9f ef       	ldi	r25, 0xFF	; 255
    31bc:	80 ec       	ldi	r24, 0xC0	; 192
    31be:	08 95       	ret

000031c0 <__fp_powser>:
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	1f 93       	push	r17
    31c6:	0f 93       	push	r16
    31c8:	ff 92       	push	r15
    31ca:	ef 92       	push	r14
    31cc:	df 92       	push	r13
    31ce:	7b 01       	movw	r14, r22
    31d0:	8c 01       	movw	r16, r24
    31d2:	68 94       	set
    31d4:	05 c0       	rjmp	.+10     	; 0x31e0 <__fp_powser+0x20>
    31d6:	da 2e       	mov	r13, r26
    31d8:	ef 01       	movw	r28, r30
    31da:	af d0       	rcall	.+350    	; 0x333a <__mulsf3x>
    31dc:	fe 01       	movw	r30, r28
    31de:	e8 94       	clt
    31e0:	a5 91       	lpm	r26, Z+
    31e2:	25 91       	lpm	r18, Z+
    31e4:	35 91       	lpm	r19, Z+
    31e6:	45 91       	lpm	r20, Z+
    31e8:	55 91       	lpm	r21, Z+
    31ea:	ae f3       	brts	.-22     	; 0x31d6 <__fp_powser+0x16>
    31ec:	ef 01       	movw	r28, r30
    31ee:	29 de       	rcall	.-942    	; 0x2e42 <__addsf3x>
    31f0:	fe 01       	movw	r30, r28
    31f2:	97 01       	movw	r18, r14
    31f4:	a8 01       	movw	r20, r16
    31f6:	da 94       	dec	r13
    31f8:	79 f7       	brne	.-34     	; 0x31d8 <__fp_powser+0x18>
    31fa:	df 90       	pop	r13
    31fc:	ef 90       	pop	r14
    31fe:	ff 90       	pop	r15
    3200:	0f 91       	pop	r16
    3202:	1f 91       	pop	r17
    3204:	cf 91       	pop	r28
    3206:	df 91       	pop	r29
    3208:	08 95       	ret

0000320a <__fp_pscA>:
    320a:	00 24       	eor	r0, r0
    320c:	0a 94       	dec	r0
    320e:	16 16       	cp	r1, r22
    3210:	17 06       	cpc	r1, r23
    3212:	18 06       	cpc	r1, r24
    3214:	09 06       	cpc	r0, r25
    3216:	08 95       	ret

00003218 <__fp_pscB>:
    3218:	00 24       	eor	r0, r0
    321a:	0a 94       	dec	r0
    321c:	12 16       	cp	r1, r18
    321e:	13 06       	cpc	r1, r19
    3220:	14 06       	cpc	r1, r20
    3222:	05 06       	cpc	r0, r21
    3224:	08 95       	ret
    3226:	c9 cf       	rjmp	.-110    	; 0x31ba <__fp_nan>

00003228 <__fp_rempio2>:
    3228:	50 d0       	rcall	.+160    	; 0x32ca <__fp_splitA>
    322a:	e8 f3       	brcs	.-6      	; 0x3226 <__fp_pscB+0xe>
    322c:	e8 94       	clt
    322e:	e0 e0       	ldi	r30, 0x00	; 0
    3230:	bb 27       	eor	r27, r27
    3232:	9f 57       	subi	r25, 0x7F	; 127
    3234:	f0 f0       	brcs	.+60     	; 0x3272 <__fp_rempio2+0x4a>
    3236:	2a ed       	ldi	r18, 0xDA	; 218
    3238:	3f e0       	ldi	r19, 0x0F	; 15
    323a:	49 ec       	ldi	r20, 0xC9	; 201
    323c:	06 c0       	rjmp	.+12     	; 0x324a <__fp_rempio2+0x22>
    323e:	ee 0f       	add	r30, r30
    3240:	bb 0f       	add	r27, r27
    3242:	66 1f       	adc	r22, r22
    3244:	77 1f       	adc	r23, r23
    3246:	88 1f       	adc	r24, r24
    3248:	28 f0       	brcs	.+10     	; 0x3254 <__fp_rempio2+0x2c>
    324a:	b2 3a       	cpi	r27, 0xA2	; 162
    324c:	62 07       	cpc	r22, r18
    324e:	73 07       	cpc	r23, r19
    3250:	84 07       	cpc	r24, r20
    3252:	28 f0       	brcs	.+10     	; 0x325e <__fp_rempio2+0x36>
    3254:	b2 5a       	subi	r27, 0xA2	; 162
    3256:	62 0b       	sbc	r22, r18
    3258:	73 0b       	sbc	r23, r19
    325a:	84 0b       	sbc	r24, r20
    325c:	e3 95       	inc	r30
    325e:	9a 95       	dec	r25
    3260:	72 f7       	brpl	.-36     	; 0x323e <__fp_rempio2+0x16>
    3262:	80 38       	cpi	r24, 0x80	; 128
    3264:	30 f4       	brcc	.+12     	; 0x3272 <__fp_rempio2+0x4a>
    3266:	9a 95       	dec	r25
    3268:	bb 0f       	add	r27, r27
    326a:	66 1f       	adc	r22, r22
    326c:	77 1f       	adc	r23, r23
    326e:	88 1f       	adc	r24, r24
    3270:	d2 f7       	brpl	.-12     	; 0x3266 <__fp_rempio2+0x3e>
    3272:	90 48       	sbci	r25, 0x80	; 128
    3274:	06 c1       	rjmp	.+524    	; 0x3482 <__fp_mpack_finite>

00003276 <__fp_round>:
    3276:	09 2e       	mov	r0, r25
    3278:	03 94       	inc	r0
    327a:	00 0c       	add	r0, r0
    327c:	11 f4       	brne	.+4      	; 0x3282 <__fp_round+0xc>
    327e:	88 23       	and	r24, r24
    3280:	52 f0       	brmi	.+20     	; 0x3296 <__fp_round+0x20>
    3282:	bb 0f       	add	r27, r27
    3284:	40 f4       	brcc	.+16     	; 0x3296 <__fp_round+0x20>
    3286:	bf 2b       	or	r27, r31
    3288:	11 f4       	brne	.+4      	; 0x328e <__fp_round+0x18>
    328a:	60 ff       	sbrs	r22, 0
    328c:	04 c0       	rjmp	.+8      	; 0x3296 <__fp_round+0x20>
    328e:	6f 5f       	subi	r22, 0xFF	; 255
    3290:	7f 4f       	sbci	r23, 0xFF	; 255
    3292:	8f 4f       	sbci	r24, 0xFF	; 255
    3294:	9f 4f       	sbci	r25, 0xFF	; 255
    3296:	08 95       	ret

00003298 <__fp_sinus>:
    3298:	ef 93       	push	r30
    329a:	e0 ff       	sbrs	r30, 0
    329c:	06 c0       	rjmp	.+12     	; 0x32aa <__fp_sinus+0x12>
    329e:	a2 ea       	ldi	r26, 0xA2	; 162
    32a0:	2a ed       	ldi	r18, 0xDA	; 218
    32a2:	3f e0       	ldi	r19, 0x0F	; 15
    32a4:	49 ec       	ldi	r20, 0xC9	; 201
    32a6:	5f eb       	ldi	r21, 0xBF	; 191
    32a8:	cc dd       	rcall	.-1128   	; 0x2e42 <__addsf3x>
    32aa:	e5 df       	rcall	.-54     	; 0x3276 <__fp_round>
    32ac:	0f 90       	pop	r0
    32ae:	03 94       	inc	r0
    32b0:	01 fc       	sbrc	r0, 1
    32b2:	90 58       	subi	r25, 0x80	; 128
    32b4:	e9 ed       	ldi	r30, 0xD9	; 217
    32b6:	f0 e0       	ldi	r31, 0x00	; 0
    32b8:	f7 c0       	rjmp	.+494    	; 0x34a8 <__fp_powsodd>

000032ba <__fp_split3>:
    32ba:	57 fd       	sbrc	r21, 7
    32bc:	90 58       	subi	r25, 0x80	; 128
    32be:	44 0f       	add	r20, r20
    32c0:	55 1f       	adc	r21, r21
    32c2:	59 f0       	breq	.+22     	; 0x32da <__fp_splitA+0x10>
    32c4:	5f 3f       	cpi	r21, 0xFF	; 255
    32c6:	71 f0       	breq	.+28     	; 0x32e4 <__fp_splitA+0x1a>
    32c8:	47 95       	ror	r20

000032ca <__fp_splitA>:
    32ca:	88 0f       	add	r24, r24
    32cc:	97 fb       	bst	r25, 7
    32ce:	99 1f       	adc	r25, r25
    32d0:	61 f0       	breq	.+24     	; 0x32ea <__fp_splitA+0x20>
    32d2:	9f 3f       	cpi	r25, 0xFF	; 255
    32d4:	79 f0       	breq	.+30     	; 0x32f4 <__fp_splitA+0x2a>
    32d6:	87 95       	ror	r24
    32d8:	08 95       	ret
    32da:	12 16       	cp	r1, r18
    32dc:	13 06       	cpc	r1, r19
    32de:	14 06       	cpc	r1, r20
    32e0:	55 1f       	adc	r21, r21
    32e2:	f2 cf       	rjmp	.-28     	; 0x32c8 <__fp_split3+0xe>
    32e4:	46 95       	lsr	r20
    32e6:	f1 df       	rcall	.-30     	; 0x32ca <__fp_splitA>
    32e8:	08 c0       	rjmp	.+16     	; 0x32fa <__fp_splitA+0x30>
    32ea:	16 16       	cp	r1, r22
    32ec:	17 06       	cpc	r1, r23
    32ee:	18 06       	cpc	r1, r24
    32f0:	99 1f       	adc	r25, r25
    32f2:	f1 cf       	rjmp	.-30     	; 0x32d6 <__fp_splitA+0xc>
    32f4:	86 95       	lsr	r24
    32f6:	71 05       	cpc	r23, r1
    32f8:	61 05       	cpc	r22, r1
    32fa:	08 94       	sec
    32fc:	08 95       	ret

000032fe <__fp_zero>:
    32fe:	e8 94       	clt

00003300 <__fp_szero>:
    3300:	bb 27       	eor	r27, r27
    3302:	66 27       	eor	r22, r22
    3304:	77 27       	eor	r23, r23
    3306:	cb 01       	movw	r24, r22
    3308:	97 f9       	bld	r25, 7
    330a:	08 95       	ret

0000330c <__gesf2>:
    330c:	2c df       	rcall	.-424    	; 0x3166 <__fp_cmp>
    330e:	08 f4       	brcc	.+2      	; 0x3312 <__gesf2+0x6>
    3310:	8f ef       	ldi	r24, 0xFF	; 255
    3312:	08 95       	ret

00003314 <inverse>:
    3314:	9b 01       	movw	r18, r22
    3316:	ac 01       	movw	r20, r24
    3318:	60 e0       	ldi	r22, 0x00	; 0
    331a:	70 e0       	ldi	r23, 0x00	; 0
    331c:	80 e8       	ldi	r24, 0x80	; 128
    331e:	9f e3       	ldi	r25, 0x3F	; 63
    3320:	4c ce       	rjmp	.-872    	; 0x2fba <__divsf3>

00003322 <__mulsf3>:
    3322:	0b d0       	rcall	.+22     	; 0x333a <__mulsf3x>
    3324:	a8 cf       	rjmp	.-176    	; 0x3276 <__fp_round>
    3326:	71 df       	rcall	.-286    	; 0x320a <__fp_pscA>
    3328:	28 f0       	brcs	.+10     	; 0x3334 <__mulsf3+0x12>
    332a:	76 df       	rcall	.-276    	; 0x3218 <__fp_pscB>
    332c:	18 f0       	brcs	.+6      	; 0x3334 <__mulsf3+0x12>
    332e:	95 23       	and	r25, r21
    3330:	09 f0       	breq	.+2      	; 0x3334 <__mulsf3+0x12>
    3332:	3d cf       	rjmp	.-390    	; 0x31ae <__fp_inf>
    3334:	42 cf       	rjmp	.-380    	; 0x31ba <__fp_nan>
    3336:	11 24       	eor	r1, r1
    3338:	e3 cf       	rjmp	.-58     	; 0x3300 <__fp_szero>

0000333a <__mulsf3x>:
    333a:	bf df       	rcall	.-130    	; 0x32ba <__fp_split3>
    333c:	a0 f3       	brcs	.-24     	; 0x3326 <__mulsf3+0x4>

0000333e <__mulsf3_pse>:
    333e:	95 9f       	mul	r25, r21
    3340:	d1 f3       	breq	.-12     	; 0x3336 <__mulsf3+0x14>
    3342:	95 0f       	add	r25, r21
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	55 1f       	adc	r21, r21
    3348:	62 9f       	mul	r22, r18
    334a:	f0 01       	movw	r30, r0
    334c:	72 9f       	mul	r23, r18
    334e:	bb 27       	eor	r27, r27
    3350:	f0 0d       	add	r31, r0
    3352:	b1 1d       	adc	r27, r1
    3354:	63 9f       	mul	r22, r19
    3356:	aa 27       	eor	r26, r26
    3358:	f0 0d       	add	r31, r0
    335a:	b1 1d       	adc	r27, r1
    335c:	aa 1f       	adc	r26, r26
    335e:	64 9f       	mul	r22, r20
    3360:	66 27       	eor	r22, r22
    3362:	b0 0d       	add	r27, r0
    3364:	a1 1d       	adc	r26, r1
    3366:	66 1f       	adc	r22, r22
    3368:	82 9f       	mul	r24, r18
    336a:	22 27       	eor	r18, r18
    336c:	b0 0d       	add	r27, r0
    336e:	a1 1d       	adc	r26, r1
    3370:	62 1f       	adc	r22, r18
    3372:	73 9f       	mul	r23, r19
    3374:	b0 0d       	add	r27, r0
    3376:	a1 1d       	adc	r26, r1
    3378:	62 1f       	adc	r22, r18
    337a:	83 9f       	mul	r24, r19
    337c:	a0 0d       	add	r26, r0
    337e:	61 1d       	adc	r22, r1
    3380:	22 1f       	adc	r18, r18
    3382:	74 9f       	mul	r23, r20
    3384:	33 27       	eor	r19, r19
    3386:	a0 0d       	add	r26, r0
    3388:	61 1d       	adc	r22, r1
    338a:	23 1f       	adc	r18, r19
    338c:	84 9f       	mul	r24, r20
    338e:	60 0d       	add	r22, r0
    3390:	21 1d       	adc	r18, r1
    3392:	82 2f       	mov	r24, r18
    3394:	76 2f       	mov	r23, r22
    3396:	6a 2f       	mov	r22, r26
    3398:	11 24       	eor	r1, r1
    339a:	9f 57       	subi	r25, 0x7F	; 127
    339c:	50 40       	sbci	r21, 0x00	; 0
    339e:	8a f0       	brmi	.+34     	; 0x33c2 <__mulsf3_pse+0x84>
    33a0:	e1 f0       	breq	.+56     	; 0x33da <__mulsf3_pse+0x9c>
    33a2:	88 23       	and	r24, r24
    33a4:	4a f0       	brmi	.+18     	; 0x33b8 <__mulsf3_pse+0x7a>
    33a6:	ee 0f       	add	r30, r30
    33a8:	ff 1f       	adc	r31, r31
    33aa:	bb 1f       	adc	r27, r27
    33ac:	66 1f       	adc	r22, r22
    33ae:	77 1f       	adc	r23, r23
    33b0:	88 1f       	adc	r24, r24
    33b2:	91 50       	subi	r25, 0x01	; 1
    33b4:	50 40       	sbci	r21, 0x00	; 0
    33b6:	a9 f7       	brne	.-22     	; 0x33a2 <__mulsf3_pse+0x64>
    33b8:	9e 3f       	cpi	r25, 0xFE	; 254
    33ba:	51 05       	cpc	r21, r1
    33bc:	70 f0       	brcs	.+28     	; 0x33da <__mulsf3_pse+0x9c>
    33be:	f7 ce       	rjmp	.-530    	; 0x31ae <__fp_inf>
    33c0:	9f cf       	rjmp	.-194    	; 0x3300 <__fp_szero>
    33c2:	5f 3f       	cpi	r21, 0xFF	; 255
    33c4:	ec f3       	brlt	.-6      	; 0x33c0 <__mulsf3_pse+0x82>
    33c6:	98 3e       	cpi	r25, 0xE8	; 232
    33c8:	dc f3       	brlt	.-10     	; 0x33c0 <__mulsf3_pse+0x82>
    33ca:	86 95       	lsr	r24
    33cc:	77 95       	ror	r23
    33ce:	67 95       	ror	r22
    33d0:	b7 95       	ror	r27
    33d2:	f7 95       	ror	r31
    33d4:	e7 95       	ror	r30
    33d6:	9f 5f       	subi	r25, 0xFF	; 255
    33d8:	c1 f7       	brne	.-16     	; 0x33ca <__mulsf3_pse+0x8c>
    33da:	fe 2b       	or	r31, r30
    33dc:	88 0f       	add	r24, r24
    33de:	91 1d       	adc	r25, r1
    33e0:	96 95       	lsr	r25
    33e2:	87 95       	ror	r24
    33e4:	97 f9       	bld	r25, 7
    33e6:	08 95       	ret

000033e8 <sin>:
    33e8:	9f 93       	push	r25
    33ea:	1e df       	rcall	.-452    	; 0x3228 <__fp_rempio2>
    33ec:	0f 90       	pop	r0
    33ee:	07 fc       	sbrc	r0, 7
    33f0:	ee 5f       	subi	r30, 0xFE	; 254
    33f2:	52 cf       	rjmp	.-348    	; 0x3298 <__fp_sinus>
    33f4:	11 f4       	brne	.+4      	; 0x33fa <sin+0x12>
    33f6:	0e f4       	brtc	.+2      	; 0x33fa <sin+0x12>
    33f8:	e0 ce       	rjmp	.-576    	; 0x31ba <__fp_nan>
    33fa:	41 c0       	rjmp	.+130    	; 0x347e <__fp_mpack>

000033fc <sqrt>:
    33fc:	66 df       	rcall	.-308    	; 0x32ca <__fp_splitA>
    33fe:	d0 f3       	brcs	.-12     	; 0x33f4 <sin+0xc>
    3400:	99 23       	and	r25, r25
    3402:	d9 f3       	breq	.-10     	; 0x33fa <sin+0x12>
    3404:	ce f3       	brts	.-14     	; 0x33f8 <sin+0x10>
    3406:	9f 57       	subi	r25, 0x7F	; 127
    3408:	55 0b       	sbc	r21, r21
    340a:	87 ff       	sbrs	r24, 7
    340c:	46 d0       	rcall	.+140    	; 0x349a <__fp_norm2>
    340e:	00 24       	eor	r0, r0
    3410:	a0 e6       	ldi	r26, 0x60	; 96
    3412:	40 ea       	ldi	r20, 0xA0	; 160
    3414:	90 01       	movw	r18, r0
    3416:	80 58       	subi	r24, 0x80	; 128
    3418:	56 95       	lsr	r21
    341a:	97 95       	ror	r25
    341c:	28 f4       	brcc	.+10     	; 0x3428 <sqrt+0x2c>
    341e:	80 5c       	subi	r24, 0xC0	; 192
    3420:	66 0f       	add	r22, r22
    3422:	77 1f       	adc	r23, r23
    3424:	88 1f       	adc	r24, r24
    3426:	20 f0       	brcs	.+8      	; 0x3430 <sqrt+0x34>
    3428:	26 17       	cp	r18, r22
    342a:	37 07       	cpc	r19, r23
    342c:	48 07       	cpc	r20, r24
    342e:	30 f4       	brcc	.+12     	; 0x343c <sqrt+0x40>
    3430:	62 1b       	sub	r22, r18
    3432:	73 0b       	sbc	r23, r19
    3434:	84 0b       	sbc	r24, r20
    3436:	20 29       	or	r18, r0
    3438:	31 29       	or	r19, r1
    343a:	4a 2b       	or	r20, r26
    343c:	a6 95       	lsr	r26
    343e:	17 94       	ror	r1
    3440:	07 94       	ror	r0
    3442:	20 25       	eor	r18, r0
    3444:	31 25       	eor	r19, r1
    3446:	4a 27       	eor	r20, r26
    3448:	58 f7       	brcc	.-42     	; 0x3420 <sqrt+0x24>
    344a:	66 0f       	add	r22, r22
    344c:	77 1f       	adc	r23, r23
    344e:	88 1f       	adc	r24, r24
    3450:	20 f0       	brcs	.+8      	; 0x345a <sqrt+0x5e>
    3452:	26 17       	cp	r18, r22
    3454:	37 07       	cpc	r19, r23
    3456:	48 07       	cpc	r20, r24
    3458:	30 f4       	brcc	.+12     	; 0x3466 <sqrt+0x6a>
    345a:	62 0b       	sbc	r22, r18
    345c:	73 0b       	sbc	r23, r19
    345e:	84 0b       	sbc	r24, r20
    3460:	20 0d       	add	r18, r0
    3462:	31 1d       	adc	r19, r1
    3464:	41 1d       	adc	r20, r1
    3466:	a0 95       	com	r26
    3468:	81 f7       	brne	.-32     	; 0x344a <sqrt+0x4e>
    346a:	b9 01       	movw	r22, r18
    346c:	84 2f       	mov	r24, r20
    346e:	91 58       	subi	r25, 0x81	; 129
    3470:	88 0f       	add	r24, r24
    3472:	96 95       	lsr	r25
    3474:	87 95       	ror	r24
    3476:	08 95       	ret

00003478 <square>:
    3478:	9b 01       	movw	r18, r22
    347a:	ac 01       	movw	r20, r24
    347c:	52 cf       	rjmp	.-348    	; 0x3322 <__mulsf3>

0000347e <__fp_mpack>:
    347e:	9f 3f       	cpi	r25, 0xFF	; 255
    3480:	31 f0       	breq	.+12     	; 0x348e <__fp_mpack_finite+0xc>

00003482 <__fp_mpack_finite>:
    3482:	91 50       	subi	r25, 0x01	; 1
    3484:	20 f4       	brcc	.+8      	; 0x348e <__fp_mpack_finite+0xc>
    3486:	87 95       	ror	r24
    3488:	77 95       	ror	r23
    348a:	67 95       	ror	r22
    348c:	b7 95       	ror	r27
    348e:	88 0f       	add	r24, r24
    3490:	91 1d       	adc	r25, r1
    3492:	96 95       	lsr	r25
    3494:	87 95       	ror	r24
    3496:	97 f9       	bld	r25, 7
    3498:	08 95       	ret

0000349a <__fp_norm2>:
    349a:	91 50       	subi	r25, 0x01	; 1
    349c:	50 40       	sbci	r21, 0x00	; 0
    349e:	66 0f       	add	r22, r22
    34a0:	77 1f       	adc	r23, r23
    34a2:	88 1f       	adc	r24, r24
    34a4:	d2 f7       	brpl	.-12     	; 0x349a <__fp_norm2>
    34a6:	08 95       	ret

000034a8 <__fp_powsodd>:
    34a8:	9f 93       	push	r25
    34aa:	8f 93       	push	r24
    34ac:	7f 93       	push	r23
    34ae:	6f 93       	push	r22
    34b0:	ff 93       	push	r31
    34b2:	ef 93       	push	r30
    34b4:	9b 01       	movw	r18, r22
    34b6:	ac 01       	movw	r20, r24
    34b8:	34 df       	rcall	.-408    	; 0x3322 <__mulsf3>
    34ba:	ef 91       	pop	r30
    34bc:	ff 91       	pop	r31
    34be:	80 de       	rcall	.-768    	; 0x31c0 <__fp_powser>
    34c0:	2f 91       	pop	r18
    34c2:	3f 91       	pop	r19
    34c4:	4f 91       	pop	r20
    34c6:	5f 91       	pop	r21
    34c8:	2c cf       	rjmp	.-424    	; 0x3322 <__mulsf3>

000034ca <_exit>:
    34ca:	f8 94       	cli

000034cc <__stop_program>:
    34cc:	ff cf       	rjmp	.-2      	; 0x34cc <__stop_program>
