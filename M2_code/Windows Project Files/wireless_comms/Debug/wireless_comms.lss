
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  00003080  00003114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003080  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800108  00800108  0000311c  2**0
                  ALLOC
  3 .stab         000035ac  00000000  00000000  0000311c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  000066c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000075d8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000190  00000000  00000000  00007607  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b69  00000000  00000000  00007797  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000785  00000000  00000000  00009300  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000cb7  00000000  00000000  00009a85  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000003e0  00000000  00000000  0000a73c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005dd  00000000  00000000  0000ab1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001cb7  00000000  00000000  0000b0f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000190  00000000  00000000  0000cdb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 7c 11 	jmp	0x22f8	; 0x22f8 <__vector_3>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 68 11 	jmp	0x22d0	; 0x22d0 <__vector_41>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	da e0       	ldi	r29, 0x0A	; 10
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	e0 e8       	ldi	r30, 0x80	; 128
     10c:	f0 e3       	ldi	r31, 0x30	; 48
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a8 30       	cpi	r26, 0x08	; 8
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	a8 e0       	ldi	r26, 0x08	; 8
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	aa 37       	cpi	r26, 0x7A	; 122
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 ea 09 	call	0x13d4	; 0x13d4 <main>
     12e:	0c 94 3e 18 	jmp	0x307c	; 0x307c <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     136:	2f 92       	push	r2
     138:	3f 92       	push	r3
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	8f 92       	push	r8
     144:	9f 92       	push	r9
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	28 97       	sbiw	r28, 0x08	; 8
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	98 86       	std	Y+8, r9	; 0x08
     16c:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     16e:	10 92 09 01 	sts	0x0109, r1
     172:	10 92 08 01 	sts	0x0108, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     176:	8f 3f       	cpi	r24, 0xFF	; 255
     178:	e3 e0       	ldi	r30, 0x03	; 3
     17a:	9e 07       	cpc	r25, r30
     17c:	01 f1       	breq	.+64     	; 0x1be <localize+0x88>
     17e:	6f 3f       	cpi	r22, 0xFF	; 255
     180:	f3 e0       	ldi	r31, 0x03	; 3
     182:	7f 07       	cpc	r23, r31
     184:	e1 f0       	breq	.+56     	; 0x1be <localize+0x88>
     186:	4f 3f       	cpi	r20, 0xFF	; 255
     188:	e3 e0       	ldi	r30, 0x03	; 3
     18a:	5e 07       	cpc	r21, r30
     18c:	c1 f0       	breq	.+48     	; 0x1be <localize+0x88>
     18e:	2f 3f       	cpi	r18, 0xFF	; 255
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	3f 07       	cpc	r19, r31
     194:	a1 f0       	breq	.+40     	; 0x1be <localize+0x88>
     196:	0f 3f       	cpi	r16, 0xFF	; 255
     198:	e3 e0       	ldi	r30, 0x03	; 3
     19a:	1e 07       	cpc	r17, r30
     19c:	81 f0       	breq	.+32     	; 0x1be <localize+0x88>
     19e:	ff ef       	ldi	r31, 0xFF	; 255
     1a0:	ef 16       	cp	r14, r31
     1a2:	f3 e0       	ldi	r31, 0x03	; 3
     1a4:	ff 06       	cpc	r15, r31
     1a6:	59 f0       	breq	.+22     	; 0x1be <localize+0x88>
     1a8:	ef ef       	ldi	r30, 0xFF	; 255
     1aa:	ce 16       	cp	r12, r30
     1ac:	e3 e0       	ldi	r30, 0x03	; 3
     1ae:	de 06       	cpc	r13, r30
     1b0:	31 f0       	breq	.+12     	; 0x1be <localize+0x88>
     1b2:	ff ef       	ldi	r31, 0xFF	; 255
     1b4:	af 16       	cp	r10, r31
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	bf 06       	cpc	r11, r31
     1ba:	09 f0       	breq	.+2      	; 0x1be <localize+0x88>
     1bc:	b0 c6       	rjmp	.+3424   	; 0xf1e <__stack+0x41f>
        flag_no_good_stars = 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 09 01 	sts	0x0109, r25
     1c6:	80 93 08 01 	sts	0x0108, r24
     1ca:	d1 c3       	rjmp	.+1954   	; 0x96e <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     1cc:	f8 01       	movw	r30, r16
     1ce:	a0 80       	ld	r10, Z
     1d0:	b1 80       	ldd	r11, Z+1	; 0x01
     1d2:	c2 80       	ldd	r12, Z+2	; 0x02
     1d4:	d3 80       	ldd	r13, Z+3	; 0x03
     1d6:	0c 5f       	subi	r16, 0xFC	; 252
     1d8:	1f 4f       	sbci	r17, 0xFF	; 255
     1da:	26 2d       	mov	r18, r6
     1dc:	37 2d       	mov	r19, r7
     1de:	48 2d       	mov	r20, r8
     1e0:	59 2d       	mov	r21, r9
     1e2:	6a 2d       	mov	r22, r10
     1e4:	7b 2d       	mov	r23, r11
     1e6:	8c 2d       	mov	r24, r12
     1e8:	9d 2d       	mov	r25, r13
     1ea:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
     1ee:	18 16       	cp	r1, r24
     1f0:	34 f4       	brge	.+12     	; 0x1fe <localize+0xc8>
     1f2:	fa 82       	std	Y+2, r15	; 0x02
     1f4:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     1f6:	6a 2c       	mov	r6, r10
     1f8:	7b 2c       	mov	r7, r11
     1fa:	8c 2c       	mov	r8, r12
     1fc:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     1fe:	22 2d       	mov	r18, r2
     200:	33 2d       	mov	r19, r3
     202:	44 2d       	mov	r20, r4
     204:	55 2d       	mov	r21, r5
     206:	6a 2d       	mov	r22, r10
     208:	7b 2d       	mov	r23, r11
     20a:	8c 2d       	mov	r24, r12
     20c:	9d 2d       	mov	r25, r13
     20e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
     212:	88 23       	and	r24, r24
     214:	34 f4       	brge	.+12     	; 0x222 <localize+0xec>
     216:	fe 82       	std	Y+6, r15	; 0x06
     218:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     21a:	2a 2c       	mov	r2, r10
     21c:	3b 2c       	mov	r3, r11
     21e:	4c 2c       	mov	r4, r12
     220:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     222:	ff ef       	ldi	r31, 0xFF	; 255
     224:	ef 1a       	sub	r14, r31
     226:	ff 0a       	sbc	r15, r31
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	e8 16       	cp	r14, r24
     22c:	f1 04       	cpc	r15, r1
     22e:	71 f6       	brne	.-100    	; 0x1cc <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     230:	e9 81       	ldd	r30, Y+1	; 0x01
     232:	fa 81       	ldd	r31, Y+2	; 0x02
     234:	e2 30       	cpi	r30, 0x02	; 2
     236:	f1 05       	cpc	r31, r1
     238:	09 f4       	brne	.+2      	; 0x23c <localize+0x106>
     23a:	3e c1       	rjmp	.+636    	; 0x4b8 <localize+0x382>
     23c:	34 f4       	brge	.+12     	; 0x24a <localize+0x114>
     23e:	30 97       	sbiw	r30, 0x00	; 0
     240:	81 f0       	breq	.+32     	; 0x262 <localize+0x12c>
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	09 f0       	breq	.+2      	; 0x248 <localize+0x112>
     246:	8d c3       	rjmp	.+1818   	; 0x962 <localize+0x82c>
     248:	a2 c0       	rjmp	.+324    	; 0x38e <localize+0x258>
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	91 05       	cpc	r25, r1
     252:	09 f4       	brne	.+2      	; 0x256 <localize+0x120>
     254:	5b c2       	rjmp	.+1206   	; 0x70c <localize+0x5d6>
     256:	0c f4       	brge	.+2      	; 0x25a <localize+0x124>
     258:	c4 c1       	rjmp	.+904    	; 0x5e2 <localize+0x4ac>
     25a:	05 97       	sbiw	r24, 0x05	; 5
     25c:	09 f0       	breq	.+2      	; 0x260 <localize+0x12a>
     25e:	81 c3       	rjmp	.+1794   	; 0x962 <localize+0x82c>
     260:	ea c2       	rjmp	.+1492   	; 0x836 <localize+0x700>
            case 0:
                switch (min_id) {
     262:	ed 81       	ldd	r30, Y+5	; 0x05
     264:	fe 81       	ldd	r31, Y+6	; 0x06
     266:	e2 30       	cpi	r30, 0x02	; 2
     268:	f1 05       	cpc	r31, r1
     26a:	39 f1       	breq	.+78     	; 0x2ba <localize+0x184>
     26c:	24 f4       	brge	.+8      	; 0x276 <localize+0x140>
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	09 f0       	breq	.+2      	; 0x274 <localize+0x13e>
     272:	6e c0       	rjmp	.+220    	; 0x350 <localize+0x21a>
     274:	09 c0       	rjmp	.+18     	; 0x288 <localize+0x152>
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	91 05       	cpc	r25, r1
     27e:	b1 f1       	breq	.+108    	; 0x2ec <localize+0x1b6>
     280:	04 97       	sbiw	r24, 0x04	; 4
     282:	09 f0       	breq	.+2      	; 0x286 <localize+0x150>
     284:	65 c0       	rjmp	.+202    	; 0x350 <localize+0x21a>
     286:	4b c0       	rjmp	.+150    	; 0x31e <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     288:	8e e3       	ldi	r24, 0x3E	; 62
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 6d 01 	sts	0x016D, r25
     290:	80 93 6c 01 	sts	0x016C, r24
     294:	86 e3       	ldi	r24, 0x36	; 54
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	90 93 53 01 	sts	0x0153, r25
     29c:	80 93 52 01 	sts	0x0152, r24
     2a0:	8a e3       	ldi	r24, 0x3A	; 58
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	90 93 55 01 	sts	0x0155, r25
     2a8:	80 93 54 01 	sts	0x0154, r24
     2ac:	82 e3       	ldi	r24, 0x32	; 50
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 67 01 	sts	0x0167, r25
     2b4:	80 93 66 01 	sts	0x0166, r24
                        break;
     2b8:	54 c3       	rjmp	.+1704   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     2ba:	8e e3       	ldi	r24, 0x3E	; 62
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	90 93 6d 01 	sts	0x016D, r25
     2c2:	80 93 6c 01 	sts	0x016C, r24
     2c6:	82 e3       	ldi	r24, 0x32	; 50
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	90 93 53 01 	sts	0x0153, r25
     2ce:	80 93 52 01 	sts	0x0152, r24
     2d2:	8a e3       	ldi	r24, 0x3A	; 58
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	90 93 55 01 	sts	0x0155, r25
     2da:	80 93 54 01 	sts	0x0154, r24
     2de:	86 e3       	ldi	r24, 0x36	; 54
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 93 67 01 	sts	0x0167, r25
     2e6:	80 93 66 01 	sts	0x0166, r24
                        break;
     2ea:	3b c3       	rjmp	.+1654   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     2ec:	8a e3       	ldi	r24, 0x3A	; 58
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 93 6d 01 	sts	0x016D, r25
     2f4:	80 93 6c 01 	sts	0x016C, r24
     2f8:	86 e3       	ldi	r24, 0x36	; 54
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 53 01 	sts	0x0153, r25
     300:	80 93 52 01 	sts	0x0152, r24
     304:	8e e3       	ldi	r24, 0x3E	; 62
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	90 93 55 01 	sts	0x0155, r25
     30c:	80 93 54 01 	sts	0x0154, r24
     310:	82 e3       	ldi	r24, 0x32	; 50
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	90 93 67 01 	sts	0x0167, r25
     318:	80 93 66 01 	sts	0x0166, r24
                        break;
     31c:	22 c3       	rjmp	.+1604   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     31e:	8a e3       	ldi	r24, 0x3A	; 58
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	90 93 6d 01 	sts	0x016D, r25
     326:	80 93 6c 01 	sts	0x016C, r24
     32a:	82 e3       	ldi	r24, 0x32	; 50
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	90 93 53 01 	sts	0x0153, r25
     332:	80 93 52 01 	sts	0x0152, r24
     336:	8e e3       	ldi	r24, 0x3E	; 62
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	90 93 55 01 	sts	0x0155, r25
     33e:	80 93 54 01 	sts	0x0154, r24
     342:	86 e3       	ldi	r24, 0x36	; 54
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	90 93 67 01 	sts	0x0167, r25
     34a:	80 93 66 01 	sts	0x0166, r24
                        break;
     34e:	09 c3       	rjmp	.+1554   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     350:	8e e3       	ldi	r24, 0x3E	; 62
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	90 93 6d 01 	sts	0x016D, r25
     358:	80 93 6c 01 	sts	0x016C, r24
     35c:	8a e3       	ldi	r24, 0x3A	; 58
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	90 93 53 01 	sts	0x0153, r25
     364:	80 93 52 01 	sts	0x0152, r24
     368:	86 e3       	ldi	r24, 0x36	; 54
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 55 01 	sts	0x0155, r25
     370:	80 93 54 01 	sts	0x0154, r24
     374:	82 e3       	ldi	r24, 0x32	; 50
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	90 93 67 01 	sts	0x0167, r25
     37c:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 09 01 	sts	0x0109, r25
     388:	80 93 08 01 	sts	0x0108, r24
                        break;
     38c:	f0 c2       	rjmp	.+1504   	; 0x96e <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
     38e:	ed 81       	ldd	r30, Y+5	; 0x05
     390:	fe 81       	ldd	r31, Y+6	; 0x06
     392:	e2 30       	cpi	r30, 0x02	; 2
     394:	f1 05       	cpc	r31, r1
     396:	31 f1       	breq	.+76     	; 0x3e4 <localize+0x2ae>
     398:	1c f4       	brge	.+6      	; 0x3a0 <localize+0x26a>
     39a:	ef 2b       	or	r30, r31
     39c:	51 f0       	breq	.+20     	; 0x3b2 <localize+0x27c>
     39e:	6d c0       	rjmp	.+218    	; 0x47a <localize+0x344>
     3a0:	8d 81       	ldd	r24, Y+5	; 0x05
     3a2:	9e 81       	ldd	r25, Y+6	; 0x06
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	91 05       	cpc	r25, r1
     3a8:	b1 f1       	breq	.+108    	; 0x416 <localize+0x2e0>
     3aa:	05 97       	sbiw	r24, 0x05	; 5
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <localize+0x27a>
     3ae:	65 c0       	rjmp	.+202    	; 0x47a <localize+0x344>
     3b0:	4b c0       	rjmp	.+150    	; 0x448 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     3b2:	8e e3       	ldi	r24, 0x3E	; 62
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 6d 01 	sts	0x016D, r25
     3ba:	80 93 6c 01 	sts	0x016C, r24
     3be:	8a e3       	ldi	r24, 0x3A	; 58
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	90 93 53 01 	sts	0x0153, r25
     3c6:	80 93 52 01 	sts	0x0152, r24
     3ca:	86 e3       	ldi	r24, 0x36	; 54
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	90 93 55 01 	sts	0x0155, r25
     3d2:	80 93 54 01 	sts	0x0154, r24
     3d6:	82 e3       	ldi	r24, 0x32	; 50
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 67 01 	sts	0x0167, r25
     3de:	80 93 66 01 	sts	0x0166, r24
                        break;
     3e2:	bf c2       	rjmp	.+1406   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     3e4:	8e e3       	ldi	r24, 0x3E	; 62
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	90 93 6d 01 	sts	0x016D, r25
     3ec:	80 93 6c 01 	sts	0x016C, r24
     3f0:	82 e3       	ldi	r24, 0x32	; 50
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	90 93 53 01 	sts	0x0153, r25
     3f8:	80 93 52 01 	sts	0x0152, r24
     3fc:	86 e3       	ldi	r24, 0x36	; 54
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	90 93 55 01 	sts	0x0155, r25
     404:	80 93 54 01 	sts	0x0154, r24
     408:	8a e3       	ldi	r24, 0x3A	; 58
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 67 01 	sts	0x0167, r25
     410:	80 93 66 01 	sts	0x0166, r24
                        break;
     414:	a6 c2       	rjmp	.+1356   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     416:	86 e3       	ldi	r24, 0x36	; 54
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	90 93 6d 01 	sts	0x016D, r25
     41e:	80 93 6c 01 	sts	0x016C, r24
     422:	8a e3       	ldi	r24, 0x3A	; 58
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	90 93 53 01 	sts	0x0153, r25
     42a:	80 93 52 01 	sts	0x0152, r24
     42e:	8e e3       	ldi	r24, 0x3E	; 62
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 93 55 01 	sts	0x0155, r25
     436:	80 93 54 01 	sts	0x0154, r24
     43a:	82 e3       	ldi	r24, 0x32	; 50
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	90 93 67 01 	sts	0x0167, r25
     442:	80 93 66 01 	sts	0x0166, r24
                        break;
     446:	8d c2       	rjmp	.+1306   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     448:	86 e3       	ldi	r24, 0x36	; 54
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	90 93 6d 01 	sts	0x016D, r25
     450:	80 93 6c 01 	sts	0x016C, r24
     454:	82 e3       	ldi	r24, 0x32	; 50
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	90 93 53 01 	sts	0x0153, r25
     45c:	80 93 52 01 	sts	0x0152, r24
     460:	8e e3       	ldi	r24, 0x3E	; 62
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	90 93 55 01 	sts	0x0155, r25
     468:	80 93 54 01 	sts	0x0154, r24
     46c:	8a e3       	ldi	r24, 0x3A	; 58
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	90 93 67 01 	sts	0x0167, r25
     474:	80 93 66 01 	sts	0x0166, r24
                        break;
     478:	74 c2       	rjmp	.+1256   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     47a:	8e e3       	ldi	r24, 0x3E	; 62
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	90 93 6d 01 	sts	0x016D, r25
     482:	80 93 6c 01 	sts	0x016C, r24
     486:	8a e3       	ldi	r24, 0x3A	; 58
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	90 93 53 01 	sts	0x0153, r25
     48e:	80 93 52 01 	sts	0x0152, r24
     492:	86 e3       	ldi	r24, 0x36	; 54
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	90 93 55 01 	sts	0x0155, r25
     49a:	80 93 54 01 	sts	0x0154, r24
     49e:	82 e3       	ldi	r24, 0x32	; 50
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	90 93 67 01 	sts	0x0167, r25
     4a6:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 09 01 	sts	0x0109, r25
     4b2:	80 93 08 01 	sts	0x0108, r24
                        break;
     4b6:	5b c2       	rjmp	.+1206   	; 0x96e <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
     4b8:	ed 81       	ldd	r30, Y+5	; 0x05
     4ba:	fe 81       	ldd	r31, Y+6	; 0x06
     4bc:	e1 30       	cpi	r30, 0x01	; 1
     4be:	f1 05       	cpc	r31, r1
     4c0:	31 f1       	breq	.+76     	; 0x50e <localize+0x3d8>
     4c2:	1c f4       	brge	.+6      	; 0x4ca <localize+0x394>
     4c4:	ef 2b       	or	r30, r31
     4c6:	51 f0       	breq	.+20     	; 0x4dc <localize+0x3a6>
     4c8:	6d c0       	rjmp	.+218    	; 0x5a4 <localize+0x46e>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	84 30       	cpi	r24, 0x04	; 4
     4d0:	91 05       	cpc	r25, r1
     4d2:	b1 f1       	breq	.+108    	; 0x540 <localize+0x40a>
     4d4:	05 97       	sbiw	r24, 0x05	; 5
     4d6:	09 f0       	breq	.+2      	; 0x4da <localize+0x3a4>
     4d8:	65 c0       	rjmp	.+202    	; 0x5a4 <localize+0x46e>
     4da:	4b c0       	rjmp	.+150    	; 0x572 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     4dc:	8e e3       	ldi	r24, 0x3E	; 62
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	90 93 6d 01 	sts	0x016D, r25
     4e4:	80 93 6c 01 	sts	0x016C, r24
     4e8:	8a e3       	ldi	r24, 0x3A	; 58
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 53 01 	sts	0x0153, r25
     4f0:	80 93 52 01 	sts	0x0152, r24
     4f4:	82 e3       	ldi	r24, 0x32	; 50
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 93 55 01 	sts	0x0155, r25
     4fc:	80 93 54 01 	sts	0x0154, r24
     500:	86 e3       	ldi	r24, 0x36	; 54
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	90 93 67 01 	sts	0x0167, r25
     508:	80 93 66 01 	sts	0x0166, r24
                        break;
     50c:	2a c2       	rjmp	.+1108   	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     50e:	8e e3       	ldi	r24, 0x3E	; 62
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 6d 01 	sts	0x016D, r25
     516:	80 93 6c 01 	sts	0x016C, r24
     51a:	86 e3       	ldi	r24, 0x36	; 54
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	90 93 53 01 	sts	0x0153, r25
     522:	80 93 52 01 	sts	0x0152, r24
     526:	82 e3       	ldi	r24, 0x32	; 50
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	90 93 55 01 	sts	0x0155, r25
     52e:	80 93 54 01 	sts	0x0154, r24
     532:	8a e3       	ldi	r24, 0x3A	; 58
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	90 93 67 01 	sts	0x0167, r25
     53a:	80 93 66 01 	sts	0x0166, r24
                        break;
     53e:	11 c2       	rjmp	.+1058   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     540:	82 e3       	ldi	r24, 0x32	; 50
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	90 93 6d 01 	sts	0x016D, r25
     548:	80 93 6c 01 	sts	0x016C, r24
     54c:	8a e3       	ldi	r24, 0x3A	; 58
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 53 01 	sts	0x0153, r25
     554:	80 93 52 01 	sts	0x0152, r24
     558:	8e e3       	ldi	r24, 0x3E	; 62
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	90 93 55 01 	sts	0x0155, r25
     560:	80 93 54 01 	sts	0x0154, r24
     564:	86 e3       	ldi	r24, 0x36	; 54
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 93 67 01 	sts	0x0167, r25
     56c:	80 93 66 01 	sts	0x0166, r24
                        break;
     570:	f8 c1       	rjmp	.+1008   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     572:	82 e3       	ldi	r24, 0x32	; 50
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	90 93 6d 01 	sts	0x016D, r25
     57a:	80 93 6c 01 	sts	0x016C, r24
     57e:	86 e3       	ldi	r24, 0x36	; 54
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	90 93 53 01 	sts	0x0153, r25
     586:	80 93 52 01 	sts	0x0152, r24
     58a:	8e e3       	ldi	r24, 0x3E	; 62
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	90 93 55 01 	sts	0x0155, r25
     592:	80 93 54 01 	sts	0x0154, r24
     596:	8a e3       	ldi	r24, 0x3A	; 58
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	90 93 67 01 	sts	0x0167, r25
     59e:	80 93 66 01 	sts	0x0166, r24
                        break;
     5a2:	df c1       	rjmp	.+958    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     5a4:	8e e3       	ldi	r24, 0x3E	; 62
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	90 93 6d 01 	sts	0x016D, r25
     5ac:	80 93 6c 01 	sts	0x016C, r24
     5b0:	8a e3       	ldi	r24, 0x3A	; 58
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	90 93 53 01 	sts	0x0153, r25
     5b8:	80 93 52 01 	sts	0x0152, r24
     5bc:	86 e3       	ldi	r24, 0x36	; 54
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	90 93 55 01 	sts	0x0155, r25
     5c4:	80 93 54 01 	sts	0x0154, r24
     5c8:	82 e3       	ldi	r24, 0x32	; 50
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 67 01 	sts	0x0167, r25
     5d0:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 09 01 	sts	0x0109, r25
     5dc:	80 93 08 01 	sts	0x0108, r24
                        break;
     5e0:	c6 c1       	rjmp	.+908    	; 0x96e <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
     5e2:	ed 81       	ldd	r30, Y+5	; 0x05
     5e4:	fe 81       	ldd	r31, Y+6	; 0x06
     5e6:	e1 30       	cpi	r30, 0x01	; 1
     5e8:	f1 05       	cpc	r31, r1
     5ea:	31 f1       	breq	.+76     	; 0x638 <localize+0x502>
     5ec:	1c f4       	brge	.+6      	; 0x5f4 <localize+0x4be>
     5ee:	ef 2b       	or	r30, r31
     5f0:	51 f0       	breq	.+20     	; 0x606 <localize+0x4d0>
     5f2:	6d c0       	rjmp	.+218    	; 0x6ce <localize+0x598>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	91 05       	cpc	r25, r1
     5fc:	b1 f1       	breq	.+108    	; 0x66a <localize+0x534>
     5fe:	05 97       	sbiw	r24, 0x05	; 5
     600:	09 f0       	breq	.+2      	; 0x604 <localize+0x4ce>
     602:	65 c0       	rjmp	.+202    	; 0x6ce <localize+0x598>
     604:	4b c0       	rjmp	.+150    	; 0x69c <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     606:	8a e3       	ldi	r24, 0x3A	; 58
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 6d 01 	sts	0x016D, r25
     60e:	80 93 6c 01 	sts	0x016C, r24
     612:	8e e3       	ldi	r24, 0x3E	; 62
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 53 01 	sts	0x0153, r25
     61a:	80 93 52 01 	sts	0x0152, r24
     61e:	86 e3       	ldi	r24, 0x36	; 54
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 55 01 	sts	0x0155, r25
     626:	80 93 54 01 	sts	0x0154, r24
     62a:	82 e3       	ldi	r24, 0x32	; 50
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	90 93 67 01 	sts	0x0167, r25
     632:	80 93 66 01 	sts	0x0166, r24
                        break;
     636:	95 c1       	rjmp	.+810    	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     638:	86 e3       	ldi	r24, 0x36	; 54
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 6d 01 	sts	0x016D, r25
     640:	80 93 6c 01 	sts	0x016C, r24
     644:	8e e3       	ldi	r24, 0x3E	; 62
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 53 01 	sts	0x0153, r25
     64c:	80 93 52 01 	sts	0x0152, r24
     650:	8a e3       	ldi	r24, 0x3A	; 58
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 55 01 	sts	0x0155, r25
     658:	80 93 54 01 	sts	0x0154, r24
     65c:	82 e3       	ldi	r24, 0x32	; 50
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	90 93 67 01 	sts	0x0167, r25
     664:	80 93 66 01 	sts	0x0166, r24
                        break;
     668:	7c c1       	rjmp	.+760    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     66a:	8a e3       	ldi	r24, 0x3A	; 58
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 6d 01 	sts	0x016D, r25
     672:	80 93 6c 01 	sts	0x016C, r24
     676:	82 e3       	ldi	r24, 0x32	; 50
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 53 01 	sts	0x0153, r25
     67e:	80 93 52 01 	sts	0x0152, r24
     682:	86 e3       	ldi	r24, 0x36	; 54
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 55 01 	sts	0x0155, r25
     68a:	80 93 54 01 	sts	0x0154, r24
     68e:	8e e3       	ldi	r24, 0x3E	; 62
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	90 93 67 01 	sts	0x0167, r25
     696:	80 93 66 01 	sts	0x0166, r24
                        break;
     69a:	63 c1       	rjmp	.+710    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     69c:	86 e3       	ldi	r24, 0x36	; 54
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 6d 01 	sts	0x016D, r25
     6a4:	80 93 6c 01 	sts	0x016C, r24
     6a8:	82 e3       	ldi	r24, 0x32	; 50
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 53 01 	sts	0x0153, r25
     6b0:	80 93 52 01 	sts	0x0152, r24
     6b4:	8a e3       	ldi	r24, 0x3A	; 58
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 55 01 	sts	0x0155, r25
     6bc:	80 93 54 01 	sts	0x0154, r24
     6c0:	8e e3       	ldi	r24, 0x3E	; 62
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 67 01 	sts	0x0167, r25
     6c8:	80 93 66 01 	sts	0x0166, r24
                        break;
     6cc:	4a c1       	rjmp	.+660    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6ce:	8e e3       	ldi	r24, 0x3E	; 62
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	90 93 6d 01 	sts	0x016D, r25
     6d6:	80 93 6c 01 	sts	0x016C, r24
     6da:	8a e3       	ldi	r24, 0x3A	; 58
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	90 93 53 01 	sts	0x0153, r25
     6e2:	80 93 52 01 	sts	0x0152, r24
     6e6:	86 e3       	ldi	r24, 0x36	; 54
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	90 93 55 01 	sts	0x0155, r25
     6ee:	80 93 54 01 	sts	0x0154, r24
     6f2:	82 e3       	ldi	r24, 0x32	; 50
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	90 93 67 01 	sts	0x0167, r25
     6fa:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	90 93 09 01 	sts	0x0109, r25
     706:	80 93 08 01 	sts	0x0108, r24
                        break;
     70a:	31 c1       	rjmp	.+610    	; 0x96e <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
     70c:	ed 81       	ldd	r30, Y+5	; 0x05
     70e:	fe 81       	ldd	r31, Y+6	; 0x06
     710:	e2 30       	cpi	r30, 0x02	; 2
     712:	f1 05       	cpc	r31, r1
     714:	31 f1       	breq	.+76     	; 0x762 <localize+0x62c>
     716:	1c f4       	brge	.+6      	; 0x71e <localize+0x5e8>
     718:	ef 2b       	or	r30, r31
     71a:	51 f0       	breq	.+20     	; 0x730 <localize+0x5fa>
     71c:	6d c0       	rjmp	.+218    	; 0x7f8 <localize+0x6c2>
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	91 05       	cpc	r25, r1
     726:	b1 f1       	breq	.+108    	; 0x794 <localize+0x65e>
     728:	05 97       	sbiw	r24, 0x05	; 5
     72a:	09 f0       	breq	.+2      	; 0x72e <localize+0x5f8>
     72c:	65 c0       	rjmp	.+202    	; 0x7f8 <localize+0x6c2>
     72e:	4b c0       	rjmp	.+150    	; 0x7c6 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     730:	8a e3       	ldi	r24, 0x3A	; 58
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	90 93 6d 01 	sts	0x016D, r25
     738:	80 93 6c 01 	sts	0x016C, r24
     73c:	8e e3       	ldi	r24, 0x3E	; 62
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 53 01 	sts	0x0153, r25
     744:	80 93 52 01 	sts	0x0152, r24
     748:	82 e3       	ldi	r24, 0x32	; 50
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	90 93 55 01 	sts	0x0155, r25
     750:	80 93 54 01 	sts	0x0154, r24
     754:	86 e3       	ldi	r24, 0x36	; 54
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	90 93 67 01 	sts	0x0167, r25
     75c:	80 93 66 01 	sts	0x0166, r24
                        break;
     760:	00 c1       	rjmp	.+512    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     762:	82 e3       	ldi	r24, 0x32	; 50
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	90 93 6d 01 	sts	0x016D, r25
     76a:	80 93 6c 01 	sts	0x016C, r24
     76e:	8e e3       	ldi	r24, 0x3E	; 62
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 53 01 	sts	0x0153, r25
     776:	80 93 52 01 	sts	0x0152, r24
     77a:	8a e3       	ldi	r24, 0x3A	; 58
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	90 93 55 01 	sts	0x0155, r25
     782:	80 93 54 01 	sts	0x0154, r24
     786:	86 e3       	ldi	r24, 0x36	; 54
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	90 93 67 01 	sts	0x0167, r25
     78e:	80 93 66 01 	sts	0x0166, r24
                        break;
     792:	e7 c0       	rjmp	.+462    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     794:	8a e3       	ldi	r24, 0x3A	; 58
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 6d 01 	sts	0x016D, r25
     79c:	80 93 6c 01 	sts	0x016C, r24
     7a0:	86 e3       	ldi	r24, 0x36	; 54
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 53 01 	sts	0x0153, r25
     7a8:	80 93 52 01 	sts	0x0152, r24
     7ac:	82 e3       	ldi	r24, 0x32	; 50
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 55 01 	sts	0x0155, r25
     7b4:	80 93 54 01 	sts	0x0154, r24
     7b8:	8e e3       	ldi	r24, 0x3E	; 62
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	90 93 67 01 	sts	0x0167, r25
     7c0:	80 93 66 01 	sts	0x0166, r24
                        break;
     7c4:	ce c0       	rjmp	.+412    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     7c6:	82 e3       	ldi	r24, 0x32	; 50
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 6d 01 	sts	0x016D, r25
     7ce:	80 93 6c 01 	sts	0x016C, r24
     7d2:	86 e3       	ldi	r24, 0x36	; 54
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	90 93 53 01 	sts	0x0153, r25
     7da:	80 93 52 01 	sts	0x0152, r24
     7de:	8a e3       	ldi	r24, 0x3A	; 58
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 55 01 	sts	0x0155, r25
     7e6:	80 93 54 01 	sts	0x0154, r24
     7ea:	8e e3       	ldi	r24, 0x3E	; 62
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	90 93 67 01 	sts	0x0167, r25
     7f2:	80 93 66 01 	sts	0x0166, r24
                        break;
     7f6:	b5 c0       	rjmp	.+362    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7f8:	8e e3       	ldi	r24, 0x3E	; 62
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	90 93 6d 01 	sts	0x016D, r25
     800:	80 93 6c 01 	sts	0x016C, r24
     804:	8a e3       	ldi	r24, 0x3A	; 58
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	90 93 53 01 	sts	0x0153, r25
     80c:	80 93 52 01 	sts	0x0152, r24
     810:	86 e3       	ldi	r24, 0x36	; 54
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	90 93 55 01 	sts	0x0155, r25
     818:	80 93 54 01 	sts	0x0154, r24
     81c:	82 e3       	ldi	r24, 0x32	; 50
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 67 01 	sts	0x0167, r25
     824:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 09 01 	sts	0x0109, r25
     830:	80 93 08 01 	sts	0x0108, r24
                        break;
     834:	9c c0       	rjmp	.+312    	; 0x96e <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     836:	ed 81       	ldd	r30, Y+5	; 0x05
     838:	fe 81       	ldd	r31, Y+6	; 0x06
     83a:	e2 30       	cpi	r30, 0x02	; 2
     83c:	f1 05       	cpc	r31, r1
     83e:	39 f1       	breq	.+78     	; 0x88e <localize+0x758>
     840:	24 f4       	brge	.+8      	; 0x84a <localize+0x714>
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	09 f0       	breq	.+2      	; 0x848 <localize+0x712>
     846:	6e c0       	rjmp	.+220    	; 0x924 <localize+0x7ee>
     848:	09 c0       	rjmp	.+18     	; 0x85c <localize+0x726>
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	9e 81       	ldd	r25, Y+6	; 0x06
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	91 05       	cpc	r25, r1
     852:	b1 f1       	breq	.+108    	; 0x8c0 <localize+0x78a>
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	09 f0       	breq	.+2      	; 0x85a <localize+0x724>
     858:	65 c0       	rjmp	.+202    	; 0x924 <localize+0x7ee>
     85a:	4b c0       	rjmp	.+150    	; 0x8f2 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     85c:	86 e3       	ldi	r24, 0x36	; 54
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	90 93 6d 01 	sts	0x016D, r25
     864:	80 93 6c 01 	sts	0x016C, r24
     868:	8e e3       	ldi	r24, 0x3E	; 62
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	90 93 53 01 	sts	0x0153, r25
     870:	80 93 52 01 	sts	0x0152, r24
     874:	82 e3       	ldi	r24, 0x32	; 50
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	90 93 55 01 	sts	0x0155, r25
     87c:	80 93 54 01 	sts	0x0154, r24
     880:	8a e3       	ldi	r24, 0x3A	; 58
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 67 01 	sts	0x0167, r25
     888:	80 93 66 01 	sts	0x0166, r24
                        break;
     88c:	6a c0       	rjmp	.+212    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     88e:	82 e3       	ldi	r24, 0x32	; 50
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	90 93 6d 01 	sts	0x016D, r25
     896:	80 93 6c 01 	sts	0x016C, r24
     89a:	8e e3       	ldi	r24, 0x3E	; 62
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	90 93 53 01 	sts	0x0153, r25
     8a2:	80 93 52 01 	sts	0x0152, r24
     8a6:	86 e3       	ldi	r24, 0x36	; 54
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 55 01 	sts	0x0155, r25
     8ae:	80 93 54 01 	sts	0x0154, r24
     8b2:	8a e3       	ldi	r24, 0x3A	; 58
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 67 01 	sts	0x0167, r25
     8ba:	80 93 66 01 	sts	0x0166, r24
                        break;
     8be:	51 c0       	rjmp	.+162    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     8c0:	86 e3       	ldi	r24, 0x36	; 54
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 6d 01 	sts	0x016D, r25
     8c8:	80 93 6c 01 	sts	0x016C, r24
     8cc:	8a e3       	ldi	r24, 0x3A	; 58
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	90 93 53 01 	sts	0x0153, r25
     8d4:	80 93 52 01 	sts	0x0152, r24
     8d8:	82 e3       	ldi	r24, 0x32	; 50
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	90 93 55 01 	sts	0x0155, r25
     8e0:	80 93 54 01 	sts	0x0154, r24
     8e4:	8e e3       	ldi	r24, 0x3E	; 62
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	90 93 67 01 	sts	0x0167, r25
     8ec:	80 93 66 01 	sts	0x0166, r24
                        break;
     8f0:	38 c0       	rjmp	.+112    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     8f2:	82 e3       	ldi	r24, 0x32	; 50
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	90 93 6d 01 	sts	0x016D, r25
     8fa:	80 93 6c 01 	sts	0x016C, r24
     8fe:	8a e3       	ldi	r24, 0x3A	; 58
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	90 93 53 01 	sts	0x0153, r25
     906:	80 93 52 01 	sts	0x0152, r24
     90a:	86 e3       	ldi	r24, 0x36	; 54
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	90 93 55 01 	sts	0x0155, r25
     912:	80 93 54 01 	sts	0x0154, r24
     916:	8e e3       	ldi	r24, 0x3E	; 62
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	90 93 67 01 	sts	0x0167, r25
     91e:	80 93 66 01 	sts	0x0166, r24
                        break;
     922:	1f c0       	rjmp	.+62     	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     924:	8e e3       	ldi	r24, 0x3E	; 62
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	90 93 6d 01 	sts	0x016D, r25
     92c:	80 93 6c 01 	sts	0x016C, r24
     930:	8a e3       	ldi	r24, 0x3A	; 58
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 53 01 	sts	0x0153, r25
     938:	80 93 52 01 	sts	0x0152, r24
     93c:	86 e3       	ldi	r24, 0x36	; 54
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	90 93 55 01 	sts	0x0155, r25
     944:	80 93 54 01 	sts	0x0154, r24
     948:	82 e3       	ldi	r24, 0x32	; 50
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 67 01 	sts	0x0167, r25
     950:	80 93 66 01 	sts	0x0166, r24
                        flag_no_good_stars = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 09 01 	sts	0x0109, r25
     95c:	80 93 08 01 	sts	0x0108, r24
                        break;
     960:	06 c0       	rjmp	.+12     	; 0x96e <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     962:	80 91 08 01 	lds	r24, 0x0108
     966:	90 91 09 01 	lds	r25, 0x0109
     96a:	89 2b       	or	r24, r25
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <localize+0x86c>
        *orientation = orientation_prev;
     96e:	80 91 18 01 	lds	r24, 0x0118
     972:	90 91 19 01 	lds	r25, 0x0119
     976:	ef 8d       	ldd	r30, Y+31	; 0x1f
     978:	f8 a1       	ldd	r31, Y+32	; 0x20
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     97e:	80 91 16 01 	lds	r24, 0x0116
     982:	90 91 17 01 	lds	r25, 0x0117
     986:	ef 81       	ldd	r30, Y+7	; 0x07
     988:	f8 85       	ldd	r31, Y+8	; 0x08
     98a:	91 83       	std	Z+1, r25	; 0x01
     98c:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     98e:	80 91 14 01 	lds	r24, 0x0114
     992:	90 91 15 01 	lds	r25, 0x0115
     996:	ed 8d       	ldd	r30, Y+29	; 0x1d
     998:	fe 8d       	ldd	r31, Y+30	; 0x1e
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
        return 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	ea c3       	rjmp	.+2004   	; 0x1176 <__stack+0x677>
    }
    
    
    float scale = P_vertical/max_distance;
     9a2:	26 2d       	mov	r18, r6
     9a4:	37 2d       	mov	r19, r7
     9a6:	48 2d       	mov	r20, r8
     9a8:	59 2d       	mov	r21, r9
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	91 e4       	ldi	r25, 0x41	; 65
     9b2:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
     9b6:	26 2e       	mov	r2, r22
     9b8:	37 2e       	mov	r3, r23
     9ba:	48 2e       	mov	r4, r24
     9bc:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     9be:	e0 90 6c 01 	lds	r14, 0x016C
     9c2:	f0 90 6d 01 	lds	r15, 0x016D
     9c6:	0f 2e       	mov	r0, r31
     9c8:	fe e5       	ldi	r31, 0x5E	; 94
     9ca:	8f 2e       	mov	r8, r31
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	9f 2e       	mov	r9, r31
     9d0:	f0 2d       	mov	r31, r0
     9d2:	f7 01       	movw	r30, r14
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     9e4:	22 2d       	mov	r18, r2
     9e6:	33 2d       	mov	r19, r3
     9e8:	44 2d       	mov	r20, r4
     9ea:	55 2d       	mov	r21, r5
     9ec:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     9f0:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     9f4:	f4 01       	movw	r30, r8
     9f6:	71 83       	std	Z+1, r23	; 0x01
     9f8:	60 83       	st	Z, r22
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f0 e6       	ldi	r31, 0x60	; 96
     9fe:	6f 2e       	mov	r6, r31
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	7f 2e       	mov	r7, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	f7 01       	movw	r30, r14
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	73 81       	ldd	r23, Z+3	; 0x03
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     a18:	22 2d       	mov	r18, r2
     a1a:	33 2d       	mov	r19, r3
     a1c:	44 2d       	mov	r20, r4
     a1e:	55 2d       	mov	r21, r5
     a20:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     a24:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     a28:	f3 01       	movw	r30, r6
     a2a:	71 83       	std	Z+1, r23	; 0x01
     a2c:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     a2e:	00 91 54 01 	lds	r16, 0x0154
     a32:	10 91 55 01 	lds	r17, 0x0155
     a36:	0f 2e       	mov	r0, r31
     a38:	fe e4       	ldi	r31, 0x4E	; 78
     a3a:	af 2e       	mov	r10, r31
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	bf 2e       	mov	r11, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	f8 01       	movw	r30, r16
     a44:	60 81       	ld	r22, Z
     a46:	71 81       	ldd	r23, Z+1	; 0x01
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     a54:	22 2d       	mov	r18, r2
     a56:	33 2d       	mov	r19, r3
     a58:	44 2d       	mov	r20, r4
     a5a:	55 2d       	mov	r21, r5
     a5c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     a60:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     a64:	f5 01       	movw	r30, r10
     a66:	71 83       	std	Z+1, r23	; 0x01
     a68:	60 83       	st	Z, r22
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f0 e5       	ldi	r31, 0x50	; 80
     a6e:	cf 2e       	mov	r12, r31
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	df 2e       	mov	r13, r31
     a74:	f0 2d       	mov	r31, r0
     a76:	f8 01       	movw	r30, r16
     a78:	62 81       	ldd	r22, Z+2	; 0x02
     a7a:	73 81       	ldd	r23, Z+3	; 0x03
     a7c:	88 27       	eor	r24, r24
     a7e:	77 fd       	sbrc	r23, 7
     a80:	80 95       	com	r24
     a82:	98 2f       	mov	r25, r24
     a84:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     a88:	22 2d       	mov	r18, r2
     a8a:	33 2d       	mov	r19, r3
     a8c:	44 2d       	mov	r20, r4
     a8e:	55 2d       	mov	r21, r5
     a90:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     a94:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     a98:	f6 01       	movw	r30, r12
     a9a:	71 83       	std	Z+1, r23	; 0x01
     a9c:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     a9e:	f7 01       	movw	r30, r14
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	f8 01       	movw	r30, r16
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	68 0f       	add	r22, r24
     aac:	79 1f       	adc	r23, r25
     aae:	88 27       	eor	r24, r24
     ab0:	77 fd       	sbrc	r23, 7
     ab2:	80 95       	com	r24
     ab4:	98 2f       	mov	r25, r24
     ab6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     ac6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     aca:	e9 a1       	ldd	r30, Y+33	; 0x21
     acc:	fa a1       	ldd	r31, Y+34	; 0x22
     ace:	71 83       	std	Z+1, r23	; 0x01
     ad0:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     ad2:	a0 91 6c 01 	lds	r26, 0x016C
     ad6:	b0 91 6d 01 	lds	r27, 0x016D
     ada:	e0 91 54 01 	lds	r30, 0x0154
     ade:	f0 91 55 01 	lds	r31, 0x0155
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	6d 91       	ld	r22, X+
     ae6:	7c 91       	ld	r23, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	68 0f       	add	r22, r24
     af0:	79 1f       	adc	r23, r25
     af2:	88 27       	eor	r24, r24
     af4:	77 fd       	sbrc	r23, 7
     af6:	80 95       	com	r24
     af8:	98 2f       	mov	r25, r24
     afa:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     b0a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     b0e:	eb a1       	ldd	r30, Y+35	; 0x23
     b10:	fc a1       	ldd	r31, Y+36	; 0x24
     b12:	71 83       	std	Z+1, r23	; 0x01
     b14:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     b16:	f4 01       	movw	r30, r8
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	f5 01       	movw	r30, r10
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	68 0f       	add	r22, r24
     b24:	79 1f       	adc	r23, r25
     b26:	88 27       	eor	r24, r24
     b28:	77 fd       	sbrc	r23, 7
     b2a:	80 95       	com	r24
     b2c:	98 2f       	mov	r25, r24
     b2e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     b3e:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     b42:	1b 01       	movw	r2, r22
     b44:	70 93 73 01 	sts	0x0173, r23
     b48:	60 93 72 01 	sts	0x0172, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     b4c:	f3 01       	movw	r30, r6
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	f6 01       	movw	r30, r12
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	68 0f       	add	r22, r24
     b5a:	79 1f       	adc	r23, r25
     b5c:	88 27       	eor	r24, r24
     b5e:	77 fd       	sbrc	r23, 7
     b60:	80 95       	com	r24
     b62:	98 2f       	mov	r25, r24
     b64:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     b74:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     b78:	8b 01       	movw	r16, r22
     b7a:	70 93 75 01 	sts	0x0175, r23
     b7e:	60 93 74 01 	sts	0x0174, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     b82:	22 9c       	mul	r2, r2
     b84:	b0 01       	movw	r22, r0
     b86:	23 9c       	mul	r2, r3
     b88:	70 0d       	add	r23, r0
     b8a:	70 0d       	add	r23, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	00 9f       	mul	r16, r16
     b90:	c0 01       	movw	r24, r0
     b92:	01 9f       	mul	r16, r17
     b94:	90 0d       	add	r25, r0
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	68 0f       	add	r22, r24
     b9c:	79 1f       	adc	r23, r25
     b9e:	88 27       	eor	r24, r24
     ba0:	77 fd       	sbrc	r23, 7
     ba2:	80 95       	com	r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     baa:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	60 93 56 01 	sts	0x0156, r22
     bb6:	70 93 57 01 	sts	0x0157, r23
     bba:	80 93 58 01 	sts	0x0158, r24
     bbe:	90 93 59 01 	sts	0x0159, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     bc2:	80 91 54 01 	lds	r24, 0x0154
     bc6:	90 91 55 01 	lds	r25, 0x0155
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	e0 91 6c 01 	lds	r30, 0x016C
     bd2:	f0 91 6d 01 	lds	r31, 0x016D
     bd6:	fe 83       	std	Y+6, r31	; 0x06
     bd8:	ed 83       	std	Y+5, r30	; 0x05
     bda:	fc 01       	movw	r30, r24
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	ed 81       	ldd	r30, Y+5	; 0x05
     be2:	fe 81       	ldd	r31, Y+6	; 0x06
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	68 1b       	sub	r22, r24
     bea:	79 0b       	sbc	r23, r25
     bec:	88 27       	eor	r24, r24
     bee:	77 fd       	sbrc	r23, 7
     bf0:	80 95       	com	r24
     bf2:	98 2f       	mov	r25, r24
     bf4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	62 81       	ldd	r22, Z+2	; 0x02
     c02:	73 81       	ldd	r23, Z+3	; 0x03
     c04:	ed 81       	ldd	r30, Y+5	; 0x05
     c06:	fe 81       	ldd	r31, Y+6	; 0x06
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	68 1b       	sub	r22, r24
     c0e:	79 0b       	sbc	r23, r25
     c10:	88 27       	eor	r24, r24
     c12:	77 fd       	sbrc	r23, 7
     c14:	80 95       	com	r24
     c16:	98 2f       	mov	r25, r24
     c18:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 34 15 	call	0x2a68	; 0x2a68 <atan2>
     c24:	4b 01       	movw	r8, r22
     c26:	5c 01       	movw	r10, r24
     c28:	60 93 62 01 	sts	0x0162, r22
     c2c:	70 93 63 01 	sts	0x0163, r23
     c30:	80 93 64 01 	sts	0x0164, r24
     c34:	90 93 65 01 	sts	0x0165, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     c38:	ed 81       	ldd	r30, Y+5	; 0x05
     c3a:	fe 81       	ldd	r31, Y+6	; 0x06
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	68 1b       	sub	r22, r24
     c4a:	79 0b       	sbc	r23, r25
     c4c:	88 27       	eor	r24, r24
     c4e:	77 fd       	sbrc	r23, 7
     c50:	80 95       	com	r24
     c52:	98 2f       	mov	r25, r24
     c54:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
     c5c:	ed 81       	ldd	r30, Y+5	; 0x05
     c5e:	fe 81       	ldd	r31, Y+6	; 0x06
     c60:	62 81       	ldd	r22, Z+2	; 0x02
     c62:	73 81       	ldd	r23, Z+3	; 0x03
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	68 1b       	sub	r22, r24
     c6e:	79 0b       	sbc	r23, r25
     c70:	88 27       	eor	r24, r24
     c72:	77 fd       	sbrc	r23, 7
     c74:	80 95       	com	r24
     c76:	98 2f       	mov	r25, r24
     c78:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     c7c:	a7 01       	movw	r20, r14
     c7e:	96 01       	movw	r18, r12
     c80:	0e 94 34 15 	call	0x2a68	; 0x2a68 <atan2>
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	60 93 5a 01 	sts	0x015A, r22
     c8c:	70 93 5b 01 	sts	0x015B, r23
     c90:	80 93 5c 01 	sts	0x015C, r24
     c94:	90 93 5d 01 	sts	0x015D, r25
    alpha = -atan2(S0[0],S0[1]);
     c98:	b8 01       	movw	r22, r16
     c9a:	88 27       	eor	r24, r24
     c9c:	77 fd       	sbrc	r23, 7
     c9e:	80 95       	com	r24
     ca0:	98 2f       	mov	r25, r24
     ca2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     ca6:	69 83       	std	Y+1, r22	; 0x01
     ca8:	7a 83       	std	Y+2, r23	; 0x02
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	b1 01       	movw	r22, r2
     cb0:	88 27       	eor	r24, r24
     cb2:	77 fd       	sbrc	r23, 7
     cb4:	80 95       	com	r24
     cb6:	98 2f       	mov	r25, r24
     cb8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	3a 81       	ldd	r19, Y+2	; 0x02
     cc0:	4b 81       	ldd	r20, Y+3	; 0x03
     cc2:	5c 81       	ldd	r21, Y+4	; 0x04
     cc4:	0e 94 34 15 	call	0x2a68	; 0x2a68 <atan2>
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	b0 58       	subi	r27, 0x80	; 128
     cd2:	80 93 76 01 	sts	0x0176, r24
     cd6:	90 93 77 01 	sts	0x0177, r25
     cda:	a0 93 78 01 	sts	0x0178, r26
     cde:	b0 93 79 01 	sts	0x0179, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
     ce2:	77 fa       	bst	r7, 7
     ce4:	70 94       	com	r7
     ce6:	77 f8       	bld	r7, 7
     ce8:	70 94       	com	r7
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
     cf2:	86 2e       	mov	r8, r22
     cf4:	97 2e       	mov	r9, r23
     cf6:	a8 2e       	mov	r10, r24
     cf8:	b9 2e       	mov	r11, r25
     cfa:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <cos>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c3 01       	movw	r24, r6
     d04:	b2 01       	movw	r22, r4
     d06:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e0       	ldi	r20, 0x00	; 0
     d10:	51 e4       	ldi	r21, 0x41	; 65
     d12:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
     d16:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     d1a:	8b 01       	movw	r16, r22
     d1c:	70 93 11 01 	sts	0x0111, r23
     d20:	60 93 10 01 	sts	0x0110, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
     d24:	68 2d       	mov	r22, r8
     d26:	79 2d       	mov	r23, r9
     d28:	8a 2d       	mov	r24, r10
     d2a:	9b 2d       	mov	r25, r11
     d2c:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <sin>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	c3 01       	movw	r24, r6
     d36:	b2 01       	movw	r22, r4
     d38:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 ee       	ldi	r20, 0xE0	; 224
     d42:	50 e4       	ldi	r21, 0x40	; 64
     d44:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
     d48:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     d4c:	70 93 0f 01 	sts	0x010F, r23
     d50:	60 93 0e 01 	sts	0x010E, r22
    orientation_current = (theta2) * 180/M_PI;
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	44 e3       	ldi	r20, 0x34	; 52
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	c7 01       	movw	r24, r14
     d5e:	b6 01       	movw	r22, r12
     d60:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     d64:	2b ed       	ldi	r18, 0xDB	; 219
     d66:	3f e0       	ldi	r19, 0x0F	; 15
     d68:	49 e4       	ldi	r20, 0x49	; 73
     d6a:	50 e4       	ldi	r21, 0x40	; 64
     d6c:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
     d70:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     d74:	70 93 13 01 	sts	0x0113, r23
     d78:	60 93 12 01 	sts	0x0112, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
     d7c:	c0 90 0a 01 	lds	r12, 0x010A
     d80:	d0 90 0b 01 	lds	r13, 0x010B
     d84:	e0 90 0c 01 	lds	r14, 0x010C
     d88:	f0 90 0d 01 	lds	r15, 0x010D
     d8c:	60 91 16 01 	lds	r22, 0x0116
     d90:	70 91 17 01 	lds	r23, 0x0117
     d94:	88 27       	eor	r24, r24
     d96:	77 fd       	sbrc	r23, 7
     d98:	80 95       	com	r24
     d9a:	98 2f       	mov	r25, r24
     d9c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     da8:	4b 01       	movw	r8, r22
     daa:	5c 01       	movw	r10, r24
     dac:	a7 01       	movw	r20, r14
     dae:	96 01       	movw	r18, r12
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 e8       	ldi	r24, 0x80	; 128
     db6:	9f e3       	ldi	r25, 0x3F	; 63
     db8:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
     dbc:	6b 01       	movw	r12, r22
     dbe:	7c 01       	movw	r14, r24
     dc0:	b8 01       	movw	r22, r16
     dc2:	88 27       	eor	r24, r24
     dc4:	77 fd       	sbrc	r23, 7
     dc6:	80 95       	com	r24
     dc8:	98 2f       	mov	r25, r24
     dca:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     dce:	9b 01       	movw	r18, r22
     dd0:	ac 01       	movw	r20, r24
     dd2:	c7 01       	movw	r24, r14
     dd4:	b6 01       	movw	r22, r12
     dd6:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	c5 01       	movw	r24, r10
     de0:	b4 01       	movw	r22, r8
     de2:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
     de6:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     dea:	ef 81       	ldd	r30, Y+7	; 0x07
     dec:	f8 85       	ldd	r31, Y+8	; 0x08
     dee:	71 83       	std	Z+1, r23	; 0x01
     df0:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
     df2:	c0 90 0a 01 	lds	r12, 0x010A
     df6:	d0 90 0b 01 	lds	r13, 0x010B
     dfa:	e0 90 0c 01 	lds	r14, 0x010C
     dfe:	f0 90 0d 01 	lds	r15, 0x010D
     e02:	60 91 14 01 	lds	r22, 0x0114
     e06:	70 91 15 01 	lds	r23, 0x0115
     e0a:	88 27       	eor	r24, r24
     e0c:	77 fd       	sbrc	r23, 7
     e0e:	80 95       	com	r24
     e10:	98 2f       	mov	r25, r24
     e12:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     e16:	a7 01       	movw	r20, r14
     e18:	96 01       	movw	r18, r12
     e1a:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     e1e:	4b 01       	movw	r8, r22
     e20:	5c 01       	movw	r10, r24
     e22:	a7 01       	movw	r20, r14
     e24:	96 01       	movw	r18, r12
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	9f e3       	ldi	r25, 0x3F	; 63
     e2e:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	60 91 0e 01 	lds	r22, 0x010E
     e3a:	70 91 0f 01 	lds	r23, 0x010F
     e3e:	88 27       	eor	r24, r24
     e40:	77 fd       	sbrc	r23, 7
     e42:	80 95       	com	r24
     e44:	98 2f       	mov	r25, r24
     e46:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c5 01       	movw	r24, r10
     e5c:	b4 01       	movw	r22, r8
     e5e:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
     e62:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     e66:	ed 8d       	ldd	r30, Y+29	; 0x1d
     e68:	fe 8d       	ldd	r31, Y+30	; 0x1e
     e6a:	71 83       	std	Z+1, r23	; 0x01
     e6c:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
     e6e:	c0 90 0a 01 	lds	r12, 0x010A
     e72:	d0 90 0b 01 	lds	r13, 0x010B
     e76:	e0 90 0c 01 	lds	r14, 0x010C
     e7a:	f0 90 0d 01 	lds	r15, 0x010D
     e7e:	60 91 18 01 	lds	r22, 0x0118
     e82:	70 91 19 01 	lds	r23, 0x0119
     e86:	88 27       	eor	r24, r24
     e88:	77 fd       	sbrc	r23, 7
     e8a:	80 95       	com	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     e92:	a7 01       	movw	r20, r14
     e94:	96 01       	movw	r18, r12
     e96:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     e9a:	4b 01       	movw	r8, r22
     e9c:	5c 01       	movw	r10, r24
     e9e:	a7 01       	movw	r20, r14
     ea0:	96 01       	movw	r18, r12
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	9f e3       	ldi	r25, 0x3F	; 63
     eaa:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
     eae:	6b 01       	movw	r12, r22
     eb0:	7c 01       	movw	r14, r24
     eb2:	60 91 12 01 	lds	r22, 0x0112
     eb6:	70 91 13 01 	lds	r23, 0x0113
     eba:	88 27       	eor	r24, r24
     ebc:	77 fd       	sbrc	r23, 7
     ebe:	80 95       	com	r24
     ec0:	98 2f       	mov	r25, r24
     ec2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     ec6:	9b 01       	movw	r18, r22
     ec8:	ac 01       	movw	r20, r24
     eca:	c7 01       	movw	r24, r14
     ecc:	b6 01       	movw	r22, r12
     ece:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	c5 01       	movw	r24, r10
     ed8:	b4 01       	movw	r22, r8
     eda:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
     ede:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
     ee2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ee4:	f8 a1       	ldd	r31, Y+32	; 0x20
     ee6:	71 83       	std	Z+1, r23	; 0x01
     ee8:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
     eea:	ef 81       	ldd	r30, Y+7	; 0x07
     eec:	f8 85       	ldd	r31, Y+8	; 0x08
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	90 93 17 01 	sts	0x0117, r25
     ef6:	80 93 16 01 	sts	0x0116, r24
    y_robot_prev     = *y_robot;
     efa:	ed 8d       	ldd	r30, Y+29	; 0x1d
     efc:	fe 8d       	ldd	r31, Y+30	; 0x1e
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	90 93 15 01 	sts	0x0115, r25
     f06:	80 93 14 01 	sts	0x0114, r24
    orientation_prev = *orientation;
     f0a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     f0c:	f8 a1       	ldd	r31, Y+32	; 0x20
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	90 93 19 01 	sts	0x0119, r25
     f16:	80 93 18 01 	sts	0x0118, r24
    
    return 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	2c c1       	rjmp	.+600    	; 0x1176 <__stack+0x677>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
     f1e:	e0 91 02 01 	lds	r30, 0x0102
     f22:	f0 91 03 01 	lds	r31, 0x0103
     f26:	4c 01       	movw	r8, r24
     f28:	8e 1a       	sub	r8, r30
     f2a:	9f 0a       	sbc	r9, r31
     f2c:	90 92 3f 01 	sts	0x013F, r9
     f30:	80 92 3e 01 	sts	0x013E, r8
     f34:	80 91 00 01 	lds	r24, 0x0100
     f38:	90 91 01 01 	lds	r25, 0x0101
     f3c:	08 1b       	sub	r16, r24
     f3e:	19 0b       	sbc	r17, r25
     f40:	10 93 41 01 	sts	0x0141, r17
     f44:	00 93 40 01 	sts	0x0140, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
     f48:	3b 01       	movw	r6, r22
     f4a:	6e 1a       	sub	r6, r30
     f4c:	7f 0a       	sbc	r7, r31
     f4e:	70 92 3b 01 	sts	0x013B, r7
     f52:	60 92 3a 01 	sts	0x013A, r6
     f56:	e8 1a       	sub	r14, r24
     f58:	f9 0a       	sbc	r15, r25
     f5a:	f0 92 3d 01 	sts	0x013D, r15
     f5e:	e0 92 3c 01 	sts	0x013C, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
     f62:	2a 01       	movw	r4, r20
     f64:	4e 1a       	sub	r4, r30
     f66:	5f 0a       	sbc	r5, r31
     f68:	50 92 37 01 	sts	0x0137, r5
     f6c:	40 92 36 01 	sts	0x0136, r4
     f70:	16 01       	movw	r2, r12
     f72:	28 1a       	sub	r2, r24
     f74:	39 0a       	sbc	r3, r25
     f76:	30 92 39 01 	sts	0x0139, r3
     f7a:	20 92 38 01 	sts	0x0138, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
     f7e:	69 01       	movw	r12, r18
     f80:	ce 1a       	sub	r12, r30
     f82:	df 0a       	sbc	r13, r31
     f84:	d0 92 33 01 	sts	0x0133, r13
     f88:	c0 92 32 01 	sts	0x0132, r12
     f8c:	a8 1a       	sub	r10, r24
     f8e:	b9 0a       	sbc	r11, r25
     f90:	b0 92 35 01 	sts	0x0135, r11
     f94:	a0 92 34 01 	sts	0x0134, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
     f98:	93 01       	movw	r18, r6
     f9a:	28 19       	sub	r18, r8
     f9c:	39 09       	sbc	r19, r9
     f9e:	c7 01       	movw	r24, r14
     fa0:	80 1b       	sub	r24, r16
     fa2:	91 0b       	sbc	r25, r17
     fa4:	22 9f       	mul	r18, r18
     fa6:	b0 01       	movw	r22, r0
     fa8:	23 9f       	mul	r18, r19
     faa:	70 0d       	add	r23, r0
     fac:	70 0d       	add	r23, r0
     fae:	11 24       	eor	r1, r1
     fb0:	88 9f       	mul	r24, r24
     fb2:	90 01       	movw	r18, r0
     fb4:	89 9f       	mul	r24, r25
     fb6:	30 0d       	add	r19, r0
     fb8:	30 0d       	add	r19, r0
     fba:	11 24       	eor	r1, r1
     fbc:	62 0f       	add	r22, r18
     fbe:	73 1f       	adc	r23, r19
     fc0:	88 27       	eor	r24, r24
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	80 95       	com	r24
     fc6:	98 2f       	mov	r25, r24
     fc8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
     fcc:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
     fd0:	60 93 1a 01 	sts	0x011A, r22
     fd4:	70 93 1b 01 	sts	0x011B, r23
     fd8:	80 93 1c 01 	sts	0x011C, r24
     fdc:	90 93 1d 01 	sts	0x011D, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
     fe0:	92 01       	movw	r18, r4
     fe2:	28 19       	sub	r18, r8
     fe4:	39 09       	sbc	r19, r9
     fe6:	c1 01       	movw	r24, r2
     fe8:	80 1b       	sub	r24, r16
     fea:	91 0b       	sbc	r25, r17
     fec:	22 9f       	mul	r18, r18
     fee:	b0 01       	movw	r22, r0
     ff0:	23 9f       	mul	r18, r19
     ff2:	70 0d       	add	r23, r0
     ff4:	70 0d       	add	r23, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	88 9f       	mul	r24, r24
     ffa:	90 01       	movw	r18, r0
     ffc:	89 9f       	mul	r24, r25
     ffe:	30 0d       	add	r19, r0
    1000:	30 0d       	add	r19, r0
    1002:	11 24       	eor	r1, r1
    1004:	62 0f       	add	r22, r18
    1006:	73 1f       	adc	r23, r19
    1008:	88 27       	eor	r24, r24
    100a:	77 fd       	sbrc	r23, 7
    100c:	80 95       	com	r24
    100e:	98 2f       	mov	r25, r24
    1010:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1014:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    1018:	60 93 1e 01 	sts	0x011E, r22
    101c:	70 93 1f 01 	sts	0x011F, r23
    1020:	80 93 20 01 	sts	0x0120, r24
    1024:	90 93 21 01 	sts	0x0121, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    1028:	96 01       	movw	r18, r12
    102a:	28 19       	sub	r18, r8
    102c:	39 09       	sbc	r19, r9
    102e:	c5 01       	movw	r24, r10
    1030:	80 1b       	sub	r24, r16
    1032:	91 0b       	sbc	r25, r17
    1034:	22 9f       	mul	r18, r18
    1036:	b0 01       	movw	r22, r0
    1038:	23 9f       	mul	r18, r19
    103a:	70 0d       	add	r23, r0
    103c:	70 0d       	add	r23, r0
    103e:	11 24       	eor	r1, r1
    1040:	88 9f       	mul	r24, r24
    1042:	90 01       	movw	r18, r0
    1044:	89 9f       	mul	r24, r25
    1046:	30 0d       	add	r19, r0
    1048:	30 0d       	add	r19, r0
    104a:	11 24       	eor	r1, r1
    104c:	62 0f       	add	r22, r18
    104e:	73 1f       	adc	r23, r19
    1050:	88 27       	eor	r24, r24
    1052:	77 fd       	sbrc	r23, 7
    1054:	80 95       	com	r24
    1056:	98 2f       	mov	r25, r24
    1058:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    105c:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    1060:	60 93 22 01 	sts	0x0122, r22
    1064:	70 93 23 01 	sts	0x0123, r23
    1068:	80 93 24 01 	sts	0x0124, r24
    106c:	90 93 25 01 	sts	0x0125, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    1070:	92 01       	movw	r18, r4
    1072:	26 19       	sub	r18, r6
    1074:	37 09       	sbc	r19, r7
    1076:	c1 01       	movw	r24, r2
    1078:	8e 19       	sub	r24, r14
    107a:	9f 09       	sbc	r25, r15
    107c:	22 9f       	mul	r18, r18
    107e:	b0 01       	movw	r22, r0
    1080:	23 9f       	mul	r18, r19
    1082:	70 0d       	add	r23, r0
    1084:	70 0d       	add	r23, r0
    1086:	11 24       	eor	r1, r1
    1088:	88 9f       	mul	r24, r24
    108a:	90 01       	movw	r18, r0
    108c:	89 9f       	mul	r24, r25
    108e:	30 0d       	add	r19, r0
    1090:	30 0d       	add	r19, r0
    1092:	11 24       	eor	r1, r1
    1094:	62 0f       	add	r22, r18
    1096:	73 1f       	adc	r23, r19
    1098:	88 27       	eor	r24, r24
    109a:	77 fd       	sbrc	r23, 7
    109c:	80 95       	com	r24
    109e:	98 2f       	mov	r25, r24
    10a0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    10a4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    10a8:	60 93 26 01 	sts	0x0126, r22
    10ac:	70 93 27 01 	sts	0x0127, r23
    10b0:	80 93 28 01 	sts	0x0128, r24
    10b4:	90 93 29 01 	sts	0x0129, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    10b8:	96 01       	movw	r18, r12
    10ba:	26 19       	sub	r18, r6
    10bc:	37 09       	sbc	r19, r7
    10be:	c5 01       	movw	r24, r10
    10c0:	8e 19       	sub	r24, r14
    10c2:	9f 09       	sbc	r25, r15
    10c4:	22 9f       	mul	r18, r18
    10c6:	b0 01       	movw	r22, r0
    10c8:	23 9f       	mul	r18, r19
    10ca:	70 0d       	add	r23, r0
    10cc:	70 0d       	add	r23, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	88 9f       	mul	r24, r24
    10d2:	90 01       	movw	r18, r0
    10d4:	89 9f       	mul	r24, r25
    10d6:	30 0d       	add	r19, r0
    10d8:	30 0d       	add	r19, r0
    10da:	11 24       	eor	r1, r1
    10dc:	62 0f       	add	r22, r18
    10de:	73 1f       	adc	r23, r19
    10e0:	88 27       	eor	r24, r24
    10e2:	77 fd       	sbrc	r23, 7
    10e4:	80 95       	com	r24
    10e6:	98 2f       	mov	r25, r24
    10e8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    10ec:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    10f0:	60 93 2a 01 	sts	0x012A, r22
    10f4:	70 93 2b 01 	sts	0x012B, r23
    10f8:	80 93 2c 01 	sts	0x012C, r24
    10fc:	90 93 2d 01 	sts	0x012D, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    1100:	c4 18       	sub	r12, r4
    1102:	d5 08       	sbc	r13, r5
    1104:	a2 18       	sub	r10, r2
    1106:	b3 08       	sbc	r11, r3
    1108:	cc 9c       	mul	r12, r12
    110a:	b0 01       	movw	r22, r0
    110c:	cd 9c       	mul	r12, r13
    110e:	70 0d       	add	r23, r0
    1110:	70 0d       	add	r23, r0
    1112:	11 24       	eor	r1, r1
    1114:	aa 9c       	mul	r10, r10
    1116:	c0 01       	movw	r24, r0
    1118:	ab 9c       	mul	r10, r11
    111a:	90 0d       	add	r25, r0
    111c:	90 0d       	add	r25, r0
    111e:	11 24       	eor	r1, r1
    1120:	68 0f       	add	r22, r24
    1122:	79 1f       	adc	r23, r25
    1124:	88 27       	eor	r24, r24
    1126:	77 fd       	sbrc	r23, 7
    1128:	80 95       	com	r24
    112a:	98 2f       	mov	r25, r24
    112c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1130:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    1134:	60 93 2e 01 	sts	0x012E, r22
    1138:	70 93 2f 01 	sts	0x012F, r23
    113c:	80 93 30 01 	sts	0x0130, r24
    1140:	90 93 31 01 	sts	0x0131, r25
    1144:	0a e1       	ldi	r16, 0x1A	; 26
    1146:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    1148:	e1 2c       	mov	r14, r1
    114a:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    114c:	1e 82       	std	Y+6, r1	; 0x06
    114e:	1d 82       	std	Y+5, r1	; 0x05
    1150:	1a 82       	std	Y+2, r1	; 0x02
    1152:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    1154:	21 2c       	mov	r2, r1
    1156:	68 94       	set
    1158:	33 24       	eor	r3, r3
    115a:	36 f8       	bld	r3, 6
    115c:	0f 2e       	mov	r0, r31
    115e:	fc e1       	ldi	r31, 0x1C	; 28
    1160:	4f 2e       	mov	r4, r31
    1162:	f0 2d       	mov	r31, r0
    1164:	0f 2e       	mov	r0, r31
    1166:	f6 e4       	ldi	r31, 0x46	; 70
    1168:	5f 2e       	mov	r5, r31
    116a:	f0 2d       	mov	r31, r0
    116c:	61 2c       	mov	r6, r1
    116e:	71 2c       	mov	r7, r1
    1170:	81 2c       	mov	r8, r1
    1172:	91 2c       	mov	r9, r1
    1174:	2b c8       	rjmp	.-4010   	; 0x1cc <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    1176:	28 96       	adiw	r28, 0x08	; 8
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	5f 90       	pop	r5
    11a0:	4f 90       	pop	r4
    11a2:	3f 90       	pop	r3
    11a4:	2f 90       	pop	r2
    11a6:	08 95       	ret

000011a8 <set_timer1>:
}

void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    11a8:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    11aa:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    11ac:	84 ef       	ldi	r24, 0xF4	; 244
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	90 93 89 00 	sts	0x0089, r25
    11b4:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
    11b8:	10 92 8b 00 	sts	0x008B, r1
    11bc:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    11c0:	10 92 8d 00 	sts	0x008D, r1
    11c4:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    11c8:	a1 e8       	ldi	r26, 0x81	; 129
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	8c 91       	ld	r24, X
    11ce:	80 61       	ori	r24, 0x10	; 16
    11d0:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    11d2:	8c 91       	ld	r24, X
    11d4:	88 60       	ori	r24, 0x08	; 8
    11d6:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    11d8:	e0 e8       	ldi	r30, 0x80	; 128
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	82 60       	ori	r24, 0x02	; 2
    11e0:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    11e2:	80 81       	ld	r24, Z
    11e4:	81 60       	ori	r24, 0x01	; 1
    11e6:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    11e8:	80 81       	ld	r24, Z
    11ea:	80 62       	ori	r24, 0x20	; 32
    11ec:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7e       	andi	r24, 0xEF	; 239
    11f2:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    11f4:	80 81       	ld	r24, Z
    11f6:	88 60       	ori	r24, 0x08	; 8
    11f8:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    11fa:	80 81       	ld	r24, Z
    11fc:	8b 7f       	andi	r24, 0xFB	; 251
    11fe:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    1200:	8c 91       	ld	r24, X
    1202:	8b 7f       	andi	r24, 0xFB	; 251
    1204:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    1206:	8c 91       	ld	r24, X
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    120c:	8c 91       	ld	r24, X
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	8c 93       	st	X, r24
    1212:	08 95       	ret

00001214 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
    1214:	83 ec       	ldi	r24, 0xC3	; 195
    1216:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    121a:	e3 ec       	ldi	r30, 0xC3	; 195
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8d 7f       	andi	r24, 0xFD	; 253
    1222:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    1224:	80 81       	ld	r24, Z
    1226:	8e 7f       	andi	r24, 0xFE	; 254
    1228:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    122a:	e2 e7       	ldi	r30, 0x72	; 114
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	84 60       	ori	r24, 0x04	; 4
    1232:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
    1234:	e1 ec       	ldi	r30, 0xC1	; 193
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	88 60       	ori	r24, 0x08	; 8
    123c:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
    123e:	80 81       	ld	r24, Z
    1240:	84 60       	ori	r24, 0x04	; 4
    1242:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    1244:	80 81       	ld	r24, Z
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    124a:	80 81       	ld	r24, Z
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	80 83       	st	Z, r24
    1250:	08 95       	ret

00001252 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    1252:	ec e7       	ldi	r30, 0x7C	; 124
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 77       	andi	r24, 0x7F	; 127
    125a:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    125c:	80 81       	ld	r24, Z
    125e:	80 64       	ori	r24, 0x40	; 64
    1260:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    1262:	aa e7       	ldi	r26, 0x7A	; 122
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	8c 91       	ld	r24, X
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    126c:	8c 91       	ld	r24, X
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    1272:	8c 91       	ld	r24, X
    1274:	81 60       	ori	r24, 0x01	; 1
    1276:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    1278:	ee e7       	ldi	r30, 0x7E	; 126
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    1282:	80 81       	ld	r24, Z
    1284:	82 60       	ori	r24, 0x02	; 2
    1286:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    1288:	80 81       	ld	r24, Z
    128a:	80 61       	ori	r24, 0x10	; 16
    128c:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    128e:	80 81       	ld	r24, Z
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    1294:	80 81       	ld	r24, Z
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    129a:	80 81       	ld	r24, Z
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    12a0:	ed e7       	ldi	r30, 0x7D	; 125
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	81 60       	ori	r24, 0x01	; 1
    12a8:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    12aa:	80 81       	ld	r24, Z
    12ac:	82 60       	ori	r24, 0x02	; 2
    12ae:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    12b0:	8c 91       	ld	r24, X
    12b2:	80 62       	ori	r24, 0x20	; 32
    12b4:	8c 93       	st	X, r24
    12b6:	08 95       	ret

000012b8 <init_ports>:
}

void init_ports(void)
{
    //B0 and B1 as outputs
    set(DDRB,0);
    12b8:	20 9a       	sbi	0x04, 0	; 4
    set(DDRB,1);
    12ba:	21 9a       	sbi	0x04, 1	; 4
    set(PORTB,0);
    12bc:	28 9a       	sbi	0x05, 0	; 5
    clear(PORTB,1);
    12be:	29 98       	cbi	0x05, 1	; 5
    
    //Set B2 as input
    clear(DDRB,2);
    12c0:	22 98       	cbi	0x04, 2	; 4
    12c2:	08 95       	ret

000012c4 <stop_motor>:
}


void stop_motor(void)
{
    OCR1B = 0;
    12c4:	10 92 8b 00 	sts	0x008B, r1
    12c8:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    12cc:	10 92 8d 00 	sts	0x008D, r1
    12d0:	10 92 8c 00 	sts	0x008C, r1
    12d4:	08 95       	ret

000012d6 <turn_left>:
}

void turn_left(void)
{
    set(PORTB,0);
    12d6:	28 9a       	sbi	0x05, 0	; 5
    set(PORTB,1);
    12d8:	29 9a       	sbi	0x05, 1	; 5
	OCR1B = PWM_SPEED_TURN_RGHT;
    12da:	8c e7       	ldi	r24, 0x7C	; 124
    12dc:	91 e0       	ldi	r25, 0x01	; 1
    12de:	90 93 8b 00 	sts	0x008B, r25
    12e2:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    12e6:	90 93 8d 00 	sts	0x008D, r25
    12ea:	80 93 8c 00 	sts	0x008C, r24
    12ee:	08 95       	ret

000012f0 <turn_right>:
	//m_green(OFF);
}

void turn_right(void)
{
    clear(PORTB,0);
    12f0:	28 98       	cbi	0x05, 0	; 5
    clear(PORTB,1);
    12f2:	29 98       	cbi	0x05, 1	; 5
    OCR1B = PWM_SPEED_TURN_RGHT;
    12f4:	8c e7       	ldi	r24, 0x7C	; 124
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	90 93 8b 00 	sts	0x008B, r25
    12fc:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_TURN_LFT;
    1300:	90 93 8d 00 	sts	0x008D, r25
    1304:	80 93 8c 00 	sts	0x008C, r24
    1308:	08 95       	ret

0000130a <go_bwd>:
	//m_green(ON);
}

void go_bwd(void)
{
    set(PORTB,0);
    130a:	28 9a       	sbi	0x05, 0	; 5
    clear(PORTB,1);
    130c:	29 98       	cbi	0x05, 1	; 5
    OCR1B = PWM_SPEED_FWD_RGHT;
    130e:	82 e7       	ldi	r24, 0x72	; 114
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	90 93 8b 00 	sts	0x008B, r25
    1316:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_FWD_LFT;
    131a:	8f e7       	ldi	r24, 0x7F	; 127
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	90 93 8d 00 	sts	0x008D, r25
    1322:	80 93 8c 00 	sts	0x008C, r24
    1326:	08 95       	ret

00001328 <go_fwd>:
}

void go_fwd(void)
{
	clear(PORTB,0);
    1328:	28 98       	cbi	0x05, 0	; 5
	set(PORTB,1);
    132a:	29 9a       	sbi	0x05, 1	; 5
	OCR1B = PWM_SPEED_FWD_RGHT;
    132c:	82 e7       	ldi	r24, 0x72	; 114
    132e:	91 e0       	ldi	r25, 0x01	; 1
    1330:	90 93 8b 00 	sts	0x008B, r25
    1334:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_FWD_LFT;
    1338:	8f e7       	ldi	r24, 0x7F	; 127
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	90 93 8d 00 	sts	0x008D, r25
    1340:	80 93 8c 00 	sts	0x008C, r24
    1344:	08 95       	ret

00001346 <move_robot>:
    clear(PORTB,0);
    set(PORTB,1);
}*/

void move_robot(float theta, int dir){
	if (dir == 1) {             // Move with a right curve
    1346:	41 30       	cpi	r20, 0x01	; 1
    1348:	51 05       	cpc	r21, r1
    134a:	09 f5       	brne	.+66     	; 0x138e <move_robot+0x48>
		OCR1B = PWM_SPEED_FWD_LFT;
    134c:	2f e7       	ldi	r18, 0x7F	; 127
    134e:	31 e0       	ldi	r19, 0x01	; 1
    1350:	30 93 8b 00 	sts	0x008B, r19
    1354:	20 93 8a 00 	sts	0x008A, r18
		OCR1C = ((180.0 - theta)/180.0)*PWM_SPEED_FWD_RGHT;
    1358:	9b 01       	movw	r18, r22
    135a:	ac 01       	movw	r20, r24
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	84 e3       	ldi	r24, 0x34	; 52
    1362:	93 e4       	ldi	r25, 0x43	; 67
    1364:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	44 e3       	ldi	r20, 0x34	; 52
    136e:	53 e4       	ldi	r21, 0x43	; 67
    1370:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	49 eb       	ldi	r20, 0xB9	; 185
    137a:	53 e4       	ldi	r21, 0x43	; 67
    137c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
    1380:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__fixunssfsi>
    1384:	70 93 8d 00 	sts	0x008D, r23
    1388:	60 93 8c 00 	sts	0x008C, r22
    138c:	20 c0       	rjmp	.+64     	; 0x13ce <move_robot+0x88>
	}
	else
	{                      // Move with a left curve
		OCR1B = ((180.0 - theta)/180.0)*PWM_SPEED_FWD_LFT;
    138e:	9b 01       	movw	r18, r22
    1390:	ac 01       	movw	r20, r24
    1392:	60 e0       	ldi	r22, 0x00	; 0
    1394:	70 e0       	ldi	r23, 0x00	; 0
    1396:	84 e3       	ldi	r24, 0x34	; 52
    1398:	93 e4       	ldi	r25, 0x43	; 67
    139a:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	44 e3       	ldi	r20, 0x34	; 52
    13a4:	53 e4       	ldi	r21, 0x43	; 67
    13a6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e8       	ldi	r19, 0x80	; 128
    13ae:	4f eb       	ldi	r20, 0xBF	; 191
    13b0:	53 e4       	ldi	r21, 0x43	; 67
    13b2:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
    13b6:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <__fixunssfsi>
    13ba:	70 93 8b 00 	sts	0x008B, r23
    13be:	60 93 8a 00 	sts	0x008A, r22
		OCR1C = PWM_SPEED_FWD_RGHT;
    13c2:	82 e7       	ldi	r24, 0x72	; 114
    13c4:	91 e0       	ldi	r25, 0x01	; 1
    13c6:	90 93 8d 00 	sts	0x008D, r25
    13ca:	80 93 8c 00 	sts	0x008C, r24
	}
	
	clear(PORTB,0);
    13ce:	28 98       	cbi	0x05, 0	; 5
	set(PORTB,1);
    13d0:	29 9a       	sbi	0x05, 1	; 5
    13d2:	08 95       	ret

000013d4 <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    13d4:	cf 93       	push	r28
    13d6:	df 93       	push	r29
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
    13dc:	ca 56       	subi	r28, 0x6A	; 106
    13de:	d1 09       	sbc	r29, r1
    13e0:	0f b6       	in	r0, 0x3f	; 63
    13e2:	f8 94       	cli
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	0f be       	out	0x3f, r0	; 63
    13e8:	cd bf       	out	0x3d, r28	; 61
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    13ea:	1a 82       	std	Y+2, r1	; 0x02
    13ec:	19 82       	std	Y+1, r1	; 0x01
    13ee:	1c 82       	std	Y+4, r1	; 0x04
    13f0:	1b 82       	std	Y+3, r1	; 0x03
	int timer_switch = 0;
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
    13f2:	fe 01       	movw	r30, r28
    13f4:	35 96       	adiw	r30, 0x05	; 5
    13f6:	8a e0       	ldi	r24, 0x0A	; 10
    13f8:	df 01       	movw	r26, r30
    13fa:	1d 92       	st	X+, r1
    13fc:	8a 95       	dec	r24
    13fe:	e9 f7       	brne	.-6      	; 0x13fa <main+0x26>
		
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
    1400:	fe 01       	movw	r30, r28
    1402:	3f 96       	adiw	r30, 0x0f	; 15
    1404:	8a e1       	ldi	r24, 0x1A	; 26
    1406:	df 01       	movw	r26, r30
    1408:	1d 92       	st	X+, r1
    140a:	8a 95       	dec	r24
    140c:	e9 f7       	brne	.-6      	; 0x1408 <main+0x34>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0, theta_robot = 0;
    140e:	23 96       	adiw	r28, 0x03	; 3
    1410:	1f ae       	std	Y+63, r1	; 0x3f
    1412:	1e ae       	std	Y+62, r1	; 0x3e
    1414:	23 97       	sbiw	r28, 0x03	; 3
    1416:	25 96       	adiw	r28, 0x05	; 5
    1418:	1f ae       	std	Y+63, r1	; 0x3f
    141a:	1e ae       	std	Y+62, r1	; 0x3e
    141c:	25 97       	sbiw	r28, 0x05	; 5
    141e:	27 96       	adiw	r28, 0x07	; 7
    1420:	1f ae       	std	Y+63, r1	; 0x3f
    1422:	1e ae       	std	Y+62, r1	; 0x3e
    1424:	27 97       	sbiw	r28, 0x07	; 7
    div_t aux_conversion;
    
    //Set the clock system prescaler
    m_clockdivide(N_CLOCK);
    1426:	e1 e6       	ldi	r30, 0x61	; 97
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 e8       	ldi	r24, 0x80	; 128
    142c:	80 83       	st	Z, r24
    142e:	10 82       	st	Z, r1
    
    //Turn off the LEDs
    m_green(OFF);
    1430:	6a 9a       	sbi	0x0d, 2	; 13
    1432:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);
    1434:	6e 9a       	sbi	0x0d, 6	; 13
    1436:	76 9a       	sbi	0x0e, 6	; 14
    
    m_red(ON);
    1438:	6e 9a       	sbi	0x0d, 6	; 13
    143a:	76 98       	cbi	0x0e, 6	; 14
    //Initialize bus
    m_bus_init();
    143c:	0e 94 b1 11 	call	0x2362	; 0x2362 <m_bus_init>
    
    //Initialize ports
    init_ports();
    1440:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <init_ports>
    
    //Set timer 1 for motor
    set_timer1();
    1444:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <set_timer1>
    
    //Set timer 3 for solenoid
    //set_timer3();
    
    //Set timer to every 0.1 s (10 Hz)
    set_timer4();
    1448:	0e 94 0a 09 	call	0x1214	; 0x1214 <set_timer4>
    
    //Set the ADC
    init_analog();
    144c:	0e 94 29 09 	call	0x1252	; 0x1252 <init_analog>
    
    //Initialize wii camera
    char aux = 0;
    while(!aux)
    {
        aux = m_wii_open();
    1450:	0e 94 bd 13 	call	0x277a	; 0x277a <m_wii_open>
    //Set the ADC
    init_analog();
    
    //Initialize wii camera
    char aux = 0;
    while(!aux)
    1454:	88 23       	and	r24, r24
    1456:	e1 f3       	breq	.-8      	; 0x1450 <main+0x7c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1458:	bf e3       	ldi	r27, 0x3F	; 63
    145a:	ed e0       	ldi	r30, 0x0D	; 13
    145c:	f3 e0       	ldi	r31, 0x03	; 3
    145e:	b1 50       	subi	r27, 0x01	; 1
    1460:	e0 40       	sbci	r30, 0x00	; 0
    1462:	f0 40       	sbci	r31, 0x00	; 0
    1464:	e1 f7       	brne	.-8      	; 0x145e <main+0x8a>
    1466:	00 c0       	rjmp	.+0      	; 0x1468 <main+0x94>
    1468:	00 00       	nop
    {
        aux = m_wii_open();
    }
    
    m_wait(1000);
    m_red(OFF);
    146a:	6e 9a       	sbi	0x0d, 6	; 13
    146c:	76 9a       	sbi	0x0e, 6	; 14
    
    //Open the channel
    m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
    146e:	4a e0       	ldi	r20, 0x0A	; 10
    1470:	62 e4       	ldi	r22, 0x42	; 66
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	0e 94 c2 11 	call	0x2384	; 0x2384 <m_rf_open>
	//m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
		
    //Enable interruptions
    sei();
    1478:	78 94       	sei
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
	int timer_switch = 0;
    147a:	61 96       	adiw	r28, 0x11	; 17
    147c:	1f ae       	std	Y+63, r1	; 0x3f
    147e:	1e ae       	std	Y+62, r1	; 0x3e
    1480:	61 97       	sbiw	r28, 0x11	; 17
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    1482:	a6 96       	adiw	r28, 0x26	; 38
    1484:	1f ae       	std	Y+63, r1	; 0x3f
    1486:	1e ae       	std	Y+62, r1	; 0x3e
    1488:	a6 97       	sbiw	r28, 0x26	; 38
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
    148a:	65 96       	adiw	r28, 0x15	; 21
    148c:	1f ae       	std	Y+63, r1	; 0x3f
    148e:	1e ae       	std	Y+62, r1	; 0x3e
    1490:	65 97       	sbiw	r28, 0x15	; 21
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    1492:	66 96       	adiw	r28, 0x16	; 22
    1494:	1f ae       	std	Y+63, r1	; 0x3f
    1496:	66 97       	sbiw	r28, 0x16	; 22
    1498:	6b 96       	adiw	r28, 0x1b	; 27
    149a:	1f ae       	std	Y+63, r1	; 0x3f
    149c:	6b 97       	sbiw	r28, 0x1b	; 27
    149e:	a7 96       	adiw	r28, 0x27	; 39
    14a0:	1f ae       	std	Y+63, r1	; 0x3f
    14a2:	a7 97       	sbiw	r28, 0x27	; 39
    14a4:	a8 96       	adiw	r28, 0x28	; 40
    14a6:	1f ae       	std	Y+63, r1	; 0x3f
    14a8:	a8 97       	sbiw	r28, 0x28	; 40
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    14aa:	6a 96       	adiw	r28, 0x1a	; 26
    14ac:	1c ae       	std	Y+60, r1	; 0x3c
    14ae:	1d ae       	std	Y+61, r1	; 0x3d
    14b0:	1e ae       	std	Y+62, r1	; 0x3e
    14b2:	1f ae       	std	Y+63, r1	; 0x3f
    14b4:	6a 97       	sbiw	r28, 0x1a	; 26
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    float dir_angle = 0;
    14b6:	6d 96       	adiw	r28, 0x1d	; 29
    14b8:	1f ae       	std	Y+63, r1	; 0x3f
    14ba:	6d 97       	sbiw	r28, 0x1d	; 29
    14bc:	6e 96       	adiw	r28, 0x1e	; 30
    14be:	1f ae       	std	Y+63, r1	; 0x3f
    14c0:	6e 97       	sbiw	r28, 0x1e	; 30
    14c2:	6f 96       	adiw	r28, 0x1f	; 31
    14c4:	1f ae       	std	Y+63, r1	; 0x3f
    14c6:	6f 97       	sbiw	r28, 0x1f	; 31
    14c8:	a0 96       	adiw	r28, 0x20	; 32
    14ca:	1f ae       	std	Y+63, r1	; 0x3f
    14cc:	a0 97       	sbiw	r28, 0x20	; 32
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    float dir_y = 0;
    14ce:	a1 96       	adiw	r28, 0x21	; 33
    14d0:	1f ae       	std	Y+63, r1	; 0x3f
    14d2:	a1 97       	sbiw	r28, 0x21	; 33
    14d4:	a2 96       	adiw	r28, 0x22	; 34
    14d6:	1f ae       	std	Y+63, r1	; 0x3f
    14d8:	a2 97       	sbiw	r28, 0x22	; 34
    14da:	a3 96       	adiw	r28, 0x23	; 35
    14dc:	1f ae       	std	Y+63, r1	; 0x3f
    14de:	a3 97       	sbiw	r28, 0x23	; 35
    14e0:	a4 96       	adiw	r28, 0x24	; 36
    14e2:	1f ae       	std	Y+63, r1	; 0x3f
    14e4:	a4 97       	sbiw	r28, 0x24	; 36
	int pause_bool = 0;
	int enemy_rob1_x = 0,enemy_rob1_y = 0,enemy_rob2_x = 0,enemy_rob2_y = 0,enemy_rob3_x = 0,enemy_rob3_y = 0;
	int scoreA = 0,scoreB = 0;
    
    //Variables debugging
    float dir_x = 0;
    14e6:	41 2c       	mov	r4, r1
    14e8:	51 2c       	mov	r5, r1
    14ea:	32 01       	movw	r6, r4
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    int goal_pos_x = 0, goal_pos_y = 0;
    14ec:	63 96       	adiw	r28, 0x13	; 19
    14ee:	1f ae       	std	Y+63, r1	; 0x3f
    14f0:	1e ae       	std	Y+62, r1	; 0x3e
    14f2:	63 97       	sbiw	r28, 0x13	; 19
int main(void)
{
    //Variable declaration
    unsigned char wii_OK = 0;
    unsigned char localize_OK = 0;
    int status_go_to_goal = 0;
    14f4:	21 2c       	mov	r2, r1
    14f6:	31 2c       	mov	r3, r1
        
        //If data received correctly
        if (wii_OK)
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    14f8:	9e 01       	movw	r18, r28
    14fa:	2d 5f       	subi	r18, 0xFD	; 253
    14fc:	3f 4f       	sbci	r19, 0xFF	; 255
    14fe:	29 96       	adiw	r28, 0x09	; 9
    1500:	3f af       	std	Y+63, r19	; 0x3f
    1502:	2e af       	std	Y+62, r18	; 0x3e
    1504:	29 97       	sbiw	r28, 0x09	; 9
    1506:	ce 01       	movw	r24, r28
    1508:	01 96       	adiw	r24, 0x01	; 1
    150a:	2b 96       	adiw	r28, 0x0b	; 11
    150c:	9f af       	std	Y+63, r25	; 0x3f
    150e:	8e af       	std	Y+62, r24	; 0x3e
    1510:	2b 97       	sbiw	r28, 0x0b	; 11
    1512:	de 01       	movw	r26, r28
    1514:	ab 5b       	subi	r26, 0xBB	; 187
    1516:	bf 4f       	sbci	r27, 0xFF	; 255
    1518:	2d 96       	adiw	r28, 0x0d	; 13
    151a:	bf af       	std	Y+63, r27	; 0x3f
    151c:	ae af       	std	Y+62, r26	; 0x3e
    151e:	2d 97       	sbiw	r28, 0x0d	; 13
    1520:	fe 01       	movw	r30, r28
    1522:	ed 5b       	subi	r30, 0xBD	; 189
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	2f 96       	adiw	r28, 0x0f	; 15
    1528:	ff af       	std	Y+63, r31	; 0x3f
    152a:	ee af       	std	Y+62, r30	; 0x3e
    152c:	2f 97       	sbiw	r28, 0x0f	; 15
    152e:	23 c0       	rjmp	.+70     	; 0x1576 <main+0x1a2>
					dir_x = goal_pos_x-x_robot;
					dir_y = goal_pos_y-y_robot;
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
                        status_go_to_goal = 2;
    1530:	68 94       	set
    1532:	22 24       	eor	r2, r2
    1534:	21 f8       	bld	r2, 1
    1536:	31 2c       	mov	r3, r1
    1538:	1e c0       	rjmp	.+60     	; 0x1576 <main+0x1a2>
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
						{
                            turn_right();
							commands_var = 4;
						}else
							commands_var = 0;
    153a:	a6 96       	adiw	r28, 0x26	; 38
    153c:	1f ae       	std	Y+63, r1	; 0x3f
    153e:	1e ae       	std	Y+62, r1	; 0x3e
    1540:	a6 97       	sbiw	r28, 0x26	; 38
    1542:	19 c0       	rjmp	.+50     	; 0x1576 <main+0x1a2>
    1544:	a6 96       	adiw	r28, 0x26	; 38
    1546:	1f ae       	std	Y+63, r1	; 0x3f
    1548:	1e ae       	std	Y+62, r1	; 0x3e
    154a:	a6 97       	sbiw	r28, 0x26	; 38
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <main+0x1a2>
    154e:	a6 96       	adiw	r28, 0x26	; 38
    1550:	1f ae       	std	Y+63, r1	; 0x3f
    1552:	1e ae       	std	Y+62, r1	; 0x3e
    1554:	a6 97       	sbiw	r28, 0x26	; 38
    1556:	0f c0       	rjmp	.+30     	; 0x1576 <main+0x1a2>
                    }
                }else if (status_go_to_goal == 2)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 3;
    1558:	0f 2e       	mov	r0, r31
    155a:	f3 e0       	ldi	r31, 0x03	; 3
    155c:	2f 2e       	mov	r2, r31
    155e:	31 2c       	mov	r3, r1
    1560:	f0 2d       	mov	r31, r0
    1562:	09 c0       	rjmp	.+18     	; 0x1576 <main+0x1a2>
                    else
                    {
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
                            status_go_to_goal = 0;
    1564:	21 2c       	mov	r2, r1
    1566:	31 2c       	mov	r3, r1
    1568:	06 c0       	rjmp	.+12     	; 0x1576 <main+0x1a2>
    156a:	21 2c       	mov	r2, r1
    156c:	31 2c       	mov	r3, r1
    156e:	03 c0       	rjmp	.+6      	; 0x1576 <main+0x1a2>
                
                if (status_go_to_goal == 0)
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
                    if (dist_goal < THRESHOLD_DIST_GOAL)
                        status_go_to_goal = 1;
    1570:	22 24       	eor	r2, r2
    1572:	23 94       	inc	r2
    1574:	31 2c       	mov	r3, r1
        }*/
		
		
        //LOCALIZATION CODE
        //Get the blobs
        cli();
    1576:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);
    1578:	ce 01       	movw	r24, r28
    157a:	89 96       	adiw	r24, 0x29	; 41
    157c:	0e 94 28 13 	call	0x2650	; 0x2650 <m_wii_read>
        sei();
    1580:	78 94       	sei
        
        //If data received correctly
        if (wii_OK)
    1582:	88 23       	and	r24, r24
    1584:	f1 f1       	breq	.+124    	; 0x1602 <main+0x22e>
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1586:	ad ac       	ldd	r10, Y+61	; 0x3d
    1588:	be ac       	ldd	r11, Y+62	; 0x3e
    158a:	cf a8       	ldd	r12, Y+55	; 0x37
    158c:	d8 ac       	ldd	r13, Y+56	; 0x38
    158e:	e9 a8       	ldd	r14, Y+49	; 0x31
    1590:	fa a8       	ldd	r15, Y+50	; 0x32
    1592:	0b a5       	ldd	r16, Y+43	; 0x2b
    1594:	1c a5       	ldd	r17, Y+44	; 0x2c
    1596:	2b ad       	ldd	r18, Y+59	; 0x3b
    1598:	3c ad       	ldd	r19, Y+60	; 0x3c
    159a:	4d a9       	ldd	r20, Y+53	; 0x35
    159c:	5e a9       	ldd	r21, Y+54	; 0x36
    159e:	6f a5       	ldd	r22, Y+47	; 0x2f
    15a0:	78 a9       	ldd	r23, Y+48	; 0x30
    15a2:	29 96       	adiw	r28, 0x09	; 9
    15a4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15a6:	29 97       	sbiw	r28, 0x09	; 9
    15a8:	ff 93       	push	r31
    15aa:	28 96       	adiw	r28, 0x08	; 8
    15ac:	8f ad       	ldd	r24, Y+63	; 0x3f
    15ae:	28 97       	sbiw	r28, 0x08	; 8
    15b0:	8f 93       	push	r24
    15b2:	2b 96       	adiw	r28, 0x0b	; 11
    15b4:	9f ad       	ldd	r25, Y+63	; 0x3f
    15b6:	2b 97       	sbiw	r28, 0x0b	; 11
    15b8:	9f 93       	push	r25
    15ba:	2a 96       	adiw	r28, 0x0a	; 10
    15bc:	af ad       	ldd	r26, Y+63	; 0x3f
    15be:	2a 97       	sbiw	r28, 0x0a	; 10
    15c0:	af 93       	push	r26
    15c2:	2d 96       	adiw	r28, 0x0d	; 13
    15c4:	bf ad       	ldd	r27, Y+63	; 0x3f
    15c6:	2d 97       	sbiw	r28, 0x0d	; 13
    15c8:	bf 93       	push	r27
    15ca:	2c 96       	adiw	r28, 0x0c	; 12
    15cc:	ef ad       	ldd	r30, Y+63	; 0x3f
    15ce:	2c 97       	sbiw	r28, 0x0c	; 12
    15d0:	ef 93       	push	r30
    15d2:	2f 96       	adiw	r28, 0x0f	; 15
    15d4:	ff ad       	ldd	r31, Y+63	; 0x3f
    15d6:	2f 97       	sbiw	r28, 0x0f	; 15
    15d8:	ff 93       	push	r31
    15da:	2e 96       	adiw	r28, 0x0e	; 14
    15dc:	8f ad       	ldd	r24, Y+63	; 0x3f
    15de:	2e 97       	sbiw	r28, 0x0e	; 14
    15e0:	8f 93       	push	r24
    15e2:	0f 2e       	mov	r0, r31
    15e4:	f1 e4       	ldi	r31, 0x41	; 65
    15e6:	8f 2e       	mov	r8, r31
    15e8:	91 2c       	mov	r9, r1
    15ea:	f0 2d       	mov	r31, r0
    15ec:	8c 0e       	add	r8, r28
    15ee:	9d 1e       	adc	r9, r29
    15f0:	89 a5       	ldd	r24, Y+41	; 0x29
    15f2:	9a a5       	ldd	r25, Y+42	; 0x2a
    15f4:	0e 94 9b 00 	call	0x136	; 0x136 <localize>
    15f8:	0f b6       	in	r0, 0x3f	; 63
    15fa:	f8 94       	cli
    15fc:	de bf       	out	0x3e, r29	; 62
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	cd bf       	out	0x3d, r28	; 61
         }
         */
        
        
        //SEND COMMANDS
        if (flag_timer == 1)
    1602:	80 91 4c 01 	lds	r24, 0x014C
    1606:	90 91 4d 01 	lds	r25, 0x014D
    160a:	01 97       	sbiw	r24, 0x01	; 1
    160c:	09 f0       	breq	.+2      	; 0x1610 <main+0x23c>
    160e:	e4 c0       	rjmp	.+456    	; 0x17d8 <main+0x404>
        {
			if (timer_switch == 0)
    1610:	61 96       	adiw	r28, 0x11	; 17
    1612:	ee ad       	ldd	r30, Y+62	; 0x3e
    1614:	ff ad       	ldd	r31, Y+63	; 0x3f
    1616:	61 97       	sbiw	r28, 0x11	; 17
    1618:	ef 2b       	or	r30, r31
    161a:	c1 f4       	brne	.+48     	; 0x164c <main+0x278>
			{
				//Create the packet to send to system
				send_buffer[0] = ALEX_ADDRESS_SYSTEM;
    161c:	82 e4       	ldi	r24, 0x42	; 66
    161e:	8d 83       	std	Y+5, r24	; 0x05
				send_buffer[1] = x_robot;
    1620:	22 96       	adiw	r28, 0x02	; 2
    1622:	8f ad       	ldd	r24, Y+63	; 0x3f
    1624:	22 97       	sbiw	r28, 0x02	; 2
    1626:	8e 83       	std	Y+6, r24	; 0x06
				send_buffer[2] = y_robot;
    1628:	24 96       	adiw	r28, 0x04	; 4
    162a:	8f ad       	ldd	r24, Y+63	; 0x3f
    162c:	24 97       	sbiw	r28, 0x04	; 4
    162e:	8f 83       	std	Y+7, r24	; 0x07
				m_rf_send(SEN_ADDRESS_SYSTEM,send_buffer,PACKET_LENGTH_SYSTEM);
    1630:	4a e0       	ldi	r20, 0x0A	; 10
    1632:	be 01       	movw	r22, r28
    1634:	6b 5f       	subi	r22, 0xFB	; 251
    1636:	7f 4f       	sbci	r23, 0xFF	; 255
    1638:	8a ed       	ldi	r24, 0xDA	; 218
    163a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <m_rf_send>
				timer_switch = 1;
    163e:	21 e0       	ldi	r18, 0x01	; 1
    1640:	30 e0       	ldi	r19, 0x00	; 0
    1642:	61 96       	adiw	r28, 0x11	; 17
    1644:	3f af       	std	Y+63, r19	; 0x3f
    1646:	2e af       	std	Y+62, r18	; 0x3e
    1648:	61 97       	sbiw	r28, 0x11	; 17
    164a:	c2 c0       	rjmp	.+388    	; 0x17d0 <main+0x3fc>
			else
			{		
            		
				//DEBUG COMMANDS SENDING
				//Open the channel
				m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    164c:	4a e1       	ldi	r20, 0x1A	; 26
    164e:	69 e4       	ldi	r22, 0x49	; 73
    1650:	81 e0       	ldi	r24, 0x01	; 1
    1652:	0e 94 c2 11 	call	0x2384	; 0x2384 <m_rf_open>
		
				output_buffer[0]= state;
    1656:	a6 e0       	ldi	r26, 0x06	; 6
    1658:	b1 e0       	ldi	r27, 0x01	; 1
    165a:	8c 91       	ld	r24, X
    165c:	8f 87       	std	Y+15, r24	; 0x0f
				output_buffer[1]= x_robot;
    165e:	22 96       	adiw	r28, 0x02	; 2
    1660:	8f ad       	ldd	r24, Y+63	; 0x3f
    1662:	22 97       	sbiw	r28, 0x02	; 2
    1664:	88 8b       	std	Y+16, r24	; 0x10
				output_buffer[2]= y_robot;
    1666:	24 96       	adiw	r28, 0x04	; 4
    1668:	8f ad       	ldd	r24, Y+63	; 0x3f
    166a:	24 97       	sbiw	r28, 0x04	; 4
    166c:	89 8b       	std	Y+17, r24	; 0x11
				aux_conversion = div(theta_robot,128);
    166e:	60 e8       	ldi	r22, 0x80	; 128
    1670:	70 e0       	ldi	r23, 0x00	; 0
    1672:	27 96       	adiw	r28, 0x07	; 7
    1674:	8e ad       	ldd	r24, Y+62	; 0x3e
    1676:	9f ad       	ldd	r25, Y+63	; 0x3f
    1678:	27 97       	sbiw	r28, 0x07	; 7
    167a:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
			
				//Put packets together for sending
				output_buffer[3] = (signed char)aux_conversion.quot;
    167e:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[4] = (signed char)aux_conversion.rem;
    1680:	8b 8b       	std	Y+19, r24	; 0x13
			
				//Debugging
				output_buffer[5] = (signed char)status_go_to_goal;
    1682:	2c 8a       	std	Y+20, r2	; 0x14
			
				aux_conversion = div((int)dir_x,128);
    1684:	c3 01       	movw	r24, r6
    1686:	b2 01       	movw	r22, r4
    1688:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
    168c:	dc 01       	movw	r26, r24
    168e:	cb 01       	movw	r24, r22
    1690:	60 e8       	ldi	r22, 0x80	; 128
    1692:	70 e0       	ldi	r23, 0x00	; 0
    1694:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[6] = (signed char)aux_conversion.quot;
    1698:	6d 8b       	std	Y+21, r22	; 0x15
				output_buffer[7] = (signed char)aux_conversion.rem;
    169a:	8e 8b       	std	Y+22, r24	; 0x16
			
				aux_conversion = div((int)dir_y,128);
    169c:	a1 96       	adiw	r28, 0x21	; 33
    169e:	5f ad       	ldd	r21, Y+63	; 0x3f
    16a0:	a1 97       	sbiw	r28, 0x21	; 33
    16a2:	a2 96       	adiw	r28, 0x22	; 34
    16a4:	4f ad       	ldd	r20, Y+63	; 0x3f
    16a6:	a2 97       	sbiw	r28, 0x22	; 34
    16a8:	a3 96       	adiw	r28, 0x23	; 35
    16aa:	3f ad       	ldd	r19, Y+63	; 0x3f
    16ac:	a3 97       	sbiw	r28, 0x23	; 35
    16ae:	a4 96       	adiw	r28, 0x24	; 36
    16b0:	2f ad       	ldd	r18, Y+63	; 0x3f
    16b2:	a4 97       	sbiw	r28, 0x24	; 36
    16b4:	65 2f       	mov	r22, r21
    16b6:	74 2f       	mov	r23, r20
    16b8:	83 2f       	mov	r24, r19
    16ba:	92 2f       	mov	r25, r18
    16bc:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
    16c0:	dc 01       	movw	r26, r24
    16c2:	cb 01       	movw	r24, r22
    16c4:	60 e8       	ldi	r22, 0x80	; 128
    16c6:	70 e0       	ldi	r23, 0x00	; 0
    16c8:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[8] = (signed char)aux_conversion.quot;
    16cc:	6f 8b       	std	Y+23, r22	; 0x17
				output_buffer[9] = (signed char)aux_conversion.rem;
    16ce:	88 8f       	std	Y+24, r24	; 0x18
			
				aux_conversion = div((int)dir_angle,128);
    16d0:	6d 96       	adiw	r28, 0x1d	; 29
    16d2:	5f ad       	ldd	r21, Y+63	; 0x3f
    16d4:	6d 97       	sbiw	r28, 0x1d	; 29
    16d6:	6e 96       	adiw	r28, 0x1e	; 30
    16d8:	4f ad       	ldd	r20, Y+63	; 0x3f
    16da:	6e 97       	sbiw	r28, 0x1e	; 30
    16dc:	6f 96       	adiw	r28, 0x1f	; 31
    16de:	3f ad       	ldd	r19, Y+63	; 0x3f
    16e0:	6f 97       	sbiw	r28, 0x1f	; 31
    16e2:	a0 96       	adiw	r28, 0x20	; 32
    16e4:	2f ad       	ldd	r18, Y+63	; 0x3f
    16e6:	a0 97       	sbiw	r28, 0x20	; 32
    16e8:	65 2f       	mov	r22, r21
    16ea:	74 2f       	mov	r23, r20
    16ec:	83 2f       	mov	r24, r19
    16ee:	92 2f       	mov	r25, r18
    16f0:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	60 e8       	ldi	r22, 0x80	; 128
    16fa:	70 e0       	ldi	r23, 0x00	; 0
    16fc:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[10] = (signed char)aux_conversion.quot;
    1700:	69 8f       	std	Y+25, r22	; 0x19
				output_buffer[11] = (signed char)aux_conversion.rem;
    1702:	8a 8f       	std	Y+26, r24	; 0x1a
			
				aux_conversion = div((int)dist_goal,128);
    1704:	6a 96       	adiw	r28, 0x1a	; 26
    1706:	6c ad       	ldd	r22, Y+60	; 0x3c
    1708:	7d ad       	ldd	r23, Y+61	; 0x3d
    170a:	8e ad       	ldd	r24, Y+62	; 0x3e
    170c:	9f ad       	ldd	r25, Y+63	; 0x3f
    170e:	6a 97       	sbiw	r28, 0x1a	; 26
    1710:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	60 e8       	ldi	r22, 0x80	; 128
    171a:	70 e0       	ldi	r23, 0x00	; 0
    171c:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[12] = (signed char)aux_conversion.quot;
    1720:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[13] = (signed char)aux_conversion.rem;
    1722:	8c 8f       	std	Y+28, r24	; 0x1c
			
				aux_conversion = div(cam_X,128);
    1724:	60 e8       	ldi	r22, 0x80	; 128
    1726:	70 e0       	ldi	r23, 0x00	; 0
    1728:	89 81       	ldd	r24, Y+1	; 0x01
    172a:	9a 81       	ldd	r25, Y+2	; 0x02
    172c:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[14] = (signed char)aux_conversion.quot;
    1730:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[15] = (signed char)aux_conversion.rem;
    1732:	8e 8f       	std	Y+30, r24	; 0x1e
			
				aux_conversion = div(cam_Y,128);
    1734:	60 e8       	ldi	r22, 0x80	; 128
    1736:	70 e0       	ldi	r23, 0x00	; 0
    1738:	8b 81       	ldd	r24, Y+3	; 0x03
    173a:	9c 81       	ldd	r25, Y+4	; 0x04
    173c:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[16] = (signed char)aux_conversion.quot;
    1740:	6f 8f       	std	Y+31, r22	; 0x1f
				output_buffer[17] = (signed char)aux_conversion.rem;
    1742:	88 a3       	std	Y+32, r24	; 0x20
			
				output_buffer[18] = (signed char)commands_var;
    1744:	a5 96       	adiw	r28, 0x25	; 37
    1746:	bf ad       	ldd	r27, Y+63	; 0x3f
    1748:	a5 97       	sbiw	r28, 0x25	; 37
    174a:	b9 a3       	std	Y+33, r27	; 0x21
			
				aux_conversion = div((int)diff_theta,128);
    174c:	66 96       	adiw	r28, 0x16	; 22
    174e:	5f ad       	ldd	r21, Y+63	; 0x3f
    1750:	66 97       	sbiw	r28, 0x16	; 22
    1752:	6b 96       	adiw	r28, 0x1b	; 27
    1754:	4f ad       	ldd	r20, Y+63	; 0x3f
    1756:	6b 97       	sbiw	r28, 0x1b	; 27
    1758:	a7 96       	adiw	r28, 0x27	; 39
    175a:	3f ad       	ldd	r19, Y+63	; 0x3f
    175c:	a7 97       	sbiw	r28, 0x27	; 39
    175e:	a8 96       	adiw	r28, 0x28	; 40
    1760:	2f ad       	ldd	r18, Y+63	; 0x3f
    1762:	a8 97       	sbiw	r28, 0x28	; 40
    1764:	65 2f       	mov	r22, r21
    1766:	74 2f       	mov	r23, r20
    1768:	83 2f       	mov	r24, r19
    176a:	92 2f       	mov	r25, r18
    176c:	0e 94 f6 15 	call	0x2bec	; 0x2bec <__fixsfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	60 e8       	ldi	r22, 0x80	; 128
    1776:	70 e0       	ldi	r23, 0x00	; 0
    1778:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[19] = (signed char)aux_conversion.quot;
    177c:	6a a3       	std	Y+34, r22	; 0x22
				output_buffer[20] = (signed char)aux_conversion.rem;
    177e:	8b a3       	std	Y+35, r24	; 0x23
			
				aux_conversion = div((int)OCR1B,128);
    1780:	ea e8       	ldi	r30, 0x8A	; 138
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	91 81       	ldd	r25, Z+1	; 0x01
    1788:	60 e8       	ldi	r22, 0x80	; 128
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[21] = (signed char)aux_conversion.quot;
    1790:	6c a3       	std	Y+36, r22	; 0x24
				output_buffer[22] = (signed char)aux_conversion.rem;
    1792:	8d a3       	std	Y+37, r24	; 0x25
			
				aux_conversion = div((int)OCR1C,128);
    1794:	ac e8       	ldi	r26, 0x8C	; 140
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	8d 91       	ld	r24, X+
    179a:	9c 91       	ld	r25, X
    179c:	60 e8       	ldi	r22, 0x80	; 128
    179e:	70 e0       	ldi	r23, 0x00	; 0
    17a0:	0e 94 16 18 	call	0x302c	; 0x302c <__divmodhi4>
				output_buffer[23] = (signed char)aux_conversion.quot;
    17a4:	6e a3       	std	Y+38, r22	; 0x26
				output_buffer[24] = (signed char)aux_conversion.rem;
    17a6:	8f a3       	std	Y+39, r24	; 0x27
			
				output_buffer[25] = (signed char)bank;
    17a8:	64 96       	adiw	r28, 0x14	; 20
    17aa:	bf ad       	ldd	r27, Y+63	; 0x3f
    17ac:	64 97       	sbiw	r28, 0x14	; 20
    17ae:	b8 a7       	std	Y+40, r27	; 0x28
			
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
    17b0:	4a e1       	ldi	r20, 0x1A	; 26
    17b2:	be 01       	movw	r22, r28
    17b4:	61 5f       	subi	r22, 0xF1	; 241
    17b6:	7f 4f       	sbci	r23, 0xFF	; 255
    17b8:	80 e6       	ldi	r24, 0x60	; 96
    17ba:	0e 94 79 12 	call	0x24f2	; 0x24f2 <m_rf_send>
			
				//Open again the system channel			
				m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
    17be:	4a e0       	ldi	r20, 0x0A	; 10
    17c0:	62 e4       	ldi	r22, 0x42	; 66
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	0e 94 c2 11 	call	0x2384	; 0x2384 <m_rf_open>
				timer_switch = 0;
    17c8:	61 96       	adiw	r28, 0x11	; 17
    17ca:	1f ae       	std	Y+63, r1	; 0x3f
    17cc:	1e ae       	std	Y+62, r1	; 0x3e
    17ce:	61 97       	sbiw	r28, 0x11	; 17
			}
			
			
			//Reset flag
			flag_timer = 0;
    17d0:	10 92 4d 01 	sts	0x014D, r1
    17d4:	10 92 4c 01 	sts	0x014C, r1
				
			
        }
		
        //STATE COMMANDS
        switch (state)
    17d8:	80 91 06 01 	lds	r24, 0x0106
    17dc:	90 91 07 01 	lds	r25, 0x0107
    17e0:	82 30       	cpi	r24, 0x02	; 2
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <main+0x414>
    17e6:	68 c2       	rjmp	.+1232   	; 0x1cb8 <main+0x8e4>
    17e8:	34 f4       	brge	.+12     	; 0x17f6 <main+0x422>
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	81 f0       	breq	.+32     	; 0x180e <main+0x43a>
    17ee:	01 97       	sbiw	r24, 0x01	; 1
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <main+0x420>
    17f2:	36 c5       	rjmp	.+2668   	; 0x2260 <main+0xe8c>
    17f4:	24 c0       	rjmp	.+72     	; 0x183e <main+0x46a>
    17f6:	86 31       	cpi	r24, 0x16	; 22
    17f8:	91 05       	cpc	r25, r1
    17fa:	09 f4       	brne	.+2      	; 0x17fe <main+0x42a>
    17fc:	23 c5       	rjmp	.+2630   	; 0x2244 <main+0xe70>
    17fe:	83 36       	cpi	r24, 0x63	; 99
    1800:	91 05       	cpc	r25, r1
    1802:	09 f4       	brne	.+2      	; 0x1806 <main+0x432>
    1804:	d1 c4       	rjmp	.+2466   	; 0x21a8 <main+0xdd4>
    1806:	45 97       	sbiw	r24, 0x15	; 21
    1808:	09 f0       	breq	.+2      	; 0x180c <main+0x438>
    180a:	2a c5       	rjmp	.+2644   	; 0x2260 <main+0xe8c>
    180c:	24 c5       	rjmp	.+2632   	; 0x2256 <main+0xe82>
        {
            case INITIAL_STATE:
				//m_green(ON);
                if (check(PINB,2))
    180e:	1a 9b       	sbis	0x03, 2	; 3
    1810:	07 c0       	rjmp	.+14     	; 0x1820 <main+0x44c>
                {
                    goal_pos_x = GOAL_A_POS_X;
    1812:	ed e8       	ldi	r30, 0x8D	; 141
    1814:	ff ef       	ldi	r31, 0xFF	; 255
    1816:	63 96       	adiw	r28, 0x13	; 19
    1818:	ff af       	std	Y+63, r31	; 0x3f
    181a:	ee af       	std	Y+62, r30	; 0x3e
    181c:	63 97       	sbiw	r28, 0x13	; 19
    181e:	06 c0       	rjmp	.+12     	; 0x182c <main+0x458>
                    goal_pos_y = GOAL_A_POS_Y;
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
    1820:	23 e7       	ldi	r18, 0x73	; 115
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	63 96       	adiw	r28, 0x13	; 19
    1826:	3f af       	std	Y+63, r19	; 0x3f
    1828:	2e af       	std	Y+62, r18	; 0x3e
    182a:	63 97       	sbiw	r28, 0x13	; 19
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
                state = GO_TO_GOAL_CURVED;
    182c:	82 e0       	ldi	r24, 0x02	; 2
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	90 93 07 01 	sts	0x0107, r25
    1834:	80 93 06 01 	sts	0x0106, r24
                }else
                {
                    goal_pos_x = GOAL_B_POS_X;
                    goal_pos_y = GOAL_B_POS_Y;
                }
                status_go_to_goal = 0;
    1838:	21 2c       	mov	r2, r1
    183a:	31 2c       	mov	r3, r1
                state = GO_TO_GOAL_CURVED;
                break;
    183c:	9c ce       	rjmp	.-712    	; 0x1576 <main+0x1a2>
                
            case GO_TO_GOAL:
                if (status_go_to_goal == 0)
    183e:	21 14       	cp	r2, r1
    1840:	31 04       	cpc	r3, r1
    1842:	09 f0       	breq	.+2      	; 0x1846 <main+0x472>
    1844:	52 c0       	rjmp	.+164    	; 0x18ea <main+0x516>
                {
                    dir_x = goal_pos_x-x_robot;
    1846:	23 96       	adiw	r28, 0x03	; 3
    1848:	8e ad       	ldd	r24, Y+62	; 0x3e
    184a:	9f ad       	ldd	r25, Y+63	; 0x3f
    184c:	23 97       	sbiw	r28, 0x03	; 3
    184e:	63 96       	adiw	r28, 0x13	; 19
    1850:	6e ad       	ldd	r22, Y+62	; 0x3e
    1852:	7f ad       	ldd	r23, Y+63	; 0x3f
    1854:	63 97       	sbiw	r28, 0x13	; 19
    1856:	68 1b       	sub	r22, r24
    1858:	79 0b       	sbc	r23, r25
    185a:	88 27       	eor	r24, r24
    185c:	77 fd       	sbrc	r23, 7
    185e:	80 95       	com	r24
    1860:	98 2f       	mov	r25, r24
    1862:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1866:	46 2e       	mov	r4, r22
    1868:	57 2e       	mov	r5, r23
    186a:	68 2e       	mov	r6, r24
    186c:	79 2e       	mov	r7, r25
                    dir_y = goal_pos_y-y_robot;
    186e:	25 96       	adiw	r28, 0x05	; 5
    1870:	6e ad       	ldd	r22, Y+62	; 0x3e
    1872:	7f ad       	ldd	r23, Y+63	; 0x3f
    1874:	25 97       	sbiw	r28, 0x05	; 5
    1876:	71 95       	neg	r23
    1878:	61 95       	neg	r22
    187a:	71 09       	sbc	r23, r1
    187c:	88 27       	eor	r24, r24
    187e:	77 fd       	sbrc	r23, 7
    1880:	80 95       	com	r24
    1882:	98 2f       	mov	r25, r24
    1884:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1888:	26 2f       	mov	r18, r22
    188a:	37 2f       	mov	r19, r23
    188c:	48 2f       	mov	r20, r24
    188e:	59 2f       	mov	r21, r25
    1890:	a1 96       	adiw	r28, 0x21	; 33
    1892:	6f af       	std	Y+63, r22	; 0x3f
    1894:	a1 97       	sbiw	r28, 0x21	; 33
    1896:	a2 96       	adiw	r28, 0x22	; 34
    1898:	7f af       	std	Y+63, r23	; 0x3f
    189a:	a2 97       	sbiw	r28, 0x22	; 34
    189c:	a3 96       	adiw	r28, 0x23	; 35
    189e:	8f af       	std	Y+63, r24	; 0x3f
    18a0:	a3 97       	sbiw	r28, 0x23	; 35
    18a2:	a4 96       	adiw	r28, 0x24	; 36
    18a4:	9f af       	std	Y+63, r25	; 0x3f
    18a6:	a4 97       	sbiw	r28, 0x24	; 36
                    dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    18a8:	c3 01       	movw	r24, r6
    18aa:	b2 01       	movw	r22, r4
    18ac:	90 58       	subi	r25, 0x80	; 128
    18ae:	0e 94 34 15 	call	0x2a68	; 0x2a68 <atan2>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	44 e3       	ldi	r20, 0x34	; 52
    18b8:	53 e4       	ldi	r21, 0x43	; 67
    18ba:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
    18be:	2b ed       	ldi	r18, 0xDB	; 219
    18c0:	3f e0       	ldi	r19, 0x0F	; 15
    18c2:	49 e4       	ldi	r20, 0x49	; 73
    18c4:	50 e4       	ldi	r21, 0x40	; 64
    18c6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
    18ca:	6d 96       	adiw	r28, 0x1d	; 29
    18cc:	6f af       	std	Y+63, r22	; 0x3f
    18ce:	6d 97       	sbiw	r28, 0x1d	; 29
    18d0:	6e 96       	adiw	r28, 0x1e	; 30
    18d2:	7f af       	std	Y+63, r23	; 0x3f
    18d4:	6e 97       	sbiw	r28, 0x1e	; 30
    18d6:	6f 96       	adiw	r28, 0x1f	; 31
    18d8:	8f af       	std	Y+63, r24	; 0x3f
    18da:	6f 97       	sbiw	r28, 0x1f	; 31
    18dc:	a0 96       	adiw	r28, 0x20	; 32
    18de:	9f af       	std	Y+63, r25	; 0x3f
    18e0:	a0 97       	sbiw	r28, 0x20	; 32
                    
                    status_go_to_goal = 1;
    18e2:	22 24       	eor	r2, r2
    18e4:	23 94       	inc	r2
    18e6:	31 2c       	mov	r3, r1
    18e8:	46 ce       	rjmp	.-884    	; 0x1576 <main+0x1a2>
                }else if (status_go_to_goal == 1)
    18ea:	31 e0       	ldi	r19, 0x01	; 1
    18ec:	23 16       	cp	r2, r19
    18ee:	31 04       	cpc	r3, r1
    18f0:	09 f0       	breq	.+2      	; 0x18f4 <main+0x520>
    18f2:	49 c1       	rjmp	.+658    	; 0x1b86 <main+0x7b2>
                {
					dir_x = goal_pos_x-x_robot;
    18f4:	23 96       	adiw	r28, 0x03	; 3
    18f6:	8e ad       	ldd	r24, Y+62	; 0x3e
    18f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    18fa:	23 97       	sbiw	r28, 0x03	; 3
    18fc:	63 96       	adiw	r28, 0x13	; 19
    18fe:	6e ad       	ldd	r22, Y+62	; 0x3e
    1900:	7f ad       	ldd	r23, Y+63	; 0x3f
    1902:	63 97       	sbiw	r28, 0x13	; 19
    1904:	68 1b       	sub	r22, r24
    1906:	79 0b       	sbc	r23, r25
    1908:	88 27       	eor	r24, r24
    190a:	77 fd       	sbrc	r23, 7
    190c:	80 95       	com	r24
    190e:	98 2f       	mov	r25, r24
    1910:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1914:	46 2e       	mov	r4, r22
    1916:	57 2e       	mov	r5, r23
    1918:	68 2e       	mov	r6, r24
    191a:	79 2e       	mov	r7, r25
					dir_y = goal_pos_y-y_robot;
    191c:	25 96       	adiw	r28, 0x05	; 5
    191e:	6e ad       	ldd	r22, Y+62	; 0x3e
    1920:	7f ad       	ldd	r23, Y+63	; 0x3f
    1922:	25 97       	sbiw	r28, 0x05	; 5
    1924:	71 95       	neg	r23
    1926:	61 95       	neg	r22
    1928:	71 09       	sbc	r23, r1
    192a:	88 27       	eor	r24, r24
    192c:	77 fd       	sbrc	r23, 7
    192e:	80 95       	com	r24
    1930:	98 2f       	mov	r25, r24
    1932:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1936:	26 2f       	mov	r18, r22
    1938:	37 2f       	mov	r19, r23
    193a:	48 2f       	mov	r20, r24
    193c:	59 2f       	mov	r21, r25
    193e:	a1 96       	adiw	r28, 0x21	; 33
    1940:	6f af       	std	Y+63, r22	; 0x3f
    1942:	a1 97       	sbiw	r28, 0x21	; 33
    1944:	a2 96       	adiw	r28, 0x22	; 34
    1946:	7f af       	std	Y+63, r23	; 0x3f
    1948:	a2 97       	sbiw	r28, 0x22	; 34
    194a:	a3 96       	adiw	r28, 0x23	; 35
    194c:	8f af       	std	Y+63, r24	; 0x3f
    194e:	a3 97       	sbiw	r28, 0x23	; 35
    1950:	a4 96       	adiw	r28, 0x24	; 36
    1952:	9f af       	std	Y+63, r25	; 0x3f
    1954:	a4 97       	sbiw	r28, 0x24	; 36
					dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1956:	c3 01       	movw	r24, r6
    1958:	b2 01       	movw	r22, r4
    195a:	90 58       	subi	r25, 0x80	; 128
    195c:	0e 94 34 15 	call	0x2a68	; 0x2a68 <atan2>
    1960:	20 e0       	ldi	r18, 0x00	; 0
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	44 e3       	ldi	r20, 0x34	; 52
    1966:	53 e4       	ldi	r21, 0x43	; 67
    1968:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
    196c:	2b ed       	ldi	r18, 0xDB	; 219
    196e:	3f e0       	ldi	r19, 0x0F	; 15
    1970:	49 e4       	ldi	r20, 0x49	; 73
    1972:	50 e4       	ldi	r21, 0x40	; 64
    1974:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
    1978:	b6 2e       	mov	r11, r22
    197a:	a7 2e       	mov	r10, r23
    197c:	18 2f       	mov	r17, r24
    197e:	09 2f       	mov	r16, r25
    1980:	6d 96       	adiw	r28, 0x1d	; 29
    1982:	6f af       	std	Y+63, r22	; 0x3f
    1984:	6d 97       	sbiw	r28, 0x1d	; 29
    1986:	6e 96       	adiw	r28, 0x1e	; 30
    1988:	7f af       	std	Y+63, r23	; 0x3f
    198a:	6e 97       	sbiw	r28, 0x1e	; 30
    198c:	6f 96       	adiw	r28, 0x1f	; 31
    198e:	8f af       	std	Y+63, r24	; 0x3f
    1990:	6f 97       	sbiw	r28, 0x1f	; 31
    1992:	a0 96       	adiw	r28, 0x20	; 32
    1994:	9f af       	std	Y+63, r25	; 0x3f
    1996:	a0 97       	sbiw	r28, 0x20	; 32
					
                    if ((theta_robot >= dir_angle-THRESHOLD_ANGLE_GOAL) && (theta_robot <= dir_angle+THRESHOLD_ANGLE_GOAL))
    1998:	27 96       	adiw	r28, 0x07	; 7
    199a:	8e ad       	ldd	r24, Y+62	; 0x3e
    199c:	9f ad       	ldd	r25, Y+63	; 0x3f
    199e:	27 97       	sbiw	r28, 0x07	; 7
    19a0:	ab 96       	adiw	r28, 0x2b	; 43
    19a2:	9f af       	std	Y+63, r25	; 0x3f
    19a4:	8e af       	std	Y+62, r24	; 0x3e
    19a6:	ab 97       	sbiw	r28, 0x2b	; 43
    19a8:	bc 01       	movw	r22, r24
    19aa:	88 27       	eor	r24, r24
    19ac:	77 fd       	sbrc	r23, 7
    19ae:	80 95       	com	r24
    19b0:	98 2f       	mov	r25, r24
    19b2:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    19b6:	6b 01       	movw	r12, r22
    19b8:	7c 01       	movw	r14, r24
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	40 ee       	ldi	r20, 0xE0	; 224
    19c0:	50 e4       	ldi	r21, 0x40	; 64
    19c2:	6b 2d       	mov	r22, r11
    19c4:	7a 2d       	mov	r23, r10
    19c6:	81 2f       	mov	r24, r17
    19c8:	90 2f       	mov	r25, r16
    19ca:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    19ce:	9b 01       	movw	r18, r22
    19d0:	ac 01       	movw	r20, r24
    19d2:	c7 01       	movw	r24, r14
    19d4:	b6 01       	movw	r22, r12
    19d6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    19da:	88 23       	and	r24, r24
    19dc:	9c f0       	brlt	.+38     	; 0x1a04 <main+0x630>
    19de:	20 e0       	ldi	r18, 0x00	; 0
    19e0:	30 e0       	ldi	r19, 0x00	; 0
    19e2:	40 ee       	ldi	r20, 0xE0	; 224
    19e4:	50 e4       	ldi	r21, 0x40	; 64
    19e6:	6b 2d       	mov	r22, r11
    19e8:	7a 2d       	mov	r23, r10
    19ea:	81 2f       	mov	r24, r17
    19ec:	90 2f       	mov	r25, r16
    19ee:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
    19f2:	9b 01       	movw	r18, r22
    19f4:	ac 01       	movw	r20, r24
    19f6:	c7 01       	movw	r24, r14
    19f8:	b6 01       	movw	r22, r12
    19fa:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    19fe:	18 16       	cp	r1, r24
    1a00:	0c f0       	brlt	.+2      	; 0x1a04 <main+0x630>
    1a02:	96 cd       	rjmp	.-1236   	; 0x1530 <main+0x15c>
                        status_go_to_goal = 2;
                    else
                    {
                        float angle_dir_aux = dir_angle-180;
    1a04:	20 e0       	ldi	r18, 0x00	; 0
    1a06:	30 e0       	ldi	r19, 0x00	; 0
    1a08:	44 e3       	ldi	r20, 0x34	; 52
    1a0a:	53 e4       	ldi	r21, 0x43	; 67
    1a0c:	6b 2d       	mov	r22, r11
    1a0e:	7a 2d       	mov	r23, r10
    1a10:	81 2f       	mov	r24, r17
    1a12:	90 2f       	mov	r25, r16
    1a14:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1a18:	a5 96       	adiw	r28, 0x25	; 37
    1a1a:	6f af       	std	Y+63, r22	; 0x3f
    1a1c:	a5 97       	sbiw	r28, 0x25	; 37
    1a1e:	a9 96       	adiw	r28, 0x29	; 41
    1a20:	7f af       	std	Y+63, r23	; 0x3f
    1a22:	a9 97       	sbiw	r28, 0x29	; 41
    1a24:	98 2e       	mov	r9, r24
    1a26:	89 2e       	mov	r8, r25
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	44 e3       	ldi	r20, 0x34	; 52
    1a2e:	53 ec       	ldi	r21, 0xC3	; 195
    1a30:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1a34:	88 23       	and	r24, r24
    1a36:	0c f0       	brlt	.+2      	; 0x1a3a <main+0x666>
    1a38:	16 c4       	rjmp	.+2092   	; 0x2266 <main+0xe92>
                        {
                            angle_dir_aux += 360;
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	44 eb       	ldi	r20, 0xB4	; 180
    1a40:	53 e4       	ldi	r21, 0x43	; 67
    1a42:	a5 96       	adiw	r28, 0x25	; 37
    1a44:	bf ad       	ldd	r27, Y+63	; 0x3f
    1a46:	a5 97       	sbiw	r28, 0x25	; 37
    1a48:	a9 96       	adiw	r28, 0x29	; 41
    1a4a:	af ad       	ldd	r26, Y+63	; 0x3f
    1a4c:	a9 97       	sbiw	r28, 0x29	; 41
    1a4e:	6b 2f       	mov	r22, r27
    1a50:	7a 2f       	mov	r23, r26
    1a52:	89 2d       	mov	r24, r9
    1a54:	98 2d       	mov	r25, r8
    1a56:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
    1a5a:	a5 96       	adiw	r28, 0x25	; 37
    1a5c:	6f af       	std	Y+63, r22	; 0x3f
    1a5e:	a5 97       	sbiw	r28, 0x25	; 37
    1a60:	a9 96       	adiw	r28, 0x29	; 41
    1a62:	7f af       	std	Y+63, r23	; 0x3f
    1a64:	a9 97       	sbiw	r28, 0x29	; 41
    1a66:	98 2e       	mov	r9, r24
    1a68:	89 2e       	mov	r8, r25
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
						{
                            turn_right();
							commands_var = 2;
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1a6a:	a7 01       	movw	r20, r14
    1a6c:	96 01       	movw	r18, r12
    1a6e:	6b 2d       	mov	r22, r11
    1a70:	7a 2d       	mov	r23, r10
    1a72:	81 2f       	mov	r24, r17
    1a74:	90 2f       	mov	r25, r16
    1a76:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1a7a:	88 23       	and	r24, r24
    1a7c:	c4 f5       	brge	.+112    	; 0x1aee <main+0x71a>
    1a7e:	3e c0       	rjmp	.+124    	; 0x1afc <main+0x728>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1a80:	a7 01       	movw	r20, r14
    1a82:	96 01       	movw	r18, r12
    1a84:	6b 2d       	mov	r22, r11
    1a86:	7a 2d       	mov	r23, r10
    1a88:	81 2f       	mov	r24, r17
    1a8a:	90 2f       	mov	r25, r16
    1a8c:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1a90:	88 23       	and	r24, r24
    1a92:	4c f0       	brlt	.+18     	; 0x1aa6 <main+0x6d2>
						{
                            turn_left();
    1a94:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <turn_left>
							commands_var = 1;
    1a98:	a1 e0       	ldi	r26, 0x01	; 1
    1a9a:	b0 e0       	ldi	r27, 0x00	; 0
    1a9c:	a6 96       	adiw	r28, 0x26	; 38
    1a9e:	bf af       	std	Y+63, r27	; 0x3f
    1aa0:	ae af       	std	Y+62, r26	; 0x3e
    1aa2:	a6 97       	sbiw	r28, 0x26	; 38
    1aa4:	68 cd       	rjmp	.-1328   	; 0x1576 <main+0x1a2>
                        }
						else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    1aa6:	a5 96       	adiw	r28, 0x25	; 37
    1aa8:	7f ad       	ldd	r23, Y+63	; 0x3f
    1aaa:	a5 97       	sbiw	r28, 0x25	; 37
    1aac:	a9 96       	adiw	r28, 0x29	; 41
    1aae:	6f ad       	ldd	r22, Y+63	; 0x3f
    1ab0:	a9 97       	sbiw	r28, 0x29	; 41
    1ab2:	27 2f       	mov	r18, r23
    1ab4:	36 2f       	mov	r19, r22
    1ab6:	49 2d       	mov	r20, r9
    1ab8:	58 2d       	mov	r21, r8
    1aba:	c7 01       	movw	r24, r14
    1abc:	b6 01       	movw	r22, r12
    1abe:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1ac2:	88 23       	and	r24, r24
    1ac4:	5c f0       	brlt	.+22     	; 0x1adc <main+0x708>
    1ac6:	a7 01       	movw	r20, r14
    1ac8:	96 01       	movw	r18, r12
    1aca:	6b 2d       	mov	r22, r11
    1acc:	7a 2d       	mov	r23, r10
    1ace:	81 2f       	mov	r24, r17
    1ad0:	90 2f       	mov	r25, r16
    1ad2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1ad6:	88 23       	and	r24, r24
    1ad8:	0c f0       	brlt	.+2      	; 0x1adc <main+0x708>
    1ada:	2f cd       	rjmp	.-1442   	; 0x153a <main+0x166>
						{
                            turn_right();
    1adc:	0e 94 78 09 	call	0x12f0	; 0x12f0 <turn_right>
							commands_var = 2;
    1ae0:	e2 e0       	ldi	r30, 0x02	; 2
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	a6 96       	adiw	r28, 0x26	; 38
    1ae6:	ff af       	std	Y+63, r31	; 0x3f
    1ae8:	ee af       	std	Y+62, r30	; 0x3e
    1aea:	a6 97       	sbiw	r28, 0x26	; 38
    1aec:	44 cd       	rjmp	.-1400   	; 0x1576 <main+0x1a2>
						}
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1aee:	ab 96       	adiw	r28, 0x2b	; 43
    1af0:	2e ad       	ldd	r18, Y+62	; 0x3e
    1af2:	3f ad       	ldd	r19, Y+63	; 0x3f
    1af4:	ab 97       	sbiw	r28, 0x2b	; 43
    1af6:	2c 34       	cpi	r18, 0x4C	; 76
    1af8:	3f 4f       	sbci	r19, 0xFF	; 255
    1afa:	bc f4       	brge	.+46     	; 0x1b2a <main+0x756>
    1afc:	a5 96       	adiw	r28, 0x25	; 37
    1afe:	7f ad       	ldd	r23, Y+63	; 0x3f
    1b00:	a5 97       	sbiw	r28, 0x25	; 37
    1b02:	a9 96       	adiw	r28, 0x29	; 41
    1b04:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b06:	a9 97       	sbiw	r28, 0x29	; 41
    1b08:	27 2f       	mov	r18, r23
    1b0a:	36 2f       	mov	r19, r22
    1b0c:	49 2d       	mov	r20, r9
    1b0e:	58 2d       	mov	r21, r8
    1b10:	c7 01       	movw	r24, r14
    1b12:	b6 01       	movw	r22, r12
    1b14:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	84 f0       	brlt	.+32     	; 0x1b3c <main+0x768>
    1b1c:	ab 96       	adiw	r28, 0x2b	; 43
    1b1e:	ae ad       	ldd	r26, Y+62	; 0x3e
    1b20:	bf ad       	ldd	r27, Y+63	; 0x3f
    1b22:	ab 97       	sbiw	r28, 0x2b	; 43
    1b24:	a5 3b       	cpi	r26, 0xB5	; 181
    1b26:	b1 05       	cpc	r27, r1
    1b28:	4c f4       	brge	.+18     	; 0x1b3c <main+0x768>
						{
                            turn_left();
    1b2a:	0e 94 6b 09 	call	0x12d6	; 0x12d6 <turn_left>
							commands_var = 3;
    1b2e:	e3 e0       	ldi	r30, 0x03	; 3
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	a6 96       	adiw	r28, 0x26	; 38
    1b34:	ff af       	std	Y+63, r31	; 0x3f
    1b36:	ee af       	std	Y+62, r30	; 0x3e
    1b38:	a6 97       	sbiw	r28, 0x26	; 38
    1b3a:	1d cd       	rjmp	.-1478   	; 0x1576 <main+0x1a2>
						}
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    1b3c:	a7 01       	movw	r20, r14
    1b3e:	96 01       	movw	r18, r12
    1b40:	6b 2d       	mov	r22, r11
    1b42:	7a 2d       	mov	r23, r10
    1b44:	81 2f       	mov	r24, r17
    1b46:	90 2f       	mov	r25, r16
    1b48:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1b4c:	88 23       	and	r24, r24
    1b4e:	0c f0       	brlt	.+2      	; 0x1b52 <main+0x77e>
    1b50:	f9 cc       	rjmp	.-1550   	; 0x1544 <main+0x170>
    1b52:	a5 96       	adiw	r28, 0x25	; 37
    1b54:	7f ad       	ldd	r23, Y+63	; 0x3f
    1b56:	a5 97       	sbiw	r28, 0x25	; 37
    1b58:	a9 96       	adiw	r28, 0x29	; 41
    1b5a:	6f ad       	ldd	r22, Y+63	; 0x3f
    1b5c:	a9 97       	sbiw	r28, 0x29	; 41
    1b5e:	27 2f       	mov	r18, r23
    1b60:	36 2f       	mov	r19, r22
    1b62:	49 2d       	mov	r20, r9
    1b64:	58 2d       	mov	r21, r8
    1b66:	c7 01       	movw	r24, r14
    1b68:	b6 01       	movw	r22, r12
    1b6a:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1b6e:	88 23       	and	r24, r24
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <main+0x7a0>
    1b72:	ed cc       	rjmp	.-1574   	; 0x154e <main+0x17a>
						{
                            turn_right();
    1b74:	0e 94 78 09 	call	0x12f0	; 0x12f0 <turn_right>
							commands_var = 4;
    1b78:	24 e0       	ldi	r18, 0x04	; 4
    1b7a:	30 e0       	ldi	r19, 0x00	; 0
    1b7c:	a6 96       	adiw	r28, 0x26	; 38
    1b7e:	3f af       	std	Y+63, r19	; 0x3f
    1b80:	2e af       	std	Y+62, r18	; 0x3e
    1b82:	a6 97       	sbiw	r28, 0x26	; 38
    1b84:	f8 cc       	rjmp	.-1552   	; 0x1576 <main+0x1a2>
						}else
							commands_var = 0;
                        
                    }
                }else if (status_go_to_goal == 2)
    1b86:	32 e0       	ldi	r19, 0x02	; 2
    1b88:	23 16       	cp	r2, r19
    1b8a:	31 04       	cpc	r3, r1
    1b8c:	09 f0       	breq	.+2      	; 0x1b90 <main+0x7bc>
    1b8e:	86 c0       	rjmp	.+268    	; 0x1c9c <main+0x8c8>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1b90:	23 96       	adiw	r28, 0x03	; 3
    1b92:	2e ad       	ldd	r18, Y+62	; 0x3e
    1b94:	3f ad       	ldd	r19, Y+63	; 0x3f
    1b96:	23 97       	sbiw	r28, 0x03	; 3
    1b98:	63 96       	adiw	r28, 0x13	; 19
    1b9a:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b9c:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b9e:	63 97       	sbiw	r28, 0x13	; 19
    1ba0:	28 1b       	sub	r18, r24
    1ba2:	39 0b       	sbc	r19, r25
    1ba4:	25 96       	adiw	r28, 0x05	; 5
    1ba6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ba8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1baa:	25 97       	sbiw	r28, 0x05	; 5
    1bac:	22 9f       	mul	r18, r18
    1bae:	b0 01       	movw	r22, r0
    1bb0:	23 9f       	mul	r18, r19
    1bb2:	70 0d       	add	r23, r0
    1bb4:	70 0d       	add	r23, r0
    1bb6:	11 24       	eor	r1, r1
    1bb8:	88 9f       	mul	r24, r24
    1bba:	90 01       	movw	r18, r0
    1bbc:	89 9f       	mul	r24, r25
    1bbe:	30 0d       	add	r19, r0
    1bc0:	30 0d       	add	r19, r0
    1bc2:	11 24       	eor	r1, r1
    1bc4:	62 0f       	add	r22, r18
    1bc6:	73 1f       	adc	r23, r19
    1bc8:	88 27       	eor	r24, r24
    1bca:	77 fd       	sbrc	r23, 7
    1bcc:	80 95       	com	r24
    1bce:	98 2f       	mov	r25, r24
    1bd0:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1bd4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    1bd8:	6a 96       	adiw	r28, 0x1a	; 26
    1bda:	6c af       	std	Y+60, r22	; 0x3c
    1bdc:	7d af       	std	Y+61, r23	; 0x3d
    1bde:	8e af       	std	Y+62, r24	; 0x3e
    1be0:	9f af       	std	Y+63, r25	; 0x3f
    1be2:	6a 97       	sbiw	r28, 0x1a	; 26
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    1be4:	20 e0       	ldi	r18, 0x00	; 0
    1be6:	30 e0       	ldi	r19, 0x00	; 0
    1be8:	40 e4       	ldi	r20, 0x40	; 64
    1bea:	51 e4       	ldi	r21, 0x41	; 65
    1bec:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1bf0:	88 23       	and	r24, r24
    1bf2:	0c f4       	brge	.+2      	; 0x1bf6 <main+0x822>
    1bf4:	b1 cc       	rjmp	.-1694   	; 0x1558 <main+0x184>
                        status_go_to_goal = 3;
                    else
                    {
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
    1bf6:	27 96       	adiw	r28, 0x07	; 7
    1bf8:	6e ad       	ldd	r22, Y+62	; 0x3e
    1bfa:	7f ad       	ldd	r23, Y+63	; 0x3f
    1bfc:	27 97       	sbiw	r28, 0x07	; 7
    1bfe:	88 27       	eor	r24, r24
    1c00:	77 fd       	sbrc	r23, 7
    1c02:	80 95       	com	r24
    1c04:	98 2f       	mov	r25, r24
    1c06:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1c0a:	6b 01       	movw	r12, r22
    1c0c:	7c 01       	movw	r14, r24
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 ee       	ldi	r20, 0xE0	; 224
    1c14:	50 e4       	ldi	r21, 0x40	; 64
    1c16:	6d 96       	adiw	r28, 0x1d	; 29
    1c18:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c1a:	6d 97       	sbiw	r28, 0x1d	; 29
    1c1c:	6e 96       	adiw	r28, 0x1e	; 30
    1c1e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c20:	6e 97       	sbiw	r28, 0x1e	; 30
    1c22:	6f 96       	adiw	r28, 0x1f	; 31
    1c24:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c26:	6f 97       	sbiw	r28, 0x1f	; 31
    1c28:	a0 96       	adiw	r28, 0x20	; 32
    1c2a:	af ad       	ldd	r26, Y+63	; 0x3f
    1c2c:	a0 97       	sbiw	r28, 0x20	; 32
    1c2e:	6f 2f       	mov	r22, r31
    1c30:	7e 2f       	mov	r23, r30
    1c32:	8b 2f       	mov	r24, r27
    1c34:	9a 2f       	mov	r25, r26
    1c36:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1c3a:	9b 01       	movw	r18, r22
    1c3c:	ac 01       	movw	r20, r24
    1c3e:	c7 01       	movw	r24, r14
    1c40:	b6 01       	movw	r22, r12
    1c42:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1c46:	88 23       	and	r24, r24
    1c48:	0c f4       	brge	.+2      	; 0x1c4c <main+0x878>
    1c4a:	8c cc       	rjmp	.-1768   	; 0x1564 <main+0x190>
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 ee       	ldi	r20, 0xE0	; 224
    1c52:	50 e4       	ldi	r21, 0x40	; 64
    1c54:	6d 96       	adiw	r28, 0x1d	; 29
    1c56:	bf ad       	ldd	r27, Y+63	; 0x3f
    1c58:	6d 97       	sbiw	r28, 0x1d	; 29
    1c5a:	6e 96       	adiw	r28, 0x1e	; 30
    1c5c:	af ad       	ldd	r26, Y+63	; 0x3f
    1c5e:	6e 97       	sbiw	r28, 0x1e	; 30
    1c60:	6f 96       	adiw	r28, 0x1f	; 31
    1c62:	ff ad       	ldd	r31, Y+63	; 0x3f
    1c64:	6f 97       	sbiw	r28, 0x1f	; 31
    1c66:	a0 96       	adiw	r28, 0x20	; 32
    1c68:	ef ad       	ldd	r30, Y+63	; 0x3f
    1c6a:	a0 97       	sbiw	r28, 0x20	; 32
    1c6c:	6b 2f       	mov	r22, r27
    1c6e:	7a 2f       	mov	r23, r26
    1c70:	8f 2f       	mov	r24, r31
    1c72:	9e 2f       	mov	r25, r30
    1c74:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
    1c78:	9b 01       	movw	r18, r22
    1c7a:	ac 01       	movw	r20, r24
    1c7c:	c7 01       	movw	r24, r14
    1c7e:	b6 01       	movw	r22, r12
    1c80:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1c84:	18 16       	cp	r1, r24
    1c86:	0c f4       	brge	.+2      	; 0x1c8a <main+0x8b6>
    1c88:	70 cc       	rjmp	.-1824   	; 0x156a <main+0x196>
                            status_go_to_goal = 0;
                        else
						{
							commands_var = 5;
                            go_fwd();
    1c8a:	0e 94 94 09 	call	0x1328	; 0x1328 <go_fwd>
                        
                        if (theta_robot < dir_angle-THRESHOLD_ANGLE_GOAL || theta_robot > dir_angle+THRESHOLD_ANGLE_GOAL)
                            status_go_to_goal = 0;
                        else
						{
							commands_var = 5;
    1c8e:	a5 e0       	ldi	r26, 0x05	; 5
    1c90:	b0 e0       	ldi	r27, 0x00	; 0
    1c92:	a6 96       	adiw	r28, 0x26	; 38
    1c94:	bf af       	std	Y+63, r27	; 0x3f
    1c96:	ae af       	std	Y+62, r26	; 0x3e
    1c98:	a6 97       	sbiw	r28, 0x26	; 38
    1c9a:	6d cc       	rjmp	.-1830   	; 0x1576 <main+0x1a2>
						}
						
                        
                    }
                }
                else if (status_go_to_goal == 3)
    1c9c:	b3 e0       	ldi	r27, 0x03	; 3
    1c9e:	2b 16       	cp	r2, r27
    1ca0:	31 04       	cpc	r3, r1
    1ca2:	09 f0       	breq	.+2      	; 0x1ca6 <main+0x8d2>
    1ca4:	68 cc       	rjmp	.-1840   	; 0x1576 <main+0x1a2>
                {
                    //stop_motor();
                    status_go_to_goal = 0;
                    state = STOP_STATE;
    1ca6:	e5 e1       	ldi	r30, 0x15	; 21
    1ca8:	f0 e0       	ldi	r31, 0x00	; 0
    1caa:	f0 93 07 01 	sts	0x0107, r31
    1cae:	e0 93 06 01 	sts	0x0106, r30
                    }
                }
                else if (status_go_to_goal == 3)
                {
                    //stop_motor();
                    status_go_to_goal = 0;
    1cb2:	21 2c       	mov	r2, r1
    1cb4:	31 2c       	mov	r3, r1
    1cb6:	5f cc       	rjmp	.-1858   	; 0x1576 <main+0x1a2>
                break;
                
                
            case GO_TO_GOAL_CURVED:
                
                if (status_go_to_goal == 0)
    1cb8:	21 14       	cp	r2, r1
    1cba:	31 04       	cpc	r3, r1
    1cbc:	09 f0       	breq	.+2      	; 0x1cc0 <main+0x8ec>
    1cbe:	5d c2       	rjmp	.+1210   	; 0x217a <main+0xda6>
                {
                    dist_goal = sqrt((x_robot-goal_pos_x)*(x_robot-goal_pos_x)+(y_robot-goal_pos_y)*(y_robot-goal_pos_y));
    1cc0:	23 96       	adiw	r28, 0x03	; 3
    1cc2:	ee ac       	ldd	r14, Y+62	; 0x3e
    1cc4:	ff ac       	ldd	r15, Y+63	; 0x3f
    1cc6:	23 97       	sbiw	r28, 0x03	; 3
    1cc8:	c7 01       	movw	r24, r14
    1cca:	63 96       	adiw	r28, 0x13	; 19
    1ccc:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cce:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cd0:	63 97       	sbiw	r28, 0x13	; 19
    1cd2:	82 1b       	sub	r24, r18
    1cd4:	93 0b       	sbc	r25, r19
    1cd6:	25 96       	adiw	r28, 0x05	; 5
    1cd8:	0e ad       	ldd	r16, Y+62	; 0x3e
    1cda:	1f ad       	ldd	r17, Y+63	; 0x3f
    1cdc:	25 97       	sbiw	r28, 0x05	; 5
    1cde:	88 9f       	mul	r24, r24
    1ce0:	b0 01       	movw	r22, r0
    1ce2:	89 9f       	mul	r24, r25
    1ce4:	70 0d       	add	r23, r0
    1ce6:	70 0d       	add	r23, r0
    1ce8:	11 24       	eor	r1, r1
    1cea:	00 9f       	mul	r16, r16
    1cec:	c0 01       	movw	r24, r0
    1cee:	01 9f       	mul	r16, r17
    1cf0:	90 0d       	add	r25, r0
    1cf2:	90 0d       	add	r25, r0
    1cf4:	11 24       	eor	r1, r1
    1cf6:	68 0f       	add	r22, r24
    1cf8:	79 1f       	adc	r23, r25
    1cfa:	88 27       	eor	r24, r24
    1cfc:	77 fd       	sbrc	r23, 7
    1cfe:	80 95       	com	r24
    1d00:	98 2f       	mov	r25, r24
    1d02:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1d06:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <sqrt>
    1d0a:	6a 96       	adiw	r28, 0x1a	; 26
    1d0c:	6c af       	std	Y+60, r22	; 0x3c
    1d0e:	7d af       	std	Y+61, r23	; 0x3d
    1d10:	8e af       	std	Y+62, r24	; 0x3e
    1d12:	9f af       	std	Y+63, r25	; 0x3f
    1d14:	6a 97       	sbiw	r28, 0x1a	; 26
                    if (dist_goal < THRESHOLD_DIST_GOAL)
    1d16:	20 e0       	ldi	r18, 0x00	; 0
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	40 e4       	ldi	r20, 0x40	; 64
    1d1c:	51 e4       	ldi	r21, 0x41	; 65
    1d1e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1d22:	88 23       	and	r24, r24
    1d24:	0c f4       	brge	.+2      	; 0x1d28 <main+0x954>
    1d26:	24 cc       	rjmp	.-1976   	; 0x1570 <main+0x19c>
                        status_go_to_goal = 1;
                    else
                    {
                        
                        dir_x = goal_pos_x-x_robot;
    1d28:	63 96       	adiw	r28, 0x13	; 19
    1d2a:	6e ad       	ldd	r22, Y+62	; 0x3e
    1d2c:	7f ad       	ldd	r23, Y+63	; 0x3f
    1d2e:	63 97       	sbiw	r28, 0x13	; 19
    1d30:	6e 19       	sub	r22, r14
    1d32:	7f 09       	sbc	r23, r15
    1d34:	88 27       	eor	r24, r24
    1d36:	77 fd       	sbrc	r23, 7
    1d38:	80 95       	com	r24
    1d3a:	98 2f       	mov	r25, r24
    1d3c:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1d40:	46 2e       	mov	r4, r22
    1d42:	57 2e       	mov	r5, r23
    1d44:	68 2e       	mov	r6, r24
    1d46:	79 2e       	mov	r7, r25
                        dir_y = goal_pos_y-y_robot;
    1d48:	66 27       	eor	r22, r22
    1d4a:	77 27       	eor	r23, r23
    1d4c:	60 1b       	sub	r22, r16
    1d4e:	71 0b       	sbc	r23, r17
    1d50:	88 27       	eor	r24, r24
    1d52:	77 fd       	sbrc	r23, 7
    1d54:	80 95       	com	r24
    1d56:	98 2f       	mov	r25, r24
    1d58:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1d5c:	26 2f       	mov	r18, r22
    1d5e:	37 2f       	mov	r19, r23
    1d60:	48 2f       	mov	r20, r24
    1d62:	59 2f       	mov	r21, r25
    1d64:	a1 96       	adiw	r28, 0x21	; 33
    1d66:	6f af       	std	Y+63, r22	; 0x3f
    1d68:	a1 97       	sbiw	r28, 0x21	; 33
    1d6a:	a2 96       	adiw	r28, 0x22	; 34
    1d6c:	7f af       	std	Y+63, r23	; 0x3f
    1d6e:	a2 97       	sbiw	r28, 0x22	; 34
    1d70:	a3 96       	adiw	r28, 0x23	; 35
    1d72:	8f af       	std	Y+63, r24	; 0x3f
    1d74:	a3 97       	sbiw	r28, 0x23	; 35
    1d76:	a4 96       	adiw	r28, 0x24	; 36
    1d78:	9f af       	std	Y+63, r25	; 0x3f
    1d7a:	a4 97       	sbiw	r28, 0x24	; 36
                        dir_angle = atan2(-dir_x,dir_y)*180/M_PI;
    1d7c:	c3 01       	movw	r24, r6
    1d7e:	b2 01       	movw	r22, r4
    1d80:	90 58       	subi	r25, 0x80	; 128
    1d82:	0e 94 34 15 	call	0x2a68	; 0x2a68 <atan2>
    1d86:	20 e0       	ldi	r18, 0x00	; 0
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	44 e3       	ldi	r20, 0x34	; 52
    1d8c:	53 e4       	ldi	r21, 0x43	; 67
    1d8e:	0e 94 42 17 	call	0x2e84	; 0x2e84 <__mulsf3>
    1d92:	2b ed       	ldi	r18, 0xDB	; 219
    1d94:	3f e0       	ldi	r19, 0x0F	; 15
    1d96:	49 e4       	ldi	r20, 0x49	; 73
    1d98:	50 e4       	ldi	r21, 0x40	; 64
    1d9a:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__divsf3>
    1d9e:	96 2e       	mov	r9, r22
    1da0:	87 2e       	mov	r8, r23
    1da2:	18 2f       	mov	r17, r24
    1da4:	09 2f       	mov	r16, r25
    1da6:	6d 96       	adiw	r28, 0x1d	; 29
    1da8:	6f af       	std	Y+63, r22	; 0x3f
    1daa:	6d 97       	sbiw	r28, 0x1d	; 29
    1dac:	6e 96       	adiw	r28, 0x1e	; 30
    1dae:	7f af       	std	Y+63, r23	; 0x3f
    1db0:	6e 97       	sbiw	r28, 0x1e	; 30
    1db2:	6f 96       	adiw	r28, 0x1f	; 31
    1db4:	8f af       	std	Y+63, r24	; 0x3f
    1db6:	6f 97       	sbiw	r28, 0x1f	; 31
    1db8:	a0 96       	adiw	r28, 0x20	; 32
    1dba:	9f af       	std	Y+63, r25	; 0x3f
    1dbc:	a0 97       	sbiw	r28, 0x20	; 32
                        
                        
                        float angle_dir_aux = dir_angle-180;
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	44 e3       	ldi	r20, 0x34	; 52
    1dc4:	53 e4       	ldi	r21, 0x43	; 67
    1dc6:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1dca:	b6 2e       	mov	r11, r22
    1dcc:	a7 2e       	mov	r10, r23
    1dce:	64 96       	adiw	r28, 0x14	; 20
    1dd0:	8f af       	std	Y+63, r24	; 0x3f
    1dd2:	64 97       	sbiw	r28, 0x14	; 20
    1dd4:	66 96       	adiw	r28, 0x16	; 22
    1dd6:	9f af       	std	Y+63, r25	; 0x3f
    1dd8:	66 97       	sbiw	r28, 0x16	; 22
                        float add_360 = 0;
                        if (angle_dir_aux < -180)
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	44 e3       	ldi	r20, 0x34	; 52
    1de0:	53 ec       	ldi	r21, 0xC3	; 195
    1de2:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1de6:	88 23       	and	r24, r24
    1de8:	0c f0       	brlt	.+2      	; 0x1dec <main+0xa18>
    1dea:	4f c2       	rjmp	.+1182   	; 0x228a <main+0xeb6>
                        {
                            angle_dir_aux += 360;
    1dec:	20 e0       	ldi	r18, 0x00	; 0
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	44 eb       	ldi	r20, 0xB4	; 180
    1df2:	53 e4       	ldi	r21, 0x43	; 67
    1df4:	64 96       	adiw	r28, 0x14	; 20
    1df6:	ff ad       	ldd	r31, Y+63	; 0x3f
    1df8:	64 97       	sbiw	r28, 0x14	; 20
    1dfa:	66 96       	adiw	r28, 0x16	; 22
    1dfc:	ef ad       	ldd	r30, Y+63	; 0x3f
    1dfe:	66 97       	sbiw	r28, 0x16	; 22
    1e00:	6b 2d       	mov	r22, r11
    1e02:	7a 2d       	mov	r23, r10
    1e04:	8f 2f       	mov	r24, r31
    1e06:	9e 2f       	mov	r25, r30
    1e08:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
    1e0c:	64 96       	adiw	r28, 0x14	; 20
    1e0e:	6f af       	std	Y+63, r22	; 0x3f
    1e10:	64 97       	sbiw	r28, 0x14	; 20
    1e12:	66 96       	adiw	r28, 0x16	; 22
    1e14:	7f af       	std	Y+63, r23	; 0x3f
    1e16:	66 97       	sbiw	r28, 0x16	; 22
    1e18:	6b 96       	adiw	r28, 0x1b	; 27
    1e1a:	8f af       	std	Y+63, r24	; 0x3f
    1e1c:	6b 97       	sbiw	r28, 0x1b	; 27
    1e1e:	a7 96       	adiw	r28, 0x27	; 39
    1e20:	9f af       	std	Y+63, r25	; 0x3f
    1e22:	a7 97       	sbiw	r28, 0x27	; 39
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
                            commands_var = 2;
                        }
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1e24:	27 96       	adiw	r28, 0x07	; 7
    1e26:	ae ac       	ldd	r10, Y+62	; 0x3e
    1e28:	bf ac       	ldd	r11, Y+63	; 0x3f
    1e2a:	27 97       	sbiw	r28, 0x07	; 7
    1e2c:	b5 01       	movw	r22, r10
    1e2e:	88 27       	eor	r24, r24
    1e30:	77 fd       	sbrc	r23, 7
    1e32:	80 95       	com	r24
    1e34:	98 2f       	mov	r25, r24
    1e36:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1e3a:	6b 01       	movw	r12, r22
    1e3c:	7c 01       	movw	r14, r24
    1e3e:	9b 01       	movw	r18, r22
    1e40:	ac 01       	movw	r20, r24
    1e42:	69 2d       	mov	r22, r9
    1e44:	78 2d       	mov	r23, r8
    1e46:	81 2f       	mov	r24, r17
    1e48:	90 2f       	mov	r25, r16
    1e4a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	0c f0       	brlt	.+2      	; 0x1e54 <main+0xa80>
    1e52:	94 c0       	rjmp	.+296    	; 0x1f7c <main+0xba8>
    1e54:	98 c0       	rjmp	.+304    	; 0x1f86 <main+0xbb2>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    1e56:	a7 01       	movw	r20, r14
    1e58:	96 01       	movw	r18, r12
    1e5a:	69 2d       	mov	r22, r9
    1e5c:	78 2d       	mov	r23, r8
    1e5e:	81 2f       	mov	r24, r17
    1e60:	90 2f       	mov	r25, r16
    1e62:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1e66:	88 23       	and	r24, r24
    1e68:	fc f0       	brlt	.+62     	; 0x1ea8 <main+0xad4>
                        {
                            diff_theta = dir_angle - theta_robot;
    1e6a:	a7 01       	movw	r20, r14
    1e6c:	96 01       	movw	r18, r12
    1e6e:	69 2d       	mov	r22, r9
    1e70:	78 2d       	mov	r23, r8
    1e72:	81 2f       	mov	r24, r17
    1e74:	90 2f       	mov	r25, r16
    1e76:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1e7a:	66 96       	adiw	r28, 0x16	; 22
    1e7c:	6f af       	std	Y+63, r22	; 0x3f
    1e7e:	66 97       	sbiw	r28, 0x16	; 22
    1e80:	6b 96       	adiw	r28, 0x1b	; 27
    1e82:	7f af       	std	Y+63, r23	; 0x3f
    1e84:	6b 97       	sbiw	r28, 0x1b	; 27
    1e86:	a7 96       	adiw	r28, 0x27	; 39
    1e88:	8f af       	std	Y+63, r24	; 0x3f
    1e8a:	a7 97       	sbiw	r28, 0x27	; 39
    1e8c:	a8 96       	adiw	r28, 0x28	; 40
    1e8e:	9f af       	std	Y+63, r25	; 0x3f
    1e90:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 0;
                            commands_var = 1;
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	90 e0       	ldi	r25, 0x00	; 0
    1e96:	a6 96       	adiw	r28, 0x26	; 38
    1e98:	9f af       	std	Y+63, r25	; 0x3f
    1e9a:	8e af       	std	Y+62, r24	; 0x3e
    1e9c:	a6 97       	sbiw	r28, 0x26	; 38
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
                        {
                            diff_theta = dir_angle - theta_robot;
                            bank = 0;
    1e9e:	65 96       	adiw	r28, 0x15	; 21
    1ea0:	1f ae       	std	Y+63, r1	; 0x3f
    1ea2:	1e ae       	std	Y+62, r1	; 0x3e
    1ea4:	65 97       	sbiw	r28, 0x15	; 21
                            commands_var = 1;
    1ea6:	52 c1       	rjmp	.+676    	; 0x214c <main+0xd78>
                        }
                        else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
    1ea8:	a7 01       	movw	r20, r14
    1eaa:	96 01       	movw	r18, r12
    1eac:	64 96       	adiw	r28, 0x14	; 20
    1eae:	ff ad       	ldd	r31, Y+63	; 0x3f
    1eb0:	64 97       	sbiw	r28, 0x14	; 20
    1eb2:	66 96       	adiw	r28, 0x16	; 22
    1eb4:	ef ad       	ldd	r30, Y+63	; 0x3f
    1eb6:	66 97       	sbiw	r28, 0x16	; 22
    1eb8:	6b 2d       	mov	r22, r11
    1eba:	7a 2d       	mov	r23, r10
    1ebc:	8f 2f       	mov	r24, r31
    1ebe:	9e 2f       	mov	r25, r30
    1ec0:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    1ec4:	18 16       	cp	r1, r24
    1ec6:	5c f0       	brlt	.+22     	; 0x1ede <main+0xb0a>
    1ec8:	a7 01       	movw	r20, r14
    1eca:	96 01       	movw	r18, r12
    1ecc:	69 2d       	mov	r22, r9
    1ece:	78 2d       	mov	r23, r8
    1ed0:	81 2f       	mov	r24, r17
    1ed2:	90 2f       	mov	r25, r16
    1ed4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1ed8:	88 23       	and	r24, r24
    1eda:	0c f0       	brlt	.+2      	; 0x1ede <main+0xb0a>
    1edc:	f9 c0       	rjmp	.+498    	; 0x20d0 <main+0xcfc>
                        {
                            if (theta_robot < 0)
    1ede:	6c 96       	adiw	r28, 0x1c	; 28
    1ee0:	ae ad       	ldd	r26, Y+62	; 0x3e
    1ee2:	bf ad       	ldd	r27, Y+63	; 0x3f
    1ee4:	6c 97       	sbiw	r28, 0x1c	; 28
    1ee6:	bb 23       	and	r27, r27
    1ee8:	44 f5       	brge	.+80     	; 0x1f3a <main+0xb66>
                                diff_theta = (theta_robot+360) - dir_angle;
    1eea:	bd 01       	movw	r22, r26
    1eec:	68 59       	subi	r22, 0x98	; 152
    1eee:	7e 4f       	sbci	r23, 0xFE	; 254
    1ef0:	88 27       	eor	r24, r24
    1ef2:	77 fd       	sbrc	r23, 7
    1ef4:	80 95       	com	r24
    1ef6:	98 2f       	mov	r25, r24
    1ef8:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    1efc:	29 2d       	mov	r18, r9
    1efe:	38 2d       	mov	r19, r8
    1f00:	41 2f       	mov	r20, r17
    1f02:	50 2f       	mov	r21, r16
    1f04:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1f08:	66 96       	adiw	r28, 0x16	; 22
    1f0a:	6f af       	std	Y+63, r22	; 0x3f
    1f0c:	66 97       	sbiw	r28, 0x16	; 22
    1f0e:	6b 96       	adiw	r28, 0x1b	; 27
    1f10:	7f af       	std	Y+63, r23	; 0x3f
    1f12:	6b 97       	sbiw	r28, 0x1b	; 27
    1f14:	a7 96       	adiw	r28, 0x27	; 39
    1f16:	8f af       	std	Y+63, r24	; 0x3f
    1f18:	a7 97       	sbiw	r28, 0x27	; 39
    1f1a:	a8 96       	adiw	r28, 0x28	; 40
    1f1c:	9f af       	std	Y+63, r25	; 0x3f
    1f1e:	a8 97       	sbiw	r28, 0x28	; 40
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
                            commands_var = 2;
    1f20:	e2 e0       	ldi	r30, 0x02	; 2
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	a6 96       	adiw	r28, 0x26	; 38
    1f26:	ff af       	std	Y+63, r31	; 0x3f
    1f28:	ee af       	std	Y+62, r30	; 0x3e
    1f2a:	a6 97       	sbiw	r28, 0x26	; 38
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
    1f2c:	21 e0       	ldi	r18, 0x01	; 1
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	65 96       	adiw	r28, 0x15	; 21
    1f32:	3f af       	std	Y+63, r19	; 0x3f
    1f34:	2e af       	std	Y+62, r18	; 0x3e
    1f36:	65 97       	sbiw	r28, 0x15	; 21
    1f38:	09 c1       	rjmp	.+530    	; 0x214c <main+0xd78>
                        else if (add_360 == 0 && (angle_dir_aux > theta_robot || theta_robot > dir_angle))
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
    1f3a:	29 2d       	mov	r18, r9
    1f3c:	38 2d       	mov	r19, r8
    1f3e:	41 2f       	mov	r20, r17
    1f40:	50 2f       	mov	r21, r16
    1f42:	c7 01       	movw	r24, r14
    1f44:	b6 01       	movw	r22, r12
    1f46:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1f4a:	66 96       	adiw	r28, 0x16	; 22
    1f4c:	6f af       	std	Y+63, r22	; 0x3f
    1f4e:	66 97       	sbiw	r28, 0x16	; 22
    1f50:	6b 96       	adiw	r28, 0x1b	; 27
    1f52:	7f af       	std	Y+63, r23	; 0x3f
    1f54:	6b 97       	sbiw	r28, 0x1b	; 27
    1f56:	a7 96       	adiw	r28, 0x27	; 39
    1f58:	8f af       	std	Y+63, r24	; 0x3f
    1f5a:	a7 97       	sbiw	r28, 0x27	; 39
    1f5c:	a8 96       	adiw	r28, 0x28	; 40
    1f5e:	9f af       	std	Y+63, r25	; 0x3f
    1f60:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 1;
                            commands_var = 2;
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	a6 96       	adiw	r28, 0x26	; 38
    1f68:	9f af       	std	Y+63, r25	; 0x3f
    1f6a:	8e af       	std	Y+62, r24	; 0x3e
    1f6c:	a6 97       	sbiw	r28, 0x26	; 38
                        {
                            if (theta_robot < 0)
                                diff_theta = (theta_robot+360) - dir_angle;
                            else
                                diff_theta = (theta_robot) - dir_angle;
                            bank = 1;
    1f6e:	a1 e0       	ldi	r26, 0x01	; 1
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	65 96       	adiw	r28, 0x15	; 21
    1f74:	bf af       	std	Y+63, r27	; 0x3f
    1f76:	ae af       	std	Y+62, r26	; 0x3e
    1f78:	65 97       	sbiw	r28, 0x15	; 21
    1f7a:	e8 c0       	rjmp	.+464    	; 0x214c <main+0xd78>
                            commands_var = 2;
                        }
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
    1f7c:	bc e4       	ldi	r27, 0x4C	; 76
    1f7e:	ab 16       	cp	r10, r27
    1f80:	bf ef       	ldi	r27, 0xFF	; 255
    1f82:	bb 06       	cpc	r11, r27
    1f84:	e4 f4       	brge	.+56     	; 0x1fbe <main+0xbea>
    1f86:	a7 01       	movw	r20, r14
    1f88:	96 01       	movw	r18, r12
    1f8a:	64 96       	adiw	r28, 0x14	; 20
    1f8c:	bf ad       	ldd	r27, Y+63	; 0x3f
    1f8e:	64 97       	sbiw	r28, 0x14	; 20
    1f90:	66 96       	adiw	r28, 0x16	; 22
    1f92:	af ad       	ldd	r26, Y+63	; 0x3f
    1f94:	66 97       	sbiw	r28, 0x16	; 22
    1f96:	6b 96       	adiw	r28, 0x1b	; 27
    1f98:	ff ad       	ldd	r31, Y+63	; 0x3f
    1f9a:	6b 97       	sbiw	r28, 0x1b	; 27
    1f9c:	a7 96       	adiw	r28, 0x27	; 39
    1f9e:	ef ad       	ldd	r30, Y+63	; 0x3f
    1fa0:	a7 97       	sbiw	r28, 0x27	; 39
    1fa2:	6b 2f       	mov	r22, r27
    1fa4:	7a 2f       	mov	r23, r26
    1fa6:	8f 2f       	mov	r24, r31
    1fa8:	9e 2f       	mov	r25, r30
    1faa:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    1fae:	18 16       	cp	r1, r24
    1fb0:	0c f4       	brge	.+2      	; 0x1fb4 <main+0xbe0>
    1fb2:	4b c0       	rjmp	.+150    	; 0x204a <main+0xc76>
    1fb4:	e5 eb       	ldi	r30, 0xB5	; 181
    1fb6:	ae 16       	cp	r10, r30
    1fb8:	b1 04       	cpc	r11, r1
    1fba:	0c f0       	brlt	.+2      	; 0x1fbe <main+0xbea>
    1fbc:	46 c0       	rjmp	.+140    	; 0x204a <main+0xc76>
                        {
                            if (theta_robot < 0)
    1fbe:	bb 20       	and	r11, r11
    1fc0:	fc f4       	brge	.+62     	; 0x2000 <main+0xc2c>
                                diff_theta = dir_angle - theta_robot;
    1fc2:	a7 01       	movw	r20, r14
    1fc4:	96 01       	movw	r18, r12
    1fc6:	69 2d       	mov	r22, r9
    1fc8:	78 2d       	mov	r23, r8
    1fca:	81 2f       	mov	r24, r17
    1fcc:	90 2f       	mov	r25, r16
    1fce:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    1fd2:	66 96       	adiw	r28, 0x16	; 22
    1fd4:	6f af       	std	Y+63, r22	; 0x3f
    1fd6:	66 97       	sbiw	r28, 0x16	; 22
    1fd8:	6b 96       	adiw	r28, 0x1b	; 27
    1fda:	7f af       	std	Y+63, r23	; 0x3f
    1fdc:	6b 97       	sbiw	r28, 0x1b	; 27
    1fde:	a7 96       	adiw	r28, 0x27	; 39
    1fe0:	8f af       	std	Y+63, r24	; 0x3f
    1fe2:	a7 97       	sbiw	r28, 0x27	; 39
    1fe4:	a8 96       	adiw	r28, 0x28	; 40
    1fe6:	9f af       	std	Y+63, r25	; 0x3f
    1fe8:	a8 97       	sbiw	r28, 0x28	; 40
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
                            commands_var = 3;
    1fea:	23 e0       	ldi	r18, 0x03	; 3
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	a6 96       	adiw	r28, 0x26	; 38
    1ff0:	3f af       	std	Y+63, r19	; 0x3f
    1ff2:	2e af       	std	Y+62, r18	; 0x3e
    1ff4:	a6 97       	sbiw	r28, 0x26	; 38
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
    1ff6:	65 96       	adiw	r28, 0x15	; 21
    1ff8:	1f ae       	std	Y+63, r1	; 0x3f
    1ffa:	1e ae       	std	Y+62, r1	; 0x3e
    1ffc:	65 97       	sbiw	r28, 0x15	; 21
    1ffe:	a6 c0       	rjmp	.+332    	; 0x214c <main+0xd78>
                        else if (add_360 == 1 && ((theta_robot <=dir_angle && theta_robot >=-180) || ((theta_robot >= angle_dir_aux) && (theta_robot <= 180))))
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	44 eb       	ldi	r20, 0xB4	; 180
    2006:	53 e4       	ldi	r21, 0x43	; 67
    2008:	69 2d       	mov	r22, r9
    200a:	78 2d       	mov	r23, r8
    200c:	81 2f       	mov	r24, r17
    200e:	90 2f       	mov	r25, r16
    2010:	0e 94 c1 14 	call	0x2982	; 0x2982 <__addsf3>
    2014:	a7 01       	movw	r20, r14
    2016:	96 01       	movw	r18, r12
    2018:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    201c:	66 96       	adiw	r28, 0x16	; 22
    201e:	6f af       	std	Y+63, r22	; 0x3f
    2020:	66 97       	sbiw	r28, 0x16	; 22
    2022:	6b 96       	adiw	r28, 0x1b	; 27
    2024:	7f af       	std	Y+63, r23	; 0x3f
    2026:	6b 97       	sbiw	r28, 0x1b	; 27
    2028:	a7 96       	adiw	r28, 0x27	; 39
    202a:	8f af       	std	Y+63, r24	; 0x3f
    202c:	a7 97       	sbiw	r28, 0x27	; 39
    202e:	a8 96       	adiw	r28, 0x28	; 40
    2030:	9f af       	std	Y+63, r25	; 0x3f
    2032:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 0;
                            commands_var = 3;
    2034:	83 e0       	ldi	r24, 0x03	; 3
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a6 96       	adiw	r28, 0x26	; 38
    203a:	9f af       	std	Y+63, r25	; 0x3f
    203c:	8e af       	std	Y+62, r24	; 0x3e
    203e:	a6 97       	sbiw	r28, 0x26	; 38
                        {
                            if (theta_robot < 0)
                                diff_theta = dir_angle - theta_robot;
                            else
                                diff_theta = (dir_angle + 360) - theta_robot;
                            bank = 0;
    2040:	65 96       	adiw	r28, 0x15	; 21
    2042:	1f ae       	std	Y+63, r1	; 0x3f
    2044:	1e ae       	std	Y+62, r1	; 0x3e
    2046:	65 97       	sbiw	r28, 0x15	; 21
    2048:	81 c0       	rjmp	.+258    	; 0x214c <main+0xd78>
                            commands_var = 3;
                        }
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
    204a:	a7 01       	movw	r20, r14
    204c:	96 01       	movw	r18, r12
    204e:	69 2d       	mov	r22, r9
    2050:	78 2d       	mov	r23, r8
    2052:	81 2f       	mov	r24, r17
    2054:	90 2f       	mov	r25, r16
    2056:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    205a:	88 23       	and	r24, r24
    205c:	0c f0       	brlt	.+2      	; 0x2060 <main+0xc8c>
    205e:	4d c0       	rjmp	.+154    	; 0x20fa <main+0xd26>
    2060:	a7 01       	movw	r20, r14
    2062:	96 01       	movw	r18, r12
    2064:	64 96       	adiw	r28, 0x14	; 20
    2066:	bf ad       	ldd	r27, Y+63	; 0x3f
    2068:	64 97       	sbiw	r28, 0x14	; 20
    206a:	66 96       	adiw	r28, 0x16	; 22
    206c:	af ad       	ldd	r26, Y+63	; 0x3f
    206e:	66 97       	sbiw	r28, 0x16	; 22
    2070:	6b 96       	adiw	r28, 0x1b	; 27
    2072:	ff ad       	ldd	r31, Y+63	; 0x3f
    2074:	6b 97       	sbiw	r28, 0x1b	; 27
    2076:	a7 96       	adiw	r28, 0x27	; 39
    2078:	ef ad       	ldd	r30, Y+63	; 0x3f
    207a:	a7 97       	sbiw	r28, 0x27	; 39
    207c:	6b 2f       	mov	r22, r27
    207e:	7a 2f       	mov	r23, r26
    2080:	8f 2f       	mov	r24, r31
    2082:	9e 2f       	mov	r25, r30
    2084:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    2088:	18 16       	cp	r1, r24
    208a:	0c f0       	brlt	.+2      	; 0x208e <main+0xcba>
    208c:	4b c0       	rjmp	.+150    	; 0x2124 <main+0xd50>
                        {
                            diff_theta = theta_robot - dir_angle;
    208e:	29 2d       	mov	r18, r9
    2090:	38 2d       	mov	r19, r8
    2092:	41 2f       	mov	r20, r17
    2094:	50 2f       	mov	r21, r16
    2096:	c7 01       	movw	r24, r14
    2098:	b6 01       	movw	r22, r12
    209a:	0e 94 c0 14 	call	0x2980	; 0x2980 <__subsf3>
    209e:	66 96       	adiw	r28, 0x16	; 22
    20a0:	6f af       	std	Y+63, r22	; 0x3f
    20a2:	66 97       	sbiw	r28, 0x16	; 22
    20a4:	6b 96       	adiw	r28, 0x1b	; 27
    20a6:	7f af       	std	Y+63, r23	; 0x3f
    20a8:	6b 97       	sbiw	r28, 0x1b	; 27
    20aa:	a7 96       	adiw	r28, 0x27	; 39
    20ac:	8f af       	std	Y+63, r24	; 0x3f
    20ae:	a7 97       	sbiw	r28, 0x27	; 39
    20b0:	a8 96       	adiw	r28, 0x28	; 40
    20b2:	9f af       	std	Y+63, r25	; 0x3f
    20b4:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 1;
                            commands_var = 4;
    20b6:	a4 e0       	ldi	r26, 0x04	; 4
    20b8:	b0 e0       	ldi	r27, 0x00	; 0
    20ba:	a6 96       	adiw	r28, 0x26	; 38
    20bc:	bf af       	std	Y+63, r27	; 0x3f
    20be:	ae af       	std	Y+62, r26	; 0x3e
    20c0:	a6 97       	sbiw	r28, 0x26	; 38
                            commands_var = 3;
                        }
                        else if (add_360 == 1 && (theta_robot > dir_angle && theta_robot < angle_dir_aux))
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
    20c2:	e1 e0       	ldi	r30, 0x01	; 1
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	65 96       	adiw	r28, 0x15	; 21
    20c8:	ff af       	std	Y+63, r31	; 0x3f
    20ca:	ee af       	std	Y+62, r30	; 0x3e
    20cc:	65 97       	sbiw	r28, 0x15	; 21
                            commands_var = 4;
    20ce:	3e c0       	rjmp	.+124    	; 0x214c <main+0xd78>
                        }else {
                            diff_theta = 0;
                            bank = 0;
                            commands_var = 0;
    20d0:	a6 96       	adiw	r28, 0x26	; 38
    20d2:	1f ae       	std	Y+63, r1	; 0x3f
    20d4:	1e ae       	std	Y+62, r1	; 0x3e
    20d6:	a6 97       	sbiw	r28, 0x26	; 38
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    20d8:	65 96       	adiw	r28, 0x15	; 21
    20da:	1f ae       	std	Y+63, r1	; 0x3f
    20dc:	1e ae       	std	Y+62, r1	; 0x3e
    20de:	65 97       	sbiw	r28, 0x15	; 21
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
    20e0:	66 96       	adiw	r28, 0x16	; 22
    20e2:	1f ae       	std	Y+63, r1	; 0x3f
    20e4:	66 97       	sbiw	r28, 0x16	; 22
    20e6:	6b 96       	adiw	r28, 0x1b	; 27
    20e8:	1f ae       	std	Y+63, r1	; 0x3f
    20ea:	6b 97       	sbiw	r28, 0x1b	; 27
    20ec:	a7 96       	adiw	r28, 0x27	; 39
    20ee:	1f ae       	std	Y+63, r1	; 0x3f
    20f0:	a7 97       	sbiw	r28, 0x27	; 39
    20f2:	a8 96       	adiw	r28, 0x28	; 40
    20f4:	1f ae       	std	Y+63, r1	; 0x3f
    20f6:	a8 97       	sbiw	r28, 0x28	; 40
    20f8:	29 c0       	rjmp	.+82     	; 0x214c <main+0xd78>
                            bank = 0;
                            commands_var = 0;
    20fa:	a6 96       	adiw	r28, 0x26	; 38
    20fc:	1f ae       	std	Y+63, r1	; 0x3f
    20fe:	1e ae       	std	Y+62, r1	; 0x3e
    2100:	a6 97       	sbiw	r28, 0x26	; 38
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    2102:	65 96       	adiw	r28, 0x15	; 21
    2104:	1f ae       	std	Y+63, r1	; 0x3f
    2106:	1e ae       	std	Y+62, r1	; 0x3e
    2108:	65 97       	sbiw	r28, 0x15	; 21
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
    210a:	66 96       	adiw	r28, 0x16	; 22
    210c:	1f ae       	std	Y+63, r1	; 0x3f
    210e:	66 97       	sbiw	r28, 0x16	; 22
    2110:	6b 96       	adiw	r28, 0x1b	; 27
    2112:	1f ae       	std	Y+63, r1	; 0x3f
    2114:	6b 97       	sbiw	r28, 0x1b	; 27
    2116:	a7 96       	adiw	r28, 0x27	; 39
    2118:	1f ae       	std	Y+63, r1	; 0x3f
    211a:	a7 97       	sbiw	r28, 0x27	; 39
    211c:	a8 96       	adiw	r28, 0x28	; 40
    211e:	1f ae       	std	Y+63, r1	; 0x3f
    2120:	a8 97       	sbiw	r28, 0x28	; 40
    2122:	14 c0       	rjmp	.+40     	; 0x214c <main+0xd78>
                            bank = 0;
                            commands_var = 0;
    2124:	a6 96       	adiw	r28, 0x26	; 38
    2126:	1f ae       	std	Y+63, r1	; 0x3f
    2128:	1e ae       	std	Y+62, r1	; 0x3e
    212a:	a6 97       	sbiw	r28, 0x26	; 38
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
                            bank = 0;
    212c:	65 96       	adiw	r28, 0x15	; 21
    212e:	1f ae       	std	Y+63, r1	; 0x3f
    2130:	1e ae       	std	Y+62, r1	; 0x3e
    2132:	65 97       	sbiw	r28, 0x15	; 21
                        {
                            diff_theta = theta_robot - dir_angle;
                            bank = 1;
                            commands_var = 4;
                        }else {
                            diff_theta = 0;
    2134:	66 96       	adiw	r28, 0x16	; 22
    2136:	1f ae       	std	Y+63, r1	; 0x3f
    2138:	66 97       	sbiw	r28, 0x16	; 22
    213a:	6b 96       	adiw	r28, 0x1b	; 27
    213c:	1f ae       	std	Y+63, r1	; 0x3f
    213e:	6b 97       	sbiw	r28, 0x1b	; 27
    2140:	a7 96       	adiw	r28, 0x27	; 39
    2142:	1f ae       	std	Y+63, r1	; 0x3f
    2144:	a7 97       	sbiw	r28, 0x27	; 39
    2146:	a8 96       	adiw	r28, 0x28	; 40
    2148:	1f ae       	std	Y+63, r1	; 0x3f
    214a:	a8 97       	sbiw	r28, 0x28	; 40
                            bank = 0;
                            commands_var = 0;
                        }
						
						move_robot(diff_theta,bank);
    214c:	65 96       	adiw	r28, 0x15	; 21
    214e:	4e ad       	ldd	r20, Y+62	; 0x3e
    2150:	5f ad       	ldd	r21, Y+63	; 0x3f
    2152:	65 97       	sbiw	r28, 0x15	; 21
    2154:	66 96       	adiw	r28, 0x16	; 22
    2156:	ff ad       	ldd	r31, Y+63	; 0x3f
    2158:	66 97       	sbiw	r28, 0x16	; 22
    215a:	6b 96       	adiw	r28, 0x1b	; 27
    215c:	ef ad       	ldd	r30, Y+63	; 0x3f
    215e:	6b 97       	sbiw	r28, 0x1b	; 27
    2160:	a7 96       	adiw	r28, 0x27	; 39
    2162:	3f ad       	ldd	r19, Y+63	; 0x3f
    2164:	a7 97       	sbiw	r28, 0x27	; 39
    2166:	a8 96       	adiw	r28, 0x28	; 40
    2168:	2f ad       	ldd	r18, Y+63	; 0x3f
    216a:	a8 97       	sbiw	r28, 0x28	; 40
    216c:	6f 2f       	mov	r22, r31
    216e:	7e 2f       	mov	r23, r30
    2170:	83 2f       	mov	r24, r19
    2172:	92 2f       	mov	r25, r18
    2174:	0e 94 a3 09 	call	0x1346	; 0x1346 <move_robot>
    2178:	fe c9       	rjmp	.-3076   	; 0x1576 <main+0x1a2>
						//move_robot(diff_theta,dist_goal,bank);                        
                    }
					
                }
                else if (status_go_to_goal == 1)
    217a:	f1 e0       	ldi	r31, 0x01	; 1
    217c:	2f 16       	cp	r2, r31
    217e:	31 04       	cpc	r3, r1
    2180:	09 f0       	breq	.+2      	; 0x2184 <main+0xdb0>
    2182:	f9 c9       	rjmp	.-3086   	; 0x1576 <main+0x1a2>
                {
                    //stop_motor();
                    status_go_to_goal = 0;
					go_bwd();
    2184:	0e 94 85 09 	call	0x130a	; 0x130a <go_bwd>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	01 96       	adiw	r24, 0x01	; 1
					long stop_counter = 0;
					while(stop_counter<2500)
    218e:	84 3c       	cpi	r24, 0xC4	; 196
    2190:	29 e0       	ldi	r18, 0x09	; 9
    2192:	92 07       	cpc	r25, r18
    2194:	d9 f7       	brne	.-10     	; 0x218c <main+0xdb8>
					{
						stop_counter++;
					}
                    state = STOP_STATE;
    2196:	85 e1       	ldi	r24, 0x15	; 21
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	90 93 07 01 	sts	0x0107, r25
    219e:	80 93 06 01 	sts	0x0106, r24
					
                }
                else if (status_go_to_goal == 1)
                {
                    //stop_motor();
                    status_go_to_goal = 0;
    21a2:	21 2c       	mov	r2, r1
    21a4:	31 2c       	mov	r3, r1
    21a6:	e7 c9       	rjmp	.-3122   	; 0x1576 <main+0x1a2>
                    state = STOP_STATE;
                }
                break;
             
			case SYSTEM_STATE:
				switch (buffer_rec[0])
    21a8:	80 91 42 01 	lds	r24, 0x0142
    21ac:	83 3a       	cpi	r24, 0xA3	; 163
    21ae:	41 f1       	breq	.+80     	; 0x2200 <main+0xe2c>
    21b0:	38 f4       	brcc	.+14     	; 0x21c0 <main+0xdec>
    21b2:	81 3a       	cpi	r24, 0xA1	; 161
    21b4:	a1 f0       	breq	.+40     	; 0x21de <main+0xe0a>
    21b6:	d0 f4       	brcc	.+52     	; 0x21ec <main+0xe18>
    21b8:	80 3a       	cpi	r24, 0xA0	; 160
    21ba:	09 f0       	breq	.+2      	; 0x21be <main+0xdea>
    21bc:	dc c9       	rjmp	.-3144   	; 0x1576 <main+0x1a2>
    21be:	08 c0       	rjmp	.+16     	; 0x21d0 <main+0xdfc>
    21c0:	86 3a       	cpi	r24, 0xA6	; 166
    21c2:	79 f1       	breq	.+94     	; 0x2222 <main+0xe4e>
    21c4:	87 3a       	cpi	r24, 0xA7	; 167
    21c6:	a1 f1       	breq	.+104    	; 0x2230 <main+0xe5c>
    21c8:	84 3a       	cpi	r24, 0xA4	; 164
    21ca:	09 f0       	breq	.+2      	; 0x21ce <main+0xdfa>
    21cc:	d4 c9       	rjmp	.-3160   	; 0x1576 <main+0x1a2>
    21ce:	22 c0       	rjmp	.+68     	; 0x2214 <main+0xe40>
				{
					//Comm test
					case 0xA0:
						state = BLUE_LED_STATE;
    21d0:	86 e1       	ldi	r24, 0x16	; 22
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	90 93 07 01 	sts	0x0107, r25
    21d8:	80 93 06 01 	sts	0x0106, r24
						break;
    21dc:	cc c9       	rjmp	.-3176   	; 0x1576 <main+0x1a2>
							pause_bool = 0;
						}else
						{
							state = INITIAL_STATE;
						}*/
						state = INITIAL_STATE;
    21de:	10 92 07 01 	sts	0x0107, r1
    21e2:	10 92 06 01 	sts	0x0106, r1
						m_red(ON);
    21e6:	6e 9a       	sbi	0x0d, 6	; 13
    21e8:	76 98       	cbi	0x0e, 6	; 14
    21ea:	c5 c9       	rjmp	.-3190   	; 0x1576 <main+0x1a2>
						break;
					
					//Goal A
					case 0xA2:
						if (check(PINB,2))
    21ec:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();					
    21ee:	0e 94 62 09 	call	0x12c4	; 0x12c4 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    21f2:	a5 e1       	ldi	r26, 0x15	; 21
    21f4:	b0 e0       	ldi	r27, 0x00	; 0
    21f6:	b0 93 07 01 	sts	0x0107, r27
    21fa:	a0 93 06 01 	sts	0x0106, r26
						break;
    21fe:	bb c9       	rjmp	.-3210   	; 0x1576 <main+0x1a2>
						
					//Goal B
					case 0xA3:
						if (!check(PINB,2))
    2200:	83 b1       	in	r24, 0x03	; 3
							celebrate();
						stop_motor();
    2202:	0e 94 62 09 	call	0x12c4	; 0x12c4 <stop_motor>
						scoreA = buffer_rec[1];
						scoreB = buffer_rec[2];
						state = STOP_STATE;
    2206:	e5 e1       	ldi	r30, 0x15	; 21
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	f0 93 07 01 	sts	0x0107, r31
    220e:	e0 93 06 01 	sts	0x0106, r30
						break;
    2212:	b1 c9       	rjmp	.-3230   	; 0x1576 <main+0x1a2>
						
					//Pause
					case 0xA4:
						pause_bool = 1;
						state = STOP_STATE;
    2214:	25 e1       	ldi	r18, 0x15	; 21
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	30 93 07 01 	sts	0x0107, r19
    221c:	20 93 06 01 	sts	0x0106, r18
						break;
    2220:	aa c9       	rjmp	.-3244   	; 0x1576 <main+0x1a2>
						
					//Halftime
					case 0xA6:
						state = STOP_STATE;
    2222:	85 e1       	ldi	r24, 0x15	; 21
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	90 93 07 01 	sts	0x0107, r25
    222a:	80 93 06 01 	sts	0x0106, r24
						break;
    222e:	a3 c9       	rjmp	.-3258   	; 0x1576 <main+0x1a2>
						
					//Game over
					case 0xA7:
						if (check(PINB,2))
    2230:	83 b1       	in	r24, 0x03	; 3
						}else
						{
							if (scoreA < scoreB)
							celebrate();
						}
						stop_motor();
    2232:	0e 94 62 09 	call	0x12c4	; 0x12c4 <stop_motor>
						state = STOP_STATE;													
    2236:	a5 e1       	ldi	r26, 0x15	; 21
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	b0 93 07 01 	sts	0x0107, r27
    223e:	a0 93 06 01 	sts	0x0106, r26
						break;
    2242:	99 c9       	rjmp	.-3278   	; 0x1576 <main+0x1a2>
						break;						
				}
				break;
				
			case BLUE_LED_STATE:
				stop_motor();
    2244:	0e 94 62 09 	call	0x12c4	; 0x12c4 <stop_motor>
				turnOnBlueLED();
				state = STOP_STATE;
    2248:	e5 e1       	ldi	r30, 0x15	; 21
    224a:	f0 e0       	ldi	r31, 0x00	; 0
    224c:	f0 93 07 01 	sts	0x0107, r31
    2250:	e0 93 06 01 	sts	0x0106, r30
				break;
    2254:	90 c9       	rjmp	.-3296   	; 0x1576 <main+0x1a2>
				
			case STOP_STATE:
				m_green(ON);
    2256:	6a 9a       	sbi	0x0d, 2	; 13
    2258:	72 98       	cbi	0x0e, 2	; 14
				stop_motor();
    225a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <stop_motor>
				break;			  
    225e:	8b c9       	rjmp	.-3306   	; 0x1576 <main+0x1a2>
                
            default:
			    stop_motor();
    2260:	0e 94 62 09 	call	0x12c4	; 0x12c4 <stop_motor>
    2264:	88 c9       	rjmp	.-3312   	; 0x1576 <main+0x1a2>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    2266:	a5 96       	adiw	r28, 0x25	; 37
    2268:	7f ad       	ldd	r23, Y+63	; 0x3f
    226a:	a5 97       	sbiw	r28, 0x25	; 37
    226c:	a9 96       	adiw	r28, 0x29	; 41
    226e:	6f ad       	ldd	r22, Y+63	; 0x3f
    2270:	a9 97       	sbiw	r28, 0x29	; 41
    2272:	27 2f       	mov	r18, r23
    2274:	36 2f       	mov	r19, r22
    2276:	49 2d       	mov	r20, r9
    2278:	58 2d       	mov	r21, r8
    227a:	c7 01       	movw	r24, r14
    227c:	b6 01       	movw	r22, r12
    227e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__gesf2>
    2282:	88 23       	and	r24, r24
    2284:	0c f0       	brlt	.+2      	; 0x2288 <main+0xeb4>
    2286:	fc cb       	rjmp	.-2056   	; 0x1a80 <main+0x6ac>
    2288:	0e cc       	rjmp	.-2020   	; 0x1aa6 <main+0x6d2>
                            angle_dir_aux += 360;
                            add_360 = 1;
                        }
                        
                        
                        if (add_360 == 0 && (angle_dir_aux <= theta_robot && theta_robot <= dir_angle))
    228a:	27 96       	adiw	r28, 0x07	; 7
    228c:	2e ad       	ldd	r18, Y+62	; 0x3e
    228e:	3f ad       	ldd	r19, Y+63	; 0x3f
    2290:	27 97       	sbiw	r28, 0x07	; 7
    2292:	6c 96       	adiw	r28, 0x1c	; 28
    2294:	3f af       	std	Y+63, r19	; 0x3f
    2296:	2e af       	std	Y+62, r18	; 0x3e
    2298:	6c 97       	sbiw	r28, 0x1c	; 28
    229a:	b9 01       	movw	r22, r18
    229c:	88 27       	eor	r24, r24
    229e:	77 fd       	sbrc	r23, 7
    22a0:	80 95       	com	r24
    22a2:	98 2f       	mov	r25, r24
    22a4:	0e 94 29 16 	call	0x2c52	; 0x2c52 <__floatsisf>
    22a8:	6b 01       	movw	r12, r22
    22aa:	7c 01       	movw	r14, r24
    22ac:	9b 01       	movw	r18, r22
    22ae:	ac 01       	movw	r20, r24
    22b0:	64 96       	adiw	r28, 0x14	; 20
    22b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    22b4:	64 97       	sbiw	r28, 0x14	; 20
    22b6:	66 96       	adiw	r28, 0x16	; 22
    22b8:	ef ad       	ldd	r30, Y+63	; 0x3f
    22ba:	66 97       	sbiw	r28, 0x16	; 22
    22bc:	6b 2d       	mov	r22, r11
    22be:	7a 2d       	mov	r23, r10
    22c0:	8f 2f       	mov	r24, r31
    22c2:	9e 2f       	mov	r25, r30
    22c4:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <__cmpsf2>
    22c8:	18 16       	cp	r1, r24
    22ca:	0c f0       	brlt	.+2      	; 0x22ce <main+0xefa>
    22cc:	c4 cd       	rjmp	.-1144   	; 0x1e56 <main+0xa82>
    22ce:	ec cd       	rjmp	.-1064   	; 0x1ea8 <main+0xad4>

000022d0 <__vector_41>:
 m_red(ON);
 flag_timer = 1;
 }*/

ISR(TIMER4_OVF_vect)
{
    22d0:	1f 92       	push	r1
    22d2:	0f 92       	push	r0
    22d4:	0f b6       	in	r0, 0x3f	; 63
    22d6:	0f 92       	push	r0
    22d8:	11 24       	eor	r1, r1
    22da:	8f 93       	push	r24
    22dc:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	90 e0       	ldi	r25, 0x00	; 0
    22e2:	90 93 4d 01 	sts	0x014D, r25
    22e6:	80 93 4c 01 	sts	0x014C, r24
}
    22ea:	9f 91       	pop	r25
    22ec:	8f 91       	pop	r24
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti

000022f8 <__vector_3>:

ISR(INT2_vect)
{
    22f8:	1f 92       	push	r1
    22fa:	0f 92       	push	r0
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	0f 92       	push	r0
    2300:	11 24       	eor	r1, r1
    2302:	2f 93       	push	r18
    2304:	3f 93       	push	r19
    2306:	4f 93       	push	r20
    2308:	5f 93       	push	r21
    230a:	6f 93       	push	r22
    230c:	7f 93       	push	r23
    230e:	8f 93       	push	r24
    2310:	9f 93       	push	r25
    2312:	af 93       	push	r26
    2314:	bf 93       	push	r27
    2316:	ef 93       	push	r30
    2318:	ff 93       	push	r31
	//Read
	m_rf_read(buffer_rec,PACKET_LENGTH_SYSTEM);
    231a:	6a e0       	ldi	r22, 0x0A	; 10
    231c:	82 e4       	ldi	r24, 0x42	; 66
    231e:	91 e0       	ldi	r25, 0x01	; 1
    2320:	0e 94 18 12 	call	0x2430	; 0x2430 <m_rf_read>
	past_state = state;
    2324:	80 91 06 01 	lds	r24, 0x0106
    2328:	90 91 07 01 	lds	r25, 0x0107
    232c:	90 93 05 01 	sts	0x0105, r25
    2330:	80 93 04 01 	sts	0x0104, r24
	state = SYSTEM_STATE;
    2334:	83 e6       	ldi	r24, 0x63	; 99
    2336:	90 e0       	ldi	r25, 0x00	; 0
    2338:	90 93 07 01 	sts	0x0107, r25
    233c:	80 93 06 01 	sts	0x0106, r24
	//m_green(ON); // Indicator receiving from RF
}
    2340:	ff 91       	pop	r31
    2342:	ef 91       	pop	r30
    2344:	bf 91       	pop	r27
    2346:	af 91       	pop	r26
    2348:	9f 91       	pop	r25
    234a:	8f 91       	pop	r24
    234c:	7f 91       	pop	r23
    234e:	6f 91       	pop	r22
    2350:	5f 91       	pop	r21
    2352:	4f 91       	pop	r20
    2354:	3f 91       	pop	r19
    2356:	2f 91       	pop	r18
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f 90       	pop	r0
    235e:	1f 90       	pop	r1
    2360:	18 95       	reti

00002362 <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    2362:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    2364:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    2366:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    2368:	8c e0       	ldi	r24, 0x0C	; 12
    236a:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    236e:	e9 e6       	ldi	r30, 0x69	; 105
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	80 81       	ld	r24, Z
    2374:	80 62       	ori	r24, 0x20	; 32
    2376:	80 83       	st	Z, r24
    2378:	80 81       	ld	r24, Z
    237a:	8f 7e       	andi	r24, 0xEF	; 239
    237c:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    237e:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    2380:	78 94       	sei
    2382:	08 95       	ret

00002384 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    2384:	1f 93       	push	r17
    2386:	cf 93       	push	r28
    2388:	df 93       	push	r29
    238a:	18 2f       	mov	r17, r24
    238c:	d6 2f       	mov	r29, r22
    238e:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    2390:	0e 94 b1 11 	call	0x2362	; 0x2362 <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2394:	94 ea       	ldi	r25, 0xA4	; 164
    2396:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    239a:	ec eb       	ldi	r30, 0xBC	; 188
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	90 81       	ld	r25, Z
    23a0:	99 23       	and	r25, r25
    23a2:	ec f7       	brge	.-6      	; 0x239e <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    23a4:	90 e5       	ldi	r25, 0x50	; 80
    23a6:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    23aa:	94 e8       	ldi	r25, 0x84	; 132
    23ac:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    23b0:	ec eb       	ldi	r30, 0xBC	; 188
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	90 81       	ld	r25, Z
    23b6:	99 23       	and	r25, r25
    23b8:	ec f7       	brge	.-6      	; 0x23b4 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    23ba:	90 91 b9 00 	lds	r25, 0x00B9
    23be:	98 7f       	andi	r25, 0xF8	; 248
    23c0:	90 32       	cpi	r25, 0x20	; 32
    23c2:	29 f4       	brne	.+10     	; 0x23ce <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    23c4:	84 e9       	ldi	r24, 0x94	; 148
    23c6:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	2d c0       	rjmp	.+90     	; 0x2428 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    23d4:	84 e8       	ldi	r24, 0x84	; 132
    23d6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    23da:	ec eb       	ldi	r30, 0xBC	; 188
    23dc:	f0 e0       	ldi	r31, 0x00	; 0
    23de:	90 81       	ld	r25, Z
    23e0:	99 23       	and	r25, r25
    23e2:	ec f7       	brge	.-6      	; 0x23de <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    23e4:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    23e8:	84 e8       	ldi	r24, 0x84	; 132
    23ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    23ee:	ec eb       	ldi	r30, 0xBC	; 188
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	80 81       	ld	r24, Z
    23f4:	88 23       	and	r24, r24
    23f6:	ec f7       	brge	.-6      	; 0x23f2 <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    23f8:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    23fc:	84 e8       	ldi	r24, 0x84	; 132
    23fe:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2402:	ec eb       	ldi	r30, 0xBC	; 188
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	88 23       	and	r24, r24
    240a:	ec f7       	brge	.-6      	; 0x2406 <m_rf_open+0x82>
	
	TWDR = packet_length;
    240c:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    2410:	84 e8       	ldi	r24, 0x84	; 132
    2412:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2416:	ec eb       	ldi	r30, 0xBC	; 188
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	88 23       	and	r24, r24
    241e:	ec f7       	brge	.-6      	; 0x241a <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2420:	84 e9       	ldi	r24, 0x94	; 148
    2422:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    2426:	81 e0       	ldi	r24, 0x01	; 1
}
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	1f 91       	pop	r17
    242e:	08 95       	ret

00002430 <m_rf_read>:

char m_rf_read(char* buffer, char packet_length)
{
    2430:	cf 93       	push	r28
    2432:	df 93       	push	r29

	char bytes;
	int i;

	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    2434:	24 ea       	ldi	r18, 0xA4	; 164
    2436:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){};
    243a:	ec eb       	ldi	r30, 0xBC	; 188
    243c:	f0 e0       	ldi	r31, 0x00	; 0
    243e:	20 81       	ld	r18, Z
    2440:	22 23       	and	r18, r18
    2442:	ec f7       	brge	.-6      	; 0x243e <m_rf_read+0xe>
	
	// ADDRESS (in Master-Receiver Mode)
	TWDR = ((MRFTWIADDR<<1)|1);
    2444:	21 e5       	ldi	r18, 0x51	; 81
    2446:	20 93 bb 00 	sts	0x00BB, r18
	TWCR = (1<<TWINT) | (1<<TWEN);
    244a:	24 e8       	ldi	r18, 0x84	; 132
    244c:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait until finished sending address
    2450:	ec eb       	ldi	r30, 0xBC	; 188
    2452:	f0 e0       	ldi	r31, 0x00	; 0
    2454:	20 81       	ld	r18, Z
    2456:	22 23       	and	r18, r18
    2458:	ec f7       	brge	.-6      	; 0x2454 <m_rf_read+0x24>
	if((TWSR & 0xF8)== 0x48){ // ACK was not received
    245a:	20 91 b9 00 	lds	r18, 0x00B9
    245e:	28 7f       	andi	r18, 0xF8	; 248
    2460:	28 34       	cpi	r18, 0x48	; 72
    2462:	29 f4       	brne	.+10     	; 0x246e <m_rf_read+0x3e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2464:	84 e9       	ldi	r24, 0x94	; 148
    2466:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // not connected/listening
    246a:	80 e0       	ldi	r24, 0x00	; 0
    246c:	3f c0       	rjmp	.+126    	; 0x24ec <m_rf_read+0xbc>
	}
	

	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    246e:	24 ec       	ldi	r18, 0xC4	; 196
    2470:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    2474:	ec eb       	ldi	r30, 0xBC	; 188
    2476:	f0 e0       	ldi	r31, 0x00	; 0
    2478:	20 81       	ld	r18, Z
    247a:	22 23       	and	r18, r18
    247c:	ec f7       	brge	.-6      	; 0x2478 <m_rf_read+0x48>
	bytes = TWDR;
    247e:	40 91 bb 00 	lds	r20, 0x00BB
	if(bytes != packet_length){
    2482:	46 13       	cpse	r20, r22
    2484:	09 c0       	rjmp	.+18     	; 0x2498 <m_rf_read+0x68>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	41 50       	subi	r20, 0x01	; 1
    248a:	51 09       	sbc	r21, r1
    248c:	14 16       	cp	r1, r20
    248e:	15 06       	cpc	r1, r21
    2490:	44 f0       	brlt	.+16     	; 0x24a2 <m_rf_read+0x72>
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	18 c0       	rjmp	.+48     	; 0x24c8 <m_rf_read+0x98>
	// (BYTES)
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	bytes = TWDR;
	if(bytes != packet_length){
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2498:	84 e9       	ldi	r24, 0x94	; 148
    249a:	80 93 bc 00 	sts	0x00BC, r24
		return 0; // indicate length mismatch
    249e:	80 e0       	ldi	r24, 0x00	; 0
    24a0:	25 c0       	rjmp	.+74     	; 0x24ec <m_rf_read+0xbc>
    24a2:	dc 01       	movw	r26, r24
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    24a4:	20 e0       	ldi	r18, 0x00	; 0
    24a6:	30 e0       	ldi	r19, 0x00	; 0
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    24a8:	ec eb       	ldi	r30, 0xBC	; 188
    24aa:	f0 e0       	ldi	r31, 0x00	; 0
    24ac:	74 ec       	ldi	r23, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
    24ae:	cb eb       	ldi	r28, 0xBB	; 187
    24b0:	d0 e0       	ldi	r29, 0x00	; 0
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    24b2:	70 83       	st	Z, r23
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    24b4:	60 81       	ld	r22, Z
    24b6:	66 23       	and	r22, r22
    24b8:	ec f7       	brge	.-6      	; 0x24b4 <m_rf_read+0x84>
		buffer[i] = TWDR;
    24ba:	68 81       	ld	r22, Y
    24bc:	6d 93       	st	X+, r22
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0; // indicate length mismatch
	}		
	
	// (DATA_0 ... DATA_N)
	for(i=0;i<(bytes-1);i++)
    24be:	2f 5f       	subi	r18, 0xFF	; 255
    24c0:	3f 4f       	sbci	r19, 0xFF	; 255
    24c2:	24 17       	cp	r18, r20
    24c4:	35 07       	cpc	r19, r21
    24c6:	ac f3       	brlt	.-22     	; 0x24b2 <m_rf_read+0x82>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		buffer[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    24c8:	24 e8       	ldi	r18, 0x84	; 132
    24ca:	20 93 bc 00 	sts	0x00BC, r18
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    24ce:	ec eb       	ldi	r30, 0xBC	; 188
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	20 81       	ld	r18, Z
    24d4:	22 23       	and	r18, r18
    24d6:	ec f7       	brge	.-6      	; 0x24d2 <m_rf_read+0xa2>
	buffer[i++] = TWDR;
    24d8:	20 91 bb 00 	lds	r18, 0x00BB
    24dc:	fc 01       	movw	r30, r24
    24de:	e4 0f       	add	r30, r20
    24e0:	f5 1f       	adc	r31, r21
    24e2:	20 83       	st	Z, r18
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    24e4:	84 e9       	ldi	r24, 0x94	; 148
    24e6:	80 93 bc 00 	sts	0x00BC, r24

	return 1;
    24ea:	81 e0       	ldi	r24, 0x01	; 1
}
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <m_rf_send>:

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    24f2:	cf 93       	push	r28
    24f4:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    24f6:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    24f8:	94 ea       	ldi	r25, 0xA4	; 164
    24fa:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    24fe:	ec eb       	ldi	r30, 0xBC	; 188
    2500:	f0 e0       	ldi	r31, 0x00	; 0
    2502:	90 81       	ld	r25, Z
    2504:	99 23       	and	r25, r25
    2506:	ec f7       	brge	.-6      	; 0x2502 <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    2508:	90 e5       	ldi	r25, 0x50	; 80
    250a:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    250e:	94 e8       	ldi	r25, 0x84	; 132
    2510:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2514:	ec eb       	ldi	r30, 0xBC	; 188
    2516:	f0 e0       	ldi	r31, 0x00	; 0
    2518:	90 81       	ld	r25, Z
    251a:	99 23       	and	r25, r25
    251c:	ec f7       	brge	.-6      	; 0x2518 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    251e:	90 91 b9 00 	lds	r25, 0x00B9
    2522:	98 7f       	andi	r25, 0xF8	; 248
    2524:	90 32       	cpi	r25, 0x20	; 32
    2526:	31 f4       	brne	.+12     	; 0x2534 <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2528:	84 e9       	ldi	r24, 0x94	; 148
    252a:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    252e:	78 94       	sei
		return 0;
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	32 c0       	rjmp	.+100    	; 0x2598 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    2534:	93 e0       	ldi	r25, 0x03	; 3
    2536:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    253a:	94 e8       	ldi	r25, 0x84	; 132
    253c:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    2540:	ec eb       	ldi	r30, 0xBC	; 188
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	90 81       	ld	r25, Z
    2546:	99 23       	and	r25, r25
    2548:	ec f7       	brge	.-6      	; 0x2544 <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    254a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    254e:	84 e8       	ldi	r24, 0x84	; 132
    2550:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    2554:	ec eb       	ldi	r30, 0xBC	; 188
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	88 23       	and	r24, r24
    255c:	ec f7       	brge	.-6      	; 0x2558 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    255e:	24 2f       	mov	r18, r20
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	12 16       	cp	r1, r18
    2564:	13 06       	cpc	r1, r19
    2566:	9c f4       	brge	.+38     	; 0x258e <m_rf_send+0x9c>
    2568:	a6 2f       	mov	r26, r22
    256a:	b7 2f       	mov	r27, r23
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    2570:	cb eb       	ldi	r28, 0xBB	; 187
    2572:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    2574:	ec eb       	ldi	r30, 0xBC	; 188
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    257a:	4d 91       	ld	r20, X+
    257c:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    257e:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    2580:	40 81       	ld	r20, Z
    2582:	44 23       	and	r20, r20
    2584:	ec f7       	brge	.-6      	; 0x2580 <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    2586:	01 96       	adiw	r24, 0x01	; 1
    2588:	82 17       	cp	r24, r18
    258a:	93 07       	cpc	r25, r19
    258c:	b4 f3       	brlt	.-20     	; 0x257a <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    258e:	84 e9       	ldi	r24, 0x94	; 148
    2590:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    2594:	78 94       	sei
	
	return 1;
    2596:	81 e0       	ldi	r24, 0x01	; 1
}
    2598:	df 91       	pop	r29
    259a:	cf 91       	pop	r28
    259c:	08 95       	ret

0000259e <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    25a2:	ec eb       	ldi	r30, 0xBC	; 188
    25a4:	f0 e0       	ldi	r31, 0x00	; 0
    25a6:	80 81       	ld	r24, Z
    25a8:	88 23       	and	r24, r24
    25aa:	34 f0       	brlt	.+12     	; 0x25b8 <twi_wait+0x1a>
    25ac:	2f 5f       	subi	r18, 0xFF	; 255
    25ae:	3f 4f       	sbci	r19, 0xFF	; 255
    25b0:	29 3e       	cpi	r18, 0xE9	; 233
    25b2:	83 e0       	ldi	r24, 0x03	; 3
    25b4:	38 07       	cpc	r19, r24
    25b6:	b9 f7       	brne	.-18     	; 0x25a6 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	28 3e       	cpi	r18, 0xE8	; 232
    25bc:	33 40       	sbci	r19, 0x03	; 3
    25be:	09 f4       	brne	.+2      	; 0x25c2 <twi_wait+0x24>
    25c0:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    25c2:	08 95       	ret

000025c4 <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    25c4:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    25c8:	84 e8       	ldi	r24, 0x84	; 132
    25ca:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    25ce:	0e 94 cf 12 	call	0x259e	; 0x259e <twi_wait>
    25d2:	88 23       	and	r24, r24
    25d4:	21 f0       	breq	.+8      	; 0x25de <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    25d6:	80 91 b9 00 	lds	r24, 0x00B9
    25da:	88 7f       	andi	r24, 0xF8	; 248
    25dc:	08 95       	ret
	} else {
		return 0;					// comm failure
    25de:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    25e0:	08 95       	ret

000025e2 <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    25e2:	cf 93       	push	r28
    25e4:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    25e6:	94 ea       	ldi	r25, 0xA4	; 164
    25e8:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    25ec:	0e 94 cf 12 	call	0x259e	; 0x259e <twi_wait>
    25f0:	88 23       	and	r24, r24
    25f2:	61 f0       	breq	.+24     	; 0x260c <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    25f4:	8c 2f       	mov	r24, r28
    25f6:	88 0f       	add	r24, r24
    25f8:	8f 5f       	subi	r24, 0xFF	; 255
    25fa:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    25fe:	88 34       	cpi	r24, 0x48	; 72
    2600:	39 f4       	brne	.+14     	; 0x2610 <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2602:	84 e9       	ldi	r24, 0x94	; 148
    2604:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	03 c0       	rjmp	.+6      	; 0x2612 <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	01 c0       	rjmp	.+2      	; 0x2612 <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2610:	81 e0       	ldi	r24, 0x01	; 1
}	
    2612:	cf 91       	pop	r28
    2614:	08 95       	ret

00002616 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    2616:	cf 93       	push	r28
    2618:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    261a:	94 ea       	ldi	r25, 0xA4	; 164
    261c:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    2620:	0e 94 cf 12 	call	0x259e	; 0x259e <twi_wait>
    2624:	88 23       	and	r24, r24
    2626:	59 f0       	breq	.+22     	; 0x263e <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    2628:	8c 2f       	mov	r24, r28
    262a:	88 0f       	add	r24, r24
    262c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    2630:	80 32       	cpi	r24, 0x20	; 32
    2632:	39 f4       	brne	.+14     	; 0x2642 <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    2634:	84 e9       	ldi	r24, 0x94	; 148
    2636:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	03 c0       	rjmp	.+6      	; 0x2644 <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	01 c0       	rjmp	.+2      	; 0x2644 <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    2642:	81 e0       	ldi	r24, 0x01	; 1
}	
    2644:	cf 91       	pop	r28
    2646:	08 95       	ret

00002648 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    2648:	84 e9       	ldi	r24, 0x94	; 148
    264a:	80 93 bc 00 	sts	0x00BC, r24
    264e:	08 95       	ret

00002650 <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    2650:	ef 92       	push	r14
    2652:	ff 92       	push	r15
    2654:	0f 93       	push	r16
    2656:	1f 93       	push	r17
    2658:	cf 93       	push	r28
    265a:	df 93       	push	r29
    265c:	cd b7       	in	r28, 0x3d	; 61
    265e:	de b7       	in	r29, 0x3e	; 62
    2660:	60 97       	sbiw	r28, 0x10	; 16
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	e8 2e       	mov	r14, r24
    266e:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    2670:	fe 01       	movw	r30, r28
    2672:	31 96       	adiw	r30, 0x01	; 1
    2674:	80 e1       	ldi	r24, 0x10	; 16
    2676:	df 01       	movw	r26, r30
    2678:	1d 92       	st	X+, r1
    267a:	8a 95       	dec	r24
    267c:	e9 f7       	brne	.-6      	; 0x2678 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    267e:	88 e5       	ldi	r24, 0x58	; 88
    2680:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    2684:	88 23       	and	r24, r24
    2686:	09 f4       	brne	.+2      	; 0x268a <m_wii_read+0x3a>
    2688:	66 c0       	rjmp	.+204    	; 0x2756 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    268a:	86 e3       	ldi	r24, 0x36	; 54
    268c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2690:	88 23       	and	r24, r24
    2692:	09 f4       	brne	.+2      	; 0x2696 <m_wii_read+0x46>
    2694:	62 c0       	rjmp	.+196    	; 0x275a <m_wii_read+0x10a>
	end();
    2696:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    269a:	b8 e0       	ldi	r27, 0x08	; 8
    269c:	ba 95       	dec	r27
    269e:	f1 f7       	brne	.-4      	; 0x269c <m_wii_read+0x4c>
    26a0:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    26a2:	88 e5       	ldi	r24, 0x58	; 88
    26a4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <start_read>
    26a8:	88 23       	and	r24, r24
    26aa:	09 f4       	brne	.+2      	; 0x26ae <m_wii_read+0x5e>
    26ac:	58 c0       	rjmp	.+176    	; 0x275e <m_wii_read+0x10e>
    26ae:	ae 01       	movw	r20, r28
    26b0:	4f 5f       	subi	r20, 0xFF	; 255
    26b2:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    26b4:	8e 01       	movw	r16, r28
    26b6:	00 5f       	subi	r16, 0xF0	; 240
    26b8:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26ba:	ec eb       	ldi	r30, 0xBC	; 188
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    26c0:	2b eb       	ldi	r18, 0xBB	; 187
    26c2:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    26c4:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26c6:	80 81       	ld	r24, Z
    26c8:	88 23       	and	r24, r24
    26ca:	ec f7       	brge	.-6      	; 0x26c6 <m_wii_read+0x76>
		temp[i] = TWDR;
    26cc:	d9 01       	movw	r26, r18
    26ce:	8c 91       	ld	r24, X
    26d0:	da 01       	movw	r26, r20
    26d2:	8d 93       	st	X+, r24
    26d4:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    26d6:	a0 17       	cp	r26, r16
    26d8:	b1 07       	cpc	r27, r17
    26da:	a1 f7       	brne	.-24     	; 0x26c4 <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    26dc:	84 e8       	ldi	r24, 0x84	; 132
    26de:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    26e2:	ec eb       	ldi	r30, 0xBC	; 188
    26e4:	f0 e0       	ldi	r31, 0x00	; 0
    26e6:	80 81       	ld	r24, Z
    26e8:	88 23       	and	r24, r24
    26ea:	ec f7       	brge	.-6      	; 0x26e6 <m_wii_read+0x96>
	temp[15] = TWDR;
    26ec:	80 91 bb 00 	lds	r24, 0x00BB
    26f0:	88 8b       	std	Y+16, r24	; 0x10
	end();
    26f2:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
    26f6:	de 01       	movw	r26, r28
    26f8:	14 96       	adiw	r26, 0x04	; 4
    26fa:	6e 2d       	mov	r22, r14
    26fc:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    26fe:	4c 91       	ld	r20, X
    2700:	24 2f       	mov	r18, r20
    2702:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    2704:	cd 01       	movw	r24, r26
    2706:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    2708:	fc 01       	movw	r30, r24
    270a:	80 81       	ld	r24, Z
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	f0 e1       	ldi	r31, 0x10	; 16
    2710:	2f 9f       	mul	r18, r31
    2712:	80 0d       	add	r24, r0
    2714:	91 1d       	adc	r25, r1
    2716:	11 24       	eor	r1, r1
    2718:	fb 01       	movw	r30, r22
    271a:	91 83       	std	Z+1, r25	; 0x01
    271c:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    271e:	84 2f       	mov	r24, r20
    2720:	80 7c       	andi	r24, 0xC0	; 192
    2722:	90 e0       	ldi	r25, 0x00	; 0
    2724:	88 0f       	add	r24, r24
    2726:	99 1f       	adc	r25, r25
    2728:	88 0f       	add	r24, r24
    272a:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    272c:	9d 01       	movw	r18, r26
    272e:	21 50       	subi	r18, 0x01	; 1
    2730:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    2732:	f9 01       	movw	r30, r18
    2734:	20 81       	ld	r18, Z
    2736:	82 0f       	add	r24, r18
    2738:	91 1d       	adc	r25, r1
    273a:	fb 01       	movw	r30, r22
    273c:	93 83       	std	Z+3, r25	; 0x03
    273e:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    2740:	4f 70       	andi	r20, 0x0F	; 15
    2742:	44 83       	std	Z+4, r20	; 0x04
    2744:	15 82       	std	Z+5, r1	; 0x05
    2746:	13 96       	adiw	r26, 0x03	; 3
    2748:	6a 5f       	subi	r22, 0xFA	; 250
    274a:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    274c:	0a 17       	cp	r16, r26
    274e:	1b 07       	cpc	r17, r27
    2750:	b1 f6       	brne	.-84     	; 0x26fe <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    2752:	81 e0       	ldi	r24, 0x01	; 1
    2754:	05 c0       	rjmp	.+10     	; 0x2760 <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	03 c0       	rjmp	.+6      	; 0x2760 <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    275a:	80 e0       	ldi	r24, 0x00	; 0
    275c:	01 c0       	rjmp	.+2      	; 0x2760 <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    275e:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    2760:	60 96       	adiw	r28, 0x10	; 16
    2762:	0f b6       	in	r0, 0x3f	; 63
    2764:	f8 94       	cli
    2766:	de bf       	out	0x3e, r29	; 62
    2768:	0f be       	out	0x3f, r0	; 63
    276a:	cd bf       	out	0x3d, r28	; 61
    276c:	df 91       	pop	r29
    276e:	cf 91       	pop	r28
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	08 95       	ret

0000277a <m_wii_open>:
unsigned char twi_wait(void);
void end(void);

char m_wii_open()
{	
	m_bus_init();
    277a:	0e 94 b1 11 	call	0x2362	; 0x2362 <m_bus_init>

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    277e:	88 e5       	ldi	r24, 0x58	; 88
    2780:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    2784:	88 23       	and	r24, r24
    2786:	09 f4       	brne	.+2      	; 0x278a <m_wii_open+0x10>
    2788:	c7 c0       	rjmp	.+398    	; 0x2918 <m_wii_open+0x19e>
	if(!send_byte(0x30)){return 0;}
    278a:	80 e3       	ldi	r24, 0x30	; 48
    278c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2790:	88 23       	and	r24, r24
    2792:	09 f4       	brne	.+2      	; 0x2796 <m_wii_open+0x1c>
    2794:	c3 c0       	rjmp	.+390    	; 0x291c <m_wii_open+0x1a2>
	if(!send_byte(0x01)){return 0;}
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    279c:	88 23       	and	r24, r24
    279e:	09 f4       	brne	.+2      	; 0x27a2 <m_wii_open+0x28>
    27a0:	bf c0       	rjmp	.+382    	; 0x2920 <m_wii_open+0x1a6>
	end();
    27a2:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    27a6:	83 ec       	ldi	r24, 0xC3	; 195
    27a8:	99 e0       	ldi	r25, 0x09	; 9
    27aa:	01 97       	sbiw	r24, 0x01	; 1
    27ac:	f1 f7       	brne	.-4      	; 0x27aa <m_wii_open+0x30>
    27ae:	00 c0       	rjmp	.+0      	; 0x27b0 <m_wii_open+0x36>
    27b0:	00 00       	nop
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    27b2:	88 e5       	ldi	r24, 0x58	; 88
    27b4:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    27b8:	88 23       	and	r24, r24
    27ba:	09 f4       	brne	.+2      	; 0x27be <m_wii_open+0x44>
    27bc:	b3 c0       	rjmp	.+358    	; 0x2924 <m_wii_open+0x1aa>
	if(!send_byte(0x00)){return 0;}
    27be:	80 e0       	ldi	r24, 0x00	; 0
    27c0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    27c4:	88 23       	and	r24, r24
    27c6:	09 f4       	brne	.+2      	; 0x27ca <m_wii_open+0x50>
    27c8:	af c0       	rjmp	.+350    	; 0x2928 <m_wii_open+0x1ae>
	if(!send_byte(0x00)){return 0;}
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    27d0:	88 23       	and	r24, r24
    27d2:	09 f4       	brne	.+2      	; 0x27d6 <m_wii_open+0x5c>
    27d4:	ab c0       	rjmp	.+342    	; 0x292c <m_wii_open+0x1b2>
	if(!send_byte(0x00)){return 0;}
    27d6:	80 e0       	ldi	r24, 0x00	; 0
    27d8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    27dc:	88 23       	and	r24, r24
    27de:	09 f4       	brne	.+2      	; 0x27e2 <m_wii_open+0x68>
    27e0:	a7 c0       	rjmp	.+334    	; 0x2930 <m_wii_open+0x1b6>
	if(!send_byte(0x00)){return 0;}
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    27e8:	88 23       	and	r24, r24
    27ea:	09 f4       	brne	.+2      	; 0x27ee <m_wii_open+0x74>
    27ec:	a3 c0       	rjmp	.+326    	; 0x2934 <m_wii_open+0x1ba>
	if(!send_byte(0x00)){return 0;}
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    27f4:	88 23       	and	r24, r24
    27f6:	09 f4       	brne	.+2      	; 0x27fa <m_wii_open+0x80>
    27f8:	9f c0       	rjmp	.+318    	; 0x2938 <m_wii_open+0x1be>
	if(!send_byte(0x00)){return 0;}
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2800:	88 23       	and	r24, r24
    2802:	09 f4       	brne	.+2      	; 0x2806 <m_wii_open+0x8c>
    2804:	9b c0       	rjmp	.+310    	; 0x293c <m_wii_open+0x1c2>
	if(!send_byte(0x00)){return 0;}
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    280c:	88 23       	and	r24, r24
    280e:	09 f4       	brne	.+2      	; 0x2812 <m_wii_open+0x98>
    2810:	97 c0       	rjmp	.+302    	; 0x2940 <m_wii_open+0x1c6>
	if(!send_byte(0x90)){return 0;} // p0
    2812:	80 e9       	ldi	r24, 0x90	; 144
    2814:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2818:	88 23       	and	r24, r24
    281a:	09 f4       	brne	.+2      	; 0x281e <m_wii_open+0xa4>
    281c:	93 c0       	rjmp	.+294    	; 0x2944 <m_wii_open+0x1ca>
	end();
    281e:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
    2822:	83 ec       	ldi	r24, 0xC3	; 195
    2824:	99 e0       	ldi	r25, 0x09	; 9
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	f1 f7       	brne	.-4      	; 0x2826 <m_wii_open+0xac>
    282a:	00 c0       	rjmp	.+0      	; 0x282c <m_wii_open+0xb2>
    282c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    282e:	88 e5       	ldi	r24, 0x58	; 88
    2830:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <m_wii_open+0xc0>
    2838:	87 c0       	rjmp	.+270    	; 0x2948 <m_wii_open+0x1ce>
	if(!send_byte(0x07)){return 0;}
    283a:	87 e0       	ldi	r24, 0x07	; 7
    283c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2840:	88 23       	and	r24, r24
    2842:	09 f4       	brne	.+2      	; 0x2846 <m_wii_open+0xcc>
    2844:	83 c0       	rjmp	.+262    	; 0x294c <m_wii_open+0x1d2>
	if(!send_byte(0x00)){return 0;}
    2846:	80 e0       	ldi	r24, 0x00	; 0
    2848:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    284c:	88 23       	and	r24, r24
    284e:	09 f4       	brne	.+2      	; 0x2852 <m_wii_open+0xd8>
    2850:	7f c0       	rjmp	.+254    	; 0x2950 <m_wii_open+0x1d6>
	if(!send_byte(0x41)){return 0;} // p1
    2852:	81 e4       	ldi	r24, 0x41	; 65
    2854:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2858:	88 23       	and	r24, r24
    285a:	09 f4       	brne	.+2      	; 0x285e <m_wii_open+0xe4>
    285c:	7b c0       	rjmp	.+246    	; 0x2954 <m_wii_open+0x1da>
	end();
    285e:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
    2862:	83 ec       	ldi	r24, 0xC3	; 195
    2864:	99 e0       	ldi	r25, 0x09	; 9
    2866:	01 97       	sbiw	r24, 0x01	; 1
    2868:	f1 f7       	brne	.-4      	; 0x2866 <m_wii_open+0xec>
    286a:	00 c0       	rjmp	.+0      	; 0x286c <m_wii_open+0xf2>
    286c:	00 00       	nop

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    286e:	88 e5       	ldi	r24, 0x58	; 88
    2870:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    2874:	88 23       	and	r24, r24
    2876:	09 f4       	brne	.+2      	; 0x287a <m_wii_open+0x100>
    2878:	6f c0       	rjmp	.+222    	; 0x2958 <m_wii_open+0x1de>
	if(!send_byte(0x1A)){return 0;}
    287a:	8a e1       	ldi	r24, 0x1A	; 26
    287c:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2880:	88 23       	and	r24, r24
    2882:	09 f4       	brne	.+2      	; 0x2886 <m_wii_open+0x10c>
    2884:	6b c0       	rjmp	.+214    	; 0x295c <m_wii_open+0x1e2>
	if(!send_byte(0x40)){return 0;} // p2
    2886:	80 e4       	ldi	r24, 0x40	; 64
    2888:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    288c:	88 23       	and	r24, r24
    288e:	09 f4       	brne	.+2      	; 0x2892 <m_wii_open+0x118>
    2890:	67 c0       	rjmp	.+206    	; 0x2960 <m_wii_open+0x1e6>
	if(!send_byte(0x00)){return 0;} // p3
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2898:	88 23       	and	r24, r24
    289a:	09 f4       	brne	.+2      	; 0x289e <m_wii_open+0x124>
    289c:	63 c0       	rjmp	.+198    	; 0x2964 <m_wii_open+0x1ea>
	end();
    289e:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
    28a2:	83 ec       	ldi	r24, 0xC3	; 195
    28a4:	99 e0       	ldi	r25, 0x09	; 9
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <m_wii_open+0x12c>
    28aa:	00 c0       	rjmp	.+0      	; 0x28ac <m_wii_open+0x132>
    28ac:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28ae:	88 e5       	ldi	r24, 0x58	; 88
    28b0:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    28b4:	88 23       	and	r24, r24
    28b6:	09 f4       	brne	.+2      	; 0x28ba <m_wii_open+0x140>
    28b8:	57 c0       	rjmp	.+174    	; 0x2968 <m_wii_open+0x1ee>
	if(!send_byte(0x33)){return 0;}
    28ba:	83 e3       	ldi	r24, 0x33	; 51
    28bc:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    28c0:	88 23       	and	r24, r24
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <m_wii_open+0x14c>
    28c4:	53 c0       	rjmp	.+166    	; 0x296c <m_wii_open+0x1f2>
	if(!send_byte(0x03)){return 0;}
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    28cc:	88 23       	and	r24, r24
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <m_wii_open+0x158>
    28d0:	4f c0       	rjmp	.+158    	; 0x2970 <m_wii_open+0x1f6>
	end();
    28d2:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
    28d6:	83 ec       	ldi	r24, 0xC3	; 195
    28d8:	99 e0       	ldi	r25, 0x09	; 9
    28da:	01 97       	sbiw	r24, 0x01	; 1
    28dc:	f1 f7       	brne	.-4      	; 0x28da <m_wii_open+0x160>
    28de:	00 c0       	rjmp	.+0      	; 0x28e0 <m_wii_open+0x166>
    28e0:	00 00       	nop

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    28e2:	88 e5       	ldi	r24, 0x58	; 88
    28e4:	0e 94 0b 13 	call	0x2616	; 0x2616 <start_write>
    28e8:	88 23       	and	r24, r24
    28ea:	09 f4       	brne	.+2      	; 0x28ee <m_wii_open+0x174>
    28ec:	43 c0       	rjmp	.+134    	; 0x2974 <m_wii_open+0x1fa>
	if(!send_byte(0x30)){return 0;}
    28ee:	80 e3       	ldi	r24, 0x30	; 48
    28f0:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    28f4:	88 23       	and	r24, r24
    28f6:	09 f4       	brne	.+2      	; 0x28fa <m_wii_open+0x180>
    28f8:	3f c0       	rjmp	.+126    	; 0x2978 <m_wii_open+0x1fe>
	if(!send_byte(0x08)){return 0;}
    28fa:	88 e0       	ldi	r24, 0x08	; 8
    28fc:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <send_byte>
    2900:	88 23       	and	r24, r24
    2902:	e1 f1       	breq	.+120    	; 0x297c <m_wii_open+0x202>
	end();
    2904:	0e 94 24 13 	call	0x2648	; 0x2648 <end>
    2908:	83 ec       	ldi	r24, 0xC3	; 195
    290a:	99 e0       	ldi	r25, 0x09	; 9
    290c:	01 97       	sbiw	r24, 0x01	; 1
    290e:	f1 f7       	brne	.-4      	; 0x290c <m_wii_open+0x192>
    2910:	00 c0       	rjmp	.+0      	; 0x2912 <m_wii_open+0x198>
    2912:	00 00       	nop
	
	m_wait(INTERPACKET);

	return 1;
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	08 95       	ret
char m_wii_open()
{	
	m_bus_init();

	// enter configuration mode
	if(!start_write(MWIITWIADDR)){return 0;}
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	08 95       	ret
	if(!send_byte(0x01)){return 0;}
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	08 95       	ret
	end();
	m_wait(INTERPACKET);
		
	// sensitivity setting, part 1
	if(!start_write(MWIITWIADDR)){return 0;}
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2928:	80 e0       	ldi	r24, 0x00	; 0
    292a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2930:	80 e0       	ldi	r24, 0x00	; 0
    2932:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2934:	80 e0       	ldi	r24, 0x00	; 0
    2936:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2940:	80 e0       	ldi	r24, 0x00	; 0
    2942:	08 95       	ret
	if(!send_byte(0x90)){return 0;} // p0
    2944:	80 e0       	ldi	r24, 0x00	; 0
    2946:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 2
	if(!start_write(MWIITWIADDR)){return 0;}
    2948:	80 e0       	ldi	r24, 0x00	; 0
    294a:	08 95       	ret
	if(!send_byte(0x07)){return 0;}
    294c:	80 e0       	ldi	r24, 0x00	; 0
    294e:	08 95       	ret
	if(!send_byte(0x00)){return 0;}
    2950:	80 e0       	ldi	r24, 0x00	; 0
    2952:	08 95       	ret
	if(!send_byte(0x41)){return 0;} // p1
    2954:	80 e0       	ldi	r24, 0x00	; 0
    2956:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// sensitivity setting, part 3
	if(!start_write(MWIITWIADDR)){return 0;}
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	08 95       	ret
	if(!send_byte(0x1A)){return 0;}
    295c:	80 e0       	ldi	r24, 0x00	; 0
    295e:	08 95       	ret
	if(!send_byte(0x40)){return 0;} // p2
    2960:	80 e0       	ldi	r24, 0x00	; 0
    2962:	08 95       	ret
	if(!send_byte(0x00)){return 0;} // p3
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2968:	80 e0       	ldi	r24, 0x00	; 0
    296a:	08 95       	ret
	if(!send_byte(0x33)){return 0;}
    296c:	80 e0       	ldi	r24, 0x00	; 0
    296e:	08 95       	ret
	if(!send_byte(0x03)){return 0;}
    2970:	80 e0       	ldi	r24, 0x00	; 0
    2972:	08 95       	ret
	end();

	m_wait(INTERPACKET);
	
	// not quite sure
	if(!start_write(MWIITWIADDR)){return 0;}
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	08 95       	ret
	if(!send_byte(0x30)){return 0;}
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	08 95       	ret
	if(!send_byte(0x08)){return 0;}
    297c:	80 e0       	ldi	r24, 0x00	; 0
	end();
	
	m_wait(INTERPACKET);

	return 1;
}
    297e:	08 95       	ret

00002980 <__subsf3>:
    2980:	50 58       	subi	r21, 0x80	; 128

00002982 <__addsf3>:
    2982:	bb 27       	eor	r27, r27
    2984:	aa 27       	eor	r26, r26
    2986:	0e d0       	rcall	.+28     	; 0x29a4 <__addsf3x>
    2988:	27 c2       	rjmp	.+1102   	; 0x2dd8 <__fp_round>
    298a:	f0 d1       	rcall	.+992    	; 0x2d6c <__fp_pscA>
    298c:	30 f0       	brcs	.+12     	; 0x299a <__addsf3+0x18>
    298e:	f5 d1       	rcall	.+1002   	; 0x2d7a <__fp_pscB>
    2990:	20 f0       	brcs	.+8      	; 0x299a <__addsf3+0x18>
    2992:	31 f4       	brne	.+12     	; 0x29a0 <__addsf3+0x1e>
    2994:	9f 3f       	cpi	r25, 0xFF	; 255
    2996:	11 f4       	brne	.+4      	; 0x299c <__addsf3+0x1a>
    2998:	1e f4       	brtc	.+6      	; 0x29a0 <__addsf3+0x1e>
    299a:	c0 c1       	rjmp	.+896    	; 0x2d1c <__fp_nan>
    299c:	0e f4       	brtc	.+2      	; 0x29a0 <__addsf3+0x1e>
    299e:	e0 95       	com	r30
    29a0:	e7 fb       	bst	r30, 7
    29a2:	b6 c1       	rjmp	.+876    	; 0x2d10 <__fp_inf>

000029a4 <__addsf3x>:
    29a4:	e9 2f       	mov	r30, r25
    29a6:	3a d2       	rcall	.+1140   	; 0x2e1c <__fp_split3>
    29a8:	80 f3       	brcs	.-32     	; 0x298a <__addsf3+0x8>
    29aa:	ba 17       	cp	r27, r26
    29ac:	62 07       	cpc	r22, r18
    29ae:	73 07       	cpc	r23, r19
    29b0:	84 07       	cpc	r24, r20
    29b2:	95 07       	cpc	r25, r21
    29b4:	18 f0       	brcs	.+6      	; 0x29bc <__addsf3x+0x18>
    29b6:	71 f4       	brne	.+28     	; 0x29d4 <__addsf3x+0x30>
    29b8:	9e f5       	brtc	.+102    	; 0x2a20 <__addsf3x+0x7c>
    29ba:	52 c2       	rjmp	.+1188   	; 0x2e60 <__fp_zero>
    29bc:	0e f4       	brtc	.+2      	; 0x29c0 <__addsf3x+0x1c>
    29be:	e0 95       	com	r30
    29c0:	0b 2e       	mov	r0, r27
    29c2:	ba 2f       	mov	r27, r26
    29c4:	a0 2d       	mov	r26, r0
    29c6:	0b 01       	movw	r0, r22
    29c8:	b9 01       	movw	r22, r18
    29ca:	90 01       	movw	r18, r0
    29cc:	0c 01       	movw	r0, r24
    29ce:	ca 01       	movw	r24, r20
    29d0:	a0 01       	movw	r20, r0
    29d2:	11 24       	eor	r1, r1
    29d4:	ff 27       	eor	r31, r31
    29d6:	59 1b       	sub	r21, r25
    29d8:	99 f0       	breq	.+38     	; 0x2a00 <__addsf3x+0x5c>
    29da:	59 3f       	cpi	r21, 0xF9	; 249
    29dc:	50 f4       	brcc	.+20     	; 0x29f2 <__addsf3x+0x4e>
    29de:	50 3e       	cpi	r21, 0xE0	; 224
    29e0:	68 f1       	brcs	.+90     	; 0x2a3c <__addsf3x+0x98>
    29e2:	1a 16       	cp	r1, r26
    29e4:	f0 40       	sbci	r31, 0x00	; 0
    29e6:	a2 2f       	mov	r26, r18
    29e8:	23 2f       	mov	r18, r19
    29ea:	34 2f       	mov	r19, r20
    29ec:	44 27       	eor	r20, r20
    29ee:	58 5f       	subi	r21, 0xF8	; 248
    29f0:	f3 cf       	rjmp	.-26     	; 0x29d8 <__addsf3x+0x34>
    29f2:	46 95       	lsr	r20
    29f4:	37 95       	ror	r19
    29f6:	27 95       	ror	r18
    29f8:	a7 95       	ror	r26
    29fa:	f0 40       	sbci	r31, 0x00	; 0
    29fc:	53 95       	inc	r21
    29fe:	c9 f7       	brne	.-14     	; 0x29f2 <__addsf3x+0x4e>
    2a00:	7e f4       	brtc	.+30     	; 0x2a20 <__addsf3x+0x7c>
    2a02:	1f 16       	cp	r1, r31
    2a04:	ba 0b       	sbc	r27, r26
    2a06:	62 0b       	sbc	r22, r18
    2a08:	73 0b       	sbc	r23, r19
    2a0a:	84 0b       	sbc	r24, r20
    2a0c:	ba f0       	brmi	.+46     	; 0x2a3c <__addsf3x+0x98>
    2a0e:	91 50       	subi	r25, 0x01	; 1
    2a10:	a1 f0       	breq	.+40     	; 0x2a3a <__addsf3x+0x96>
    2a12:	ff 0f       	add	r31, r31
    2a14:	bb 1f       	adc	r27, r27
    2a16:	66 1f       	adc	r22, r22
    2a18:	77 1f       	adc	r23, r23
    2a1a:	88 1f       	adc	r24, r24
    2a1c:	c2 f7       	brpl	.-16     	; 0x2a0e <__addsf3x+0x6a>
    2a1e:	0e c0       	rjmp	.+28     	; 0x2a3c <__addsf3x+0x98>
    2a20:	ba 0f       	add	r27, r26
    2a22:	62 1f       	adc	r22, r18
    2a24:	73 1f       	adc	r23, r19
    2a26:	84 1f       	adc	r24, r20
    2a28:	48 f4       	brcc	.+18     	; 0x2a3c <__addsf3x+0x98>
    2a2a:	87 95       	ror	r24
    2a2c:	77 95       	ror	r23
    2a2e:	67 95       	ror	r22
    2a30:	b7 95       	ror	r27
    2a32:	f7 95       	ror	r31
    2a34:	9e 3f       	cpi	r25, 0xFE	; 254
    2a36:	08 f0       	brcs	.+2      	; 0x2a3a <__addsf3x+0x96>
    2a38:	b3 cf       	rjmp	.-154    	; 0x29a0 <__addsf3+0x1e>
    2a3a:	93 95       	inc	r25
    2a3c:	88 0f       	add	r24, r24
    2a3e:	08 f0       	brcs	.+2      	; 0x2a42 <__addsf3x+0x9e>
    2a40:	99 27       	eor	r25, r25
    2a42:	ee 0f       	add	r30, r30
    2a44:	97 95       	ror	r25
    2a46:	87 95       	ror	r24
    2a48:	08 95       	ret
    2a4a:	90 d1       	rcall	.+800    	; 0x2d6c <__fp_pscA>
    2a4c:	58 f0       	brcs	.+22     	; 0x2a64 <__addsf3x+0xc0>
    2a4e:	80 e8       	ldi	r24, 0x80	; 128
    2a50:	91 e0       	ldi	r25, 0x01	; 1
    2a52:	09 f4       	brne	.+2      	; 0x2a56 <__addsf3x+0xb2>
    2a54:	9e ef       	ldi	r25, 0xFE	; 254
    2a56:	91 d1       	rcall	.+802    	; 0x2d7a <__fp_pscB>
    2a58:	28 f0       	brcs	.+10     	; 0x2a64 <__addsf3x+0xc0>
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	51 e0       	ldi	r21, 0x01	; 1
    2a5e:	59 f4       	brne	.+22     	; 0x2a76 <atan2+0xe>
    2a60:	5e ef       	ldi	r21, 0xFE	; 254
    2a62:	09 c0       	rjmp	.+18     	; 0x2a76 <atan2+0xe>
    2a64:	5b c1       	rjmp	.+694    	; 0x2d1c <__fp_nan>
    2a66:	fc c1       	rjmp	.+1016   	; 0x2e60 <__fp_zero>

00002a68 <atan2>:
    2a68:	e9 2f       	mov	r30, r25
    2a6a:	e0 78       	andi	r30, 0x80	; 128
    2a6c:	d7 d1       	rcall	.+942    	; 0x2e1c <__fp_split3>
    2a6e:	68 f3       	brcs	.-38     	; 0x2a4a <__addsf3x+0xa6>
    2a70:	09 2e       	mov	r0, r25
    2a72:	05 2a       	or	r0, r21
    2a74:	c1 f3       	breq	.-16     	; 0x2a66 <__addsf3x+0xc2>
    2a76:	26 17       	cp	r18, r22
    2a78:	37 07       	cpc	r19, r23
    2a7a:	48 07       	cpc	r20, r24
    2a7c:	59 07       	cpc	r21, r25
    2a7e:	38 f0       	brcs	.+14     	; 0x2a8e <atan2+0x26>
    2a80:	0e 2e       	mov	r0, r30
    2a82:	07 f8       	bld	r0, 7
    2a84:	e0 25       	eor	r30, r0
    2a86:	69 f0       	breq	.+26     	; 0x2aa2 <atan2+0x3a>
    2a88:	e0 25       	eor	r30, r0
    2a8a:	e0 64       	ori	r30, 0x40	; 64
    2a8c:	0a c0       	rjmp	.+20     	; 0x2aa2 <atan2+0x3a>
    2a8e:	ef 63       	ori	r30, 0x3F	; 63
    2a90:	07 f8       	bld	r0, 7
    2a92:	00 94       	com	r0
    2a94:	07 fa       	bst	r0, 7
    2a96:	db 01       	movw	r26, r22
    2a98:	b9 01       	movw	r22, r18
    2a9a:	9d 01       	movw	r18, r26
    2a9c:	dc 01       	movw	r26, r24
    2a9e:	ca 01       	movw	r24, r20
    2aa0:	ad 01       	movw	r20, r26
    2aa2:	ef 93       	push	r30
    2aa4:	4a d0       	rcall	.+148    	; 0x2b3a <__divsf3_pse>
    2aa6:	98 d1       	rcall	.+816    	; 0x2dd8 <__fp_round>
    2aa8:	0a d0       	rcall	.+20     	; 0x2abe <atan>
    2aaa:	5f 91       	pop	r21
    2aac:	55 23       	and	r21, r21
    2aae:	31 f0       	breq	.+12     	; 0x2abc <atan2+0x54>
    2ab0:	2b ed       	ldi	r18, 0xDB	; 219
    2ab2:	3f e0       	ldi	r19, 0x0F	; 15
    2ab4:	49 e4       	ldi	r20, 0x49	; 73
    2ab6:	50 fd       	sbrc	r21, 0
    2ab8:	49 ec       	ldi	r20, 0xC9	; 201
    2aba:	63 cf       	rjmp	.-314    	; 0x2982 <__addsf3>
    2abc:	08 95       	ret

00002abe <atan>:
    2abe:	df 93       	push	r29
    2ac0:	dd 27       	eor	r29, r29
    2ac2:	b9 2f       	mov	r27, r25
    2ac4:	bf 77       	andi	r27, 0x7F	; 127
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	16 16       	cp	r1, r22
    2acc:	17 06       	cpc	r1, r23
    2ace:	48 07       	cpc	r20, r24
    2ad0:	5b 07       	cpc	r21, r27
    2ad2:	10 f4       	brcc	.+4      	; 0x2ad8 <atan+0x1a>
    2ad4:	d9 2f       	mov	r29, r25
    2ad6:	cf d1       	rcall	.+926    	; 0x2e76 <inverse>
    2ad8:	9f 93       	push	r25
    2ada:	8f 93       	push	r24
    2adc:	7f 93       	push	r23
    2ade:	6f 93       	push	r22
    2ae0:	7c d2       	rcall	.+1272   	; 0x2fda <square>
    2ae2:	ec ea       	ldi	r30, 0xAC	; 172
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	1d d1       	rcall	.+570    	; 0x2d22 <__fp_powser>
    2ae8:	77 d1       	rcall	.+750    	; 0x2dd8 <__fp_round>
    2aea:	2f 91       	pop	r18
    2aec:	3f 91       	pop	r19
    2aee:	4f 91       	pop	r20
    2af0:	5f 91       	pop	r21
    2af2:	d4 d1       	rcall	.+936    	; 0x2e9c <__mulsf3x>
    2af4:	dd 23       	and	r29, r29
    2af6:	49 f0       	breq	.+18     	; 0x2b0a <atan+0x4c>
    2af8:	90 58       	subi	r25, 0x80	; 128
    2afa:	a2 ea       	ldi	r26, 0xA2	; 162
    2afc:	2a ed       	ldi	r18, 0xDA	; 218
    2afe:	3f e0       	ldi	r19, 0x0F	; 15
    2b00:	49 ec       	ldi	r20, 0xC9	; 201
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	d0 78       	andi	r29, 0x80	; 128
    2b06:	5d 27       	eor	r21, r29
    2b08:	4d df       	rcall	.-358    	; 0x29a4 <__addsf3x>
    2b0a:	df 91       	pop	r29
    2b0c:	65 c1       	rjmp	.+714    	; 0x2dd8 <__fp_round>

00002b0e <__cmpsf2>:
    2b0e:	dc d0       	rcall	.+440    	; 0x2cc8 <__fp_cmp>
    2b10:	08 f4       	brcc	.+2      	; 0x2b14 <__cmpsf2+0x6>
    2b12:	81 e0       	ldi	r24, 0x01	; 1
    2b14:	08 95       	ret

00002b16 <cos>:
    2b16:	39 d1       	rcall	.+626    	; 0x2d8a <__fp_rempio2>
    2b18:	e3 95       	inc	r30
    2b1a:	6f c1       	rjmp	.+734    	; 0x2dfa <__fp_sinus>

00002b1c <__divsf3>:
    2b1c:	0c d0       	rcall	.+24     	; 0x2b36 <__divsf3x>
    2b1e:	5c c1       	rjmp	.+696    	; 0x2dd8 <__fp_round>
    2b20:	2c d1       	rcall	.+600    	; 0x2d7a <__fp_pscB>
    2b22:	40 f0       	brcs	.+16     	; 0x2b34 <__divsf3+0x18>
    2b24:	23 d1       	rcall	.+582    	; 0x2d6c <__fp_pscA>
    2b26:	30 f0       	brcs	.+12     	; 0x2b34 <__divsf3+0x18>
    2b28:	21 f4       	brne	.+8      	; 0x2b32 <__divsf3+0x16>
    2b2a:	5f 3f       	cpi	r21, 0xFF	; 255
    2b2c:	19 f0       	breq	.+6      	; 0x2b34 <__divsf3+0x18>
    2b2e:	f0 c0       	rjmp	.+480    	; 0x2d10 <__fp_inf>
    2b30:	51 11       	cpse	r21, r1
    2b32:	97 c1       	rjmp	.+814    	; 0x2e62 <__fp_szero>
    2b34:	f3 c0       	rjmp	.+486    	; 0x2d1c <__fp_nan>

00002b36 <__divsf3x>:
    2b36:	72 d1       	rcall	.+740    	; 0x2e1c <__fp_split3>
    2b38:	98 f3       	brcs	.-26     	; 0x2b20 <__divsf3+0x4>

00002b3a <__divsf3_pse>:
    2b3a:	99 23       	and	r25, r25
    2b3c:	c9 f3       	breq	.-14     	; 0x2b30 <__divsf3+0x14>
    2b3e:	55 23       	and	r21, r21
    2b40:	b1 f3       	breq	.-20     	; 0x2b2e <__divsf3+0x12>
    2b42:	95 1b       	sub	r25, r21
    2b44:	55 0b       	sbc	r21, r21
    2b46:	bb 27       	eor	r27, r27
    2b48:	aa 27       	eor	r26, r26
    2b4a:	62 17       	cp	r22, r18
    2b4c:	73 07       	cpc	r23, r19
    2b4e:	84 07       	cpc	r24, r20
    2b50:	38 f0       	brcs	.+14     	; 0x2b60 <__divsf3_pse+0x26>
    2b52:	9f 5f       	subi	r25, 0xFF	; 255
    2b54:	5f 4f       	sbci	r21, 0xFF	; 255
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	44 1f       	adc	r20, r20
    2b5c:	aa 1f       	adc	r26, r26
    2b5e:	a9 f3       	breq	.-22     	; 0x2b4a <__divsf3_pse+0x10>
    2b60:	33 d0       	rcall	.+102    	; 0x2bc8 <__divsf3_pse+0x8e>
    2b62:	0e 2e       	mov	r0, r30
    2b64:	3a f0       	brmi	.+14     	; 0x2b74 <__divsf3_pse+0x3a>
    2b66:	e0 e8       	ldi	r30, 0x80	; 128
    2b68:	30 d0       	rcall	.+96     	; 0x2bca <__divsf3_pse+0x90>
    2b6a:	91 50       	subi	r25, 0x01	; 1
    2b6c:	50 40       	sbci	r21, 0x00	; 0
    2b6e:	e6 95       	lsr	r30
    2b70:	00 1c       	adc	r0, r0
    2b72:	ca f7       	brpl	.-14     	; 0x2b66 <__divsf3_pse+0x2c>
    2b74:	29 d0       	rcall	.+82     	; 0x2bc8 <__divsf3_pse+0x8e>
    2b76:	fe 2f       	mov	r31, r30
    2b78:	27 d0       	rcall	.+78     	; 0x2bc8 <__divsf3_pse+0x8e>
    2b7a:	66 0f       	add	r22, r22
    2b7c:	77 1f       	adc	r23, r23
    2b7e:	88 1f       	adc	r24, r24
    2b80:	bb 1f       	adc	r27, r27
    2b82:	26 17       	cp	r18, r22
    2b84:	37 07       	cpc	r19, r23
    2b86:	48 07       	cpc	r20, r24
    2b88:	ab 07       	cpc	r26, r27
    2b8a:	b0 e8       	ldi	r27, 0x80	; 128
    2b8c:	09 f0       	breq	.+2      	; 0x2b90 <__divsf3_pse+0x56>
    2b8e:	bb 0b       	sbc	r27, r27
    2b90:	80 2d       	mov	r24, r0
    2b92:	bf 01       	movw	r22, r30
    2b94:	ff 27       	eor	r31, r31
    2b96:	93 58       	subi	r25, 0x83	; 131
    2b98:	5f 4f       	sbci	r21, 0xFF	; 255
    2b9a:	2a f0       	brmi	.+10     	; 0x2ba6 <__divsf3_pse+0x6c>
    2b9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2b9e:	51 05       	cpc	r21, r1
    2ba0:	68 f0       	brcs	.+26     	; 0x2bbc <__divsf3_pse+0x82>
    2ba2:	b6 c0       	rjmp	.+364    	; 0x2d10 <__fp_inf>
    2ba4:	5e c1       	rjmp	.+700    	; 0x2e62 <__fp_szero>
    2ba6:	5f 3f       	cpi	r21, 0xFF	; 255
    2ba8:	ec f3       	brlt	.-6      	; 0x2ba4 <__divsf3_pse+0x6a>
    2baa:	98 3e       	cpi	r25, 0xE8	; 232
    2bac:	dc f3       	brlt	.-10     	; 0x2ba4 <__divsf3_pse+0x6a>
    2bae:	86 95       	lsr	r24
    2bb0:	77 95       	ror	r23
    2bb2:	67 95       	ror	r22
    2bb4:	b7 95       	ror	r27
    2bb6:	f7 95       	ror	r31
    2bb8:	9f 5f       	subi	r25, 0xFF	; 255
    2bba:	c9 f7       	brne	.-14     	; 0x2bae <__divsf3_pse+0x74>
    2bbc:	88 0f       	add	r24, r24
    2bbe:	91 1d       	adc	r25, r1
    2bc0:	96 95       	lsr	r25
    2bc2:	87 95       	ror	r24
    2bc4:	97 f9       	bld	r25, 7
    2bc6:	08 95       	ret
    2bc8:	e1 e0       	ldi	r30, 0x01	; 1
    2bca:	66 0f       	add	r22, r22
    2bcc:	77 1f       	adc	r23, r23
    2bce:	88 1f       	adc	r24, r24
    2bd0:	bb 1f       	adc	r27, r27
    2bd2:	62 17       	cp	r22, r18
    2bd4:	73 07       	cpc	r23, r19
    2bd6:	84 07       	cpc	r24, r20
    2bd8:	ba 07       	cpc	r27, r26
    2bda:	20 f0       	brcs	.+8      	; 0x2be4 <__divsf3_pse+0xaa>
    2bdc:	62 1b       	sub	r22, r18
    2bde:	73 0b       	sbc	r23, r19
    2be0:	84 0b       	sbc	r24, r20
    2be2:	ba 0b       	sbc	r27, r26
    2be4:	ee 1f       	adc	r30, r30
    2be6:	88 f7       	brcc	.-30     	; 0x2bca <__divsf3_pse+0x90>
    2be8:	e0 95       	com	r30
    2bea:	08 95       	ret

00002bec <__fixsfsi>:
    2bec:	04 d0       	rcall	.+8      	; 0x2bf6 <__fixunssfsi>
    2bee:	68 94       	set
    2bf0:	b1 11       	cpse	r27, r1
    2bf2:	37 c1       	rjmp	.+622    	; 0x2e62 <__fp_szero>
    2bf4:	08 95       	ret

00002bf6 <__fixunssfsi>:
    2bf6:	1a d1       	rcall	.+564    	; 0x2e2c <__fp_splitA>
    2bf8:	88 f0       	brcs	.+34     	; 0x2c1c <__fixunssfsi+0x26>
    2bfa:	9f 57       	subi	r25, 0x7F	; 127
    2bfc:	90 f0       	brcs	.+36     	; 0x2c22 <__fixunssfsi+0x2c>
    2bfe:	b9 2f       	mov	r27, r25
    2c00:	99 27       	eor	r25, r25
    2c02:	b7 51       	subi	r27, 0x17	; 23
    2c04:	a0 f0       	brcs	.+40     	; 0x2c2e <__fixunssfsi+0x38>
    2c06:	d1 f0       	breq	.+52     	; 0x2c3c <__fixunssfsi+0x46>
    2c08:	66 0f       	add	r22, r22
    2c0a:	77 1f       	adc	r23, r23
    2c0c:	88 1f       	adc	r24, r24
    2c0e:	99 1f       	adc	r25, r25
    2c10:	1a f0       	brmi	.+6      	; 0x2c18 <__fixunssfsi+0x22>
    2c12:	ba 95       	dec	r27
    2c14:	c9 f7       	brne	.-14     	; 0x2c08 <__fixunssfsi+0x12>
    2c16:	12 c0       	rjmp	.+36     	; 0x2c3c <__fixunssfsi+0x46>
    2c18:	b1 30       	cpi	r27, 0x01	; 1
    2c1a:	81 f0       	breq	.+32     	; 0x2c3c <__fixunssfsi+0x46>
    2c1c:	21 d1       	rcall	.+578    	; 0x2e60 <__fp_zero>
    2c1e:	b1 e0       	ldi	r27, 0x01	; 1
    2c20:	08 95       	ret
    2c22:	1e c1       	rjmp	.+572    	; 0x2e60 <__fp_zero>
    2c24:	67 2f       	mov	r22, r23
    2c26:	78 2f       	mov	r23, r24
    2c28:	88 27       	eor	r24, r24
    2c2a:	b8 5f       	subi	r27, 0xF8	; 248
    2c2c:	39 f0       	breq	.+14     	; 0x2c3c <__fixunssfsi+0x46>
    2c2e:	b9 3f       	cpi	r27, 0xF9	; 249
    2c30:	cc f3       	brlt	.-14     	; 0x2c24 <__fixunssfsi+0x2e>
    2c32:	86 95       	lsr	r24
    2c34:	77 95       	ror	r23
    2c36:	67 95       	ror	r22
    2c38:	b3 95       	inc	r27
    2c3a:	d9 f7       	brne	.-10     	; 0x2c32 <__fixunssfsi+0x3c>
    2c3c:	3e f4       	brtc	.+14     	; 0x2c4c <__fixunssfsi+0x56>
    2c3e:	90 95       	com	r25
    2c40:	80 95       	com	r24
    2c42:	70 95       	com	r23
    2c44:	61 95       	neg	r22
    2c46:	7f 4f       	sbci	r23, 0xFF	; 255
    2c48:	8f 4f       	sbci	r24, 0xFF	; 255
    2c4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2c4c:	08 95       	ret

00002c4e <__floatunsisf>:
    2c4e:	e8 94       	clt
    2c50:	09 c0       	rjmp	.+18     	; 0x2c64 <__floatsisf+0x12>

00002c52 <__floatsisf>:
    2c52:	97 fb       	bst	r25, 7
    2c54:	3e f4       	brtc	.+14     	; 0x2c64 <__floatsisf+0x12>
    2c56:	90 95       	com	r25
    2c58:	80 95       	com	r24
    2c5a:	70 95       	com	r23
    2c5c:	61 95       	neg	r22
    2c5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c60:	8f 4f       	sbci	r24, 0xFF	; 255
    2c62:	9f 4f       	sbci	r25, 0xFF	; 255
    2c64:	99 23       	and	r25, r25
    2c66:	a9 f0       	breq	.+42     	; 0x2c92 <__floatsisf+0x40>
    2c68:	f9 2f       	mov	r31, r25
    2c6a:	96 e9       	ldi	r25, 0x96	; 150
    2c6c:	bb 27       	eor	r27, r27
    2c6e:	93 95       	inc	r25
    2c70:	f6 95       	lsr	r31
    2c72:	87 95       	ror	r24
    2c74:	77 95       	ror	r23
    2c76:	67 95       	ror	r22
    2c78:	b7 95       	ror	r27
    2c7a:	f1 11       	cpse	r31, r1
    2c7c:	f8 cf       	rjmp	.-16     	; 0x2c6e <__floatsisf+0x1c>
    2c7e:	fa f4       	brpl	.+62     	; 0x2cbe <__floatsisf+0x6c>
    2c80:	bb 0f       	add	r27, r27
    2c82:	11 f4       	brne	.+4      	; 0x2c88 <__floatsisf+0x36>
    2c84:	60 ff       	sbrs	r22, 0
    2c86:	1b c0       	rjmp	.+54     	; 0x2cbe <__floatsisf+0x6c>
    2c88:	6f 5f       	subi	r22, 0xFF	; 255
    2c8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c90:	16 c0       	rjmp	.+44     	; 0x2cbe <__floatsisf+0x6c>
    2c92:	88 23       	and	r24, r24
    2c94:	11 f0       	breq	.+4      	; 0x2c9a <__floatsisf+0x48>
    2c96:	96 e9       	ldi	r25, 0x96	; 150
    2c98:	11 c0       	rjmp	.+34     	; 0x2cbc <__floatsisf+0x6a>
    2c9a:	77 23       	and	r23, r23
    2c9c:	21 f0       	breq	.+8      	; 0x2ca6 <__floatsisf+0x54>
    2c9e:	9e e8       	ldi	r25, 0x8E	; 142
    2ca0:	87 2f       	mov	r24, r23
    2ca2:	76 2f       	mov	r23, r22
    2ca4:	05 c0       	rjmp	.+10     	; 0x2cb0 <__floatsisf+0x5e>
    2ca6:	66 23       	and	r22, r22
    2ca8:	71 f0       	breq	.+28     	; 0x2cc6 <__floatsisf+0x74>
    2caa:	96 e8       	ldi	r25, 0x86	; 134
    2cac:	86 2f       	mov	r24, r22
    2cae:	70 e0       	ldi	r23, 0x00	; 0
    2cb0:	60 e0       	ldi	r22, 0x00	; 0
    2cb2:	2a f0       	brmi	.+10     	; 0x2cbe <__floatsisf+0x6c>
    2cb4:	9a 95       	dec	r25
    2cb6:	66 0f       	add	r22, r22
    2cb8:	77 1f       	adc	r23, r23
    2cba:	88 1f       	adc	r24, r24
    2cbc:	da f7       	brpl	.-10     	; 0x2cb4 <__floatsisf+0x62>
    2cbe:	88 0f       	add	r24, r24
    2cc0:	96 95       	lsr	r25
    2cc2:	87 95       	ror	r24
    2cc4:	97 f9       	bld	r25, 7
    2cc6:	08 95       	ret

00002cc8 <__fp_cmp>:
    2cc8:	99 0f       	add	r25, r25
    2cca:	00 08       	sbc	r0, r0
    2ccc:	55 0f       	add	r21, r21
    2cce:	aa 0b       	sbc	r26, r26
    2cd0:	e0 e8       	ldi	r30, 0x80	; 128
    2cd2:	fe ef       	ldi	r31, 0xFE	; 254
    2cd4:	16 16       	cp	r1, r22
    2cd6:	17 06       	cpc	r1, r23
    2cd8:	e8 07       	cpc	r30, r24
    2cda:	f9 07       	cpc	r31, r25
    2cdc:	c0 f0       	brcs	.+48     	; 0x2d0e <__fp_cmp+0x46>
    2cde:	12 16       	cp	r1, r18
    2ce0:	13 06       	cpc	r1, r19
    2ce2:	e4 07       	cpc	r30, r20
    2ce4:	f5 07       	cpc	r31, r21
    2ce6:	98 f0       	brcs	.+38     	; 0x2d0e <__fp_cmp+0x46>
    2ce8:	62 1b       	sub	r22, r18
    2cea:	73 0b       	sbc	r23, r19
    2cec:	84 0b       	sbc	r24, r20
    2cee:	95 0b       	sbc	r25, r21
    2cf0:	39 f4       	brne	.+14     	; 0x2d00 <__fp_cmp+0x38>
    2cf2:	0a 26       	eor	r0, r26
    2cf4:	61 f0       	breq	.+24     	; 0x2d0e <__fp_cmp+0x46>
    2cf6:	23 2b       	or	r18, r19
    2cf8:	24 2b       	or	r18, r20
    2cfa:	25 2b       	or	r18, r21
    2cfc:	21 f4       	brne	.+8      	; 0x2d06 <__fp_cmp+0x3e>
    2cfe:	08 95       	ret
    2d00:	0a 26       	eor	r0, r26
    2d02:	09 f4       	brne	.+2      	; 0x2d06 <__fp_cmp+0x3e>
    2d04:	a1 40       	sbci	r26, 0x01	; 1
    2d06:	a6 95       	lsr	r26
    2d08:	8f ef       	ldi	r24, 0xFF	; 255
    2d0a:	81 1d       	adc	r24, r1
    2d0c:	81 1d       	adc	r24, r1
    2d0e:	08 95       	ret

00002d10 <__fp_inf>:
    2d10:	97 f9       	bld	r25, 7
    2d12:	9f 67       	ori	r25, 0x7F	; 127
    2d14:	80 e8       	ldi	r24, 0x80	; 128
    2d16:	70 e0       	ldi	r23, 0x00	; 0
    2d18:	60 e0       	ldi	r22, 0x00	; 0
    2d1a:	08 95       	ret

00002d1c <__fp_nan>:
    2d1c:	9f ef       	ldi	r25, 0xFF	; 255
    2d1e:	80 ec       	ldi	r24, 0xC0	; 192
    2d20:	08 95       	ret

00002d22 <__fp_powser>:
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	1f 93       	push	r17
    2d28:	0f 93       	push	r16
    2d2a:	ff 92       	push	r15
    2d2c:	ef 92       	push	r14
    2d2e:	df 92       	push	r13
    2d30:	7b 01       	movw	r14, r22
    2d32:	8c 01       	movw	r16, r24
    2d34:	68 94       	set
    2d36:	05 c0       	rjmp	.+10     	; 0x2d42 <__fp_powser+0x20>
    2d38:	da 2e       	mov	r13, r26
    2d3a:	ef 01       	movw	r28, r30
    2d3c:	af d0       	rcall	.+350    	; 0x2e9c <__mulsf3x>
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e8 94       	clt
    2d42:	a5 91       	lpm	r26, Z+
    2d44:	25 91       	lpm	r18, Z+
    2d46:	35 91       	lpm	r19, Z+
    2d48:	45 91       	lpm	r20, Z+
    2d4a:	55 91       	lpm	r21, Z+
    2d4c:	ae f3       	brts	.-22     	; 0x2d38 <__fp_powser+0x16>
    2d4e:	ef 01       	movw	r28, r30
    2d50:	29 de       	rcall	.-942    	; 0x29a4 <__addsf3x>
    2d52:	fe 01       	movw	r30, r28
    2d54:	97 01       	movw	r18, r14
    2d56:	a8 01       	movw	r20, r16
    2d58:	da 94       	dec	r13
    2d5a:	79 f7       	brne	.-34     	; 0x2d3a <__fp_powser+0x18>
    2d5c:	df 90       	pop	r13
    2d5e:	ef 90       	pop	r14
    2d60:	ff 90       	pop	r15
    2d62:	0f 91       	pop	r16
    2d64:	1f 91       	pop	r17
    2d66:	cf 91       	pop	r28
    2d68:	df 91       	pop	r29
    2d6a:	08 95       	ret

00002d6c <__fp_pscA>:
    2d6c:	00 24       	eor	r0, r0
    2d6e:	0a 94       	dec	r0
    2d70:	16 16       	cp	r1, r22
    2d72:	17 06       	cpc	r1, r23
    2d74:	18 06       	cpc	r1, r24
    2d76:	09 06       	cpc	r0, r25
    2d78:	08 95       	ret

00002d7a <__fp_pscB>:
    2d7a:	00 24       	eor	r0, r0
    2d7c:	0a 94       	dec	r0
    2d7e:	12 16       	cp	r1, r18
    2d80:	13 06       	cpc	r1, r19
    2d82:	14 06       	cpc	r1, r20
    2d84:	05 06       	cpc	r0, r21
    2d86:	08 95       	ret
    2d88:	c9 cf       	rjmp	.-110    	; 0x2d1c <__fp_nan>

00002d8a <__fp_rempio2>:
    2d8a:	50 d0       	rcall	.+160    	; 0x2e2c <__fp_splitA>
    2d8c:	e8 f3       	brcs	.-6      	; 0x2d88 <__fp_pscB+0xe>
    2d8e:	e8 94       	clt
    2d90:	e0 e0       	ldi	r30, 0x00	; 0
    2d92:	bb 27       	eor	r27, r27
    2d94:	9f 57       	subi	r25, 0x7F	; 127
    2d96:	f0 f0       	brcs	.+60     	; 0x2dd4 <__fp_rempio2+0x4a>
    2d98:	2a ed       	ldi	r18, 0xDA	; 218
    2d9a:	3f e0       	ldi	r19, 0x0F	; 15
    2d9c:	49 ec       	ldi	r20, 0xC9	; 201
    2d9e:	06 c0       	rjmp	.+12     	; 0x2dac <__fp_rempio2+0x22>
    2da0:	ee 0f       	add	r30, r30
    2da2:	bb 0f       	add	r27, r27
    2da4:	66 1f       	adc	r22, r22
    2da6:	77 1f       	adc	r23, r23
    2da8:	88 1f       	adc	r24, r24
    2daa:	28 f0       	brcs	.+10     	; 0x2db6 <__fp_rempio2+0x2c>
    2dac:	b2 3a       	cpi	r27, 0xA2	; 162
    2dae:	62 07       	cpc	r22, r18
    2db0:	73 07       	cpc	r23, r19
    2db2:	84 07       	cpc	r24, r20
    2db4:	28 f0       	brcs	.+10     	; 0x2dc0 <__fp_rempio2+0x36>
    2db6:	b2 5a       	subi	r27, 0xA2	; 162
    2db8:	62 0b       	sbc	r22, r18
    2dba:	73 0b       	sbc	r23, r19
    2dbc:	84 0b       	sbc	r24, r20
    2dbe:	e3 95       	inc	r30
    2dc0:	9a 95       	dec	r25
    2dc2:	72 f7       	brpl	.-36     	; 0x2da0 <__fp_rempio2+0x16>
    2dc4:	80 38       	cpi	r24, 0x80	; 128
    2dc6:	30 f4       	brcc	.+12     	; 0x2dd4 <__fp_rempio2+0x4a>
    2dc8:	9a 95       	dec	r25
    2dca:	bb 0f       	add	r27, r27
    2dcc:	66 1f       	adc	r22, r22
    2dce:	77 1f       	adc	r23, r23
    2dd0:	88 1f       	adc	r24, r24
    2dd2:	d2 f7       	brpl	.-12     	; 0x2dc8 <__fp_rempio2+0x3e>
    2dd4:	90 48       	sbci	r25, 0x80	; 128
    2dd6:	06 c1       	rjmp	.+524    	; 0x2fe4 <__fp_mpack_finite>

00002dd8 <__fp_round>:
    2dd8:	09 2e       	mov	r0, r25
    2dda:	03 94       	inc	r0
    2ddc:	00 0c       	add	r0, r0
    2dde:	11 f4       	brne	.+4      	; 0x2de4 <__fp_round+0xc>
    2de0:	88 23       	and	r24, r24
    2de2:	52 f0       	brmi	.+20     	; 0x2df8 <__fp_round+0x20>
    2de4:	bb 0f       	add	r27, r27
    2de6:	40 f4       	brcc	.+16     	; 0x2df8 <__fp_round+0x20>
    2de8:	bf 2b       	or	r27, r31
    2dea:	11 f4       	brne	.+4      	; 0x2df0 <__fp_round+0x18>
    2dec:	60 ff       	sbrs	r22, 0
    2dee:	04 c0       	rjmp	.+8      	; 0x2df8 <__fp_round+0x20>
    2df0:	6f 5f       	subi	r22, 0xFF	; 255
    2df2:	7f 4f       	sbci	r23, 0xFF	; 255
    2df4:	8f 4f       	sbci	r24, 0xFF	; 255
    2df6:	9f 4f       	sbci	r25, 0xFF	; 255
    2df8:	08 95       	ret

00002dfa <__fp_sinus>:
    2dfa:	ef 93       	push	r30
    2dfc:	e0 ff       	sbrs	r30, 0
    2dfe:	06 c0       	rjmp	.+12     	; 0x2e0c <__fp_sinus+0x12>
    2e00:	a2 ea       	ldi	r26, 0xA2	; 162
    2e02:	2a ed       	ldi	r18, 0xDA	; 218
    2e04:	3f e0       	ldi	r19, 0x0F	; 15
    2e06:	49 ec       	ldi	r20, 0xC9	; 201
    2e08:	5f eb       	ldi	r21, 0xBF	; 191
    2e0a:	cc dd       	rcall	.-1128   	; 0x29a4 <__addsf3x>
    2e0c:	e5 df       	rcall	.-54     	; 0x2dd8 <__fp_round>
    2e0e:	0f 90       	pop	r0
    2e10:	03 94       	inc	r0
    2e12:	01 fc       	sbrc	r0, 1
    2e14:	90 58       	subi	r25, 0x80	; 128
    2e16:	e9 ed       	ldi	r30, 0xD9	; 217
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	f7 c0       	rjmp	.+494    	; 0x300a <__fp_powsodd>

00002e1c <__fp_split3>:
    2e1c:	57 fd       	sbrc	r21, 7
    2e1e:	90 58       	subi	r25, 0x80	; 128
    2e20:	44 0f       	add	r20, r20
    2e22:	55 1f       	adc	r21, r21
    2e24:	59 f0       	breq	.+22     	; 0x2e3c <__fp_splitA+0x10>
    2e26:	5f 3f       	cpi	r21, 0xFF	; 255
    2e28:	71 f0       	breq	.+28     	; 0x2e46 <__fp_splitA+0x1a>
    2e2a:	47 95       	ror	r20

00002e2c <__fp_splitA>:
    2e2c:	88 0f       	add	r24, r24
    2e2e:	97 fb       	bst	r25, 7
    2e30:	99 1f       	adc	r25, r25
    2e32:	61 f0       	breq	.+24     	; 0x2e4c <__fp_splitA+0x20>
    2e34:	9f 3f       	cpi	r25, 0xFF	; 255
    2e36:	79 f0       	breq	.+30     	; 0x2e56 <__fp_splitA+0x2a>
    2e38:	87 95       	ror	r24
    2e3a:	08 95       	ret
    2e3c:	12 16       	cp	r1, r18
    2e3e:	13 06       	cpc	r1, r19
    2e40:	14 06       	cpc	r1, r20
    2e42:	55 1f       	adc	r21, r21
    2e44:	f2 cf       	rjmp	.-28     	; 0x2e2a <__fp_split3+0xe>
    2e46:	46 95       	lsr	r20
    2e48:	f1 df       	rcall	.-30     	; 0x2e2c <__fp_splitA>
    2e4a:	08 c0       	rjmp	.+16     	; 0x2e5c <__fp_splitA+0x30>
    2e4c:	16 16       	cp	r1, r22
    2e4e:	17 06       	cpc	r1, r23
    2e50:	18 06       	cpc	r1, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	f1 cf       	rjmp	.-30     	; 0x2e38 <__fp_splitA+0xc>
    2e56:	86 95       	lsr	r24
    2e58:	71 05       	cpc	r23, r1
    2e5a:	61 05       	cpc	r22, r1
    2e5c:	08 94       	sec
    2e5e:	08 95       	ret

00002e60 <__fp_zero>:
    2e60:	e8 94       	clt

00002e62 <__fp_szero>:
    2e62:	bb 27       	eor	r27, r27
    2e64:	66 27       	eor	r22, r22
    2e66:	77 27       	eor	r23, r23
    2e68:	cb 01       	movw	r24, r22
    2e6a:	97 f9       	bld	r25, 7
    2e6c:	08 95       	ret

00002e6e <__gesf2>:
    2e6e:	2c df       	rcall	.-424    	; 0x2cc8 <__fp_cmp>
    2e70:	08 f4       	brcc	.+2      	; 0x2e74 <__gesf2+0x6>
    2e72:	8f ef       	ldi	r24, 0xFF	; 255
    2e74:	08 95       	ret

00002e76 <inverse>:
    2e76:	9b 01       	movw	r18, r22
    2e78:	ac 01       	movw	r20, r24
    2e7a:	60 e0       	ldi	r22, 0x00	; 0
    2e7c:	70 e0       	ldi	r23, 0x00	; 0
    2e7e:	80 e8       	ldi	r24, 0x80	; 128
    2e80:	9f e3       	ldi	r25, 0x3F	; 63
    2e82:	4c ce       	rjmp	.-872    	; 0x2b1c <__divsf3>

00002e84 <__mulsf3>:
    2e84:	0b d0       	rcall	.+22     	; 0x2e9c <__mulsf3x>
    2e86:	a8 cf       	rjmp	.-176    	; 0x2dd8 <__fp_round>
    2e88:	71 df       	rcall	.-286    	; 0x2d6c <__fp_pscA>
    2e8a:	28 f0       	brcs	.+10     	; 0x2e96 <__mulsf3+0x12>
    2e8c:	76 df       	rcall	.-276    	; 0x2d7a <__fp_pscB>
    2e8e:	18 f0       	brcs	.+6      	; 0x2e96 <__mulsf3+0x12>
    2e90:	95 23       	and	r25, r21
    2e92:	09 f0       	breq	.+2      	; 0x2e96 <__mulsf3+0x12>
    2e94:	3d cf       	rjmp	.-390    	; 0x2d10 <__fp_inf>
    2e96:	42 cf       	rjmp	.-380    	; 0x2d1c <__fp_nan>
    2e98:	11 24       	eor	r1, r1
    2e9a:	e3 cf       	rjmp	.-58     	; 0x2e62 <__fp_szero>

00002e9c <__mulsf3x>:
    2e9c:	bf df       	rcall	.-130    	; 0x2e1c <__fp_split3>
    2e9e:	a0 f3       	brcs	.-24     	; 0x2e88 <__mulsf3+0x4>

00002ea0 <__mulsf3_pse>:
    2ea0:	95 9f       	mul	r25, r21
    2ea2:	d1 f3       	breq	.-12     	; 0x2e98 <__mulsf3+0x14>
    2ea4:	95 0f       	add	r25, r21
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	55 1f       	adc	r21, r21
    2eaa:	62 9f       	mul	r22, r18
    2eac:	f0 01       	movw	r30, r0
    2eae:	72 9f       	mul	r23, r18
    2eb0:	bb 27       	eor	r27, r27
    2eb2:	f0 0d       	add	r31, r0
    2eb4:	b1 1d       	adc	r27, r1
    2eb6:	63 9f       	mul	r22, r19
    2eb8:	aa 27       	eor	r26, r26
    2eba:	f0 0d       	add	r31, r0
    2ebc:	b1 1d       	adc	r27, r1
    2ebe:	aa 1f       	adc	r26, r26
    2ec0:	64 9f       	mul	r22, r20
    2ec2:	66 27       	eor	r22, r22
    2ec4:	b0 0d       	add	r27, r0
    2ec6:	a1 1d       	adc	r26, r1
    2ec8:	66 1f       	adc	r22, r22
    2eca:	82 9f       	mul	r24, r18
    2ecc:	22 27       	eor	r18, r18
    2ece:	b0 0d       	add	r27, r0
    2ed0:	a1 1d       	adc	r26, r1
    2ed2:	62 1f       	adc	r22, r18
    2ed4:	73 9f       	mul	r23, r19
    2ed6:	b0 0d       	add	r27, r0
    2ed8:	a1 1d       	adc	r26, r1
    2eda:	62 1f       	adc	r22, r18
    2edc:	83 9f       	mul	r24, r19
    2ede:	a0 0d       	add	r26, r0
    2ee0:	61 1d       	adc	r22, r1
    2ee2:	22 1f       	adc	r18, r18
    2ee4:	74 9f       	mul	r23, r20
    2ee6:	33 27       	eor	r19, r19
    2ee8:	a0 0d       	add	r26, r0
    2eea:	61 1d       	adc	r22, r1
    2eec:	23 1f       	adc	r18, r19
    2eee:	84 9f       	mul	r24, r20
    2ef0:	60 0d       	add	r22, r0
    2ef2:	21 1d       	adc	r18, r1
    2ef4:	82 2f       	mov	r24, r18
    2ef6:	76 2f       	mov	r23, r22
    2ef8:	6a 2f       	mov	r22, r26
    2efa:	11 24       	eor	r1, r1
    2efc:	9f 57       	subi	r25, 0x7F	; 127
    2efe:	50 40       	sbci	r21, 0x00	; 0
    2f00:	8a f0       	brmi	.+34     	; 0x2f24 <__mulsf3_pse+0x84>
    2f02:	e1 f0       	breq	.+56     	; 0x2f3c <__mulsf3_pse+0x9c>
    2f04:	88 23       	and	r24, r24
    2f06:	4a f0       	brmi	.+18     	; 0x2f1a <__mulsf3_pse+0x7a>
    2f08:	ee 0f       	add	r30, r30
    2f0a:	ff 1f       	adc	r31, r31
    2f0c:	bb 1f       	adc	r27, r27
    2f0e:	66 1f       	adc	r22, r22
    2f10:	77 1f       	adc	r23, r23
    2f12:	88 1f       	adc	r24, r24
    2f14:	91 50       	subi	r25, 0x01	; 1
    2f16:	50 40       	sbci	r21, 0x00	; 0
    2f18:	a9 f7       	brne	.-22     	; 0x2f04 <__mulsf3_pse+0x64>
    2f1a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f1c:	51 05       	cpc	r21, r1
    2f1e:	70 f0       	brcs	.+28     	; 0x2f3c <__mulsf3_pse+0x9c>
    2f20:	f7 ce       	rjmp	.-530    	; 0x2d10 <__fp_inf>
    2f22:	9f cf       	rjmp	.-194    	; 0x2e62 <__fp_szero>
    2f24:	5f 3f       	cpi	r21, 0xFF	; 255
    2f26:	ec f3       	brlt	.-6      	; 0x2f22 <__mulsf3_pse+0x82>
    2f28:	98 3e       	cpi	r25, 0xE8	; 232
    2f2a:	dc f3       	brlt	.-10     	; 0x2f22 <__mulsf3_pse+0x82>
    2f2c:	86 95       	lsr	r24
    2f2e:	77 95       	ror	r23
    2f30:	67 95       	ror	r22
    2f32:	b7 95       	ror	r27
    2f34:	f7 95       	ror	r31
    2f36:	e7 95       	ror	r30
    2f38:	9f 5f       	subi	r25, 0xFF	; 255
    2f3a:	c1 f7       	brne	.-16     	; 0x2f2c <__mulsf3_pse+0x8c>
    2f3c:	fe 2b       	or	r31, r30
    2f3e:	88 0f       	add	r24, r24
    2f40:	91 1d       	adc	r25, r1
    2f42:	96 95       	lsr	r25
    2f44:	87 95       	ror	r24
    2f46:	97 f9       	bld	r25, 7
    2f48:	08 95       	ret

00002f4a <sin>:
    2f4a:	9f 93       	push	r25
    2f4c:	1e df       	rcall	.-452    	; 0x2d8a <__fp_rempio2>
    2f4e:	0f 90       	pop	r0
    2f50:	07 fc       	sbrc	r0, 7
    2f52:	ee 5f       	subi	r30, 0xFE	; 254
    2f54:	52 cf       	rjmp	.-348    	; 0x2dfa <__fp_sinus>
    2f56:	11 f4       	brne	.+4      	; 0x2f5c <sin+0x12>
    2f58:	0e f4       	brtc	.+2      	; 0x2f5c <sin+0x12>
    2f5a:	e0 ce       	rjmp	.-576    	; 0x2d1c <__fp_nan>
    2f5c:	41 c0       	rjmp	.+130    	; 0x2fe0 <__fp_mpack>

00002f5e <sqrt>:
    2f5e:	66 df       	rcall	.-308    	; 0x2e2c <__fp_splitA>
    2f60:	d0 f3       	brcs	.-12     	; 0x2f56 <sin+0xc>
    2f62:	99 23       	and	r25, r25
    2f64:	d9 f3       	breq	.-10     	; 0x2f5c <sin+0x12>
    2f66:	ce f3       	brts	.-14     	; 0x2f5a <sin+0x10>
    2f68:	9f 57       	subi	r25, 0x7F	; 127
    2f6a:	55 0b       	sbc	r21, r21
    2f6c:	87 ff       	sbrs	r24, 7
    2f6e:	46 d0       	rcall	.+140    	; 0x2ffc <__fp_norm2>
    2f70:	00 24       	eor	r0, r0
    2f72:	a0 e6       	ldi	r26, 0x60	; 96
    2f74:	40 ea       	ldi	r20, 0xA0	; 160
    2f76:	90 01       	movw	r18, r0
    2f78:	80 58       	subi	r24, 0x80	; 128
    2f7a:	56 95       	lsr	r21
    2f7c:	97 95       	ror	r25
    2f7e:	28 f4       	brcc	.+10     	; 0x2f8a <sqrt+0x2c>
    2f80:	80 5c       	subi	r24, 0xC0	; 192
    2f82:	66 0f       	add	r22, r22
    2f84:	77 1f       	adc	r23, r23
    2f86:	88 1f       	adc	r24, r24
    2f88:	20 f0       	brcs	.+8      	; 0x2f92 <sqrt+0x34>
    2f8a:	26 17       	cp	r18, r22
    2f8c:	37 07       	cpc	r19, r23
    2f8e:	48 07       	cpc	r20, r24
    2f90:	30 f4       	brcc	.+12     	; 0x2f9e <sqrt+0x40>
    2f92:	62 1b       	sub	r22, r18
    2f94:	73 0b       	sbc	r23, r19
    2f96:	84 0b       	sbc	r24, r20
    2f98:	20 29       	or	r18, r0
    2f9a:	31 29       	or	r19, r1
    2f9c:	4a 2b       	or	r20, r26
    2f9e:	a6 95       	lsr	r26
    2fa0:	17 94       	ror	r1
    2fa2:	07 94       	ror	r0
    2fa4:	20 25       	eor	r18, r0
    2fa6:	31 25       	eor	r19, r1
    2fa8:	4a 27       	eor	r20, r26
    2faa:	58 f7       	brcc	.-42     	; 0x2f82 <sqrt+0x24>
    2fac:	66 0f       	add	r22, r22
    2fae:	77 1f       	adc	r23, r23
    2fb0:	88 1f       	adc	r24, r24
    2fb2:	20 f0       	brcs	.+8      	; 0x2fbc <sqrt+0x5e>
    2fb4:	26 17       	cp	r18, r22
    2fb6:	37 07       	cpc	r19, r23
    2fb8:	48 07       	cpc	r20, r24
    2fba:	30 f4       	brcc	.+12     	; 0x2fc8 <sqrt+0x6a>
    2fbc:	62 0b       	sbc	r22, r18
    2fbe:	73 0b       	sbc	r23, r19
    2fc0:	84 0b       	sbc	r24, r20
    2fc2:	20 0d       	add	r18, r0
    2fc4:	31 1d       	adc	r19, r1
    2fc6:	41 1d       	adc	r20, r1
    2fc8:	a0 95       	com	r26
    2fca:	81 f7       	brne	.-32     	; 0x2fac <sqrt+0x4e>
    2fcc:	b9 01       	movw	r22, r18
    2fce:	84 2f       	mov	r24, r20
    2fd0:	91 58       	subi	r25, 0x81	; 129
    2fd2:	88 0f       	add	r24, r24
    2fd4:	96 95       	lsr	r25
    2fd6:	87 95       	ror	r24
    2fd8:	08 95       	ret

00002fda <square>:
    2fda:	9b 01       	movw	r18, r22
    2fdc:	ac 01       	movw	r20, r24
    2fde:	52 cf       	rjmp	.-348    	; 0x2e84 <__mulsf3>

00002fe0 <__fp_mpack>:
    2fe0:	9f 3f       	cpi	r25, 0xFF	; 255
    2fe2:	31 f0       	breq	.+12     	; 0x2ff0 <__fp_mpack_finite+0xc>

00002fe4 <__fp_mpack_finite>:
    2fe4:	91 50       	subi	r25, 0x01	; 1
    2fe6:	20 f4       	brcc	.+8      	; 0x2ff0 <__fp_mpack_finite+0xc>
    2fe8:	87 95       	ror	r24
    2fea:	77 95       	ror	r23
    2fec:	67 95       	ror	r22
    2fee:	b7 95       	ror	r27
    2ff0:	88 0f       	add	r24, r24
    2ff2:	91 1d       	adc	r25, r1
    2ff4:	96 95       	lsr	r25
    2ff6:	87 95       	ror	r24
    2ff8:	97 f9       	bld	r25, 7
    2ffa:	08 95       	ret

00002ffc <__fp_norm2>:
    2ffc:	91 50       	subi	r25, 0x01	; 1
    2ffe:	50 40       	sbci	r21, 0x00	; 0
    3000:	66 0f       	add	r22, r22
    3002:	77 1f       	adc	r23, r23
    3004:	88 1f       	adc	r24, r24
    3006:	d2 f7       	brpl	.-12     	; 0x2ffc <__fp_norm2>
    3008:	08 95       	ret

0000300a <__fp_powsodd>:
    300a:	9f 93       	push	r25
    300c:	8f 93       	push	r24
    300e:	7f 93       	push	r23
    3010:	6f 93       	push	r22
    3012:	ff 93       	push	r31
    3014:	ef 93       	push	r30
    3016:	9b 01       	movw	r18, r22
    3018:	ac 01       	movw	r20, r24
    301a:	34 df       	rcall	.-408    	; 0x2e84 <__mulsf3>
    301c:	ef 91       	pop	r30
    301e:	ff 91       	pop	r31
    3020:	80 de       	rcall	.-768    	; 0x2d22 <__fp_powser>
    3022:	2f 91       	pop	r18
    3024:	3f 91       	pop	r19
    3026:	4f 91       	pop	r20
    3028:	5f 91       	pop	r21
    302a:	2c cf       	rjmp	.-424    	; 0x2e84 <__mulsf3>

0000302c <__divmodhi4>:
    302c:	97 fb       	bst	r25, 7
    302e:	07 2e       	mov	r0, r23
    3030:	16 f4       	brtc	.+4      	; 0x3036 <__divmodhi4+0xa>
    3032:	00 94       	com	r0
    3034:	07 d0       	rcall	.+14     	; 0x3044 <__divmodhi4_neg1>
    3036:	77 fd       	sbrc	r23, 7
    3038:	09 d0       	rcall	.+18     	; 0x304c <__divmodhi4_neg2>
    303a:	0e 94 2a 18 	call	0x3054	; 0x3054 <__udivmodhi4>
    303e:	07 fc       	sbrc	r0, 7
    3040:	05 d0       	rcall	.+10     	; 0x304c <__divmodhi4_neg2>
    3042:	3e f4       	brtc	.+14     	; 0x3052 <__divmodhi4_exit>

00003044 <__divmodhi4_neg1>:
    3044:	90 95       	com	r25
    3046:	81 95       	neg	r24
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	08 95       	ret

0000304c <__divmodhi4_neg2>:
    304c:	70 95       	com	r23
    304e:	61 95       	neg	r22
    3050:	7f 4f       	sbci	r23, 0xFF	; 255

00003052 <__divmodhi4_exit>:
    3052:	08 95       	ret

00003054 <__udivmodhi4>:
    3054:	aa 1b       	sub	r26, r26
    3056:	bb 1b       	sub	r27, r27
    3058:	51 e1       	ldi	r21, 0x11	; 17
    305a:	07 c0       	rjmp	.+14     	; 0x306a <__udivmodhi4_ep>

0000305c <__udivmodhi4_loop>:
    305c:	aa 1f       	adc	r26, r26
    305e:	bb 1f       	adc	r27, r27
    3060:	a6 17       	cp	r26, r22
    3062:	b7 07       	cpc	r27, r23
    3064:	10 f0       	brcs	.+4      	; 0x306a <__udivmodhi4_ep>
    3066:	a6 1b       	sub	r26, r22
    3068:	b7 0b       	sbc	r27, r23

0000306a <__udivmodhi4_ep>:
    306a:	88 1f       	adc	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	5a 95       	dec	r21
    3070:	a9 f7       	brne	.-22     	; 0x305c <__udivmodhi4_loop>
    3072:	80 95       	com	r24
    3074:	90 95       	com	r25
    3076:	bc 01       	movw	r22, r24
    3078:	cd 01       	movw	r24, r26
    307a:	08 95       	ret

0000307c <_exit>:
    307c:	f8 94       	cli

0000307e <__stop_program>:
    307e:	ff cf       	rjmp	.-2      	; 0x307e <__stop_program>
