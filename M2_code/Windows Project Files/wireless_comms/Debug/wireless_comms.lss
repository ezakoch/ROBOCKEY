
wireless_comms.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001fa4  00002038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001fa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006a  00800104  00800104  0000203c  2**0
                  ALLOC
  3 .stab         000035ac  00000000  00000000  0000203c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f10  00000000  00000000  000055e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  000064f8  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000188  00000000  00000000  00006527  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000018d0  00000000  00000000  000066af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000006c4  00000000  00000000  00007f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000ae5  00000000  00000000  00008643  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000039c  00000000  00000000  00009128  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000061e  00000000  00000000  000094c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000011ed  00000000  00000000  00009ae2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000150  00000000  00000000  0000accf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__vector_41>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	08 4a       	sbci	r16, 0xA8	; 168
      ae:	d7 3b       	cpi	r29, 0xB7	; 183
      b0:	3b ce       	rjmp	.-906    	; 0xfffffd28 <__eeprom_end+0xff7efd28>
      b2:	01 6e       	ori	r16, 0xE1	; 225
      b4:	84 bc       	out	0x24, r8	; 36
      b6:	bf fd       	.word	0xfdbf	; ????
      b8:	c1 2f       	mov	r28, r17
      ba:	3d 6c       	ori	r19, 0xCD	; 205
      bc:	74 31       	cpi	r23, 0x14	; 20
      be:	9a bd       	out	0x2a, r25	; 42
      c0:	56 83       	std	Z+6, r21	; 0x06
      c2:	3d da       	rcall	.-2950   	; 0xfffff53e <__eeprom_end+0xff7ef53e>
      c4:	3d 00       	.word	0x003d	; ????
      c6:	c7 7f       	andi	r28, 0xF7	; 247
      c8:	11 be       	out	0x31, r1	; 49
      ca:	d9 e4       	ldi	r29, 0x49	; 73
      cc:	bb 4c       	sbci	r27, 0xCB	; 203
      ce:	3e 91       	ld	r19, -X
      d0:	6b aa       	std	Y+51, r6	; 0x33
      d2:	aa be       	out	0x3a, r10	; 58
      d4:	00 00       	nop
      d6:	00 80       	ld	r0, Z
      d8:	3f 05       	cpc	r19, r15
      da:	a8 4c       	sbci	r26, 0xC8	; 200
      dc:	cd b2       	in	r12, 0x1d	; 29
      de:	d4 4e       	sbci	r29, 0xE4	; 228
      e0:	b9 38       	cpi	r27, 0x89	; 137
      e2:	36 a9       	ldd	r19, Z+54	; 0x36
      e4:	02 0c       	add	r0, r2
      e6:	50 b9       	out	0x00, r21	; 0
      e8:	91 86       	std	Z+9, r9	; 0x09
      ea:	88 08       	sbc	r8, r8
      ec:	3c a6       	std	Y+44, r3	; 0x2c
      ee:	aa aa       	std	Y+50, r10	; 0x32
      f0:	2a be       	out	0x3a, r2	; 58
      f2:	00 00       	nop
      f4:	00 80       	ld	r0, Z
      f6:	3f 00       	.word	0x003f	; ????

000000f8 <__ctors_end>:
      f8:	11 24       	eor	r1, r1
      fa:	1f be       	out	0x3f, r1	; 63
      fc:	cf ef       	ldi	r28, 0xFF	; 255
      fe:	da e0       	ldi	r29, 0x0A	; 10
     100:	de bf       	out	0x3e, r29	; 62
     102:	cd bf       	out	0x3d, r28	; 61

00000104 <__do_copy_data>:
     104:	11 e0       	ldi	r17, 0x01	; 1
     106:	a0 e0       	ldi	r26, 0x00	; 0
     108:	b1 e0       	ldi	r27, 0x01	; 1
     10a:	e4 ea       	ldi	r30, 0xA4	; 164
     10c:	ff e1       	ldi	r31, 0x1F	; 31
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x10>
     110:	05 90       	lpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a4 30       	cpi	r26, 0x04	; 4
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0xc>

0000011a <__do_clear_bss>:
     11a:	21 e0       	ldi	r18, 0x01	; 1
     11c:	a4 e0       	ldi	r26, 0x04	; 4
     11e:	b1 e0       	ldi	r27, 0x01	; 1
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ae 36       	cpi	r26, 0x6E	; 110
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 83 09 	call	0x1306	; 0x1306 <main>
     12e:	0c 94 d0 0f 	jmp	0x1fa0	; 0x1fa0 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <localize>:

// --------------------------------------------------------------
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
     136:	2f 92       	push	r2
     138:	3f 92       	push	r3
     13a:	4f 92       	push	r4
     13c:	5f 92       	push	r5
     13e:	6f 92       	push	r6
     140:	7f 92       	push	r7
     142:	8f 92       	push	r8
     144:	9f 92       	push	r9
     146:	af 92       	push	r10
     148:	bf 92       	push	r11
     14a:	cf 92       	push	r12
     14c:	df 92       	push	r13
     14e:	ef 92       	push	r14
     150:	ff 92       	push	r15
     152:	0f 93       	push	r16
     154:	1f 93       	push	r17
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	cd b7       	in	r28, 0x3d	; 61
     15c:	de b7       	in	r29, 0x3e	; 62
     15e:	28 97       	sbiw	r28, 0x08	; 8
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	f8 94       	cli
     164:	de bf       	out	0x3e, r29	; 62
     166:	0f be       	out	0x3f, r0	; 63
     168:	cd bf       	out	0x3d, r28	; 61
     16a:	98 86       	std	Y+8, r9	; 0x08
     16c:	8f 82       	std	Y+7, r8	; 0x07
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    
    flag_no_good_stars = 0;
     16e:	10 92 05 01 	sts	0x0105, r1
     172:	10 92 04 01 	sts	0x0104, r1
    
    if ((x1==1023)||(x2==1023)||(x3==1023)||(x4==1023)||(y1==1023)||(y2==1023)||(y3==1023)||(y4==1023)) {
     176:	8f 3f       	cpi	r24, 0xFF	; 255
     178:	e3 e0       	ldi	r30, 0x03	; 3
     17a:	9e 07       	cpc	r25, r30
     17c:	01 f1       	breq	.+64     	; 0x1be <localize+0x88>
     17e:	6f 3f       	cpi	r22, 0xFF	; 255
     180:	f3 e0       	ldi	r31, 0x03	; 3
     182:	7f 07       	cpc	r23, r31
     184:	e1 f0       	breq	.+56     	; 0x1be <localize+0x88>
     186:	4f 3f       	cpi	r20, 0xFF	; 255
     188:	e3 e0       	ldi	r30, 0x03	; 3
     18a:	5e 07       	cpc	r21, r30
     18c:	c1 f0       	breq	.+48     	; 0x1be <localize+0x88>
     18e:	2f 3f       	cpi	r18, 0xFF	; 255
     190:	f3 e0       	ldi	r31, 0x03	; 3
     192:	3f 07       	cpc	r19, r31
     194:	a1 f0       	breq	.+40     	; 0x1be <localize+0x88>
     196:	0f 3f       	cpi	r16, 0xFF	; 255
     198:	e3 e0       	ldi	r30, 0x03	; 3
     19a:	1e 07       	cpc	r17, r30
     19c:	81 f0       	breq	.+32     	; 0x1be <localize+0x88>
     19e:	ff ef       	ldi	r31, 0xFF	; 255
     1a0:	ef 16       	cp	r14, r31
     1a2:	f3 e0       	ldi	r31, 0x03	; 3
     1a4:	ff 06       	cpc	r15, r31
     1a6:	59 f0       	breq	.+22     	; 0x1be <localize+0x88>
     1a8:	ef ef       	ldi	r30, 0xFF	; 255
     1aa:	ce 16       	cp	r12, r30
     1ac:	e3 e0       	ldi	r30, 0x03	; 3
     1ae:	de 06       	cpc	r13, r30
     1b0:	31 f0       	breq	.+12     	; 0x1be <localize+0x88>
     1b2:	ff ef       	ldi	r31, 0xFF	; 255
     1b4:	af 16       	cp	r10, r31
     1b6:	f3 e0       	ldi	r31, 0x03	; 3
     1b8:	bf 06       	cpc	r11, r31
     1ba:	09 f0       	breq	.+2      	; 0x1be <localize+0x88>
     1bc:	b0 c6       	rjmp	.+3424   	; 0xf1e <__stack+0x41f>
        flag_no_good_stars = 1;
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	90 93 05 01 	sts	0x0105, r25
     1c6:	80 93 04 01 	sts	0x0104, r24
     1ca:	d1 c3       	rjmp	.+1954   	; 0x96e <localize+0x838>
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
            if (distances[i] > max_distance) {
     1cc:	f8 01       	movw	r30, r16
     1ce:	a0 80       	ld	r10, Z
     1d0:	b1 80       	ldd	r11, Z+1	; 0x01
     1d2:	c2 80       	ldd	r12, Z+2	; 0x02
     1d4:	d3 80       	ldd	r13, Z+3	; 0x03
     1d6:	0c 5f       	subi	r16, 0xFC	; 252
     1d8:	1f 4f       	sbci	r17, 0xFF	; 255
     1da:	26 2d       	mov	r18, r6
     1dc:	37 2d       	mov	r19, r7
     1de:	48 2d       	mov	r20, r8
     1e0:	59 2d       	mov	r21, r9
     1e2:	6a 2d       	mov	r22, r10
     1e4:	7b 2d       	mov	r23, r11
     1e6:	8c 2d       	mov	r24, r12
     1e8:	9d 2d       	mov	r25, r13
     1ea:	0e 94 c9 0e 	call	0x1d92	; 0x1d92 <__gesf2>
     1ee:	18 16       	cp	r1, r24
     1f0:	34 f4       	brge	.+12     	; 0x1fe <localize+0xc8>
     1f2:	fa 82       	std	Y+2, r15	; 0x02
     1f4:	e9 82       	std	Y+1, r14	; 0x01
                max_distance = distances[i];
     1f6:	6a 2c       	mov	r6, r10
     1f8:	7b 2c       	mov	r7, r11
     1fa:	8c 2c       	mov	r8, r12
     1fc:	9d 2c       	mov	r9, r13
                max_id = i;
            }
            if (distances[i] < min_distance) {
     1fe:	22 2d       	mov	r18, r2
     200:	33 2d       	mov	r19, r3
     202:	44 2d       	mov	r20, r4
     204:	55 2d       	mov	r21, r5
     206:	6a 2d       	mov	r22, r10
     208:	7b 2d       	mov	r23, r11
     20a:	8c 2d       	mov	r24, r12
     20c:	9d 2d       	mov	r25, r13
     20e:	0e 94 19 0d 	call	0x1a32	; 0x1a32 <__cmpsf2>
     212:	88 23       	and	r24, r24
     214:	34 f4       	brge	.+12     	; 0x222 <localize+0xec>
     216:	fe 82       	std	Y+6, r15	; 0x06
     218:	ed 82       	std	Y+5, r14	; 0x05
                min_distance = distances[i];
     21a:	2a 2c       	mov	r2, r10
     21c:	3b 2c       	mov	r3, r11
     21e:	4c 2c       	mov	r4, r12
     220:	5d 2c       	mov	r5, r13
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
        
        int i;
        for (i=0; i<6; i++) {
     222:	ff ef       	ldi	r31, 0xFF	; 255
     224:	ef 1a       	sub	r14, r31
     226:	ff 0a       	sbc	r15, r31
     228:	86 e0       	ldi	r24, 0x06	; 6
     22a:	e8 16       	cp	r14, r24
     22c:	f1 04       	cpc	r15, r1
     22e:	71 f6       	brne	.-100    	; 0x1cc <localize+0x96>
                min_id = i;
            }
        }
        
        
        switch (max_id) {
     230:	e9 81       	ldd	r30, Y+1	; 0x01
     232:	fa 81       	ldd	r31, Y+2	; 0x02
     234:	e2 30       	cpi	r30, 0x02	; 2
     236:	f1 05       	cpc	r31, r1
     238:	09 f4       	brne	.+2      	; 0x23c <localize+0x106>
     23a:	3e c1       	rjmp	.+636    	; 0x4b8 <localize+0x382>
     23c:	34 f4       	brge	.+12     	; 0x24a <localize+0x114>
     23e:	30 97       	sbiw	r30, 0x00	; 0
     240:	81 f0       	breq	.+32     	; 0x262 <localize+0x12c>
     242:	31 97       	sbiw	r30, 0x01	; 1
     244:	09 f0       	breq	.+2      	; 0x248 <localize+0x112>
     246:	8d c3       	rjmp	.+1818   	; 0x962 <localize+0x82c>
     248:	a2 c0       	rjmp	.+324    	; 0x38e <localize+0x258>
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	84 30       	cpi	r24, 0x04	; 4
     250:	91 05       	cpc	r25, r1
     252:	09 f4       	brne	.+2      	; 0x256 <localize+0x120>
     254:	5b c2       	rjmp	.+1206   	; 0x70c <localize+0x5d6>
     256:	0c f4       	brge	.+2      	; 0x25a <localize+0x124>
     258:	c4 c1       	rjmp	.+904    	; 0x5e2 <localize+0x4ac>
     25a:	05 97       	sbiw	r24, 0x05	; 5
     25c:	09 f0       	breq	.+2      	; 0x260 <localize+0x12a>
     25e:	81 c3       	rjmp	.+1794   	; 0x962 <localize+0x82c>
     260:	ea c2       	rjmp	.+1492   	; 0x836 <localize+0x700>
            case 0:
                switch (min_id) {
     262:	ed 81       	ldd	r30, Y+5	; 0x05
     264:	fe 81       	ldd	r31, Y+6	; 0x06
     266:	e2 30       	cpi	r30, 0x02	; 2
     268:	f1 05       	cpc	r31, r1
     26a:	39 f1       	breq	.+78     	; 0x2ba <localize+0x184>
     26c:	24 f4       	brge	.+8      	; 0x276 <localize+0x140>
     26e:	31 97       	sbiw	r30, 0x01	; 1
     270:	09 f0       	breq	.+2      	; 0x274 <localize+0x13e>
     272:	6e c0       	rjmp	.+220    	; 0x350 <localize+0x21a>
     274:	09 c0       	rjmp	.+18     	; 0x288 <localize+0x152>
     276:	8d 81       	ldd	r24, Y+5	; 0x05
     278:	9e 81       	ldd	r25, Y+6	; 0x06
     27a:	83 30       	cpi	r24, 0x03	; 3
     27c:	91 05       	cpc	r25, r1
     27e:	b1 f1       	breq	.+108    	; 0x2ec <localize+0x1b6>
     280:	04 97       	sbiw	r24, 0x04	; 4
     282:	09 f0       	breq	.+2      	; 0x286 <localize+0x150>
     284:	65 c0       	rjmp	.+202    	; 0x350 <localize+0x21a>
     286:	4b c0       	rjmp	.+150    	; 0x31e <localize+0x1e8>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QB; Q4=QD;
     288:	8a e3       	ldi	r24, 0x3A	; 58
     28a:	91 e0       	ldi	r25, 0x01	; 1
     28c:	90 93 61 01 	sts	0x0161, r25
     290:	80 93 60 01 	sts	0x0160, r24
     294:	82 e3       	ldi	r24, 0x32	; 50
     296:	91 e0       	ldi	r25, 0x01	; 1
     298:	90 93 47 01 	sts	0x0147, r25
     29c:	80 93 46 01 	sts	0x0146, r24
     2a0:	86 e3       	ldi	r24, 0x36	; 54
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	90 93 49 01 	sts	0x0149, r25
     2a8:	80 93 48 01 	sts	0x0148, r24
     2ac:	8e e2       	ldi	r24, 0x2E	; 46
     2ae:	91 e0       	ldi	r25, 0x01	; 1
     2b0:	90 93 5b 01 	sts	0x015B, r25
     2b4:	80 93 5a 01 	sts	0x015A, r24
                        break;
     2b8:	54 c3       	rjmp	.+1704   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QB; Q4=QC;
     2ba:	8a e3       	ldi	r24, 0x3A	; 58
     2bc:	91 e0       	ldi	r25, 0x01	; 1
     2be:	90 93 61 01 	sts	0x0161, r25
     2c2:	80 93 60 01 	sts	0x0160, r24
     2c6:	8e e2       	ldi	r24, 0x2E	; 46
     2c8:	91 e0       	ldi	r25, 0x01	; 1
     2ca:	90 93 47 01 	sts	0x0147, r25
     2ce:	80 93 46 01 	sts	0x0146, r24
     2d2:	86 e3       	ldi	r24, 0x36	; 54
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	90 93 49 01 	sts	0x0149, r25
     2da:	80 93 48 01 	sts	0x0148, r24
     2de:	82 e3       	ldi	r24, 0x32	; 50
     2e0:	91 e0       	ldi	r25, 0x01	; 1
     2e2:	90 93 5b 01 	sts	0x015B, r25
     2e6:	80 93 5a 01 	sts	0x015A, r24
                        break;
     2ea:	3b c3       	rjmp	.+1654   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QA; Q4=QD;
     2ec:	86 e3       	ldi	r24, 0x36	; 54
     2ee:	91 e0       	ldi	r25, 0x01	; 1
     2f0:	90 93 61 01 	sts	0x0161, r25
     2f4:	80 93 60 01 	sts	0x0160, r24
     2f8:	82 e3       	ldi	r24, 0x32	; 50
     2fa:	91 e0       	ldi	r25, 0x01	; 1
     2fc:	90 93 47 01 	sts	0x0147, r25
     300:	80 93 46 01 	sts	0x0146, r24
     304:	8a e3       	ldi	r24, 0x3A	; 58
     306:	91 e0       	ldi	r25, 0x01	; 1
     308:	90 93 49 01 	sts	0x0149, r25
     30c:	80 93 48 01 	sts	0x0148, r24
     310:	8e e2       	ldi	r24, 0x2E	; 46
     312:	91 e0       	ldi	r25, 0x01	; 1
     314:	90 93 5b 01 	sts	0x015B, r25
     318:	80 93 5a 01 	sts	0x015A, r24
                        break;
     31c:	22 c3       	rjmp	.+1604   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QA; Q4=QC;
     31e:	86 e3       	ldi	r24, 0x36	; 54
     320:	91 e0       	ldi	r25, 0x01	; 1
     322:	90 93 61 01 	sts	0x0161, r25
     326:	80 93 60 01 	sts	0x0160, r24
     32a:	8e e2       	ldi	r24, 0x2E	; 46
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	90 93 47 01 	sts	0x0147, r25
     332:	80 93 46 01 	sts	0x0146, r24
     336:	8a e3       	ldi	r24, 0x3A	; 58
     338:	91 e0       	ldi	r25, 0x01	; 1
     33a:	90 93 49 01 	sts	0x0149, r25
     33e:	80 93 48 01 	sts	0x0148, r24
     342:	82 e3       	ldi	r24, 0x32	; 50
     344:	91 e0       	ldi	r25, 0x01	; 1
     346:	90 93 5b 01 	sts	0x015B, r25
     34a:	80 93 5a 01 	sts	0x015A, r24
                        break;
     34e:	09 c3       	rjmp	.+1554   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     350:	8a e3       	ldi	r24, 0x3A	; 58
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	90 93 61 01 	sts	0x0161, r25
     358:	80 93 60 01 	sts	0x0160, r24
     35c:	86 e3       	ldi	r24, 0x36	; 54
     35e:	91 e0       	ldi	r25, 0x01	; 1
     360:	90 93 47 01 	sts	0x0147, r25
     364:	80 93 46 01 	sts	0x0146, r24
     368:	82 e3       	ldi	r24, 0x32	; 50
     36a:	91 e0       	ldi	r25, 0x01	; 1
     36c:	90 93 49 01 	sts	0x0149, r25
     370:	80 93 48 01 	sts	0x0148, r24
     374:	8e e2       	ldi	r24, 0x2E	; 46
     376:	91 e0       	ldi	r25, 0x01	; 1
     378:	90 93 5b 01 	sts	0x015B, r25
     37c:	80 93 5a 01 	sts	0x015A, r24
                        flag_no_good_stars = 1;
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	90 93 05 01 	sts	0x0105, r25
     388:	80 93 04 01 	sts	0x0104, r24
                        break;
     38c:	f0 c2       	rjmp	.+1504   	; 0x96e <localize+0x838>
                }
                break;
                
            case 1:
                switch (min_id) {
     38e:	ed 81       	ldd	r30, Y+5	; 0x05
     390:	fe 81       	ldd	r31, Y+6	; 0x06
     392:	e2 30       	cpi	r30, 0x02	; 2
     394:	f1 05       	cpc	r31, r1
     396:	31 f1       	breq	.+76     	; 0x3e4 <localize+0x2ae>
     398:	1c f4       	brge	.+6      	; 0x3a0 <localize+0x26a>
     39a:	ef 2b       	or	r30, r31
     39c:	51 f0       	breq	.+20     	; 0x3b2 <localize+0x27c>
     39e:	6d c0       	rjmp	.+218    	; 0x47a <localize+0x344>
     3a0:	8d 81       	ldd	r24, Y+5	; 0x05
     3a2:	9e 81       	ldd	r25, Y+6	; 0x06
     3a4:	83 30       	cpi	r24, 0x03	; 3
     3a6:	91 05       	cpc	r25, r1
     3a8:	b1 f1       	breq	.+108    	; 0x416 <localize+0x2e0>
     3aa:	05 97       	sbiw	r24, 0x05	; 5
     3ac:	09 f0       	breq	.+2      	; 0x3b0 <localize+0x27a>
     3ae:	65 c0       	rjmp	.+202    	; 0x47a <localize+0x344>
     3b0:	4b c0       	rjmp	.+150    	; 0x448 <localize+0x312>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     3b2:	8a e3       	ldi	r24, 0x3A	; 58
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	90 93 61 01 	sts	0x0161, r25
     3ba:	80 93 60 01 	sts	0x0160, r24
     3be:	86 e3       	ldi	r24, 0x36	; 54
     3c0:	91 e0       	ldi	r25, 0x01	; 1
     3c2:	90 93 47 01 	sts	0x0147, r25
     3c6:	80 93 46 01 	sts	0x0146, r24
     3ca:	82 e3       	ldi	r24, 0x32	; 50
     3cc:	91 e0       	ldi	r25, 0x01	; 1
     3ce:	90 93 49 01 	sts	0x0149, r25
     3d2:	80 93 48 01 	sts	0x0148, r24
     3d6:	8e e2       	ldi	r24, 0x2E	; 46
     3d8:	91 e0       	ldi	r25, 0x01	; 1
     3da:	90 93 5b 01 	sts	0x015B, r25
     3de:	80 93 5a 01 	sts	0x015A, r24
                        break;
     3e2:	bf c2       	rjmp	.+1406   	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QA; Q2=QD; Q3=QC; Q4=QB;
     3e4:	8a e3       	ldi	r24, 0x3A	; 58
     3e6:	91 e0       	ldi	r25, 0x01	; 1
     3e8:	90 93 61 01 	sts	0x0161, r25
     3ec:	80 93 60 01 	sts	0x0160, r24
     3f0:	8e e2       	ldi	r24, 0x2E	; 46
     3f2:	91 e0       	ldi	r25, 0x01	; 1
     3f4:	90 93 47 01 	sts	0x0147, r25
     3f8:	80 93 46 01 	sts	0x0146, r24
     3fc:	82 e3       	ldi	r24, 0x32	; 50
     3fe:	91 e0       	ldi	r25, 0x01	; 1
     400:	90 93 49 01 	sts	0x0149, r25
     404:	80 93 48 01 	sts	0x0148, r24
     408:	86 e3       	ldi	r24, 0x36	; 54
     40a:	91 e0       	ldi	r25, 0x01	; 1
     40c:	90 93 5b 01 	sts	0x015B, r25
     410:	80 93 5a 01 	sts	0x015A, r24
                        break;
     414:	a6 c2       	rjmp	.+1356   	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QA; Q4=QD;
     416:	82 e3       	ldi	r24, 0x32	; 50
     418:	91 e0       	ldi	r25, 0x01	; 1
     41a:	90 93 61 01 	sts	0x0161, r25
     41e:	80 93 60 01 	sts	0x0160, r24
     422:	86 e3       	ldi	r24, 0x36	; 54
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	90 93 47 01 	sts	0x0147, r25
     42a:	80 93 46 01 	sts	0x0146, r24
     42e:	8a e3       	ldi	r24, 0x3A	; 58
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	90 93 49 01 	sts	0x0149, r25
     436:	80 93 48 01 	sts	0x0148, r24
     43a:	8e e2       	ldi	r24, 0x2E	; 46
     43c:	91 e0       	ldi	r25, 0x01	; 1
     43e:	90 93 5b 01 	sts	0x015B, r25
     442:	80 93 5a 01 	sts	0x015A, r24
                        break;
     446:	8d c2       	rjmp	.+1306   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QA; Q4=QB;
     448:	82 e3       	ldi	r24, 0x32	; 50
     44a:	91 e0       	ldi	r25, 0x01	; 1
     44c:	90 93 61 01 	sts	0x0161, r25
     450:	80 93 60 01 	sts	0x0160, r24
     454:	8e e2       	ldi	r24, 0x2E	; 46
     456:	91 e0       	ldi	r25, 0x01	; 1
     458:	90 93 47 01 	sts	0x0147, r25
     45c:	80 93 46 01 	sts	0x0146, r24
     460:	8a e3       	ldi	r24, 0x3A	; 58
     462:	91 e0       	ldi	r25, 0x01	; 1
     464:	90 93 49 01 	sts	0x0149, r25
     468:	80 93 48 01 	sts	0x0148, r24
     46c:	86 e3       	ldi	r24, 0x36	; 54
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	90 93 5b 01 	sts	0x015B, r25
     474:	80 93 5a 01 	sts	0x015A, r24
                        break;
     478:	74 c2       	rjmp	.+1256   	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     47a:	8a e3       	ldi	r24, 0x3A	; 58
     47c:	91 e0       	ldi	r25, 0x01	; 1
     47e:	90 93 61 01 	sts	0x0161, r25
     482:	80 93 60 01 	sts	0x0160, r24
     486:	86 e3       	ldi	r24, 0x36	; 54
     488:	91 e0       	ldi	r25, 0x01	; 1
     48a:	90 93 47 01 	sts	0x0147, r25
     48e:	80 93 46 01 	sts	0x0146, r24
     492:	82 e3       	ldi	r24, 0x32	; 50
     494:	91 e0       	ldi	r25, 0x01	; 1
     496:	90 93 49 01 	sts	0x0149, r25
     49a:	80 93 48 01 	sts	0x0148, r24
     49e:	8e e2       	ldi	r24, 0x2E	; 46
     4a0:	91 e0       	ldi	r25, 0x01	; 1
     4a2:	90 93 5b 01 	sts	0x015B, r25
     4a6:	80 93 5a 01 	sts	0x015A, r24
                        flag_no_good_stars = 1;
     4aa:	81 e0       	ldi	r24, 0x01	; 1
     4ac:	90 e0       	ldi	r25, 0x00	; 0
     4ae:	90 93 05 01 	sts	0x0105, r25
     4b2:	80 93 04 01 	sts	0x0104, r24
                        break;
     4b6:	5b c2       	rjmp	.+1206   	; 0x96e <localize+0x838>
                }
                break;
                
            case 2:
                switch (min_id) {
     4b8:	ed 81       	ldd	r30, Y+5	; 0x05
     4ba:	fe 81       	ldd	r31, Y+6	; 0x06
     4bc:	e1 30       	cpi	r30, 0x01	; 1
     4be:	f1 05       	cpc	r31, r1
     4c0:	31 f1       	breq	.+76     	; 0x50e <localize+0x3d8>
     4c2:	1c f4       	brge	.+6      	; 0x4ca <localize+0x394>
     4c4:	ef 2b       	or	r30, r31
     4c6:	51 f0       	breq	.+20     	; 0x4dc <localize+0x3a6>
     4c8:	6d c0       	rjmp	.+218    	; 0x5a4 <localize+0x46e>
     4ca:	8d 81       	ldd	r24, Y+5	; 0x05
     4cc:	9e 81       	ldd	r25, Y+6	; 0x06
     4ce:	84 30       	cpi	r24, 0x04	; 4
     4d0:	91 05       	cpc	r25, r1
     4d2:	b1 f1       	breq	.+108    	; 0x540 <localize+0x40a>
     4d4:	05 97       	sbiw	r24, 0x05	; 5
     4d6:	09 f0       	breq	.+2      	; 0x4da <localize+0x3a4>
     4d8:	65 c0       	rjmp	.+202    	; 0x5a4 <localize+0x46e>
     4da:	4b c0       	rjmp	.+150    	; 0x572 <localize+0x43c>
                    case 0:
                        Q1=QA; Q2=QB; Q3=QD; Q4=QC;
     4dc:	8a e3       	ldi	r24, 0x3A	; 58
     4de:	91 e0       	ldi	r25, 0x01	; 1
     4e0:	90 93 61 01 	sts	0x0161, r25
     4e4:	80 93 60 01 	sts	0x0160, r24
     4e8:	86 e3       	ldi	r24, 0x36	; 54
     4ea:	91 e0       	ldi	r25, 0x01	; 1
     4ec:	90 93 47 01 	sts	0x0147, r25
     4f0:	80 93 46 01 	sts	0x0146, r24
     4f4:	8e e2       	ldi	r24, 0x2E	; 46
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	90 93 49 01 	sts	0x0149, r25
     4fc:	80 93 48 01 	sts	0x0148, r24
     500:	82 e3       	ldi	r24, 0x32	; 50
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	90 93 5b 01 	sts	0x015B, r25
     508:	80 93 5a 01 	sts	0x015A, r24
                        break;
     50c:	2a c2       	rjmp	.+1108   	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QA; Q2=QC; Q3=QD; Q4=QB;
     50e:	8a e3       	ldi	r24, 0x3A	; 58
     510:	91 e0       	ldi	r25, 0x01	; 1
     512:	90 93 61 01 	sts	0x0161, r25
     516:	80 93 60 01 	sts	0x0160, r24
     51a:	82 e3       	ldi	r24, 0x32	; 50
     51c:	91 e0       	ldi	r25, 0x01	; 1
     51e:	90 93 47 01 	sts	0x0147, r25
     522:	80 93 46 01 	sts	0x0146, r24
     526:	8e e2       	ldi	r24, 0x2E	; 46
     528:	91 e0       	ldi	r25, 0x01	; 1
     52a:	90 93 49 01 	sts	0x0149, r25
     52e:	80 93 48 01 	sts	0x0148, r24
     532:	86 e3       	ldi	r24, 0x36	; 54
     534:	91 e0       	ldi	r25, 0x01	; 1
     536:	90 93 5b 01 	sts	0x015B, r25
     53a:	80 93 5a 01 	sts	0x015A, r24
                        break;
     53e:	11 c2       	rjmp	.+1058   	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QA; Q4=QC;
     540:	8e e2       	ldi	r24, 0x2E	; 46
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	90 93 61 01 	sts	0x0161, r25
     548:	80 93 60 01 	sts	0x0160, r24
     54c:	86 e3       	ldi	r24, 0x36	; 54
     54e:	91 e0       	ldi	r25, 0x01	; 1
     550:	90 93 47 01 	sts	0x0147, r25
     554:	80 93 46 01 	sts	0x0146, r24
     558:	8a e3       	ldi	r24, 0x3A	; 58
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	90 93 49 01 	sts	0x0149, r25
     560:	80 93 48 01 	sts	0x0148, r24
     564:	82 e3       	ldi	r24, 0x32	; 50
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 93 5b 01 	sts	0x015B, r25
     56c:	80 93 5a 01 	sts	0x015A, r24
                        break;
     570:	f8 c1       	rjmp	.+1008   	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QA; Q4=QB;
     572:	8e e2       	ldi	r24, 0x2E	; 46
     574:	91 e0       	ldi	r25, 0x01	; 1
     576:	90 93 61 01 	sts	0x0161, r25
     57a:	80 93 60 01 	sts	0x0160, r24
     57e:	82 e3       	ldi	r24, 0x32	; 50
     580:	91 e0       	ldi	r25, 0x01	; 1
     582:	90 93 47 01 	sts	0x0147, r25
     586:	80 93 46 01 	sts	0x0146, r24
     58a:	8a e3       	ldi	r24, 0x3A	; 58
     58c:	91 e0       	ldi	r25, 0x01	; 1
     58e:	90 93 49 01 	sts	0x0149, r25
     592:	80 93 48 01 	sts	0x0148, r24
     596:	86 e3       	ldi	r24, 0x36	; 54
     598:	91 e0       	ldi	r25, 0x01	; 1
     59a:	90 93 5b 01 	sts	0x015B, r25
     59e:	80 93 5a 01 	sts	0x015A, r24
                        break;
     5a2:	df c1       	rjmp	.+958    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     5a4:	8a e3       	ldi	r24, 0x3A	; 58
     5a6:	91 e0       	ldi	r25, 0x01	; 1
     5a8:	90 93 61 01 	sts	0x0161, r25
     5ac:	80 93 60 01 	sts	0x0160, r24
     5b0:	86 e3       	ldi	r24, 0x36	; 54
     5b2:	91 e0       	ldi	r25, 0x01	; 1
     5b4:	90 93 47 01 	sts	0x0147, r25
     5b8:	80 93 46 01 	sts	0x0146, r24
     5bc:	82 e3       	ldi	r24, 0x32	; 50
     5be:	91 e0       	ldi	r25, 0x01	; 1
     5c0:	90 93 49 01 	sts	0x0149, r25
     5c4:	80 93 48 01 	sts	0x0148, r24
     5c8:	8e e2       	ldi	r24, 0x2E	; 46
     5ca:	91 e0       	ldi	r25, 0x01	; 1
     5cc:	90 93 5b 01 	sts	0x015B, r25
     5d0:	80 93 5a 01 	sts	0x015A, r24
                        flag_no_good_stars = 1;
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	90 93 05 01 	sts	0x0105, r25
     5dc:	80 93 04 01 	sts	0x0104, r24
                        break;
     5e0:	c6 c1       	rjmp	.+908    	; 0x96e <localize+0x838>
                }
                break;
                
            case 3:
                switch (min_id) {
     5e2:	ed 81       	ldd	r30, Y+5	; 0x05
     5e4:	fe 81       	ldd	r31, Y+6	; 0x06
     5e6:	e1 30       	cpi	r30, 0x01	; 1
     5e8:	f1 05       	cpc	r31, r1
     5ea:	31 f1       	breq	.+76     	; 0x638 <localize+0x502>
     5ec:	1c f4       	brge	.+6      	; 0x5f4 <localize+0x4be>
     5ee:	ef 2b       	or	r30, r31
     5f0:	51 f0       	breq	.+20     	; 0x606 <localize+0x4d0>
     5f2:	6d c0       	rjmp	.+218    	; 0x6ce <localize+0x598>
     5f4:	8d 81       	ldd	r24, Y+5	; 0x05
     5f6:	9e 81       	ldd	r25, Y+6	; 0x06
     5f8:	84 30       	cpi	r24, 0x04	; 4
     5fa:	91 05       	cpc	r25, r1
     5fc:	b1 f1       	breq	.+108    	; 0x66a <localize+0x534>
     5fe:	05 97       	sbiw	r24, 0x05	; 5
     600:	09 f0       	breq	.+2      	; 0x604 <localize+0x4ce>
     602:	65 c0       	rjmp	.+202    	; 0x6ce <localize+0x598>
     604:	4b c0       	rjmp	.+150    	; 0x69c <localize+0x566>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QC; Q4=QD;
     606:	86 e3       	ldi	r24, 0x36	; 54
     608:	91 e0       	ldi	r25, 0x01	; 1
     60a:	90 93 61 01 	sts	0x0161, r25
     60e:	80 93 60 01 	sts	0x0160, r24
     612:	8a e3       	ldi	r24, 0x3A	; 58
     614:	91 e0       	ldi	r25, 0x01	; 1
     616:	90 93 47 01 	sts	0x0147, r25
     61a:	80 93 46 01 	sts	0x0146, r24
     61e:	82 e3       	ldi	r24, 0x32	; 50
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 49 01 	sts	0x0149, r25
     626:	80 93 48 01 	sts	0x0148, r24
     62a:	8e e2       	ldi	r24, 0x2E	; 46
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	90 93 5b 01 	sts	0x015B, r25
     632:	80 93 5a 01 	sts	0x015A, r24
                        break;
     636:	95 c1       	rjmp	.+810    	; 0x962 <localize+0x82c>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QB; Q4=QD;
     638:	82 e3       	ldi	r24, 0x32	; 50
     63a:	91 e0       	ldi	r25, 0x01	; 1
     63c:	90 93 61 01 	sts	0x0161, r25
     640:	80 93 60 01 	sts	0x0160, r24
     644:	8a e3       	ldi	r24, 0x3A	; 58
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	90 93 47 01 	sts	0x0147, r25
     64c:	80 93 46 01 	sts	0x0146, r24
     650:	86 e3       	ldi	r24, 0x36	; 54
     652:	91 e0       	ldi	r25, 0x01	; 1
     654:	90 93 49 01 	sts	0x0149, r25
     658:	80 93 48 01 	sts	0x0148, r24
     65c:	8e e2       	ldi	r24, 0x2E	; 46
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	90 93 5b 01 	sts	0x015B, r25
     664:	80 93 5a 01 	sts	0x015A, r24
                        break;
     668:	7c c1       	rjmp	.+760    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QB; Q2=QD; Q3=QC; Q4=QA;
     66a:	86 e3       	ldi	r24, 0x36	; 54
     66c:	91 e0       	ldi	r25, 0x01	; 1
     66e:	90 93 61 01 	sts	0x0161, r25
     672:	80 93 60 01 	sts	0x0160, r24
     676:	8e e2       	ldi	r24, 0x2E	; 46
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	90 93 47 01 	sts	0x0147, r25
     67e:	80 93 46 01 	sts	0x0146, r24
     682:	82 e3       	ldi	r24, 0x32	; 50
     684:	91 e0       	ldi	r25, 0x01	; 1
     686:	90 93 49 01 	sts	0x0149, r25
     68a:	80 93 48 01 	sts	0x0148, r24
     68e:	8a e3       	ldi	r24, 0x3A	; 58
     690:	91 e0       	ldi	r25, 0x01	; 1
     692:	90 93 5b 01 	sts	0x015B, r25
     696:	80 93 5a 01 	sts	0x015A, r24
                        break;
     69a:	63 c1       	rjmp	.+710    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QC; Q2=QD; Q3=QB; Q4=QA;
     69c:	82 e3       	ldi	r24, 0x32	; 50
     69e:	91 e0       	ldi	r25, 0x01	; 1
     6a0:	90 93 61 01 	sts	0x0161, r25
     6a4:	80 93 60 01 	sts	0x0160, r24
     6a8:	8e e2       	ldi	r24, 0x2E	; 46
     6aa:	91 e0       	ldi	r25, 0x01	; 1
     6ac:	90 93 47 01 	sts	0x0147, r25
     6b0:	80 93 46 01 	sts	0x0146, r24
     6b4:	86 e3       	ldi	r24, 0x36	; 54
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	90 93 49 01 	sts	0x0149, r25
     6bc:	80 93 48 01 	sts	0x0148, r24
     6c0:	8a e3       	ldi	r24, 0x3A	; 58
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	90 93 5b 01 	sts	0x015B, r25
     6c8:	80 93 5a 01 	sts	0x015A, r24
                        break;
     6cc:	4a c1       	rjmp	.+660    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     6ce:	8a e3       	ldi	r24, 0x3A	; 58
     6d0:	91 e0       	ldi	r25, 0x01	; 1
     6d2:	90 93 61 01 	sts	0x0161, r25
     6d6:	80 93 60 01 	sts	0x0160, r24
     6da:	86 e3       	ldi	r24, 0x36	; 54
     6dc:	91 e0       	ldi	r25, 0x01	; 1
     6de:	90 93 47 01 	sts	0x0147, r25
     6e2:	80 93 46 01 	sts	0x0146, r24
     6e6:	82 e3       	ldi	r24, 0x32	; 50
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	90 93 49 01 	sts	0x0149, r25
     6ee:	80 93 48 01 	sts	0x0148, r24
     6f2:	8e e2       	ldi	r24, 0x2E	; 46
     6f4:	91 e0       	ldi	r25, 0x01	; 1
     6f6:	90 93 5b 01 	sts	0x015B, r25
     6fa:	80 93 5a 01 	sts	0x015A, r24
                        flag_no_good_stars = 1;
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	90 93 05 01 	sts	0x0105, r25
     706:	80 93 04 01 	sts	0x0104, r24
                        break;
     70a:	31 c1       	rjmp	.+610    	; 0x96e <localize+0x838>
                }
                break;
                
            case 4:
                switch (min_id) {
     70c:	ed 81       	ldd	r30, Y+5	; 0x05
     70e:	fe 81       	ldd	r31, Y+6	; 0x06
     710:	e2 30       	cpi	r30, 0x02	; 2
     712:	f1 05       	cpc	r31, r1
     714:	31 f1       	breq	.+76     	; 0x762 <localize+0x62c>
     716:	1c f4       	brge	.+6      	; 0x71e <localize+0x5e8>
     718:	ef 2b       	or	r30, r31
     71a:	51 f0       	breq	.+20     	; 0x730 <localize+0x5fa>
     71c:	6d c0       	rjmp	.+218    	; 0x7f8 <localize+0x6c2>
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	9e 81       	ldd	r25, Y+6	; 0x06
     722:	83 30       	cpi	r24, 0x03	; 3
     724:	91 05       	cpc	r25, r1
     726:	b1 f1       	breq	.+108    	; 0x794 <localize+0x65e>
     728:	05 97       	sbiw	r24, 0x05	; 5
     72a:	09 f0       	breq	.+2      	; 0x72e <localize+0x5f8>
     72c:	65 c0       	rjmp	.+202    	; 0x7f8 <localize+0x6c2>
     72e:	4b c0       	rjmp	.+150    	; 0x7c6 <localize+0x690>
                    case 0:
                        Q1=QB; Q2=QA; Q3=QD; Q4=QC;
     730:	86 e3       	ldi	r24, 0x36	; 54
     732:	91 e0       	ldi	r25, 0x01	; 1
     734:	90 93 61 01 	sts	0x0161, r25
     738:	80 93 60 01 	sts	0x0160, r24
     73c:	8a e3       	ldi	r24, 0x3A	; 58
     73e:	91 e0       	ldi	r25, 0x01	; 1
     740:	90 93 47 01 	sts	0x0147, r25
     744:	80 93 46 01 	sts	0x0146, r24
     748:	8e e2       	ldi	r24, 0x2E	; 46
     74a:	91 e0       	ldi	r25, 0x01	; 1
     74c:	90 93 49 01 	sts	0x0149, r25
     750:	80 93 48 01 	sts	0x0148, r24
     754:	82 e3       	ldi	r24, 0x32	; 50
     756:	91 e0       	ldi	r25, 0x01	; 1
     758:	90 93 5b 01 	sts	0x015B, r25
     75c:	80 93 5a 01 	sts	0x015A, r24
                        break;
     760:	00 c1       	rjmp	.+512    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QB; Q4=QC;
     762:	8e e2       	ldi	r24, 0x2E	; 46
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	90 93 61 01 	sts	0x0161, r25
     76a:	80 93 60 01 	sts	0x0160, r24
     76e:	8a e3       	ldi	r24, 0x3A	; 58
     770:	91 e0       	ldi	r25, 0x01	; 1
     772:	90 93 47 01 	sts	0x0147, r25
     776:	80 93 46 01 	sts	0x0146, r24
     77a:	86 e3       	ldi	r24, 0x36	; 54
     77c:	91 e0       	ldi	r25, 0x01	; 1
     77e:	90 93 49 01 	sts	0x0149, r25
     782:	80 93 48 01 	sts	0x0148, r24
     786:	82 e3       	ldi	r24, 0x32	; 50
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	90 93 5b 01 	sts	0x015B, r25
     78e:	80 93 5a 01 	sts	0x015A, r24
                        break;
     792:	e7 c0       	rjmp	.+462    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QB; Q2=QC; Q3=QD; Q4=QA;
     794:	86 e3       	ldi	r24, 0x36	; 54
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 61 01 	sts	0x0161, r25
     79c:	80 93 60 01 	sts	0x0160, r24
     7a0:	82 e3       	ldi	r24, 0x32	; 50
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 47 01 	sts	0x0147, r25
     7a8:	80 93 46 01 	sts	0x0146, r24
     7ac:	8e e2       	ldi	r24, 0x2E	; 46
     7ae:	91 e0       	ldi	r25, 0x01	; 1
     7b0:	90 93 49 01 	sts	0x0149, r25
     7b4:	80 93 48 01 	sts	0x0148, r24
     7b8:	8a e3       	ldi	r24, 0x3A	; 58
     7ba:	91 e0       	ldi	r25, 0x01	; 1
     7bc:	90 93 5b 01 	sts	0x015B, r25
     7c0:	80 93 5a 01 	sts	0x015A, r24
                        break;
     7c4:	ce c0       	rjmp	.+412    	; 0x962 <localize+0x82c>
                    case 5:
                        Q1=QD; Q2=QC; Q3=QB; Q4=QA;
     7c6:	8e e2       	ldi	r24, 0x2E	; 46
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 61 01 	sts	0x0161, r25
     7ce:	80 93 60 01 	sts	0x0160, r24
     7d2:	82 e3       	ldi	r24, 0x32	; 50
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	90 93 47 01 	sts	0x0147, r25
     7da:	80 93 46 01 	sts	0x0146, r24
     7de:	86 e3       	ldi	r24, 0x36	; 54
     7e0:	91 e0       	ldi	r25, 0x01	; 1
     7e2:	90 93 49 01 	sts	0x0149, r25
     7e6:	80 93 48 01 	sts	0x0148, r24
     7ea:	8a e3       	ldi	r24, 0x3A	; 58
     7ec:	91 e0       	ldi	r25, 0x01	; 1
     7ee:	90 93 5b 01 	sts	0x015B, r25
     7f2:	80 93 5a 01 	sts	0x015A, r24
                        break;
     7f6:	b5 c0       	rjmp	.+362    	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     7f8:	8a e3       	ldi	r24, 0x3A	; 58
     7fa:	91 e0       	ldi	r25, 0x01	; 1
     7fc:	90 93 61 01 	sts	0x0161, r25
     800:	80 93 60 01 	sts	0x0160, r24
     804:	86 e3       	ldi	r24, 0x36	; 54
     806:	91 e0       	ldi	r25, 0x01	; 1
     808:	90 93 47 01 	sts	0x0147, r25
     80c:	80 93 46 01 	sts	0x0146, r24
     810:	82 e3       	ldi	r24, 0x32	; 50
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	90 93 49 01 	sts	0x0149, r25
     818:	80 93 48 01 	sts	0x0148, r24
     81c:	8e e2       	ldi	r24, 0x2E	; 46
     81e:	91 e0       	ldi	r25, 0x01	; 1
     820:	90 93 5b 01 	sts	0x015B, r25
     824:	80 93 5a 01 	sts	0x015A, r24
                        flag_no_good_stars = 1;
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	90 93 05 01 	sts	0x0105, r25
     830:	80 93 04 01 	sts	0x0104, r24
                        break;
     834:	9c c0       	rjmp	.+312    	; 0x96e <localize+0x838>
                }
                break;
                
                
            case 5:
                switch (min_id) {
     836:	ed 81       	ldd	r30, Y+5	; 0x05
     838:	fe 81       	ldd	r31, Y+6	; 0x06
     83a:	e2 30       	cpi	r30, 0x02	; 2
     83c:	f1 05       	cpc	r31, r1
     83e:	39 f1       	breq	.+78     	; 0x88e <localize+0x758>
     840:	24 f4       	brge	.+8      	; 0x84a <localize+0x714>
     842:	31 97       	sbiw	r30, 0x01	; 1
     844:	09 f0       	breq	.+2      	; 0x848 <localize+0x712>
     846:	6e c0       	rjmp	.+220    	; 0x924 <localize+0x7ee>
     848:	09 c0       	rjmp	.+18     	; 0x85c <localize+0x726>
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	9e 81       	ldd	r25, Y+6	; 0x06
     84e:	83 30       	cpi	r24, 0x03	; 3
     850:	91 05       	cpc	r25, r1
     852:	b1 f1       	breq	.+108    	; 0x8c0 <localize+0x78a>
     854:	04 97       	sbiw	r24, 0x04	; 4
     856:	09 f0       	breq	.+2      	; 0x85a <localize+0x724>
     858:	65 c0       	rjmp	.+202    	; 0x924 <localize+0x7ee>
     85a:	4b c0       	rjmp	.+150    	; 0x8f2 <localize+0x7bc>
                    case 1:
                        Q1=QC; Q2=QA; Q3=QD; Q4=QB;
     85c:	82 e3       	ldi	r24, 0x32	; 50
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	90 93 61 01 	sts	0x0161, r25
     864:	80 93 60 01 	sts	0x0160, r24
     868:	8a e3       	ldi	r24, 0x3A	; 58
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	90 93 47 01 	sts	0x0147, r25
     870:	80 93 46 01 	sts	0x0146, r24
     874:	8e e2       	ldi	r24, 0x2E	; 46
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	90 93 49 01 	sts	0x0149, r25
     87c:	80 93 48 01 	sts	0x0148, r24
     880:	86 e3       	ldi	r24, 0x36	; 54
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	90 93 5b 01 	sts	0x015B, r25
     888:	80 93 5a 01 	sts	0x015A, r24
                        break;
     88c:	6a c0       	rjmp	.+212    	; 0x962 <localize+0x82c>
                    case 2:
                        Q1=QD; Q2=QA; Q3=QC; Q4=QB;
     88e:	8e e2       	ldi	r24, 0x2E	; 46
     890:	91 e0       	ldi	r25, 0x01	; 1
     892:	90 93 61 01 	sts	0x0161, r25
     896:	80 93 60 01 	sts	0x0160, r24
     89a:	8a e3       	ldi	r24, 0x3A	; 58
     89c:	91 e0       	ldi	r25, 0x01	; 1
     89e:	90 93 47 01 	sts	0x0147, r25
     8a2:	80 93 46 01 	sts	0x0146, r24
     8a6:	82 e3       	ldi	r24, 0x32	; 50
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 49 01 	sts	0x0149, r25
     8ae:	80 93 48 01 	sts	0x0148, r24
     8b2:	86 e3       	ldi	r24, 0x36	; 54
     8b4:	91 e0       	ldi	r25, 0x01	; 1
     8b6:	90 93 5b 01 	sts	0x015B, r25
     8ba:	80 93 5a 01 	sts	0x015A, r24
                        break;
     8be:	51 c0       	rjmp	.+162    	; 0x962 <localize+0x82c>
                    case 3:
                        Q1=QC; Q2=QB; Q3=QD; Q4=QA;
     8c0:	82 e3       	ldi	r24, 0x32	; 50
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	90 93 61 01 	sts	0x0161, r25
     8c8:	80 93 60 01 	sts	0x0160, r24
     8cc:	86 e3       	ldi	r24, 0x36	; 54
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	90 93 47 01 	sts	0x0147, r25
     8d4:	80 93 46 01 	sts	0x0146, r24
     8d8:	8e e2       	ldi	r24, 0x2E	; 46
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	90 93 49 01 	sts	0x0149, r25
     8e0:	80 93 48 01 	sts	0x0148, r24
     8e4:	8a e3       	ldi	r24, 0x3A	; 58
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	90 93 5b 01 	sts	0x015B, r25
     8ec:	80 93 5a 01 	sts	0x015A, r24
                        break;
     8f0:	38 c0       	rjmp	.+112    	; 0x962 <localize+0x82c>
                    case 4:
                        Q1=QD; Q2=QB; Q3=QC; Q4=QA;
     8f2:	8e e2       	ldi	r24, 0x2E	; 46
     8f4:	91 e0       	ldi	r25, 0x01	; 1
     8f6:	90 93 61 01 	sts	0x0161, r25
     8fa:	80 93 60 01 	sts	0x0160, r24
     8fe:	86 e3       	ldi	r24, 0x36	; 54
     900:	91 e0       	ldi	r25, 0x01	; 1
     902:	90 93 47 01 	sts	0x0147, r25
     906:	80 93 46 01 	sts	0x0146, r24
     90a:	82 e3       	ldi	r24, 0x32	; 50
     90c:	91 e0       	ldi	r25, 0x01	; 1
     90e:	90 93 49 01 	sts	0x0149, r25
     912:	80 93 48 01 	sts	0x0148, r24
     916:	8a e3       	ldi	r24, 0x3A	; 58
     918:	91 e0       	ldi	r25, 0x01	; 1
     91a:	90 93 5b 01 	sts	0x015B, r25
     91e:	80 93 5a 01 	sts	0x015A, r24
                        break;
     922:	1f c0       	rjmp	.+62     	; 0x962 <localize+0x82c>
                    default:
                        Q1=QA; Q2=QB; Q3=QC; Q4=QD;
     924:	8a e3       	ldi	r24, 0x3A	; 58
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	90 93 61 01 	sts	0x0161, r25
     92c:	80 93 60 01 	sts	0x0160, r24
     930:	86 e3       	ldi	r24, 0x36	; 54
     932:	91 e0       	ldi	r25, 0x01	; 1
     934:	90 93 47 01 	sts	0x0147, r25
     938:	80 93 46 01 	sts	0x0146, r24
     93c:	82 e3       	ldi	r24, 0x32	; 50
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	90 93 49 01 	sts	0x0149, r25
     944:	80 93 48 01 	sts	0x0148, r24
     948:	8e e2       	ldi	r24, 0x2E	; 46
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	90 93 5b 01 	sts	0x015B, r25
     950:	80 93 5a 01 	sts	0x015A, r24
                        flag_no_good_stars = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 05 01 	sts	0x0105, r25
     95c:	80 93 04 01 	sts	0x0104, r24
                        break;
     960:	06 c0       	rjmp	.+12     	; 0x96e <localize+0x838>
                }
                break;
        }
    }
    
    if (flag_no_good_stars) {
     962:	80 91 04 01 	lds	r24, 0x0104
     966:	90 91 05 01 	lds	r25, 0x0105
     96a:	89 2b       	or	r24, r25
     96c:	d1 f0       	breq	.+52     	; 0x9a2 <localize+0x86c>
        *orientation = orientation_prev;
     96e:	80 91 14 01 	lds	r24, 0x0114
     972:	90 91 15 01 	lds	r25, 0x0115
     976:	ef 8d       	ldd	r30, Y+31	; 0x1f
     978:	f8 a1       	ldd	r31, Y+32	; 0x20
     97a:	91 83       	std	Z+1, r25	; 0x01
     97c:	80 83       	st	Z, r24
        *x_robot = x_robot_prev;
     97e:	80 91 12 01 	lds	r24, 0x0112
     982:	90 91 13 01 	lds	r25, 0x0113
     986:	ef 81       	ldd	r30, Y+7	; 0x07
     988:	f8 85       	ldd	r31, Y+8	; 0x08
     98a:	91 83       	std	Z+1, r25	; 0x01
     98c:	80 83       	st	Z, r24
        *y_robot = y_robot_prev;
     98e:	80 91 10 01 	lds	r24, 0x0110
     992:	90 91 11 01 	lds	r25, 0x0111
     996:	ed 8d       	ldd	r30, Y+29	; 0x1d
     998:	fe 8d       	ldd	r31, Y+30	; 0x1e
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
        return 0;
     99e:	80 e0       	ldi	r24, 0x00	; 0
     9a0:	ea c3       	rjmp	.+2004   	; 0x1176 <__stack+0x677>
    }
    
    
    float scale = P_vertical/max_distance;
     9a2:	26 2d       	mov	r18, r6
     9a4:	37 2d       	mov	r19, r7
     9a6:	48 2d       	mov	r20, r8
     9a8:	59 2d       	mov	r21, r9
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	70 e0       	ldi	r23, 0x00	; 0
     9ae:	88 ee       	ldi	r24, 0xE8	; 232
     9b0:	91 e4       	ldi	r25, 0x41	; 65
     9b2:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__divsf3>
     9b6:	26 2e       	mov	r2, r22
     9b8:	37 2e       	mov	r3, r23
     9ba:	48 2e       	mov	r4, r24
     9bc:	59 2e       	mov	r5, r25
    S1[0] = Q1[0] * scale; S1[1] = Q1[1] * scale;
     9be:	e0 90 60 01 	lds	r14, 0x0160
     9c2:	f0 90 61 01 	lds	r15, 0x0161
     9c6:	0f 2e       	mov	r0, r31
     9c8:	f2 e5       	ldi	r31, 0x52	; 82
     9ca:	8f 2e       	mov	r8, r31
     9cc:	f1 e0       	ldi	r31, 0x01	; 1
     9ce:	9f 2e       	mov	r9, r31
     9d0:	f0 2d       	mov	r31, r0
     9d2:	f7 01       	movw	r30, r14
     9d4:	60 81       	ld	r22, Z
     9d6:	71 81       	ldd	r23, Z+1	; 0x01
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     9e4:	22 2d       	mov	r18, r2
     9e6:	33 2d       	mov	r19, r3
     9e8:	44 2d       	mov	r20, r4
     9ea:	55 2d       	mov	r21, r5
     9ec:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     9f0:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     9f4:	f4 01       	movw	r30, r8
     9f6:	71 83       	std	Z+1, r23	; 0x01
     9f8:	60 83       	st	Z, r22
     9fa:	0f 2e       	mov	r0, r31
     9fc:	f4 e5       	ldi	r31, 0x54	; 84
     9fe:	6f 2e       	mov	r6, r31
     a00:	f1 e0       	ldi	r31, 0x01	; 1
     a02:	7f 2e       	mov	r7, r31
     a04:	f0 2d       	mov	r31, r0
     a06:	f7 01       	movw	r30, r14
     a08:	62 81       	ldd	r22, Z+2	; 0x02
     a0a:	73 81       	ldd	r23, Z+3	; 0x03
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     a18:	22 2d       	mov	r18, r2
     a1a:	33 2d       	mov	r19, r3
     a1c:	44 2d       	mov	r20, r4
     a1e:	55 2d       	mov	r21, r5
     a20:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     a24:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     a28:	f3 01       	movw	r30, r6
     a2a:	71 83       	std	Z+1, r23	; 0x01
     a2c:	60 83       	st	Z, r22
    S3[0] = Q3[0] * scale; S3[1] = Q3[1] * scale;
     a2e:	00 91 48 01 	lds	r16, 0x0148
     a32:	10 91 49 01 	lds	r17, 0x0149
     a36:	0f 2e       	mov	r0, r31
     a38:	f2 e4       	ldi	r31, 0x42	; 66
     a3a:	af 2e       	mov	r10, r31
     a3c:	f1 e0       	ldi	r31, 0x01	; 1
     a3e:	bf 2e       	mov	r11, r31
     a40:	f0 2d       	mov	r31, r0
     a42:	f8 01       	movw	r30, r16
     a44:	60 81       	ld	r22, Z
     a46:	71 81       	ldd	r23, Z+1	; 0x01
     a48:	88 27       	eor	r24, r24
     a4a:	77 fd       	sbrc	r23, 7
     a4c:	80 95       	com	r24
     a4e:	98 2f       	mov	r25, r24
     a50:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     a54:	22 2d       	mov	r18, r2
     a56:	33 2d       	mov	r19, r3
     a58:	44 2d       	mov	r20, r4
     a5a:	55 2d       	mov	r21, r5
     a5c:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     a60:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     a64:	f5 01       	movw	r30, r10
     a66:	71 83       	std	Z+1, r23	; 0x01
     a68:	60 83       	st	Z, r22
     a6a:	0f 2e       	mov	r0, r31
     a6c:	f4 e4       	ldi	r31, 0x44	; 68
     a6e:	cf 2e       	mov	r12, r31
     a70:	f1 e0       	ldi	r31, 0x01	; 1
     a72:	df 2e       	mov	r13, r31
     a74:	f0 2d       	mov	r31, r0
     a76:	f8 01       	movw	r30, r16
     a78:	62 81       	ldd	r22, Z+2	; 0x02
     a7a:	73 81       	ldd	r23, Z+3	; 0x03
     a7c:	88 27       	eor	r24, r24
     a7e:	77 fd       	sbrc	r23, 7
     a80:	80 95       	com	r24
     a82:	98 2f       	mov	r25, r24
     a84:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     a88:	22 2d       	mov	r18, r2
     a8a:	33 2d       	mov	r19, r3
     a8c:	44 2d       	mov	r20, r4
     a8e:	55 2d       	mov	r21, r5
     a90:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     a94:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     a98:	f6 01       	movw	r30, r12
     a9a:	71 83       	std	Z+1, r23	; 0x01
     a9c:	60 83       	st	Z, r22
    
	*CAMERA_CENTER_X = (int)(0.5*(Q1[0]+Q3[0]));
     a9e:	f7 01       	movw	r30, r14
     aa0:	60 81       	ld	r22, Z
     aa2:	71 81       	ldd	r23, Z+1	; 0x01
     aa4:	f8 01       	movw	r30, r16
     aa6:	80 81       	ld	r24, Z
     aa8:	91 81       	ldd	r25, Z+1	; 0x01
     aaa:	68 0f       	add	r22, r24
     aac:	79 1f       	adc	r23, r25
     aae:	88 27       	eor	r24, r24
     ab0:	77 fd       	sbrc	r23, 7
     ab2:	80 95       	com	r24
     ab4:	98 2f       	mov	r25, r24
     ab6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	5f e3       	ldi	r21, 0x3F	; 63
     ac2:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     ac6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     aca:	e9 a1       	ldd	r30, Y+33	; 0x21
     acc:	fa a1       	ldd	r31, Y+34	; 0x22
     ace:	71 83       	std	Z+1, r23	; 0x01
     ad0:	60 83       	st	Z, r22
	*CAMERA_CENTER_Y = (int)(0.5*(Q1[1]+Q3[1]));
     ad2:	a0 91 60 01 	lds	r26, 0x0160
     ad6:	b0 91 61 01 	lds	r27, 0x0161
     ada:	e0 91 48 01 	lds	r30, 0x0148
     ade:	f0 91 49 01 	lds	r31, 0x0149
     ae2:	12 96       	adiw	r26, 0x02	; 2
     ae4:	6d 91       	ld	r22, X+
     ae6:	7c 91       	ld	r23, X
     ae8:	13 97       	sbiw	r26, 0x03	; 3
     aea:	82 81       	ldd	r24, Z+2	; 0x02
     aec:	93 81       	ldd	r25, Z+3	; 0x03
     aee:	68 0f       	add	r22, r24
     af0:	79 1f       	adc	r23, r25
     af2:	88 27       	eor	r24, r24
     af4:	77 fd       	sbrc	r23, 7
     af6:	80 95       	com	r24
     af8:	98 2f       	mov	r25, r24
     afa:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	40 e0       	ldi	r20, 0x00	; 0
     b04:	5f e3       	ldi	r21, 0x3F	; 63
     b06:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     b0a:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     b0e:	eb a1       	ldd	r30, Y+35	; 0x23
     b10:	fc a1       	ldd	r31, Y+36	; 0x24
     b12:	71 83       	std	Z+1, r23	; 0x01
     b14:	60 83       	st	Z, r22
    S0[0] = 0.5*(S1[0]+S3[0]);
     b16:	f4 01       	movw	r30, r8
     b18:	60 81       	ld	r22, Z
     b1a:	71 81       	ldd	r23, Z+1	; 0x01
     b1c:	f5 01       	movw	r30, r10
     b1e:	80 81       	ld	r24, Z
     b20:	91 81       	ldd	r25, Z+1	; 0x01
     b22:	68 0f       	add	r22, r24
     b24:	79 1f       	adc	r23, r25
     b26:	88 27       	eor	r24, r24
     b28:	77 fd       	sbrc	r23, 7
     b2a:	80 95       	com	r24
     b2c:	98 2f       	mov	r25, r24
     b2e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	40 e0       	ldi	r20, 0x00	; 0
     b38:	5f e3       	ldi	r21, 0x3F	; 63
     b3a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     b3e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     b42:	1b 01       	movw	r2, r22
     b44:	70 93 67 01 	sts	0x0167, r23
     b48:	60 93 66 01 	sts	0x0166, r22
    S0[1] = 0.5*(S1[1]+S3[1]);
     b4c:	f3 01       	movw	r30, r6
     b4e:	60 81       	ld	r22, Z
     b50:	71 81       	ldd	r23, Z+1	; 0x01
     b52:	f6 01       	movw	r30, r12
     b54:	80 81       	ld	r24, Z
     b56:	91 81       	ldd	r25, Z+1	; 0x01
     b58:	68 0f       	add	r22, r24
     b5a:	79 1f       	adc	r23, r25
     b5c:	88 27       	eor	r24, r24
     b5e:	77 fd       	sbrc	r23, 7
     b60:	80 95       	com	r24
     b62:	98 2f       	mov	r25, r24
     b64:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     b68:	20 e0       	ldi	r18, 0x00	; 0
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	40 e0       	ldi	r20, 0x00	; 0
     b6e:	5f e3       	ldi	r21, 0x3F	; 63
     b70:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     b74:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     b78:	8b 01       	movw	r16, r22
     b7a:	70 93 69 01 	sts	0x0169, r23
     b7e:	60 93 68 01 	sts	0x0168, r22
    radius = sqrt(S0[0]*S0[0] + S0[1]*S0[1]);
     b82:	22 9c       	mul	r2, r2
     b84:	b0 01       	movw	r22, r0
     b86:	23 9c       	mul	r2, r3
     b88:	70 0d       	add	r23, r0
     b8a:	70 0d       	add	r23, r0
     b8c:	11 24       	eor	r1, r1
     b8e:	00 9f       	mul	r16, r16
     b90:	c0 01       	movw	r24, r0
     b92:	01 9f       	mul	r16, r17
     b94:	90 0d       	add	r25, r0
     b96:	90 0d       	add	r25, r0
     b98:	11 24       	eor	r1, r1
     b9a:	68 0f       	add	r22, r24
     b9c:	79 1f       	adc	r23, r25
     b9e:	88 27       	eor	r24, r24
     ba0:	77 fd       	sbrc	r23, 7
     ba2:	80 95       	com	r24
     ba4:	98 2f       	mov	r25, r24
     ba6:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     baa:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
     bae:	2b 01       	movw	r4, r22
     bb0:	3c 01       	movw	r6, r24
     bb2:	60 93 4a 01 	sts	0x014A, r22
     bb6:	70 93 4b 01 	sts	0x014B, r23
     bba:	80 93 4c 01 	sts	0x014C, r24
     bbe:	90 93 4d 01 	sts	0x014D, r25
    
    theta = atan2( (Q3[1] - Q1[1]), (Q3[0] - Q1[0])  );
     bc2:	80 91 48 01 	lds	r24, 0x0148
     bc6:	90 91 49 01 	lds	r25, 0x0149
     bca:	9a 83       	std	Y+2, r25	; 0x02
     bcc:	89 83       	std	Y+1, r24	; 0x01
     bce:	e0 91 60 01 	lds	r30, 0x0160
     bd2:	f0 91 61 01 	lds	r31, 0x0161
     bd6:	fe 83       	std	Y+6, r31	; 0x06
     bd8:	ed 83       	std	Y+5, r30	; 0x05
     bda:	fc 01       	movw	r30, r24
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	ed 81       	ldd	r30, Y+5	; 0x05
     be2:	fe 81       	ldd	r31, Y+6	; 0x06
     be4:	80 81       	ld	r24, Z
     be6:	91 81       	ldd	r25, Z+1	; 0x01
     be8:	68 1b       	sub	r22, r24
     bea:	79 0b       	sbc	r23, r25
     bec:	88 27       	eor	r24, r24
     bee:	77 fd       	sbrc	r23, 7
     bf0:	80 95       	com	r24
     bf2:	98 2f       	mov	r25, r24
     bf4:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     bf8:	6b 01       	movw	r12, r22
     bfa:	7c 01       	movw	r14, r24
     bfc:	e9 81       	ldd	r30, Y+1	; 0x01
     bfe:	fa 81       	ldd	r31, Y+2	; 0x02
     c00:	62 81       	ldd	r22, Z+2	; 0x02
     c02:	73 81       	ldd	r23, Z+3	; 0x03
     c04:	ed 81       	ldd	r30, Y+5	; 0x05
     c06:	fe 81       	ldd	r31, Y+6	; 0x06
     c08:	82 81       	ldd	r24, Z+2	; 0x02
     c0a:	93 81       	ldd	r25, Z+3	; 0x03
     c0c:	68 1b       	sub	r22, r24
     c0e:	79 0b       	sbc	r23, r25
     c10:	88 27       	eor	r24, r24
     c12:	77 fd       	sbrc	r23, 7
     c14:	80 95       	com	r24
     c16:	98 2f       	mov	r25, r24
     c18:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     c1c:	a7 01       	movw	r20, r14
     c1e:	96 01       	movw	r18, r12
     c20:	0e 94 c6 0c 	call	0x198c	; 0x198c <atan2>
     c24:	4b 01       	movw	r8, r22
     c26:	5c 01       	movw	r10, r24
     c28:	60 93 56 01 	sts	0x0156, r22
     c2c:	70 93 57 01 	sts	0x0157, r23
     c30:	80 93 58 01 	sts	0x0158, r24
     c34:	90 93 59 01 	sts	0x0159, r25
	theta2 = atan2( -(Q3[1] - Q1[1]), -(Q3[0] - Q1[0])  );
     c38:	ed 81       	ldd	r30, Y+5	; 0x05
     c3a:	fe 81       	ldd	r31, Y+6	; 0x06
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	e9 81       	ldd	r30, Y+1	; 0x01
     c42:	fa 81       	ldd	r31, Y+2	; 0x02
     c44:	80 81       	ld	r24, Z
     c46:	91 81       	ldd	r25, Z+1	; 0x01
     c48:	68 1b       	sub	r22, r24
     c4a:	79 0b       	sbc	r23, r25
     c4c:	88 27       	eor	r24, r24
     c4e:	77 fd       	sbrc	r23, 7
     c50:	80 95       	com	r24
     c52:	98 2f       	mov	r25, r24
     c54:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     c58:	6b 01       	movw	r12, r22
     c5a:	7c 01       	movw	r14, r24
     c5c:	ed 81       	ldd	r30, Y+5	; 0x05
     c5e:	fe 81       	ldd	r31, Y+6	; 0x06
     c60:	62 81       	ldd	r22, Z+2	; 0x02
     c62:	73 81       	ldd	r23, Z+3	; 0x03
     c64:	e9 81       	ldd	r30, Y+1	; 0x01
     c66:	fa 81       	ldd	r31, Y+2	; 0x02
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	93 81       	ldd	r25, Z+3	; 0x03
     c6c:	68 1b       	sub	r22, r24
     c6e:	79 0b       	sbc	r23, r25
     c70:	88 27       	eor	r24, r24
     c72:	77 fd       	sbrc	r23, 7
     c74:	80 95       	com	r24
     c76:	98 2f       	mov	r25, r24
     c78:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     c7c:	a7 01       	movw	r20, r14
     c7e:	96 01       	movw	r18, r12
     c80:	0e 94 c6 0c 	call	0x198c	; 0x198c <atan2>
     c84:	6b 01       	movw	r12, r22
     c86:	7c 01       	movw	r14, r24
     c88:	60 93 4e 01 	sts	0x014E, r22
     c8c:	70 93 4f 01 	sts	0x014F, r23
     c90:	80 93 50 01 	sts	0x0150, r24
     c94:	90 93 51 01 	sts	0x0151, r25
    alpha = -atan2(S0[0],S0[1]);
     c98:	b8 01       	movw	r22, r16
     c9a:	88 27       	eor	r24, r24
     c9c:	77 fd       	sbrc	r23, 7
     c9e:	80 95       	com	r24
     ca0:	98 2f       	mov	r25, r24
     ca2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     ca6:	69 83       	std	Y+1, r22	; 0x01
     ca8:	7a 83       	std	Y+2, r23	; 0x02
     caa:	8b 83       	std	Y+3, r24	; 0x03
     cac:	9c 83       	std	Y+4, r25	; 0x04
     cae:	b1 01       	movw	r22, r2
     cb0:	88 27       	eor	r24, r24
     cb2:	77 fd       	sbrc	r23, 7
     cb4:	80 95       	com	r24
     cb6:	98 2f       	mov	r25, r24
     cb8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     cbc:	29 81       	ldd	r18, Y+1	; 0x01
     cbe:	3a 81       	ldd	r19, Y+2	; 0x02
     cc0:	4b 81       	ldd	r20, Y+3	; 0x03
     cc2:	5c 81       	ldd	r21, Y+4	; 0x04
     cc4:	0e 94 c6 0c 	call	0x198c	; 0x198c <atan2>
     cc8:	9b 01       	movw	r18, r22
     cca:	ac 01       	movw	r20, r24
     ccc:	dc 01       	movw	r26, r24
     cce:	cb 01       	movw	r24, r22
     cd0:	b0 58       	subi	r27, 0x80	; 128
     cd2:	80 93 6a 01 	sts	0x016A, r24
     cd6:	90 93 6b 01 	sts	0x016B, r25
     cda:	a0 93 6c 01 	sts	0x016C, r26
     cde:	b0 93 6d 01 	sts	0x016D, r27
    
    x_robot_current     = -radius * cos(theta - alpha)+x0_offset_cm;
     ce2:	77 fa       	bst	r7, 7
     ce4:	70 94       	com	r7
     ce6:	77 f8       	bld	r7, 7
     ce8:	70 94       	com	r7
     cea:	c5 01       	movw	r24, r10
     cec:	b4 01       	movw	r22, r8
     cee:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3>
     cf2:	86 2e       	mov	r8, r22
     cf4:	97 2e       	mov	r9, r23
     cf6:	a8 2e       	mov	r10, r24
     cf8:	b9 2e       	mov	r11, r25
     cfa:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <cos>
     cfe:	9b 01       	movw	r18, r22
     d00:	ac 01       	movw	r20, r24
     d02:	c3 01       	movw	r24, r6
     d04:	b2 01       	movw	r22, r4
     d06:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     d0a:	20 e0       	ldi	r18, 0x00	; 0
     d0c:	30 e0       	ldi	r19, 0x00	; 0
     d0e:	40 e2       	ldi	r20, 0x20	; 32
     d10:	51 e4       	ldi	r21, 0x41	; 65
     d12:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__subsf3>
     d16:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     d1a:	8b 01       	movw	r16, r22
     d1c:	70 93 0d 01 	sts	0x010D, r23
     d20:	60 93 0c 01 	sts	0x010C, r22
    y_robot_current     = -radius * sin(theta - alpha)+y0_offset_cm;
     d24:	68 2d       	mov	r22, r8
     d26:	79 2d       	mov	r23, r9
     d28:	8a 2d       	mov	r24, r10
     d2a:	9b 2d       	mov	r25, r11
     d2c:	0e 94 37 0f 	call	0x1e6e	; 0x1e6e <sin>
     d30:	9b 01       	movw	r18, r22
     d32:	ac 01       	movw	r20, r24
     d34:	c3 01       	movw	r24, r6
     d36:	b2 01       	movw	r22, r4
     d38:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	40 ea       	ldi	r20, 0xA0	; 160
     d42:	50 e4       	ldi	r21, 0x40	; 64
     d44:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3>
     d48:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     d4c:	70 93 0b 01 	sts	0x010B, r23
     d50:	60 93 0a 01 	sts	0x010A, r22
    orientation_current = (theta2) * 180/M_PI;
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	44 e3       	ldi	r20, 0x34	; 52
     d5a:	53 e4       	ldi	r21, 0x43	; 67
     d5c:	c7 01       	movw	r24, r14
     d5e:	b6 01       	movw	r22, r12
     d60:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     d64:	2b ed       	ldi	r18, 0xDB	; 219
     d66:	3f e0       	ldi	r19, 0x0F	; 15
     d68:	49 e4       	ldi	r20, 0x49	; 73
     d6a:	50 e4       	ldi	r21, 0x40	; 64
     d6c:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <__divsf3>
     d70:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     d74:	70 93 0f 01 	sts	0x010F, r23
     d78:	60 93 0e 01 	sts	0x010E, r22
	//if (orientation_current > 180)
		//orientation_current -= 360;
    
    *x_robot     = beta * x_robot_prev      +  (1-beta) * x_robot_current;
     d7c:	c0 90 06 01 	lds	r12, 0x0106
     d80:	d0 90 07 01 	lds	r13, 0x0107
     d84:	e0 90 08 01 	lds	r14, 0x0108
     d88:	f0 90 09 01 	lds	r15, 0x0109
     d8c:	60 91 12 01 	lds	r22, 0x0112
     d90:	70 91 13 01 	lds	r23, 0x0113
     d94:	88 27       	eor	r24, r24
     d96:	77 fd       	sbrc	r23, 7
     d98:	80 95       	com	r24
     d9a:	98 2f       	mov	r25, r24
     d9c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     da0:	a7 01       	movw	r20, r14
     da2:	96 01       	movw	r18, r12
     da4:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     da8:	4b 01       	movw	r8, r22
     daa:	5c 01       	movw	r10, r24
     dac:	a7 01       	movw	r20, r14
     dae:	96 01       	movw	r18, r12
     db0:	60 e0       	ldi	r22, 0x00	; 0
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	80 e8       	ldi	r24, 0x80	; 128
     db6:	9f e3       	ldi	r25, 0x3F	; 63
     db8:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__subsf3>
     dbc:	6b 01       	movw	r12, r22
     dbe:	7c 01       	movw	r14, r24
     dc0:	b8 01       	movw	r22, r16
     dc2:	88 27       	eor	r24, r24
     dc4:	77 fd       	sbrc	r23, 7
     dc6:	80 95       	com	r24
     dc8:	98 2f       	mov	r25, r24
     dca:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     dce:	9b 01       	movw	r18, r22
     dd0:	ac 01       	movw	r20, r24
     dd2:	c7 01       	movw	r24, r14
     dd4:	b6 01       	movw	r22, r12
     dd6:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     dda:	9b 01       	movw	r18, r22
     ddc:	ac 01       	movw	r20, r24
     dde:	c5 01       	movw	r24, r10
     de0:	b4 01       	movw	r22, r8
     de2:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3>
     de6:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     dea:	ef 81       	ldd	r30, Y+7	; 0x07
     dec:	f8 85       	ldd	r31, Y+8	; 0x08
     dee:	71 83       	std	Z+1, r23	; 0x01
     df0:	60 83       	st	Z, r22
    *y_robot     = beta * y_robot_prev      +  (1-beta) * y_robot_current;
     df2:	c0 90 06 01 	lds	r12, 0x0106
     df6:	d0 90 07 01 	lds	r13, 0x0107
     dfa:	e0 90 08 01 	lds	r14, 0x0108
     dfe:	f0 90 09 01 	lds	r15, 0x0109
     e02:	60 91 10 01 	lds	r22, 0x0110
     e06:	70 91 11 01 	lds	r23, 0x0111
     e0a:	88 27       	eor	r24, r24
     e0c:	77 fd       	sbrc	r23, 7
     e0e:	80 95       	com	r24
     e10:	98 2f       	mov	r25, r24
     e12:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     e16:	a7 01       	movw	r20, r14
     e18:	96 01       	movw	r18, r12
     e1a:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     e1e:	4b 01       	movw	r8, r22
     e20:	5c 01       	movw	r10, r24
     e22:	a7 01       	movw	r20, r14
     e24:	96 01       	movw	r18, r12
     e26:	60 e0       	ldi	r22, 0x00	; 0
     e28:	70 e0       	ldi	r23, 0x00	; 0
     e2a:	80 e8       	ldi	r24, 0x80	; 128
     e2c:	9f e3       	ldi	r25, 0x3F	; 63
     e2e:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__subsf3>
     e32:	6b 01       	movw	r12, r22
     e34:	7c 01       	movw	r14, r24
     e36:	60 91 0a 01 	lds	r22, 0x010A
     e3a:	70 91 0b 01 	lds	r23, 0x010B
     e3e:	88 27       	eor	r24, r24
     e40:	77 fd       	sbrc	r23, 7
     e42:	80 95       	com	r24
     e44:	98 2f       	mov	r25, r24
     e46:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     e4a:	9b 01       	movw	r18, r22
     e4c:	ac 01       	movw	r20, r24
     e4e:	c7 01       	movw	r24, r14
     e50:	b6 01       	movw	r22, r12
     e52:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     e56:	9b 01       	movw	r18, r22
     e58:	ac 01       	movw	r20, r24
     e5a:	c5 01       	movw	r24, r10
     e5c:	b4 01       	movw	r22, r8
     e5e:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3>
     e62:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     e66:	ed 8d       	ldd	r30, Y+29	; 0x1d
     e68:	fe 8d       	ldd	r31, Y+30	; 0x1e
     e6a:	71 83       	std	Z+1, r23	; 0x01
     e6c:	60 83       	st	Z, r22
    *orientation = beta * orientation_prev  +  (1-beta) * orientation_current;
     e6e:	c0 90 06 01 	lds	r12, 0x0106
     e72:	d0 90 07 01 	lds	r13, 0x0107
     e76:	e0 90 08 01 	lds	r14, 0x0108
     e7a:	f0 90 09 01 	lds	r15, 0x0109
     e7e:	60 91 14 01 	lds	r22, 0x0114
     e82:	70 91 15 01 	lds	r23, 0x0115
     e86:	88 27       	eor	r24, r24
     e88:	77 fd       	sbrc	r23, 7
     e8a:	80 95       	com	r24
     e8c:	98 2f       	mov	r25, r24
     e8e:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     e92:	a7 01       	movw	r20, r14
     e94:	96 01       	movw	r18, r12
     e96:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     e9a:	4b 01       	movw	r8, r22
     e9c:	5c 01       	movw	r10, r24
     e9e:	a7 01       	movw	r20, r14
     ea0:	96 01       	movw	r18, r12
     ea2:	60 e0       	ldi	r22, 0x00	; 0
     ea4:	70 e0       	ldi	r23, 0x00	; 0
     ea6:	80 e8       	ldi	r24, 0x80	; 128
     ea8:	9f e3       	ldi	r25, 0x3F	; 63
     eaa:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <__subsf3>
     eae:	6b 01       	movw	r12, r22
     eb0:	7c 01       	movw	r14, r24
     eb2:	60 91 0e 01 	lds	r22, 0x010E
     eb6:	70 91 0f 01 	lds	r23, 0x010F
     eba:	88 27       	eor	r24, r24
     ebc:	77 fd       	sbrc	r23, 7
     ebe:	80 95       	com	r24
     ec0:	98 2f       	mov	r25, r24
     ec2:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     ec6:	9b 01       	movw	r18, r22
     ec8:	ac 01       	movw	r20, r24
     eca:	c7 01       	movw	r24, r14
     ecc:	b6 01       	movw	r22, r12
     ece:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <__mulsf3>
     ed2:	9b 01       	movw	r18, r22
     ed4:	ac 01       	movw	r20, r24
     ed6:	c5 01       	movw	r24, r10
     ed8:	b4 01       	movw	r22, r8
     eda:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <__addsf3>
     ede:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <__fixsfsi>
     ee2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     ee4:	f8 a1       	ldd	r31, Y+32	; 0x20
     ee6:	71 83       	std	Z+1, r23	; 0x01
     ee8:	60 83       	st	Z, r22
    
    x_robot_prev     = *x_robot;
     eea:	ef 81       	ldd	r30, Y+7	; 0x07
     eec:	f8 85       	ldd	r31, Y+8	; 0x08
     eee:	80 81       	ld	r24, Z
     ef0:	91 81       	ldd	r25, Z+1	; 0x01
     ef2:	90 93 13 01 	sts	0x0113, r25
     ef6:	80 93 12 01 	sts	0x0112, r24
    y_robot_prev     = *y_robot;
     efa:	ed 8d       	ldd	r30, Y+29	; 0x1d
     efc:	fe 8d       	ldd	r31, Y+30	; 0x1e
     efe:	80 81       	ld	r24, Z
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	90 93 11 01 	sts	0x0111, r25
     f06:	80 93 10 01 	sts	0x0110, r24
    orientation_prev = *orientation;
     f0a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     f0c:	f8 a1       	ldd	r31, Y+32	; 0x20
     f0e:	80 81       	ld	r24, Z
     f10:	91 81       	ldd	r25, Z+1	; 0x01
     f12:	90 93 15 01 	sts	0x0115, r25
     f16:	80 93 14 01 	sts	0x0114, r24
    
    return 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	2c c1       	rjmp	.+600    	; 0x1176 <__stack+0x677>
        flag_no_good_stars = 1;
    }
    
    if (!flag_no_good_stars) {
        
        QA[0] = x1 - u0; QA[1] = y1 - v0;
     f1e:	e0 91 02 01 	lds	r30, 0x0102
     f22:	f0 91 03 01 	lds	r31, 0x0103
     f26:	4c 01       	movw	r8, r24
     f28:	8e 1a       	sub	r8, r30
     f2a:	9f 0a       	sbc	r9, r31
     f2c:	90 92 3b 01 	sts	0x013B, r9
     f30:	80 92 3a 01 	sts	0x013A, r8
     f34:	80 91 00 01 	lds	r24, 0x0100
     f38:	90 91 01 01 	lds	r25, 0x0101
     f3c:	08 1b       	sub	r16, r24
     f3e:	19 0b       	sbc	r17, r25
     f40:	10 93 3d 01 	sts	0x013D, r17
     f44:	00 93 3c 01 	sts	0x013C, r16
        QB[0] = x2 - u0; QB[1] = y2 - v0;
     f48:	3b 01       	movw	r6, r22
     f4a:	6e 1a       	sub	r6, r30
     f4c:	7f 0a       	sbc	r7, r31
     f4e:	70 92 37 01 	sts	0x0137, r7
     f52:	60 92 36 01 	sts	0x0136, r6
     f56:	e8 1a       	sub	r14, r24
     f58:	f9 0a       	sbc	r15, r25
     f5a:	f0 92 39 01 	sts	0x0139, r15
     f5e:	e0 92 38 01 	sts	0x0138, r14
        QC[0] = x3 - u0; QC[1] = y3 - v0;
     f62:	2a 01       	movw	r4, r20
     f64:	4e 1a       	sub	r4, r30
     f66:	5f 0a       	sbc	r5, r31
     f68:	50 92 33 01 	sts	0x0133, r5
     f6c:	40 92 32 01 	sts	0x0132, r4
     f70:	16 01       	movw	r2, r12
     f72:	28 1a       	sub	r2, r24
     f74:	39 0a       	sbc	r3, r25
     f76:	30 92 35 01 	sts	0x0135, r3
     f7a:	20 92 34 01 	sts	0x0134, r2
        QD[0] = x4 - u0; QD[1] = y4 - v0;
     f7e:	69 01       	movw	r12, r18
     f80:	ce 1a       	sub	r12, r30
     f82:	df 0a       	sbc	r13, r31
     f84:	d0 92 2f 01 	sts	0x012F, r13
     f88:	c0 92 2e 01 	sts	0x012E, r12
     f8c:	a8 1a       	sub	r10, r24
     f8e:	b9 0a       	sbc	r11, r25
     f90:	b0 92 31 01 	sts	0x0131, r11
     f94:	a0 92 30 01 	sts	0x0130, r10
        distances[0] = sqrt((QB[0] - QA[0])*(QB[0] - QA[0]) + (QB[1] - QA[1])*(QB[1] - QA[1]));
     f98:	93 01       	movw	r18, r6
     f9a:	28 19       	sub	r18, r8
     f9c:	39 09       	sbc	r19, r9
     f9e:	c7 01       	movw	r24, r14
     fa0:	80 1b       	sub	r24, r16
     fa2:	91 0b       	sbc	r25, r17
     fa4:	22 9f       	mul	r18, r18
     fa6:	b0 01       	movw	r22, r0
     fa8:	23 9f       	mul	r18, r19
     faa:	70 0d       	add	r23, r0
     fac:	70 0d       	add	r23, r0
     fae:	11 24       	eor	r1, r1
     fb0:	88 9f       	mul	r24, r24
     fb2:	90 01       	movw	r18, r0
     fb4:	89 9f       	mul	r24, r25
     fb6:	30 0d       	add	r19, r0
     fb8:	30 0d       	add	r19, r0
     fba:	11 24       	eor	r1, r1
     fbc:	62 0f       	add	r22, r18
     fbe:	73 1f       	adc	r23, r19
     fc0:	88 27       	eor	r24, r24
     fc2:	77 fd       	sbrc	r23, 7
     fc4:	80 95       	com	r24
     fc6:	98 2f       	mov	r25, r24
     fc8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
     fcc:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
     fd0:	60 93 16 01 	sts	0x0116, r22
     fd4:	70 93 17 01 	sts	0x0117, r23
     fd8:	80 93 18 01 	sts	0x0118, r24
     fdc:	90 93 19 01 	sts	0x0119, r25
        distances[1] = sqrt((QC[0] - QA[0])*(QC[0] - QA[0]) + (QC[1] - QA[1])*(QC[1] - QA[1]));
     fe0:	92 01       	movw	r18, r4
     fe2:	28 19       	sub	r18, r8
     fe4:	39 09       	sbc	r19, r9
     fe6:	c1 01       	movw	r24, r2
     fe8:	80 1b       	sub	r24, r16
     fea:	91 0b       	sbc	r25, r17
     fec:	22 9f       	mul	r18, r18
     fee:	b0 01       	movw	r22, r0
     ff0:	23 9f       	mul	r18, r19
     ff2:	70 0d       	add	r23, r0
     ff4:	70 0d       	add	r23, r0
     ff6:	11 24       	eor	r1, r1
     ff8:	88 9f       	mul	r24, r24
     ffa:	90 01       	movw	r18, r0
     ffc:	89 9f       	mul	r24, r25
     ffe:	30 0d       	add	r19, r0
    1000:	30 0d       	add	r19, r0
    1002:	11 24       	eor	r1, r1
    1004:	62 0f       	add	r22, r18
    1006:	73 1f       	adc	r23, r19
    1008:	88 27       	eor	r24, r24
    100a:	77 fd       	sbrc	r23, 7
    100c:	80 95       	com	r24
    100e:	98 2f       	mov	r25, r24
    1010:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    1014:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
    1018:	60 93 1a 01 	sts	0x011A, r22
    101c:	70 93 1b 01 	sts	0x011B, r23
    1020:	80 93 1c 01 	sts	0x011C, r24
    1024:	90 93 1d 01 	sts	0x011D, r25
        distances[2] = sqrt((QD[0] - QA[0])*(QD[0] - QA[0]) + (QD[1] - QA[1])*(QD[1] - QA[1]));
    1028:	96 01       	movw	r18, r12
    102a:	28 19       	sub	r18, r8
    102c:	39 09       	sbc	r19, r9
    102e:	c5 01       	movw	r24, r10
    1030:	80 1b       	sub	r24, r16
    1032:	91 0b       	sbc	r25, r17
    1034:	22 9f       	mul	r18, r18
    1036:	b0 01       	movw	r22, r0
    1038:	23 9f       	mul	r18, r19
    103a:	70 0d       	add	r23, r0
    103c:	70 0d       	add	r23, r0
    103e:	11 24       	eor	r1, r1
    1040:	88 9f       	mul	r24, r24
    1042:	90 01       	movw	r18, r0
    1044:	89 9f       	mul	r24, r25
    1046:	30 0d       	add	r19, r0
    1048:	30 0d       	add	r19, r0
    104a:	11 24       	eor	r1, r1
    104c:	62 0f       	add	r22, r18
    104e:	73 1f       	adc	r23, r19
    1050:	88 27       	eor	r24, r24
    1052:	77 fd       	sbrc	r23, 7
    1054:	80 95       	com	r24
    1056:	98 2f       	mov	r25, r24
    1058:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    105c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
    1060:	60 93 1e 01 	sts	0x011E, r22
    1064:	70 93 1f 01 	sts	0x011F, r23
    1068:	80 93 20 01 	sts	0x0120, r24
    106c:	90 93 21 01 	sts	0x0121, r25
        distances[3] = sqrt((QC[0] - QB[0])*(QC[0] - QB[0]) + (QC[1] - QB[1])*(QC[1] - QB[1]));
    1070:	92 01       	movw	r18, r4
    1072:	26 19       	sub	r18, r6
    1074:	37 09       	sbc	r19, r7
    1076:	c1 01       	movw	r24, r2
    1078:	8e 19       	sub	r24, r14
    107a:	9f 09       	sbc	r25, r15
    107c:	22 9f       	mul	r18, r18
    107e:	b0 01       	movw	r22, r0
    1080:	23 9f       	mul	r18, r19
    1082:	70 0d       	add	r23, r0
    1084:	70 0d       	add	r23, r0
    1086:	11 24       	eor	r1, r1
    1088:	88 9f       	mul	r24, r24
    108a:	90 01       	movw	r18, r0
    108c:	89 9f       	mul	r24, r25
    108e:	30 0d       	add	r19, r0
    1090:	30 0d       	add	r19, r0
    1092:	11 24       	eor	r1, r1
    1094:	62 0f       	add	r22, r18
    1096:	73 1f       	adc	r23, r19
    1098:	88 27       	eor	r24, r24
    109a:	77 fd       	sbrc	r23, 7
    109c:	80 95       	com	r24
    109e:	98 2f       	mov	r25, r24
    10a0:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    10a4:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
    10a8:	60 93 22 01 	sts	0x0122, r22
    10ac:	70 93 23 01 	sts	0x0123, r23
    10b0:	80 93 24 01 	sts	0x0124, r24
    10b4:	90 93 25 01 	sts	0x0125, r25
        distances[4] = sqrt((QD[0] - QB[0])*(QD[0] - QB[0]) + (QD[1] - QB[1])*(QD[1] - QB[1]));
    10b8:	96 01       	movw	r18, r12
    10ba:	26 19       	sub	r18, r6
    10bc:	37 09       	sbc	r19, r7
    10be:	c5 01       	movw	r24, r10
    10c0:	8e 19       	sub	r24, r14
    10c2:	9f 09       	sbc	r25, r15
    10c4:	22 9f       	mul	r18, r18
    10c6:	b0 01       	movw	r22, r0
    10c8:	23 9f       	mul	r18, r19
    10ca:	70 0d       	add	r23, r0
    10cc:	70 0d       	add	r23, r0
    10ce:	11 24       	eor	r1, r1
    10d0:	88 9f       	mul	r24, r24
    10d2:	90 01       	movw	r18, r0
    10d4:	89 9f       	mul	r24, r25
    10d6:	30 0d       	add	r19, r0
    10d8:	30 0d       	add	r19, r0
    10da:	11 24       	eor	r1, r1
    10dc:	62 0f       	add	r22, r18
    10de:	73 1f       	adc	r23, r19
    10e0:	88 27       	eor	r24, r24
    10e2:	77 fd       	sbrc	r23, 7
    10e4:	80 95       	com	r24
    10e6:	98 2f       	mov	r25, r24
    10e8:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    10ec:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
    10f0:	60 93 26 01 	sts	0x0126, r22
    10f4:	70 93 27 01 	sts	0x0127, r23
    10f8:	80 93 28 01 	sts	0x0128, r24
    10fc:	90 93 29 01 	sts	0x0129, r25
        distances[5] = sqrt((QD[0] - QC[0])*(QD[0] - QC[0]) + (QD[1] - QC[1])*(QD[1] - QC[1]));
    1100:	c4 18       	sub	r12, r4
    1102:	d5 08       	sbc	r13, r5
    1104:	a2 18       	sub	r10, r2
    1106:	b3 08       	sbc	r11, r3
    1108:	cc 9c       	mul	r12, r12
    110a:	b0 01       	movw	r22, r0
    110c:	cd 9c       	mul	r12, r13
    110e:	70 0d       	add	r23, r0
    1110:	70 0d       	add	r23, r0
    1112:	11 24       	eor	r1, r1
    1114:	aa 9c       	mul	r10, r10
    1116:	c0 01       	movw	r24, r0
    1118:	ab 9c       	mul	r10, r11
    111a:	90 0d       	add	r25, r0
    111c:	90 0d       	add	r25, r0
    111e:	11 24       	eor	r1, r1
    1120:	68 0f       	add	r22, r24
    1122:	79 1f       	adc	r23, r25
    1124:	88 27       	eor	r24, r24
    1126:	77 fd       	sbrc	r23, 7
    1128:	80 95       	com	r24
    112a:	98 2f       	mov	r25, r24
    112c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <__floatsisf>
    1130:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <sqrt>
    1134:	60 93 2a 01 	sts	0x012A, r22
    1138:	70 93 2b 01 	sts	0x012B, r23
    113c:	80 93 2c 01 	sts	0x012C, r24
    1140:	90 93 2d 01 	sts	0x012D, r25
    1144:	06 e1       	ldi	r16, 0x16	; 22
    1146:	11 e0       	ldi	r17, 0x01	; 1
        
        int i;
        for (i=0; i<6; i++) {
    1148:	e1 2c       	mov	r14, r1
    114a:	f1 2c       	mov	r15, r1
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    int max_id = 0, min_id = 0;
    114c:	1e 82       	std	Y+6, r1	; 0x06
    114e:	1d 82       	std	Y+5, r1	; 0x05
    1150:	1a 82       	std	Y+2, r1	; 0x02
    1152:	19 82       	std	Y+1, r1	; 0x01
// Localize the robot
// --------------------------------------------------------------

unsigned char localize(int x1, int x2, int x3, int x4, int y1, int y2, int y3, int y4, int* x_robot, int* y_robot, int* orientation, int* CAMERA_CENTER_X, int* CAMERA_CENTER_Y){
    
    float max_distance = 0, min_distance = 10000;
    1154:	21 2c       	mov	r2, r1
    1156:	68 94       	set
    1158:	33 24       	eor	r3, r3
    115a:	36 f8       	bld	r3, 6
    115c:	0f 2e       	mov	r0, r31
    115e:	fc e1       	ldi	r31, 0x1C	; 28
    1160:	4f 2e       	mov	r4, r31
    1162:	f0 2d       	mov	r31, r0
    1164:	0f 2e       	mov	r0, r31
    1166:	f6 e4       	ldi	r31, 0x46	; 70
    1168:	5f 2e       	mov	r5, r31
    116a:	f0 2d       	mov	r31, r0
    116c:	61 2c       	mov	r6, r1
    116e:	71 2c       	mov	r7, r1
    1170:	81 2c       	mov	r8, r1
    1172:	91 2c       	mov	r9, r1
    1174:	2b c8       	rjmp	.-4010   	; 0x1cc <localize+0x96>
    y_robot_prev     = *y_robot;
    orientation_prev = *orientation;
    
    return 1;
    
}
    1176:	28 96       	adiw	r28, 0x08	; 8
    1178:	0f b6       	in	r0, 0x3f	; 63
    117a:	f8 94       	cli
    117c:	de bf       	out	0x3e, r29	; 62
    117e:	0f be       	out	0x3f, r0	; 63
    1180:	cd bf       	out	0x3d, r28	; 61
    1182:	df 91       	pop	r29
    1184:	cf 91       	pop	r28
    1186:	1f 91       	pop	r17
    1188:	0f 91       	pop	r16
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	5f 90       	pop	r5
    11a0:	4f 90       	pop	r4
    11a2:	3f 90       	pop	r3
    11a4:	2f 90       	pop	r2
    11a6:	08 95       	ret

000011a8 <set_timer1>:
}

void set_timer1(void)
{
    //Set B6 and B7 as output
    set(DDRB,6);
    11a8:	26 9a       	sbi	0x04, 6	; 4
    set(DDRB,7);
    11aa:	27 9a       	sbi	0x04, 7	; 4
    
    OCR1A = PWM_MAXIMUM;
    11ac:	88 e8       	ldi	r24, 0x88	; 136
    11ae:	93 e1       	ldi	r25, 0x13	; 19
    11b0:	90 93 89 00 	sts	0x0089, r25
    11b4:	80 93 88 00 	sts	0x0088, r24
    OCR1B = 0;
    11b8:	10 92 8b 00 	sts	0x008B, r1
    11bc:	10 92 8a 00 	sts	0x008A, r1
    OCR1C = 0;
    11c0:	10 92 8d 00 	sts	0x008D, r1
    11c4:	10 92 8c 00 	sts	0x008C, r1
    
    //Set to UP to OCR1A
    set(TCCR1B,WGM13);
    11c8:	a1 e8       	ldi	r26, 0x81	; 129
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	8c 91       	ld	r24, X
    11ce:	80 61       	ori	r24, 0x10	; 16
    11d0:	8c 93       	st	X, r24
    set(TCCR1B,WGM12);
    11d2:	8c 91       	ld	r24, X
    11d4:	88 60       	ori	r24, 0x08	; 8
    11d6:	8c 93       	st	X, r24
    set(TCCR1A,WGM11);
    11d8:	e0 e8       	ldi	r30, 0x80	; 128
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	82 60       	ori	r24, 0x02	; 2
    11e0:	80 83       	st	Z, r24
    set(TCCR1A,WGM10);
    11e2:	80 81       	ld	r24, Z
    11e4:	81 60       	ori	r24, 0x01	; 1
    11e6:	80 83       	st	Z, r24
    
    //Set to clear at OCR1B, set at rollover
    set(TCCR1A,COM1B1);
    11e8:	80 81       	ld	r24, Z
    11ea:	80 62       	ori	r24, 0x20	; 32
    11ec:	80 83       	st	Z, r24
    clear(TCCR1A,COM1B0);
    11ee:	80 81       	ld	r24, Z
    11f0:	8f 7e       	andi	r24, 0xEF	; 239
    11f2:	80 83       	st	Z, r24
    
    //Set to clear at OCR1C, set at rollover
    set(TCCR1A,COM1C1);
    11f4:	80 81       	ld	r24, Z
    11f6:	88 60       	ori	r24, 0x08	; 8
    11f8:	80 83       	st	Z, r24
    clear(TCCR1A,COM1C0);
    11fa:	80 81       	ld	r24, Z
    11fc:	8b 7f       	andi	r24, 0xFB	; 251
    11fe:	80 83       	st	Z, r24
    
    //Set timer prescaler to /1
    clear(TCCR1B,CS12);
    1200:	8c 91       	ld	r24, X
    1202:	8b 7f       	andi	r24, 0xFB	; 251
    1204:	8c 93       	st	X, r24
    clear(TCCR1B,CS11);
    1206:	8c 91       	ld	r24, X
    1208:	8d 7f       	andi	r24, 0xFD	; 253
    120a:	8c 93       	st	X, r24
    set(TCCR1B,CS10);
    120c:	8c 91       	ld	r24, X
    120e:	81 60       	ori	r24, 0x01	; 1
    1210:	8c 93       	st	X, r24
    1212:	08 95       	ret

00001214 <set_timer4>:

//Timer 4 specifications (SENDING PROCEDURE)
void set_timer4(void)
{
    //Set the counter variable
    OCR4C = 195;
    1214:	83 ec       	ldi	r24, 0xC3	; 195
    1216:	80 93 d1 00 	sts	0x00D1, r24
    
    //Set UP to OCR4C
    clear(TCCR4D,WGM41);
    121a:	e3 ec       	ldi	r30, 0xC3	; 195
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8d 7f       	andi	r24, 0xFD	; 253
    1222:	80 83       	st	Z, r24
    clear(TCCR4D,WGM40);
    1224:	80 81       	ld	r24, Z
    1226:	8e 7f       	andi	r24, 0xFE	; 254
    1228:	80 83       	st	Z, r24
    
    //Set the interruption to overflow
    set(TIMSK4,TOIE4);
    122a:	e2 e7       	ldi	r30, 0x72	; 114
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	80 81       	ld	r24, Z
    1230:	84 60       	ori	r24, 0x04	; 4
    1232:	80 83       	st	Z, r24
    
    //Set prescaler to /4096
    set(TCCR4B,CS43);
    1234:	e1 ec       	ldi	r30, 0xC1	; 193
    1236:	f0 e0       	ldi	r31, 0x00	; 0
    1238:	80 81       	ld	r24, Z
    123a:	88 60       	ori	r24, 0x08	; 8
    123c:	80 83       	st	Z, r24
    set(TCCR4B,CS42);
    123e:	80 81       	ld	r24, Z
    1240:	84 60       	ori	r24, 0x04	; 4
    1242:	80 83       	st	Z, r24
    clear(TCCR4B,CS41);
    1244:	80 81       	ld	r24, Z
    1246:	8d 7f       	andi	r24, 0xFD	; 253
    1248:	80 83       	st	Z, r24
    set(TCCR4B,CS40);
    124a:	80 81       	ld	r24, Z
    124c:	81 60       	ori	r24, 0x01	; 1
    124e:	80 83       	st	Z, r24
    1250:	08 95       	ret

00001252 <init_analog>:

//A/D Initialization
void init_analog(void)
{
    //Set the reference voltage to Vcc
    clear(ADMUX,REFS1);
    1252:	ec e7       	ldi	r30, 0x7C	; 124
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	8f 77       	andi	r24, 0x7F	; 127
    125a:	80 83       	st	Z, r24
    set(ADMUX,REFS0);
    125c:	80 81       	ld	r24, Z
    125e:	80 64       	ori	r24, 0x40	; 64
    1260:	80 83       	st	Z, r24
    
    //Set the ADC Clock Prescaler (/128)
    set(ADCSRA,ADPS2);
    1262:	aa e7       	ldi	r26, 0x7A	; 122
    1264:	b0 e0       	ldi	r27, 0x00	; 0
    1266:	8c 91       	ld	r24, X
    1268:	84 60       	ori	r24, 0x04	; 4
    126a:	8c 93       	st	X, r24
    set(ADCSRA,ADPS1);
    126c:	8c 91       	ld	r24, X
    126e:	82 60       	ori	r24, 0x02	; 2
    1270:	8c 93       	st	X, r24
    set(ADCSRA,ADPS0);
    1272:	8c 91       	ld	r24, X
    1274:	81 60       	ori	r24, 0x01	; 1
    1276:	8c 93       	st	X, r24
    
    //Disable set(DIDR2,ADC9D);
    set(DIDR0,ADC0D);
    1278:	ee e7       	ldi	r30, 0x7E	; 126
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	80 81       	ld	r24, Z
    127e:	81 60       	ori	r24, 0x01	; 1
    1280:	80 83       	st	Z, r24
    set(DIDR0,ADC1D);
    1282:	80 81       	ld	r24, Z
    1284:	82 60       	ori	r24, 0x02	; 2
    1286:	80 83       	st	Z, r24
    set(DIDR0,ADC4D);
    1288:	80 81       	ld	r24, Z
    128a:	80 61       	ori	r24, 0x10	; 16
    128c:	80 83       	st	Z, r24
    set(DIDR0,ADC5D);
    128e:	80 81       	ld	r24, Z
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	80 83       	st	Z, r24
    set(DIDR0,ADC6D);
    1294:	80 81       	ld	r24, Z
    1296:	80 64       	ori	r24, 0x40	; 64
    1298:	80 83       	st	Z, r24
    set(DIDR0,ADC7D);
    129a:	80 81       	ld	r24, Z
    129c:	80 68       	ori	r24, 0x80	; 128
    129e:	80 83       	st	Z, r24
    set(DIDR2,ADC8D);
    12a0:	ed e7       	ldi	r30, 0x7D	; 125
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	80 81       	ld	r24, Z
    12a6:	81 60       	ori	r24, 0x01	; 1
    12a8:	80 83       	st	Z, r24
    set(DIDR2,ADC9D);
    12aa:	80 81       	ld	r24, Z
    12ac:	82 60       	ori	r24, 0x02	; 2
    12ae:	80 83       	st	Z, r24
    
    //Set the triggering to free-running
    set(ADCSRA,ADATE);
    12b0:	8c 91       	ld	r24, X
    12b2:	80 62       	ori	r24, 0x20	; 32
    12b4:	8c 93       	st	X, r24
    12b6:	08 95       	ret

000012b8 <init_ports>:
}

void init_ports(void)
{
    //B3 and D3 as outputs
	set(DDRB,3);
    12b8:	23 9a       	sbi	0x04, 3	; 4
	set(DDRD,3);
    12ba:	53 9a       	sbi	0x0a, 3	; 10
	set(PORTB,3);
    12bc:	2b 9a       	sbi	0x05, 3	; 5
	set(PORTD,3);
    12be:	5b 9a       	sbi	0x0b, 3	; 11
    
    //Set B2 as input and enable pull-up
    clear(DDRB,2);
    12c0:	22 98       	cbi	0x04, 2	; 4
    set(PORTB,2);
    12c2:	2a 9a       	sbi	0x05, 2	; 5
	
	//Set E6 as output
	set(DDRE,6);
    12c4:	6e 9a       	sbi	0x0d, 6	; 13
	clear(PORTE,6);
    12c6:	76 98       	cbi	0x0e, 6	; 14
    12c8:	08 95       	ret

000012ca <go_bwd>:
	//m_green(ON);
}

void go_bwd(void)
{
    clear(PORTB,3);
    12ca:	2b 98       	cbi	0x05, 3	; 5
    set(PORTD,3);
    12cc:	5b 9a       	sbi	0x0b, 3	; 11
    OCR1B = PWM_SPEED_FWD_LFT;
    12ce:	80 ef       	ldi	r24, 0xF0	; 240
    12d0:	9a e0       	ldi	r25, 0x0A	; 10
    12d2:	90 93 8b 00 	sts	0x008B, r25
    12d6:	80 93 8a 00 	sts	0x008A, r24
    OCR1C = PWM_SPEED_FWD_RGHT;
    12da:	8c e8       	ldi	r24, 0x8C	; 140
    12dc:	9a e0       	ldi	r25, 0x0A	; 10
    12de:	90 93 8d 00 	sts	0x008D, r25
    12e2:	80 93 8c 00 	sts	0x008C, r24
    12e6:	08 95       	ret

000012e8 <go_fwd>:
}

void go_fwd(void)
{
	set(PORTB,3);
    12e8:	2b 9a       	sbi	0x05, 3	; 5
	clear(PORTD,3);
    12ea:	5b 98       	cbi	0x0b, 3	; 11
	OCR1B = PWM_SPEED_FWD_LFT;
    12ec:	80 ef       	ldi	r24, 0xF0	; 240
    12ee:	9a e0       	ldi	r25, 0x0A	; 10
    12f0:	90 93 8b 00 	sts	0x008B, r25
    12f4:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = PWM_SPEED_FWD_RGHT;
    12f8:	8c e8       	ldi	r24, 0x8C	; 140
    12fa:	9a e0       	ldi	r25, 0x0A	; 10
    12fc:	90 93 8d 00 	sts	0x008D, r25
    1300:	80 93 8c 00 	sts	0x008C, r24
    1304:	08 95       	ret

00001306 <main>:
//Function prototypes
ISR(INT2_vect);

//Main function
int main(void)
{
    1306:	cf 93       	push	r28
    1308:	df 93       	push	r29
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	cd 54       	subi	r28, 0x4D	; 77
    1310:	d1 09       	sbc	r29, r1
    1312:	0f b6       	in	r0, 0x3f	; 63
    1314:	f8 94       	cli
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	0f be       	out	0x3f, r0	; 63
    131a:	cd bf       	out	0x3d, r28	; 61
    float dir_y = 0;
    float dir_angle = 0;
    float dist_goal = 0;
    float diff_theta = 0;
    int bank = 0;
	int cam_X = 0, cam_Y = 0, commands_var = 0;
    131c:	1a 82       	std	Y+2, r1	; 0x02
    131e:	19 82       	std	Y+1, r1	; 0x01
    1320:	1c 82       	std	Y+4, r1	; 0x04
    1322:	1b 82       	std	Y+3, r1	; 0x03
	
	//System packet
	signed char send_buffer[PACKET_LENGTH_SYSTEM] = {0};
		
	//Debug packet
	signed char output_buffer [PACKET_LENGTH_DEBUG] = {0};
    1324:	fe 01       	movw	r30, r28
    1326:	35 96       	adiw	r30, 0x05	; 5
    1328:	89 e2       	ldi	r24, 0x29	; 41
    132a:	df 01       	movw	r26, r30
    132c:	1d 92       	st	X+, r1
    132e:	8a 95       	dec	r24
    1330:	e9 f7       	brne	.-6      	; 0x132c <main+0x26>
	
    //Variable for the wii cam blobs
    unsigned int blobs_wii[SIZE_ARRAY_BLOBS];
    
    int x_robot = 0, y_robot = 0, theta_robot = 0;
    1332:	28 96       	adiw	r28, 0x08	; 8
    1334:	1f ae       	std	Y+63, r1	; 0x3f
    1336:	1e ae       	std	Y+62, r1	; 0x3e
    1338:	28 97       	sbiw	r28, 0x08	; 8
    133a:	2a 96       	adiw	r28, 0x0a	; 10
    133c:	1f ae       	std	Y+63, r1	; 0x3f
    133e:	1e ae       	std	Y+62, r1	; 0x3e
    1340:	2a 97       	sbiw	r28, 0x0a	; 10
    1342:	2c 96       	adiw	r28, 0x0c	; 12
    1344:	1f ae       	std	Y+63, r1	; 0x3f
    1346:	1e ae       	std	Y+62, r1	; 0x3e
    1348:	2c 97       	sbiw	r28, 0x0c	; 12
    div_t aux_conversion;
    
    //Set the clock system prescaler
    m_clockdivide(N_CLOCK);
    134a:	e1 e6       	ldi	r30, 0x61	; 97
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 e8       	ldi	r24, 0x80	; 128
    1350:	80 83       	st	Z, r24
    1352:	10 82       	st	Z, r1
    
    //Turn off the LEDs
    m_green(OFF);
    1354:	6a 9a       	sbi	0x0d, 2	; 13
    1356:	72 9a       	sbi	0x0e, 2	; 14
    m_red(OFF);
    1358:	6e 9a       	sbi	0x0d, 6	; 13
    135a:	76 9a       	sbi	0x0e, 6	; 14
	
	m_red(ON);    
    135c:	6e 9a       	sbi	0x0d, 6	; 13
    135e:	76 98       	cbi	0x0e, 6	; 14
    //Initialize bus
    m_bus_init();
    1360:	0e 94 a7 0a 	call	0x154e	; 0x154e <m_bus_init>
    
    //Initialize ports
    init_ports();
    1364:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <init_ports>
    
    //Set timer 1 for motor
    set_timer1();
    1368:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <set_timer1>
    
    //Set timer 3 for solenoid
    //set_timer3();
    
    //Set timer to every 0.1 s (10 Hz)
    set_timer4();
    136c:	0e 94 0a 09 	call	0x1214	; 0x1214 <set_timer4>
    
    //Set the ADC
    init_analog();
    1370:	0e 94 29 09 	call	0x1252	; 0x1252 <init_analog>
    {
        aux = m_wii_open();
    }
    
    m_wait(1000);*/
    m_red(OFF);
    1374:	6e 9a       	sbi	0x0d, 6	; 13
    1376:	76 9a       	sbi	0x0e, 6	; 14
	
    
    //Open the channel
    //m_rf_open(CHANNEL_SYSTEM,ALEX_ADDRESS_SYSTEM,PACKET_LENGTH_SYSTEM);
	m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);
    1378:	49 e2       	ldi	r20, 0x29	; 41
    137a:	69 e4       	ldi	r22, 0x49	; 73
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <m_rf_open>
		
    //Enable interruptions
    sei();
    1382:	78 94       	sei
        
        //If data received correctly
        if (wii_OK)
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    1384:	1e 01       	movw	r2, r28
    1386:	b3 e0       	ldi	r27, 0x03	; 3
    1388:	2b 0e       	add	r2, r27
    138a:	31 1c       	adc	r3, r1
    138c:	fe 01       	movw	r30, r28
    138e:	31 96       	adiw	r30, 0x01	; 1
    1390:	2e 96       	adiw	r28, 0x0e	; 14
    1392:	ff af       	std	Y+63, r31	; 0x3f
    1394:	ee af       	std	Y+62, r30	; 0x3e
    1396:	2e 97       	sbiw	r28, 0x0e	; 14
    1398:	2e 01       	movw	r4, r28
    139a:	fa e4       	ldi	r31, 0x4A	; 74
    139c:	4f 0e       	add	r4, r31
    139e:	51 1c       	adc	r5, r1
    13a0:	3e 01       	movw	r6, r28
    13a2:	88 e4       	ldi	r24, 0x48	; 72
    13a4:	68 0e       	add	r6, r24
    13a6:	71 1c       	adc	r7, r1
         turn_right();
		 m_red(OFF);
        }*/
		
		// Motor testing
        if (check(PINB,2)) 
    13a8:	1a 9b       	sbis	0x03, 2	; 3
    13aa:	07 c0       	rjmp	.+14     	; 0x13ba <main+0xb4>
		{
         go_fwd();
    13ac:	0e 94 74 09 	call	0x12e8	; 0x12e8 <go_fwd>
		 m_red(ON);
    13b0:	6e 9a       	sbi	0x0d, 6	; 13
    13b2:	76 98       	cbi	0x0e, 6	; 14
		 m_green(OFF);
    13b4:	6a 9a       	sbi	0x0d, 2	; 13
    13b6:	72 9a       	sbi	0x0e, 2	; 14
    13b8:	06 c0       	rjmp	.+12     	; 0x13c6 <main+0xc0>
        }
        else
		{
         go_bwd();
    13ba:	0e 94 65 09 	call	0x12ca	; 0x12ca <go_bwd>
		 m_red(OFF);
    13be:	6e 9a       	sbi	0x0d, 6	; 13
    13c0:	76 9a       	sbi	0x0e, 6	; 14
		 m_green(ON);
    13c2:	6a 9a       	sbi	0x0d, 2	; 13
    13c4:	72 98       	cbi	0x0e, 2	; 14
        }
		
		
        //LOCALIZATION CODE
        //Get the blobs
        cli();
    13c6:	f8 94       	cli
        wii_OK = m_wii_read(blobs_wii);
    13c8:	ce 01       	movw	r24, r28
    13ca:	8e 96       	adiw	r24, 0x2e	; 46
    13cc:	0e 94 bd 0b 	call	0x177a	; 0x177a <m_wii_read>
        sei();
    13d0:	78 94       	sei
        
        //If data received correctly
        if (wii_OK)
    13d2:	88 23       	and	r24, r24
    13d4:	81 f1       	breq	.+96     	; 0x1436 <main+0x130>
        {
            //Get the position and orientation of the robot from the constellation
            localize_OK = localize(blobs_wii[0],blobs_wii[3],blobs_wii[6],blobs_wii[9],blobs_wii[1],blobs_wii[4],blobs_wii[7],blobs_wii[10],&x_robot,&y_robot,&theta_robot,&cam_X,&cam_Y);
    13d6:	24 96       	adiw	r28, 0x04	; 4
    13d8:	ae ac       	ldd	r10, Y+62	; 0x3e
    13da:	bf ac       	ldd	r11, Y+63	; 0x3f
    13dc:	24 97       	sbiw	r28, 0x04	; 4
    13de:	cc ac       	ldd	r12, Y+60	; 0x3c
    13e0:	dd ac       	ldd	r13, Y+61	; 0x3d
    13e2:	ee a8       	ldd	r14, Y+54	; 0x36
    13e4:	ff a8       	ldd	r15, Y+55	; 0x37
    13e6:	08 a9       	ldd	r16, Y+48	; 0x30
    13e8:	19 a9       	ldd	r17, Y+49	; 0x31
    13ea:	22 96       	adiw	r28, 0x02	; 2
    13ec:	2e ad       	ldd	r18, Y+62	; 0x3e
    13ee:	3f ad       	ldd	r19, Y+63	; 0x3f
    13f0:	22 97       	sbiw	r28, 0x02	; 2
    13f2:	4a ad       	ldd	r20, Y+58	; 0x3a
    13f4:	5b ad       	ldd	r21, Y+59	; 0x3b
    13f6:	6c a9       	ldd	r22, Y+52	; 0x34
    13f8:	7d a9       	ldd	r23, Y+53	; 0x35
    13fa:	3f 92       	push	r3
    13fc:	2f 92       	push	r2
    13fe:	2e 96       	adiw	r28, 0x0e	; 14
    1400:	9f ad       	ldd	r25, Y+63	; 0x3f
    1402:	2e 97       	sbiw	r28, 0x0e	; 14
    1404:	9f 93       	push	r25
    1406:	2d 96       	adiw	r28, 0x0d	; 13
    1408:	af ad       	ldd	r26, Y+63	; 0x3f
    140a:	2d 97       	sbiw	r28, 0x0d	; 13
    140c:	af 93       	push	r26
    140e:	5f 92       	push	r5
    1410:	4f 92       	push	r4
    1412:	7f 92       	push	r7
    1414:	6f 92       	push	r6
    1416:	0f 2e       	mov	r0, r31
    1418:	f6 e4       	ldi	r31, 0x46	; 70
    141a:	8f 2e       	mov	r8, r31
    141c:	91 2c       	mov	r9, r1
    141e:	f0 2d       	mov	r31, r0
    1420:	8c 0e       	add	r8, r28
    1422:	9d 1e       	adc	r9, r29
    1424:	8e a5       	ldd	r24, Y+46	; 0x2e
    1426:	9f a5       	ldd	r25, Y+47	; 0x2f
    1428:	0e 94 9b 00 	call	0x136	; 0x136 <localize>
    142c:	0f b6       	in	r0, 0x3f	; 63
    142e:	f8 94       	cli
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	0f be       	out	0x3f, r0	; 63
    1434:	cd bf       	out	0x3d, r28	; 61
        }*/
         
        
        
        //SEND COMMANDS
        if (flag_timer == 1)
    1436:	80 91 40 01 	lds	r24, 0x0140
    143a:	90 91 41 01 	lds	r25, 0x0141
    143e:	01 97       	sbiw	r24, 0x01	; 1
    1440:	09 f0       	breq	.+2      	; 0x1444 <main+0x13e>
    1442:	b2 cf       	rjmp	.-156    	; 0x13a8 <main+0xa2>
            		
				//DEBUG COMMANDS SENDING
				//Open the channel
				m_rf_open(CHANNEL_DEBUG,REC_ADDRESS_DEBUG,PACKET_LENGTH_DEBUG);*/	
            
                output_buffer[0] = 1;
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	fd 83       	std	Y+5, r31	; 0x05
				output_buffer[1] = state;
    1448:	ae e3       	ldi	r26, 0x3E	; 62
    144a:	b1 e0       	ldi	r27, 0x01	; 1
    144c:	8c 91       	ld	r24, X
    144e:	8e 83       	std	Y+6, r24	; 0x06
				output_buffer[2] = x_robot;
    1450:	27 96       	adiw	r28, 0x07	; 7
    1452:	8f ad       	ldd	r24, Y+63	; 0x3f
    1454:	27 97       	sbiw	r28, 0x07	; 7
    1456:	8f 83       	std	Y+7, r24	; 0x07
				output_buffer[3] = y_robot;
    1458:	f3 01       	movw	r30, r6
    145a:	80 81       	ld	r24, Z
    145c:	88 87       	std	Y+8, r24	; 0x08
				aux_conversion = div(theta_robot,128);
    145e:	60 e8       	ldi	r22, 0x80	; 128
    1460:	70 e0       	ldi	r23, 0x00	; 0
    1462:	d2 01       	movw	r26, r4
    1464:	8d 91       	ld	r24, X+
    1466:	9c 91       	ld	r25, X
    1468:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
			
				//Put packets together for sending
				output_buffer[4] = (signed char)aux_conversion.quot;
    146c:	69 87       	std	Y+9, r22	; 0x09
				output_buffer[5] = (signed char)aux_conversion.rem;
    146e:	8a 87       	std	Y+10, r24	; 0x0a
			
				//Debugging
				output_buffer[6] = (signed char)status_go_to_goal;
    1470:	1b 86       	std	Y+11, r1	; 0x0b
			
				aux_conversion = div((int)dir_x,128);
    1472:	60 e8       	ldi	r22, 0x80	; 128
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 e0       	ldi	r24, 0x00	; 0
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[7] = (signed char)aux_conversion.quot;
    147e:	6c 87       	std	Y+12, r22	; 0x0c
				output_buffer[8] = (signed char)aux_conversion.rem;
    1480:	8d 87       	std	Y+13, r24	; 0x0d
			
				aux_conversion = div((int)dir_y,128);
    1482:	60 e8       	ldi	r22, 0x80	; 128
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[9] = (signed char)aux_conversion.quot;
    148e:	6e 87       	std	Y+14, r22	; 0x0e
				output_buffer[10] = (signed char)aux_conversion.rem;
    1490:	8f 87       	std	Y+15, r24	; 0x0f
			
				aux_conversion = div((int)dir_angle,128);
    1492:	60 e8       	ldi	r22, 0x80	; 128
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	90 e0       	ldi	r25, 0x00	; 0
    149a:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[11] = (signed char)aux_conversion.quot;
    149e:	68 8b       	std	Y+16, r22	; 0x10
				output_buffer[12] = (signed char)aux_conversion.rem;
    14a0:	89 8b       	std	Y+17, r24	; 0x11
			
				aux_conversion = div((int)dist_goal,128);
    14a2:	60 e8       	ldi	r22, 0x80	; 128
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	90 e0       	ldi	r25, 0x00	; 0
    14aa:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[13] = (signed char)aux_conversion.quot;
    14ae:	6a 8b       	std	Y+18, r22	; 0x12
				output_buffer[14] = (signed char)aux_conversion.rem;
    14b0:	8b 8b       	std	Y+19, r24	; 0x13
			
				aux_conversion = div(cam_X,128);
    14b2:	60 e8       	ldi	r22, 0x80	; 128
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[15] = (signed char)aux_conversion.quot;
    14be:	6c 8b       	std	Y+20, r22	; 0x14
				output_buffer[16] = (signed char)aux_conversion.rem;
    14c0:	8d 8b       	std	Y+21, r24	; 0x15
			
				aux_conversion = div(cam_Y,128);
    14c2:	60 e8       	ldi	r22, 0x80	; 128
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[17] = (signed char)aux_conversion.quot;
    14ce:	6e 8b       	std	Y+22, r22	; 0x16
				output_buffer[18] = (signed char)aux_conversion.rem;
    14d0:	8f 8b       	std	Y+23, r24	; 0x17
			
				output_buffer[19] = (signed char)commands_var;
    14d2:	18 8e       	std	Y+24, r1	; 0x18
			
				aux_conversion = div((int)diff_theta,128);
    14d4:	60 e8       	ldi	r22, 0x80	; 128
    14d6:	70 e0       	ldi	r23, 0x00	; 0
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[20] = (signed char)aux_conversion.quot;
    14e0:	69 8f       	std	Y+25, r22	; 0x19
				output_buffer[21] = (signed char)aux_conversion.rem;
    14e2:	8a 8f       	std	Y+26, r24	; 0x1a
			
				aux_conversion = div((int)OCR1B,128);
    14e4:	ea e8       	ldi	r30, 0x8A	; 138
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	91 81       	ldd	r25, Z+1	; 0x01
    14ec:	60 e8       	ldi	r22, 0x80	; 128
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[22] = (signed char)aux_conversion.quot;
    14f4:	6b 8f       	std	Y+27, r22	; 0x1b
				output_buffer[23] = (signed char)aux_conversion.rem;
    14f6:	8c 8f       	std	Y+28, r24	; 0x1c
			
				aux_conversion = div((int)OCR1C,128);
    14f8:	ac e8       	ldi	r26, 0x8C	; 140
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	8d 91       	ld	r24, X+
    14fe:	9c 91       	ld	r25, X
    1500:	60 e8       	ldi	r22, 0x80	; 128
    1502:	70 e0       	ldi	r23, 0x00	; 0
    1504:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <__divmodhi4>
				output_buffer[24] = (signed char)aux_conversion.quot;
    1508:	6d 8f       	std	Y+29, r22	; 0x1d
				output_buffer[25] = (signed char)aux_conversion.rem;
    150a:	8e 8f       	std	Y+30, r24	; 0x1e
			
				output_buffer[26] = (signed char)bank;
    150c:	1f 8e       	std	Y+31, r1	; 0x1f
				
				aux_conversion = div(PT7_have_puck,128);
				output_buffer[39] = (signed char)aux_conversion.quot;
				output_buffer[40] = (signed char)aux_conversion.rem;*/
			
				m_rf_send(SEN_ADDRESS_DEBUG,output_buffer,PACKET_LENGTH_DEBUG);
    150e:	49 e2       	ldi	r20, 0x29	; 41
    1510:	be 01       	movw	r22, r28
    1512:	6b 5f       	subi	r22, 0xFB	; 251
    1514:	7f 4f       	sbci	r23, 0xFF	; 255
    1516:	80 e6       	ldi	r24, 0x60	; 96
    1518:	0e 94 0e 0b 	call	0x161c	; 0x161c <m_rf_send>
				timer_switch = 0;
			}*/
			
			
			//Reset flag
			flag_timer = 0;
    151c:	10 92 41 01 	sts	0x0141, r1
    1520:	10 92 40 01 	sts	0x0140, r1
    1524:	41 cf       	rjmp	.-382    	; 0x13a8 <main+0xa2>

00001526 <__vector_41>:
 m_red(ON);
 flag_timer = 1;
 }*/

ISR(TIMER4_OVF_vect)
{
    1526:	1f 92       	push	r1
    1528:	0f 92       	push	r0
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	0f 92       	push	r0
    152e:	11 24       	eor	r1, r1
    1530:	8f 93       	push	r24
    1532:	9f 93       	push	r25
    //m_green(ON);
    flag_timer = 1;
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	90 93 41 01 	sts	0x0141, r25
    153c:	80 93 40 01 	sts	0x0140, r24
}
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	0f 90       	pop	r0
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	0f 90       	pop	r0
    154a:	1f 90       	pop	r1
    154c:	18 95       	reti

0000154e <m_bus_init>:

// PUBLIC FUNCTIONS
void m_bus_init(void)
{
	// ENABLE PULLUPS
	set(PORTD,0);
    154e:	58 9a       	sbi	0x0b, 0	; 11
	set(PORTD,1);
    1550:	59 9a       	sbi	0x0b, 1	; 11
	set(PORTD,2);
    1552:	5a 9a       	sbi	0x0b, 2	; 11
	
	// CONFIGURE THE CLOCK
	TWBR = 12;	// CLK freq = CPU clock / (16 + 2*TWBR*(4^TWPS)), 16MHz clock, TWBR=12, TWPS=00 -> 400kHz
    1554:	8c e0       	ldi	r24, 0x0C	; 12
    1556:	80 93 b8 00 	sts	0x00B8, r24

	// ENABLE interrupts in INT2 (D2)
	set(EICRA,ISC21); clear(EICRA,ISC20); // trigger on falling edge
    155a:	e9 e6       	ldi	r30, 0x69	; 105
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	80 62       	ori	r24, 0x20	; 32
    1562:	80 83       	st	Z, r24
    1564:	80 81       	ld	r24, Z
    1566:	8f 7e       	andi	r24, 0xEF	; 239
    1568:	80 83       	st	Z, r24
	set(EIMSK,INT2); // demask the interrupt
    156a:	ea 9a       	sbi	0x1d, 2	; 29
	sei(); // enable global interrupts
    156c:	78 94       	sei
    156e:	08 95       	ret

00001570 <m_rf_open>:
#define MRFINIT			0x01
#define	MRFREAD			0x02
#define MRFSEND			0x03

char m_rf_open(char channel, char RXaddress, char packet_length)
{	
    1570:	1f 93       	push	r17
    1572:	cf 93       	push	r28
    1574:	df 93       	push	r29
    1576:	18 2f       	mov	r17, r24
    1578:	d6 2f       	mov	r29, r22
    157a:	c4 2f       	mov	r28, r20
	// START | MRFTWIADDR | MRFINIT | channel | RXaddress | packet_length | STOP
	
	m_bus_init();
    157c:	0e 94 a7 0a 	call	0x154e	; 0x154e <m_bus_init>
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1580:	94 ea       	ldi	r25, 0xA4	; 164
    1582:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1586:	ec eb       	ldi	r30, 0xBC	; 188
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	90 81       	ld	r25, Z
    158c:	99 23       	and	r25, r25
    158e:	ec f7       	brge	.-6      	; 0x158a <m_rf_open+0x1a>
	
	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1590:	90 e5       	ldi	r25, 0x50	; 80
    1592:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1596:	94 e8       	ldi	r25, 0x84	; 132
    1598:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    159c:	ec eb       	ldi	r30, 0xBC	; 188
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	90 81       	ld	r25, Z
    15a2:	99 23       	and	r25, r25
    15a4:	ec f7       	brge	.-6      	; 0x15a0 <m_rf_open+0x30>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    15a6:	90 91 b9 00 	lds	r25, 0x00B9
    15aa:	98 7f       	andi	r25, 0xF8	; 248
    15ac:	90 32       	cpi	r25, 0x20	; 32
    15ae:	29 f4       	brne	.+10     	; 0x15ba <m_rf_open+0x4a>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    15b0:	84 e9       	ldi	r24, 0x94	; 148
    15b2:	80 93 bc 00 	sts	0x00BC, r24
		return 0;
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	2d c0       	rjmp	.+90     	; 0x1614 <m_rf_open+0xa4>
	}
	
	// SEND THE DESIRED MRF MODE
	TWDR = MRFINIT;
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    15c0:	84 e8       	ldi	r24, 0x84	; 132
    15c2:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    15c6:	ec eb       	ldi	r30, 0xBC	; 188
    15c8:	f0 e0       	ldi	r31, 0x00	; 0
    15ca:	90 81       	ld	r25, Z
    15cc:	99 23       	and	r25, r25
    15ce:	ec f7       	brge	.-6      	; 0x15ca <m_rf_open+0x5a>
	
	// SEND DATA
	TWDR = channel;
    15d0:	10 93 bb 00 	sts	0x00BB, r17
	TWCR = (1<<TWINT) | (1<<TWEN);
    15d4:	84 e8       	ldi	r24, 0x84	; 132
    15d6:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    15da:	ec eb       	ldi	r30, 0xBC	; 188
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	88 23       	and	r24, r24
    15e2:	ec f7       	brge	.-6      	; 0x15de <m_rf_open+0x6e>
	
	TWDR = RXaddress;
    15e4:	d0 93 bb 00 	sts	0x00BB, r29
	TWCR = (1<<TWINT) | (1<<TWEN);
    15e8:	84 e8       	ldi	r24, 0x84	; 132
    15ea:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    15ee:	ec eb       	ldi	r30, 0xBC	; 188
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	88 23       	and	r24, r24
    15f6:	ec f7       	brge	.-6      	; 0x15f2 <m_rf_open+0x82>
	
	TWDR = packet_length;
    15f8:	c0 93 bb 00 	sts	0x00BB, r28
	TWCR = (1<<TWINT) | (1<<TWEN);
    15fc:	84 e8       	ldi	r24, 0x84	; 132
    15fe:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    1602:	ec eb       	ldi	r30, 0xBC	; 188
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	88 23       	and	r24, r24
    160a:	ec f7       	brge	.-6      	; 0x1606 <m_rf_open+0x96>
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    160c:	84 e9       	ldi	r24, 0x94	; 148
    160e:	80 93 bc 00 	sts	0x00BC, r24
	
	return 1;
    1612:	81 e0       	ldi	r24, 0x01	; 1
}
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	08 95       	ret

0000161c <m_rf_send>:

	return 1;
}

char m_rf_send(char TXaddress, char* buffer, char packet_length)
{
    161c:	cf 93       	push	r28
    161e:	df 93       	push	r29
	// START | MRFTWIADDR | MRFSEND | TXaddress | DATA_0 | ... | DATA_N | STOP
	
	int i;
	
	// DISABLE INTERRUPTS
	cli();
    1620:	f8 94       	cli
	
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1622:	94 ea       	ldi	r25, 0xA4	; 164
    1624:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    1628:	ec eb       	ldi	r30, 0xBC	; 188
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	90 81       	ld	r25, Z
    162e:	99 23       	and	r25, r25
    1630:	ec f7       	brge	.-6      	; 0x162c <m_rf_send+0x10>

	// ADDRESS
	TWDR = MRFTWIADDR<<1;
    1632:	90 e5       	ldi	r25, 0x50	; 80
    1634:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1638:	94 e8       	ldi	r25, 0x84	; 132
    163a:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    163e:	ec eb       	ldi	r30, 0xBC	; 188
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	90 81       	ld	r25, Z
    1644:	99 23       	and	r25, r25
    1646:	ec f7       	brge	.-6      	; 0x1642 <m_rf_send+0x26>
	if((TWSR & 0xF8)== 0x20){ // ACK was not received - may not be connected/listening
    1648:	90 91 b9 00 	lds	r25, 0x00B9
    164c:	98 7f       	andi	r25, 0xF8	; 248
    164e:	90 32       	cpi	r25, 0x20	; 32
    1650:	31 f4       	brne	.+12     	; 0x165e <m_rf_send+0x42>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    1652:	84 e9       	ldi	r24, 0x94	; 148
    1654:	80 93 bc 00 	sts	0x00BC, r24
		sei();	// re-enable interrupts
    1658:	78 94       	sei
		return 0;
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	32 c0       	rjmp	.+100    	; 0x16c2 <m_rf_send+0xa6>
	}
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = MRFSEND;
    165e:	93 e0       	ldi	r25, 0x03	; 3
    1660:	90 93 bb 00 	sts	0x00BB, r25
	TWCR = (1<<TWINT) | (1<<TWEN);
    1664:	94 e8       	ldi	r25, 0x84	; 132
    1666:	90 93 bc 00 	sts	0x00BC, r25
	while(!(TWCR & (1<<TWINT))){};
    166a:	ec eb       	ldi	r30, 0xBC	; 188
    166c:	f0 e0       	ldi	r31, 0x00	; 0
    166e:	90 81       	ld	r25, Z
    1670:	99 23       	and	r25, r25
    1672:	ec f7       	brge	.-6      	; 0x166e <m_rf_send+0x52>
	
	// SEND THE DESIRED MRF MODE (SEND)
	TWDR = TXaddress;
    1674:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1678:	84 e8       	ldi	r24, 0x84	; 132
    167a:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){};
    167e:	ec eb       	ldi	r30, 0xBC	; 188
    1680:	f0 e0       	ldi	r31, 0x00	; 0
    1682:	80 81       	ld	r24, Z
    1684:	88 23       	and	r24, r24
    1686:	ec f7       	brge	.-6      	; 0x1682 <m_rf_send+0x66>

	// SEND DATA
	for(i=0;i<packet_length;i++){
    1688:	24 2f       	mov	r18, r20
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	12 16       	cp	r1, r18
    168e:	13 06       	cpc	r1, r19
    1690:	9c f4       	brge	.+38     	; 0x16b8 <m_rf_send+0x9c>
    1692:	a6 2f       	mov	r26, r22
    1694:	b7 2f       	mov	r27, r23
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
		TWDR = buffer[i];
    169a:	cb eb       	ldi	r28, 0xBB	; 187
    169c:	d0 e0       	ldi	r29, 0x00	; 0
		TWCR = (1<<TWINT) | (1<<TWEN);
    169e:	ec eb       	ldi	r30, 0xBC	; 188
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	54 e8       	ldi	r21, 0x84	; 132
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
		TWDR = buffer[i];
    16a4:	4d 91       	ld	r20, X+
    16a6:	48 83       	st	Y, r20
		TWCR = (1<<TWINT) | (1<<TWEN);
    16a8:	50 83       	st	Z, r21
		while(!(TWCR & (1<<TWINT))){};
    16aa:	40 81       	ld	r20, Z
    16ac:	44 23       	and	r20, r20
    16ae:	ec f7       	brge	.-6      	; 0x16aa <m_rf_send+0x8e>
	TWDR = TXaddress;
	TWCR = (1<<TWINT) | (1<<TWEN);
	while(!(TWCR & (1<<TWINT))){};

	// SEND DATA
	for(i=0;i<packet_length;i++){
    16b0:	01 96       	adiw	r24, 0x01	; 1
    16b2:	82 17       	cp	r24, r18
    16b4:	93 07       	cpc	r25, r19
    16b6:	b4 f3       	brlt	.-20     	; 0x16a4 <m_rf_send+0x88>
		TWCR = (1<<TWINT) | (1<<TWEN);
		while(!(TWCR & (1<<TWINT))){};
	}
	
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    16b8:	84 e9       	ldi	r24, 0x94	; 148
    16ba:	80 93 bc 00 	sts	0x00BC, r24
	
	// RE-ENABLE INTERRUPTS
	sei();
    16be:	78 94       	sei
	
	return 1;
    16c0:	81 e0       	ldi	r24, 0x01	; 1
}
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	08 95       	ret

000016c8 <twi_wait>:
	}
}

unsigned char twi_wait(void)
{
	unsigned int wait=0;
    16c8:	20 e0       	ldi	r18, 0x00	; 0
    16ca:	30 e0       	ldi	r19, 0x00	; 0
	while((!(TWCR & (1<<TWINT))) && (wait++<TWI_MAX_WAIT)){};	// wait for acknowledgement that they byte was sent
    16cc:	ec eb       	ldi	r30, 0xBC	; 188
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	88 23       	and	r24, r24
    16d4:	34 f0       	brlt	.+12     	; 0x16e2 <twi_wait+0x1a>
    16d6:	2f 5f       	subi	r18, 0xFF	; 255
    16d8:	3f 4f       	sbci	r19, 0xFF	; 255
    16da:	29 3e       	cpi	r18, 0xE9	; 233
    16dc:	83 e0       	ldi	r24, 0x03	; 3
    16de:	38 07       	cpc	r19, r24
    16e0:	b9 f7       	brne	.-18     	; 0x16d0 <twi_wait+0x8>
	if(wait==TWI_MAX_WAIT)
    16e2:	81 e0       	ldi	r24, 0x01	; 1
    16e4:	28 3e       	cpi	r18, 0xE8	; 232
    16e6:	33 40       	sbci	r19, 0x03	; 3
    16e8:	09 f4       	brne	.+2      	; 0x16ec <twi_wait+0x24>
    16ea:	80 e0       	ldi	r24, 0x00	; 0
	{
		return 0;					// fail
	} else {
		return 1;					// success
	}
}
    16ec:	08 95       	ret

000016ee <send_byte>:
	return 1;	// success
}	

unsigned char send_byte(unsigned char byte)
{
	TWDR = byte;					// load the byte
    16ee:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);	// send the byte
    16f2:	84 e8       	ldi	r24, 0x84	; 132
    16f4:	80 93 bc 00 	sts	0x00BC, r24
	if(twi_wait())					// timed out
    16f8:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <twi_wait>
    16fc:	88 23       	and	r24, r24
    16fe:	21 f0       	breq	.+8      	; 0x1708 <send_byte+0x1a>
	{
		return (TWSR & 0xF8);		// return the status with prescaler bits masked out
    1700:	80 91 b9 00 	lds	r24, 0x00B9
    1704:	88 7f       	andi	r24, 0xF8	; 248
    1706:	08 95       	ret
	} else {
		return 0;					// comm failure
    1708:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    170a:	08 95       	ret

0000170c <start_read>:
	}	
	return 1;	// success
}	

unsigned char start_read(unsigned char address)
{
    170c:	cf 93       	push	r28
    170e:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1710:	94 ea       	ldi	r25, 0xA4	; 164
    1712:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    1716:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <twi_wait>
    171a:	88 23       	and	r24, r24
    171c:	61 f0       	breq	.+24     	; 0x1736 <start_read+0x2a>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(((address<<1) + 1));
    171e:	8c 2f       	mov	r24, r28
    1720:	88 0f       	add	r24, r24
    1722:	8f 5f       	subi	r24, 0xFF	; 255
    1724:	0e 94 77 0b 	call	0x16ee	; 0x16ee <send_byte>
	if(status== 0x48){ // ACK was not received - may not be connected/listening
    1728:	88 34       	cpi	r24, 0x48	; 72
    172a:	39 f4       	brne	.+14     	; 0x173a <start_read+0x2e>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    172c:	84 e9       	ldi	r24, 0x94	; 148
    172e:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	03 c0       	rjmp	.+6      	; 0x173c <start_read+0x30>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1736:	80 e0       	ldi	r24, 0x00	; 0
    1738:	01 c0       	rjmp	.+2      	; 0x173c <start_read+0x30>
	status = send_byte(((address<<1) + 1));
	if(status== 0x48){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    173a:	81 e0       	ldi	r24, 0x01	; 1
}	
    173c:	cf 91       	pop	r28
    173e:	08 95       	ret

00001740 <start_write>:
//
//


unsigned char start_write(unsigned char address)
{
    1740:	cf 93       	push	r28
    1742:	c8 2f       	mov	r28, r24
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
    1744:	94 ea       	ldi	r25, 0xA4	; 164
    1746:	90 93 bc 00 	sts	0x00BC, r25
	if(!twi_wait())
    174a:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <twi_wait>
    174e:	88 23       	and	r24, r24
    1750:	59 f0       	breq	.+22     	; 0x1768 <start_write+0x28>
	{
		return 0;
	}
	
	// ADDRESS
	status = send_byte(address<<1);
    1752:	8c 2f       	mov	r24, r28
    1754:	88 0f       	add	r24, r24
    1756:	0e 94 77 0b 	call	0x16ee	; 0x16ee <send_byte>
	if(status== 0x20){ // ACK was not received - may not be connected/listening
    175a:	80 32       	cpi	r24, 0x20	; 32
    175c:	39 f4       	brne	.+14     	; 0x176c <start_write+0x2c>
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
    175e:	84 e9       	ldi	r24, 0x94	; 148
    1760:	80 93 bc 00 	sts	0x00BC, r24
		return 0;	// failure
    1764:	80 e0       	ldi	r24, 0x00	; 0
    1766:	03 c0       	rjmp	.+6      	; 0x176e <start_write+0x2e>
	unsigned char status;
	// START
	TWCR = (1<<TWEN)|(1<<TWSTA)|(1<<TWINT);
	if(!twi_wait())
	{
		return 0;
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	01 c0       	rjmp	.+2      	; 0x176e <start_write+0x2e>
	status = send_byte(address<<1);
	if(status== 0x20){ // ACK was not received - may not be connected/listening
		TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO); // let go of the line (STOP)
		return 0;	// failure
	}	
	return 1;	// success
    176c:	81 e0       	ldi	r24, 0x01	; 1
}	
    176e:	cf 91       	pop	r28
    1770:	08 95       	ret

00001772 <end>:
}

void end(void)
{
	// STOP
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWSTO);
    1772:	84 e9       	ldi	r24, 0x94	; 148
    1774:	80 93 bc 00 	sts	0x00BC, r24
    1778:	08 95       	ret

0000177a <m_wii_read>:

	return 1;
}

char m_wii_read(unsigned int* blob_data)
{
    177a:	ef 92       	push	r14
    177c:	ff 92       	push	r15
    177e:	0f 93       	push	r16
    1780:	1f 93       	push	r17
    1782:	cf 93       	push	r28
    1784:	df 93       	push	r29
    1786:	cd b7       	in	r28, 0x3d	; 61
    1788:	de b7       	in	r29, 0x3e	; 62
    178a:	60 97       	sbiw	r28, 0x10	; 16
    178c:	0f b6       	in	r0, 0x3f	; 63
    178e:	f8 94       	cli
    1790:	de bf       	out	0x3e, r29	; 62
    1792:	0f be       	out	0x3f, r0	; 63
    1794:	cd bf       	out	0x3d, r28	; 61
    1796:	e8 2e       	mov	r14, r24
    1798:	f9 2e       	mov	r15, r25
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    179a:	fe 01       	movw	r30, r28
    179c:	31 96       	adiw	r30, 0x01	; 1
    179e:	80 e1       	ldi	r24, 0x10	; 16
    17a0:	df 01       	movw	r26, r30
    17a2:	1d 92       	st	X+, r1
    17a4:	8a 95       	dec	r24
    17a6:	e9 f7       	brne	.-6      	; 0x17a2 <m_wii_read+0x28>
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    17a8:	88 e5       	ldi	r24, 0x58	; 88
    17aa:	0e 94 a0 0b 	call	0x1740	; 0x1740 <start_write>
    17ae:	88 23       	and	r24, r24
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <m_wii_read+0x3a>
    17b2:	66 c0       	rjmp	.+204    	; 0x1880 <m_wii_read+0x106>
	if(!send_byte(0x36)){return 0;}
    17b4:	86 e3       	ldi	r24, 0x36	; 54
    17b6:	0e 94 77 0b 	call	0x16ee	; 0x16ee <send_byte>
    17ba:	88 23       	and	r24, r24
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <m_wii_read+0x46>
    17be:	62 c0       	rjmp	.+196    	; 0x1884 <m_wii_read+0x10a>
	end();
    17c0:	0e 94 b9 0b 	call	0x1772	; 0x1772 <end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    17c4:	b8 e0       	ldi	r27, 0x08	; 8
    17c6:	ba 95       	dec	r27
    17c8:	f1 f7       	brne	.-4      	; 0x17c6 <m_wii_read+0x4c>
    17ca:	00 00       	nop

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    17cc:	88 e5       	ldi	r24, 0x58	; 88
    17ce:	0e 94 86 0b 	call	0x170c	; 0x170c <start_read>
    17d2:	88 23       	and	r24, r24
    17d4:	09 f4       	brne	.+2      	; 0x17d8 <m_wii_read+0x5e>
    17d6:	58 c0       	rjmp	.+176    	; 0x1888 <m_wii_read+0x10e>
    17d8:	ae 01       	movw	r20, r28
    17da:	4f 5f       	subi	r20, 0xFF	; 255
    17dc:	5f 4f       	sbci	r21, 0xFF	; 255
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    17de:	8e 01       	movw	r16, r28
    17e0:	00 5f       	subi	r16, 0xF0	; 240
    17e2:	1f 4f       	sbci	r17, 0xFF	; 255
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    17e4:	ec eb       	ldi	r30, 0xBC	; 188
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	94 ec       	ldi	r25, 0xC4	; 196
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
    17ea:	2b eb       	ldi	r18, 0xBB	; 187
    17ec:	30 e0       	ldi	r19, 0x00	; 0
	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
    17ee:	90 83       	st	Z, r25
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    17f0:	80 81       	ld	r24, Z
    17f2:	88 23       	and	r24, r24
    17f4:	ec f7       	brge	.-6      	; 0x17f0 <m_wii_read+0x76>
		temp[i] = TWDR;
    17f6:	d9 01       	movw	r26, r18
    17f8:	8c 91       	ld	r24, X
    17fa:	da 01       	movw	r26, r20
    17fc:	8d 93       	st	X+, r24
    17fe:	ad 01       	movw	r20, r26
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
	for(i=0;i<15;i++)
    1800:	a0 17       	cp	r26, r16
    1802:	b1 07       	cpc	r27, r17
    1804:	a1 f7       	brne	.-24     	; 0x17ee <m_wii_read+0x74>
	{
		TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);	// clear the flag, enable ACKs, and wait for another byte
		while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
		temp[i] = TWDR;
	}
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
    1806:	84 e8       	ldi	r24, 0x84	; 132
    1808:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
    180c:	ec eb       	ldi	r30, 0xBC	; 188
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	88 23       	and	r24, r24
    1814:	ec f7       	brge	.-6      	; 0x1810 <m_wii_read+0x96>
	temp[15] = TWDR;
    1816:	80 91 bb 00 	lds	r24, 0x00BB
    181a:	88 8b       	std	Y+16, r24	; 0x10
	end();
    181c:	0e 94 b9 0b 	call	0x1772	; 0x1772 <end>
    1820:	de 01       	movw	r26, r28
    1822:	14 96       	adiw	r26, 0x04	; 4
    1824:	6e 2d       	mov	r22, r14
    1826:	7f 2d       	mov	r23, r15

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1828:	4c 91       	ld	r20, X
    182a:	24 2f       	mov	r18, r20
    182c:	20 73       	andi	r18, 0x30	; 48
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    182e:	cd 01       	movw	r24, r26
    1830:	02 97       	sbiw	r24, 0x02	; 2
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
    1832:	fc 01       	movw	r30, r24
    1834:	80 81       	ld	r24, Z
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	f0 e1       	ldi	r31, 0x10	; 16
    183a:	2f 9f       	mul	r18, r31
    183c:	80 0d       	add	r24, r0
    183e:	91 1d       	adc	r25, r1
    1840:	11 24       	eor	r1, r1
    1842:	fb 01       	movw	r30, r22
    1844:	91 83       	std	Z+1, r25	; 0x01
    1846:	80 83       	st	Z, r24
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    1848:	84 2f       	mov	r24, r20
    184a:	80 7c       	andi	r24, 0xC0	; 192
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
	m_wait(INTERPACKET);

	return 1;
}

char m_wii_read(unsigned int* blob_data)
    1856:	9d 01       	movw	r18, r26
    1858:	21 50       	subi	r18, 0x01	; 1
    185a:	31 09       	sbc	r19, r1
	end();

	for(i=0;i<10;i+=3) // for each blob:
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
    185c:	f9 01       	movw	r30, r18
    185e:	20 81       	ld	r18, Z
    1860:	82 0f       	add	r24, r18
    1862:	91 1d       	adc	r25, r1
    1864:	fb 01       	movw	r30, r22
    1866:	93 83       	std	Z+3, r25	; 0x03
    1868:	82 83       	std	Z+2, r24	; 0x02
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
    186a:	4f 70       	andi	r20, 0x0F	; 15
    186c:	44 83       	std	Z+4, r20	; 0x04
    186e:	15 82       	std	Z+5, r1	; 0x05
    1870:	13 96       	adiw	r26, 0x03	; 3
    1872:	6a 5f       	subi	r22, 0xFA	; 250
    1874:	7f 4f       	sbci	r23, 0xFF	; 255
	TWCR = (1<<TWINT) | (1<<TWEN);	// clear the flag, no ACK, and wait for another byte
	while(!(TWCR & (1<<TWINT))){}; // wait for an interrupt to signal that a new byte is available
	temp[15] = TWDR;
	end();

	for(i=0;i<10;i+=3) // for each blob:
    1876:	0a 17       	cp	r16, r26
    1878:	1b 07       	cpc	r17, r27
    187a:	b1 f6       	brne	.-84     	; 0x1828 <m_wii_read+0xae>
	{	// i = 0, 3, 6, 9
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
    187c:	81 e0       	ldi	r24, 0x01	; 1
    187e:	05 c0       	rjmp	.+10     	; 0x188a <m_wii_read+0x110>
{
	int i;
	unsigned char temp[16] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
	
	// prepare for reading
	if(!start_write(MWIITWIADDR)){return 0;}
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	03 c0       	rjmp	.+6      	; 0x188a <m_wii_read+0x110>
	if(!send_byte(0x36)){return 0;}
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	01 c0       	rjmp	.+2      	; 0x188a <m_wii_read+0x110>
	end();

	_delay_us(25);
	
	if(!start_read(MWIITWIADDR)){return 0;}
    1888:	80 e0       	ldi	r24, 0x00	; 0
		blob_data[i] = (unsigned int)temp[i+1] + ((int)(temp[i+3] & 0b00110000) <<4);	// X
		blob_data[i+1] = (unsigned int)temp[i+2] + ((int)(temp[i+3] & 0b11000000) <<2);	// Y
		blob_data[i+2] = temp[i+3] & 0b00001111;										// size
	}
	return 1;
}
    188a:	60 96       	adiw	r28, 0x10	; 16
    188c:	0f b6       	in	r0, 0x3f	; 63
    188e:	f8 94       	cli
    1890:	de bf       	out	0x3e, r29	; 62
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	cd bf       	out	0x3d, r28	; 61
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14
    18a2:	08 95       	ret

000018a4 <__subsf3>:
    18a4:	50 58       	subi	r21, 0x80	; 128

000018a6 <__addsf3>:
    18a6:	bb 27       	eor	r27, r27
    18a8:	aa 27       	eor	r26, r26
    18aa:	0e d0       	rcall	.+28     	; 0x18c8 <__addsf3x>
    18ac:	27 c2       	rjmp	.+1102   	; 0x1cfc <__fp_round>
    18ae:	f0 d1       	rcall	.+992    	; 0x1c90 <__fp_pscA>
    18b0:	30 f0       	brcs	.+12     	; 0x18be <__addsf3+0x18>
    18b2:	f5 d1       	rcall	.+1002   	; 0x1c9e <__fp_pscB>
    18b4:	20 f0       	brcs	.+8      	; 0x18be <__addsf3+0x18>
    18b6:	31 f4       	brne	.+12     	; 0x18c4 <__addsf3+0x1e>
    18b8:	9f 3f       	cpi	r25, 0xFF	; 255
    18ba:	11 f4       	brne	.+4      	; 0x18c0 <__addsf3+0x1a>
    18bc:	1e f4       	brtc	.+6      	; 0x18c4 <__addsf3+0x1e>
    18be:	c0 c1       	rjmp	.+896    	; 0x1c40 <__fp_nan>
    18c0:	0e f4       	brtc	.+2      	; 0x18c4 <__addsf3+0x1e>
    18c2:	e0 95       	com	r30
    18c4:	e7 fb       	bst	r30, 7
    18c6:	b6 c1       	rjmp	.+876    	; 0x1c34 <__fp_inf>

000018c8 <__addsf3x>:
    18c8:	e9 2f       	mov	r30, r25
    18ca:	3a d2       	rcall	.+1140   	; 0x1d40 <__fp_split3>
    18cc:	80 f3       	brcs	.-32     	; 0x18ae <__addsf3+0x8>
    18ce:	ba 17       	cp	r27, r26
    18d0:	62 07       	cpc	r22, r18
    18d2:	73 07       	cpc	r23, r19
    18d4:	84 07       	cpc	r24, r20
    18d6:	95 07       	cpc	r25, r21
    18d8:	18 f0       	brcs	.+6      	; 0x18e0 <__addsf3x+0x18>
    18da:	71 f4       	brne	.+28     	; 0x18f8 <__addsf3x+0x30>
    18dc:	9e f5       	brtc	.+102    	; 0x1944 <__addsf3x+0x7c>
    18de:	52 c2       	rjmp	.+1188   	; 0x1d84 <__fp_zero>
    18e0:	0e f4       	brtc	.+2      	; 0x18e4 <__addsf3x+0x1c>
    18e2:	e0 95       	com	r30
    18e4:	0b 2e       	mov	r0, r27
    18e6:	ba 2f       	mov	r27, r26
    18e8:	a0 2d       	mov	r26, r0
    18ea:	0b 01       	movw	r0, r22
    18ec:	b9 01       	movw	r22, r18
    18ee:	90 01       	movw	r18, r0
    18f0:	0c 01       	movw	r0, r24
    18f2:	ca 01       	movw	r24, r20
    18f4:	a0 01       	movw	r20, r0
    18f6:	11 24       	eor	r1, r1
    18f8:	ff 27       	eor	r31, r31
    18fa:	59 1b       	sub	r21, r25
    18fc:	99 f0       	breq	.+38     	; 0x1924 <__addsf3x+0x5c>
    18fe:	59 3f       	cpi	r21, 0xF9	; 249
    1900:	50 f4       	brcc	.+20     	; 0x1916 <__addsf3x+0x4e>
    1902:	50 3e       	cpi	r21, 0xE0	; 224
    1904:	68 f1       	brcs	.+90     	; 0x1960 <__addsf3x+0x98>
    1906:	1a 16       	cp	r1, r26
    1908:	f0 40       	sbci	r31, 0x00	; 0
    190a:	a2 2f       	mov	r26, r18
    190c:	23 2f       	mov	r18, r19
    190e:	34 2f       	mov	r19, r20
    1910:	44 27       	eor	r20, r20
    1912:	58 5f       	subi	r21, 0xF8	; 248
    1914:	f3 cf       	rjmp	.-26     	; 0x18fc <__addsf3x+0x34>
    1916:	46 95       	lsr	r20
    1918:	37 95       	ror	r19
    191a:	27 95       	ror	r18
    191c:	a7 95       	ror	r26
    191e:	f0 40       	sbci	r31, 0x00	; 0
    1920:	53 95       	inc	r21
    1922:	c9 f7       	brne	.-14     	; 0x1916 <__addsf3x+0x4e>
    1924:	7e f4       	brtc	.+30     	; 0x1944 <__addsf3x+0x7c>
    1926:	1f 16       	cp	r1, r31
    1928:	ba 0b       	sbc	r27, r26
    192a:	62 0b       	sbc	r22, r18
    192c:	73 0b       	sbc	r23, r19
    192e:	84 0b       	sbc	r24, r20
    1930:	ba f0       	brmi	.+46     	; 0x1960 <__addsf3x+0x98>
    1932:	91 50       	subi	r25, 0x01	; 1
    1934:	a1 f0       	breq	.+40     	; 0x195e <__addsf3x+0x96>
    1936:	ff 0f       	add	r31, r31
    1938:	bb 1f       	adc	r27, r27
    193a:	66 1f       	adc	r22, r22
    193c:	77 1f       	adc	r23, r23
    193e:	88 1f       	adc	r24, r24
    1940:	c2 f7       	brpl	.-16     	; 0x1932 <__addsf3x+0x6a>
    1942:	0e c0       	rjmp	.+28     	; 0x1960 <__addsf3x+0x98>
    1944:	ba 0f       	add	r27, r26
    1946:	62 1f       	adc	r22, r18
    1948:	73 1f       	adc	r23, r19
    194a:	84 1f       	adc	r24, r20
    194c:	48 f4       	brcc	.+18     	; 0x1960 <__addsf3x+0x98>
    194e:	87 95       	ror	r24
    1950:	77 95       	ror	r23
    1952:	67 95       	ror	r22
    1954:	b7 95       	ror	r27
    1956:	f7 95       	ror	r31
    1958:	9e 3f       	cpi	r25, 0xFE	; 254
    195a:	08 f0       	brcs	.+2      	; 0x195e <__addsf3x+0x96>
    195c:	b3 cf       	rjmp	.-154    	; 0x18c4 <__addsf3+0x1e>
    195e:	93 95       	inc	r25
    1960:	88 0f       	add	r24, r24
    1962:	08 f0       	brcs	.+2      	; 0x1966 <__addsf3x+0x9e>
    1964:	99 27       	eor	r25, r25
    1966:	ee 0f       	add	r30, r30
    1968:	97 95       	ror	r25
    196a:	87 95       	ror	r24
    196c:	08 95       	ret
    196e:	90 d1       	rcall	.+800    	; 0x1c90 <__fp_pscA>
    1970:	58 f0       	brcs	.+22     	; 0x1988 <__addsf3x+0xc0>
    1972:	80 e8       	ldi	r24, 0x80	; 128
    1974:	91 e0       	ldi	r25, 0x01	; 1
    1976:	09 f4       	brne	.+2      	; 0x197a <__addsf3x+0xb2>
    1978:	9e ef       	ldi	r25, 0xFE	; 254
    197a:	91 d1       	rcall	.+802    	; 0x1c9e <__fp_pscB>
    197c:	28 f0       	brcs	.+10     	; 0x1988 <__addsf3x+0xc0>
    197e:	40 e8       	ldi	r20, 0x80	; 128
    1980:	51 e0       	ldi	r21, 0x01	; 1
    1982:	59 f4       	brne	.+22     	; 0x199a <atan2+0xe>
    1984:	5e ef       	ldi	r21, 0xFE	; 254
    1986:	09 c0       	rjmp	.+18     	; 0x199a <atan2+0xe>
    1988:	5b c1       	rjmp	.+694    	; 0x1c40 <__fp_nan>
    198a:	fc c1       	rjmp	.+1016   	; 0x1d84 <__fp_zero>

0000198c <atan2>:
    198c:	e9 2f       	mov	r30, r25
    198e:	e0 78       	andi	r30, 0x80	; 128
    1990:	d7 d1       	rcall	.+942    	; 0x1d40 <__fp_split3>
    1992:	68 f3       	brcs	.-38     	; 0x196e <__addsf3x+0xa6>
    1994:	09 2e       	mov	r0, r25
    1996:	05 2a       	or	r0, r21
    1998:	c1 f3       	breq	.-16     	; 0x198a <__addsf3x+0xc2>
    199a:	26 17       	cp	r18, r22
    199c:	37 07       	cpc	r19, r23
    199e:	48 07       	cpc	r20, r24
    19a0:	59 07       	cpc	r21, r25
    19a2:	38 f0       	brcs	.+14     	; 0x19b2 <atan2+0x26>
    19a4:	0e 2e       	mov	r0, r30
    19a6:	07 f8       	bld	r0, 7
    19a8:	e0 25       	eor	r30, r0
    19aa:	69 f0       	breq	.+26     	; 0x19c6 <atan2+0x3a>
    19ac:	e0 25       	eor	r30, r0
    19ae:	e0 64       	ori	r30, 0x40	; 64
    19b0:	0a c0       	rjmp	.+20     	; 0x19c6 <atan2+0x3a>
    19b2:	ef 63       	ori	r30, 0x3F	; 63
    19b4:	07 f8       	bld	r0, 7
    19b6:	00 94       	com	r0
    19b8:	07 fa       	bst	r0, 7
    19ba:	db 01       	movw	r26, r22
    19bc:	b9 01       	movw	r22, r18
    19be:	9d 01       	movw	r18, r26
    19c0:	dc 01       	movw	r26, r24
    19c2:	ca 01       	movw	r24, r20
    19c4:	ad 01       	movw	r20, r26
    19c6:	ef 93       	push	r30
    19c8:	4a d0       	rcall	.+148    	; 0x1a5e <__divsf3_pse>
    19ca:	98 d1       	rcall	.+816    	; 0x1cfc <__fp_round>
    19cc:	0a d0       	rcall	.+20     	; 0x19e2 <atan>
    19ce:	5f 91       	pop	r21
    19d0:	55 23       	and	r21, r21
    19d2:	31 f0       	breq	.+12     	; 0x19e0 <atan2+0x54>
    19d4:	2b ed       	ldi	r18, 0xDB	; 219
    19d6:	3f e0       	ldi	r19, 0x0F	; 15
    19d8:	49 e4       	ldi	r20, 0x49	; 73
    19da:	50 fd       	sbrc	r21, 0
    19dc:	49 ec       	ldi	r20, 0xC9	; 201
    19de:	63 cf       	rjmp	.-314    	; 0x18a6 <__addsf3>
    19e0:	08 95       	ret

000019e2 <atan>:
    19e2:	df 93       	push	r29
    19e4:	dd 27       	eor	r29, r29
    19e6:	b9 2f       	mov	r27, r25
    19e8:	bf 77       	andi	r27, 0x7F	; 127
    19ea:	40 e8       	ldi	r20, 0x80	; 128
    19ec:	5f e3       	ldi	r21, 0x3F	; 63
    19ee:	16 16       	cp	r1, r22
    19f0:	17 06       	cpc	r1, r23
    19f2:	48 07       	cpc	r20, r24
    19f4:	5b 07       	cpc	r21, r27
    19f6:	10 f4       	brcc	.+4      	; 0x19fc <atan+0x1a>
    19f8:	d9 2f       	mov	r29, r25
    19fa:	cf d1       	rcall	.+926    	; 0x1d9a <inverse>
    19fc:	9f 93       	push	r25
    19fe:	8f 93       	push	r24
    1a00:	7f 93       	push	r23
    1a02:	6f 93       	push	r22
    1a04:	7c d2       	rcall	.+1272   	; 0x1efe <square>
    1a06:	ec ea       	ldi	r30, 0xAC	; 172
    1a08:	f0 e0       	ldi	r31, 0x00	; 0
    1a0a:	1d d1       	rcall	.+570    	; 0x1c46 <__fp_powser>
    1a0c:	77 d1       	rcall	.+750    	; 0x1cfc <__fp_round>
    1a0e:	2f 91       	pop	r18
    1a10:	3f 91       	pop	r19
    1a12:	4f 91       	pop	r20
    1a14:	5f 91       	pop	r21
    1a16:	d4 d1       	rcall	.+936    	; 0x1dc0 <__mulsf3x>
    1a18:	dd 23       	and	r29, r29
    1a1a:	49 f0       	breq	.+18     	; 0x1a2e <atan+0x4c>
    1a1c:	90 58       	subi	r25, 0x80	; 128
    1a1e:	a2 ea       	ldi	r26, 0xA2	; 162
    1a20:	2a ed       	ldi	r18, 0xDA	; 218
    1a22:	3f e0       	ldi	r19, 0x0F	; 15
    1a24:	49 ec       	ldi	r20, 0xC9	; 201
    1a26:	5f e3       	ldi	r21, 0x3F	; 63
    1a28:	d0 78       	andi	r29, 0x80	; 128
    1a2a:	5d 27       	eor	r21, r29
    1a2c:	4d df       	rcall	.-358    	; 0x18c8 <__addsf3x>
    1a2e:	df 91       	pop	r29
    1a30:	65 c1       	rjmp	.+714    	; 0x1cfc <__fp_round>

00001a32 <__cmpsf2>:
    1a32:	dc d0       	rcall	.+440    	; 0x1bec <__fp_cmp>
    1a34:	08 f4       	brcc	.+2      	; 0x1a38 <__cmpsf2+0x6>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	08 95       	ret

00001a3a <cos>:
    1a3a:	39 d1       	rcall	.+626    	; 0x1cae <__fp_rempio2>
    1a3c:	e3 95       	inc	r30
    1a3e:	6f c1       	rjmp	.+734    	; 0x1d1e <__fp_sinus>

00001a40 <__divsf3>:
    1a40:	0c d0       	rcall	.+24     	; 0x1a5a <__divsf3x>
    1a42:	5c c1       	rjmp	.+696    	; 0x1cfc <__fp_round>
    1a44:	2c d1       	rcall	.+600    	; 0x1c9e <__fp_pscB>
    1a46:	40 f0       	brcs	.+16     	; 0x1a58 <__divsf3+0x18>
    1a48:	23 d1       	rcall	.+582    	; 0x1c90 <__fp_pscA>
    1a4a:	30 f0       	brcs	.+12     	; 0x1a58 <__divsf3+0x18>
    1a4c:	21 f4       	brne	.+8      	; 0x1a56 <__divsf3+0x16>
    1a4e:	5f 3f       	cpi	r21, 0xFF	; 255
    1a50:	19 f0       	breq	.+6      	; 0x1a58 <__divsf3+0x18>
    1a52:	f0 c0       	rjmp	.+480    	; 0x1c34 <__fp_inf>
    1a54:	51 11       	cpse	r21, r1
    1a56:	97 c1       	rjmp	.+814    	; 0x1d86 <__fp_szero>
    1a58:	f3 c0       	rjmp	.+486    	; 0x1c40 <__fp_nan>

00001a5a <__divsf3x>:
    1a5a:	72 d1       	rcall	.+740    	; 0x1d40 <__fp_split3>
    1a5c:	98 f3       	brcs	.-26     	; 0x1a44 <__divsf3+0x4>

00001a5e <__divsf3_pse>:
    1a5e:	99 23       	and	r25, r25
    1a60:	c9 f3       	breq	.-14     	; 0x1a54 <__divsf3+0x14>
    1a62:	55 23       	and	r21, r21
    1a64:	b1 f3       	breq	.-20     	; 0x1a52 <__divsf3+0x12>
    1a66:	95 1b       	sub	r25, r21
    1a68:	55 0b       	sbc	r21, r21
    1a6a:	bb 27       	eor	r27, r27
    1a6c:	aa 27       	eor	r26, r26
    1a6e:	62 17       	cp	r22, r18
    1a70:	73 07       	cpc	r23, r19
    1a72:	84 07       	cpc	r24, r20
    1a74:	38 f0       	brcs	.+14     	; 0x1a84 <__divsf3_pse+0x26>
    1a76:	9f 5f       	subi	r25, 0xFF	; 255
    1a78:	5f 4f       	sbci	r21, 0xFF	; 255
    1a7a:	22 0f       	add	r18, r18
    1a7c:	33 1f       	adc	r19, r19
    1a7e:	44 1f       	adc	r20, r20
    1a80:	aa 1f       	adc	r26, r26
    1a82:	a9 f3       	breq	.-22     	; 0x1a6e <__divsf3_pse+0x10>
    1a84:	33 d0       	rcall	.+102    	; 0x1aec <__divsf3_pse+0x8e>
    1a86:	0e 2e       	mov	r0, r30
    1a88:	3a f0       	brmi	.+14     	; 0x1a98 <__divsf3_pse+0x3a>
    1a8a:	e0 e8       	ldi	r30, 0x80	; 128
    1a8c:	30 d0       	rcall	.+96     	; 0x1aee <__divsf3_pse+0x90>
    1a8e:	91 50       	subi	r25, 0x01	; 1
    1a90:	50 40       	sbci	r21, 0x00	; 0
    1a92:	e6 95       	lsr	r30
    1a94:	00 1c       	adc	r0, r0
    1a96:	ca f7       	brpl	.-14     	; 0x1a8a <__divsf3_pse+0x2c>
    1a98:	29 d0       	rcall	.+82     	; 0x1aec <__divsf3_pse+0x8e>
    1a9a:	fe 2f       	mov	r31, r30
    1a9c:	27 d0       	rcall	.+78     	; 0x1aec <__divsf3_pse+0x8e>
    1a9e:	66 0f       	add	r22, r22
    1aa0:	77 1f       	adc	r23, r23
    1aa2:	88 1f       	adc	r24, r24
    1aa4:	bb 1f       	adc	r27, r27
    1aa6:	26 17       	cp	r18, r22
    1aa8:	37 07       	cpc	r19, r23
    1aaa:	48 07       	cpc	r20, r24
    1aac:	ab 07       	cpc	r26, r27
    1aae:	b0 e8       	ldi	r27, 0x80	; 128
    1ab0:	09 f0       	breq	.+2      	; 0x1ab4 <__divsf3_pse+0x56>
    1ab2:	bb 0b       	sbc	r27, r27
    1ab4:	80 2d       	mov	r24, r0
    1ab6:	bf 01       	movw	r22, r30
    1ab8:	ff 27       	eor	r31, r31
    1aba:	93 58       	subi	r25, 0x83	; 131
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	2a f0       	brmi	.+10     	; 0x1aca <__divsf3_pse+0x6c>
    1ac0:	9e 3f       	cpi	r25, 0xFE	; 254
    1ac2:	51 05       	cpc	r21, r1
    1ac4:	68 f0       	brcs	.+26     	; 0x1ae0 <__divsf3_pse+0x82>
    1ac6:	b6 c0       	rjmp	.+364    	; 0x1c34 <__fp_inf>
    1ac8:	5e c1       	rjmp	.+700    	; 0x1d86 <__fp_szero>
    1aca:	5f 3f       	cpi	r21, 0xFF	; 255
    1acc:	ec f3       	brlt	.-6      	; 0x1ac8 <__divsf3_pse+0x6a>
    1ace:	98 3e       	cpi	r25, 0xE8	; 232
    1ad0:	dc f3       	brlt	.-10     	; 0x1ac8 <__divsf3_pse+0x6a>
    1ad2:	86 95       	lsr	r24
    1ad4:	77 95       	ror	r23
    1ad6:	67 95       	ror	r22
    1ad8:	b7 95       	ror	r27
    1ada:	f7 95       	ror	r31
    1adc:	9f 5f       	subi	r25, 0xFF	; 255
    1ade:	c9 f7       	brne	.-14     	; 0x1ad2 <__divsf3_pse+0x74>
    1ae0:	88 0f       	add	r24, r24
    1ae2:	91 1d       	adc	r25, r1
    1ae4:	96 95       	lsr	r25
    1ae6:	87 95       	ror	r24
    1ae8:	97 f9       	bld	r25, 7
    1aea:	08 95       	ret
    1aec:	e1 e0       	ldi	r30, 0x01	; 1
    1aee:	66 0f       	add	r22, r22
    1af0:	77 1f       	adc	r23, r23
    1af2:	88 1f       	adc	r24, r24
    1af4:	bb 1f       	adc	r27, r27
    1af6:	62 17       	cp	r22, r18
    1af8:	73 07       	cpc	r23, r19
    1afa:	84 07       	cpc	r24, r20
    1afc:	ba 07       	cpc	r27, r26
    1afe:	20 f0       	brcs	.+8      	; 0x1b08 <__divsf3_pse+0xaa>
    1b00:	62 1b       	sub	r22, r18
    1b02:	73 0b       	sbc	r23, r19
    1b04:	84 0b       	sbc	r24, r20
    1b06:	ba 0b       	sbc	r27, r26
    1b08:	ee 1f       	adc	r30, r30
    1b0a:	88 f7       	brcc	.-30     	; 0x1aee <__divsf3_pse+0x90>
    1b0c:	e0 95       	com	r30
    1b0e:	08 95       	ret

00001b10 <__fixsfsi>:
    1b10:	04 d0       	rcall	.+8      	; 0x1b1a <__fixunssfsi>
    1b12:	68 94       	set
    1b14:	b1 11       	cpse	r27, r1
    1b16:	37 c1       	rjmp	.+622    	; 0x1d86 <__fp_szero>
    1b18:	08 95       	ret

00001b1a <__fixunssfsi>:
    1b1a:	1a d1       	rcall	.+564    	; 0x1d50 <__fp_splitA>
    1b1c:	88 f0       	brcs	.+34     	; 0x1b40 <__fixunssfsi+0x26>
    1b1e:	9f 57       	subi	r25, 0x7F	; 127
    1b20:	90 f0       	brcs	.+36     	; 0x1b46 <__fixunssfsi+0x2c>
    1b22:	b9 2f       	mov	r27, r25
    1b24:	99 27       	eor	r25, r25
    1b26:	b7 51       	subi	r27, 0x17	; 23
    1b28:	a0 f0       	brcs	.+40     	; 0x1b52 <__fixunssfsi+0x38>
    1b2a:	d1 f0       	breq	.+52     	; 0x1b60 <__fixunssfsi+0x46>
    1b2c:	66 0f       	add	r22, r22
    1b2e:	77 1f       	adc	r23, r23
    1b30:	88 1f       	adc	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	1a f0       	brmi	.+6      	; 0x1b3c <__fixunssfsi+0x22>
    1b36:	ba 95       	dec	r27
    1b38:	c9 f7       	brne	.-14     	; 0x1b2c <__fixunssfsi+0x12>
    1b3a:	12 c0       	rjmp	.+36     	; 0x1b60 <__fixunssfsi+0x46>
    1b3c:	b1 30       	cpi	r27, 0x01	; 1
    1b3e:	81 f0       	breq	.+32     	; 0x1b60 <__fixunssfsi+0x46>
    1b40:	21 d1       	rcall	.+578    	; 0x1d84 <__fp_zero>
    1b42:	b1 e0       	ldi	r27, 0x01	; 1
    1b44:	08 95       	ret
    1b46:	1e c1       	rjmp	.+572    	; 0x1d84 <__fp_zero>
    1b48:	67 2f       	mov	r22, r23
    1b4a:	78 2f       	mov	r23, r24
    1b4c:	88 27       	eor	r24, r24
    1b4e:	b8 5f       	subi	r27, 0xF8	; 248
    1b50:	39 f0       	breq	.+14     	; 0x1b60 <__fixunssfsi+0x46>
    1b52:	b9 3f       	cpi	r27, 0xF9	; 249
    1b54:	cc f3       	brlt	.-14     	; 0x1b48 <__fixunssfsi+0x2e>
    1b56:	86 95       	lsr	r24
    1b58:	77 95       	ror	r23
    1b5a:	67 95       	ror	r22
    1b5c:	b3 95       	inc	r27
    1b5e:	d9 f7       	brne	.-10     	; 0x1b56 <__fixunssfsi+0x3c>
    1b60:	3e f4       	brtc	.+14     	; 0x1b70 <__fixunssfsi+0x56>
    1b62:	90 95       	com	r25
    1b64:	80 95       	com	r24
    1b66:	70 95       	com	r23
    1b68:	61 95       	neg	r22
    1b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b70:	08 95       	ret

00001b72 <__floatunsisf>:
    1b72:	e8 94       	clt
    1b74:	09 c0       	rjmp	.+18     	; 0x1b88 <__floatsisf+0x12>

00001b76 <__floatsisf>:
    1b76:	97 fb       	bst	r25, 7
    1b78:	3e f4       	brtc	.+14     	; 0x1b88 <__floatsisf+0x12>
    1b7a:	90 95       	com	r25
    1b7c:	80 95       	com	r24
    1b7e:	70 95       	com	r23
    1b80:	61 95       	neg	r22
    1b82:	7f 4f       	sbci	r23, 0xFF	; 255
    1b84:	8f 4f       	sbci	r24, 0xFF	; 255
    1b86:	9f 4f       	sbci	r25, 0xFF	; 255
    1b88:	99 23       	and	r25, r25
    1b8a:	a9 f0       	breq	.+42     	; 0x1bb6 <__floatsisf+0x40>
    1b8c:	f9 2f       	mov	r31, r25
    1b8e:	96 e9       	ldi	r25, 0x96	; 150
    1b90:	bb 27       	eor	r27, r27
    1b92:	93 95       	inc	r25
    1b94:	f6 95       	lsr	r31
    1b96:	87 95       	ror	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b7 95       	ror	r27
    1b9e:	f1 11       	cpse	r31, r1
    1ba0:	f8 cf       	rjmp	.-16     	; 0x1b92 <__floatsisf+0x1c>
    1ba2:	fa f4       	brpl	.+62     	; 0x1be2 <__floatsisf+0x6c>
    1ba4:	bb 0f       	add	r27, r27
    1ba6:	11 f4       	brne	.+4      	; 0x1bac <__floatsisf+0x36>
    1ba8:	60 ff       	sbrs	r22, 0
    1baa:	1b c0       	rjmp	.+54     	; 0x1be2 <__floatsisf+0x6c>
    1bac:	6f 5f       	subi	r22, 0xFF	; 255
    1bae:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb4:	16 c0       	rjmp	.+44     	; 0x1be2 <__floatsisf+0x6c>
    1bb6:	88 23       	and	r24, r24
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <__floatsisf+0x48>
    1bba:	96 e9       	ldi	r25, 0x96	; 150
    1bbc:	11 c0       	rjmp	.+34     	; 0x1be0 <__floatsisf+0x6a>
    1bbe:	77 23       	and	r23, r23
    1bc0:	21 f0       	breq	.+8      	; 0x1bca <__floatsisf+0x54>
    1bc2:	9e e8       	ldi	r25, 0x8E	; 142
    1bc4:	87 2f       	mov	r24, r23
    1bc6:	76 2f       	mov	r23, r22
    1bc8:	05 c0       	rjmp	.+10     	; 0x1bd4 <__floatsisf+0x5e>
    1bca:	66 23       	and	r22, r22
    1bcc:	71 f0       	breq	.+28     	; 0x1bea <__floatsisf+0x74>
    1bce:	96 e8       	ldi	r25, 0x86	; 134
    1bd0:	86 2f       	mov	r24, r22
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	60 e0       	ldi	r22, 0x00	; 0
    1bd6:	2a f0       	brmi	.+10     	; 0x1be2 <__floatsisf+0x6c>
    1bd8:	9a 95       	dec	r25
    1bda:	66 0f       	add	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	da f7       	brpl	.-10     	; 0x1bd8 <__floatsisf+0x62>
    1be2:	88 0f       	add	r24, r24
    1be4:	96 95       	lsr	r25
    1be6:	87 95       	ror	r24
    1be8:	97 f9       	bld	r25, 7
    1bea:	08 95       	ret

00001bec <__fp_cmp>:
    1bec:	99 0f       	add	r25, r25
    1bee:	00 08       	sbc	r0, r0
    1bf0:	55 0f       	add	r21, r21
    1bf2:	aa 0b       	sbc	r26, r26
    1bf4:	e0 e8       	ldi	r30, 0x80	; 128
    1bf6:	fe ef       	ldi	r31, 0xFE	; 254
    1bf8:	16 16       	cp	r1, r22
    1bfa:	17 06       	cpc	r1, r23
    1bfc:	e8 07       	cpc	r30, r24
    1bfe:	f9 07       	cpc	r31, r25
    1c00:	c0 f0       	brcs	.+48     	; 0x1c32 <__fp_cmp+0x46>
    1c02:	12 16       	cp	r1, r18
    1c04:	13 06       	cpc	r1, r19
    1c06:	e4 07       	cpc	r30, r20
    1c08:	f5 07       	cpc	r31, r21
    1c0a:	98 f0       	brcs	.+38     	; 0x1c32 <__fp_cmp+0x46>
    1c0c:	62 1b       	sub	r22, r18
    1c0e:	73 0b       	sbc	r23, r19
    1c10:	84 0b       	sbc	r24, r20
    1c12:	95 0b       	sbc	r25, r21
    1c14:	39 f4       	brne	.+14     	; 0x1c24 <__fp_cmp+0x38>
    1c16:	0a 26       	eor	r0, r26
    1c18:	61 f0       	breq	.+24     	; 0x1c32 <__fp_cmp+0x46>
    1c1a:	23 2b       	or	r18, r19
    1c1c:	24 2b       	or	r18, r20
    1c1e:	25 2b       	or	r18, r21
    1c20:	21 f4       	brne	.+8      	; 0x1c2a <__fp_cmp+0x3e>
    1c22:	08 95       	ret
    1c24:	0a 26       	eor	r0, r26
    1c26:	09 f4       	brne	.+2      	; 0x1c2a <__fp_cmp+0x3e>
    1c28:	a1 40       	sbci	r26, 0x01	; 1
    1c2a:	a6 95       	lsr	r26
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	81 1d       	adc	r24, r1
    1c30:	81 1d       	adc	r24, r1
    1c32:	08 95       	ret

00001c34 <__fp_inf>:
    1c34:	97 f9       	bld	r25, 7
    1c36:	9f 67       	ori	r25, 0x7F	; 127
    1c38:	80 e8       	ldi	r24, 0x80	; 128
    1c3a:	70 e0       	ldi	r23, 0x00	; 0
    1c3c:	60 e0       	ldi	r22, 0x00	; 0
    1c3e:	08 95       	ret

00001c40 <__fp_nan>:
    1c40:	9f ef       	ldi	r25, 0xFF	; 255
    1c42:	80 ec       	ldi	r24, 0xC0	; 192
    1c44:	08 95       	ret

00001c46 <__fp_powser>:
    1c46:	df 93       	push	r29
    1c48:	cf 93       	push	r28
    1c4a:	1f 93       	push	r17
    1c4c:	0f 93       	push	r16
    1c4e:	ff 92       	push	r15
    1c50:	ef 92       	push	r14
    1c52:	df 92       	push	r13
    1c54:	7b 01       	movw	r14, r22
    1c56:	8c 01       	movw	r16, r24
    1c58:	68 94       	set
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <__fp_powser+0x20>
    1c5c:	da 2e       	mov	r13, r26
    1c5e:	ef 01       	movw	r28, r30
    1c60:	af d0       	rcall	.+350    	; 0x1dc0 <__mulsf3x>
    1c62:	fe 01       	movw	r30, r28
    1c64:	e8 94       	clt
    1c66:	a5 91       	lpm	r26, Z+
    1c68:	25 91       	lpm	r18, Z+
    1c6a:	35 91       	lpm	r19, Z+
    1c6c:	45 91       	lpm	r20, Z+
    1c6e:	55 91       	lpm	r21, Z+
    1c70:	ae f3       	brts	.-22     	; 0x1c5c <__fp_powser+0x16>
    1c72:	ef 01       	movw	r28, r30
    1c74:	29 de       	rcall	.-942    	; 0x18c8 <__addsf3x>
    1c76:	fe 01       	movw	r30, r28
    1c78:	97 01       	movw	r18, r14
    1c7a:	a8 01       	movw	r20, r16
    1c7c:	da 94       	dec	r13
    1c7e:	79 f7       	brne	.-34     	; 0x1c5e <__fp_powser+0x18>
    1c80:	df 90       	pop	r13
    1c82:	ef 90       	pop	r14
    1c84:	ff 90       	pop	r15
    1c86:	0f 91       	pop	r16
    1c88:	1f 91       	pop	r17
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <__fp_pscA>:
    1c90:	00 24       	eor	r0, r0
    1c92:	0a 94       	dec	r0
    1c94:	16 16       	cp	r1, r22
    1c96:	17 06       	cpc	r1, r23
    1c98:	18 06       	cpc	r1, r24
    1c9a:	09 06       	cpc	r0, r25
    1c9c:	08 95       	ret

00001c9e <__fp_pscB>:
    1c9e:	00 24       	eor	r0, r0
    1ca0:	0a 94       	dec	r0
    1ca2:	12 16       	cp	r1, r18
    1ca4:	13 06       	cpc	r1, r19
    1ca6:	14 06       	cpc	r1, r20
    1ca8:	05 06       	cpc	r0, r21
    1caa:	08 95       	ret
    1cac:	c9 cf       	rjmp	.-110    	; 0x1c40 <__fp_nan>

00001cae <__fp_rempio2>:
    1cae:	50 d0       	rcall	.+160    	; 0x1d50 <__fp_splitA>
    1cb0:	e8 f3       	brcs	.-6      	; 0x1cac <__fp_pscB+0xe>
    1cb2:	e8 94       	clt
    1cb4:	e0 e0       	ldi	r30, 0x00	; 0
    1cb6:	bb 27       	eor	r27, r27
    1cb8:	9f 57       	subi	r25, 0x7F	; 127
    1cba:	f0 f0       	brcs	.+60     	; 0x1cf8 <__fp_rempio2+0x4a>
    1cbc:	2a ed       	ldi	r18, 0xDA	; 218
    1cbe:	3f e0       	ldi	r19, 0x0F	; 15
    1cc0:	49 ec       	ldi	r20, 0xC9	; 201
    1cc2:	06 c0       	rjmp	.+12     	; 0x1cd0 <__fp_rempio2+0x22>
    1cc4:	ee 0f       	add	r30, r30
    1cc6:	bb 0f       	add	r27, r27
    1cc8:	66 1f       	adc	r22, r22
    1cca:	77 1f       	adc	r23, r23
    1ccc:	88 1f       	adc	r24, r24
    1cce:	28 f0       	brcs	.+10     	; 0x1cda <__fp_rempio2+0x2c>
    1cd0:	b2 3a       	cpi	r27, 0xA2	; 162
    1cd2:	62 07       	cpc	r22, r18
    1cd4:	73 07       	cpc	r23, r19
    1cd6:	84 07       	cpc	r24, r20
    1cd8:	28 f0       	brcs	.+10     	; 0x1ce4 <__fp_rempio2+0x36>
    1cda:	b2 5a       	subi	r27, 0xA2	; 162
    1cdc:	62 0b       	sbc	r22, r18
    1cde:	73 0b       	sbc	r23, r19
    1ce0:	84 0b       	sbc	r24, r20
    1ce2:	e3 95       	inc	r30
    1ce4:	9a 95       	dec	r25
    1ce6:	72 f7       	brpl	.-36     	; 0x1cc4 <__fp_rempio2+0x16>
    1ce8:	80 38       	cpi	r24, 0x80	; 128
    1cea:	30 f4       	brcc	.+12     	; 0x1cf8 <__fp_rempio2+0x4a>
    1cec:	9a 95       	dec	r25
    1cee:	bb 0f       	add	r27, r27
    1cf0:	66 1f       	adc	r22, r22
    1cf2:	77 1f       	adc	r23, r23
    1cf4:	88 1f       	adc	r24, r24
    1cf6:	d2 f7       	brpl	.-12     	; 0x1cec <__fp_rempio2+0x3e>
    1cf8:	90 48       	sbci	r25, 0x80	; 128
    1cfa:	06 c1       	rjmp	.+524    	; 0x1f08 <__fp_mpack_finite>

00001cfc <__fp_round>:
    1cfc:	09 2e       	mov	r0, r25
    1cfe:	03 94       	inc	r0
    1d00:	00 0c       	add	r0, r0
    1d02:	11 f4       	brne	.+4      	; 0x1d08 <__fp_round+0xc>
    1d04:	88 23       	and	r24, r24
    1d06:	52 f0       	brmi	.+20     	; 0x1d1c <__fp_round+0x20>
    1d08:	bb 0f       	add	r27, r27
    1d0a:	40 f4       	brcc	.+16     	; 0x1d1c <__fp_round+0x20>
    1d0c:	bf 2b       	or	r27, r31
    1d0e:	11 f4       	brne	.+4      	; 0x1d14 <__fp_round+0x18>
    1d10:	60 ff       	sbrs	r22, 0
    1d12:	04 c0       	rjmp	.+8      	; 0x1d1c <__fp_round+0x20>
    1d14:	6f 5f       	subi	r22, 0xFF	; 255
    1d16:	7f 4f       	sbci	r23, 0xFF	; 255
    1d18:	8f 4f       	sbci	r24, 0xFF	; 255
    1d1a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d1c:	08 95       	ret

00001d1e <__fp_sinus>:
    1d1e:	ef 93       	push	r30
    1d20:	e0 ff       	sbrs	r30, 0
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <__fp_sinus+0x12>
    1d24:	a2 ea       	ldi	r26, 0xA2	; 162
    1d26:	2a ed       	ldi	r18, 0xDA	; 218
    1d28:	3f e0       	ldi	r19, 0x0F	; 15
    1d2a:	49 ec       	ldi	r20, 0xC9	; 201
    1d2c:	5f eb       	ldi	r21, 0xBF	; 191
    1d2e:	cc dd       	rcall	.-1128   	; 0x18c8 <__addsf3x>
    1d30:	e5 df       	rcall	.-54     	; 0x1cfc <__fp_round>
    1d32:	0f 90       	pop	r0
    1d34:	03 94       	inc	r0
    1d36:	01 fc       	sbrc	r0, 1
    1d38:	90 58       	subi	r25, 0x80	; 128
    1d3a:	e9 ed       	ldi	r30, 0xD9	; 217
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	f7 c0       	rjmp	.+494    	; 0x1f2e <__fp_powsodd>

00001d40 <__fp_split3>:
    1d40:	57 fd       	sbrc	r21, 7
    1d42:	90 58       	subi	r25, 0x80	; 128
    1d44:	44 0f       	add	r20, r20
    1d46:	55 1f       	adc	r21, r21
    1d48:	59 f0       	breq	.+22     	; 0x1d60 <__fp_splitA+0x10>
    1d4a:	5f 3f       	cpi	r21, 0xFF	; 255
    1d4c:	71 f0       	breq	.+28     	; 0x1d6a <__fp_splitA+0x1a>
    1d4e:	47 95       	ror	r20

00001d50 <__fp_splitA>:
    1d50:	88 0f       	add	r24, r24
    1d52:	97 fb       	bst	r25, 7
    1d54:	99 1f       	adc	r25, r25
    1d56:	61 f0       	breq	.+24     	; 0x1d70 <__fp_splitA+0x20>
    1d58:	9f 3f       	cpi	r25, 0xFF	; 255
    1d5a:	79 f0       	breq	.+30     	; 0x1d7a <__fp_splitA+0x2a>
    1d5c:	87 95       	ror	r24
    1d5e:	08 95       	ret
    1d60:	12 16       	cp	r1, r18
    1d62:	13 06       	cpc	r1, r19
    1d64:	14 06       	cpc	r1, r20
    1d66:	55 1f       	adc	r21, r21
    1d68:	f2 cf       	rjmp	.-28     	; 0x1d4e <__fp_split3+0xe>
    1d6a:	46 95       	lsr	r20
    1d6c:	f1 df       	rcall	.-30     	; 0x1d50 <__fp_splitA>
    1d6e:	08 c0       	rjmp	.+16     	; 0x1d80 <__fp_splitA+0x30>
    1d70:	16 16       	cp	r1, r22
    1d72:	17 06       	cpc	r1, r23
    1d74:	18 06       	cpc	r1, r24
    1d76:	99 1f       	adc	r25, r25
    1d78:	f1 cf       	rjmp	.-30     	; 0x1d5c <__fp_splitA+0xc>
    1d7a:	86 95       	lsr	r24
    1d7c:	71 05       	cpc	r23, r1
    1d7e:	61 05       	cpc	r22, r1
    1d80:	08 94       	sec
    1d82:	08 95       	ret

00001d84 <__fp_zero>:
    1d84:	e8 94       	clt

00001d86 <__fp_szero>:
    1d86:	bb 27       	eor	r27, r27
    1d88:	66 27       	eor	r22, r22
    1d8a:	77 27       	eor	r23, r23
    1d8c:	cb 01       	movw	r24, r22
    1d8e:	97 f9       	bld	r25, 7
    1d90:	08 95       	ret

00001d92 <__gesf2>:
    1d92:	2c df       	rcall	.-424    	; 0x1bec <__fp_cmp>
    1d94:	08 f4       	brcc	.+2      	; 0x1d98 <__gesf2+0x6>
    1d96:	8f ef       	ldi	r24, 0xFF	; 255
    1d98:	08 95       	ret

00001d9a <inverse>:
    1d9a:	9b 01       	movw	r18, r22
    1d9c:	ac 01       	movw	r20, r24
    1d9e:	60 e0       	ldi	r22, 0x00	; 0
    1da0:	70 e0       	ldi	r23, 0x00	; 0
    1da2:	80 e8       	ldi	r24, 0x80	; 128
    1da4:	9f e3       	ldi	r25, 0x3F	; 63
    1da6:	4c ce       	rjmp	.-872    	; 0x1a40 <__divsf3>

00001da8 <__mulsf3>:
    1da8:	0b d0       	rcall	.+22     	; 0x1dc0 <__mulsf3x>
    1daa:	a8 cf       	rjmp	.-176    	; 0x1cfc <__fp_round>
    1dac:	71 df       	rcall	.-286    	; 0x1c90 <__fp_pscA>
    1dae:	28 f0       	brcs	.+10     	; 0x1dba <__mulsf3+0x12>
    1db0:	76 df       	rcall	.-276    	; 0x1c9e <__fp_pscB>
    1db2:	18 f0       	brcs	.+6      	; 0x1dba <__mulsf3+0x12>
    1db4:	95 23       	and	r25, r21
    1db6:	09 f0       	breq	.+2      	; 0x1dba <__mulsf3+0x12>
    1db8:	3d cf       	rjmp	.-390    	; 0x1c34 <__fp_inf>
    1dba:	42 cf       	rjmp	.-380    	; 0x1c40 <__fp_nan>
    1dbc:	11 24       	eor	r1, r1
    1dbe:	e3 cf       	rjmp	.-58     	; 0x1d86 <__fp_szero>

00001dc0 <__mulsf3x>:
    1dc0:	bf df       	rcall	.-130    	; 0x1d40 <__fp_split3>
    1dc2:	a0 f3       	brcs	.-24     	; 0x1dac <__mulsf3+0x4>

00001dc4 <__mulsf3_pse>:
    1dc4:	95 9f       	mul	r25, r21
    1dc6:	d1 f3       	breq	.-12     	; 0x1dbc <__mulsf3+0x14>
    1dc8:	95 0f       	add	r25, r21
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	55 1f       	adc	r21, r21
    1dce:	62 9f       	mul	r22, r18
    1dd0:	f0 01       	movw	r30, r0
    1dd2:	72 9f       	mul	r23, r18
    1dd4:	bb 27       	eor	r27, r27
    1dd6:	f0 0d       	add	r31, r0
    1dd8:	b1 1d       	adc	r27, r1
    1dda:	63 9f       	mul	r22, r19
    1ddc:	aa 27       	eor	r26, r26
    1dde:	f0 0d       	add	r31, r0
    1de0:	b1 1d       	adc	r27, r1
    1de2:	aa 1f       	adc	r26, r26
    1de4:	64 9f       	mul	r22, r20
    1de6:	66 27       	eor	r22, r22
    1de8:	b0 0d       	add	r27, r0
    1dea:	a1 1d       	adc	r26, r1
    1dec:	66 1f       	adc	r22, r22
    1dee:	82 9f       	mul	r24, r18
    1df0:	22 27       	eor	r18, r18
    1df2:	b0 0d       	add	r27, r0
    1df4:	a1 1d       	adc	r26, r1
    1df6:	62 1f       	adc	r22, r18
    1df8:	73 9f       	mul	r23, r19
    1dfa:	b0 0d       	add	r27, r0
    1dfc:	a1 1d       	adc	r26, r1
    1dfe:	62 1f       	adc	r22, r18
    1e00:	83 9f       	mul	r24, r19
    1e02:	a0 0d       	add	r26, r0
    1e04:	61 1d       	adc	r22, r1
    1e06:	22 1f       	adc	r18, r18
    1e08:	74 9f       	mul	r23, r20
    1e0a:	33 27       	eor	r19, r19
    1e0c:	a0 0d       	add	r26, r0
    1e0e:	61 1d       	adc	r22, r1
    1e10:	23 1f       	adc	r18, r19
    1e12:	84 9f       	mul	r24, r20
    1e14:	60 0d       	add	r22, r0
    1e16:	21 1d       	adc	r18, r1
    1e18:	82 2f       	mov	r24, r18
    1e1a:	76 2f       	mov	r23, r22
    1e1c:	6a 2f       	mov	r22, r26
    1e1e:	11 24       	eor	r1, r1
    1e20:	9f 57       	subi	r25, 0x7F	; 127
    1e22:	50 40       	sbci	r21, 0x00	; 0
    1e24:	8a f0       	brmi	.+34     	; 0x1e48 <__mulsf3_pse+0x84>
    1e26:	e1 f0       	breq	.+56     	; 0x1e60 <__mulsf3_pse+0x9c>
    1e28:	88 23       	and	r24, r24
    1e2a:	4a f0       	brmi	.+18     	; 0x1e3e <__mulsf3_pse+0x7a>
    1e2c:	ee 0f       	add	r30, r30
    1e2e:	ff 1f       	adc	r31, r31
    1e30:	bb 1f       	adc	r27, r27
    1e32:	66 1f       	adc	r22, r22
    1e34:	77 1f       	adc	r23, r23
    1e36:	88 1f       	adc	r24, r24
    1e38:	91 50       	subi	r25, 0x01	; 1
    1e3a:	50 40       	sbci	r21, 0x00	; 0
    1e3c:	a9 f7       	brne	.-22     	; 0x1e28 <__mulsf3_pse+0x64>
    1e3e:	9e 3f       	cpi	r25, 0xFE	; 254
    1e40:	51 05       	cpc	r21, r1
    1e42:	70 f0       	brcs	.+28     	; 0x1e60 <__mulsf3_pse+0x9c>
    1e44:	f7 ce       	rjmp	.-530    	; 0x1c34 <__fp_inf>
    1e46:	9f cf       	rjmp	.-194    	; 0x1d86 <__fp_szero>
    1e48:	5f 3f       	cpi	r21, 0xFF	; 255
    1e4a:	ec f3       	brlt	.-6      	; 0x1e46 <__mulsf3_pse+0x82>
    1e4c:	98 3e       	cpi	r25, 0xE8	; 232
    1e4e:	dc f3       	brlt	.-10     	; 0x1e46 <__mulsf3_pse+0x82>
    1e50:	86 95       	lsr	r24
    1e52:	77 95       	ror	r23
    1e54:	67 95       	ror	r22
    1e56:	b7 95       	ror	r27
    1e58:	f7 95       	ror	r31
    1e5a:	e7 95       	ror	r30
    1e5c:	9f 5f       	subi	r25, 0xFF	; 255
    1e5e:	c1 f7       	brne	.-16     	; 0x1e50 <__mulsf3_pse+0x8c>
    1e60:	fe 2b       	or	r31, r30
    1e62:	88 0f       	add	r24, r24
    1e64:	91 1d       	adc	r25, r1
    1e66:	96 95       	lsr	r25
    1e68:	87 95       	ror	r24
    1e6a:	97 f9       	bld	r25, 7
    1e6c:	08 95       	ret

00001e6e <sin>:
    1e6e:	9f 93       	push	r25
    1e70:	1e df       	rcall	.-452    	; 0x1cae <__fp_rempio2>
    1e72:	0f 90       	pop	r0
    1e74:	07 fc       	sbrc	r0, 7
    1e76:	ee 5f       	subi	r30, 0xFE	; 254
    1e78:	52 cf       	rjmp	.-348    	; 0x1d1e <__fp_sinus>
    1e7a:	11 f4       	brne	.+4      	; 0x1e80 <sin+0x12>
    1e7c:	0e f4       	brtc	.+2      	; 0x1e80 <sin+0x12>
    1e7e:	e0 ce       	rjmp	.-576    	; 0x1c40 <__fp_nan>
    1e80:	41 c0       	rjmp	.+130    	; 0x1f04 <__fp_mpack>

00001e82 <sqrt>:
    1e82:	66 df       	rcall	.-308    	; 0x1d50 <__fp_splitA>
    1e84:	d0 f3       	brcs	.-12     	; 0x1e7a <sin+0xc>
    1e86:	99 23       	and	r25, r25
    1e88:	d9 f3       	breq	.-10     	; 0x1e80 <sin+0x12>
    1e8a:	ce f3       	brts	.-14     	; 0x1e7e <sin+0x10>
    1e8c:	9f 57       	subi	r25, 0x7F	; 127
    1e8e:	55 0b       	sbc	r21, r21
    1e90:	87 ff       	sbrs	r24, 7
    1e92:	46 d0       	rcall	.+140    	; 0x1f20 <__fp_norm2>
    1e94:	00 24       	eor	r0, r0
    1e96:	a0 e6       	ldi	r26, 0x60	; 96
    1e98:	40 ea       	ldi	r20, 0xA0	; 160
    1e9a:	90 01       	movw	r18, r0
    1e9c:	80 58       	subi	r24, 0x80	; 128
    1e9e:	56 95       	lsr	r21
    1ea0:	97 95       	ror	r25
    1ea2:	28 f4       	brcc	.+10     	; 0x1eae <sqrt+0x2c>
    1ea4:	80 5c       	subi	r24, 0xC0	; 192
    1ea6:	66 0f       	add	r22, r22
    1ea8:	77 1f       	adc	r23, r23
    1eaa:	88 1f       	adc	r24, r24
    1eac:	20 f0       	brcs	.+8      	; 0x1eb6 <sqrt+0x34>
    1eae:	26 17       	cp	r18, r22
    1eb0:	37 07       	cpc	r19, r23
    1eb2:	48 07       	cpc	r20, r24
    1eb4:	30 f4       	brcc	.+12     	; 0x1ec2 <sqrt+0x40>
    1eb6:	62 1b       	sub	r22, r18
    1eb8:	73 0b       	sbc	r23, r19
    1eba:	84 0b       	sbc	r24, r20
    1ebc:	20 29       	or	r18, r0
    1ebe:	31 29       	or	r19, r1
    1ec0:	4a 2b       	or	r20, r26
    1ec2:	a6 95       	lsr	r26
    1ec4:	17 94       	ror	r1
    1ec6:	07 94       	ror	r0
    1ec8:	20 25       	eor	r18, r0
    1eca:	31 25       	eor	r19, r1
    1ecc:	4a 27       	eor	r20, r26
    1ece:	58 f7       	brcc	.-42     	; 0x1ea6 <sqrt+0x24>
    1ed0:	66 0f       	add	r22, r22
    1ed2:	77 1f       	adc	r23, r23
    1ed4:	88 1f       	adc	r24, r24
    1ed6:	20 f0       	brcs	.+8      	; 0x1ee0 <sqrt+0x5e>
    1ed8:	26 17       	cp	r18, r22
    1eda:	37 07       	cpc	r19, r23
    1edc:	48 07       	cpc	r20, r24
    1ede:	30 f4       	brcc	.+12     	; 0x1eec <sqrt+0x6a>
    1ee0:	62 0b       	sbc	r22, r18
    1ee2:	73 0b       	sbc	r23, r19
    1ee4:	84 0b       	sbc	r24, r20
    1ee6:	20 0d       	add	r18, r0
    1ee8:	31 1d       	adc	r19, r1
    1eea:	41 1d       	adc	r20, r1
    1eec:	a0 95       	com	r26
    1eee:	81 f7       	brne	.-32     	; 0x1ed0 <sqrt+0x4e>
    1ef0:	b9 01       	movw	r22, r18
    1ef2:	84 2f       	mov	r24, r20
    1ef4:	91 58       	subi	r25, 0x81	; 129
    1ef6:	88 0f       	add	r24, r24
    1ef8:	96 95       	lsr	r25
    1efa:	87 95       	ror	r24
    1efc:	08 95       	ret

00001efe <square>:
    1efe:	9b 01       	movw	r18, r22
    1f00:	ac 01       	movw	r20, r24
    1f02:	52 cf       	rjmp	.-348    	; 0x1da8 <__mulsf3>

00001f04 <__fp_mpack>:
    1f04:	9f 3f       	cpi	r25, 0xFF	; 255
    1f06:	31 f0       	breq	.+12     	; 0x1f14 <__fp_mpack_finite+0xc>

00001f08 <__fp_mpack_finite>:
    1f08:	91 50       	subi	r25, 0x01	; 1
    1f0a:	20 f4       	brcc	.+8      	; 0x1f14 <__fp_mpack_finite+0xc>
    1f0c:	87 95       	ror	r24
    1f0e:	77 95       	ror	r23
    1f10:	67 95       	ror	r22
    1f12:	b7 95       	ror	r27
    1f14:	88 0f       	add	r24, r24
    1f16:	91 1d       	adc	r25, r1
    1f18:	96 95       	lsr	r25
    1f1a:	87 95       	ror	r24
    1f1c:	97 f9       	bld	r25, 7
    1f1e:	08 95       	ret

00001f20 <__fp_norm2>:
    1f20:	91 50       	subi	r25, 0x01	; 1
    1f22:	50 40       	sbci	r21, 0x00	; 0
    1f24:	66 0f       	add	r22, r22
    1f26:	77 1f       	adc	r23, r23
    1f28:	88 1f       	adc	r24, r24
    1f2a:	d2 f7       	brpl	.-12     	; 0x1f20 <__fp_norm2>
    1f2c:	08 95       	ret

00001f2e <__fp_powsodd>:
    1f2e:	9f 93       	push	r25
    1f30:	8f 93       	push	r24
    1f32:	7f 93       	push	r23
    1f34:	6f 93       	push	r22
    1f36:	ff 93       	push	r31
    1f38:	ef 93       	push	r30
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	34 df       	rcall	.-408    	; 0x1da8 <__mulsf3>
    1f40:	ef 91       	pop	r30
    1f42:	ff 91       	pop	r31
    1f44:	80 de       	rcall	.-768    	; 0x1c46 <__fp_powser>
    1f46:	2f 91       	pop	r18
    1f48:	3f 91       	pop	r19
    1f4a:	4f 91       	pop	r20
    1f4c:	5f 91       	pop	r21
    1f4e:	2c cf       	rjmp	.-424    	; 0x1da8 <__mulsf3>

00001f50 <__divmodhi4>:
    1f50:	97 fb       	bst	r25, 7
    1f52:	07 2e       	mov	r0, r23
    1f54:	16 f4       	brtc	.+4      	; 0x1f5a <__divmodhi4+0xa>
    1f56:	00 94       	com	r0
    1f58:	07 d0       	rcall	.+14     	; 0x1f68 <__divmodhi4_neg1>
    1f5a:	77 fd       	sbrc	r23, 7
    1f5c:	09 d0       	rcall	.+18     	; 0x1f70 <__divmodhi4_neg2>
    1f5e:	0e 94 bc 0f 	call	0x1f78	; 0x1f78 <__udivmodhi4>
    1f62:	07 fc       	sbrc	r0, 7
    1f64:	05 d0       	rcall	.+10     	; 0x1f70 <__divmodhi4_neg2>
    1f66:	3e f4       	brtc	.+14     	; 0x1f76 <__divmodhi4_exit>

00001f68 <__divmodhi4_neg1>:
    1f68:	90 95       	com	r25
    1f6a:	81 95       	neg	r24
    1f6c:	9f 4f       	sbci	r25, 0xFF	; 255
    1f6e:	08 95       	ret

00001f70 <__divmodhi4_neg2>:
    1f70:	70 95       	com	r23
    1f72:	61 95       	neg	r22
    1f74:	7f 4f       	sbci	r23, 0xFF	; 255

00001f76 <__divmodhi4_exit>:
    1f76:	08 95       	ret

00001f78 <__udivmodhi4>:
    1f78:	aa 1b       	sub	r26, r26
    1f7a:	bb 1b       	sub	r27, r27
    1f7c:	51 e1       	ldi	r21, 0x11	; 17
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <__udivmodhi4_ep>

00001f80 <__udivmodhi4_loop>:
    1f80:	aa 1f       	adc	r26, r26
    1f82:	bb 1f       	adc	r27, r27
    1f84:	a6 17       	cp	r26, r22
    1f86:	b7 07       	cpc	r27, r23
    1f88:	10 f0       	brcs	.+4      	; 0x1f8e <__udivmodhi4_ep>
    1f8a:	a6 1b       	sub	r26, r22
    1f8c:	b7 0b       	sbc	r27, r23

00001f8e <__udivmodhi4_ep>:
    1f8e:	88 1f       	adc	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	5a 95       	dec	r21
    1f94:	a9 f7       	brne	.-22     	; 0x1f80 <__udivmodhi4_loop>
    1f96:	80 95       	com	r24
    1f98:	90 95       	com	r25
    1f9a:	bc 01       	movw	r22, r24
    1f9c:	cd 01       	movw	r24, r26
    1f9e:	08 95       	ret

00001fa0 <_exit>:
    1fa0:	f8 94       	cli

00001fa2 <__stop_program>:
    1fa2:	ff cf       	rjmp	.-2      	; 0x1fa2 <__stop_program>
